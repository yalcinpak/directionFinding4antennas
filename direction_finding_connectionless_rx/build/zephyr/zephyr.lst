
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 9f 00 20 51 4e 00 00 0d 98 01 00 09 4e 00 00     `.. QN.......N..
  10:	09 4e 00 00 09 4e 00 00 09 4e 00 00 00 00 00 00     .N...N...N......
	...
  2c:	85 4a 00 00 09 4e 00 00 00 00 00 00 2d 4a 00 00     .J...N......-J..
  3c:	09 4e 00 00                                         .N..

00000040 <_irq_vector_table>:
  40:	65 4b 00 00 89 c3 01 00 65 4b 00 00 65 4b 00 00     eK......eK..eK..
  50:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  60:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  70:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  80:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  90:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  a0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  b0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  c0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  d0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  e0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..
  f0:	65 4b 00 00 65 4b 00 00 65 4b 00 00 65 4b 00 00     eK..eK..eK..eK..

Disassembly of section text:

00000100 <strlen>:
     100:	f890 f000 	pld	[r0]
     104:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     108:	f020 0107 	bic.w	r1, r0, #7
     10c:	f06f 0c00 	mvn.w	ip, #0
     110:	f010 0407 	ands.w	r4, r0, #7
     114:	f891 f020 	pld	[r1, #32]
     118:	f040 8049 	bne.w	1ae <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x41>
     11c:	f04f 0400 	mov.w	r4, #0
     120:	f06f 0007 	mvn.w	r0, #7
     124:	e9d1 2300 	ldrd	r2, r3, [r1]
     128:	f891 f040 	pld	[r1, #64]	; 0x40
     12c:	f100 0008 	add.w	r0, r0, #8
     130:	fa82 f24c 	uadd8	r2, r2, ip
     134:	faa4 f28c 	sel	r2, r4, ip
     138:	fa83 f34c 	uadd8	r3, r3, ip
     13c:	faa2 f38c 	sel	r3, r2, ip
     140:	bb4b      	cbnz	r3, 196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     142:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     146:	fa82 f24c 	uadd8	r2, r2, ip
     14a:	f100 0008 	add.w	r0, r0, #8
     14e:	faa4 f28c 	sel	r2, r4, ip
     152:	fa83 f34c 	uadd8	r3, r3, ip
     156:	faa2 f38c 	sel	r3, r2, ip
     15a:	b9e3      	cbnz	r3, 196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     15c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     160:	fa82 f24c 	uadd8	r2, r2, ip
     164:	f100 0008 	add.w	r0, r0, #8
     168:	faa4 f28c 	sel	r2, r4, ip
     16c:	fa83 f34c 	uadd8	r3, r3, ip
     170:	faa2 f38c 	sel	r3, r2, ip
     174:	b97b      	cbnz	r3, 196 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x29>
     176:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     17a:	f101 0120 	add.w	r1, r1, #32
     17e:	fa82 f24c 	uadd8	r2, r2, ip
     182:	f100 0008 	add.w	r0, r0, #8
     186:	faa4 f28c 	sel	r2, r4, ip
     18a:	fa83 f34c 	uadd8	r3, r3, ip
     18e:	faa2 f38c 	sel	r3, r2, ip
     192:	2b00      	cmp	r3, #0
     194:	d0c6      	beq.n	124 <strlen+0x24>
     196:	2a00      	cmp	r2, #0
     198:	bf04      	itt	eq
     19a:	3004      	addeq	r0, #4
     19c:	461a      	moveq	r2, r3
     19e:	ba12      	rev	r2, r2
     1a0:	fab2 f282 	clz	r2, r2
     1a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     1a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     1ac:	4770      	bx	lr
     1ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     1b2:	f004 0503 	and.w	r5, r4, #3
     1b6:	f1c4 0000 	rsb	r0, r4, #0
     1ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     1be:	f014 0f04 	tst.w	r4, #4
     1c2:	f891 f040 	pld	[r1, #64]	; 0x40
     1c6:	fa0c f505 	lsl.w	r5, ip, r5
     1ca:	ea62 0205 	orn	r2, r2, r5
     1ce:	bf1c      	itt	ne
     1d0:	ea63 0305 	ornne	r3, r3, r5
     1d4:	4662      	movne	r2, ip
     1d6:	f04f 0400 	mov.w	r4, #0
     1da:	e7a9      	b.n	130 <strlen+0x30>
     1dc:	0000      	movs	r0, r0
     1de:	0000      	movs	r0, r0
     1e0:	eba2 0003 	sub.w	r0, r2, r3
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop

000001e8 <strcmp>:
     1e8:	7802      	ldrb	r2, [r0, #0]
     1ea:	780b      	ldrb	r3, [r1, #0]
     1ec:	2a01      	cmp	r2, #1
     1ee:	bf28      	it	cs
     1f0:	429a      	cmpcs	r2, r3
     1f2:	d1f5      	bne.n	1e0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x20>
     1f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     1f8:	ea40 0401 	orr.w	r4, r0, r1
     1fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
     200:	f06f 0c00 	mvn.w	ip, #0
     204:	ea4f 7244 	mov.w	r2, r4, lsl #29
     208:	b312      	cbz	r2, 250 <CONFIG_FLASH_SIZE+0x50>
     20a:	ea80 0401 	eor.w	r4, r0, r1
     20e:	f014 0f07 	tst.w	r4, #7
     212:	d16a      	bne.n	2ea <CONFIG_BT_HCI_TX_STACK_SIZE+0x6a>
     214:	f000 0407 	and.w	r4, r0, #7
     218:	f020 0007 	bic.w	r0, r0, #7
     21c:	f004 0503 	and.w	r5, r4, #3
     220:	f021 0107 	bic.w	r1, r1, #7
     224:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     228:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     22c:	f014 0f04 	tst.w	r4, #4
     230:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     234:	fa0c f405 	lsl.w	r4, ip, r5
     238:	ea62 0204 	orn	r2, r2, r4
     23c:	ea66 0604 	orn	r6, r6, r4
     240:	d00a      	beq.n	258 <CONFIG_FLASH_SIZE+0x58>
     242:	ea63 0304 	orn	r3, r3, r4
     246:	4662      	mov	r2, ip
     248:	ea67 0704 	orn	r7, r7, r4
     24c:	4666      	mov	r6, ip
     24e:	e003      	b.n	258 <CONFIG_FLASH_SIZE+0x58>
     250:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     254:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     258:	fa82 f54c 	uadd8	r5, r2, ip
     25c:	ea82 0406 	eor.w	r4, r2, r6
     260:	faa4 f48c 	sel	r4, r4, ip
     264:	bb6c      	cbnz	r4, 2c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     266:	fa83 f54c 	uadd8	r5, r3, ip
     26a:	ea83 0507 	eor.w	r5, r3, r7
     26e:	faa5 f58c 	sel	r5, r5, ip
     272:	b995      	cbnz	r5, 29a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     274:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     278:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     27c:	fa82 f54c 	uadd8	r5, r2, ip
     280:	ea82 0406 	eor.w	r4, r2, r6
     284:	faa4 f48c 	sel	r4, r4, ip
     288:	fa83 f54c 	uadd8	r5, r3, ip
     28c:	ea83 0507 	eor.w	r5, r3, r7
     290:	faa5 f58c 	sel	r5, r5, ip
     294:	4325      	orrs	r5, r4
     296:	d0db      	beq.n	250 <CONFIG_FLASH_SIZE+0x50>
     298:	b99c      	cbnz	r4, 2c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x42>
     29a:	ba2d      	rev	r5, r5
     29c:	fab5 f485 	clz	r4, r5
     2a0:	f024 0407 	bic.w	r4, r4, #7
     2a4:	fa27 f104 	lsr.w	r1, r7, r4
     2a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     2ac:	fa23 f304 	lsr.w	r3, r3, r4
     2b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     2b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     2b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     2bc:	eba0 0001 	sub.w	r0, r0, r1
     2c0:	4770      	bx	lr
     2c2:	ba24      	rev	r4, r4
     2c4:	fab4 f484 	clz	r4, r4
     2c8:	f024 0407 	bic.w	r4, r4, #7
     2cc:	fa26 f104 	lsr.w	r1, r6, r4
     2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     2d4:	fa22 f204 	lsr.w	r2, r2, r4
     2d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     2dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     2e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     2e4:	eba0 0001 	sub.w	r0, r0, r1
     2e8:	4770      	bx	lr
     2ea:	f014 0f03 	tst.w	r4, #3
     2ee:	d13c      	bne.n	36a <CONFIG_BT_HCI_TX_STACK_SIZE+0xea>
     2f0:	f010 0403 	ands.w	r4, r0, #3
     2f4:	d128      	bne.n	348 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc8>
     2f6:	f850 2b08 	ldr.w	r2, [r0], #8
     2fa:	f851 3b08 	ldr.w	r3, [r1], #8
     2fe:	fa82 f54c 	uadd8	r5, r2, ip
     302:	ea82 0503 	eor.w	r5, r2, r3
     306:	faa5 f58c 	sel	r5, r5, ip
     30a:	b95d      	cbnz	r5, 324 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa4>
     30c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     310:	f851 3c04 	ldr.w	r3, [r1, #-4]
     314:	fa82 f54c 	uadd8	r5, r2, ip
     318:	ea82 0503 	eor.w	r5, r2, r3
     31c:	faa5 f58c 	sel	r5, r5, ip
     320:	2d00      	cmp	r5, #0
     322:	d0e8      	beq.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     324:	ba2d      	rev	r5, r5
     326:	fab5 f485 	clz	r4, r5
     32a:	f024 0407 	bic.w	r4, r4, #7
     32e:	fa23 f104 	lsr.w	r1, r3, r4
     332:	fa22 f204 	lsr.w	r2, r2, r4
     336:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     33a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     33e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     342:	eba0 0001 	sub.w	r0, r0, r1
     346:	4770      	bx	lr
     348:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     34c:	f020 0003 	bic.w	r0, r0, #3
     350:	f850 2b08 	ldr.w	r2, [r0], #8
     354:	f021 0103 	bic.w	r1, r1, #3
     358:	f851 3b08 	ldr.w	r3, [r1], #8
     35c:	fa0c f404 	lsl.w	r4, ip, r4
     360:	ea62 0204 	orn	r2, r2, r4
     364:	ea63 0304 	orn	r3, r3, r4
     368:	e7c9      	b.n	2fe <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     36a:	f010 0403 	ands.w	r4, r0, #3
     36e:	d01a      	beq.n	3a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x126>
     370:	eba1 0104 	sub.w	r1, r1, r4
     374:	f020 0003 	bic.w	r0, r0, #3
     378:	07e4      	lsls	r4, r4, #31
     37a:	f850 2b04 	ldr.w	r2, [r0], #4
     37e:	d006      	beq.n	38e <CONFIG_BT_HCI_TX_STACK_SIZE+0x10e>
     380:	d20f      	bcs.n	3a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x122>
     382:	788b      	ldrb	r3, [r1, #2]
     384:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     388:	1ae4      	subs	r4, r4, r3
     38a:	d106      	bne.n	39a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     38c:	b12b      	cbz	r3, 39a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     38e:	78cb      	ldrb	r3, [r1, #3]
     390:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     394:	1ae4      	subs	r4, r4, r3
     396:	d100      	bne.n	39a <CONFIG_BT_HCI_TX_STACK_SIZE+0x11a>
     398:	b91b      	cbnz	r3, 3a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0x122>
     39a:	4620      	mov	r0, r4
     39c:	f85d 4b10 	ldr.w	r4, [sp], #16
     3a0:	4770      	bx	lr
     3a2:	f101 0104 	add.w	r1, r1, #4
     3a6:	f850 2b04 	ldr.w	r2, [r0], #4
     3aa:	07cc      	lsls	r4, r1, #31
     3ac:	f021 0103 	bic.w	r1, r1, #3
     3b0:	f851 3b04 	ldr.w	r3, [r1], #4
     3b4:	d848      	bhi.n	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     3b6:	d224      	bcs.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     3b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     3bc:	fa82 f54c 	uadd8	r5, r2, ip
     3c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     3c4:	faa5 f58c 	sel	r5, r5, ip
     3c8:	d10a      	bne.n	3e0 <CONFIG_BT_HCI_TX_STACK_SIZE+0x160>
     3ca:	b965      	cbnz	r5, 3e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x166>
     3cc:	f851 3b04 	ldr.w	r3, [r1], #4
     3d0:	ea84 0402 	eor.w	r4, r4, r2
     3d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     3d8:	d10e      	bne.n	3f8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x178>
     3da:	f850 2b04 	ldr.w	r2, [r0], #4
     3de:	e7eb      	b.n	3b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x138>
     3e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
     3e4:	e055      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     3e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     3ea:	d14d      	bne.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     3ec:	7808      	ldrb	r0, [r1, #0]
     3ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     3f2:	f1c0 0000 	rsb	r0, r0, #0
     3f6:	4770      	bx	lr
     3f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
     3fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     400:	e047      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     402:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     406:	fa82 f54c 	uadd8	r5, r2, ip
     40a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     40e:	faa5 f58c 	sel	r5, r5, ip
     412:	d10a      	bne.n	42a <CONFIG_BT_RX_STACK_SIZE+0x2a>
     414:	b965      	cbnz	r5, 430 <CONFIG_BT_RX_STACK_SIZE+0x30>
     416:	f851 3b04 	ldr.w	r3, [r1], #4
     41a:	ea84 0402 	eor.w	r4, r4, r2
     41e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     422:	d10c      	bne.n	43e <CONFIG_BT_RX_STACK_SIZE+0x3e>
     424:	f850 2b04 	ldr.w	r2, [r0], #4
     428:	e7eb      	b.n	402 <CONFIG_BT_RX_STACK_SIZE+0x2>
     42a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     42e:	e030      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     430:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     434:	d128      	bne.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     436:	880b      	ldrh	r3, [r1, #0]
     438:	ea4f 4212 	mov.w	r2, r2, lsr #16
     43c:	e029      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     43e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     442:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     446:	e024      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     448:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     44c:	fa82 f54c 	uadd8	r5, r2, ip
     450:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     454:	faa5 f58c 	sel	r5, r5, ip
     458:	d10a      	bne.n	470 <CONFIG_BT_RX_STACK_SIZE+0x70>
     45a:	b965      	cbnz	r5, 476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     45c:	f851 3b04 	ldr.w	r3, [r1], #4
     460:	ea84 0402 	eor.w	r4, r4, r2
     464:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     468:	d109      	bne.n	47e <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa>
     46a:	f850 2b04 	ldr.w	r2, [r0], #4
     46e:	e7eb      	b.n	448 <CONFIG_BT_RX_STACK_SIZE+0x48>
     470:	ea4f 6313 	mov.w	r3, r3, lsr #24
     474:	e00d      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     476:	f015 0fff 	tst.w	r5, #255	; 0xff
     47a:	d105      	bne.n	488 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14>
     47c:	680b      	ldr	r3, [r1, #0]
     47e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     486:	e004      	b.n	492 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1e>
     488:	f04f 0000 	mov.w	r0, #0
     48c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     490:	4770      	bx	lr
     492:	ba12      	rev	r2, r2
     494:	ba1b      	rev	r3, r3
     496:	fa82 f44c 	uadd8	r4, r2, ip
     49a:	ea82 0403 	eor.w	r4, r2, r3
     49e:	faa4 f58c 	sel	r5, r4, ip
     4a2:	fab5 f485 	clz	r4, r5
     4a6:	fa02 f204 	lsl.w	r2, r2, r4
     4aa:	fa03 f304 	lsl.w	r3, r3, r4
     4ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
     4b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     4ba:	4770      	bx	lr
     4bc:	0000      	movs	r0, r0
	...

000004c0 <memchr>:
     4c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4c4:	2a10      	cmp	r2, #16
     4c6:	db2b      	blt.n	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     4c8:	f010 0f07 	tst.w	r0, #7
     4cc:	d008      	beq.n	4e0 <memchr+0x20>
     4ce:	f810 3b01 	ldrb.w	r3, [r0], #1
     4d2:	3a01      	subs	r2, #1
     4d4:	428b      	cmp	r3, r1
     4d6:	d02d      	beq.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     4d8:	f010 0f07 	tst.w	r0, #7
     4dc:	b342      	cbz	r2, 530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     4de:	d1f6      	bne.n	4ce <memchr+0xe>
     4e0:	b4f0      	push	{r4, r5, r6, r7}
     4e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     4e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     4ea:	f022 0407 	bic.w	r4, r2, #7
     4ee:	f07f 0700 	mvns.w	r7, #0
     4f2:	2300      	movs	r3, #0
     4f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     4f8:	3c08      	subs	r4, #8
     4fa:	ea85 0501 	eor.w	r5, r5, r1
     4fe:	ea86 0601 	eor.w	r6, r6, r1
     502:	fa85 f547 	uadd8	r5, r5, r7
     506:	faa3 f587 	sel	r5, r3, r7
     50a:	fa86 f647 	uadd8	r6, r6, r7
     50e:	faa5 f687 	sel	r6, r5, r7
     512:	b98e      	cbnz	r6, 538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
     514:	d1ee      	bne.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     516:	bcf0      	pop	{r4, r5, r6, r7}
     518:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     51c:	f002 0207 	and.w	r2, r2, #7
     520:	b132      	cbz	r2, 530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
     522:	f810 3b01 	ldrb.w	r3, [r0], #1
     526:	3a01      	subs	r2, #1
     528:	ea83 0301 	eor.w	r3, r3, r1
     52c:	b113      	cbz	r3, 534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52e:	d1f8      	bne.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     530:	2000      	movs	r0, #0
     532:	4770      	bx	lr
     534:	3801      	subs	r0, #1
     536:	4770      	bx	lr
     538:	2d00      	cmp	r5, #0
     53a:	bf06      	itte	eq
     53c:	4635      	moveq	r5, r6
     53e:	3803      	subeq	r0, #3
     540:	3807      	subne	r0, #7
     542:	f015 0f01 	tst.w	r5, #1
     546:	d107      	bne.n	558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>
     548:	3001      	adds	r0, #1
     54a:	f415 7f80 	tst.w	r5, #256	; 0x100
     54e:	bf02      	ittt	eq
     550:	3001      	addeq	r0, #1
     552:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     556:	3001      	addeq	r0, #1
     558:	bcf0      	pop	{r4, r5, r6, r7}
     55a:	3801      	subs	r0, #1
     55c:	4770      	bx	lr
     55e:	bf00      	nop

00000560 <__aeabi_drsub>:
     560:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     564:	e002      	b.n	56c <__adddf3>
     566:	bf00      	nop

00000568 <__aeabi_dsub>:
     568:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000056c <__adddf3>:
     56c:	b530      	push	{r4, r5, lr}
     56e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     572:	ea4f 0543 	mov.w	r5, r3, lsl #1
     576:	ea94 0f05 	teq	r4, r5
     57a:	bf08      	it	eq
     57c:	ea90 0f02 	teqeq	r0, r2
     580:	bf1f      	itttt	ne
     582:	ea54 0c00 	orrsne.w	ip, r4, r0
     586:	ea55 0c02 	orrsne.w	ip, r5, r2
     58a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     58e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     592:	f000 80e2 	beq.w	75a <CONFIG_BT_COMPANY_ID+0x169>
     596:	ea4f 5454 	mov.w	r4, r4, lsr #21
     59a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     59e:	bfb8      	it	lt
     5a0:	426d      	neglt	r5, r5
     5a2:	dd0c      	ble.n	5be <__adddf3+0x52>
     5a4:	442c      	add	r4, r5
     5a6:	ea80 0202 	eor.w	r2, r0, r2
     5aa:	ea81 0303 	eor.w	r3, r1, r3
     5ae:	ea82 0000 	eor.w	r0, r2, r0
     5b2:	ea83 0101 	eor.w	r1, r3, r1
     5b6:	ea80 0202 	eor.w	r2, r0, r2
     5ba:	ea81 0303 	eor.w	r3, r1, r3
     5be:	2d36      	cmp	r5, #54	; 0x36
     5c0:	bf88      	it	hi
     5c2:	bd30      	pophi	{r4, r5, pc}
     5c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     5c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     5cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     5d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     5d4:	d002      	beq.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     5d6:	4240      	negs	r0, r0
     5d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     5dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     5e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     5e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     5e8:	d002      	beq.n	5f0 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x14>
     5ea:	4252      	negs	r2, r2
     5ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     5f0:	ea94 0f05 	teq	r4, r5
     5f4:	f000 80a7 	beq.w	746 <CONFIG_BT_COMPANY_ID+0x155>
     5f8:	f1a4 0401 	sub.w	r4, r4, #1
     5fc:	f1d5 0e20 	rsbs	lr, r5, #32
     600:	db0d      	blt.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     602:	fa02 fc0e 	lsl.w	ip, r2, lr
     606:	fa22 f205 	lsr.w	r2, r2, r5
     60a:	1880      	adds	r0, r0, r2
     60c:	f141 0100 	adc.w	r1, r1, #0
     610:	fa03 f20e 	lsl.w	r2, r3, lr
     614:	1880      	adds	r0, r0, r2
     616:	fa43 f305 	asr.w	r3, r3, r5
     61a:	4159      	adcs	r1, r3
     61c:	e00e      	b.n	63c <CONFIG_BT_COMPANY_ID+0x4b>
     61e:	f1a5 0520 	sub.w	r5, r5, #32
     622:	f10e 0e20 	add.w	lr, lr, #32
     626:	2a01      	cmp	r2, #1
     628:	fa03 fc0e 	lsl.w	ip, r3, lr
     62c:	bf28      	it	cs
     62e:	f04c 0c02 	orrcs.w	ip, ip, #2
     632:	fa43 f305 	asr.w	r3, r3, r5
     636:	18c0      	adds	r0, r0, r3
     638:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     63c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     640:	d507      	bpl.n	652 <CONFIG_BT_COMPANY_ID+0x61>
     642:	f04f 0e00 	mov.w	lr, #0
     646:	f1dc 0c00 	rsbs	ip, ip, #0
     64a:	eb7e 0000 	sbcs.w	r0, lr, r0
     64e:	eb6e 0101 	sbc.w	r1, lr, r1
     652:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     656:	d31b      	bcc.n	690 <CONFIG_BT_COMPANY_ID+0x9f>
     658:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     65c:	d30c      	bcc.n	678 <CONFIG_BT_COMPANY_ID+0x87>
     65e:	0849      	lsrs	r1, r1, #1
     660:	ea5f 0030 	movs.w	r0, r0, rrx
     664:	ea4f 0c3c 	mov.w	ip, ip, rrx
     668:	f104 0401 	add.w	r4, r4, #1
     66c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     670:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     674:	f080 809a 	bcs.w	7ac <CONFIG_BT_COMPANY_ID+0x1bb>
     678:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     67c:	bf08      	it	eq
     67e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     682:	f150 0000 	adcs.w	r0, r0, #0
     686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     68a:	ea41 0105 	orr.w	r1, r1, r5
     68e:	bd30      	pop	{r4, r5, pc}
     690:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     694:	4140      	adcs	r0, r0
     696:	eb41 0101 	adc.w	r1, r1, r1
     69a:	3c01      	subs	r4, #1
     69c:	bf28      	it	cs
     69e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     6a2:	d2e9      	bcs.n	678 <CONFIG_BT_COMPANY_ID+0x87>
     6a4:	f091 0f00 	teq	r1, #0
     6a8:	bf04      	itt	eq
     6aa:	4601      	moveq	r1, r0
     6ac:	2000      	moveq	r0, #0
     6ae:	fab1 f381 	clz	r3, r1
     6b2:	bf08      	it	eq
     6b4:	3320      	addeq	r3, #32
     6b6:	f1a3 030b 	sub.w	r3, r3, #11
     6ba:	f1b3 0220 	subs.w	r2, r3, #32
     6be:	da0c      	bge.n	6da <CONFIG_BT_COMPANY_ID+0xe9>
     6c0:	320c      	adds	r2, #12
     6c2:	dd08      	ble.n	6d6 <CONFIG_BT_COMPANY_ID+0xe5>
     6c4:	f102 0c14 	add.w	ip, r2, #20
     6c8:	f1c2 020c 	rsb	r2, r2, #12
     6cc:	fa01 f00c 	lsl.w	r0, r1, ip
     6d0:	fa21 f102 	lsr.w	r1, r1, r2
     6d4:	e00c      	b.n	6f0 <CONFIG_BT_COMPANY_ID+0xff>
     6d6:	f102 0214 	add.w	r2, r2, #20
     6da:	bfd8      	it	le
     6dc:	f1c2 0c20 	rsble	ip, r2, #32
     6e0:	fa01 f102 	lsl.w	r1, r1, r2
     6e4:	fa20 fc0c 	lsr.w	ip, r0, ip
     6e8:	bfdc      	itt	le
     6ea:	ea41 010c 	orrle.w	r1, r1, ip
     6ee:	4090      	lslle	r0, r2
     6f0:	1ae4      	subs	r4, r4, r3
     6f2:	bfa2      	ittt	ge
     6f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     6f8:	4329      	orrge	r1, r5
     6fa:	bd30      	popge	{r4, r5, pc}
     6fc:	ea6f 0404 	mvn.w	r4, r4
     700:	3c1f      	subs	r4, #31
     702:	da1c      	bge.n	73e <CONFIG_BT_COMPANY_ID+0x14d>
     704:	340c      	adds	r4, #12
     706:	dc0e      	bgt.n	726 <CONFIG_BT_COMPANY_ID+0x135>
     708:	f104 0414 	add.w	r4, r4, #20
     70c:	f1c4 0220 	rsb	r2, r4, #32
     710:	fa20 f004 	lsr.w	r0, r0, r4
     714:	fa01 f302 	lsl.w	r3, r1, r2
     718:	ea40 0003 	orr.w	r0, r0, r3
     71c:	fa21 f304 	lsr.w	r3, r1, r4
     720:	ea45 0103 	orr.w	r1, r5, r3
     724:	bd30      	pop	{r4, r5, pc}
     726:	f1c4 040c 	rsb	r4, r4, #12
     72a:	f1c4 0220 	rsb	r2, r4, #32
     72e:	fa20 f002 	lsr.w	r0, r0, r2
     732:	fa01 f304 	lsl.w	r3, r1, r4
     736:	ea40 0003 	orr.w	r0, r0, r3
     73a:	4629      	mov	r1, r5
     73c:	bd30      	pop	{r4, r5, pc}
     73e:	fa21 f004 	lsr.w	r0, r1, r4
     742:	4629      	mov	r1, r5
     744:	bd30      	pop	{r4, r5, pc}
     746:	f094 0f00 	teq	r4, #0
     74a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     74e:	bf06      	itte	eq
     750:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     754:	3401      	addeq	r4, #1
     756:	3d01      	subne	r5, #1
     758:	e74e      	b.n	5f8 <CONFIG_BT_COMPANY_ID+0x7>
     75a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     75e:	bf18      	it	ne
     760:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     764:	d029      	beq.n	7ba <CONFIG_BT_COMPANY_ID+0x1c9>
     766:	ea94 0f05 	teq	r4, r5
     76a:	bf08      	it	eq
     76c:	ea90 0f02 	teqeq	r0, r2
     770:	d005      	beq.n	77e <CONFIG_BT_COMPANY_ID+0x18d>
     772:	ea54 0c00 	orrs.w	ip, r4, r0
     776:	bf04      	itt	eq
     778:	4619      	moveq	r1, r3
     77a:	4610      	moveq	r0, r2
     77c:	bd30      	pop	{r4, r5, pc}
     77e:	ea91 0f03 	teq	r1, r3
     782:	bf1e      	ittt	ne
     784:	2100      	movne	r1, #0
     786:	2000      	movne	r0, #0
     788:	bd30      	popne	{r4, r5, pc}
     78a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     78e:	d105      	bne.n	79c <CONFIG_BT_COMPANY_ID+0x1ab>
     790:	0040      	lsls	r0, r0, #1
     792:	4149      	adcs	r1, r1
     794:	bf28      	it	cs
     796:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     79a:	bd30      	pop	{r4, r5, pc}
     79c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     7a0:	bf3c      	itt	cc
     7a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     7a6:	bd30      	popcc	{r4, r5, pc}
     7a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     7ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     7b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     7b4:	f04f 0000 	mov.w	r0, #0
     7b8:	bd30      	pop	{r4, r5, pc}
     7ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     7be:	bf1a      	itte	ne
     7c0:	4619      	movne	r1, r3
     7c2:	4610      	movne	r0, r2
     7c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     7c8:	bf1c      	itt	ne
     7ca:	460b      	movne	r3, r1
     7cc:	4602      	movne	r2, r0
     7ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     7d2:	bf06      	itte	eq
     7d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     7d8:	ea91 0f03 	teqeq	r1, r3
     7dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     7e0:	bd30      	pop	{r4, r5, pc}
     7e2:	bf00      	nop

000007e4 <__aeabi_ui2d>:
     7e4:	f090 0f00 	teq	r0, #0
     7e8:	bf04      	itt	eq
     7ea:	2100      	moveq	r1, #0
     7ec:	4770      	bxeq	lr
     7ee:	b530      	push	{r4, r5, lr}
     7f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     7f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     7f8:	f04f 0500 	mov.w	r5, #0
     7fc:	f04f 0100 	mov.w	r1, #0
     800:	e750      	b.n	6a4 <CONFIG_BT_COMPANY_ID+0xb3>
     802:	bf00      	nop

00000804 <__aeabi_i2d>:
     804:	f090 0f00 	teq	r0, #0
     808:	bf04      	itt	eq
     80a:	2100      	moveq	r1, #0
     80c:	4770      	bxeq	lr
     80e:	b530      	push	{r4, r5, lr}
     810:	f44f 6480 	mov.w	r4, #1024	; 0x400
     814:	f104 0432 	add.w	r4, r4, #50	; 0x32
     818:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     81c:	bf48      	it	mi
     81e:	4240      	negmi	r0, r0
     820:	f04f 0100 	mov.w	r1, #0
     824:	e73e      	b.n	6a4 <CONFIG_BT_COMPANY_ID+0xb3>
     826:	bf00      	nop

00000828 <__aeabi_f2d>:
     828:	0042      	lsls	r2, r0, #1
     82a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     82e:	ea4f 0131 	mov.w	r1, r1, rrx
     832:	ea4f 7002 	mov.w	r0, r2, lsl #28
     836:	bf1f      	itttt	ne
     838:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     83c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     840:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     844:	4770      	bxne	lr
     846:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     84a:	bf08      	it	eq
     84c:	4770      	bxeq	lr
     84e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     852:	bf04      	itt	eq
     854:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     858:	4770      	bxeq	lr
     85a:	b530      	push	{r4, r5, lr}
     85c:	f44f 7460 	mov.w	r4, #896	; 0x380
     860:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     864:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     868:	e71c      	b.n	6a4 <CONFIG_BT_COMPANY_ID+0xb3>
     86a:	bf00      	nop

0000086c <__aeabi_ul2d>:
     86c:	ea50 0201 	orrs.w	r2, r0, r1
     870:	bf08      	it	eq
     872:	4770      	bxeq	lr
     874:	b530      	push	{r4, r5, lr}
     876:	f04f 0500 	mov.w	r5, #0
     87a:	e00a      	b.n	892 <__aeabi_l2d+0x16>

0000087c <__aeabi_l2d>:
     87c:	ea50 0201 	orrs.w	r2, r0, r1
     880:	bf08      	it	eq
     882:	4770      	bxeq	lr
     884:	b530      	push	{r4, r5, lr}
     886:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     88a:	d502      	bpl.n	892 <__aeabi_l2d+0x16>
     88c:	4240      	negs	r0, r0
     88e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     892:	f44f 6480 	mov.w	r4, #1024	; 0x400
     896:	f104 0432 	add.w	r4, r4, #50	; 0x32
     89a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     89e:	f43f aed8 	beq.w	652 <CONFIG_BT_COMPANY_ID+0x61>
     8a2:	f04f 0203 	mov.w	r2, #3
     8a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     8aa:	bf18      	it	ne
     8ac:	3203      	addne	r2, #3
     8ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     8b2:	bf18      	it	ne
     8b4:	3203      	addne	r2, #3
     8b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     8ba:	f1c2 0320 	rsb	r3, r2, #32
     8be:	fa00 fc03 	lsl.w	ip, r0, r3
     8c2:	fa20 f002 	lsr.w	r0, r0, r2
     8c6:	fa01 fe03 	lsl.w	lr, r1, r3
     8ca:	ea40 000e 	orr.w	r0, r0, lr
     8ce:	fa21 f102 	lsr.w	r1, r1, r2
     8d2:	4414      	add	r4, r2
     8d4:	e6bd      	b.n	652 <CONFIG_BT_COMPANY_ID+0x61>
     8d6:	bf00      	nop

000008d8 <__aeabi_dmul>:
     8d8:	b570      	push	{r4, r5, r6, lr}
     8da:	f04f 0cff 	mov.w	ip, #255	; 0xff
     8de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     8e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     8e6:	bf1d      	ittte	ne
     8e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     8ec:	ea94 0f0c 	teqne	r4, ip
     8f0:	ea95 0f0c 	teqne	r5, ip
     8f4:	f000 f8de 	bleq	ab4 <__aeabi_dmul+0x1dc>
     8f8:	442c      	add	r4, r5
     8fa:	ea81 0603 	eor.w	r6, r1, r3
     8fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     902:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     906:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     90a:	bf18      	it	ne
     90c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     918:	d038      	beq.n	98c <__aeabi_dmul+0xb4>
     91a:	fba0 ce02 	umull	ip, lr, r0, r2
     91e:	f04f 0500 	mov.w	r5, #0
     922:	fbe1 e502 	umlal	lr, r5, r1, r2
     926:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     92a:	fbe0 e503 	umlal	lr, r5, r0, r3
     92e:	f04f 0600 	mov.w	r6, #0
     932:	fbe1 5603 	umlal	r5, r6, r1, r3
     936:	f09c 0f00 	teq	ip, #0
     93a:	bf18      	it	ne
     93c:	f04e 0e01 	orrne.w	lr, lr, #1
     940:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     944:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     948:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     94c:	d204      	bcs.n	958 <__aeabi_dmul+0x80>
     94e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     952:	416d      	adcs	r5, r5
     954:	eb46 0606 	adc.w	r6, r6, r6
     958:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     95c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     960:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     964:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     968:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     96c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     970:	bf88      	it	hi
     972:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     976:	d81e      	bhi.n	9b6 <__aeabi_dmul+0xde>
     978:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     97c:	bf08      	it	eq
     97e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     982:	f150 0000 	adcs.w	r0, r0, #0
     986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     98a:	bd70      	pop	{r4, r5, r6, pc}
     98c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     990:	ea46 0101 	orr.w	r1, r6, r1
     994:	ea40 0002 	orr.w	r0, r0, r2
     998:	ea81 0103 	eor.w	r1, r1, r3
     99c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     9a0:	bfc2      	ittt	gt
     9a2:	ebd4 050c 	rsbsgt	r5, r4, ip
     9a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     9aa:	bd70      	popgt	{r4, r5, r6, pc}
     9ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9b0:	f04f 0e00 	mov.w	lr, #0
     9b4:	3c01      	subs	r4, #1
     9b6:	f300 80ab 	bgt.w	b10 <__aeabi_dmul+0x238>
     9ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
     9be:	bfde      	ittt	le
     9c0:	2000      	movle	r0, #0
     9c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     9c6:	bd70      	pople	{r4, r5, r6, pc}
     9c8:	f1c4 0400 	rsb	r4, r4, #0
     9cc:	3c20      	subs	r4, #32
     9ce:	da35      	bge.n	a3c <__aeabi_dmul+0x164>
     9d0:	340c      	adds	r4, #12
     9d2:	dc1b      	bgt.n	a0c <__aeabi_dmul+0x134>
     9d4:	f104 0414 	add.w	r4, r4, #20
     9d8:	f1c4 0520 	rsb	r5, r4, #32
     9dc:	fa00 f305 	lsl.w	r3, r0, r5
     9e0:	fa20 f004 	lsr.w	r0, r0, r4
     9e4:	fa01 f205 	lsl.w	r2, r1, r5
     9e8:	ea40 0002 	orr.w	r0, r0, r2
     9ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     9f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     9f8:	fa21 f604 	lsr.w	r6, r1, r4
     9fc:	eb42 0106 	adc.w	r1, r2, r6
     a00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     a04:	bf08      	it	eq
     a06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     a0a:	bd70      	pop	{r4, r5, r6, pc}
     a0c:	f1c4 040c 	rsb	r4, r4, #12
     a10:	f1c4 0520 	rsb	r5, r4, #32
     a14:	fa00 f304 	lsl.w	r3, r0, r4
     a18:	fa20 f005 	lsr.w	r0, r0, r5
     a1c:	fa01 f204 	lsl.w	r2, r1, r4
     a20:	ea40 0002 	orr.w	r0, r0, r2
     a24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     a28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     a2c:	f141 0100 	adc.w	r1, r1, #0
     a30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     a34:	bf08      	it	eq
     a36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     a3a:	bd70      	pop	{r4, r5, r6, pc}
     a3c:	f1c4 0520 	rsb	r5, r4, #32
     a40:	fa00 f205 	lsl.w	r2, r0, r5
     a44:	ea4e 0e02 	orr.w	lr, lr, r2
     a48:	fa20 f304 	lsr.w	r3, r0, r4
     a4c:	fa01 f205 	lsl.w	r2, r1, r5
     a50:	ea43 0302 	orr.w	r3, r3, r2
     a54:	fa21 f004 	lsr.w	r0, r1, r4
     a58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     a5c:	fa21 f204 	lsr.w	r2, r1, r4
     a60:	ea20 0002 	bic.w	r0, r0, r2
     a64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     a68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     a6c:	bf08      	it	eq
     a6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     a72:	bd70      	pop	{r4, r5, r6, pc}
     a74:	f094 0f00 	teq	r4, #0
     a78:	d10f      	bne.n	a9a <__aeabi_dmul+0x1c2>
     a7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     a7e:	0040      	lsls	r0, r0, #1
     a80:	eb41 0101 	adc.w	r1, r1, r1
     a84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     a88:	bf08      	it	eq
     a8a:	3c01      	subeq	r4, #1
     a8c:	d0f7      	beq.n	a7e <__aeabi_dmul+0x1a6>
     a8e:	ea41 0106 	orr.w	r1, r1, r6
     a92:	f095 0f00 	teq	r5, #0
     a96:	bf18      	it	ne
     a98:	4770      	bxne	lr
     a9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     a9e:	0052      	lsls	r2, r2, #1
     aa0:	eb43 0303 	adc.w	r3, r3, r3
     aa4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     aa8:	bf08      	it	eq
     aaa:	3d01      	subeq	r5, #1
     aac:	d0f7      	beq.n	a9e <__aeabi_dmul+0x1c6>
     aae:	ea43 0306 	orr.w	r3, r3, r6
     ab2:	4770      	bx	lr
     ab4:	ea94 0f0c 	teq	r4, ip
     ab8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     abc:	bf18      	it	ne
     abe:	ea95 0f0c 	teqne	r5, ip
     ac2:	d00c      	beq.n	ade <__aeabi_dmul+0x206>
     ac4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     ac8:	bf18      	it	ne
     aca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     ace:	d1d1      	bne.n	a74 <__aeabi_dmul+0x19c>
     ad0:	ea81 0103 	eor.w	r1, r1, r3
     ad4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     ad8:	f04f 0000 	mov.w	r0, #0
     adc:	bd70      	pop	{r4, r5, r6, pc}
     ade:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     ae2:	bf06      	itte	eq
     ae4:	4610      	moveq	r0, r2
     ae6:	4619      	moveq	r1, r3
     ae8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     aec:	d019      	beq.n	b22 <__aeabi_dmul+0x24a>
     aee:	ea94 0f0c 	teq	r4, ip
     af2:	d102      	bne.n	afa <__aeabi_dmul+0x222>
     af4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     af8:	d113      	bne.n	b22 <__aeabi_dmul+0x24a>
     afa:	ea95 0f0c 	teq	r5, ip
     afe:	d105      	bne.n	b0c <__aeabi_dmul+0x234>
     b00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     b04:	bf1c      	itt	ne
     b06:	4610      	movne	r0, r2
     b08:	4619      	movne	r1, r3
     b0a:	d10a      	bne.n	b22 <__aeabi_dmul+0x24a>
     b0c:	ea81 0103 	eor.w	r1, r1, r3
     b10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     b14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     b18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     b1c:	f04f 0000 	mov.w	r0, #0
     b20:	bd70      	pop	{r4, r5, r6, pc}
     b22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     b26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     b2a:	bd70      	pop	{r4, r5, r6, pc}

00000b2c <__aeabi_ddiv>:
     b2c:	b570      	push	{r4, r5, r6, lr}
     b2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b3a:	bf1d      	ittte	ne
     b3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b40:	ea94 0f0c 	teqne	r4, ip
     b44:	ea95 0f0c 	teqne	r5, ip
     b48:	f000 f8a7 	bleq	c9a <__aeabi_ddiv+0x16e>
     b4c:	eba4 0405 	sub.w	r4, r4, r5
     b50:	ea81 0e03 	eor.w	lr, r1, r3
     b54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     b58:	ea4f 3101 	mov.w	r1, r1, lsl #12
     b5c:	f000 8088 	beq.w	c70 <__aeabi_ddiv+0x144>
     b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
     b64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     b68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     b6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     b70:	ea4f 2202 	mov.w	r2, r2, lsl #8
     b74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     b78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     b7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     b80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     b84:	429d      	cmp	r5, r3
     b86:	bf08      	it	eq
     b88:	4296      	cmpeq	r6, r2
     b8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     b8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     b92:	d202      	bcs.n	b9a <__aeabi_ddiv+0x6e>
     b94:	085b      	lsrs	r3, r3, #1
     b96:	ea4f 0232 	mov.w	r2, r2, rrx
     b9a:	1ab6      	subs	r6, r6, r2
     b9c:	eb65 0503 	sbc.w	r5, r5, r3
     ba0:	085b      	lsrs	r3, r3, #1
     ba2:	ea4f 0232 	mov.w	r2, r2, rrx
     ba6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     baa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     bae:	ebb6 0e02 	subs.w	lr, r6, r2
     bb2:	eb75 0e03 	sbcs.w	lr, r5, r3
     bb6:	bf22      	ittt	cs
     bb8:	1ab6      	subcs	r6, r6, r2
     bba:	4675      	movcs	r5, lr
     bbc:	ea40 000c 	orrcs.w	r0, r0, ip
     bc0:	085b      	lsrs	r3, r3, #1
     bc2:	ea4f 0232 	mov.w	r2, r2, rrx
     bc6:	ebb6 0e02 	subs.w	lr, r6, r2
     bca:	eb75 0e03 	sbcs.w	lr, r5, r3
     bce:	bf22      	ittt	cs
     bd0:	1ab6      	subcs	r6, r6, r2
     bd2:	4675      	movcs	r5, lr
     bd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     bd8:	085b      	lsrs	r3, r3, #1
     bda:	ea4f 0232 	mov.w	r2, r2, rrx
     bde:	ebb6 0e02 	subs.w	lr, r6, r2
     be2:	eb75 0e03 	sbcs.w	lr, r5, r3
     be6:	bf22      	ittt	cs
     be8:	1ab6      	subcs	r6, r6, r2
     bea:	4675      	movcs	r5, lr
     bec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     bf0:	085b      	lsrs	r3, r3, #1
     bf2:	ea4f 0232 	mov.w	r2, r2, rrx
     bf6:	ebb6 0e02 	subs.w	lr, r6, r2
     bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
     bfe:	bf22      	ittt	cs
     c00:	1ab6      	subcs	r6, r6, r2
     c02:	4675      	movcs	r5, lr
     c04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     c08:	ea55 0e06 	orrs.w	lr, r5, r6
     c0c:	d018      	beq.n	c40 <__aeabi_ddiv+0x114>
     c0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     c12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     c16:	ea4f 1606 	mov.w	r6, r6, lsl #4
     c1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     c1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     c22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     c26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     c2a:	d1c0      	bne.n	bae <__aeabi_ddiv+0x82>
     c2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     c30:	d10b      	bne.n	c4a <__aeabi_ddiv+0x11e>
     c32:	ea41 0100 	orr.w	r1, r1, r0
     c36:	f04f 0000 	mov.w	r0, #0
     c3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     c3e:	e7b6      	b.n	bae <__aeabi_ddiv+0x82>
     c40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     c44:	bf04      	itt	eq
     c46:	4301      	orreq	r1, r0
     c48:	2000      	moveq	r0, #0
     c4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     c4e:	bf88      	it	hi
     c50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     c54:	f63f aeaf 	bhi.w	9b6 <__aeabi_dmul+0xde>
     c58:	ebb5 0c03 	subs.w	ip, r5, r3
     c5c:	bf04      	itt	eq
     c5e:	ebb6 0c02 	subseq.w	ip, r6, r2
     c62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     c66:	f150 0000 	adcs.w	r0, r0, #0
     c6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     c6e:	bd70      	pop	{r4, r5, r6, pc}
     c70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     c74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     c78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     c7c:	bfc2      	ittt	gt
     c7e:	ebd4 050c 	rsbsgt	r5, r4, ip
     c82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c86:	bd70      	popgt	{r4, r5, r6, pc}
     c88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c8c:	f04f 0e00 	mov.w	lr, #0
     c90:	3c01      	subs	r4, #1
     c92:	e690      	b.n	9b6 <__aeabi_dmul+0xde>
     c94:	ea45 0e06 	orr.w	lr, r5, r6
     c98:	e68d      	b.n	9b6 <__aeabi_dmul+0xde>
     c9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     c9e:	ea94 0f0c 	teq	r4, ip
     ca2:	bf08      	it	eq
     ca4:	ea95 0f0c 	teqeq	r5, ip
     ca8:	f43f af3b 	beq.w	b22 <__aeabi_dmul+0x24a>
     cac:	ea94 0f0c 	teq	r4, ip
     cb0:	d10a      	bne.n	cc8 <__aeabi_ddiv+0x19c>
     cb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     cb6:	f47f af34 	bne.w	b22 <__aeabi_dmul+0x24a>
     cba:	ea95 0f0c 	teq	r5, ip
     cbe:	f47f af25 	bne.w	b0c <__aeabi_dmul+0x234>
     cc2:	4610      	mov	r0, r2
     cc4:	4619      	mov	r1, r3
     cc6:	e72c      	b.n	b22 <__aeabi_dmul+0x24a>
     cc8:	ea95 0f0c 	teq	r5, ip
     ccc:	d106      	bne.n	cdc <__aeabi_ddiv+0x1b0>
     cce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     cd2:	f43f aefd 	beq.w	ad0 <__aeabi_dmul+0x1f8>
     cd6:	4610      	mov	r0, r2
     cd8:	4619      	mov	r1, r3
     cda:	e722      	b.n	b22 <__aeabi_dmul+0x24a>
     cdc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     ce0:	bf18      	it	ne
     ce2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     ce6:	f47f aec5 	bne.w	a74 <__aeabi_dmul+0x19c>
     cea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     cee:	f47f af0d 	bne.w	b0c <__aeabi_dmul+0x234>
     cf2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     cf6:	f47f aeeb 	bne.w	ad0 <__aeabi_dmul+0x1f8>
     cfa:	e712      	b.n	b22 <__aeabi_dmul+0x24a>

00000cfc <__aeabi_frsub>:
     cfc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     d00:	e002      	b.n	d08 <__addsf3>
     d02:	bf00      	nop

00000d04 <__aeabi_fsub>:
     d04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000d08 <__addsf3>:
     d08:	0042      	lsls	r2, r0, #1
     d0a:	bf1f      	itttt	ne
     d0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     d10:	ea92 0f03 	teqne	r2, r3
     d14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     d18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     d1c:	d06a      	beq.n	df4 <__addsf3+0xec>
     d1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     d22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     d26:	bfc1      	itttt	gt
     d28:	18d2      	addgt	r2, r2, r3
     d2a:	4041      	eorgt	r1, r0
     d2c:	4048      	eorgt	r0, r1
     d2e:	4041      	eorgt	r1, r0
     d30:	bfb8      	it	lt
     d32:	425b      	neglt	r3, r3
     d34:	2b19      	cmp	r3, #25
     d36:	bf88      	it	hi
     d38:	4770      	bxhi	lr
     d3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     d46:	bf18      	it	ne
     d48:	4240      	negne	r0, r0
     d4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     d4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     d52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     d56:	bf18      	it	ne
     d58:	4249      	negne	r1, r1
     d5a:	ea92 0f03 	teq	r2, r3
     d5e:	d03f      	beq.n	de0 <__addsf3+0xd8>
     d60:	f1a2 0201 	sub.w	r2, r2, #1
     d64:	fa41 fc03 	asr.w	ip, r1, r3
     d68:	eb10 000c 	adds.w	r0, r0, ip
     d6c:	f1c3 0320 	rsb	r3, r3, #32
     d70:	fa01 f103 	lsl.w	r1, r1, r3
     d74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     d78:	d502      	bpl.n	d80 <__addsf3+0x78>
     d7a:	4249      	negs	r1, r1
     d7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     d80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     d84:	d313      	bcc.n	dae <__addsf3+0xa6>
     d86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     d8a:	d306      	bcc.n	d9a <__addsf3+0x92>
     d8c:	0840      	lsrs	r0, r0, #1
     d8e:	ea4f 0131 	mov.w	r1, r1, rrx
     d92:	f102 0201 	add.w	r2, r2, #1
     d96:	2afe      	cmp	r2, #254	; 0xfe
     d98:	d251      	bcs.n	e3e <__addsf3+0x136>
     d9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     da2:	bf08      	it	eq
     da4:	f020 0001 	biceq.w	r0, r0, #1
     da8:	ea40 0003 	orr.w	r0, r0, r3
     dac:	4770      	bx	lr
     dae:	0049      	lsls	r1, r1, #1
     db0:	eb40 0000 	adc.w	r0, r0, r0
     db4:	3a01      	subs	r2, #1
     db6:	bf28      	it	cs
     db8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     dbc:	d2ed      	bcs.n	d9a <__addsf3+0x92>
     dbe:	fab0 fc80 	clz	ip, r0
     dc2:	f1ac 0c08 	sub.w	ip, ip, #8
     dc6:	ebb2 020c 	subs.w	r2, r2, ip
     dca:	fa00 f00c 	lsl.w	r0, r0, ip
     dce:	bfaa      	itet	ge
     dd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     dd4:	4252      	neglt	r2, r2
     dd6:	4318      	orrge	r0, r3
     dd8:	bfbc      	itt	lt
     dda:	40d0      	lsrlt	r0, r2
     ddc:	4318      	orrlt	r0, r3
     dde:	4770      	bx	lr
     de0:	f092 0f00 	teq	r2, #0
     de4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     de8:	bf06      	itte	eq
     dea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     dee:	3201      	addeq	r2, #1
     df0:	3b01      	subne	r3, #1
     df2:	e7b5      	b.n	d60 <__addsf3+0x58>
     df4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     dfc:	bf18      	it	ne
     dfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     e02:	d021      	beq.n	e48 <__addsf3+0x140>
     e04:	ea92 0f03 	teq	r2, r3
     e08:	d004      	beq.n	e14 <__addsf3+0x10c>
     e0a:	f092 0f00 	teq	r2, #0
     e0e:	bf08      	it	eq
     e10:	4608      	moveq	r0, r1
     e12:	4770      	bx	lr
     e14:	ea90 0f01 	teq	r0, r1
     e18:	bf1c      	itt	ne
     e1a:	2000      	movne	r0, #0
     e1c:	4770      	bxne	lr
     e1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     e22:	d104      	bne.n	e2e <__addsf3+0x126>
     e24:	0040      	lsls	r0, r0, #1
     e26:	bf28      	it	cs
     e28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     e2c:	4770      	bx	lr
     e2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     e32:	bf3c      	itt	cc
     e34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     e38:	4770      	bxcc	lr
     e3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     e3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     e42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e46:	4770      	bx	lr
     e48:	ea7f 6222 	mvns.w	r2, r2, asr #24
     e4c:	bf16      	itet	ne
     e4e:	4608      	movne	r0, r1
     e50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     e54:	4601      	movne	r1, r0
     e56:	0242      	lsls	r2, r0, #9
     e58:	bf06      	itte	eq
     e5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     e5e:	ea90 0f01 	teqeq	r0, r1
     e62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     e66:	4770      	bx	lr

00000e68 <__aeabi_ui2f>:
     e68:	f04f 0300 	mov.w	r3, #0
     e6c:	e004      	b.n	e78 <__aeabi_i2f+0x8>
     e6e:	bf00      	nop

00000e70 <__aeabi_i2f>:
     e70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     e74:	bf48      	it	mi
     e76:	4240      	negmi	r0, r0
     e78:	ea5f 0c00 	movs.w	ip, r0
     e7c:	bf08      	it	eq
     e7e:	4770      	bxeq	lr
     e80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     e84:	4601      	mov	r1, r0
     e86:	f04f 0000 	mov.w	r0, #0
     e8a:	e01c      	b.n	ec6 <__aeabi_l2f+0x2a>

00000e8c <__aeabi_ul2f>:
     e8c:	ea50 0201 	orrs.w	r2, r0, r1
     e90:	bf08      	it	eq
     e92:	4770      	bxeq	lr
     e94:	f04f 0300 	mov.w	r3, #0
     e98:	e00a      	b.n	eb0 <__aeabi_l2f+0x14>
     e9a:	bf00      	nop

00000e9c <__aeabi_l2f>:
     e9c:	ea50 0201 	orrs.w	r2, r0, r1
     ea0:	bf08      	it	eq
     ea2:	4770      	bxeq	lr
     ea4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     ea8:	d502      	bpl.n	eb0 <__aeabi_l2f+0x14>
     eaa:	4240      	negs	r0, r0
     eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     eb0:	ea5f 0c01 	movs.w	ip, r1
     eb4:	bf02      	ittt	eq
     eb6:	4684      	moveq	ip, r0
     eb8:	4601      	moveq	r1, r0
     eba:	2000      	moveq	r0, #0
     ebc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     ec0:	bf08      	it	eq
     ec2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     ec6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     eca:	fabc f28c 	clz	r2, ip
     ece:	3a08      	subs	r2, #8
     ed0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ed4:	db10      	blt.n	ef8 <__data_size+0x28>
     ed6:	fa01 fc02 	lsl.w	ip, r1, r2
     eda:	4463      	add	r3, ip
     edc:	fa00 fc02 	lsl.w	ip, r0, r2
     ee0:	f1c2 0220 	rsb	r2, r2, #32
     ee4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     ee8:	fa20 f202 	lsr.w	r2, r0, r2
     eec:	eb43 0002 	adc.w	r0, r3, r2
     ef0:	bf08      	it	eq
     ef2:	f020 0001 	biceq.w	r0, r0, #1
     ef6:	4770      	bx	lr
     ef8:	f102 0220 	add.w	r2, r2, #32
     efc:	fa01 fc02 	lsl.w	ip, r1, r2
     f00:	f1c2 0220 	rsb	r2, r2, #32
     f04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     f08:	fa21 f202 	lsr.w	r2, r1, r2
     f0c:	eb43 0002 	adc.w	r0, r3, r2
     f10:	bf08      	it	eq
     f12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     f16:	4770      	bx	lr

00000f18 <__aeabi_fmul>:
     f18:	f04f 0cff 	mov.w	ip, #255	; 0xff
     f1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     f20:	bf1e      	ittt	ne
     f22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     f26:	ea92 0f0c 	teqne	r2, ip
     f2a:	ea93 0f0c 	teqne	r3, ip
     f2e:	d06f      	beq.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
     f30:	441a      	add	r2, r3
     f32:	ea80 0c01 	eor.w	ip, r0, r1
     f36:	0240      	lsls	r0, r0, #9
     f38:	bf18      	it	ne
     f3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     f3e:	d01e      	beq.n	f7e <__aeabi_fmul+0x66>
     f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     f44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     f48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     f4c:	fba0 3101 	umull	r3, r1, r0, r1
     f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     f54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     f58:	bf3e      	ittt	cc
     f5a:	0049      	lslcc	r1, r1, #1
     f5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     f60:	005b      	lslcc	r3, r3, #1
     f62:	ea40 0001 	orr.w	r0, r0, r1
     f66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     f6a:	2afd      	cmp	r2, #253	; 0xfd
     f6c:	d81d      	bhi.n	faa <__aeabi_fmul+0x92>
     f6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     f72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     f76:	bf08      	it	eq
     f78:	f020 0001 	biceq.w	r0, r0, #1
     f7c:	4770      	bx	lr
     f7e:	f090 0f00 	teq	r0, #0
     f82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     f86:	bf08      	it	eq
     f88:	0249      	lsleq	r1, r1, #9
     f8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     f92:	3a7f      	subs	r2, #127	; 0x7f
     f94:	bfc2      	ittt	gt
     f96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f9e:	4770      	bxgt	lr
     fa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     fa4:	f04f 0300 	mov.w	r3, #0
     fa8:	3a01      	subs	r2, #1
     faa:	dc5d      	bgt.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     fac:	f112 0f19 	cmn.w	r2, #25
     fb0:	bfdc      	itt	le
     fb2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     fb6:	4770      	bxle	lr
     fb8:	f1c2 0200 	rsb	r2, r2, #0
     fbc:	0041      	lsls	r1, r0, #1
     fbe:	fa21 f102 	lsr.w	r1, r1, r2
     fc2:	f1c2 0220 	rsb	r2, r2, #32
     fc6:	fa00 fc02 	lsl.w	ip, r0, r2
     fca:	ea5f 0031 	movs.w	r0, r1, rrx
     fce:	f140 0000 	adc.w	r0, r0, #0
     fd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     fd6:	bf08      	it	eq
     fd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     fdc:	4770      	bx	lr
     fde:	f092 0f00 	teq	r2, #0
     fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     fe6:	bf02      	ittt	eq
     fe8:	0040      	lsleq	r0, r0, #1
     fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     fee:	3a01      	subeq	r2, #1
     ff0:	d0f9      	beq.n	fe6 <__aeabi_fmul+0xce>
     ff2:	ea40 000c 	orr.w	r0, r0, ip
     ff6:	f093 0f00 	teq	r3, #0
     ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     ffe:	bf02      	ittt	eq
    1000:	0049      	lsleq	r1, r1, #1
    1002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1006:	3b01      	subeq	r3, #1
    1008:	d0f9      	beq.n	ffe <__aeabi_fmul+0xe6>
    100a:	ea41 010c 	orr.w	r1, r1, ip
    100e:	e78f      	b.n	f30 <__aeabi_fmul+0x18>
    1010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1014:	ea92 0f0c 	teq	r2, ip
    1018:	bf18      	it	ne
    101a:	ea93 0f0c 	teqne	r3, ip
    101e:	d00a      	beq.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1020:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    1024:	bf18      	it	ne
    1026:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    102a:	d1d8      	bne.n	fde <__aeabi_fmul+0xc6>
    102c:	ea80 0001 	eor.w	r0, r0, r1
    1030:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    1034:	4770      	bx	lr
    1036:	f090 0f00 	teq	r0, #0
    103a:	bf17      	itett	ne
    103c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    1040:	4608      	moveq	r0, r1
    1042:	f091 0f00 	teqne	r1, #0
    1046:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    104a:	d014      	beq.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    104c:	ea92 0f0c 	teq	r2, ip
    1050:	d101      	bne.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    1052:	0242      	lsls	r2, r0, #9
    1054:	d10f      	bne.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1056:	ea93 0f0c 	teq	r3, ip
    105a:	d103      	bne.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    105c:	024b      	lsls	r3, r1, #9
    105e:	bf18      	it	ne
    1060:	4608      	movne	r0, r1
    1062:	d108      	bne.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1064:	ea80 0001 	eor.w	r0, r0, r1
    1068:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    106c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    1070:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1074:	4770      	bx	lr
    1076:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    107a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    107e:	4770      	bx	lr

00001080 <__aeabi_fdiv>:
    1080:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1084:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    1088:	bf1e      	ittt	ne
    108a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    108e:	ea92 0f0c 	teqne	r2, ip
    1092:	ea93 0f0c 	teqne	r3, ip
    1096:	d069      	beq.n	116c <__aeabi_fdiv+0xec>
    1098:	eba2 0203 	sub.w	r2, r2, r3
    109c:	ea80 0c01 	eor.w	ip, r0, r1
    10a0:	0249      	lsls	r1, r1, #9
    10a2:	ea4f 2040 	mov.w	r0, r0, lsl #9
    10a6:	d037      	beq.n	1118 <__aeabi_fdiv+0x98>
    10a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    10ac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    10b0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    10b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    10b8:	428b      	cmp	r3, r1
    10ba:	bf38      	it	cc
    10bc:	005b      	lslcc	r3, r3, #1
    10be:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    10c2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    10c6:	428b      	cmp	r3, r1
    10c8:	bf24      	itt	cs
    10ca:	1a5b      	subcs	r3, r3, r1
    10cc:	ea40 000c 	orrcs.w	r0, r0, ip
    10d0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    10d4:	bf24      	itt	cs
    10d6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    10da:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    10de:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    10e2:	bf24      	itt	cs
    10e4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    10e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    10ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    10f0:	bf24      	itt	cs
    10f2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    10f6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    10fa:	011b      	lsls	r3, r3, #4
    10fc:	bf18      	it	ne
    10fe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    1102:	d1e0      	bne.n	10c6 <__aeabi_fdiv+0x46>
    1104:	2afd      	cmp	r2, #253	; 0xfd
    1106:	f63f af50 	bhi.w	faa <__aeabi_fmul+0x92>
    110a:	428b      	cmp	r3, r1
    110c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    1110:	bf08      	it	eq
    1112:	f020 0001 	biceq.w	r0, r0, #1
    1116:	4770      	bx	lr
    1118:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    111c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    1120:	327f      	adds	r2, #127	; 0x7f
    1122:	bfc2      	ittt	gt
    1124:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    1128:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    112c:	4770      	bxgt	lr
    112e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    1132:	f04f 0300 	mov.w	r3, #0
    1136:	3a01      	subs	r2, #1
    1138:	e737      	b.n	faa <__aeabi_fmul+0x92>
    113a:	f092 0f00 	teq	r2, #0
    113e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    1142:	bf02      	ittt	eq
    1144:	0040      	lsleq	r0, r0, #1
    1146:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    114a:	3a01      	subeq	r2, #1
    114c:	d0f9      	beq.n	1142 <__aeabi_fdiv+0xc2>
    114e:	ea40 000c 	orr.w	r0, r0, ip
    1152:	f093 0f00 	teq	r3, #0
    1156:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    115a:	bf02      	ittt	eq
    115c:	0049      	lsleq	r1, r1, #1
    115e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    1162:	3b01      	subeq	r3, #1
    1164:	d0f9      	beq.n	115a <__aeabi_fdiv+0xda>
    1166:	ea41 010c 	orr.w	r1, r1, ip
    116a:	e795      	b.n	1098 <__aeabi_fdiv+0x18>
    116c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    1170:	ea92 0f0c 	teq	r2, ip
    1174:	d108      	bne.n	1188 <__aeabi_fdiv+0x108>
    1176:	0242      	lsls	r2, r0, #9
    1178:	f47f af7d 	bne.w	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    117c:	ea93 0f0c 	teq	r3, ip
    1180:	f47f af70 	bne.w	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    1184:	4608      	mov	r0, r1
    1186:	e776      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1188:	ea93 0f0c 	teq	r3, ip
    118c:	d104      	bne.n	1198 <__aeabi_fdiv+0x118>
    118e:	024b      	lsls	r3, r1, #9
    1190:	f43f af4c 	beq.w	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1194:	4608      	mov	r0, r1
    1196:	e76e      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    1198:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    119c:	bf18      	it	ne
    119e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    11a2:	d1ca      	bne.n	113a <__aeabi_fdiv+0xba>
    11a4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    11a8:	f47f af5c 	bne.w	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
    11ac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    11b0:	f47f af3c 	bne.w	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    11b4:	e75f      	b.n	1076 <CONFIG_FPROTECT_BLOCK_SIZE+0x76>
    11b6:	bf00      	nop

000011b8 <__aeabi_uldivmod>:
    11b8:	b953      	cbnz	r3, 11d0 <__aeabi_uldivmod+0x18>
    11ba:	b94a      	cbnz	r2, 11d0 <__aeabi_uldivmod+0x18>
    11bc:	2900      	cmp	r1, #0
    11be:	bf08      	it	eq
    11c0:	2800      	cmpeq	r0, #0
    11c2:	bf1c      	itt	ne
    11c4:	f04f 31ff 	movne.w	r1, #4294967295
    11c8:	f04f 30ff 	movne.w	r0, #4294967295
    11cc:	f000 b80c 	b.w	11e8 <__aeabi_idiv0>
    11d0:	f1ad 0c08 	sub.w	ip, sp, #8
    11d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    11d8:	f000 f968 	bl	14ac <__udivmoddi4>
    11dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    11e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    11e4:	b004      	add	sp, #16
    11e6:	4770      	bx	lr

000011e8 <__aeabi_idiv0>:
    11e8:	4770      	bx	lr
    11ea:	bf00      	nop

000011ec <__gedf2>:
    11ec:	f04f 3cff 	mov.w	ip, #4294967295
    11f0:	e006      	b.n	1200 <__cmpdf2+0x4>
    11f2:	bf00      	nop

000011f4 <__ledf2>:
    11f4:	f04f 0c01 	mov.w	ip, #1
    11f8:	e002      	b.n	1200 <__cmpdf2+0x4>
    11fa:	bf00      	nop

000011fc <__cmpdf2>:
    11fc:	f04f 0c01 	mov.w	ip, #1
    1200:	f84d cd04 	str.w	ip, [sp, #-4]!
    1204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    120c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1210:	bf18      	it	ne
    1212:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    1216:	d01b      	beq.n	1250 <__cmpdf2+0x54>
    1218:	b001      	add	sp, #4
    121a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    121e:	bf0c      	ite	eq
    1220:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    1224:	ea91 0f03 	teqne	r1, r3
    1228:	bf02      	ittt	eq
    122a:	ea90 0f02 	teqeq	r0, r2
    122e:	2000      	moveq	r0, #0
    1230:	4770      	bxeq	lr
    1232:	f110 0f00 	cmn.w	r0, #0
    1236:	ea91 0f03 	teq	r1, r3
    123a:	bf58      	it	pl
    123c:	4299      	cmppl	r1, r3
    123e:	bf08      	it	eq
    1240:	4290      	cmpeq	r0, r2
    1242:	bf2c      	ite	cs
    1244:	17d8      	asrcs	r0, r3, #31
    1246:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    124a:	f040 0001 	orr.w	r0, r0, #1
    124e:	4770      	bx	lr
    1250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1258:	d102      	bne.n	1260 <__cmpdf2+0x64>
    125a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    125e:	d107      	bne.n	1270 <__cmpdf2+0x74>
    1260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1264:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1268:	d1d6      	bne.n	1218 <__cmpdf2+0x1c>
    126a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    126e:	d0d3      	beq.n	1218 <__cmpdf2+0x1c>
    1270:	f85d 0b04 	ldr.w	r0, [sp], #4
    1274:	4770      	bx	lr
    1276:	bf00      	nop

00001278 <__aeabi_cdrcmple>:
    1278:	4684      	mov	ip, r0
    127a:	4610      	mov	r0, r2
    127c:	4662      	mov	r2, ip
    127e:	468c      	mov	ip, r1
    1280:	4619      	mov	r1, r3
    1282:	4663      	mov	r3, ip
    1284:	e000      	b.n	1288 <__aeabi_cdcmpeq>
    1286:	bf00      	nop

00001288 <__aeabi_cdcmpeq>:
    1288:	b501      	push	{r0, lr}
    128a:	f7ff ffb7 	bl	11fc <__cmpdf2>
    128e:	2800      	cmp	r0, #0
    1290:	bf48      	it	mi
    1292:	f110 0f00 	cmnmi.w	r0, #0
    1296:	bd01      	pop	{r0, pc}

00001298 <__aeabi_dcmpeq>:
    1298:	f84d ed08 	str.w	lr, [sp, #-8]!
    129c:	f7ff fff4 	bl	1288 <__aeabi_cdcmpeq>
    12a0:	bf0c      	ite	eq
    12a2:	2001      	moveq	r0, #1
    12a4:	2000      	movne	r0, #0
    12a6:	f85d fb08 	ldr.w	pc, [sp], #8
    12aa:	bf00      	nop

000012ac <__aeabi_dcmplt>:
    12ac:	f84d ed08 	str.w	lr, [sp, #-8]!
    12b0:	f7ff ffea 	bl	1288 <__aeabi_cdcmpeq>
    12b4:	bf34      	ite	cc
    12b6:	2001      	movcc	r0, #1
    12b8:	2000      	movcs	r0, #0
    12ba:	f85d fb08 	ldr.w	pc, [sp], #8
    12be:	bf00      	nop

000012c0 <__aeabi_dcmple>:
    12c0:	f84d ed08 	str.w	lr, [sp, #-8]!
    12c4:	f7ff ffe0 	bl	1288 <__aeabi_cdcmpeq>
    12c8:	bf94      	ite	ls
    12ca:	2001      	movls	r0, #1
    12cc:	2000      	movhi	r0, #0
    12ce:	f85d fb08 	ldr.w	pc, [sp], #8
    12d2:	bf00      	nop

000012d4 <__aeabi_dcmpge>:
    12d4:	f84d ed08 	str.w	lr, [sp, #-8]!
    12d8:	f7ff ffce 	bl	1278 <__aeabi_cdrcmple>
    12dc:	bf94      	ite	ls
    12de:	2001      	movls	r0, #1
    12e0:	2000      	movhi	r0, #0
    12e2:	f85d fb08 	ldr.w	pc, [sp], #8
    12e6:	bf00      	nop

000012e8 <__aeabi_dcmpgt>:
    12e8:	f84d ed08 	str.w	lr, [sp, #-8]!
    12ec:	f7ff ffc4 	bl	1278 <__aeabi_cdrcmple>
    12f0:	bf34      	ite	cc
    12f2:	2001      	movcc	r0, #1
    12f4:	2000      	movcs	r0, #0
    12f6:	f85d fb08 	ldr.w	pc, [sp], #8
    12fa:	bf00      	nop

000012fc <memcpy>:
    12fc:	4684      	mov	ip, r0
    12fe:	ea41 0300 	orr.w	r3, r1, r0
    1302:	f013 0303 	ands.w	r3, r3, #3
    1306:	d16d      	bne.n	13e4 <memcpy+0xe8>
    1308:	3a40      	subs	r2, #64	; 0x40
    130a:	d341      	bcc.n	1390 <memcpy+0x94>
    130c:	f851 3b04 	ldr.w	r3, [r1], #4
    1310:	f840 3b04 	str.w	r3, [r0], #4
    1314:	f851 3b04 	ldr.w	r3, [r1], #4
    1318:	f840 3b04 	str.w	r3, [r0], #4
    131c:	f851 3b04 	ldr.w	r3, [r1], #4
    1320:	f840 3b04 	str.w	r3, [r0], #4
    1324:	f851 3b04 	ldr.w	r3, [r1], #4
    1328:	f840 3b04 	str.w	r3, [r0], #4
    132c:	f851 3b04 	ldr.w	r3, [r1], #4
    1330:	f840 3b04 	str.w	r3, [r0], #4
    1334:	f851 3b04 	ldr.w	r3, [r1], #4
    1338:	f840 3b04 	str.w	r3, [r0], #4
    133c:	f851 3b04 	ldr.w	r3, [r1], #4
    1340:	f840 3b04 	str.w	r3, [r0], #4
    1344:	f851 3b04 	ldr.w	r3, [r1], #4
    1348:	f840 3b04 	str.w	r3, [r0], #4
    134c:	f851 3b04 	ldr.w	r3, [r1], #4
    1350:	f840 3b04 	str.w	r3, [r0], #4
    1354:	f851 3b04 	ldr.w	r3, [r1], #4
    1358:	f840 3b04 	str.w	r3, [r0], #4
    135c:	f851 3b04 	ldr.w	r3, [r1], #4
    1360:	f840 3b04 	str.w	r3, [r0], #4
    1364:	f851 3b04 	ldr.w	r3, [r1], #4
    1368:	f840 3b04 	str.w	r3, [r0], #4
    136c:	f851 3b04 	ldr.w	r3, [r1], #4
    1370:	f840 3b04 	str.w	r3, [r0], #4
    1374:	f851 3b04 	ldr.w	r3, [r1], #4
    1378:	f840 3b04 	str.w	r3, [r0], #4
    137c:	f851 3b04 	ldr.w	r3, [r1], #4
    1380:	f840 3b04 	str.w	r3, [r0], #4
    1384:	f851 3b04 	ldr.w	r3, [r1], #4
    1388:	f840 3b04 	str.w	r3, [r0], #4
    138c:	3a40      	subs	r2, #64	; 0x40
    138e:	d2bd      	bcs.n	130c <memcpy+0x10>
    1390:	3230      	adds	r2, #48	; 0x30
    1392:	d311      	bcc.n	13b8 <memcpy+0xbc>
    1394:	f851 3b04 	ldr.w	r3, [r1], #4
    1398:	f840 3b04 	str.w	r3, [r0], #4
    139c:	f851 3b04 	ldr.w	r3, [r1], #4
    13a0:	f840 3b04 	str.w	r3, [r0], #4
    13a4:	f851 3b04 	ldr.w	r3, [r1], #4
    13a8:	f840 3b04 	str.w	r3, [r0], #4
    13ac:	f851 3b04 	ldr.w	r3, [r1], #4
    13b0:	f840 3b04 	str.w	r3, [r0], #4
    13b4:	3a10      	subs	r2, #16
    13b6:	d2ed      	bcs.n	1394 <memcpy+0x98>
    13b8:	320c      	adds	r2, #12
    13ba:	d305      	bcc.n	13c8 <memcpy+0xcc>
    13bc:	f851 3b04 	ldr.w	r3, [r1], #4
    13c0:	f840 3b04 	str.w	r3, [r0], #4
    13c4:	3a04      	subs	r2, #4
    13c6:	d2f9      	bcs.n	13bc <memcpy+0xc0>
    13c8:	3204      	adds	r2, #4
    13ca:	d008      	beq.n	13de <memcpy+0xe2>
    13cc:	07d2      	lsls	r2, r2, #31
    13ce:	bf1c      	itt	ne
    13d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    13d4:	f800 3b01 	strbne.w	r3, [r0], #1
    13d8:	d301      	bcc.n	13de <memcpy+0xe2>
    13da:	880b      	ldrh	r3, [r1, #0]
    13dc:	8003      	strh	r3, [r0, #0]
    13de:	4660      	mov	r0, ip
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	2a08      	cmp	r2, #8
    13e6:	d313      	bcc.n	1410 <memcpy+0x114>
    13e8:	078b      	lsls	r3, r1, #30
    13ea:	d08d      	beq.n	1308 <memcpy+0xc>
    13ec:	f010 0303 	ands.w	r3, r0, #3
    13f0:	d08a      	beq.n	1308 <memcpy+0xc>
    13f2:	f1c3 0304 	rsb	r3, r3, #4
    13f6:	1ad2      	subs	r2, r2, r3
    13f8:	07db      	lsls	r3, r3, #31
    13fa:	bf1c      	itt	ne
    13fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    1400:	f800 3b01 	strbne.w	r3, [r0], #1
    1404:	d380      	bcc.n	1308 <memcpy+0xc>
    1406:	f831 3b02 	ldrh.w	r3, [r1], #2
    140a:	f820 3b02 	strh.w	r3, [r0], #2
    140e:	e77b      	b.n	1308 <memcpy+0xc>
    1410:	3a04      	subs	r2, #4
    1412:	d3d9      	bcc.n	13c8 <memcpy+0xcc>
    1414:	3a01      	subs	r2, #1
    1416:	f811 3b01 	ldrb.w	r3, [r1], #1
    141a:	f800 3b01 	strb.w	r3, [r0], #1
    141e:	d2f9      	bcs.n	1414 <memcpy+0x118>
    1420:	780b      	ldrb	r3, [r1, #0]
    1422:	7003      	strb	r3, [r0, #0]
    1424:	784b      	ldrb	r3, [r1, #1]
    1426:	7043      	strb	r3, [r0, #1]
    1428:	788b      	ldrb	r3, [r1, #2]
    142a:	7083      	strb	r3, [r0, #2]
    142c:	4660      	mov	r0, ip
    142e:	4770      	bx	lr

00001430 <__aeabi_dcmpun>:
    1430:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1438:	d102      	bne.n	1440 <__aeabi_dcmpun+0x10>
    143a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    143e:	d10a      	bne.n	1456 <__aeabi_dcmpun+0x26>
    1440:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1444:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1448:	d102      	bne.n	1450 <__aeabi_dcmpun+0x20>
    144a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    144e:	d102      	bne.n	1456 <__aeabi_dcmpun+0x26>
    1450:	f04f 0000 	mov.w	r0, #0
    1454:	4770      	bx	lr
    1456:	f04f 0001 	mov.w	r0, #1
    145a:	4770      	bx	lr

0000145c <__aeabi_d2iz>:
    145c:	ea4f 0241 	mov.w	r2, r1, lsl #1
    1460:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    1464:	d215      	bcs.n	1492 <__aeabi_d2iz+0x36>
    1466:	d511      	bpl.n	148c <__aeabi_d2iz+0x30>
    1468:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    146c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    1470:	d912      	bls.n	1498 <__aeabi_d2iz+0x3c>
    1472:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    1476:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    147a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    147e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1482:	fa23 f002 	lsr.w	r0, r3, r2
    1486:	bf18      	it	ne
    1488:	4240      	negne	r0, r0
    148a:	4770      	bx	lr
    148c:	f04f 0000 	mov.w	r0, #0
    1490:	4770      	bx	lr
    1492:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    1496:	d105      	bne.n	14a4 <__aeabi_d2iz+0x48>
    1498:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    149c:	bf08      	it	eq
    149e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    14a2:	4770      	bx	lr
    14a4:	f04f 0000 	mov.w	r0, #0
    14a8:	4770      	bx	lr
    14aa:	bf00      	nop

000014ac <__udivmoddi4>:
    14ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14b0:	4607      	mov	r7, r0
    14b2:	468c      	mov	ip, r1
    14b4:	4608      	mov	r0, r1
    14b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    14b8:	4615      	mov	r5, r2
    14ba:	463c      	mov	r4, r7
    14bc:	4619      	mov	r1, r3
    14be:	2b00      	cmp	r3, #0
    14c0:	f040 80c6 	bne.w	1650 <__udivmoddi4+0x1a4>
    14c4:	4282      	cmp	r2, r0
    14c6:	fab2 f782 	clz	r7, r2
    14ca:	d946      	bls.n	155a <__udivmoddi4+0xae>
    14cc:	b14f      	cbz	r7, 14e2 <__udivmoddi4+0x36>
    14ce:	f1c7 0e20 	rsb	lr, r7, #32
    14d2:	fa24 fe0e 	lsr.w	lr, r4, lr
    14d6:	fa00 f307 	lsl.w	r3, r0, r7
    14da:	40bd      	lsls	r5, r7
    14dc:	ea4e 0c03 	orr.w	ip, lr, r3
    14e0:	40bc      	lsls	r4, r7
    14e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
    14e6:	fa1f fe85 	uxth.w	lr, r5
    14ea:	fbbc f9f8 	udiv	r9, ip, r8
    14ee:	0c22      	lsrs	r2, r4, #16
    14f0:	fb08 c319 	mls	r3, r8, r9, ip
    14f4:	fb09 fa0e 	mul.w	sl, r9, lr
    14f8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    14fc:	459a      	cmp	sl, r3
    14fe:	d928      	bls.n	1552 <__udivmoddi4+0xa6>
    1500:	18eb      	adds	r3, r5, r3
    1502:	f109 30ff 	add.w	r0, r9, #4294967295
    1506:	d204      	bcs.n	1512 <__udivmoddi4+0x66>
    1508:	459a      	cmp	sl, r3
    150a:	d902      	bls.n	1512 <__udivmoddi4+0x66>
    150c:	f1a9 0002 	sub.w	r0, r9, #2
    1510:	442b      	add	r3, r5
    1512:	eba3 030a 	sub.w	r3, r3, sl
    1516:	b2a4      	uxth	r4, r4
    1518:	fbb3 f2f8 	udiv	r2, r3, r8
    151c:	fb08 3312 	mls	r3, r8, r2, r3
    1520:	fb02 fe0e 	mul.w	lr, r2, lr
    1524:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1528:	45a6      	cmp	lr, r4
    152a:	d914      	bls.n	1556 <__udivmoddi4+0xaa>
    152c:	192c      	adds	r4, r5, r4
    152e:	f102 33ff 	add.w	r3, r2, #4294967295
    1532:	d203      	bcs.n	153c <__udivmoddi4+0x90>
    1534:	45a6      	cmp	lr, r4
    1536:	d901      	bls.n	153c <__udivmoddi4+0x90>
    1538:	1e93      	subs	r3, r2, #2
    153a:	442c      	add	r4, r5
    153c:	eba4 040e 	sub.w	r4, r4, lr
    1540:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1544:	b11e      	cbz	r6, 154e <__udivmoddi4+0xa2>
    1546:	40fc      	lsrs	r4, r7
    1548:	2300      	movs	r3, #0
    154a:	6034      	str	r4, [r6, #0]
    154c:	6073      	str	r3, [r6, #4]
    154e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1552:	4648      	mov	r0, r9
    1554:	e7dd      	b.n	1512 <__udivmoddi4+0x66>
    1556:	4613      	mov	r3, r2
    1558:	e7f0      	b.n	153c <__udivmoddi4+0x90>
    155a:	b902      	cbnz	r2, 155e <__udivmoddi4+0xb2>
    155c:	deff      	udf	#255	; 0xff
    155e:	bb87      	cbnz	r7, 15c2 <__udivmoddi4+0x116>
    1560:	1a83      	subs	r3, r0, r2
    1562:	2101      	movs	r1, #1
    1564:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    1568:	b2aa      	uxth	r2, r5
    156a:	fbb3 fcfe 	udiv	ip, r3, lr
    156e:	0c20      	lsrs	r0, r4, #16
    1570:	fb0e 331c 	mls	r3, lr, ip, r3
    1574:	fb0c f802 	mul.w	r8, ip, r2
    1578:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    157c:	4598      	cmp	r8, r3
    157e:	d963      	bls.n	1648 <__udivmoddi4+0x19c>
    1580:	18eb      	adds	r3, r5, r3
    1582:	f10c 30ff 	add.w	r0, ip, #4294967295
    1586:	d204      	bcs.n	1592 <__udivmoddi4+0xe6>
    1588:	4598      	cmp	r8, r3
    158a:	d902      	bls.n	1592 <__udivmoddi4+0xe6>
    158c:	f1ac 0002 	sub.w	r0, ip, #2
    1590:	442b      	add	r3, r5
    1592:	eba3 0308 	sub.w	r3, r3, r8
    1596:	b2a4      	uxth	r4, r4
    1598:	fbb3 fcfe 	udiv	ip, r3, lr
    159c:	fb0e 331c 	mls	r3, lr, ip, r3
    15a0:	fb0c f202 	mul.w	r2, ip, r2
    15a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    15a8:	42a2      	cmp	r2, r4
    15aa:	d94f      	bls.n	164c <__udivmoddi4+0x1a0>
    15ac:	192c      	adds	r4, r5, r4
    15ae:	f10c 33ff 	add.w	r3, ip, #4294967295
    15b2:	d204      	bcs.n	15be <__udivmoddi4+0x112>
    15b4:	42a2      	cmp	r2, r4
    15b6:	d902      	bls.n	15be <__udivmoddi4+0x112>
    15b8:	f1ac 0302 	sub.w	r3, ip, #2
    15bc:	442c      	add	r4, r5
    15be:	1aa4      	subs	r4, r4, r2
    15c0:	e7be      	b.n	1540 <__udivmoddi4+0x94>
    15c2:	f1c7 0c20 	rsb	ip, r7, #32
    15c6:	fa20 f80c 	lsr.w	r8, r0, ip
    15ca:	fa00 f307 	lsl.w	r3, r0, r7
    15ce:	fa24 fc0c 	lsr.w	ip, r4, ip
    15d2:	40bd      	lsls	r5, r7
    15d4:	ea4c 0203 	orr.w	r2, ip, r3
    15d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    15dc:	b2ab      	uxth	r3, r5
    15de:	fbb8 fcfe 	udiv	ip, r8, lr
    15e2:	0c11      	lsrs	r1, r2, #16
    15e4:	fb0e 801c 	mls	r0, lr, ip, r8
    15e8:	fb0c f903 	mul.w	r9, ip, r3
    15ec:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    15f0:	4581      	cmp	r9, r0
    15f2:	fa04 f407 	lsl.w	r4, r4, r7
    15f6:	d923      	bls.n	1640 <__udivmoddi4+0x194>
    15f8:	1828      	adds	r0, r5, r0
    15fa:	f10c 31ff 	add.w	r1, ip, #4294967295
    15fe:	d204      	bcs.n	160a <__udivmoddi4+0x15e>
    1600:	4581      	cmp	r9, r0
    1602:	d902      	bls.n	160a <__udivmoddi4+0x15e>
    1604:	f1ac 0102 	sub.w	r1, ip, #2
    1608:	4428      	add	r0, r5
    160a:	eba0 0009 	sub.w	r0, r0, r9
    160e:	b292      	uxth	r2, r2
    1610:	fbb0 fcfe 	udiv	ip, r0, lr
    1614:	fb0e 001c 	mls	r0, lr, ip, r0
    1618:	fb0c f803 	mul.w	r8, ip, r3
    161c:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
    1620:	4598      	cmp	r8, r3
    1622:	d90f      	bls.n	1644 <__udivmoddi4+0x198>
    1624:	18eb      	adds	r3, r5, r3
    1626:	f10c 32ff 	add.w	r2, ip, #4294967295
    162a:	d204      	bcs.n	1636 <__udivmoddi4+0x18a>
    162c:	4598      	cmp	r8, r3
    162e:	d902      	bls.n	1636 <__udivmoddi4+0x18a>
    1630:	f1ac 0202 	sub.w	r2, ip, #2
    1634:	442b      	add	r3, r5
    1636:	eba3 0308 	sub.w	r3, r3, r8
    163a:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
    163e:	e791      	b.n	1564 <__udivmoddi4+0xb8>
    1640:	4661      	mov	r1, ip
    1642:	e7e2      	b.n	160a <__udivmoddi4+0x15e>
    1644:	4662      	mov	r2, ip
    1646:	e7f6      	b.n	1636 <__udivmoddi4+0x18a>
    1648:	4660      	mov	r0, ip
    164a:	e7a2      	b.n	1592 <__udivmoddi4+0xe6>
    164c:	4663      	mov	r3, ip
    164e:	e7b6      	b.n	15be <__udivmoddi4+0x112>
    1650:	4283      	cmp	r3, r0
    1652:	d905      	bls.n	1660 <__udivmoddi4+0x1b4>
    1654:	b10e      	cbz	r6, 165a <__udivmoddi4+0x1ae>
    1656:	e9c6 7000 	strd	r7, r0, [r6]
    165a:	2100      	movs	r1, #0
    165c:	4608      	mov	r0, r1
    165e:	e776      	b.n	154e <__udivmoddi4+0xa2>
    1660:	fab3 f183 	clz	r1, r3
    1664:	b981      	cbnz	r1, 1688 <__udivmoddi4+0x1dc>
    1666:	4283      	cmp	r3, r0
    1668:	d301      	bcc.n	166e <__udivmoddi4+0x1c2>
    166a:	42ba      	cmp	r2, r7
    166c:	d80a      	bhi.n	1684 <__udivmoddi4+0x1d8>
    166e:	1abc      	subs	r4, r7, r2
    1670:	eb60 0303 	sbc.w	r3, r0, r3
    1674:	2001      	movs	r0, #1
    1676:	469c      	mov	ip, r3
    1678:	2e00      	cmp	r6, #0
    167a:	d068      	beq.n	174e <__udivmoddi4+0x2a2>
    167c:	e9c6 4c00 	strd	r4, ip, [r6]
    1680:	2100      	movs	r1, #0
    1682:	e764      	b.n	154e <__udivmoddi4+0xa2>
    1684:	4608      	mov	r0, r1
    1686:	e7f7      	b.n	1678 <__udivmoddi4+0x1cc>
    1688:	f1c1 0c20 	rsb	ip, r1, #32
    168c:	408b      	lsls	r3, r1
    168e:	fa22 f40c 	lsr.w	r4, r2, ip
    1692:	431c      	orrs	r4, r3
    1694:	fa02 f501 	lsl.w	r5, r2, r1
    1698:	fa00 f301 	lsl.w	r3, r0, r1
    169c:	fa27 f20c 	lsr.w	r2, r7, ip
    16a0:	fa20 fb0c 	lsr.w	fp, r0, ip
    16a4:	ea4f 4914 	mov.w	r9, r4, lsr #16
    16a8:	4313      	orrs	r3, r2
    16aa:	fbbb f8f9 	udiv	r8, fp, r9
    16ae:	fa1f fe84 	uxth.w	lr, r4
    16b2:	fb09 bb18 	mls	fp, r9, r8, fp
    16b6:	0c1a      	lsrs	r2, r3, #16
    16b8:	fb08 fa0e 	mul.w	sl, r8, lr
    16bc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
    16c0:	4592      	cmp	sl, r2
    16c2:	fa07 f701 	lsl.w	r7, r7, r1
    16c6:	d93e      	bls.n	1746 <__udivmoddi4+0x29a>
    16c8:	18a2      	adds	r2, r4, r2
    16ca:	f108 30ff 	add.w	r0, r8, #4294967295
    16ce:	d204      	bcs.n	16da <__udivmoddi4+0x22e>
    16d0:	4592      	cmp	sl, r2
    16d2:	d902      	bls.n	16da <__udivmoddi4+0x22e>
    16d4:	f1a8 0002 	sub.w	r0, r8, #2
    16d8:	4422      	add	r2, r4
    16da:	eba2 020a 	sub.w	r2, r2, sl
    16de:	b29b      	uxth	r3, r3
    16e0:	fbb2 f8f9 	udiv	r8, r2, r9
    16e4:	fb09 2218 	mls	r2, r9, r8, r2
    16e8:	fb08 fe0e 	mul.w	lr, r8, lr
    16ec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    16f0:	4596      	cmp	lr, r2
    16f2:	d92a      	bls.n	174a <__udivmoddi4+0x29e>
    16f4:	18a2      	adds	r2, r4, r2
    16f6:	f108 33ff 	add.w	r3, r8, #4294967295
    16fa:	d204      	bcs.n	1706 <__udivmoddi4+0x25a>
    16fc:	4596      	cmp	lr, r2
    16fe:	d902      	bls.n	1706 <__udivmoddi4+0x25a>
    1700:	f1a8 0302 	sub.w	r3, r8, #2
    1704:	4422      	add	r2, r4
    1706:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    170a:	fba0 9305 	umull	r9, r3, r0, r5
    170e:	eba2 020e 	sub.w	r2, r2, lr
    1712:	429a      	cmp	r2, r3
    1714:	46ce      	mov	lr, r9
    1716:	4698      	mov	r8, r3
    1718:	d302      	bcc.n	1720 <__udivmoddi4+0x274>
    171a:	d106      	bne.n	172a <__udivmoddi4+0x27e>
    171c:	454f      	cmp	r7, r9
    171e:	d204      	bcs.n	172a <__udivmoddi4+0x27e>
    1720:	ebb9 0e05 	subs.w	lr, r9, r5
    1724:	eb63 0804 	sbc.w	r8, r3, r4
    1728:	3801      	subs	r0, #1
    172a:	b186      	cbz	r6, 174e <__udivmoddi4+0x2a2>
    172c:	ebb7 030e 	subs.w	r3, r7, lr
    1730:	eb62 0708 	sbc.w	r7, r2, r8
    1734:	fa07 fc0c 	lsl.w	ip, r7, ip
    1738:	40cb      	lsrs	r3, r1
    173a:	ea4c 0303 	orr.w	r3, ip, r3
    173e:	40cf      	lsrs	r7, r1
    1740:	e9c6 3700 	strd	r3, r7, [r6]
    1744:	e79c      	b.n	1680 <__udivmoddi4+0x1d4>
    1746:	4640      	mov	r0, r8
    1748:	e7c7      	b.n	16da <__udivmoddi4+0x22e>
    174a:	4643      	mov	r3, r8
    174c:	e7db      	b.n	1706 <__udivmoddi4+0x25a>
    174e:	4631      	mov	r1, r6
    1750:	e6fd      	b.n	154e <__udivmoddi4+0xa2>
    1752:	0000      	movs	r0, r0
    1754:	0000      	movs	r0, r0
	...

00001758 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    1758:	a101      	add	r1, pc, #4	; (adr r1, 1760 <ll_feat_get+0x8>)
    175a:	e9d1 0100 	ldrd	r0, r1, [r1]
    175e:	4770      	bx	lr
    1760:	00d071c0 	.word	0x00d071c0
    1764:	00000010 	.word	0x00000010

00001768 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    176c:	4688      	mov	r8, r1
    176e:	4616      	mov	r6, r2
	uint32_t start_to_address_expected_us;
	uint32_t start_to_address_actual_us;
	uint32_t window_widening_event_us;
	uint32_t preamble_to_addr_us;

	start_to_address_actual_us =
    1770:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
    1772:	6b01      	ldr	r1, [r0, #48]	; 0x30
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1774:	6b45      	ldr	r5, [r0, #52]	; 0x34
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1776:	194c      	adds	r4, r1, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1778:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    177a:	42a7      	cmp	r7, r4
    177c:	d818      	bhi.n	17b0 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    177e:	4d1c      	ldr	r5, [pc, #112]	; (17f0 <ull_drift_ticks_get+0x88>)
    1780:	a319      	add	r3, pc, #100	; (adr r3, 17e8 <ull_drift_ticks_get+0x80>)
    1782:	e9d3 2300 	ldrd	r2, r3, [r3]
    1786:	fba1 0105 	umull	r0, r1, r1, r5
    178a:	f7ff fd15 	bl	11b8 <__aeabi_uldivmod>
    178e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1792:	f8c8 0000 	str.w	r0, [r8]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1796:	1be0      	subs	r0, r4, r7
    1798:	a313      	add	r3, pc, #76	; (adr r3, 17e8 <ull_drift_ticks_get+0x80>)
    179a:	e9d3 2300 	ldrd	r2, r3, [r3]
    179e:	fba0 0105 	umull	r0, r1, r0, r5
    17a2:	f7ff fd09 	bl	11b8 <__aeabi_uldivmod>
    17a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    17aa:	6030      	str	r0, [r6, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    17ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    17b0:	4c0f      	ldr	r4, [pc, #60]	; (17f0 <ull_drift_ticks_get+0x88>)
    17b2:	a30d      	add	r3, pc, #52	; (adr r3, 17e8 <ull_drift_ticks_get+0x80>)
    17b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17b8:	fba7 0104 	umull	r0, r1, r7, r4
    17bc:	f7ff fcfc 	bl	11b8 <__aeabi_uldivmod>
    17c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    17c4:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    17c8:	f105 0030 	add.w	r0, r5, #48	; 0x30
    17cc:	a306      	add	r3, pc, #24	; (adr r3, 17e8 <ull_drift_ticks_get+0x80>)
    17ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    17d2:	fba0 0104 	umull	r0, r1, r0, r4
    17d6:	f7ff fcef 	bl	11b8 <__aeabi_uldivmod>
    17da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    17de:	6030      	str	r0, [r6, #0]
}
    17e0:	e7e4      	b.n	17ac <ull_drift_ticks_get+0x44>
    17e2:	bf00      	nop
    17e4:	f3af 8000 	nop.w
    17e8:	1afd498d 	.word	0x1afd498d
    17ec:	00000007 	.word	0x00000007
    17f0:	3b9aca00 	.word	0x3b9aca00
    17f4:	00000000 	.word	0x00000000

000017f8 <ull_scan_params_set>:
	return 0;
}

void ull_scan_params_set(struct lll_scan *lll, uint8_t type, uint16_t interval,
			 uint16_t window, uint8_t filter_policy)
{
    17f8:	b510      	push	{r4, lr}
    17fa:	4604      	mov	r4, r0
    17fc:	469c      	mov	ip, r3
	 * 0110b - invalid
	 * 0111b - invalid
	 * 1000b - Ext. Coded passive
	 * 1001b - Ext. Coded active
	 */
	lll->type = type;
    17fe:	7903      	ldrb	r3, [r0, #4]
    1800:	f361 1345 	bfi	r3, r1, #5, #1
    1804:	7103      	strb	r3, [r0, #4]
	lll->filter_policy = filter_policy;
    1806:	b2db      	uxtb	r3, r3
    1808:	f89d 1008 	ldrb.w	r1, [sp, #8]
    180c:	f361 03c4 	bfi	r3, r1, #3, #2
    1810:	7103      	strb	r3, [r0, #4]
	lll->interval = interval;
    1812:	8302      	strh	r2, [r0, #24]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1814:	480a      	ldr	r0, [pc, #40]	; (1840 <ull_scan_params_set+0x48>)
    1816:	fbac 0100 	umull	r0, r1, ip, r0
    181a:	a307      	add	r3, pc, #28	; (adr r3, 1838 <ull_scan_params_set+0x40>)
    181c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1820:	f04f 0e91 	mov.w	lr, #145	; 0x91
    1824:	fb0e 110c 	mla	r1, lr, ip, r1
    1828:	f7ff fcc6 	bl	11b8 <__aeabi_uldivmod>
    182c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1830:	61e0      	str	r0, [r4, #28]
						   SCAN_INT_UNIT_US);
}
    1832:	bd10      	pop	{r4, pc}
    1834:	f3af 8000 	nop.w
    1838:	1afd498d 	.word	0x1afd498d
    183c:	00000007 	.word	0x00000007
    1840:	84e72a00 	.word	0x84e72a00
    1844:	00000000 	.word	0x00000000

00001848 <ull_scan_enable>:

uint8_t ull_scan_enable(struct ll_scan_set *scan)
{
    1848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    184c:	b08c      	sub	sp, #48	; 0x30
    184e:	4604      	mov	r4, r0
	uint8_t handle;
	uint32_t ret;

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	/* Initialize extend scan stop request */
	scan->is_stop = 0U;
    1850:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    1854:	f36f 0300 	bfc	r3, #0, #1
    1858:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* Initialize LLL scan context */
	lll = &scan->lll;
	lll->init_addr_type = scan->own_addr_type;
    185c:	b2d8      	uxtb	r0, r3
    185e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1862:	f894 3020 	ldrb.w	r3, [r4, #32]
    1866:	f360 1386 	bfi	r3, r0, #6, #1
    186a:	f884 3020 	strb.w	r3, [r4, #32]
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    186e:	f104 012e 	add.w	r1, r4, #46	; 0x2e
    1872:	f019 fa6a 	bl	1ad4a <ll_addr_read>
	lll->chan = 0U;
    1876:	f894 3020 	ldrb.w	r3, [r4, #32]
    187a:	f36f 0342 	bfc	r3, #1, #2
    187e:	f884 3020 	strb.w	r3, [r4, #32]
	lll->is_stop = 0U;
    1882:	b2db      	uxtb	r3, r3
    1884:	f36f 13c7 	bfc	r3, #7, #1
    1888:	f884 3020 	strb.w	r3, [r4, #32]
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
    188c:	2500      	movs	r5, #0
    188e:	7025      	strb	r5, [r4, #0]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1890:	61a5      	str	r5, [r4, #24]
    1892:	6165      	str	r5, [r4, #20]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1894:	61e4      	str	r4, [r4, #28]

	ull_hdr_init(&scan->ull);
	lll_hdr_init(lll, scan);

	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1896:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
    1898:	4839      	ldr	r0, [pc, #228]	; (1980 <ull_scan_enable+0x138>)
    189a:	fba6 0100 	umull	r0, r1, r6, r0
    189e:	a336      	add	r3, pc, #216	; (adr r3, 1978 <ull_scan_enable+0x130>)
    18a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    18a4:	2791      	movs	r7, #145	; 0x91
    18a6:	fb07 1106 	mla	r1, r7, r6, r1
    18aa:	f7ff fc85 	bl	11b8 <__aeabi_uldivmod>
    18ae:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
						SCAN_INT_UNIT_US);

	/* TODO: active_to_start feature port */
	scan->ull.ticks_active_to_start = 0U;
    18b2:	6065      	str	r5, [r4, #4]
	scan->ull.ticks_prepare_to_start =
    18b4:	2331      	movs	r3, #49	; 0x31
    18b6:	60a3      	str	r3, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	scan->ull.ticks_preempt_to_start =
    18b8:	60e5      	str	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	if ((lll->ticks_window +
    18ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    18bc:	3309      	adds	r3, #9
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) <
	    (ticks_interval -
    18be:	f1a8 0231 	sub.w	r2, r8, #49	; 0x31
	if ((lll->ticks_window +
    18c2:	4293      	cmp	r3, r2
    18c4:	d252      	bcs.n	196c <ull_scan_enable+0x124>
	     HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US))) {
		scan->ull.ticks_slot =
    18c6:	6123      	str	r3, [r4, #16]
					  scan->ull.ticks_prepare_to_start);
	} else {
		ticks_slot_overhead = 0U;
	}

	ticks_anchor = ticker_ticks_now_get();
    18c8:	f018 fec1 	bl	1a64e <ticker_ticks_now_get>
    18cc:	4682      	mov	sl, r0
				       HAL_TICKER_US_TO_TICKS(offset_us);
		}
	}
#endif /* CONFIG_BT_CENTRAL && CONFIG_BT_CTLR_SCHED_ADVANCED */

	handle = ull_scan_handle_get(scan);
    18ce:	4620      	mov	r0, r4
    18d0:	f008 fcd2 	bl	a278 <ull_scan_handle_get>
    18d4:	4606      	mov	r6, r0

	} else {
		ticks_offset = 0U;
	}

	ret_cb = TICKER_STATUS_BUSY;
    18d6:	2302      	movs	r3, #2
    18d8:	930b      	str	r3, [sp, #44]	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
			   TICKER_USER_ID_THREAD, TICKER_ID_SCAN_BASE + handle,
			   (ticks_anchor + ticks_offset), 0, ticks_interval,
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    18da:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    18dc:	f04f 0900 	mov.w	r9, #0
    18e0:	4f27      	ldr	r7, [pc, #156]	; (1980 <ull_scan_enable+0x138>)
    18e2:	fba3 7507 	umull	r7, r5, r3, r7
    18e6:	2291      	movs	r2, #145	; 0x91
    18e8:	fb02 5503 	mla	r5, r2, r3, r5
    18ec:	a322      	add	r3, pc, #136	; (adr r3, 1978 <ull_scan_enable+0x130>)
    18ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    18f2:	4638      	mov	r0, r7
    18f4:	4629      	mov	r1, r5
    18f6:	f7ff fc5f 	bl	11b8 <__aeabi_uldivmod>
    18fa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    18fe:	4821      	ldr	r0, [pc, #132]	; (1984 <ull_scan_enable+0x13c>)
    1900:	fba1 0300 	umull	r0, r3, r1, r0
    1904:	2207      	movs	r2, #7
    1906:	fb02 3101 	mla	r1, r2, r1, r3
    190a:	1a38      	subs	r0, r7, r0
    190c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1910:	f04f 0300 	mov.w	r3, #0
    1914:	eb65 0101 	sbc.w	r1, r5, r1
    1918:	f7ff fc4e 	bl	11b8 <__aeabi_uldivmod>
						SCAN_INT_UNIT_US),
			   TICKER_NULL_LAZY,
			   (scan->ull.ticks_slot + ticks_slot_overhead),
    191c:	6923      	ldr	r3, [r4, #16]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    191e:	1cb2      	adds	r2, r6, #2
    1920:	ad0b      	add	r5, sp, #44	; 0x2c
    1922:	9508      	str	r5, [sp, #32]
    1924:	4918      	ldr	r1, [pc, #96]	; (1988 <ull_scan_enable+0x140>)
    1926:	9107      	str	r1, [sp, #28]
    1928:	9406      	str	r4, [sp, #24]
    192a:	4918      	ldr	r1, [pc, #96]	; (198c <ull_scan_enable+0x144>)
    192c:	9105      	str	r1, [sp, #20]
    192e:	9304      	str	r3, [sp, #16]
    1930:	f8cd 900c 	str.w	r9, [sp, #12]
    1934:	9002      	str	r0, [sp, #8]
    1936:	f8cd 8004 	str.w	r8, [sp, #4]
    193a:	f8cd 9000 	str.w	r9, [sp]
    193e:	4653      	mov	r3, sl
    1940:	b2d2      	uxtb	r2, r2
    1942:	2103      	movs	r1, #3
    1944:	4648      	mov	r0, r9
    1946:	f018 fe4f 	bl	1a5e8 <ticker_start>
			   ticker_cb, scan,
			   ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
    194a:	4629      	mov	r1, r5
    194c:	f007 ff02 	bl	9754 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1950:	b980      	cbnz	r0, 1974 <ull_scan_enable+0x12c>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	scan->is_enabled = 1U;
    1952:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1956:	f043 0302 	orr.w	r3, r3, #2
    195a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
#endif
	{
		ull_filter_adv_scan_state_cb(BIT(1));
    195e:	2002      	movs	r0, #2
    1960:	f01a fcea 	bl	1c338 <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
    1964:	4648      	mov	r0, r9
}
    1966:	b00c      	add	sp, #48	; 0x30
    1968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			scan->ull.ticks_slot = ticks_interval -
    196c:	6122      	str	r2, [r4, #16]
		lll->ticks_window = 0U;
    196e:	2300      	movs	r3, #0
    1970:	63a3      	str	r3, [r4, #56]	; 0x38
    1972:	e7a9      	b.n	18c8 <ull_scan_enable+0x80>
		return BT_HCI_ERR_CMD_DISALLOWED;
    1974:	200c      	movs	r0, #12
    1976:	e7f6      	b.n	1966 <ull_scan_enable+0x11e>
    1978:	1afd498d 	.word	0x1afd498d
    197c:	00000007 	.word	0x00000007
    1980:	84e72a00 	.word	0x84e72a00
    1984:	1afd498d 	.word	0x1afd498d
    1988:	00009235 	.word	0x00009235
    198c:	0000a2e9 	.word	0x0000a2e9

00001990 <ull_scan_aux_setup>:

	return 0;
}

void ull_scan_aux_setup(memq_link_t *link, struct node_rx_hdr *rx)
{
    1990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1994:	b093      	sub	sp, #76	; 0x4c
    1996:	900a      	str	r0, [sp, #40]	; 0x28
    1998:	460c      	mov	r4, r1
	uint8_t phy;

	is_scan_req = false;
	ftr = &rx->rx_ftr;

	switch (rx->type) {
    199a:	790b      	ldrb	r3, [r1, #4]
    199c:	3b06      	subs	r3, #6
    199e:	2b07      	cmp	r3, #7
    19a0:	f200 81c6 	bhi.w	1d30 <ull_scan_aux_setup+0x3a0>
    19a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    19a8:	01c40008 	.word	0x01c40008
    19ac:	00c00094 	.word	0x00c00094
    19b0:	01c401c4 	.word	0x01c401c4
    19b4:	019a01c4 	.word	0x019a01c4
		aux = NULL;
		sync_lll = NULL;
		sync_iso = NULL;
		rx_incomplete = NULL;

		lll = ftr->param;
    19b8:	f8d1 a008 	ldr.w	sl, [r1, #8]
		LL_ASSERT(!lll->lll_aux);
    19bc:	f8da 3008 	ldr.w	r3, [sl, #8]
    19c0:	b15b      	cbz	r3, 19da <ull_scan_aux_setup+0x4a>
    19c2:	238c      	movs	r3, #140	; 0x8c
    19c4:	4a9d      	ldr	r2, [pc, #628]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    19c6:	499e      	ldr	r1, [pc, #632]	; (1c40 <ull_scan_aux_setup+0x2b0>)
    19c8:	489e      	ldr	r0, [pc, #632]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    19ca:	f017 ff00 	bl	197ce <assert_print>
    19ce:	4040      	eors	r0, r0
    19d0:	f380 8811 	msr	BASEPRI, r0
    19d4:	f04f 0003 	mov.w	r0, #3
    19d8:	df02      	svc	2

		scan = HDR_LLL2ULL(lll);
    19da:	f8da 6000 	ldr.w	r6, [sl]
}

static inline struct ll_sync_set *sync_create_get(struct ll_scan_set *scan)
{
#if defined(CONFIG_BT_CTLR_SYNC_PERIODIC)
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    19de:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    19e2:	f013 0f04 	tst.w	r3, #4
    19e6:	d170      	bne.n	1aca <ull_scan_aux_setup+0x13a>
    19e8:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
				      ull_scan_handle_get(scan);
    19ec:	4630      	mov	r0, r6
    19ee:	f008 fc43 	bl	a278 <ull_scan_handle_get>
		ticker_yield_handle = TICKER_ID_SCAN_BASE +
    19f2:	3002      	adds	r0, #2
    19f4:	b2c3      	uxtb	r3, r0
    19f6:	930f      	str	r3, [sp, #60]	; 0x3c
		phy = BT_HCI_LE_EXT_SCAN_PHY_1M;
    19f8:	2301      	movs	r3, #1
    19fa:	930e      	str	r3, [sp, #56]	; 0x38
	is_scan_req = false;
    19fc:	2300      	movs	r3, #0
    19fe:	930c      	str	r3, [sp, #48]	; 0x30
		sync_lll = NULL;
    1a00:	461f      	mov	r7, r3
		aux = NULL;
    1a02:	461d      	mov	r5, r3
		lll_aux = NULL;
    1a04:	930b      	str	r3, [sp, #44]	; 0x2c
		rx_incomplete = NULL;
    1a06:	930d      	str	r3, [sp, #52]	; 0x34
	rx->link = link;
    1a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a0a:	6023      	str	r3, [r4, #0]
	ftr->extra = NULL;
    1a0c:	2200      	movs	r2, #0
    1a0e:	60e2      	str	r2, [r4, #12]
	ftr->aux_sched = 0U;
    1a10:	7ee3      	ldrb	r3, [r4, #27]
    1a12:	f362 0382 	bfi	r3, r2, #2, #1
    1a16:	76e3      	strb	r3, [r4, #27]
	p = (void *)&pdu->adv_ext_ind;
    1a18:	f104 0822 	add.w	r8, r4, #34	; 0x22
	if (!pdu->len || !p->ext_hdr_len) {
    1a1c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    1a20:	2b00      	cmp	r3, #0
    1a22:	f000 8193 	beq.w	1d4c <ull_scan_aux_setup+0x3bc>
    1a26:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    1a2a:	f012 0f3f 	tst.w	r2, #63	; 0x3f
    1a2e:	f000 818d 	beq.w	1d4c <ull_scan_aux_setup+0x3bc>
	if (h->rfu) {
    1a32:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    1a36:	f994 3023 	ldrsb.w	r3, [r4, #35]	; 0x23
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	f2c0 8192 	blt.w	1d64 <ull_scan_aux_setup+0x3d4>
	ptr = h->data;
    1a40:	f104 0924 	add.w	r9, r4, #36	; 0x24
	if (h->adv_addr) {
    1a44:	f012 0f01 	tst.w	r2, #1
    1a48:	d00b      	beq.n	1a62 <ull_scan_aux_setup+0xd2>
		if (sync && (scan->periodic.state != LL_SYNC_STATE_CREATED)) {
    1a4a:	f1bb 0f00 	cmp.w	fp, #0
    1a4e:	d006      	beq.n	1a5e <ull_scan_aux_setup+0xce>
    1a50:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    1a54:	f003 0318 	and.w	r3, r3, #24
    1a58:	2b10      	cmp	r3, #16
    1a5a:	f040 81b3 	bne.w	1dc4 <ull_scan_aux_setup+0x434>
		ptr += BDADDR_SIZE;
    1a5e:	f104 092a 	add.w	r9, r4, #42	; 0x2a
	if (h->tgt_addr) {
    1a62:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    1a66:	f013 0f02 	tst.w	r3, #2
    1a6a:	d001      	beq.n	1a70 <ull_scan_aux_setup+0xe0>
		ptr += BDADDR_SIZE;
    1a6c:	f109 0906 	add.w	r9, r9, #6
	if (h->cte_info) {
    1a70:	f013 0f04 	tst.w	r3, #4
    1a74:	d001      	beq.n	1a7a <ull_scan_aux_setup+0xea>
		ptr += sizeof(struct pdu_cte_info);
    1a76:	f109 0901 	add.w	r9, r9, #1
	if (h->adi) {
    1a7a:	f013 0f08 	tst.w	r3, #8
    1a7e:	f000 81ab 	beq.w	1dd8 <ull_scan_aux_setup+0x448>
		adi = (void *)ptr;
    1a82:	464a      	mov	r2, r9
		ptr += sizeof(*adi);
    1a84:	f109 0902 	add.w	r9, r9, #2
	if (h->aux_ptr) {
    1a88:	f013 0f10 	tst.w	r3, #16
    1a8c:	f000 81a6 	beq.w	1ddc <ull_scan_aux_setup+0x44c>
		aux_ptr = (void *)ptr;
    1a90:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
		ptr += sizeof(*aux_ptr);
    1a94:	f109 0903 	add.w	r9, r9, #3
	if (h->sync_info) {
    1a98:	f013 0f20 	tst.w	r3, #32
    1a9c:	f000 81af 	beq.w	1dfe <ull_scan_aux_setup+0x46e>
		ptr += sizeof(*si);
    1aa0:	f109 0312 	add.w	r3, r9, #18
    1aa4:	9311      	str	r3, [sp, #68]	; 0x44
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync && adi &&
    1aa6:	f1bb 0f00 	cmp.w	fp, #0
    1aaa:	f000 81a3 	beq.w	1df4 <ull_scan_aux_setup+0x464>
    1aae:	2a00      	cmp	r2, #0
    1ab0:	f000 81a3 	beq.w	1dfa <ull_scan_aux_setup+0x46a>
		    ull_sync_setup_sid_match(scan, adi->sid)) {
    1ab4:	7851      	ldrb	r1, [r2, #1]
    1ab6:	0909      	lsrs	r1, r1, #4
    1ab8:	4630      	mov	r0, r6
    1aba:	f01a fa9b 	bl	1bff4 <ull_sync_setup_sid_match>
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync && adi &&
    1abe:	2800      	cmp	r0, #0
    1ac0:	f040 818f 	bne.w	1de2 <ull_scan_aux_setup+0x452>
		ptr += sizeof(*si);
    1ac4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    1ac8:	e199      	b.n	1dfe <ull_scan_aux_setup+0x46e>
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    1aca:	f04f 0b00 	mov.w	fp, #0
    1ace:	e78d      	b.n	19ec <ull_scan_aux_setup+0x5c>
		lll = ftr->param;
    1ad0:	f8d1 a008 	ldr.w	sl, [r1, #8]
		LL_ASSERT(!lll->lll_aux);
    1ad4:	f8da 3008 	ldr.w	r3, [sl, #8]
    1ad8:	b15b      	cbz	r3, 1af2 <ull_scan_aux_setup+0x162>
    1ada:	239e      	movs	r3, #158	; 0x9e
    1adc:	4a57      	ldr	r2, [pc, #348]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1ade:	4958      	ldr	r1, [pc, #352]	; (1c40 <ull_scan_aux_setup+0x2b0>)
    1ae0:	4858      	ldr	r0, [pc, #352]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1ae2:	f017 fe74 	bl	197ce <assert_print>
    1ae6:	4040      	eors	r0, r0
    1ae8:	f380 8811 	msr	BASEPRI, r0
    1aec:	f04f 0003 	mov.w	r0, #3
    1af0:	df02      	svc	2
		scan = HDR_LLL2ULL(lll);
    1af2:	f8da 6000 	ldr.w	r6, [sl]
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    1af6:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    1afa:	f013 0f04 	tst.w	r3, #4
    1afe:	d110      	bne.n	1b22 <ull_scan_aux_setup+0x192>
    1b00:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
				      ull_scan_handle_get(scan);
    1b04:	4630      	mov	r0, r6
    1b06:	f008 fbb7 	bl	a278 <ull_scan_handle_get>
		ticker_yield_handle = TICKER_ID_SCAN_BASE +
    1b0a:	3002      	adds	r0, #2
    1b0c:	b2c3      	uxtb	r3, r0
    1b0e:	930f      	str	r3, [sp, #60]	; 0x3c
		phy = BT_HCI_LE_EXT_SCAN_PHY_CODED;
    1b10:	2304      	movs	r3, #4
    1b12:	930e      	str	r3, [sp, #56]	; 0x38
	is_scan_req = false;
    1b14:	2300      	movs	r3, #0
    1b16:	930c      	str	r3, [sp, #48]	; 0x30
		sync_lll = NULL;
    1b18:	461f      	mov	r7, r3
		aux = NULL;
    1b1a:	461d      	mov	r5, r3
		lll_aux = NULL;
    1b1c:	930b      	str	r3, [sp, #44]	; 0x2c
		rx_incomplete = NULL;
    1b1e:	930d      	str	r3, [sp, #52]	; 0x34
		break;
    1b20:	e772      	b.n	1a08 <ull_scan_aux_setup+0x78>
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    1b22:	f04f 0b00 	mov.w	fp, #0
    1b26:	e7ed      	b.n	1b04 <ull_scan_aux_setup+0x174>
		if (ull_scan_aux_is_valid_get(HDR_LLL2ULL(ftr->param))) {
    1b28:	688b      	ldr	r3, [r1, #8]
    1b2a:	930b      	str	r3, [sp, #44]	; 0x2c
    1b2c:	681d      	ldr	r5, [r3, #0]
    1b2e:	4628      	mov	r0, r5
    1b30:	f008 ff46 	bl	a9c0 <ull_scan_aux_is_valid_get>
    1b34:	4607      	mov	r7, r0
    1b36:	b348      	cbz	r0, 1b8c <ull_scan_aux_setup+0x1fc>
			lll = aux->parent;
    1b38:	f8d5 a028 	ldr.w	sl, [r5, #40]	; 0x28
			LL_ASSERT(lll);
    1b3c:	f1ba 0f00 	cmp.w	sl, #0
    1b40:	d017      	beq.n	1b72 <ull_scan_aux_setup+0x1e2>
	return mem_index_get(aux, ll_scan_aux_pool,
    1b42:	223c      	movs	r2, #60	; 0x3c
    1b44:	4940      	ldr	r1, [pc, #256]	; (1c48 <ull_scan_aux_setup+0x2b8>)
    1b46:	4628      	mov	r0, r5
    1b48:	f018 fb0a 	bl	1a160 <mem_index_get>
    1b4c:	b2c0      	uxtb	r0, r0
			ticker_yield_handle = TICKER_ID_SCAN_AUX_BASE +
    1b4e:	3003      	adds	r0, #3
    1b50:	b2c3      	uxtb	r3, r0
    1b52:	930f      	str	r3, [sp, #60]	; 0x3c
			sync_lll = NULL;
    1b54:	2700      	movs	r7, #0
		if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) || lll) {
    1b56:	f1ba 0f00 	cmp.w	sl, #0
    1b5a:	d07f      	beq.n	1c5c <ull_scan_aux_setup+0x2cc>
			scan = HDR_LLL2ULL(lll);
    1b5c:	f8da 8000 	ldr.w	r8, [sl]
			scan = ull_scan_is_valid_get(scan);
    1b60:	4640      	mov	r0, r8
    1b62:	f008 fcd7 	bl	a514 <ull_scan_is_valid_get>
			if (scan) {
    1b66:	4606      	mov	r6, r0
    1b68:	2800      	cmp	r0, #0
    1b6a:	d07a      	beq.n	1c62 <ull_scan_aux_setup+0x2d2>
				sync = NULL;
    1b6c:	f04f 0800 	mov.w	r8, #0
    1b70:	e077      	b.n	1c62 <ull_scan_aux_setup+0x2d2>
			LL_ASSERT(lll);
    1b72:	23b6      	movs	r3, #182	; 0xb6
    1b74:	4a31      	ldr	r2, [pc, #196]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1b76:	4935      	ldr	r1, [pc, #212]	; (1c4c <ull_scan_aux_setup+0x2bc>)
    1b78:	4832      	ldr	r0, [pc, #200]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1b7a:	f017 fe28 	bl	197ce <assert_print>
    1b7e:	4040      	eors	r0, r0
    1b80:	f380 8811 	msr	BASEPRI, r0
    1b84:	f04f 0003 	mov.w	r0, #3
    1b88:	df02      	svc	2
    1b8a:	e7da      	b.n	1b42 <ull_scan_aux_setup+0x1b2>
			   ull_scan_is_valid_get(HDR_LLL2ULL(ftr->param))) {
    1b8c:	4628      	mov	r0, r5
    1b8e:	f008 fcc1 	bl	a514 <ull_scan_is_valid_get>
		} else if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) ||
    1b92:	4682      	mov	sl, r0
    1b94:	b330      	cbz	r0, 1be4 <ull_scan_aux_setup+0x254>
			lll = ftr->param;
    1b96:	f8d4 a008 	ldr.w	sl, [r4, #8]
			lll_aux = lll->lll_aux;
    1b9a:	f8da 3008 	ldr.w	r3, [sl, #8]
    1b9e:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(lll_aux);
    1ba0:	b19b      	cbz	r3, 1bca <ull_scan_aux_setup+0x23a>
			aux = HDR_LLL2ULL(lll_aux);
    1ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ba4:	681d      	ldr	r5, [r3, #0]
			LL_ASSERT(lll == aux->parent);
    1ba6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1ba8:	4553      	cmp	r3, sl
    1baa:	d040      	beq.n	1c2e <ull_scan_aux_setup+0x29e>
    1bac:	23ca      	movs	r3, #202	; 0xca
    1bae:	4a23      	ldr	r2, [pc, #140]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1bb0:	4927      	ldr	r1, [pc, #156]	; (1c50 <ull_scan_aux_setup+0x2c0>)
    1bb2:	4824      	ldr	r0, [pc, #144]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1bb4:	f017 fe0b 	bl	197ce <assert_print>
    1bb8:	4040      	eors	r0, r0
    1bba:	f380 8811 	msr	BASEPRI, r0
    1bbe:	f04f 0003 	mov.w	r0, #3
    1bc2:	df02      	svc	2
			ticker_yield_handle = TICKER_NULL;
    1bc4:	23ff      	movs	r3, #255	; 0xff
    1bc6:	930f      	str	r3, [sp, #60]	; 0x3c
    1bc8:	e7c5      	b.n	1b56 <ull_scan_aux_setup+0x1c6>
			LL_ASSERT(lll_aux);
    1bca:	23c7      	movs	r3, #199	; 0xc7
    1bcc:	4a1b      	ldr	r2, [pc, #108]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1bce:	4921      	ldr	r1, [pc, #132]	; (1c54 <ull_scan_aux_setup+0x2c4>)
    1bd0:	481c      	ldr	r0, [pc, #112]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1bd2:	f017 fdfc 	bl	197ce <assert_print>
    1bd6:	4040      	eors	r0, r0
    1bd8:	f380 8811 	msr	BASEPRI, r0
    1bdc:	f04f 0003 	mov.w	r0, #3
    1be0:	df02      	svc	2
    1be2:	e7de      	b.n	1ba2 <ull_scan_aux_setup+0x212>
			sync_lll = ftr->param;
    1be4:	68a7      	ldr	r7, [r4, #8]
			lll_aux = sync_lll->lll_aux;
    1be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1be8:	930b      	str	r3, [sp, #44]	; 0x2c
			LL_ASSERT(lll_aux);
    1bea:	b19b      	cbz	r3, 1c14 <ull_scan_aux_setup+0x284>
			aux = HDR_LLL2ULL(lll_aux);
    1bec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bee:	681d      	ldr	r5, [r3, #0]
			LL_ASSERT(sync_lll == aux->parent);
    1bf0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1bf2:	42bb      	cmp	r3, r7
    1bf4:	d01e      	beq.n	1c34 <ull_scan_aux_setup+0x2a4>
    1bf6:	23d9      	movs	r3, #217	; 0xd9
    1bf8:	4a10      	ldr	r2, [pc, #64]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1bfa:	4917      	ldr	r1, [pc, #92]	; (1c58 <ull_scan_aux_setup+0x2c8>)
    1bfc:	4811      	ldr	r0, [pc, #68]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1bfe:	f017 fde6 	bl	197ce <assert_print>
    1c02:	4040      	eors	r0, r0
    1c04:	f380 8811 	msr	BASEPRI, r0
    1c08:	f04f 0003 	mov.w	r0, #3
    1c0c:	df02      	svc	2
			ticker_yield_handle = TICKER_NULL;
    1c0e:	23ff      	movs	r3, #255	; 0xff
    1c10:	930f      	str	r3, [sp, #60]	; 0x3c
    1c12:	e7a0      	b.n	1b56 <ull_scan_aux_setup+0x1c6>
			LL_ASSERT(lll_aux);
    1c14:	23d6      	movs	r3, #214	; 0xd6
    1c16:	4a09      	ldr	r2, [pc, #36]	; (1c3c <ull_scan_aux_setup+0x2ac>)
    1c18:	490e      	ldr	r1, [pc, #56]	; (1c54 <ull_scan_aux_setup+0x2c4>)
    1c1a:	480a      	ldr	r0, [pc, #40]	; (1c44 <ull_scan_aux_setup+0x2b4>)
    1c1c:	f017 fdd7 	bl	197ce <assert_print>
    1c20:	4040      	eors	r0, r0
    1c22:	f380 8811 	msr	BASEPRI, r0
    1c26:	f04f 0003 	mov.w	r0, #3
    1c2a:	df02      	svc	2
    1c2c:	e7de      	b.n	1bec <ull_scan_aux_setup+0x25c>
			ticker_yield_handle = TICKER_NULL;
    1c2e:	23ff      	movs	r3, #255	; 0xff
    1c30:	930f      	str	r3, [sp, #60]	; 0x3c
    1c32:	e790      	b.n	1b56 <ull_scan_aux_setup+0x1c6>
			ticker_yield_handle = TICKER_NULL;
    1c34:	23ff      	movs	r3, #255	; 0xff
    1c36:	930f      	str	r3, [sp, #60]	; 0x3c
    1c38:	e78d      	b.n	1b56 <ull_scan_aux_setup+0x1c6>
    1c3a:	bf00      	nop
    1c3c:	0001ee2c 	.word	0x0001ee2c
    1c40:	0001eec8 	.word	0x0001eec8
    1c44:	0001e920 	.word	0x0001e920
    1c48:	2000587c 	.word	0x2000587c
    1c4c:	0001eea0 	.word	0x0001eea0
    1c50:	0001eee0 	.word	0x0001eee0
    1c54:	0001eed8 	.word	0x0001eed8
    1c58:	0001eef4 	.word	0x0001eef4
			sync = HDR_LLL2ULL(sync_lll);
    1c5c:	f8d7 8000 	ldr.w	r8, [r7]
			scan = NULL;
    1c60:	4656      	mov	r6, sl
		phy = lll_aux->phy;
    1c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c64:	795b      	ldrb	r3, [r3, #5]
    1c66:	f003 0307 	and.w	r3, r3, #7
    1c6a:	930e      	str	r3, [sp, #56]	; 0x38
		if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) || scan) {
    1c6c:	b35e      	cbz	r6, 1cc6 <ull_scan_aux_setup+0x336>
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    1c6e:	f896 2049 	ldrb.w	r2, [r6, #73]	; 0x49
    1c72:	f012 0f04 	tst.w	r2, #4
    1c76:	d114      	bne.n	1ca2 <ull_scan_aux_setup+0x312>
    1c78:	f8d6 b050 	ldr.w	fp, [r6, #80]	; 0x50
			switch (phy) {
    1c7c:	2b02      	cmp	r3, #2
    1c7e:	d01c      	beq.n	1cba <ull_scan_aux_setup+0x32a>
    1c80:	2b04      	cmp	r3, #4
    1c82:	d01d      	beq.n	1cc0 <ull_scan_aux_setup+0x330>
    1c84:	2b01      	cmp	r3, #1
    1c86:	d00f      	beq.n	1ca8 <ull_scan_aux_setup+0x318>
				LL_ASSERT(0);
    1c88:	23fb      	movs	r3, #251	; 0xfb
    1c8a:	4a93      	ldr	r2, [pc, #588]	; (1ed8 <ull_scan_aux_setup+0x548>)
    1c8c:	4993      	ldr	r1, [pc, #588]	; (1edc <ull_scan_aux_setup+0x54c>)
    1c8e:	4894      	ldr	r0, [pc, #592]	; (1ee0 <ull_scan_aux_setup+0x550>)
    1c90:	f017 fd9d 	bl	197ce <assert_print>
    1c94:	4040      	eors	r0, r0
    1c96:	f380 8811 	msr	BASEPRI, r0
    1c9a:	f04f 0003 	mov.w	r0, #3
    1c9e:	df02      	svc	2
				return;
    1ca0:	e084      	b.n	1dac <ull_scan_aux_setup+0x41c>
	return (!scan->periodic.cancelled) ? scan->periodic.sync : NULL;
    1ca2:	f04f 0b00 	mov.w	fp, #0
    1ca6:	e7e9      	b.n	1c7c <ull_scan_aux_setup+0x2ec>
				rx->type = NODE_RX_TYPE_EXT_1M_REPORT;
    1ca8:	2306      	movs	r3, #6
    1caa:	7123      	strb	r3, [r4, #4]
			is_scan_req = !!ftr->scan_req;
    1cac:	7ea3      	ldrb	r3, [r4, #26]
    1cae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1cb2:	930c      	str	r3, [sp, #48]	; 0x30
		rx_incomplete = NULL;
    1cb4:	2300      	movs	r3, #0
    1cb6:	930d      	str	r3, [sp, #52]	; 0x34
    1cb8:	e6a6      	b.n	1a08 <ull_scan_aux_setup+0x78>
				rx->type = NODE_RX_TYPE_EXT_2M_REPORT;
    1cba:	2307      	movs	r3, #7
    1cbc:	7123      	strb	r3, [r4, #4]
				break;
    1cbe:	e7f5      	b.n	1cac <ull_scan_aux_setup+0x31c>
				rx->type = NODE_RX_TYPE_EXT_CODED_REPORT;
    1cc0:	2308      	movs	r3, #8
    1cc2:	7123      	strb	r3, [r4, #4]
				break;
    1cc4:	e7f2      	b.n	1cac <ull_scan_aux_setup+0x31c>
			rx->type = NODE_RX_TYPE_SYNC_REPORT;
    1cc6:	230d      	movs	r3, #13
    1cc8:	7123      	strb	r3, [r4, #4]
			rx->handle = ull_sync_handle_get(sync);
    1cca:	4640      	mov	r0, r8
    1ccc:	f009 f9d4 	bl	b078 <ull_sync_handle_get>
    1cd0:	80e0      	strh	r0, [r4, #6]
			sync = NULL;
    1cd2:	46b3      	mov	fp, r6
		rx_incomplete = NULL;
    1cd4:	960d      	str	r6, [sp, #52]	; 0x34
	is_scan_req = false;
    1cd6:	2300      	movs	r3, #0
    1cd8:	930c      	str	r3, [sp, #48]	; 0x30
    1cda:	e695      	b.n	1a08 <ull_scan_aux_setup+0x78>
			sync_lll = ftr->param;
    1cdc:	688f      	ldr	r7, [r1, #8]
			LL_ASSERT(!sync_lll->lll_aux);
    1cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ce0:	b163      	cbz	r3, 1cfc <ull_scan_aux_setup+0x36c>
    1ce2:	f44f 738f 	mov.w	r3, #286	; 0x11e
    1ce6:	4a7c      	ldr	r2, [pc, #496]	; (1ed8 <ull_scan_aux_setup+0x548>)
    1ce8:	497e      	ldr	r1, [pc, #504]	; (1ee4 <ull_scan_aux_setup+0x554>)
    1cea:	487d      	ldr	r0, [pc, #500]	; (1ee0 <ull_scan_aux_setup+0x550>)
    1cec:	f017 fd6f 	bl	197ce <assert_print>
    1cf0:	4040      	eors	r0, r0
    1cf2:	f380 8811 	msr	BASEPRI, r0
    1cf6:	f04f 0003 	mov.w	r0, #3
    1cfa:	df02      	svc	2
			ull_sync = HDR_LLL2ULL(sync_lll);
    1cfc:	683d      	ldr	r5, [r7, #0]
			rx->handle = ull_sync_handle_get(ull_sync);
    1cfe:	4628      	mov	r0, r5
    1d00:	f009 f9ba 	bl	b078 <ull_sync_handle_get>
    1d04:	80e0      	strh	r0, [r4, #6]
			phy =  sync_lll->phy;
    1d06:	7afb      	ldrb	r3, [r7, #11]
    1d08:	f003 0307 	and.w	r3, r3, #7
    1d0c:	930e      	str	r3, [sp, #56]	; 0x38
			rx_incomplete = ftr->extra;
    1d0e:	68e3      	ldr	r3, [r4, #12]
    1d10:	930d      	str	r3, [sp, #52]	; 0x34
					      ull_sync_handle_get(ull_sync);
    1d12:	4628      	mov	r0, r5
    1d14:	f009 f9b0 	bl	b078 <ull_sync_handle_get>
			ticker_yield_handle = TICKER_ID_SCAN_SYNC_BASE +
    1d18:	b2c0      	uxtb	r0, r0
    1d1a:	3004      	adds	r0, #4
    1d1c:	b2c3      	uxtb	r3, r0
    1d1e:	930f      	str	r3, [sp, #60]	; 0x3c
	is_scan_req = false;
    1d20:	2300      	movs	r3, #0
    1d22:	930c      	str	r3, [sp, #48]	; 0x30
			lll = NULL;
    1d24:	469a      	mov	sl, r3
			sync = NULL;
    1d26:	469b      	mov	fp, r3
			scan = NULL;
    1d28:	461e      	mov	r6, r3
			aux = NULL;
    1d2a:	461d      	mov	r5, r3
			lll_aux = NULL;
    1d2c:	930b      	str	r3, [sp, #44]	; 0x2c
		break;
    1d2e:	e66b      	b.n	1a08 <ull_scan_aux_setup+0x78>
		LL_ASSERT(0);
    1d30:	f240 133d 	movw	r3, #317	; 0x13d
    1d34:	4a68      	ldr	r2, [pc, #416]	; (1ed8 <ull_scan_aux_setup+0x548>)
    1d36:	4969      	ldr	r1, [pc, #420]	; (1edc <ull_scan_aux_setup+0x54c>)
    1d38:	4869      	ldr	r0, [pc, #420]	; (1ee0 <ull_scan_aux_setup+0x550>)
    1d3a:	f017 fd48 	bl	197ce <assert_print>
    1d3e:	4040      	eors	r0, r0
    1d40:	f380 8811 	msr	BASEPRI, r0
    1d44:	f04f 0003 	mov.w	r0, #3
    1d48:	df02      	svc	2
		return;
    1d4a:	e02f      	b.n	1dac <ull_scan_aux_setup+0x41c>
		if (pdu->len) {
    1d4c:	b10b      	cbz	r3, 1d52 <ull_scan_aux_setup+0x3c2>
			data_len = pdu->len - PDU_AC_EXT_HEADER_SIZE_MIN;
    1d4e:	3b01      	subs	r3, #1
    1d50:	b2db      	uxtb	r3, r3
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync_lll) {
    1d52:	b377      	cbz	r7, 1db2 <ull_scan_aux_setup+0x422>
			sync = HDR_LLL2ULL(sync_lll);
    1d54:	6839      	ldr	r1, [r7, #0]
			ftr->aux_data_len = sync->data_len + data_len;
    1d56:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    1d5a:	4413      	add	r3, r2
    1d5c:	83a3      	strh	r3, [r4, #28]
			sync->data_len = 0U;
    1d5e:	2300      	movs	r3, #0
    1d60:	f8a1 30b8 	strh.w	r3, [r1, #184]	; 0xb8
	if (sync && (scan->periodic.state != LL_SYNC_STATE_CREATED)) {
    1d64:	f1bb 0f00 	cmp.w	fp, #0
    1d68:	d00b      	beq.n	1d82 <ull_scan_aux_setup+0x3f2>
    1d6a:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    1d6e:	f003 0318 	and.w	r3, r3, #24
    1d72:	2b10      	cmp	r3, #16
    1d74:	d005      	beq.n	1d82 <ull_scan_aux_setup+0x3f2>
		scan->periodic.state = LL_SYNC_STATE_IDLE;
    1d76:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    1d7a:	f36f 03c4 	bfc	r3, #3, #2
    1d7e:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
	if (aux) {
    1d82:	2d00      	cmp	r5, #0
    1d84:	f000 8249 	beq.w	221a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x21a>
		if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) || aux->rx_last) {
    1d88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	f000 821a 	beq.w	21c4 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1c4>
			if (unlikely(scan->is_stop)) {
    1d90:	f896 2044 	ldrb.w	r2, [r6, #68]	; 0x44
    1d94:	f012 0f01 	tst.w	r2, #1
    1d98:	d108      	bne.n	1dac <ull_scan_aux_setup+0x41c>
			aux->rx_last->rx_ftr.extra = rx;
    1d9a:	60dc      	str	r4, [r3, #12]
			aux->rx_last = rx;
    1d9c:	632c      	str	r4, [r5, #48]	; 0x30
		LL_ASSERT(aux->parent);
    1d9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1da0:	2b00      	cmp	r3, #0
    1da2:	f000 822c 	beq.w	21fe <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1fe>
		flush_safe(aux);
    1da6:	4628      	mov	r0, r5
    1da8:	f008 fd6a 	bl	a880 <flush_safe>
}
    1dac:	b013      	add	sp, #76	; 0x4c
    1dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (aux) {
    1db2:	b12d      	cbz	r5, 1dc0 <ull_scan_aux_setup+0x430>
			aux->data_len += data_len;
    1db4:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    1db6:	4413      	add	r3, r2
    1db8:	b29b      	uxth	r3, r3
    1dba:	86ab      	strh	r3, [r5, #52]	; 0x34
			ftr->aux_data_len = aux->data_len;
    1dbc:	83a3      	strh	r3, [r4, #28]
    1dbe:	e7d1      	b.n	1d64 <ull_scan_aux_setup+0x3d4>
			ftr->aux_data_len = data_len;
    1dc0:	83a3      	strh	r3, [r4, #28]
		goto ull_scan_aux_rx_flush;
    1dc2:	e7cf      	b.n	1d64 <ull_scan_aux_setup+0x3d4>
			ull_sync_setup_addr_check(scan, pdu->tx_addr, ptr,
    1dc4:	f894 1020 	ldrb.w	r1, [r4, #32]
    1dc8:	7e63      	ldrb	r3, [r4, #25]
    1dca:	464a      	mov	r2, r9
    1dcc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    1dd0:	4630      	mov	r0, r6
    1dd2:	f01a f893 	bl	1befc <ull_sync_setup_addr_check>
    1dd6:	e642      	b.n	1a5e <ull_scan_aux_setup+0xce>
	adi = NULL;
    1dd8:	2200      	movs	r2, #0
    1dda:	e655      	b.n	1a88 <ull_scan_aux_setup+0xf8>
	aux_ptr = NULL;
    1ddc:	2100      	movs	r1, #0
    1dde:	9110      	str	r1, [sp, #64]	; 0x40
    1de0:	e65a      	b.n	1a98 <ull_scan_aux_setup+0x108>
			ull_sync_setup(scan, aux, rx, si);
    1de2:	464b      	mov	r3, r9
    1de4:	4622      	mov	r2, r4
    1de6:	4629      	mov	r1, r5
    1de8:	4630      	mov	r0, r6
    1dea:	f000 fa41 	bl	2270 <ull_sync_setup>
		ptr += sizeof(*si);
    1dee:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    1df2:	e004      	b.n	1dfe <ull_scan_aux_setup+0x46e>
    1df4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
    1df8:	e001      	b.n	1dfe <ull_scan_aux_setup+0x46e>
    1dfa:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
	if (h->tx_pwr) {
    1dfe:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    1e02:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e06:	d001      	beq.n	1e0c <ull_scan_aux_setup+0x47c>
		ptr++;
    1e08:	f109 0901 	add.w	r9, r9, #1
	hdr_len = ptr - (uint8_t *)p;
    1e0c:	eba9 0808 	sub.w	r8, r9, r8
    1e10:	fa5f f888 	uxtb.w	r8, r8
	hdr_buf_len = PDU_AC_EXT_HEADER_SIZE_MIN + p->ext_hdr_len;
    1e14:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    1e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    1e1c:	3301      	adds	r3, #1
	if (hdr_len > hdr_buf_len) {
    1e1e:	4598      	cmp	r8, r3
    1e20:	d833      	bhi.n	1e8a <ull_scan_aux_setup+0x4fa>
		acad_len = hdr_buf_len - hdr_len;
    1e22:	eba3 0808 	sub.w	r8, r3, r8
    1e26:	fa5f f288 	uxtb.w	r2, r8
		hdr_len += acad_len;
    1e2a:	4698      	mov	r8, r3
	if (hdr_len < pdu->len) {
    1e2c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    1e30:	4543      	cmp	r3, r8
    1e32:	d92c      	bls.n	1e8e <ull_scan_aux_setup+0x4fe>
		data_len = pdu->len - hdr_len;
    1e34:	eba3 0808 	sub.w	r8, r3, r8
    1e38:	fa5f f888 	uxtb.w	r8, r8
	    (rx->type == NODE_RX_TYPE_SYNC_REPORT) &&
    1e3c:	7923      	ldrb	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) &&
    1e3e:	2b0d      	cmp	r3, #13
    1e40:	d028      	beq.n	1e94 <ull_scan_aux_setup+0x504>
	if (!aux_ptr || !aux_ptr->offs || is_scan_req ||
    1e42:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1e44:	b163      	cbz	r3, 1e60 <ull_scan_aux_setup+0x4d0>
    1e46:	4619      	mov	r1, r3
    1e48:	785a      	ldrb	r2, [r3, #1]
    1e4a:	789b      	ldrb	r3, [r3, #2]
    1e4c:	f003 031f 	and.w	r3, r3, #31
    1e50:	ea52 2303 	orrs.w	r3, r2, r3, lsl #8
    1e54:	d004      	beq.n	1e60 <ull_scan_aux_setup+0x4d0>
    1e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e58:	b912      	cbnz	r2, 1e60 <ull_scan_aux_setup+0x4d0>
	    (aux_ptr->phy > EXT_ADV_AUX_PHY_LE_CODED)) {
    1e5a:	788b      	ldrb	r3, [r1, #2]
	if (!aux_ptr || !aux_ptr->offs || is_scan_req ||
    1e5c:	2b5f      	cmp	r3, #95	; 0x5f
    1e5e:	d945      	bls.n	1eec <ull_scan_aux_setup+0x55c>
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync_lll) {
    1e60:	b1ff      	cbz	r7, 1ea2 <ull_scan_aux_setup+0x512>
			sync = HDR_LLL2ULL(sync_lll);
    1e62:	683a      	ldr	r2, [r7, #0]
			ftr->aux_data_len = sync->data_len + data_len;
    1e64:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
    1e68:	4498      	add	r8, r3
    1e6a:	f8a4 801c 	strh.w	r8, [r4, #28]
			sync->data_len = 0U;
    1e6e:	2300      	movs	r3, #0
    1e70:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
		if (is_scan_req) {
    1e74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e76:	2b00      	cmp	r3, #0
    1e78:	f43f af74 	beq.w	1d64 <ull_scan_aux_setup+0x3d4>
			LL_ASSERT(aux && aux->rx_last);
    1e7c:	b1f5      	cbz	r5, 1ebc <ull_scan_aux_setup+0x52c>
    1e7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1e80:	b1e3      	cbz	r3, 1ebc <ull_scan_aux_setup+0x52c>
			aux->rx_last->rx_ftr.extra = rx;
    1e82:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1e84:	60dc      	str	r4, [r3, #12]
			aux->rx_last = rx;
    1e86:	632c      	str	r4, [r5, #48]	; 0x30
			return;
    1e88:	e790      	b.n	1dac <ull_scan_aux_setup+0x41c>
		acad_len = 0U;
    1e8a:	2200      	movs	r2, #0
    1e8c:	e7ce      	b.n	1e2c <ull_scan_aux_setup+0x49c>
		data_len = 0U;
    1e8e:	f04f 0800 	mov.w	r8, #0
    1e92:	e7d3      	b.n	1e3c <ull_scan_aux_setup+0x4ac>
	    (rx->type == NODE_RX_TYPE_SYNC_REPORT) &&
    1e94:	2a00      	cmp	r2, #0
    1e96:	d0d4      	beq.n	1e42 <ull_scan_aux_setup+0x4b2>
		ull_sync_chm_update(rx->handle, ptr, acad_len);
    1e98:	4649      	mov	r1, r9
    1e9a:	79a0      	ldrb	r0, [r4, #6]
    1e9c:	f009 fa92 	bl	b3c4 <ull_sync_chm_update>
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_ISO) && sync_iso) {
    1ea0:	e7cf      	b.n	1e42 <ull_scan_aux_setup+0x4b2>
		} else if (aux) {
    1ea2:	b145      	cbz	r5, 1eb6 <ull_scan_aux_setup+0x526>
			aux->data_len += data_len;
    1ea4:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1ea6:	4498      	add	r8, r3
    1ea8:	fa1f f888 	uxth.w	r8, r8
    1eac:	f8a5 8034 	strh.w	r8, [r5, #52]	; 0x34
			ftr->aux_data_len = aux->data_len;
    1eb0:	f8a4 801c 	strh.w	r8, [r4, #28]
    1eb4:	e7de      	b.n	1e74 <ull_scan_aux_setup+0x4e4>
			ftr->aux_data_len = data_len;
    1eb6:	f8a4 801c 	strh.w	r8, [r4, #28]
    1eba:	e7db      	b.n	1e74 <ull_scan_aux_setup+0x4e4>
			LL_ASSERT(aux && aux->rx_last);
    1ebc:	f240 13db 	movw	r3, #475	; 0x1db
    1ec0:	4a05      	ldr	r2, [pc, #20]	; (1ed8 <ull_scan_aux_setup+0x548>)
    1ec2:	4909      	ldr	r1, [pc, #36]	; (1ee8 <ull_scan_aux_setup+0x558>)
    1ec4:	4806      	ldr	r0, [pc, #24]	; (1ee0 <ull_scan_aux_setup+0x550>)
    1ec6:	f017 fc82 	bl	197ce <assert_print>
    1eca:	4040      	eors	r0, r0
    1ecc:	f380 8811 	msr	BASEPRI, r0
    1ed0:	f04f 0003 	mov.w	r0, #3
    1ed4:	df02      	svc	2
    1ed6:	e7d4      	b.n	1e82 <ull_scan_aux_setup+0x4f2>
    1ed8:	0001ee2c 	.word	0x0001ee2c
    1edc:	0001ead8 	.word	0x0001ead8
    1ee0:	0001e920 	.word	0x0001e920
    1ee4:	0001ef0c 	.word	0x0001ef0c
    1ee8:	0001ef20 	.word	0x0001ef20
	if (!aux) {
    1eec:	2d00      	cmp	r5, #0
    1eee:	f000 80ca 	beq.w	2086 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x86>
		aux->data_len += data_len;
    1ef2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    1ef4:	4443      	add	r3, r8
    1ef6:	86ab      	strh	r3, [r5, #52]	; 0x34
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync_lll) {
    1ef8:	2f00      	cmp	r7, #0
    1efa:	f000 80fa 	beq.w	20f2 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xf2>
		sync = HDR_LLL2ULL(sync_lll);
    1efe:	683a      	ldr	r2, [r7, #0]
		sync->data_len += data_len;
    1f00:	f8b2 30b8 	ldrh.w	r3, [r2, #184]	; 0xb8
    1f04:	4443      	add	r3, r8
    1f06:	b29b      	uxth	r3, r3
    1f08:	f8a2 30b8 	strh.w	r3, [r2, #184]	; 0xb8
		ftr->aux_data_len = sync->data_len;
    1f0c:	83a3      	strh	r3, [r4, #28]
	lll_aux->chan = aux_ptr->chan_idx;
    1f0e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f10:	7802      	ldrb	r2, [r0, #0]
    1f12:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1f14:	790b      	ldrb	r3, [r1, #4]
    1f16:	f362 0305 	bfi	r3, r2, #0, #6
    1f1a:	710b      	strb	r3, [r1, #4]
	lll_aux->phy = BIT(aux_ptr->phy);
    1f1c:	7883      	ldrb	r3, [r0, #2]
    1f1e:	095a      	lsrs	r2, r3, #5
    1f20:	2301      	movs	r3, #1
    1f22:	4093      	lsls	r3, r2
    1f24:	794a      	ldrb	r2, [r1, #5]
    1f26:	f363 0202 	bfi	r2, r3, #0, #3
    1f2a:	714a      	strb	r2, [r1, #5]
	if (ftr->aux_lll_sched) {
    1f2c:	7ee3      	ldrb	r3, [r4, #27]
    1f2e:	f013 0f08 	tst.w	r3, #8
    1f32:	f040 80e7 	bne.w	2104 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x104>
	if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) || lll) {
    1f36:	f1ba 0f00 	cmp.w	sl, #0
    1f3a:	f000 80f9 	beq.w	2130 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x130>
		if (unlikely(scan->is_stop)) {
    1f3e:	f896 3044 	ldrb.w	r3, [r6, #68]	; 0x44
    1f42:	f013 0f01 	tst.w	r3, #1
    1f46:	f47f af0d 	bne.w	1d64 <ull_scan_aux_setup+0x3d4>
		lll->lll_aux = NULL;
    1f4a:	2300      	movs	r3, #0
    1f4c:	f8ca 3008 	str.w	r3, [sl, #8]
	if (aux_ptr->offs_units) {
    1f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1f52:	f993 3000 	ldrsb.w	r3, [r3]
    1f56:	2b00      	cmp	r3, #0
    1f58:	f2c0 8109 	blt.w	216e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x16e>
		lll_aux->window_size_us = OFFS_UNIT_30_US;
    1f5c:	231e      	movs	r3, #30
    1f5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1f60:	6093      	str	r3, [r2, #8]
	aux_offset_us = (uint32_t)aux_ptr->offs * lll_aux->window_size_us;
    1f62:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1f64:	7857      	ldrb	r7, [r2, #1]
    1f66:	7893      	ldrb	r3, [r2, #2]
    1f68:	f003 031f 	and.w	r3, r3, #31
    1f6c:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
    1f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1f72:	689b      	ldr	r3, [r3, #8]
    1f74:	fb03 f707 	mul.w	r7, r3, r7
	if (aux_ptr->ca) {
    1f78:	7812      	ldrb	r2, [r2, #0]
    1f7a:	f012 0f40 	tst.w	r2, #64	; 0x40
    1f7e:	f000 80fb 	beq.w	2178 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x178>
		window_widening_us = SCA_DRIFT_50_PPM_US(aux_offset_us);
    1f82:	2632      	movs	r6, #50	; 0x32
    1f84:	fb07 f606 	mul.w	r6, r7, r6
    1f88:	4aad      	ldr	r2, [pc, #692]	; (2240 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x240>)
    1f8a:	fba2 2606 	umull	r2, r6, r2, r6
    1f8e:	0cb6      	lsrs	r6, r6, #18
				    ((EVENT_JITTER_US + window_widening_us) << 1));
    1f90:	f106 0210 	add.w	r2, r6, #16
	lll_aux->window_size_us += (EVENT_TICKER_RES_MARGIN_US +
    1f94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1f98:	3320      	adds	r3, #32
    1f9a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
    1f9e:	f8c8 3008 	str.w	r3, [r8, #8]
	ready_delay_us = lll_radio_rx_ready_delay_get(lll_aux->phy,
    1fa2:	f898 0005 	ldrb.w	r0, [r8, #5]
    1fa6:	2101      	movs	r1, #1
    1fa8:	f000 0007 	and.w	r0, r0, #7
    1fac:	f01a fa28 	bl	1c400 <lll_radio_rx_ready_delay_get>
	aux_offset_us += ftr->radio_end_us;
    1fb0:	6963      	ldr	r3, [r4, #20]
    1fb2:	441f      	add	r7, r3
	aux_offset_us -= PDU_AC_US(pdu->len, phy, ftr->phy_flags);
    1fb4:	990e      	ldr	r1, [sp, #56]	; 0x38
    1fb6:	f001 0303 	and.w	r3, r1, #3
    1fba:	3306      	adds	r3, #6
    1fbc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    1fc0:	4413      	add	r3, r2
    1fc2:	3303      	adds	r3, #3
    1fc4:	00da      	lsls	r2, r3, #3
    1fc6:	f3c1 0340 	ubfx	r3, r1, #1, #1
    1fca:	fa22 f303 	lsr.w	r3, r2, r3
    1fce:	1afb      	subs	r3, r7, r3
	aux_offset_us -= EVENT_JITTER_US;
    1fd0:	3b30      	subs	r3, #48	; 0x30
	aux_offset_us -= ready_delay_us;
    1fd2:	1a1b      	subs	r3, r3, r0
	aux_offset_us -= window_widening_us;
    1fd4:	1b9e      	subs	r6, r3, r6
	aux->ull.ticks_active_to_start = 0;
    1fd6:	2300      	movs	r3, #0
    1fd8:	606b      	str	r3, [r5, #4]
	aux->ull.ticks_prepare_to_start =
    1fda:	2231      	movs	r2, #49	; 0x31
    1fdc:	60aa      	str	r2, [r5, #8]
	aux->ull.ticks_preempt_to_start =
    1fde:	60eb      	str	r3, [r5, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1fe0:	f898 2005 	ldrb.w	r2, [r8, #5]
    1fe4:	f002 0303 	and.w	r3, r2, #3
    1fe8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    1fec:	00db      	lsls	r3, r3, #3
    1fee:	f3c2 0240 	ubfx	r2, r2, #1, #1
    1ff2:	40d3      	lsrs	r3, r2
    1ff4:	4418      	add	r0, r3
    1ff6:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    1ffa:	4f92      	ldr	r7, [pc, #584]	; (2244 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x244>)
    1ffc:	a38e      	add	r3, pc, #568	; (adr r3, 2238 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x238>)
    1ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
    2002:	fba0 0107 	umull	r0, r1, r0, r7
    2006:	f7ff f8d7 	bl	11b8 <__aeabi_uldivmod>
    200a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	aux->ull.ticks_slot =
    200e:	6128      	str	r0, [r5, #16]
	ticks_aux_offset = HAL_TICKER_US_TO_TICKS(aux_offset_us);
    2010:	a389      	add	r3, pc, #548	; (adr r3, 2238 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x238>)
    2012:	e9d3 2300 	ldrd	r2, r3, [r3]
    2016:	fba6 0107 	umull	r0, r1, r6, r7
    201a:	f7ff f8cd 	bl	11b8 <__aeabi_uldivmod>
    201e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (ticker_yield_handle != TICKER_NULL) {
    2022:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2024:	2aff      	cmp	r2, #255	; 0xff
    2026:	f040 80b0 	bne.w	218a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x18a>
	return mem_index_get(aux, ll_scan_aux_pool,
    202a:	223c      	movs	r2, #60	; 0x3c
    202c:	4986      	ldr	r1, [pc, #536]	; (2248 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x248>)
    202e:	4628      	mov	r0, r5
    2030:	f018 f896 	bl	1a160 <mem_index_get>
    2034:	b2c2      	uxtb	r2, r0
				     ftr->ticks_anchor - ticks_slot_offset,
    2036:	6923      	ldr	r3, [r4, #16]
				     (aux->ull.ticks_slot +
    2038:	6929      	ldr	r1, [r5, #16]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    203a:	3203      	adds	r2, #3
    203c:	9508      	str	r5, [sp, #32]
    203e:	4883      	ldr	r0, [pc, #524]	; (224c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x24c>)
    2040:	9007      	str	r0, [sp, #28]
    2042:	9506      	str	r5, [sp, #24]
    2044:	4882      	ldr	r0, [pc, #520]	; (2250 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x250>)
    2046:	9005      	str	r0, [sp, #20]
    2048:	9104      	str	r1, [sp, #16]
    204a:	2000      	movs	r0, #0
    204c:	9003      	str	r0, [sp, #12]
    204e:	9002      	str	r0, [sp, #8]
    2050:	9001      	str	r0, [sp, #4]
    2052:	9600      	str	r6, [sp, #0]
    2054:	3b3a      	subs	r3, #58	; 0x3a
    2056:	b2d2      	uxtb	r2, r2
    2058:	2101      	movs	r1, #1
    205a:	f018 fac5 	bl	1a5e8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    205e:	2800      	cmp	r0, #0
    2060:	f43f aea4 	beq.w	1dac <ull_scan_aux_setup+0x41c>
    2064:	2802      	cmp	r0, #2
    2066:	f43f aea1 	beq.w	1dac <ull_scan_aux_setup+0x41c>
    206a:	f240 23bb 	movw	r3, #699	; 0x2bb
    206e:	4a79      	ldr	r2, [pc, #484]	; (2254 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x254>)
    2070:	4979      	ldr	r1, [pc, #484]	; (2258 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x258>)
    2072:	487a      	ldr	r0, [pc, #488]	; (225c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x25c>)
    2074:	f017 fbab 	bl	197ce <assert_print>
    2078:	4040      	eors	r0, r0
    207a:	f380 8811 	msr	BASEPRI, r0
    207e:	f04f 0003 	mov.w	r0, #3
    2082:	df02      	svc	2
    2084:	e692      	b.n	1dac <ull_scan_aux_setup+0x41c>
	return mem_acquire(&scan_aux_free);
    2086:	4876      	ldr	r0, [pc, #472]	; (2260 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x260>)
    2088:	f018 f844 	bl	1a114 <mem_acquire>
		if (!aux) {
    208c:	4603      	mov	r3, r0
    208e:	b1d8      	cbz	r0, 20c8 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xc8>
		aux->rx_head = aux->rx_last = NULL;
    2090:	2200      	movs	r2, #0
    2092:	6302      	str	r2, [r0, #48]	; 0x30
    2094:	62c2      	str	r2, [r0, #44]	; 0x2c
		aux->data_len = data_len;
    2096:	f8a0 8034 	strh.w	r8, [r0, #52]	; 0x34
		lll_aux = &aux->lll;
    209a:	f100 011c 	add.w	r1, r0, #28
    209e:	910b      	str	r1, [sp, #44]	; 0x2c
		lll_aux->is_chain_sched = 0U;
    20a0:	f890 1020 	ldrb.w	r1, [r0, #32]
    20a4:	f362 11c7 	bfi	r1, r2, #7, #1
    20a8:	f880 1020 	strb.w	r1, [r0, #32]
	hdr->ref = 0U;
    20ac:	7002      	strb	r2, [r0, #0]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    20ae:	6182      	str	r2, [r0, #24]
    20b0:	6142      	str	r2, [r0, #20]
    20b2:	61d8      	str	r0, [r3, #28]
		aux->parent = lll ? (void *)lll : (void *)sync_lll;
    20b4:	f1ba 0f00 	cmp.w	sl, #0
    20b8:	d019      	beq.n	20ee <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xee>
    20ba:	4652      	mov	r2, sl
    20bc:	629a      	str	r2, [r3, #40]	; 0x28
		aux->rx_incomplete = rx_incomplete;
    20be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    20c0:	639a      	str	r2, [r3, #56]	; 0x38
		rx_incomplete = NULL;
    20c2:	950d      	str	r5, [sp, #52]	; 0x34
		aux = aux_acquire();
    20c4:	461d      	mov	r5, r3
    20c6:	e717      	b.n	1ef8 <ull_scan_aux_setup+0x568>
			if (ftr->aux_lll_sched) {
    20c8:	7ee2      	ldrb	r2, [r4, #27]
    20ca:	f012 0f08 	tst.w	r2, #8
    20ce:	d002      	beq.n	20d6 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xd6>
				ftr->aux_sched = 1U;
    20d0:	f042 0204 	orr.w	r2, r2, #4
    20d4:	76e2      	strb	r2, [r4, #27]
			if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) &&
    20d6:	b147      	cbz	r7, 20ea <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xea>
				sync = HDR_LLL2ULL(sync_lll);
    20d8:	6839      	ldr	r1, [r7, #0]
				ftr->aux_data_len = sync->data_len + data_len;
    20da:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
    20de:	4490      	add	r8, r2
    20e0:	f8a4 801c 	strh.w	r8, [r4, #28]
				sync->data_len = 0U;
    20e4:	2200      	movs	r2, #0
    20e6:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
		aux = aux_acquire();
    20ea:	461d      	mov	r5, r3
			goto ull_scan_aux_rx_flush;
    20ec:	e63a      	b.n	1d64 <ull_scan_aux_setup+0x3d4>
		aux->parent = lll ? (void *)lll : (void *)sync_lll;
    20ee:	463a      	mov	r2, r7
    20f0:	e7e4      	b.n	20bc <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xbc>
		if (aux->rx_last) {
    20f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    20f4:	b123      	cbz	r3, 2100 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x100>
			aux->rx_last->rx_ftr.extra = rx;
    20f6:	60dc      	str	r4, [r3, #12]
		aux->rx_last = rx;
    20f8:	632c      	str	r4, [r5, #48]	; 0x30
		ftr->aux_data_len = aux->data_len;
    20fa:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    20fc:	83a3      	strh	r3, [r4, #28]
    20fe:	e706      	b.n	1f0e <ull_scan_aux_setup+0x57e>
			aux->rx_head = rx;
    2100:	62ec      	str	r4, [r5, #44]	; 0x2c
    2102:	e7f9      	b.n	20f8 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0xf8>
		ftr->aux_sched = 1U;
    2104:	f043 0304 	orr.w	r3, r3, #4
    2108:	76e3      	strb	r3, [r4, #27]
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync_lll) {
    210a:	b16f      	cbz	r7, 2128 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x128>
			sync_lll->lll_aux = lll_aux;
    210c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    210e:	63fb      	str	r3, [r7, #60]	; 0x3c
			ll_rx_put(link, rx);
    2110:	4621      	mov	r1, r4
    2112:	980a      	ldr	r0, [sp, #40]	; 0x28
    2114:	f007 fa68 	bl	95e8 <ll_rx_put>
			ll_rx_sched();
    2118:	f007 fa6e 	bl	95f8 <ll_rx_sched>
		lll_aux->state = 0U;
    211c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    211e:	7913      	ldrb	r3, [r2, #4]
    2120:	f36f 1386 	bfc	r3, #6, #1
    2124:	7113      	strb	r3, [r2, #4]
		return;
    2126:	e641      	b.n	1dac <ull_scan_aux_setup+0x41c>
			lll->lll_aux = lll_aux;
    2128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    212a:	f8ca 3008 	str.w	r3, [sl, #8]
    212e:	e7f5      	b.n	211c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x11c>
		LL_ASSERT(sync_lll &&
    2130:	b12f      	cbz	r7, 213e <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x13e>
    2132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2134:	b183      	cbz	r3, 2158 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x158>
    2136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    213a:	4293      	cmp	r3, r2
    213c:	d00c      	beq.n	2158 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x158>
    213e:	f240 2355 	movw	r3, #597	; 0x255
    2142:	4a44      	ldr	r2, [pc, #272]	; (2254 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x254>)
    2144:	4947      	ldr	r1, [pc, #284]	; (2264 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x264>)
    2146:	4845      	ldr	r0, [pc, #276]	; (225c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x25c>)
    2148:	f017 fb41 	bl	197ce <assert_print>
    214c:	4040      	eors	r0, r0
    214e:	f380 8811 	msr	BASEPRI, r0
    2152:	f04f 0003 	mov.w	r0, #3
    2156:	df02      	svc	2
		sync = HDR_LLL2ULL(sync_lll);
    2158:	683b      	ldr	r3, [r7, #0]
		if (unlikely(sync->is_stop)) {
    215a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    215e:	f013 0f08 	tst.w	r3, #8
    2162:	f47f adff 	bne.w	1d64 <ull_scan_aux_setup+0x3d4>
		sync_lll->lll_aux = lll_aux;
    2166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2168:	63fb      	str	r3, [r7, #60]	; 0x3c
		aux->rx_head = rx;
    216a:	62ec      	str	r4, [r5, #44]	; 0x2c
    216c:	e6f0      	b.n	1f50 <ull_scan_aux_setup+0x5c0>
		lll_aux->window_size_us = OFFS_UNIT_300_US;
    216e:	f44f 7396 	mov.w	r3, #300	; 0x12c
    2172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2174:	6093      	str	r3, [r2, #8]
    2176:	e6f4      	b.n	1f62 <ull_scan_aux_setup+0x5d2>
		window_widening_us = SCA_DRIFT_500_PPM_US(aux_offset_us);
    2178:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
    217c:	fb07 f606 	mul.w	r6, r7, r6
    2180:	4a2f      	ldr	r2, [pc, #188]	; (2240 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x240>)
    2182:	fba2 2606 	umull	r2, r6, r2, r6
    2186:	0cb6      	lsrs	r6, r6, #18
    2188:	e702      	b.n	1f90 <ull_scan_aux_setup+0x600>
						 (ftr->ticks_anchor +
    218a:	6923      	ldr	r3, [r4, #16]
    218c:	4433      	add	r3, r6
		ticker_status = ticker_yield_abs(TICKER_INSTANCE_ID_CTLR,
    218e:	2000      	movs	r0, #0
    2190:	9001      	str	r0, [sp, #4]
    2192:	9000      	str	r0, [sp, #0]
    2194:	3b3a      	subs	r3, #58	; 0x3a
    2196:	2101      	movs	r1, #1
    2198:	f005 f912 	bl	73c0 <ticker_yield_abs>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    219c:	2800      	cmp	r0, #0
    219e:	f43f af44 	beq.w	202a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x2a>
    21a2:	2802      	cmp	r0, #2
    21a4:	f43f af41 	beq.w	202a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x2a>
    21a8:	f240 23ab 	movw	r3, #683	; 0x2ab
    21ac:	4a29      	ldr	r2, [pc, #164]	; (2254 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x254>)
    21ae:	492a      	ldr	r1, [pc, #168]	; (2258 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x258>)
    21b0:	482a      	ldr	r0, [pc, #168]	; (225c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x25c>)
    21b2:	f017 fb0c 	bl	197ce <assert_print>
    21b6:	4040      	eors	r0, r0
    21b8:	f380 8811 	msr	BASEPRI, r0
    21bc:	f04f 0003 	mov.w	r0, #3
    21c0:	df02      	svc	2
    21c2:	e732      	b.n	202a <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x2a>
			LL_ASSERT(sync_lll);
    21c4:	b16f      	cbz	r7, 21e2 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1e2>
			ll_rx_put(link, rx);
    21c6:	4621      	mov	r1, r4
    21c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    21ca:	f007 fa0d 	bl	95e8 <ll_rx_put>
			ll_rx_sched();
    21ce:	f007 fa13 	bl	95f8 <ll_rx_sched>
			sync = HDR_LLL2ULL(sync_lll);
    21d2:	683b      	ldr	r3, [r7, #0]
			if (unlikely(sync->is_stop)) {
    21d4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    21d8:	f013 0f08 	tst.w	r3, #8
    21dc:	f43f addf 	beq.w	1d9e <ull_scan_aux_setup+0x40e>
    21e0:	e5e4      	b.n	1dac <ull_scan_aux_setup+0x41c>
			LL_ASSERT(sync_lll);
    21e2:	f240 23db 	movw	r3, #731	; 0x2db
    21e6:	4a1b      	ldr	r2, [pc, #108]	; (2254 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x254>)
    21e8:	491f      	ldr	r1, [pc, #124]	; (2268 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x268>)
    21ea:	481c      	ldr	r0, [pc, #112]	; (225c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x25c>)
    21ec:	f017 faef 	bl	197ce <assert_print>
    21f0:	4040      	eors	r0, r0
    21f2:	f380 8811 	msr	BASEPRI, r0
    21f6:	f04f 0003 	mov.w	r0, #3
    21fa:	df02      	svc	2
    21fc:	e7e3      	b.n	21c6 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x1c6>
		LL_ASSERT(aux->parent);
    21fe:	f240 23e6 	movw	r3, #742	; 0x2e6
    2202:	4a14      	ldr	r2, [pc, #80]	; (2254 <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x254>)
    2204:	4919      	ldr	r1, [pc, #100]	; (226c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x26c>)
    2206:	4815      	ldr	r0, [pc, #84]	; (225c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x25c>)
    2208:	f017 fae1 	bl	197ce <assert_print>
    220c:	4040      	eors	r0, r0
    220e:	f380 8811 	msr	BASEPRI, r0
    2212:	f04f 0003 	mov.w	r0, #3
    2216:	df02      	svc	2
    2218:	e5c5      	b.n	1da6 <ull_scan_aux_setup+0x416>
	ll_rx_put(link, rx);
    221a:	4621      	mov	r1, r4
    221c:	980a      	ldr	r0, [sp, #40]	; 0x28
    221e:	f007 f9e3 	bl	95e8 <ll_rx_put>
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && rx_incomplete) {
    2222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2224:	b113      	cbz	r3, 222c <CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE+0x22c>
		rx_release_put(rx_incomplete);
    2226:	4618      	mov	r0, r3
    2228:	f019 fe19 	bl	1be5e <rx_release_put>
	ll_rx_sched();
    222c:	f007 f9e4 	bl	95f8 <ll_rx_sched>
    2230:	e5bc      	b.n	1dac <ull_scan_aux_setup+0x41c>
    2232:	bf00      	nop
    2234:	f3af 8000 	nop.w
    2238:	1afd498d 	.word	0x1afd498d
    223c:	00000007 	.word	0x00000007
    2240:	431bde83 	.word	0x431bde83
    2244:	3b9aca00 	.word	0x3b9aca00
    2248:	2000587c 	.word	0x2000587c
    224c:	0000a591 	.word	0x0000a591
    2250:	0000a64d 	.word	0x0000a64d
    2254:	0001ee2c 	.word	0x0001ee2c
    2258:	0001ef78 	.word	0x0001ef78
    225c:	0001e920 	.word	0x0001e920
    2260:	200058c8 	.word	0x200058c8
    2264:	0001ef34 	.word	0x0001ef34
    2268:	0001ee70 	.word	0x0001ee70
    226c:	0001ef00 	.word	0x0001ef00

00002270 <ull_sync_setup>:
		  (sid == scan->periodic.sid)));
}

void ull_sync_setup(struct ll_scan_set *scan, struct ll_scan_aux_set *aux,
		    struct node_rx_hdr *node_rx, struct pdu_adv_sync_info *si)
{
    2270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2274:	b08d      	sub	sp, #52	; 0x34
    2276:	4606      	mov	r6, r0
    2278:	460f      	mov	r7, r1
    227a:	4693      	mov	fp, r2
    227c:	4698      	mov	r8, r3
	uint8_t chm_last;
	uint32_t ret;
	uint8_t sca;

	/* Populate the LLL context */
	sync = scan->periodic.sync;
    227e:	6d04      	ldr	r4, [r0, #80]	; 0x50
	lll = &sync->lll;

	/* Copy channel map from sca_chm field in sync_info structure, and
	 * clear the SCA bits.
	 */
	chm_last = lll->chm_first;
    2280:	f894 903e 	ldrb.w	r9, [r4, #62]	; 0x3e
	lll->chm_last = chm_last;
    2284:	f884 903f 	strb.w	r9, [r4, #63]	; 0x3f
	data_chan_map = lll->chm[chm_last].data_chan_map;
    2288:	f104 021c 	add.w	r2, r4, #28
    228c:	ea4f 0549 	mov.w	r5, r9, lsl #1
    2290:	eb09 0349 	add.w	r3, r9, r9, lsl #1
    2294:	005b      	lsls	r3, r3, #1
    2296:	3310      	adds	r3, #16
    2298:	4413      	add	r3, r2
    229a:	1d98      	adds	r0, r3, #6
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    229c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    22a0:	f8c3 2006 	str.w	r2, [r3, #6]
    22a4:	f898 3008 	ldrb.w	r3, [r8, #8]
    22a8:	7103      	strb	r3, [r0, #4]
	(void)memcpy(data_chan_map, si->sca_chm,
		     sizeof(lll->chm[chm_last].data_chan_map));
	data_chan_map[PDU_SYNC_INFO_SCA_CHM_SCA_BYTE_OFFSET] &=
    22aa:	b2db      	uxtb	r3, r3
    22ac:	f003 031f 	and.w	r3, r3, #31
    22b0:	7103      	strb	r3, [r0, #4]
		~PDU_SYNC_INFO_SCA_CHM_SCA_BIT_MASK;
	lll->chm[chm_last].data_chan_count =
		util_ones_count_get(data_chan_map,
    22b2:	2105      	movs	r1, #5
    22b4:	f017 ff90 	bl	1a1d8 <util_ones_count_get>
    22b8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	lll->chm[chm_last].data_chan_count =
    22bc:	eb05 0309 	add.w	r3, r5, r9
    22c0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    22c4:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
    22c8:	f360 0205 	bfi	r2, r0, #0, #6
    22cc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				    sizeof(lll->chm[chm_last].data_chan_map));
	if (lll->chm[chm_last].data_chan_count < CHM_USED_COUNT_MIN) {
    22d0:	2801      	cmp	r0, #1
    22d2:	f240 8113 	bls.w	24fc <ull_sync_setup+0x28c>
#if defined(CONFIG_BT_CTLR_CHECK_SAME_PEER_SYNC) || \
	defined(CONFIG_BT_CTLR_SYNC_PERIODIC_ADI_SUPPORT)
	/* Remember the peer address.
	 * NOTE: Peer identity address is copied here when privacy is enable.
	 */
	sync->peer_id_addr_type = scan->periodic.adv_addr_type;
    22d6:	f896 2049 	ldrb.w	r2, [r6, #73]	; 0x49
    22da:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    22de:	f362 0300 	bfi	r3, r2, #0, #1
    22e2:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    22e6:	f8d6 304a 	ldr.w	r3, [r6, #74]	; 0x4a
    22ea:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    22ee:	f8b6 304e 	ldrh.w	r3, [r6, #78]	; 0x4e
    22f2:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    22f6:	f8d8 3009 	ldr.w	r3, [r8, #9]
    22fa:	6223      	str	r3, [r4, #32]
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_SYNC ||
	* CONFIG_BT_CTLR_SYNC_PERIODIC_ADI_SUPPORT
	*/

	memcpy(lll->access_addr, &si->aa, sizeof(lll->access_addr));
	lll->data_chan_id = lll_chan_id(lll->access_addr);
    22fc:	f104 0020 	add.w	r0, r4, #32
    2300:	f019 ff7b 	bl	1c1fa <lll_chan_id>
    2304:	8620      	strh	r0, [r4, #48]	; 0x30
    2306:	f8b8 200d 	ldrh.w	r2, [r8, #13]
    230a:	f898 300f 	ldrb.w	r3, [r8, #15]
    230e:	84a2      	strh	r2, [r4, #36]	; 0x24
    2310:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	memcpy(lll->crc_init, si->crc_init, sizeof(lll->crc_init));
	lll->event_counter = si->evt_cntr;
    2314:	f8b8 3010 	ldrh.w	r3, [r8, #16]
    2318:	85e3      	strh	r3, [r4, #46]	; 0x2e
	lll->phy = aux->lll.phy;
    231a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
    231e:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    2322:	f362 0302 	bfi	r3, r2, #0, #3
    2326:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27

	interval = sys_le16_to_cpu(si->interval);
    232a:	f8b8 a002 	ldrh.w	sl, [r8, #2]
    232e:	fa1f f58a 	uxth.w	r5, sl
	interval_us = interval * PERIODIC_INT_UNIT_US;
    2332:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2336:	fb00 f505 	mul.w	r5, r0, r5

	/* Convert fromm 10ms units to interval units */
	sync->timeout_reload = RADIO_SYNC_EVENTS((sync->timeout * 10U *
    233a:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    233e:	f242 7210 	movw	r2, #10000	; 0x2710
    2342:	fb02 5303 	mla	r3, r2, r3, r5
    2346:	3b01      	subs	r3, #1
    2348:	fbb3 f3f5 	udiv	r3, r3, r5
    234c:	b29b      	uxth	r3, r3
    234e:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
						  USEC_PER_MSEC), interval_us);

	sync->sync_expire = CONN_ESTAB_COUNTDOWN;
    2352:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    2356:	2206      	movs	r2, #6
    2358:	f362 1306 	bfi	r3, r2, #4, #3
    235c:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e

	/* Extract the SCA value from the sca_chm field of the sync_info
	 * structure.
	 */
	sca = (si->sca_chm[PDU_SYNC_INFO_SCA_CHM_SCA_BYTE_OFFSET] &
    2360:	f898 9008 	ldrb.w	r9, [r8, #8]
    2364:	ea4f 1959 	mov.w	r9, r9, lsr #5
#if defined(CONFIG_BT_CTLR_SYNC_ISO)
	lll->sca = sca;
#endif /* CONFIG_BT_CTLR_SYNC_ISO */

	lll->window_widening_periodic_us =
		ceiling_fraction(((lll_clock_ppm_local_get() +
    2368:	f01a f868 	bl	1c43c <lll_clock_ppm_local_get>
    236c:	4607      	mov	r7, r0
    236e:	4648      	mov	r0, r9
    2370:	f00a ffc6 	bl	d300 <lll_clock_ppm_get>
    2374:	4438      	add	r0, r7
    2376:	fb05 f000 	mul.w	r0, r5, r0
    237a:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    237e:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2382:	4b6d      	ldr	r3, [pc, #436]	; (2538 <ull_sync_setup+0x2c8>)
    2384:	fba3 3000 	umull	r3, r0, r3, r0
    2388:	0c80      	lsrs	r0, r0, #18
	lll->window_widening_periodic_us =
    238a:	6460      	str	r0, [r4, #68]	; 0x44
				   lll_clock_ppm_get(sca)) *
				  interval_us), USEC_PER_SEC);
	lll->window_widening_max_us = (interval_us >> 1) - EVENT_IFS_US;
    238c:	086b      	lsrs	r3, r5, #1
    238e:	3b96      	subs	r3, #150	; 0x96
    2390:	64a3      	str	r3, [r4, #72]	; 0x48
	if (si->offs_units) {
    2392:	f898 3001 	ldrb.w	r3, [r8, #1]
    2396:	f013 0f20 	tst.w	r3, #32
    239a:	f000 80b2 	beq.w	2502 <ull_sync_setup+0x292>
		lll->window_size_event_us = OFFS_UNIT_300_US;
    239e:	f44f 7396 	mov.w	r3, #300	; 0x12c
    23a2:	6563      	str	r3, [r4, #84]	; 0x54
	} else {
		lll->window_size_event_us = OFFS_UNIT_30_US;
	}

	/* Set the state to sync create */
	scan->periodic.state = LL_SYNC_STATE_CREATED;
    23a4:	f896 3049 	ldrb.w	r3, [r6, #73]	; 0x49
    23a8:	2202      	movs	r2, #2
    23aa:	f362 03c4 	bfi	r3, r2, #3, #2
    23ae:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
		} else {
			scan_1m->periodic.state = LL_SYNC_STATE_CREATED;
		}
	}

	sync_handle = ull_sync_handle_get(sync);
    23b2:	4620      	mov	r0, r4
    23b4:	f008 fe60 	bl	b078 <ull_sync_handle_get>
    23b8:	4607      	mov	r7, r0

	/* Prepare sync notification, dispatch only on successful AUX_SYNC_IND
	 * reception.
	 */
	rx = (void *)sync->node_rx_sync_estab;
    23ba:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	rx->hdr.type = NODE_RX_TYPE_SYNC;
    23be:	220c      	movs	r2, #12
    23c0:	711a      	strb	r2, [r3, #4]
	rx->hdr.handle = sync_handle;
    23c2:	80d8      	strh	r0, [r3, #6]
	rx->hdr.rx_ftr.param = scan;
    23c4:	609e      	str	r6, [r3, #8]
	se = (void *)rx->pdu;
	se->interval = interval;
    23c6:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
	se->phy = lll->phy;
    23ca:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
    23ce:	f3c2 0202 	ubfx	r2, r2, #0, #3
    23d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	se->sca = sca;
    23d6:	f883 9024 	strb.w	r9, [r3, #36]	; 0x24

	/* Calculate offset and schedule sync radio events */
	ftr = &node_rx->rx_ftr;
	pdu = (void *)((struct node_rx_pdu *)node_rx)->pdu;

	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy, 1);
    23da:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    23de:	2101      	movs	r1, #1
    23e0:	f000 0007 	and.w	r0, r0, #7
    23e4:	f01a f80c 	bl	1c400 <lll_radio_rx_ready_delay_get>

	sync_offset_us = ftr->radio_end_us;
    23e8:	f8db 3014 	ldr.w	r3, [fp, #20]
	sync_offset_us += (uint32_t)sys_le16_to_cpu(si->offs) *
    23ec:	f898 2000 	ldrb.w	r2, [r8]
    23f0:	f898 1001 	ldrb.w	r1, [r8, #1]
    23f4:	f001 081f 	and.w	r8, r1, #31
    23f8:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			  lll->window_size_event_us;
    23fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sync_offset_us += (uint32_t)sys_le16_to_cpu(si->offs) *
    23fe:	fb02 3308 	mla	r3, r2, r8, r3
	/* offs_adjust may be 1 only if sync setup by LL_PERIODIC_SYNC_IND */
	sync_offset_us += (si->offs_adjust ? OFFS_ADJUST_US : 0U);
    2402:	f011 0f40 	tst.w	r1, #64	; 0x40
    2406:	d07f      	beq.n	2508 <ull_sync_setup+0x298>
    2408:	f44f 1816 	mov.w	r8, #2457600	; 0x258000
    240c:	4498      	add	r8, r3
	sync_offset_us -= PDU_AC_US(pdu->len, lll->phy, ftr->phy_flags);
    240e:	f894 c027 	ldrb.w	ip, [r4, #39]	; 0x27
    2412:	f00c 0303 	and.w	r3, ip, #3
    2416:	1d9a      	adds	r2, r3, #6
    2418:	f89b 1021 	ldrb.w	r1, [fp, #33]	; 0x21
    241c:	440a      	add	r2, r1
    241e:	3203      	adds	r2, #3
    2420:	00d2      	lsls	r2, r2, #3
    2422:	f3cc 0c40 	ubfx	ip, ip, #1, #1
    2426:	fa22 f20c 	lsr.w	r2, r2, ip
    242a:	eba8 0802 	sub.w	r8, r8, r2
	sync_offset_us -= EVENT_TICKER_RES_MARGIN_US;
	sync_offset_us -= EVENT_JITTER_US;
    242e:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
	sync_offset_us -= ready_delay_us;
    2432:	eba8 0800 	sub.w	r8, r8, r0

	interval_us -= lll->window_widening_periodic_us;
    2436:	6c66      	ldr	r6, [r4, #68]	; 0x44
    2438:	1bad      	subs	r5, r5, r6

	/* TODO: active_to_start feature port */
	sync->ull.ticks_active_to_start = 0U;
    243a:	f04f 0900 	mov.w	r9, #0
    243e:	f8c4 9004 	str.w	r9, [r4, #4]
	sync->ull.ticks_prepare_to_start =
    2442:	2231      	movs	r2, #49	; 0x31
    2444:	60a2      	str	r2, [r4, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_XTAL_US);
	sync->ull.ticks_preempt_to_start =
    2446:	f8c4 900c 	str.w	r9, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_PREEMPT_MIN_US);
	sync->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    244a:	f503 7384 	add.w	r3, r3, #264	; 0x108
    244e:	00db      	lsls	r3, r3, #3
    2450:	fa23 f30c 	lsr.w	r3, r3, ip
    2454:	4418      	add	r0, r3
    2456:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    245a:	4e38      	ldr	r6, [pc, #224]	; (253c <ull_sync_setup+0x2cc>)
    245c:	a334      	add	r3, pc, #208	; (adr r3, 2530 <ull_sync_setup+0x2c0>)
    245e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2462:	fba0 0106 	umull	r0, r1, r0, r6
    2466:	f7fe fea7 	bl	11b8 <__aeabi_uldivmod>
    246a:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	sync->ull.ticks_slot =
    246e:	f8c4 a010 	str.w	sl, [r4, #16]
	} else {
		ticks_slot_overhead = 0U;
	}
	ticks_slot_offset += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	sync->lll_sync_prepare = lll_sync_create_prepare;
    2472:	4b33      	ldr	r3, [pc, #204]	; (2540 <ull_sync_setup+0x2d0>)
    2474:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

	ret = ticker_start(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			   (TICKER_ID_SCAN_SYNC_BASE + sync_handle),
			   ftr->ticks_anchor - ticks_slot_offset,
    2478:	f8db b010 	ldr.w	fp, [fp, #16]
			   HAL_TICKER_US_TO_TICKS(sync_offset_us),
    247c:	a32c      	add	r3, pc, #176	; (adr r3, 2530 <ull_sync_setup+0x2c0>)
    247e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2482:	fba8 0106 	umull	r0, r1, r8, r6
    2486:	f7fe fe97 	bl	11b8 <__aeabi_uldivmod>
    248a:	900b      	str	r0, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(interval_us),
    248c:	fba5 6506 	umull	r6, r5, r5, r6
    2490:	a327      	add	r3, pc, #156	; (adr r3, 2530 <ull_sync_setup+0x2c0>)
    2492:	e9d3 2300 	ldrd	r2, r3, [r3]
    2496:	4630      	mov	r0, r6
    2498:	4629      	mov	r1, r5
    249a:	f7fe fe8d 	bl	11b8 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(interval_us),
    249e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
    24a2:	4828      	ldr	r0, [pc, #160]	; (2544 <ull_sync_setup+0x2d4>)
    24a4:	fba8 0100 	umull	r0, r1, r8, r0
    24a8:	2307      	movs	r3, #7
    24aa:	fb03 1108 	mla	r1, r3, r8, r1
    24ae:	1a30      	subs	r0, r6, r0
    24b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    24b4:	f04f 0300 	mov.w	r3, #0
    24b8:	eb65 0101 	sbc.w	r1, r5, r1
    24bc:	f7fe fe7c 	bl	11b8 <__aeabi_uldivmod>
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    24c0:	1d3a      	adds	r2, r7, #4
    24c2:	f240 23ef 	movw	r3, #751	; 0x2ef
    24c6:	9308      	str	r3, [sp, #32]
    24c8:	4b1f      	ldr	r3, [pc, #124]	; (2548 <ull_sync_setup+0x2d8>)
    24ca:	9307      	str	r3, [sp, #28]
    24cc:	9406      	str	r4, [sp, #24]
    24ce:	4b1f      	ldr	r3, [pc, #124]	; (254c <ull_sync_setup+0x2dc>)
    24d0:	9305      	str	r3, [sp, #20]
    24d2:	f8cd a010 	str.w	sl, [sp, #16]
    24d6:	f8cd 900c 	str.w	r9, [sp, #12]
    24da:	9002      	str	r0, [sp, #8]
    24dc:	f8cd 8004 	str.w	r8, [sp, #4]
    24e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    24e2:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
    24e6:	9000      	str	r0, [sp, #0]
    24e8:	f1ab 033a 	sub.w	r3, fp, #58	; 0x3a
    24ec:	b2d2      	uxtb	r2, r2
    24ee:	2101      	movs	r1, #1
    24f0:	4648      	mov	r0, r9
    24f2:	f018 f879 	bl	1a5e8 <ticker_start>
			   TICKER_NULL_LAZY,
			   (sync->ull.ticks_slot + ticks_slot_overhead),
			   ticker_cb, sync,
			   ticker_start_op_cb, (void *)__LINE__);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    24f6:	b108      	cbz	r0, 24fc <ull_sync_setup+0x28c>
    24f8:	2802      	cmp	r0, #2
    24fa:	d108      	bne.n	250e <ull_sync_setup+0x29e>
		  (ret == TICKER_STATUS_BUSY));
}
    24fc:	b00d      	add	sp, #52	; 0x34
    24fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->window_size_event_us = OFFS_UNIT_30_US;
    2502:	231e      	movs	r3, #30
    2504:	6563      	str	r3, [r4, #84]	; 0x54
    2506:	e74d      	b.n	23a4 <ull_sync_setup+0x134>
	sync_offset_us += (si->offs_adjust ? OFFS_ADJUST_US : 0U);
    2508:	f04f 0800 	mov.w	r8, #0
    250c:	e77e      	b.n	240c <ull_sync_setup+0x19c>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    250e:	f44f 733c 	mov.w	r3, #752	; 0x2f0
    2512:	4a0f      	ldr	r2, [pc, #60]	; (2550 <ull_sync_setup+0x2e0>)
    2514:	490f      	ldr	r1, [pc, #60]	; (2554 <ull_sync_setup+0x2e4>)
    2516:	4810      	ldr	r0, [pc, #64]	; (2558 <ull_sync_setup+0x2e8>)
    2518:	f017 f959 	bl	197ce <assert_print>
    251c:	4040      	eors	r0, r0
    251e:	f380 8811 	msr	BASEPRI, r0
    2522:	f04f 0003 	mov.w	r0, #3
    2526:	df02      	svc	2
    2528:	e7e8      	b.n	24fc <ull_sync_setup+0x28c>
    252a:	bf00      	nop
    252c:	f3af 8000 	nop.w
    2530:	1afd498d 	.word	0x1afd498d
    2534:	00000007 	.word	0x00000007
    2538:	431bde83 	.word	0x431bde83
    253c:	3b9aca00 	.word	0x3b9aca00
    2540:	0000f5f9 	.word	0x0000f5f9
    2544:	1afd498d 	.word	0x1afd498d
    2548:	0000ac9d 	.word	0x0000ac9d
    254c:	0000acf5 	.word	0x0000acf5
    2550:	0001efe0 	.word	0x0001efe0
    2554:	0001ee10 	.word	0x0001ee10
    2558:	0001e920 	.word	0x0001e920
    255c:	00000000 	.word	0x00000000

00002560 <ull_sync_slot_update>:
 * @retval -ENOMEM      Couldn't enqueue update ticker job.
 * @retval -EFAULT      Somethin else went wrong.
 */
int ull_sync_slot_update(struct ll_sync_set *sync, uint32_t slot_plus_us,
			 uint32_t slot_minus_us)
{
    2560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2564:	b08a      	sub	sp, #40	; 0x28
    2566:	460d      	mov	r5, r1
    2568:	4614      	mov	r4, r2
	uint32_t volatile ret_cb;
	uint32_t ret;

	ret_cb = TICKER_STATUS_BUSY;
    256a:	2302      	movs	r3, #2
    256c:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
			    TICKER_USER_ID_THREAD,
			    (TICKER_ID_SCAN_SYNC_BASE +
			    ull_sync_handle_get(sync)),
    256e:	f008 fd83 	bl	b078 <ull_sync_handle_get>
    2572:	4607      	mov	r7, r0
			    0, 0,
			    HAL_TICKER_US_TO_TICKS(slot_plus_us),
    2574:	2600      	movs	r6, #0
    2576:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2618 <ull_sync_slot_update+0xb8>
    257a:	a325      	add	r3, pc, #148	; (adr r3, 2610 <ull_sync_slot_update+0xb0>)
    257c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2580:	fba5 0108 	umull	r0, r1, r5, r8
    2584:	f7fe fe18 	bl	11b8 <__aeabi_uldivmod>
    2588:	4605      	mov	r5, r0
			    HAL_TICKER_US_TO_TICKS(slot_minus_us),
    258a:	a321      	add	r3, pc, #132	; (adr r3, 2610 <ull_sync_slot_update+0xb0>)
    258c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2590:	fba4 0108 	umull	r0, r1, r4, r8
    2594:	f7fe fe10 	bl	11b8 <__aeabi_uldivmod>
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    2598:	1d3a      	adds	r2, r7, #4
    259a:	ab09      	add	r3, sp, #36	; 0x24
    259c:	9306      	str	r3, [sp, #24]
    259e:	4b1f      	ldr	r3, [pc, #124]	; (261c <ull_sync_slot_update+0xbc>)
    25a0:	9305      	str	r3, [sp, #20]
    25a2:	9604      	str	r6, [sp, #16]
    25a4:	9603      	str	r6, [sp, #12]
    25a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25aa:	9002      	str	r0, [sp, #8]
    25ac:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    25b0:	9501      	str	r5, [sp, #4]
    25b2:	9600      	str	r6, [sp, #0]
    25b4:	4633      	mov	r3, r6
    25b6:	b2d2      	uxtb	r2, r2
    25b8:	2103      	movs	r1, #3
    25ba:	4630      	mov	r0, r6
    25bc:	f018 f82f 	bl	1a61e <ticker_update>
			    0, 0,
			    ticker_update_op_status_give,
			    (void *)&ret_cb);
	if (ret == TICKER_STATUS_BUSY || ret == TICKER_STATUS_SUCCESS) {
    25c0:	2802      	cmp	r0, #2
    25c2:	d000      	beq.n	25c6 <ull_sync_slot_update+0x66>
    25c4:	b980      	cbnz	r0, 25e8 <ull_sync_slot_update+0x88>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    25c6:	f04f 32ff 	mov.w	r2, #4294967295
    25ca:	f04f 33ff 	mov.w	r3, #4294967295
    25ce:	4814      	ldr	r0, [pc, #80]	; (2620 <ull_sync_slot_update+0xc0>)
    25d0:	f010 fcc4 	bl	12f5c <z_impl_k_sem_take>
		/* Wait for callback or clear semaphore is callback was already
		 * executed.
		 */
		k_sem_take(&sem_ticker_cb, K_FOREVER);

		if (ret_cb == TICKER_STATUS_FAILURE) {
    25d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25d6:	2b01      	cmp	r3, #1
    25d8:	d003      	beq.n	25e2 <ull_sync_slot_update+0x82>
			return -EFAULT; /* Something went wrong */
		} else {
			return 0;
    25da:	2000      	movs	r0, #0
			k_sem_take(&sem_ticker_cb, K_FOREVER);
		}
		/* Ticker was already stopped or job was not enqueued. */
		return (ret_cb == TICKER_STATUS_FAILURE) ? -ENOENT : -ENOMEM;
	}
}
    25dc:	b00a      	add	sp, #40	; 0x28
    25de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -EFAULT; /* Something went wrong */
    25e2:	f06f 000d 	mvn.w	r0, #13
    25e6:	e7f9      	b.n	25dc <ull_sync_slot_update+0x7c>
		if (ret_cb != TICKER_STATUS_BUSY) {
    25e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ea:	2b02      	cmp	r3, #2
    25ec:	d105      	bne.n	25fa <ull_sync_slot_update+0x9a>
		return (ret_cb == TICKER_STATUS_FAILURE) ? -ENOENT : -ENOMEM;
    25ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25f0:	2b01      	cmp	r3, #1
    25f2:	d00a      	beq.n	260a <ull_sync_slot_update+0xaa>
    25f4:	f06f 000b 	mvn.w	r0, #11
    25f8:	e7f0      	b.n	25dc <ull_sync_slot_update+0x7c>
    25fa:	f04f 32ff 	mov.w	r2, #4294967295
    25fe:	f04f 33ff 	mov.w	r3, #4294967295
    2602:	4807      	ldr	r0, [pc, #28]	; (2620 <ull_sync_slot_update+0xc0>)
    2604:	f010 fcaa 	bl	12f5c <z_impl_k_sem_take>
    2608:	e7f1      	b.n	25ee <ull_sync_slot_update+0x8e>
    260a:	f06f 0001 	mvn.w	r0, #1
    260e:	e7e5      	b.n	25dc <ull_sync_slot_update+0x7c>
    2610:	1afd498d 	.word	0x1afd498d
    2614:	00000007 	.word	0x00000007
    2618:	3b9aca00 	.word	0x3b9aca00
    261c:	0000aea9 	.word	0x0000aea9
    2620:	200059b0 	.word	0x200059b0
    2624:	00000000 	.word	0x00000000

00002628 <_dtoa_r>:
    2628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    262c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    262e:	b09d      	sub	sp, #116	; 0x74
    2630:	4616      	mov	r6, r2
    2632:	461f      	mov	r7, r3
    2634:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2638:	9c29      	ldr	r4, [sp, #164]	; 0xa4
    263a:	4682      	mov	sl, r0
    263c:	b149      	cbz	r1, 2652 <_dtoa_r+0x2a>
    263e:	6c42      	ldr	r2, [r0, #68]	; 0x44
    2640:	604a      	str	r2, [r1, #4]
    2642:	2301      	movs	r3, #1
    2644:	4093      	lsls	r3, r2
    2646:	608b      	str	r3, [r1, #8]
    2648:	f014 fc36 	bl	16eb8 <_Bfree>
    264c:	2300      	movs	r3, #0
    264e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    2652:	f1b7 0800 	subs.w	r8, r7, #0
    2656:	bfb4      	ite	lt
    2658:	2301      	movlt	r3, #1
    265a:	2300      	movge	r3, #0
    265c:	6023      	str	r3, [r4, #0]
    265e:	4b76      	ldr	r3, [pc, #472]	; (2838 <_dtoa_r+0x210>)
    2660:	bfbc      	itt	lt
    2662:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
    2666:	f8cd 800c 	strlt.w	r8, [sp, #12]
    266a:	ea33 0308 	bics.w	r3, r3, r8
    266e:	f000 80ac 	beq.w	27ca <_dtoa_r+0x1a2>
    2672:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    2676:	2200      	movs	r2, #0
    2678:	4618      	mov	r0, r3
    267a:	4621      	mov	r1, r4
    267c:	2300      	movs	r3, #0
    267e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    2682:	f7fe fe09 	bl	1298 <__aeabi_dcmpeq>
    2686:	4605      	mov	r5, r0
    2688:	b170      	cbz	r0, 26a8 <_dtoa_r+0x80>
    268a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    268c:	2301      	movs	r3, #1
    268e:	6013      	str	r3, [r2, #0]
    2690:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    2692:	2b00      	cmp	r3, #0
    2694:	f000 82f0 	beq.w	2c78 <_dtoa_r+0x650>
    2698:	4868      	ldr	r0, [pc, #416]	; (283c <_dtoa_r+0x214>)
    269a:	6018      	str	r0, [r3, #0]
    269c:	1e43      	subs	r3, r0, #1
    269e:	9306      	str	r3, [sp, #24]
    26a0:	9806      	ldr	r0, [sp, #24]
    26a2:	b01d      	add	sp, #116	; 0x74
    26a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    26a8:	ab1a      	add	r3, sp, #104	; 0x68
    26aa:	9301      	str	r3, [sp, #4]
    26ac:	ab1b      	add	r3, sp, #108	; 0x6c
    26ae:	9300      	str	r3, [sp, #0]
    26b0:	4650      	mov	r0, sl
    26b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    26b6:	f014 ff21 	bl	174fc <__d2b>
    26ba:	ea5f 5418 	movs.w	r4, r8, lsr #20
    26be:	4683      	mov	fp, r0
    26c0:	f040 8099 	bne.w	27f6 <_dtoa_r+0x1ce>
    26c4:	e9dd 541a 	ldrd	r5, r4, [sp, #104]	; 0x68
    26c8:	442c      	add	r4, r5
    26ca:	f204 4332 	addw	r3, r4, #1074	; 0x432
    26ce:	2b20      	cmp	r3, #32
    26d0:	f340 83b8 	ble.w	2e44 <_dtoa_r+0x81c>
    26d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    26d8:	f204 4012 	addw	r0, r4, #1042	; 0x412
    26dc:	fa08 f803 	lsl.w	r8, r8, r3
    26e0:	fa26 f000 	lsr.w	r0, r6, r0
    26e4:	ea48 0000 	orr.w	r0, r8, r0
    26e8:	f7fe f87c 	bl	7e4 <__aeabi_ui2d>
    26ec:	2301      	movs	r3, #1
    26ee:	3c01      	subs	r4, #1
    26f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    26f4:	930f      	str	r3, [sp, #60]	; 0x3c
    26f6:	4b52      	ldr	r3, [pc, #328]	; (2840 <_dtoa_r+0x218>)
    26f8:	2200      	movs	r2, #0
    26fa:	f7fd ff35 	bl	568 <__aeabi_dsub>
    26fe:	a348      	add	r3, pc, #288	; (adr r3, 2820 <_dtoa_r+0x1f8>)
    2700:	e9d3 2300 	ldrd	r2, r3, [r3]
    2704:	f7fe f8e8 	bl	8d8 <__aeabi_dmul>
    2708:	a347      	add	r3, pc, #284	; (adr r3, 2828 <_dtoa_r+0x200>)
    270a:	e9d3 2300 	ldrd	r2, r3, [r3]
    270e:	f7fd ff2d 	bl	56c <__adddf3>
    2712:	4606      	mov	r6, r0
    2714:	4620      	mov	r0, r4
    2716:	460f      	mov	r7, r1
    2718:	f7fe f874 	bl	804 <__aeabi_i2d>
    271c:	a344      	add	r3, pc, #272	; (adr r3, 2830 <_dtoa_r+0x208>)
    271e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2722:	f7fe f8d9 	bl	8d8 <__aeabi_dmul>
    2726:	4602      	mov	r2, r0
    2728:	460b      	mov	r3, r1
    272a:	4630      	mov	r0, r6
    272c:	4639      	mov	r1, r7
    272e:	f7fd ff1d 	bl	56c <__adddf3>
    2732:	4606      	mov	r6, r0
    2734:	460f      	mov	r7, r1
    2736:	f7fe fe91 	bl	145c <__aeabi_d2iz>
    273a:	2200      	movs	r2, #0
    273c:	4681      	mov	r9, r0
    273e:	2300      	movs	r3, #0
    2740:	4630      	mov	r0, r6
    2742:	4639      	mov	r1, r7
    2744:	f7fe fdb2 	bl	12ac <__aeabi_dcmplt>
    2748:	2800      	cmp	r0, #0
    274a:	f040 8288 	bne.w	2c5e <_dtoa_r+0x636>
    274e:	1b2c      	subs	r4, r5, r4
    2750:	1e63      	subs	r3, r4, #1
    2752:	f1b9 0f16 	cmp.w	r9, #22
    2756:	9304      	str	r3, [sp, #16]
    2758:	f200 8275 	bhi.w	2c46 <_dtoa_r+0x61e>
    275c:	4b39      	ldr	r3, [pc, #228]	; (2844 <_dtoa_r+0x21c>)
    275e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
    2762:	e9d3 2300 	ldrd	r2, r3, [r3]
    2766:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    276a:	f7fe fd9f 	bl	12ac <__aeabi_dcmplt>
    276e:	2800      	cmp	r0, #0
    2770:	d06e      	beq.n	2850 <_dtoa_r+0x228>
    2772:	2300      	movs	r3, #0
    2774:	930e      	str	r3, [sp, #56]	; 0x38
    2776:	1e63      	subs	r3, r4, #1
    2778:	2b00      	cmp	r3, #0
    277a:	f109 39ff 	add.w	r9, r9, #4294967295
    277e:	f2c0 8268 	blt.w	2c52 <_dtoa_r+0x62a>
    2782:	2300      	movs	r3, #0
    2784:	930a      	str	r3, [sp, #40]	; 0x28
    2786:	f1b9 0f00 	cmp.w	r9, #0
    278a:	da67      	bge.n	285c <_dtoa_r+0x234>
    278c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    278e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    2792:	eba3 0309 	sub.w	r3, r3, r9
    2796:	930a      	str	r3, [sp, #40]	; 0x28
    2798:	f1c9 0300 	rsb	r3, r9, #0
    279c:	930d      	str	r3, [sp, #52]	; 0x34
    279e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    27a0:	2b09      	cmp	r3, #9
    27a2:	f04f 0900 	mov.w	r9, #0
    27a6:	d863      	bhi.n	2870 <_dtoa_r+0x248>
    27a8:	2b05      	cmp	r3, #5
    27aa:	f340 8349 	ble.w	2e40 <_dtoa_r+0x818>
    27ae:	3b04      	subs	r3, #4
    27b0:	9326      	str	r3, [sp, #152]	; 0x98
    27b2:	2400      	movs	r4, #0
    27b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    27b6:	3b02      	subs	r3, #2
    27b8:	2b03      	cmp	r3, #3
    27ba:	f200 864e 	bhi.w	345a <_dtoa_r+0xe32>
    27be:	e8df f013 	tbh	[pc, r3, lsl #1]
    27c2:	0452      	.short	0x0452
    27c4:	0446044f 	.word	0x0446044f
    27c8:	0427      	.short	0x0427
    27ca:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    27cc:	f242 730f 	movw	r3, #9999	; 0x270f
    27d0:	f3c8 0813 	ubfx	r8, r8, #0, #20
    27d4:	6013      	str	r3, [r2, #0]
    27d6:	ea58 0306 	orrs.w	r3, r8, r6
    27da:	d11a      	bne.n	2812 <_dtoa_r+0x1ea>
    27dc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    27de:	2b00      	cmp	r3, #0
    27e0:	f000 8652 	beq.w	3488 <_dtoa_r+0xe60>
    27e4:	4b18      	ldr	r3, [pc, #96]	; (2848 <_dtoa_r+0x220>)
    27e6:	9306      	str	r3, [sp, #24]
    27e8:	3308      	adds	r3, #8
    27ea:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    27ec:	9806      	ldr	r0, [sp, #24]
    27ee:	6013      	str	r3, [r2, #0]
    27f0:	b01d      	add	sp, #116	; 0x74
    27f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27f6:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
    27fa:	f3c2 0313 	ubfx	r3, r2, #0, #20
    27fe:	4608      	mov	r0, r1
    2800:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    2804:	950f      	str	r5, [sp, #60]	; 0x3c
    2806:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    280a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    280c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    2810:	e771      	b.n	26f6 <_dtoa_r+0xce>
    2812:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    2814:	2b00      	cmp	r3, #0
    2816:	f040 83ea 	bne.w	2fee <_dtoa_r+0x9c6>
    281a:	4b0c      	ldr	r3, [pc, #48]	; (284c <_dtoa_r+0x224>)
    281c:	9306      	str	r3, [sp, #24]
    281e:	e73f      	b.n	26a0 <_dtoa_r+0x78>
    2820:	636f4361 	.word	0x636f4361
    2824:	3fd287a7 	.word	0x3fd287a7
    2828:	8b60c8b3 	.word	0x8b60c8b3
    282c:	3fc68a28 	.word	0x3fc68a28
    2830:	509f79fb 	.word	0x509f79fb
    2834:	3fd34413 	.word	0x3fd34413
    2838:	7ff00000 	.word	0x7ff00000
    283c:	0001ead9 	.word	0x0001ead9
    2840:	3ff80000 	.word	0x3ff80000
    2844:	0001e720 	.word	0x0001e720
    2848:	0001fafc 	.word	0x0001fafc
    284c:	0001faf8 	.word	0x0001faf8
    2850:	1e63      	subs	r3, r4, #1
    2852:	2b00      	cmp	r3, #0
    2854:	f2c0 8475 	blt.w	3142 <_dtoa_r+0xb1a>
    2858:	900e      	str	r0, [sp, #56]	; 0x38
    285a:	900a      	str	r0, [sp, #40]	; 0x28
    285c:	9b04      	ldr	r3, [sp, #16]
    285e:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    2862:	444b      	add	r3, r9
    2864:	9304      	str	r3, [sp, #16]
    2866:	2300      	movs	r3, #0
    2868:	930d      	str	r3, [sp, #52]	; 0x34
    286a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    286c:	2b09      	cmp	r3, #9
    286e:	d99b      	bls.n	27a8 <_dtoa_r+0x180>
    2870:	2300      	movs	r3, #0
    2872:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
    2876:	2401      	movs	r4, #1
    2878:	f04f 33ff 	mov.w	r3, #4294967295
    287c:	940c      	str	r4, [sp, #48]	; 0x30
    287e:	9307      	str	r3, [sp, #28]
    2880:	9b07      	ldr	r3, [sp, #28]
    2882:	9316      	str	r3, [sp, #88]	; 0x58
    2884:	2100      	movs	r1, #0
    2886:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
    288a:	4650      	mov	r0, sl
    288c:	f014 faee 	bl	16e6c <_Balloc>
    2890:	9006      	str	r0, [sp, #24]
    2892:	2800      	cmp	r0, #0
    2894:	f000 85ea 	beq.w	346c <_dtoa_r+0xe44>
    2898:	9b06      	ldr	r3, [sp, #24]
    289a:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    289e:	9b07      	ldr	r3, [sp, #28]
    28a0:	2b0e      	cmp	r3, #14
    28a2:	f200 811d 	bhi.w	2ae0 <_dtoa_r+0x4b8>
    28a6:	2c00      	cmp	r4, #0
    28a8:	f000 811a 	beq.w	2ae0 <_dtoa_r+0x4b8>
    28ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
    28ae:	2900      	cmp	r1, #0
    28b0:	f340 8449 	ble.w	3146 <_dtoa_r+0xb1e>
    28b4:	4bb4      	ldr	r3, [pc, #720]	; (2b88 <_dtoa_r+0x560>)
    28b6:	f001 020f 	and.w	r2, r1, #15
    28ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    28be:	460a      	mov	r2, r1
    28c0:	05d2      	lsls	r2, r2, #23
    28c2:	e9d3 4500 	ldrd	r4, r5, [r3]
    28c6:	ea4f 1621 	mov.w	r6, r1, asr #4
    28ca:	f140 8402 	bpl.w	30d2 <_dtoa_r+0xaaa>
    28ce:	4baf      	ldr	r3, [pc, #700]	; (2b8c <_dtoa_r+0x564>)
    28d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    28d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    28d8:	f7fe f928 	bl	b2c <__aeabi_ddiv>
    28dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    28e0:	f006 060f 	and.w	r6, r6, #15
    28e4:	f04f 0803 	mov.w	r8, #3
    28e8:	b186      	cbz	r6, 290c <_dtoa_r+0x2e4>
    28ea:	4fa8      	ldr	r7, [pc, #672]	; (2b8c <_dtoa_r+0x564>)
    28ec:	07f3      	lsls	r3, r6, #31
    28ee:	d509      	bpl.n	2904 <_dtoa_r+0x2dc>
    28f0:	4620      	mov	r0, r4
    28f2:	4629      	mov	r1, r5
    28f4:	e9d7 2300 	ldrd	r2, r3, [r7]
    28f8:	f7fd ffee 	bl	8d8 <__aeabi_dmul>
    28fc:	f108 0801 	add.w	r8, r8, #1
    2900:	4604      	mov	r4, r0
    2902:	460d      	mov	r5, r1
    2904:	1076      	asrs	r6, r6, #1
    2906:	f107 0708 	add.w	r7, r7, #8
    290a:	d1ef      	bne.n	28ec <_dtoa_r+0x2c4>
    290c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2910:	4622      	mov	r2, r4
    2912:	462b      	mov	r3, r5
    2914:	f7fe f90a 	bl	b2c <__aeabi_ddiv>
    2918:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    291c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    291e:	b153      	cbz	r3, 2936 <_dtoa_r+0x30e>
    2920:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    2924:	4b9a      	ldr	r3, [pc, #616]	; (2b90 <_dtoa_r+0x568>)
    2926:	2200      	movs	r2, #0
    2928:	4620      	mov	r0, r4
    292a:	4629      	mov	r1, r5
    292c:	f7fe fcbe 	bl	12ac <__aeabi_dcmplt>
    2930:	2800      	cmp	r0, #0
    2932:	f040 8516 	bne.w	3362 <_dtoa_r+0xd3a>
    2936:	4640      	mov	r0, r8
    2938:	f7fd ff64 	bl	804 <__aeabi_i2d>
    293c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    2940:	f7fd ffca 	bl	8d8 <__aeabi_dmul>
    2944:	4b93      	ldr	r3, [pc, #588]	; (2b94 <_dtoa_r+0x56c>)
    2946:	2200      	movs	r2, #0
    2948:	f7fd fe10 	bl	56c <__adddf3>
    294c:	9b07      	ldr	r3, [sp, #28]
    294e:	4606      	mov	r6, r0
    2950:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    2954:	2b00      	cmp	r3, #0
    2956:	f000 80a9 	beq.w	2aac <_dtoa_r+0x484>
    295a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    295c:	9317      	str	r3, [sp, #92]	; 0x5c
    295e:	9b07      	ldr	r3, [sp, #28]
    2960:	9310      	str	r3, [sp, #64]	; 0x40
    2962:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
    2966:	9b06      	ldr	r3, [sp, #24]
    2968:	4629      	mov	r1, r5
    296a:	4620      	mov	r0, r4
    296c:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
    2970:	1c5f      	adds	r7, r3, #1
    2972:	f7fe fd73 	bl	145c <__aeabi_d2iz>
    2976:	9910      	ldr	r1, [sp, #64]	; 0x40
    2978:	4b83      	ldr	r3, [pc, #524]	; (2b88 <_dtoa_r+0x560>)
    297a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    297e:	e953 1202 	ldrd	r1, r2, [r3, #-8]
    2982:	f100 0630 	add.w	r6, r0, #48	; 0x30
    2986:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
    298a:	f7fd ff3b 	bl	804 <__aeabi_i2d>
    298e:	4602      	mov	r2, r0
    2990:	460b      	mov	r3, r1
    2992:	4620      	mov	r0, r4
    2994:	4629      	mov	r1, r5
    2996:	f7fd fde7 	bl	568 <__aeabi_dsub>
    299a:	460d      	mov	r5, r1
    299c:	990c      	ldr	r1, [sp, #48]	; 0x30
    299e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    29a2:	b2f6      	uxtb	r6, r6
    29a4:	4604      	mov	r4, r0
    29a6:	2900      	cmp	r1, #0
    29a8:	f000 8488 	beq.w	32bc <_dtoa_r+0xc94>
    29ac:	497a      	ldr	r1, [pc, #488]	; (2b98 <_dtoa_r+0x570>)
    29ae:	2000      	movs	r0, #0
    29b0:	f7fe f8bc 	bl	b2c <__aeabi_ddiv>
    29b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    29b8:	f7fd fdd6 	bl	568 <__aeabi_dsub>
    29bc:	f8dd c018 	ldr.w	ip, [sp, #24]
    29c0:	4602      	mov	r2, r0
    29c2:	460b      	mov	r3, r1
    29c4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    29c8:	f88c 6000 	strb.w	r6, [ip]
    29cc:	4622      	mov	r2, r4
    29ce:	462b      	mov	r3, r5
    29d0:	f7fe fc8a 	bl	12e8 <__aeabi_dcmpgt>
    29d4:	2800      	cmp	r0, #0
    29d6:	f040 84bc 	bne.w	3352 <_dtoa_r+0xd2a>
    29da:	f8cd 9064 	str.w	r9, [sp, #100]	; 0x64
    29de:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
    29e2:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
    29e6:	f04f 0800 	mov.w	r8, #0
    29ea:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
    29ee:	46b9      	mov	r9, r7
    29f0:	e02c      	b.n	2a4c <_dtoa_r+0x424>
    29f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    29f4:	f108 0801 	add.w	r8, r8, #1
    29f8:	4598      	cmp	r8, r3
    29fa:	f280 8507 	bge.w	340c <_dtoa_r+0xde4>
    29fe:	4b67      	ldr	r3, [pc, #412]	; (2b9c <_dtoa_r+0x574>)
    2a00:	4650      	mov	r0, sl
    2a02:	4659      	mov	r1, fp
    2a04:	2200      	movs	r2, #0
    2a06:	f7fd ff67 	bl	8d8 <__aeabi_dmul>
    2a0a:	4b64      	ldr	r3, [pc, #400]	; (2b9c <_dtoa_r+0x574>)
    2a0c:	2200      	movs	r2, #0
    2a0e:	4682      	mov	sl, r0
    2a10:	468b      	mov	fp, r1
    2a12:	4620      	mov	r0, r4
    2a14:	4629      	mov	r1, r5
    2a16:	f7fd ff5f 	bl	8d8 <__aeabi_dmul>
    2a1a:	460f      	mov	r7, r1
    2a1c:	4606      	mov	r6, r0
    2a1e:	f7fe fd1d 	bl	145c <__aeabi_d2iz>
    2a22:	4605      	mov	r5, r0
    2a24:	f7fd feee 	bl	804 <__aeabi_i2d>
    2a28:	4602      	mov	r2, r0
    2a2a:	460b      	mov	r3, r1
    2a2c:	4630      	mov	r0, r6
    2a2e:	4639      	mov	r1, r7
    2a30:	f7fd fd9a 	bl	568 <__aeabi_dsub>
    2a34:	3530      	adds	r5, #48	; 0x30
    2a36:	f809 5b01 	strb.w	r5, [r9], #1
    2a3a:	4652      	mov	r2, sl
    2a3c:	465b      	mov	r3, fp
    2a3e:	4604      	mov	r4, r0
    2a40:	460d      	mov	r5, r1
    2a42:	f7fe fc33 	bl	12ac <__aeabi_dcmplt>
    2a46:	2800      	cmp	r0, #0
    2a48:	f040 84d8 	bne.w	33fc <_dtoa_r+0xdd4>
    2a4c:	4622      	mov	r2, r4
    2a4e:	462b      	mov	r3, r5
    2a50:	494f      	ldr	r1, [pc, #316]	; (2b90 <_dtoa_r+0x568>)
    2a52:	2000      	movs	r0, #0
    2a54:	f7fd fd88 	bl	568 <__aeabi_dsub>
    2a58:	4652      	mov	r2, sl
    2a5a:	465b      	mov	r3, fp
    2a5c:	f7fe fc26 	bl	12ac <__aeabi_dcmplt>
    2a60:	2800      	cmp	r0, #0
    2a62:	d0c6      	beq.n	29f2 <_dtoa_r+0x3ca>
    2a64:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    2a66:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    2a6a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    2a6e:	9a06      	ldr	r2, [sp, #24]
    2a70:	464e      	mov	r6, r9
    2a72:	3401      	adds	r4, #1
    2a74:	e002      	b.n	2a7c <_dtoa_r+0x454>
    2a76:	4296      	cmp	r6, r2
    2a78:	f000 84a2 	beq.w	33c0 <_dtoa_r+0xd98>
    2a7c:	4637      	mov	r7, r6
    2a7e:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
    2a82:	2b39      	cmp	r3, #57	; 0x39
    2a84:	d0f7      	beq.n	2a76 <_dtoa_r+0x44e>
    2a86:	3301      	adds	r3, #1
    2a88:	b2db      	uxtb	r3, r3
    2a8a:	7033      	strb	r3, [r6, #0]
    2a8c:	9402      	str	r4, [sp, #8]
    2a8e:	e1bc      	b.n	2e0a <_dtoa_r+0x7e2>
    2a90:	4640      	mov	r0, r8
    2a92:	f7fd feb7 	bl	804 <__aeabi_i2d>
    2a96:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    2a9a:	f7fd ff1d 	bl	8d8 <__aeabi_dmul>
    2a9e:	4b3d      	ldr	r3, [pc, #244]	; (2b94 <_dtoa_r+0x56c>)
    2aa0:	2200      	movs	r2, #0
    2aa2:	f7fd fd63 	bl	56c <__adddf3>
    2aa6:	4606      	mov	r6, r0
    2aa8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    2aac:	4b3c      	ldr	r3, [pc, #240]	; (2ba0 <_dtoa_r+0x578>)
    2aae:	2200      	movs	r2, #0
    2ab0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    2ab4:	f7fd fd58 	bl	568 <__aeabi_dsub>
    2ab8:	4632      	mov	r2, r6
    2aba:	463b      	mov	r3, r7
    2abc:	4604      	mov	r4, r0
    2abe:	460d      	mov	r5, r1
    2ac0:	f7fe fc12 	bl	12e8 <__aeabi_dcmpgt>
    2ac4:	4680      	mov	r8, r0
    2ac6:	2800      	cmp	r0, #0
    2ac8:	f040 8489 	bne.w	33de <_dtoa_r+0xdb6>
    2acc:	4632      	mov	r2, r6
    2ace:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
    2ad2:	4620      	mov	r0, r4
    2ad4:	4629      	mov	r1, r5
    2ad6:	f7fe fbe9 	bl	12ac <__aeabi_dcmplt>
    2ada:	2800      	cmp	r0, #0
    2adc:	f040 8328 	bne.w	3130 <_dtoa_r+0xb08>
    2ae0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	f2c0 8090 	blt.w	2c08 <_dtoa_r+0x5e0>
    2ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2aea:	2a0e      	cmp	r2, #14
    2aec:	f300 808c 	bgt.w	2c08 <_dtoa_r+0x5e0>
    2af0:	4b25      	ldr	r3, [pc, #148]	; (2b88 <_dtoa_r+0x560>)
    2af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    2af6:	e9d3 8900 	ldrd	r8, r9, [r3]
    2afa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2afc:	2b00      	cmp	r3, #0
    2afe:	da1b      	bge.n	2b38 <_dtoa_r+0x510>
    2b00:	9b07      	ldr	r3, [sp, #28]
    2b02:	2b00      	cmp	r3, #0
    2b04:	dc18      	bgt.n	2b38 <_dtoa_r+0x510>
    2b06:	f040 8311 	bne.w	312c <_dtoa_r+0xb04>
    2b0a:	4b25      	ldr	r3, [pc, #148]	; (2ba0 <_dtoa_r+0x578>)
    2b0c:	4640      	mov	r0, r8
    2b0e:	2200      	movs	r2, #0
    2b10:	4649      	mov	r1, r9
    2b12:	f7fd fee1 	bl	8d8 <__aeabi_dmul>
    2b16:	4602      	mov	r2, r0
    2b18:	460b      	mov	r3, r1
    2b1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2b1e:	f7fe fbcf 	bl	12c0 <__aeabi_dcmple>
    2b22:	f8dd 801c 	ldr.w	r8, [sp, #28]
    2b26:	4644      	mov	r4, r8
    2b28:	2800      	cmp	r0, #0
    2b2a:	f000 82b3 	beq.w	3094 <_dtoa_r+0xa6c>
    2b2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    2b30:	9f06      	ldr	r7, [sp, #24]
    2b32:	ea6f 0903 	mvn.w	r9, r3
    2b36:	e2b4      	b.n	30a2 <_dtoa_r+0xa7a>
    2b38:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
    2b3c:	4642      	mov	r2, r8
    2b3e:	464b      	mov	r3, r9
    2b40:	4620      	mov	r0, r4
    2b42:	4629      	mov	r1, r5
    2b44:	f7fd fff2 	bl	b2c <__aeabi_ddiv>
    2b48:	f7fe fc88 	bl	145c <__aeabi_d2iz>
    2b4c:	4607      	mov	r7, r0
    2b4e:	f7fd fe59 	bl	804 <__aeabi_i2d>
    2b52:	4642      	mov	r2, r8
    2b54:	464b      	mov	r3, r9
    2b56:	f7fd febf 	bl	8d8 <__aeabi_dmul>
    2b5a:	9e06      	ldr	r6, [sp, #24]
    2b5c:	460b      	mov	r3, r1
    2b5e:	4602      	mov	r2, r0
    2b60:	4629      	mov	r1, r5
    2b62:	4620      	mov	r0, r4
    2b64:	f7fd fd00 	bl	568 <__aeabi_dsub>
    2b68:	f107 0330 	add.w	r3, r7, #48	; 0x30
    2b6c:	f806 3b01 	strb.w	r3, [r6], #1
    2b70:	9b07      	ldr	r3, [sp, #28]
    2b72:	2b01      	cmp	r3, #1
    2b74:	f000 834e 	beq.w	3214 <_dtoa_r+0xbec>
    2b78:	f8cd a010 	str.w	sl, [sp, #16]
    2b7c:	2701      	movs	r7, #1
    2b7e:	f8cd b008 	str.w	fp, [sp, #8]
    2b82:	469a      	mov	sl, r3
    2b84:	e02b      	b.n	2bde <_dtoa_r+0x5b6>
    2b86:	bf00      	nop
    2b88:	0001e720 	.word	0x0001e720
    2b8c:	0001e6f8 	.word	0x0001e6f8
    2b90:	3ff00000 	.word	0x3ff00000
    2b94:	401c0000 	.word	0x401c0000
    2b98:	3fe00000 	.word	0x3fe00000
    2b9c:	40240000 	.word	0x40240000
    2ba0:	40140000 	.word	0x40140000
    2ba4:	4642      	mov	r2, r8
    2ba6:	464b      	mov	r3, r9
    2ba8:	4620      	mov	r0, r4
    2baa:	4629      	mov	r1, r5
    2bac:	f7fd ffbe 	bl	b2c <__aeabi_ddiv>
    2bb0:	f7fe fc54 	bl	145c <__aeabi_d2iz>
    2bb4:	4683      	mov	fp, r0
    2bb6:	f7fd fe25 	bl	804 <__aeabi_i2d>
    2bba:	4642      	mov	r2, r8
    2bbc:	464b      	mov	r3, r9
    2bbe:	f7fd fe8b 	bl	8d8 <__aeabi_dmul>
    2bc2:	3701      	adds	r7, #1
    2bc4:	460b      	mov	r3, r1
    2bc6:	4602      	mov	r2, r0
    2bc8:	4629      	mov	r1, r5
    2bca:	4620      	mov	r0, r4
    2bcc:	f7fd fccc 	bl	568 <__aeabi_dsub>
    2bd0:	f10b 0330 	add.w	r3, fp, #48	; 0x30
    2bd4:	4557      	cmp	r7, sl
    2bd6:	f806 3b01 	strb.w	r3, [r6], #1
    2bda:	f000 8316 	beq.w	320a <_dtoa_r+0xbe2>
    2bde:	4ba6      	ldr	r3, [pc, #664]	; (2e78 <_dtoa_r+0x850>)
    2be0:	2200      	movs	r2, #0
    2be2:	f7fd fe79 	bl	8d8 <__aeabi_dmul>
    2be6:	2200      	movs	r2, #0
    2be8:	2300      	movs	r3, #0
    2bea:	4604      	mov	r4, r0
    2bec:	460d      	mov	r5, r1
    2bee:	f7fe fb53 	bl	1298 <__aeabi_dcmpeq>
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d0d6      	beq.n	2ba4 <_dtoa_r+0x57c>
    2bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2bf8:	f8dd b008 	ldr.w	fp, [sp, #8]
    2bfc:	f8dd a010 	ldr.w	sl, [sp, #16]
    2c00:	3301      	adds	r3, #1
    2c02:	9302      	str	r3, [sp, #8]
    2c04:	4637      	mov	r7, r6
    2c06:	e100      	b.n	2e0a <_dtoa_r+0x7e2>
    2c08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2c0a:	2a00      	cmp	r2, #0
    2c0c:	d03a      	beq.n	2c84 <_dtoa_r+0x65c>
    2c0e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    2c10:	2a01      	cmp	r2, #1
    2c12:	f340 827c 	ble.w	310e <_dtoa_r+0xae6>
    2c16:	9b07      	ldr	r3, [sp, #28]
    2c18:	1e5e      	subs	r6, r3, #1
    2c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2c1c:	42b3      	cmp	r3, r6
    2c1e:	f2c0 8252 	blt.w	30c6 <_dtoa_r+0xa9e>
    2c22:	1b9e      	subs	r6, r3, r6
    2c24:	9b07      	ldr	r3, [sp, #28]
    2c26:	2b00      	cmp	r3, #0
    2c28:	f2c0 832f 	blt.w	328a <_dtoa_r+0xc62>
    2c2c:	9a04      	ldr	r2, [sp, #16]
    2c2e:	441a      	add	r2, r3
    2c30:	9204      	str	r2, [sp, #16]
    2c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2c34:	4615      	mov	r5, r2
    2c36:	441a      	add	r2, r3
    2c38:	920a      	str	r2, [sp, #40]	; 0x28
    2c3a:	2101      	movs	r1, #1
    2c3c:	4650      	mov	r0, sl
    2c3e:	f014 f9e3 	bl	17008 <__i2b>
    2c42:	4604      	mov	r4, r0
    2c44:	e021      	b.n	2c8a <_dtoa_r+0x662>
    2c46:	2301      	movs	r3, #1
    2c48:	930e      	str	r3, [sp, #56]	; 0x38
    2c4a:	1e63      	subs	r3, r4, #1
    2c4c:	2b00      	cmp	r3, #0
    2c4e:	f6bf ad98 	bge.w	2782 <_dtoa_r+0x15a>
    2c52:	f1c4 0301 	rsb	r3, r4, #1
    2c56:	930a      	str	r3, [sp, #40]	; 0x28
    2c58:	2300      	movs	r3, #0
    2c5a:	9304      	str	r3, [sp, #16]
    2c5c:	e593      	b.n	2786 <_dtoa_r+0x15e>
    2c5e:	4648      	mov	r0, r9
    2c60:	f7fd fdd0 	bl	804 <__aeabi_i2d>
    2c64:	4632      	mov	r2, r6
    2c66:	463b      	mov	r3, r7
    2c68:	f7fe fb16 	bl	1298 <__aeabi_dcmpeq>
    2c6c:	2800      	cmp	r0, #0
    2c6e:	f47f ad6e 	bne.w	274e <_dtoa_r+0x126>
    2c72:	f109 39ff 	add.w	r9, r9, #4294967295
    2c76:	e56a      	b.n	274e <_dtoa_r+0x126>
    2c78:	4b80      	ldr	r3, [pc, #512]	; (2e7c <_dtoa_r+0x854>)
    2c7a:	9306      	str	r3, [sp, #24]
    2c7c:	9806      	ldr	r0, [sp, #24]
    2c7e:	b01d      	add	sp, #116	; 0x74
    2c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c84:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2c86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2c88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    2c8a:	2d00      	cmp	r5, #0
    2c8c:	dd0c      	ble.n	2ca8 <_dtoa_r+0x680>
    2c8e:	9904      	ldr	r1, [sp, #16]
    2c90:	2900      	cmp	r1, #0
    2c92:	460b      	mov	r3, r1
    2c94:	dd08      	ble.n	2ca8 <_dtoa_r+0x680>
    2c96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2c98:	42a9      	cmp	r1, r5
    2c9a:	bfa8      	it	ge
    2c9c:	462b      	movge	r3, r5
    2c9e:	1ad2      	subs	r2, r2, r3
    2ca0:	1aed      	subs	r5, r5, r3
    2ca2:	1acb      	subs	r3, r1, r3
    2ca4:	920a      	str	r2, [sp, #40]	; 0x28
    2ca6:	9304      	str	r3, [sp, #16]
    2ca8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2caa:	b1cb      	cbz	r3, 2ce0 <_dtoa_r+0x6b8>
    2cac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2cae:	2b00      	cmp	r3, #0
    2cb0:	f000 8240 	beq.w	3134 <_dtoa_r+0xb0c>
    2cb4:	2e00      	cmp	r6, #0
    2cb6:	dd0f      	ble.n	2cd8 <_dtoa_r+0x6b0>
    2cb8:	4621      	mov	r1, r4
    2cba:	4632      	mov	r2, r6
    2cbc:	4650      	mov	r0, sl
    2cbe:	f014 fa7f 	bl	171c0 <__pow5mult>
    2cc2:	465a      	mov	r2, fp
    2cc4:	4601      	mov	r1, r0
    2cc6:	4604      	mov	r4, r0
    2cc8:	4650      	mov	r0, sl
    2cca:	f014 f9cb 	bl	17064 <__multiply>
    2cce:	4659      	mov	r1, fp
    2cd0:	4683      	mov	fp, r0
    2cd2:	4650      	mov	r0, sl
    2cd4:	f014 f8f0 	bl	16eb8 <_Bfree>
    2cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2cda:	1b9a      	subs	r2, r3, r6
    2cdc:	f040 82cf 	bne.w	327e <_dtoa_r+0xc56>
    2ce0:	2101      	movs	r1, #1
    2ce2:	4650      	mov	r0, sl
    2ce4:	f014 f990 	bl	17008 <__i2b>
    2ce8:	f1b9 0f00 	cmp.w	r9, #0
    2cec:	4680      	mov	r8, r0
    2cee:	f300 80ae 	bgt.w	2e4e <_dtoa_r+0x826>
    2cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2cf4:	2b01      	cmp	r3, #1
    2cf6:	f340 817f 	ble.w	2ff8 <_dtoa_r+0x9d0>
    2cfa:	2600      	movs	r6, #0
    2cfc:	2001      	movs	r0, #1
    2cfe:	f1b9 0f00 	cmp.w	r9, #0
    2d02:	f040 80af 	bne.w	2e64 <_dtoa_r+0x83c>
    2d06:	9a04      	ldr	r2, [sp, #16]
    2d08:	4410      	add	r0, r2
    2d0a:	f010 001f 	ands.w	r0, r0, #31
    2d0e:	f000 808e 	beq.w	2e2e <_dtoa_r+0x806>
    2d12:	f1c0 0320 	rsb	r3, r0, #32
    2d16:	2b04      	cmp	r3, #4
    2d18:	f340 83ba 	ble.w	3490 <_dtoa_r+0xe68>
    2d1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2d1e:	f1c0 001c 	rsb	r0, r0, #28
    2d22:	4403      	add	r3, r0
    2d24:	4402      	add	r2, r0
    2d26:	930a      	str	r3, [sp, #40]	; 0x28
    2d28:	4405      	add	r5, r0
    2d2a:	9204      	str	r2, [sp, #16]
    2d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2d2e:	2b00      	cmp	r3, #0
    2d30:	dd05      	ble.n	2d3e <_dtoa_r+0x716>
    2d32:	4659      	mov	r1, fp
    2d34:	461a      	mov	r2, r3
    2d36:	4650      	mov	r0, sl
    2d38:	f014 faa2 	bl	17280 <__lshift>
    2d3c:	4683      	mov	fp, r0
    2d3e:	9b04      	ldr	r3, [sp, #16]
    2d40:	2b00      	cmp	r3, #0
    2d42:	dd05      	ble.n	2d50 <_dtoa_r+0x728>
    2d44:	4641      	mov	r1, r8
    2d46:	461a      	mov	r2, r3
    2d48:	4650      	mov	r0, sl
    2d4a:	f014 fa99 	bl	17280 <__lshift>
    2d4e:	4680      	mov	r8, r0
    2d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2d52:	2b00      	cmp	r3, #0
    2d54:	f040 812f 	bne.w	2fb6 <_dtoa_r+0x98e>
    2d58:	9b07      	ldr	r3, [sp, #28]
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	f340 8116 	ble.w	2f8c <_dtoa_r+0x964>
    2d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2d62:	2b00      	cmp	r3, #0
    2d64:	f040 8099 	bne.w	2e9a <_dtoa_r+0x872>
    2d68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2d6a:	3301      	adds	r3, #1
    2d6c:	9302      	str	r3, [sp, #8]
    2d6e:	9e06      	ldr	r6, [sp, #24]
    2d70:	9f07      	ldr	r7, [sp, #28]
    2d72:	2501      	movs	r5, #1
    2d74:	e007      	b.n	2d86 <_dtoa_r+0x75e>
    2d76:	4659      	mov	r1, fp
    2d78:	2300      	movs	r3, #0
    2d7a:	220a      	movs	r2, #10
    2d7c:	4650      	mov	r0, sl
    2d7e:	f014 f8a5 	bl	16ecc <__multadd>
    2d82:	3501      	adds	r5, #1
    2d84:	4683      	mov	fp, r0
    2d86:	4641      	mov	r1, r8
    2d88:	4658      	mov	r0, fp
    2d8a:	f013 fcc1 	bl	16710 <quorem>
    2d8e:	42bd      	cmp	r5, r7
    2d90:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2d94:	f806 3b01 	strb.w	r3, [r6], #1
    2d98:	dbed      	blt.n	2d76 <_dtoa_r+0x74e>
    2d9a:	9a07      	ldr	r2, [sp, #28]
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	bfc8      	it	gt
    2da0:	4615      	movgt	r5, r2
    2da2:	9a06      	ldr	r2, [sp, #24]
    2da4:	bfd8      	it	le
    2da6:	2501      	movle	r5, #1
    2da8:	4415      	add	r5, r2
    2daa:	2200      	movs	r2, #0
    2dac:	9204      	str	r2, [sp, #16]
    2dae:	4659      	mov	r1, fp
    2db0:	2201      	movs	r2, #1
    2db2:	4650      	mov	r0, sl
    2db4:	9307      	str	r3, [sp, #28]
    2db6:	f014 fa63 	bl	17280 <__lshift>
    2dba:	4641      	mov	r1, r8
    2dbc:	4683      	mov	fp, r0
    2dbe:	f014 fad7 	bl	17370 <__mcmp>
    2dc2:	2800      	cmp	r0, #0
    2dc4:	f340 8191 	ble.w	30ea <_dtoa_r+0xac2>
    2dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    2dcc:	9a06      	ldr	r2, [sp, #24]
    2dce:	3d01      	subs	r5, #1
    2dd0:	e004      	b.n	2ddc <_dtoa_r+0x7b4>
    2dd2:	42aa      	cmp	r2, r5
    2dd4:	f000 8194 	beq.w	3100 <_dtoa_r+0xad8>
    2dd8:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
    2ddc:	2b39      	cmp	r3, #57	; 0x39
    2dde:	f105 0701 	add.w	r7, r5, #1
    2de2:	d0f6      	beq.n	2dd2 <_dtoa_r+0x7aa>
    2de4:	3301      	adds	r3, #1
    2de6:	702b      	strb	r3, [r5, #0]
    2de8:	4641      	mov	r1, r8
    2dea:	4650      	mov	r0, sl
    2dec:	f014 f864 	bl	16eb8 <_Bfree>
    2df0:	b15c      	cbz	r4, 2e0a <_dtoa_r+0x7e2>
    2df2:	9b04      	ldr	r3, [sp, #16]
    2df4:	b12b      	cbz	r3, 2e02 <_dtoa_r+0x7da>
    2df6:	42a3      	cmp	r3, r4
    2df8:	d003      	beq.n	2e02 <_dtoa_r+0x7da>
    2dfa:	4619      	mov	r1, r3
    2dfc:	4650      	mov	r0, sl
    2dfe:	f014 f85b 	bl	16eb8 <_Bfree>
    2e02:	4621      	mov	r1, r4
    2e04:	4650      	mov	r0, sl
    2e06:	f014 f857 	bl	16eb8 <_Bfree>
    2e0a:	4659      	mov	r1, fp
    2e0c:	4650      	mov	r0, sl
    2e0e:	f014 f853 	bl	16eb8 <_Bfree>
    2e12:	2300      	movs	r3, #0
    2e14:	703b      	strb	r3, [r7, #0]
    2e16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2e18:	9a02      	ldr	r2, [sp, #8]
    2e1a:	601a      	str	r2, [r3, #0]
    2e1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    2e1e:	2b00      	cmp	r3, #0
    2e20:	f43f ac3e 	beq.w	26a0 <_dtoa_r+0x78>
    2e24:	9806      	ldr	r0, [sp, #24]
    2e26:	601f      	str	r7, [r3, #0]
    2e28:	b01d      	add	sp, #116	; 0x74
    2e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e2e:	201c      	movs	r0, #28
    2e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2e32:	4403      	add	r3, r0
    2e34:	930a      	str	r3, [sp, #40]	; 0x28
    2e36:	9b04      	ldr	r3, [sp, #16]
    2e38:	4403      	add	r3, r0
    2e3a:	4405      	add	r5, r0
    2e3c:	9304      	str	r3, [sp, #16]
    2e3e:	e775      	b.n	2d2c <_dtoa_r+0x704>
    2e40:	2401      	movs	r4, #1
    2e42:	e4b7      	b.n	27b4 <_dtoa_r+0x18c>
    2e44:	f1c3 0320 	rsb	r3, r3, #32
    2e48:	fa06 f003 	lsl.w	r0, r6, r3
    2e4c:	e44c      	b.n	26e8 <_dtoa_r+0xc0>
    2e4e:	4601      	mov	r1, r0
    2e50:	464a      	mov	r2, r9
    2e52:	4650      	mov	r0, sl
    2e54:	f014 f9b4 	bl	171c0 <__pow5mult>
    2e58:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2e5a:	2b01      	cmp	r3, #1
    2e5c:	4680      	mov	r8, r0
    2e5e:	f340 819e 	ble.w	319e <_dtoa_r+0xb76>
    2e62:	2600      	movs	r6, #0
    2e64:	f8d8 3010 	ldr.w	r3, [r8, #16]
    2e68:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    2e6c:	6918      	ldr	r0, [r3, #16]
    2e6e:	f014 f87d 	bl	16f6c <__hi0bits>
    2e72:	f1c0 0020 	rsb	r0, r0, #32
    2e76:	e746      	b.n	2d06 <_dtoa_r+0x6de>
    2e78:	40240000 	.word	0x40240000
    2e7c:	0001ead8 	.word	0x0001ead8
    2e80:	4621      	mov	r1, r4
    2e82:	2300      	movs	r3, #0
    2e84:	220a      	movs	r2, #10
    2e86:	4650      	mov	r0, sl
    2e88:	f014 f820 	bl	16ecc <__multadd>
    2e8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2e8e:	2b00      	cmp	r3, #0
    2e90:	4604      	mov	r4, r0
    2e92:	f340 82d6 	ble.w	3442 <_dtoa_r+0xe1a>
    2e96:	970b      	str	r7, [sp, #44]	; 0x2c
    2e98:	9307      	str	r3, [sp, #28]
    2e9a:	2d00      	cmp	r5, #0
    2e9c:	f300 810c 	bgt.w	30b8 <_dtoa_r+0xa90>
    2ea0:	2e00      	cmp	r6, #0
    2ea2:	f040 81d5 	bne.w	3250 <_dtoa_r+0xc28>
    2ea6:	4626      	mov	r6, r4
    2ea8:	9b02      	ldr	r3, [sp, #8]
    2eaa:	f8dd 9018 	ldr.w	r9, [sp, #24]
    2eae:	9907      	ldr	r1, [sp, #28]
    2eb0:	f003 0201 	and.w	r2, r3, #1
    2eb4:	f109 33ff 	add.w	r3, r9, #4294967295
    2eb8:	4419      	add	r1, r3
    2eba:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2ebc:	920c      	str	r2, [sp, #48]	; 0x30
    2ebe:	4313      	orrs	r3, r2
    2ec0:	910a      	str	r1, [sp, #40]	; 0x28
    2ec2:	9308      	str	r3, [sp, #32]
    2ec4:	4641      	mov	r1, r8
    2ec6:	4658      	mov	r0, fp
    2ec8:	f013 fc22 	bl	16710 <quorem>
    2ecc:	4621      	mov	r1, r4
    2ece:	9002      	str	r0, [sp, #8]
    2ed0:	4658      	mov	r0, fp
    2ed2:	f014 fa4d 	bl	17370 <__mcmp>
    2ed6:	4632      	mov	r2, r6
    2ed8:	4607      	mov	r7, r0
    2eda:	4641      	mov	r1, r8
    2edc:	4650      	mov	r0, sl
    2ede:	f014 fa67 	bl	173b0 <__mdiff>
    2ee2:	9b02      	ldr	r3, [sp, #8]
    2ee4:	68c2      	ldr	r2, [r0, #12]
    2ee6:	4605      	mov	r5, r0
    2ee8:	3330      	adds	r3, #48	; 0x30
    2eea:	2a00      	cmp	r2, #0
    2eec:	d140      	bne.n	2f70 <_dtoa_r+0x948>
    2eee:	4601      	mov	r1, r0
    2ef0:	4658      	mov	r0, fp
    2ef2:	9307      	str	r3, [sp, #28]
    2ef4:	f014 fa3c 	bl	17370 <__mcmp>
    2ef8:	4629      	mov	r1, r5
    2efa:	9004      	str	r0, [sp, #16]
    2efc:	4650      	mov	r0, sl
    2efe:	f013 ffdb 	bl	16eb8 <_Bfree>
    2f02:	9a04      	ldr	r2, [sp, #16]
    2f04:	9b07      	ldr	r3, [sp, #28]
    2f06:	b91a      	cbnz	r2, 2f10 <_dtoa_r+0x8e8>
    2f08:	9908      	ldr	r1, [sp, #32]
    2f0a:	2900      	cmp	r1, #0
    2f0c:	f000 8286 	beq.w	341c <_dtoa_r+0xdf4>
    2f10:	f109 0101 	add.w	r1, r9, #1
    2f14:	2f00      	cmp	r7, #0
    2f16:	460d      	mov	r5, r1
    2f18:	f2c0 8159 	blt.w	31ce <_dtoa_r+0xba6>
    2f1c:	9826      	ldr	r0, [sp, #152]	; 0x98
    2f1e:	4307      	orrs	r7, r0
    2f20:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f22:	4338      	orrs	r0, r7
    2f24:	f000 8153 	beq.w	31ce <_dtoa_r+0xba6>
    2f28:	2a00      	cmp	r2, #0
    2f2a:	f300 81b2 	bgt.w	3292 <_dtoa_r+0xc6a>
    2f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f30:	f889 3000 	strb.w	r3, [r9]
    2f34:	4591      	cmp	r9, r2
    2f36:	f000 81b2 	beq.w	329e <_dtoa_r+0xc76>
    2f3a:	4659      	mov	r1, fp
    2f3c:	2300      	movs	r3, #0
    2f3e:	220a      	movs	r2, #10
    2f40:	4650      	mov	r0, sl
    2f42:	f013 ffc3 	bl	16ecc <__multadd>
    2f46:	42b4      	cmp	r4, r6
    2f48:	4683      	mov	fp, r0
    2f4a:	4621      	mov	r1, r4
    2f4c:	f04f 0300 	mov.w	r3, #0
    2f50:	f04f 020a 	mov.w	r2, #10
    2f54:	4650      	mov	r0, sl
    2f56:	d013      	beq.n	2f80 <_dtoa_r+0x958>
    2f58:	f013 ffb8 	bl	16ecc <__multadd>
    2f5c:	4631      	mov	r1, r6
    2f5e:	4604      	mov	r4, r0
    2f60:	2300      	movs	r3, #0
    2f62:	220a      	movs	r2, #10
    2f64:	4650      	mov	r0, sl
    2f66:	f013 ffb1 	bl	16ecc <__multadd>
    2f6a:	46a9      	mov	r9, r5
    2f6c:	4606      	mov	r6, r0
    2f6e:	e7a9      	b.n	2ec4 <_dtoa_r+0x89c>
    2f70:	4601      	mov	r1, r0
    2f72:	4650      	mov	r0, sl
    2f74:	9304      	str	r3, [sp, #16]
    2f76:	f013 ff9f 	bl	16eb8 <_Bfree>
    2f7a:	9b04      	ldr	r3, [sp, #16]
    2f7c:	2201      	movs	r2, #1
    2f7e:	e7c7      	b.n	2f10 <_dtoa_r+0x8e8>
    2f80:	f013 ffa4 	bl	16ecc <__multadd>
    2f84:	46a9      	mov	r9, r5
    2f86:	4604      	mov	r4, r0
    2f88:	4606      	mov	r6, r0
    2f8a:	e79b      	b.n	2ec4 <_dtoa_r+0x89c>
    2f8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    2f8e:	2b02      	cmp	r3, #2
    2f90:	dc6f      	bgt.n	3072 <_dtoa_r+0xa4a>
    2f92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2f94:	2b00      	cmp	r3, #0
    2f96:	d180      	bne.n	2e9a <_dtoa_r+0x872>
    2f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f9a:	4641      	mov	r1, r8
    2f9c:	3301      	adds	r3, #1
    2f9e:	4658      	mov	r0, fp
    2fa0:	9302      	str	r3, [sp, #8]
    2fa2:	f013 fbb5 	bl	16710 <quorem>
    2fa6:	9d06      	ldr	r5, [sp, #24]
    2fa8:	f100 0330 	add.w	r3, r0, #48	; 0x30
    2fac:	2200      	movs	r2, #0
    2fae:	f805 3b01 	strb.w	r3, [r5], #1
    2fb2:	9204      	str	r2, [sp, #16]
    2fb4:	e6fb      	b.n	2dae <_dtoa_r+0x786>
    2fb6:	4641      	mov	r1, r8
    2fb8:	4658      	mov	r0, fp
    2fba:	f014 f9d9 	bl	17370 <__mcmp>
    2fbe:	2800      	cmp	r0, #0
    2fc0:	f6bf aeca 	bge.w	2d58 <_dtoa_r+0x730>
    2fc4:	4659      	mov	r1, fp
    2fc6:	2300      	movs	r3, #0
    2fc8:	220a      	movs	r2, #10
    2fca:	4650      	mov	r0, sl
    2fcc:	f013 ff7e 	bl	16ecc <__multadd>
    2fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2fd2:	1e5f      	subs	r7, r3, #1
    2fd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2fd6:	4683      	mov	fp, r0
    2fd8:	2b00      	cmp	r3, #0
    2fda:	f47f af51 	bne.w	2e80 <_dtoa_r+0x858>
    2fde:	9b16      	ldr	r3, [sp, #88]	; 0x58
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	f340 8226 	ble.w	3432 <_dtoa_r+0xe0a>
    2fe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2fe8:	9202      	str	r2, [sp, #8]
    2fea:	9307      	str	r3, [sp, #28]
    2fec:	e6bf      	b.n	2d6e <_dtoa_r+0x746>
    2fee:	4baf      	ldr	r3, [pc, #700]	; (32ac <_dtoa_r+0xc84>)
    2ff0:	9306      	str	r3, [sp, #24]
    2ff2:	3303      	adds	r3, #3
    2ff4:	f7ff bbf9 	b.w	27ea <_dtoa_r+0x1c2>
    2ff8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    2ffc:	2900      	cmp	r1, #0
    2ffe:	f47f ae7c 	bne.w	2cfa <_dtoa_r+0x6d2>
    3002:	f3c2 0313 	ubfx	r3, r2, #0, #20
    3006:	2b00      	cmp	r3, #0
    3008:	f000 80d4 	beq.w	31b4 <_dtoa_r+0xb8c>
    300c:	9e02      	ldr	r6, [sp, #8]
    300e:	e675      	b.n	2cfc <_dtoa_r+0x6d4>
    3010:	2301      	movs	r3, #1
    3012:	930c      	str	r3, [sp, #48]	; 0x30
    3014:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    3016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3018:	4413      	add	r3, r2
    301a:	9316      	str	r3, [sp, #88]	; 0x58
    301c:	3301      	adds	r3, #1
    301e:	2b01      	cmp	r3, #1
    3020:	461d      	mov	r5, r3
    3022:	9307      	str	r3, [sp, #28]
    3024:	bfb8      	it	lt
    3026:	2501      	movlt	r5, #1
    3028:	2100      	movs	r1, #0
    302a:	2d17      	cmp	r5, #23
    302c:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
    3030:	f77f ac2b 	ble.w	288a <_dtoa_r+0x262>
    3034:	2201      	movs	r2, #1
    3036:	2304      	movs	r3, #4
    3038:	005b      	lsls	r3, r3, #1
    303a:	f103 0014 	add.w	r0, r3, #20
    303e:	42a8      	cmp	r0, r5
    3040:	4611      	mov	r1, r2
    3042:	f102 0201 	add.w	r2, r2, #1
    3046:	d9f7      	bls.n	3038 <_dtoa_r+0xa10>
    3048:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
    304c:	e41d      	b.n	288a <_dtoa_r+0x262>
    304e:	2301      	movs	r3, #1
    3050:	930c      	str	r3, [sp, #48]	; 0x30
    3052:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    3054:	2b00      	cmp	r3, #0
    3056:	dd43      	ble.n	30e0 <_dtoa_r+0xab8>
    3058:	9316      	str	r3, [sp, #88]	; 0x58
    305a:	9307      	str	r3, [sp, #28]
    305c:	461d      	mov	r5, r3
    305e:	e7e3      	b.n	3028 <_dtoa_r+0xa00>
    3060:	2300      	movs	r3, #0
    3062:	930c      	str	r3, [sp, #48]	; 0x30
    3064:	e7d6      	b.n	3014 <_dtoa_r+0x9ec>
    3066:	2300      	movs	r3, #0
    3068:	930c      	str	r3, [sp, #48]	; 0x30
    306a:	e7f2      	b.n	3052 <_dtoa_r+0xa2a>
    306c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    306e:	970b      	str	r7, [sp, #44]	; 0x2c
    3070:	9307      	str	r3, [sp, #28]
    3072:	9b07      	ldr	r3, [sp, #28]
    3074:	2b00      	cmp	r3, #0
    3076:	f47f ad5a 	bne.w	2b2e <_dtoa_r+0x506>
    307a:	4641      	mov	r1, r8
    307c:	2205      	movs	r2, #5
    307e:	4650      	mov	r0, sl
    3080:	f013 ff24 	bl	16ecc <__multadd>
    3084:	4601      	mov	r1, r0
    3086:	4680      	mov	r8, r0
    3088:	4658      	mov	r0, fp
    308a:	f014 f971 	bl	17370 <__mcmp>
    308e:	2800      	cmp	r0, #0
    3090:	f77f ad4d 	ble.w	2b2e <_dtoa_r+0x506>
    3094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3096:	9f06      	ldr	r7, [sp, #24]
    3098:	f103 0901 	add.w	r9, r3, #1
    309c:	2331      	movs	r3, #49	; 0x31
    309e:	f807 3b01 	strb.w	r3, [r7], #1
    30a2:	f109 0301 	add.w	r3, r9, #1
    30a6:	4641      	mov	r1, r8
    30a8:	4650      	mov	r0, sl
    30aa:	9302      	str	r3, [sp, #8]
    30ac:	f013 ff04 	bl	16eb8 <_Bfree>
    30b0:	2c00      	cmp	r4, #0
    30b2:	f47f aea6 	bne.w	2e02 <_dtoa_r+0x7da>
    30b6:	e6a8      	b.n	2e0a <_dtoa_r+0x7e2>
    30b8:	4621      	mov	r1, r4
    30ba:	462a      	mov	r2, r5
    30bc:	4650      	mov	r0, sl
    30be:	f014 f8df 	bl	17280 <__lshift>
    30c2:	4604      	mov	r4, r0
    30c4:	e6ec      	b.n	2ea0 <_dtoa_r+0x878>
    30c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    30c8:	960d      	str	r6, [sp, #52]	; 0x34
    30ca:	1af3      	subs	r3, r6, r3
    30cc:	4499      	add	r9, r3
    30ce:	2600      	movs	r6, #0
    30d0:	e5a8      	b.n	2c24 <_dtoa_r+0x5fc>
    30d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    30d6:	f04f 0802 	mov.w	r8, #2
    30da:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    30de:	e403      	b.n	28e8 <_dtoa_r+0x2c0>
    30e0:	2301      	movs	r3, #1
    30e2:	9327      	str	r3, [sp, #156]	; 0x9c
    30e4:	9307      	str	r3, [sp, #28]
    30e6:	f7ff bbcb 	b.w	2880 <_dtoa_r+0x258>
    30ea:	d103      	bne.n	30f4 <_dtoa_r+0xacc>
    30ec:	9b07      	ldr	r3, [sp, #28]
    30ee:	07db      	lsls	r3, r3, #31
    30f0:	f53f ae6a 	bmi.w	2dc8 <_dtoa_r+0x7a0>
    30f4:	462f      	mov	r7, r5
    30f6:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
    30fa:	2b30      	cmp	r3, #48	; 0x30
    30fc:	d0fa      	beq.n	30f4 <_dtoa_r+0xacc>
    30fe:	e673      	b.n	2de8 <_dtoa_r+0x7c0>
    3100:	9b02      	ldr	r3, [sp, #8]
    3102:	9a06      	ldr	r2, [sp, #24]
    3104:	3301      	adds	r3, #1
    3106:	9302      	str	r3, [sp, #8]
    3108:	2331      	movs	r3, #49	; 0x31
    310a:	7013      	strb	r3, [r2, #0]
    310c:	e66c      	b.n	2de8 <_dtoa_r+0x7c0>
    310e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    3110:	2a00      	cmp	r2, #0
    3112:	f000 8122 	beq.w	335a <_dtoa_r+0xd32>
    3116:	f203 4333 	addw	r3, r3, #1075	; 0x433
    311a:	9a04      	ldr	r2, [sp, #16]
    311c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    311e:	441a      	add	r2, r3
    3120:	9204      	str	r2, [sp, #16]
    3122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3124:	4615      	mov	r5, r2
    3126:	441a      	add	r2, r3
    3128:	920a      	str	r2, [sp, #40]	; 0x28
    312a:	e586      	b.n	2c3a <_dtoa_r+0x612>
    312c:	f04f 0800 	mov.w	r8, #0
    3130:	4644      	mov	r4, r8
    3132:	e4fc      	b.n	2b2e <_dtoa_r+0x506>
    3134:	4659      	mov	r1, fp
    3136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3138:	4650      	mov	r0, sl
    313a:	f014 f841 	bl	171c0 <__pow5mult>
    313e:	4683      	mov	fp, r0
    3140:	e5ce      	b.n	2ce0 <_dtoa_r+0x6b8>
    3142:	900e      	str	r0, [sp, #56]	; 0x38
    3144:	e585      	b.n	2c52 <_dtoa_r+0x62a>
    3146:	f000 8133 	beq.w	33b0 <_dtoa_r+0xd88>
    314a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    314c:	4b58      	ldr	r3, [pc, #352]	; (32b0 <_dtoa_r+0xc88>)
    314e:	4254      	negs	r4, r2
    3150:	f004 020f 	and.w	r2, r4, #15
    3154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3158:	e9d3 2300 	ldrd	r2, r3, [r3]
    315c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    3160:	f7fd fbba 	bl	8d8 <__aeabi_dmul>
    3164:	1124      	asrs	r4, r4, #4
    3166:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    316a:	f000 8172 	beq.w	3452 <_dtoa_r+0xe2a>
    316e:	4d51      	ldr	r5, [pc, #324]	; (32b4 <_dtoa_r+0xc8c>)
    3170:	2300      	movs	r3, #0
    3172:	f04f 0802 	mov.w	r8, #2
    3176:	07e6      	lsls	r6, r4, #31
    3178:	d506      	bpl.n	3188 <_dtoa_r+0xb60>
    317a:	e9d5 2300 	ldrd	r2, r3, [r5]
    317e:	f7fd fbab 	bl	8d8 <__aeabi_dmul>
    3182:	f108 0801 	add.w	r8, r8, #1
    3186:	2301      	movs	r3, #1
    3188:	1064      	asrs	r4, r4, #1
    318a:	f105 0508 	add.w	r5, r5, #8
    318e:	d1f2      	bne.n	3176 <_dtoa_r+0xb4e>
    3190:	2b00      	cmp	r3, #0
    3192:	f43f abc3 	beq.w	291c <_dtoa_r+0x2f4>
    3196:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    319a:	f7ff bbbf 	b.w	291c <_dtoa_r+0x2f4>
    319e:	9b02      	ldr	r3, [sp, #8]
    31a0:	2b00      	cmp	r3, #0
    31a2:	f47f ae5e 	bne.w	2e62 <_dtoa_r+0x83a>
    31a6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
    31aa:	f3c2 0313 	ubfx	r3, r2, #0, #20
    31ae:	2b00      	cmp	r3, #0
    31b0:	f47f ae57 	bne.w	2e62 <_dtoa_r+0x83a>
    31b4:	4e40      	ldr	r6, [pc, #256]	; (32b8 <_dtoa_r+0xc90>)
    31b6:	4016      	ands	r6, r2
    31b8:	2e00      	cmp	r6, #0
    31ba:	f43f ad9f 	beq.w	2cfc <_dtoa_r+0x6d4>
    31be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    31c0:	3301      	adds	r3, #1
    31c2:	930a      	str	r3, [sp, #40]	; 0x28
    31c4:	9b04      	ldr	r3, [sp, #16]
    31c6:	3301      	adds	r3, #1
    31c8:	9304      	str	r3, [sp, #16]
    31ca:	2601      	movs	r6, #1
    31cc:	e596      	b.n	2cfc <_dtoa_r+0x6d4>
    31ce:	2a00      	cmp	r2, #0
    31d0:	460f      	mov	r7, r1
    31d2:	dd12      	ble.n	31fa <_dtoa_r+0xbd2>
    31d4:	4659      	mov	r1, fp
    31d6:	2201      	movs	r2, #1
    31d8:	4650      	mov	r0, sl
    31da:	9304      	str	r3, [sp, #16]
    31dc:	f014 f850 	bl	17280 <__lshift>
    31e0:	4641      	mov	r1, r8
    31e2:	4683      	mov	fp, r0
    31e4:	f014 f8c4 	bl	17370 <__mcmp>
    31e8:	2800      	cmp	r0, #0
    31ea:	9b04      	ldr	r3, [sp, #16]
    31ec:	f340 8100 	ble.w	33f0 <_dtoa_r+0xdc8>
    31f0:	2b39      	cmp	r3, #57	; 0x39
    31f2:	f000 80eb 	beq.w	33cc <_dtoa_r+0xda4>
    31f6:	9b02      	ldr	r3, [sp, #8]
    31f8:	3331      	adds	r3, #49	; 0x31
    31fa:	f889 3000 	strb.w	r3, [r9]
    31fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3200:	9404      	str	r4, [sp, #16]
    3202:	3301      	adds	r3, #1
    3204:	9302      	str	r3, [sp, #8]
    3206:	4634      	mov	r4, r6
    3208:	e5ee      	b.n	2de8 <_dtoa_r+0x7c0>
    320a:	465f      	mov	r7, fp
    320c:	f8dd a010 	ldr.w	sl, [sp, #16]
    3210:	f8dd b008 	ldr.w	fp, [sp, #8]
    3214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3216:	3301      	adds	r3, #1
    3218:	9302      	str	r3, [sp, #8]
    321a:	4602      	mov	r2, r0
    321c:	461c      	mov	r4, r3
    321e:	460b      	mov	r3, r1
    3220:	f7fd f9a4 	bl	56c <__adddf3>
    3224:	4602      	mov	r2, r0
    3226:	460b      	mov	r3, r1
    3228:	e9cd 2304 	strd	r2, r3, [sp, #16]
    322c:	4642      	mov	r2, r8
    322e:	464b      	mov	r3, r9
    3230:	f7fe f85a 	bl	12e8 <__aeabi_dcmpgt>
    3234:	b940      	cbnz	r0, 3248 <_dtoa_r+0xc20>
    3236:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    323a:	4642      	mov	r2, r8
    323c:	464b      	mov	r3, r9
    323e:	f7fe f82b 	bl	1298 <__aeabi_dcmpeq>
    3242:	b118      	cbz	r0, 324c <_dtoa_r+0xc24>
    3244:	07f9      	lsls	r1, r7, #31
    3246:	d501      	bpl.n	324c <_dtoa_r+0xc24>
    3248:	9a06      	ldr	r2, [sp, #24]
    324a:	e417      	b.n	2a7c <_dtoa_r+0x454>
    324c:	4637      	mov	r7, r6
    324e:	e5dc      	b.n	2e0a <_dtoa_r+0x7e2>
    3250:	6861      	ldr	r1, [r4, #4]
    3252:	4650      	mov	r0, sl
    3254:	f013 fe0a 	bl	16e6c <_Balloc>
    3258:	4605      	mov	r5, r0
    325a:	2800      	cmp	r0, #0
    325c:	f000 810d 	beq.w	347a <_dtoa_r+0xe52>
    3260:	6923      	ldr	r3, [r4, #16]
    3262:	3302      	adds	r3, #2
    3264:	009a      	lsls	r2, r3, #2
    3266:	f104 010c 	add.w	r1, r4, #12
    326a:	300c      	adds	r0, #12
    326c:	f7fe f846 	bl	12fc <memcpy>
    3270:	4629      	mov	r1, r5
    3272:	2201      	movs	r2, #1
    3274:	4650      	mov	r0, sl
    3276:	f014 f803 	bl	17280 <__lshift>
    327a:	4606      	mov	r6, r0
    327c:	e614      	b.n	2ea8 <_dtoa_r+0x880>
    327e:	4659      	mov	r1, fp
    3280:	4650      	mov	r0, sl
    3282:	f013 ff9d 	bl	171c0 <__pow5mult>
    3286:	4683      	mov	fp, r0
    3288:	e52a      	b.n	2ce0 <_dtoa_r+0x6b8>
    328a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    328c:	9a07      	ldr	r2, [sp, #28]
    328e:	1a9d      	subs	r5, r3, r2
    3290:	e4d3      	b.n	2c3a <_dtoa_r+0x612>
    3292:	2b39      	cmp	r3, #57	; 0x39
    3294:	460f      	mov	r7, r1
    3296:	f000 8099 	beq.w	33cc <_dtoa_r+0xda4>
    329a:	3301      	adds	r3, #1
    329c:	e7ad      	b.n	31fa <_dtoa_r+0xbd2>
    329e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    32a0:	9404      	str	r4, [sp, #16]
    32a2:	3201      	adds	r2, #1
    32a4:	9202      	str	r2, [sp, #8]
    32a6:	4634      	mov	r4, r6
    32a8:	e581      	b.n	2dae <_dtoa_r+0x786>
    32aa:	bf00      	nop
    32ac:	0001faf8 	.word	0x0001faf8
    32b0:	0001e720 	.word	0x0001e720
    32b4:	0001e6f8 	.word	0x0001e6f8
    32b8:	7ff00000 	.word	0x7ff00000
    32bc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    32c0:	f7fd fb0a 	bl	8d8 <__aeabi_dmul>
    32c4:	9b06      	ldr	r3, [sp, #24]
    32c6:	701e      	strb	r6, [r3, #0]
    32c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    32ca:	2b01      	cmp	r3, #1
    32cc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    32d0:	f000 80b5 	beq.w	343e <_dtoa_r+0xe16>
    32d4:	9e10      	ldr	r6, [sp, #64]	; 0x40
    32d6:	9b06      	ldr	r3, [sp, #24]
    32d8:	441e      	add	r6, r3
    32da:	4b76      	ldr	r3, [pc, #472]	; (34b4 <_dtoa_r+0xe8c>)
    32dc:	2200      	movs	r2, #0
    32de:	4620      	mov	r0, r4
    32e0:	4629      	mov	r1, r5
    32e2:	f7fd faf9 	bl	8d8 <__aeabi_dmul>
    32e6:	460d      	mov	r5, r1
    32e8:	4604      	mov	r4, r0
    32ea:	f7fe f8b7 	bl	145c <__aeabi_d2iz>
    32ee:	4680      	mov	r8, r0
    32f0:	f7fd fa88 	bl	804 <__aeabi_i2d>
    32f4:	f108 0830 	add.w	r8, r8, #48	; 0x30
    32f8:	4602      	mov	r2, r0
    32fa:	460b      	mov	r3, r1
    32fc:	4620      	mov	r0, r4
    32fe:	4629      	mov	r1, r5
    3300:	f7fd f932 	bl	568 <__aeabi_dsub>
    3304:	f807 8b01 	strb.w	r8, [r7], #1
    3308:	42b7      	cmp	r7, r6
    330a:	4604      	mov	r4, r0
    330c:	460d      	mov	r5, r1
    330e:	d1e4      	bne.n	32da <_dtoa_r+0xcb2>
    3310:	e9dd 7812 	ldrd	r7, r8, [sp, #72]	; 0x48
    3314:	4b68      	ldr	r3, [pc, #416]	; (34b8 <_dtoa_r+0xe90>)
    3316:	2200      	movs	r2, #0
    3318:	4638      	mov	r0, r7
    331a:	4641      	mov	r1, r8
    331c:	f7fd f926 	bl	56c <__adddf3>
    3320:	4622      	mov	r2, r4
    3322:	462b      	mov	r3, r5
    3324:	f7fd ffc2 	bl	12ac <__aeabi_dcmplt>
    3328:	2800      	cmp	r0, #0
    332a:	d15c      	bne.n	33e6 <_dtoa_r+0xdbe>
    332c:	463a      	mov	r2, r7
    332e:	4643      	mov	r3, r8
    3330:	4961      	ldr	r1, [pc, #388]	; (34b8 <_dtoa_r+0xe90>)
    3332:	2000      	movs	r0, #0
    3334:	f7fd f918 	bl	568 <__aeabi_dsub>
    3338:	4622      	mov	r2, r4
    333a:	462b      	mov	r3, r5
    333c:	f7fd ffd4 	bl	12e8 <__aeabi_dcmpgt>
    3340:	2800      	cmp	r0, #0
    3342:	f43f abcd 	beq.w	2ae0 <_dtoa_r+0x4b8>
    3346:	4637      	mov	r7, r6
    3348:	3e01      	subs	r6, #1
    334a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    334e:	2b30      	cmp	r3, #48	; 0x30
    3350:	d0f9      	beq.n	3346 <_dtoa_r+0xd1e>
    3352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3354:	3301      	adds	r3, #1
    3356:	9302      	str	r3, [sp, #8]
    3358:	e557      	b.n	2e0a <_dtoa_r+0x7e2>
    335a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    335c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    3360:	e6db      	b.n	311a <_dtoa_r+0xaf2>
    3362:	9b07      	ldr	r3, [sp, #28]
    3364:	2b00      	cmp	r3, #0
    3366:	f43f ab93 	beq.w	2a90 <_dtoa_r+0x468>
    336a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    336c:	2b00      	cmp	r3, #0
    336e:	f77f abb7 	ble.w	2ae0 <_dtoa_r+0x4b8>
    3372:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3374:	9310      	str	r3, [sp, #64]	; 0x40
    3376:	3a01      	subs	r2, #1
    3378:	4b4e      	ldr	r3, [pc, #312]	; (34b4 <_dtoa_r+0xe8c>)
    337a:	9217      	str	r2, [sp, #92]	; 0x5c
    337c:	4620      	mov	r0, r4
    337e:	2200      	movs	r2, #0
    3380:	4629      	mov	r1, r5
    3382:	f7fd faa9 	bl	8d8 <__aeabi_dmul>
    3386:	4604      	mov	r4, r0
    3388:	460d      	mov	r5, r1
    338a:	f108 0001 	add.w	r0, r8, #1
    338e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
    3392:	f7fd fa37 	bl	804 <__aeabi_i2d>
    3396:	4622      	mov	r2, r4
    3398:	462b      	mov	r3, r5
    339a:	f7fd fa9d 	bl	8d8 <__aeabi_dmul>
    339e:	4b47      	ldr	r3, [pc, #284]	; (34bc <_dtoa_r+0xe94>)
    33a0:	2200      	movs	r2, #0
    33a2:	f7fd f8e3 	bl	56c <__adddf3>
    33a6:	4606      	mov	r6, r0
    33a8:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
    33ac:	f7ff bad9 	b.w	2962 <_dtoa_r+0x33a>
    33b0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
    33b4:	f04f 0802 	mov.w	r8, #2
    33b8:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
    33bc:	f7ff baae 	b.w	291c <_dtoa_r+0x2f4>
    33c0:	3401      	adds	r4, #1
    33c2:	2331      	movs	r3, #49	; 0x31
    33c4:	f7ff bb61 	b.w	2a8a <_dtoa_r+0x462>
    33c8:	f109 0501 	add.w	r5, r9, #1
    33cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    33ce:	9404      	str	r4, [sp, #16]
    33d0:	3301      	adds	r3, #1
    33d2:	9302      	str	r3, [sp, #8]
    33d4:	2339      	movs	r3, #57	; 0x39
    33d6:	4634      	mov	r4, r6
    33d8:	f889 3000 	strb.w	r3, [r9]
    33dc:	e4f6      	b.n	2dcc <_dtoa_r+0x7a4>
    33de:	f04f 0800 	mov.w	r8, #0
    33e2:	4644      	mov	r4, r8
    33e4:	e656      	b.n	3094 <_dtoa_r+0xa6c>
    33e6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    33e8:	9a06      	ldr	r2, [sp, #24]
    33ea:	3401      	adds	r4, #1
    33ec:	f7ff bb46 	b.w	2a7c <_dtoa_r+0x454>
    33f0:	f47f af03 	bne.w	31fa <_dtoa_r+0xbd2>
    33f4:	07da      	lsls	r2, r3, #31
    33f6:	f57f af00 	bpl.w	31fa <_dtoa_r+0xbd2>
    33fa:	e6f9      	b.n	31f0 <_dtoa_r+0xbc8>
    33fc:	e9dd 3a17 	ldrd	r3, sl, [sp, #92]	; 0x5c
    3400:	3301      	adds	r3, #1
    3402:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    3406:	9302      	str	r3, [sp, #8]
    3408:	464f      	mov	r7, r9
    340a:	e4fe      	b.n	2e0a <_dtoa_r+0x7e2>
    340c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    3410:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
    3414:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
    3418:	f7ff bb62 	b.w	2ae0 <_dtoa_r+0x4b8>
    341c:	2b39      	cmp	r3, #57	; 0x39
    341e:	d0d3      	beq.n	33c8 <_dtoa_r+0xda0>
    3420:	2f00      	cmp	r7, #0
    3422:	bfc8      	it	gt
    3424:	9b02      	ldrgt	r3, [sp, #8]
    3426:	464f      	mov	r7, r9
    3428:	bfc8      	it	gt
    342a:	3331      	addgt	r3, #49	; 0x31
    342c:	f807 3b01 	strb.w	r3, [r7], #1
    3430:	e6e5      	b.n	31fe <_dtoa_r+0xbd6>
    3432:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3434:	2b02      	cmp	r3, #2
    3436:	f73f ae19 	bgt.w	306c <_dtoa_r+0xa44>
    343a:	970b      	str	r7, [sp, #44]	; 0x2c
    343c:	e5ac      	b.n	2f98 <_dtoa_r+0x970>
    343e:	463e      	mov	r6, r7
    3440:	e766      	b.n	3310 <_dtoa_r+0xce8>
    3442:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3444:	2b02      	cmp	r3, #2
    3446:	f73f ae11 	bgt.w	306c <_dtoa_r+0xa44>
    344a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    344c:	970b      	str	r7, [sp, #44]	; 0x2c
    344e:	9307      	str	r3, [sp, #28]
    3450:	e523      	b.n	2e9a <_dtoa_r+0x872>
    3452:	f04f 0802 	mov.w	r8, #2
    3456:	f7ff ba61 	b.w	291c <_dtoa_r+0x2f4>
    345a:	2400      	movs	r4, #0
    345c:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
    3460:	4621      	mov	r1, r4
    3462:	4650      	mov	r0, sl
    3464:	f013 fd02 	bl	16e6c <_Balloc>
    3468:	9006      	str	r0, [sp, #24]
    346a:	b9b0      	cbnz	r0, 349a <_dtoa_r+0xe72>
    346c:	4b14      	ldr	r3, [pc, #80]	; (34c0 <_dtoa_r+0xe98>)
    346e:	4815      	ldr	r0, [pc, #84]	; (34c4 <_dtoa_r+0xe9c>)
    3470:	2200      	movs	r2, #0
    3472:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3476:	f015 f851 	bl	1851c <__assert_func>
    347a:	4b11      	ldr	r3, [pc, #68]	; (34c0 <_dtoa_r+0xe98>)
    347c:	4811      	ldr	r0, [pc, #68]	; (34c4 <_dtoa_r+0xe9c>)
    347e:	462a      	mov	r2, r5
    3480:	f240 21ea 	movw	r1, #746	; 0x2ea
    3484:	f015 f84a 	bl	1851c <__assert_func>
    3488:	4b0f      	ldr	r3, [pc, #60]	; (34c8 <_dtoa_r+0xea0>)
    348a:	9306      	str	r3, [sp, #24]
    348c:	f7ff b908 	b.w	26a0 <_dtoa_r+0x78>
    3490:	f43f ac4c 	beq.w	2d2c <_dtoa_r+0x704>
    3494:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    3498:	e4ca      	b.n	2e30 <_dtoa_r+0x808>
    349a:	9b06      	ldr	r3, [sp, #24]
    349c:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
    34a0:	2201      	movs	r2, #1
    34a2:	f04f 33ff 	mov.w	r3, #4294967295
    34a6:	9427      	str	r4, [sp, #156]	; 0x9c
    34a8:	9316      	str	r3, [sp, #88]	; 0x58
    34aa:	920c      	str	r2, [sp, #48]	; 0x30
    34ac:	9307      	str	r3, [sp, #28]
    34ae:	f7ff bb17 	b.w	2ae0 <_dtoa_r+0x4b8>
    34b2:	bf00      	nop
    34b4:	40240000 	.word	0x40240000
    34b8:	3fe00000 	.word	0x3fe00000
    34bc:	401c0000 	.word	0x401c0000
    34c0:	0001fb08 	.word	0x0001fb08
    34c4:	0001fb1c 	.word	0x0001fb1c
    34c8:	0001fafc 	.word	0x0001fafc

000034cc <scan_init>:
	}
	// printk("success. CTE receive enabled.\n");
}

static int scan_init(void)
{
    34cc:	b508      	push	{r3, lr}
	// printk("Scan callbacks register...");
	bt_le_scan_cb_register(&scan_callbacks);
    34ce:	4804      	ldr	r0, [pc, #16]	; (34e0 <scan_init+0x14>)
    34d0:	f003 fade 	bl	6a90 <bt_le_scan_cb_register>
	// printk("success.\n");

	// printk("Periodic Advertising callbacks register...");
	bt_le_per_adv_sync_cb_register(&sync_callbacks);
    34d4:	4803      	ldr	r0, [pc, #12]	; (34e4 <scan_init+0x18>)
    34d6:	f003 fc0d 	bl	6cf4 <bt_le_per_adv_sync_cb_register>
	// printk("success.\n");

	return 0;
}
    34da:	2000      	movs	r0, #0
    34dc:	bd08      	pop	{r3, pc}
    34de:	bf00      	nop
    34e0:	20000378 	.word	0x20000378
    34e4:	20000384 	.word	0x20000384

000034e8 <cte_recv_cb>:
{
    34e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    34ec:	4689      	mov	r9, r1
    for(int i=0; i<report->sample_count; i++)
    34ee:	2400      	movs	r4, #0
    34f0:	e00f      	b.n	3512 <cte_recv_cb+0x2a>
				printf("%d%di; ", report->sample[i].i, report->sample[i].q );
    34f2:	f917 100a 	ldrsb.w	r1, [r7, sl]
    34f6:	481f      	ldr	r0, [pc, #124]	; (3574 <cte_recv_cb+0x8c>)
    34f8:	f011 fada 	bl	14ab0 <printf>
    34fc:	e008      	b.n	3510 <cte_recv_cb+0x28>
			if(((float)report->sample[i].q) >= 0.0 )
    34fe:	f998 2001 	ldrsb.w	r2, [r8, #1]
    3502:	2a00      	cmp	r2, #0
    3504:	db2b      	blt.n	355e <cte_recv_cb+0x76>
				printf("%d+%di", report->sample[i].i, report->sample[i].q );
    3506:	f917 100a 	ldrsb.w	r1, [r7, sl]
    350a:	481b      	ldr	r0, [pc, #108]	; (3578 <cte_recv_cb+0x90>)
    350c:	f011 fad0 	bl	14ab0 <printf>
    for(int i=0; i<report->sample_count; i++)
    3510:	3401      	adds	r4, #1
    3512:	f899 500a 	ldrb.w	r5, [r9, #10]
    3516:	42a5      	cmp	r5, r4
    3518:	dd27      	ble.n	356a <cte_recv_cb+0x82>
     	result = ((float)report->sample[i].q) / ((float)report->sample[i].i) ;
    351a:	f8d9 700c 	ldr.w	r7, [r9, #12]
    351e:	ea4f 0a44 	mov.w	sl, r4, lsl #1
    3522:	eb07 0844 	add.w	r8, r7, r4, lsl #1
    3526:	f998 0001 	ldrsb.w	r0, [r8, #1]
    352a:	f7fd fca1 	bl	e70 <__aeabi_i2f>
    352e:	4606      	mov	r6, r0
    3530:	f917 0014 	ldrsb.w	r0, [r7, r4, lsl #1]
    3534:	f7fd fc9c 	bl	e70 <__aeabi_i2f>
    3538:	4601      	mov	r1, r0
    353a:	4630      	mov	r0, r6
    353c:	f7fd fda0 	bl	1080 <__aeabi_fdiv>
    3540:	4b0e      	ldr	r3, [pc, #56]	; (357c <cte_recv_cb+0x94>)
    3542:	6018      	str	r0, [r3, #0]
		if(i<report->sample_count-1)
    3544:	3d01      	subs	r5, #1
    3546:	42a5      	cmp	r5, r4
    3548:	ddd9      	ble.n	34fe <cte_recv_cb+0x16>
			if(((float)report->sample[i].q) >= 0.0 )
    354a:	f998 2001 	ldrsb.w	r2, [r8, #1]
    354e:	2a00      	cmp	r2, #0
    3550:	dbcf      	blt.n	34f2 <cte_recv_cb+0xa>
				printf("%d+%di; ", report->sample[i].i, report->sample[i].q );
    3552:	f917 100a 	ldrsb.w	r1, [r7, sl]
    3556:	480a      	ldr	r0, [pc, #40]	; (3580 <cte_recv_cb+0x98>)
    3558:	f011 faaa 	bl	14ab0 <printf>
    355c:	e7d8      	b.n	3510 <cte_recv_cb+0x28>
				printf("%d%di", report->sample[i].i, report->sample[i].q );
    355e:	f917 100a 	ldrsb.w	r1, [r7, sl]
    3562:	4808      	ldr	r0, [pc, #32]	; (3584 <cte_recv_cb+0x9c>)
    3564:	f011 faa4 	bl	14ab0 <printf>
    3568:	e7d2      	b.n	3510 <cte_recv_cb+0x28>
	printf("\n");
    356a:	4807      	ldr	r0, [pc, #28]	; (3588 <cte_recv_cb+0xa0>)
    356c:	f011 faa0 	bl	14ab0 <printf>
}
    3570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3574:	0001e7f4 	.word	0x0001e7f4
    3578:	0001e7fc 	.word	0x0001e7fc
    357c:	200021d8 	.word	0x200021d8
    3580:	0001e7e8 	.word	0x0001e7e8
    3584:	0001e804 	.word	0x0001e804
    3588:	0001e87c 	.word	0x0001e87c

0000358c <scan_recv>:
{
    358c:	b5f0      	push	{r4, r5, r6, r7, lr}
    358e:	b09b      	sub	sp, #108	; 0x6c
    3590:	4605      	mov	r5, r0
    3592:	460c      	mov	r4, r1
	(void)memset(name, 0, sizeof(name));
    3594:	221e      	movs	r2, #30
    3596:	2100      	movs	r1, #0
    3598:	a80a      	add	r0, sp, #40	; 0x28
    359a:	f011 fa2b 	bl	149f4 <memset>
	bt_data_parse(buf, data_cb, name);
    359e:	aa0a      	add	r2, sp, #40	; 0x28
    35a0:	4931      	ldr	r1, [pc, #196]	; (3668 <scan_recv+0xdc>)
    35a2:	4620      	mov	r0, r4
    35a4:	f016 fafc 	bl	19ba0 <bt_data_parse>
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
    35a8:	682c      	ldr	r4, [r5, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    35aa:	7823      	ldrb	r3, [r4, #0]
    35ac:	2b03      	cmp	r3, #3
    35ae:	d83b      	bhi.n	3628 <scan_recv+0x9c>
    35b0:	e8df f003 	tbb	[pc, r3]
    35b4:	342e2402 	.word	0x342e2402
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    35b8:	4b2c      	ldr	r3, [pc, #176]	; (366c <scan_recv+0xe0>)
    35ba:	e893 0003 	ldmia.w	r3, {r0, r1}
    35be:	9007      	str	r0, [sp, #28]
    35c0:	f8ad 1020 	strh.w	r1, [sp, #32]
    35c4:	0c09      	lsrs	r1, r1, #16
    35c6:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    35ca:	79a3      	ldrb	r3, [r4, #6]
    35cc:	7962      	ldrb	r2, [r4, #5]
    35ce:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    35d0:	78e0      	ldrb	r0, [r4, #3]
    35d2:	78a6      	ldrb	r6, [r4, #2]
    35d4:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    35d6:	af07      	add	r7, sp, #28
    35d8:	9705      	str	r7, [sp, #20]
    35da:	9404      	str	r4, [sp, #16]
    35dc:	9603      	str	r6, [sp, #12]
    35de:	9002      	str	r0, [sp, #8]
    35e0:	9101      	str	r1, [sp, #4]
    35e2:	9200      	str	r2, [sp, #0]
    35e4:	4a22      	ldr	r2, [pc, #136]	; (3670 <scan_recv+0xe4>)
    35e6:	211e      	movs	r1, #30
    35e8:	a812      	add	r0, sp, #72	; 0x48
    35ea:	f015 fd67 	bl	190bc <snprintk>
	if (!per_adv_found && info->interval) {
    35ee:	4b21      	ldr	r3, [pc, #132]	; (3674 <scan_recv+0xe8>)
    35f0:	781b      	ldrb	r3, [r3, #0]
    35f2:	b90b      	cbnz	r3, 35f8 <scan_recv+0x6c>
    35f4:	896b      	ldrh	r3, [r5, #10]
    35f6:	b9eb      	cbnz	r3, 3634 <scan_recv+0xa8>
}
    35f8:	b01b      	add	sp, #108	; 0x6c
    35fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    35fc:	4b1e      	ldr	r3, [pc, #120]	; (3678 <scan_recv+0xec>)
    35fe:	e893 0003 	ldmia.w	r3, {r0, r1}
    3602:	9007      	str	r0, [sp, #28]
    3604:	f8ad 1020 	strh.w	r1, [sp, #32]
    3608:	0c09      	lsrs	r1, r1, #16
    360a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
    360e:	e7dc      	b.n	35ca <scan_recv+0x3e>
		strcpy(type, "public-id");
    3610:	4a1a      	ldr	r2, [pc, #104]	; (367c <scan_recv+0xf0>)
    3612:	ab07      	add	r3, sp, #28
    3614:	ca07      	ldmia	r2, {r0, r1, r2}
    3616:	c303      	stmia	r3!, {r0, r1}
    3618:	801a      	strh	r2, [r3, #0]
		break;
    361a:	e7d6      	b.n	35ca <scan_recv+0x3e>
		strcpy(type, "random-id");
    361c:	4a18      	ldr	r2, [pc, #96]	; (3680 <scan_recv+0xf4>)
    361e:	ab07      	add	r3, sp, #28
    3620:	ca07      	ldmia	r2, {r0, r1, r2}
    3622:	c303      	stmia	r3!, {r0, r1}
    3624:	801a      	strh	r2, [r3, #0]
		break;
    3626:	e7d0      	b.n	35ca <scan_recv+0x3e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3628:	4a16      	ldr	r2, [pc, #88]	; (3684 <scan_recv+0xf8>)
    362a:	210a      	movs	r1, #10
    362c:	a807      	add	r0, sp, #28
    362e:	f015 fd45 	bl	190bc <snprintk>
		break;
    3632:	e7ca      	b.n	35ca <scan_recv+0x3e>
	return interval * 5 / 4;
    3634:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3638:	109b      	asrs	r3, r3, #2
			adv_interval_to_ms(info->interval) * SYNC_CREATE_TIMEOUT_INTERVAL_NUM;
    363a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
		sync_create_timeout_ms =
    363e:	4a12      	ldr	r2, [pc, #72]	; (3688 <scan_recv+0xfc>)
    3640:	6013      	str	r3, [r2, #0]
		per_adv_found = true;
    3642:	4b0c      	ldr	r3, [pc, #48]	; (3674 <scan_recv+0xe8>)
    3644:	2201      	movs	r2, #1
    3646:	701a      	strb	r2, [r3, #0]
		per_sid = info->sid;
    3648:	792a      	ldrb	r2, [r5, #4]
    364a:	4b10      	ldr	r3, [pc, #64]	; (368c <scan_recv+0x100>)
    364c:	701a      	strb	r2, [r3, #0]
		bt_addr_le_copy(&per_addr, info->addr);
    364e:	682a      	ldr	r2, [r5, #0]
	memcpy(dst, src, sizeof(*dst));
    3650:	4b0f      	ldr	r3, [pc, #60]	; (3690 <scan_recv+0x104>)
    3652:	6810      	ldr	r0, [r2, #0]
    3654:	6018      	str	r0, [r3, #0]
    3656:	8891      	ldrh	r1, [r2, #4]
    3658:	7992      	ldrb	r2, [r2, #6]
    365a:	8099      	strh	r1, [r3, #4]
    365c:	719a      	strb	r2, [r3, #6]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    365e:	480d      	ldr	r0, [pc, #52]	; (3694 <scan_recv+0x108>)
    3660:	f00f fc54 	bl	12f0c <z_impl_k_sem_give>
}
    3664:	e7c8      	b.n	35f8 <scan_recv+0x6c>
    3666:	bf00      	nop
    3668:	00018f55 	.word	0x00018f55
    366c:	0001e80c 	.word	0x0001e80c
    3670:	0001e824 	.word	0x0001e824
    3674:	20009290 	.word	0x20009290
    3678:	0001e814 	.word	0x0001e814
    367c:	0001e848 	.word	0x0001e848
    3680:	0001e854 	.word	0x0001e854
    3684:	0001e81c 	.word	0x0001e81c
    3688:	200021e0 	.word	0x200021e0
    368c:	20009291 	.word	0x20009291
    3690:	200021d0 	.word	0x200021d0
    3694:	20000f10 	.word	0x20000f10

00003698 <scan_enable>:

static int scan_enable(void)
{
    3698:	b500      	push	{lr}
    369a:	b087      	sub	sp, #28
	struct bt_le_scan_param param = {
    369c:	2300      	movs	r3, #0
    369e:	9301      	str	r3, [sp, #4]
    36a0:	9302      	str	r3, [sp, #8]
    36a2:	9303      	str	r3, [sp, #12]
    36a4:	9304      	str	r3, [sp, #16]
    36a6:	9305      	str	r3, [sp, #20]
    36a8:	2301      	movs	r3, #1
    36aa:	f88d 3004 	strb.w	r3, [sp, #4]
    36ae:	9302      	str	r3, [sp, #8]
    36b0:	2360      	movs	r3, #96	; 0x60
    36b2:	f8ad 300c 	strh.w	r3, [sp, #12]
    36b6:	2330      	movs	r3, #48	; 0x30
    36b8:	f8ad 300e 	strh.w	r3, [sp, #14]
		.timeout = 0U,
	};

	int err;

	if (!scan_enabled) {
    36bc:	4b08      	ldr	r3, [pc, #32]	; (36e0 <scan_enable+0x48>)
    36be:	781b      	ldrb	r3, [r3, #0]
    36c0:	b11b      	cbz	r3, 36ca <scan_enable+0x32>
		}
		// printk("success\n");
		scan_enabled = true;
	}

	return 0;
    36c2:	2000      	movs	r0, #0
}
    36c4:	b007      	add	sp, #28
    36c6:	f85d fb04 	ldr.w	pc, [sp], #4
		err = bt_le_scan_start(&param, NULL);
    36ca:	2100      	movs	r1, #0
    36cc:	a801      	add	r0, sp, #4
    36ce:	f003 f8f7 	bl	68c0 <bt_le_scan_start>
		if (err) {
    36d2:	2800      	cmp	r0, #0
    36d4:	d1f6      	bne.n	36c4 <scan_enable+0x2c>
		scan_enabled = true;
    36d6:	4b02      	ldr	r3, [pc, #8]	; (36e0 <scan_enable+0x48>)
    36d8:	2201      	movs	r2, #1
    36da:	701a      	strb	r2, [r3, #0]
    36dc:	e7f2      	b.n	36c4 <scan_enable+0x2c>
    36de:	bf00      	nop
    36e0:	20009292 	.word	0x20009292

000036e4 <delete_sync>:
{
    36e4:	b508      	push	{r3, lr}
	err = bt_le_per_adv_sync_delete(sync);
    36e6:	4b02      	ldr	r3, [pc, #8]	; (36f0 <delete_sync+0xc>)
    36e8:	6818      	ldr	r0, [r3, #0]
    36ea:	f003 f9e3 	bl	6ab4 <bt_le_per_adv_sync_delete>
}
    36ee:	bd08      	pop	{r3, pc}
    36f0:	200021dc 	.word	0x200021dc

000036f4 <enable_cte_rx>:
{
    36f4:	b500      	push	{lr}
    36f6:	b083      	sub	sp, #12
	const struct bt_df_per_adv_sync_cte_rx_param cte_rx_params = {
    36f8:	4a06      	ldr	r2, [pc, #24]	; (3714 <enable_cte_rx+0x20>)
    36fa:	466b      	mov	r3, sp
    36fc:	e892 0003 	ldmia.w	r2, {r0, r1}
    3700:	e883 0003 	stmia.w	r3, {r0, r1}
	err = bt_df_per_adv_sync_cte_rx_enable(sync, &cte_rx_params);
    3704:	4619      	mov	r1, r3
    3706:	4b04      	ldr	r3, [pc, #16]	; (3718 <enable_cte_rx+0x24>)
    3708:	6818      	ldr	r0, [r3, #0]
    370a:	f016 fcd4 	bl	1a0b6 <bt_df_per_adv_sync_cte_rx_enable>
}
    370e:	b003      	add	sp, #12
    3710:	f85d fb04 	ldr.w	pc, [sp], #4
    3714:	0001e6d0 	.word	0x0001e6d0
    3718:	200021dc 	.word	0x200021dc

0000371c <scan_disable>:

static void scan_disable(void)
{
    371c:	b508      	push	{r3, lr}
	int err;

	// printk("Scan disable...");
	err = bt_le_scan_stop();
    371e:	f003 f97d 	bl	6a1c <bt_le_scan_stop>
	if (err) {
    3722:	b910      	cbnz	r0, 372a <scan_disable+0xe>
		// printk("failed (err %d)\n", err);
		return;
	}
	// printk("Success.\n");

	scan_enabled = false;
    3724:	4b01      	ldr	r3, [pc, #4]	; (372c <scan_disable+0x10>)
    3726:	2200      	movs	r2, #0
    3728:	701a      	strb	r2, [r3, #0]
}
    372a:	bd08      	pop	{r3, pc}
    372c:	20009292 	.word	0x20009292

00003730 <create_sync>:
{
    3730:	b500      	push	{lr}
    3732:	b085      	sub	sp, #20
    3734:	4b0d      	ldr	r3, [pc, #52]	; (376c <create_sync+0x3c>)
    3736:	e893 0003 	ldmia.w	r3, {r0, r1}
    373a:	9000      	str	r0, [sp, #0]
    373c:	f8ad 1004 	strh.w	r1, [sp, #4]
    3740:	0c09      	lsrs	r1, r1, #16
    3742:	f88d 1006 	strb.w	r1, [sp, #6]
	sync_create_param.options = 0;
    3746:	2300      	movs	r3, #0
    3748:	9302      	str	r3, [sp, #8]
	sync_create_param.sid = per_sid;
    374a:	4a09      	ldr	r2, [pc, #36]	; (3770 <create_sync+0x40>)
    374c:	7812      	ldrb	r2, [r2, #0]
    374e:	f88d 2007 	strb.w	r2, [sp, #7]
	sync_create_param.skip = 0;
    3752:	f8ad 300c 	strh.w	r3, [sp, #12]
	sync_create_param.timeout = 0xa;
    3756:	230a      	movs	r3, #10
    3758:	f8ad 300e 	strh.w	r3, [sp, #14]
	err = bt_le_per_adv_sync_create(&sync_create_param, &sync);
    375c:	4905      	ldr	r1, [pc, #20]	; (3774 <create_sync+0x44>)
    375e:	4668      	mov	r0, sp
    3760:	f003 f9d2 	bl	6b08 <bt_le_per_adv_sync_create>
}
    3764:	b005      	add	sp, #20
    3766:	f85d fb04 	ldr.w	pc, [sp], #4
    376a:	bf00      	nop
    376c:	200021d0 	.word	0x200021d0
    3770:	20009291 	.word	0x20009291
    3774:	200021dc 	.word	0x200021dc

00003778 <sync_cb>:
{
    3778:	b570      	push	{r4, r5, r6, lr}
    377a:	b092      	sub	sp, #72	; 0x48
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
    377c:	680c      	ldr	r4, [r1, #0]
	switch (addr->type) {
    377e:	7823      	ldrb	r3, [r4, #0]
    3780:	2b03      	cmp	r3, #3
    3782:	d839      	bhi.n	37f8 <sync_cb+0x80>
    3784:	e8df f003 	tbb	[pc, r3]
    3788:	322c2202 	.word	0x322c2202
		strcpy(type, "public");
    378c:	4b1d      	ldr	r3, [pc, #116]	; (3804 <sync_cb+0x8c>)
    378e:	e893 0003 	ldmia.w	r3, {r0, r1}
    3792:	9007      	str	r0, [sp, #28]
    3794:	f8ad 1020 	strh.w	r1, [sp, #32]
    3798:	0c09      	lsrs	r1, r1, #16
    379a:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    379e:	79a3      	ldrb	r3, [r4, #6]
    37a0:	7962      	ldrb	r2, [r4, #5]
    37a2:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    37a4:	78e0      	ldrb	r0, [r4, #3]
    37a6:	78a5      	ldrb	r5, [r4, #2]
    37a8:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    37aa:	ae07      	add	r6, sp, #28
    37ac:	9605      	str	r6, [sp, #20]
    37ae:	9404      	str	r4, [sp, #16]
    37b0:	9503      	str	r5, [sp, #12]
    37b2:	9002      	str	r0, [sp, #8]
    37b4:	9101      	str	r1, [sp, #4]
    37b6:	9200      	str	r2, [sp, #0]
    37b8:	4a13      	ldr	r2, [pc, #76]	; (3808 <sync_cb+0x90>)
    37ba:	211e      	movs	r1, #30
    37bc:	a80a      	add	r0, sp, #40	; 0x28
    37be:	f015 fc7d 	bl	190bc <snprintk>
    37c2:	4812      	ldr	r0, [pc, #72]	; (380c <sync_cb+0x94>)
    37c4:	f00f fba2 	bl	12f0c <z_impl_k_sem_give>
}
    37c8:	b012      	add	sp, #72	; 0x48
    37ca:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    37cc:	4b10      	ldr	r3, [pc, #64]	; (3810 <sync_cb+0x98>)
    37ce:	e893 0003 	ldmia.w	r3, {r0, r1}
    37d2:	9007      	str	r0, [sp, #28]
    37d4:	f8ad 1020 	strh.w	r1, [sp, #32]
    37d8:	0c09      	lsrs	r1, r1, #16
    37da:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
    37de:	e7de      	b.n	379e <sync_cb+0x26>
		strcpy(type, "public-id");
    37e0:	4a0c      	ldr	r2, [pc, #48]	; (3814 <sync_cb+0x9c>)
    37e2:	ab07      	add	r3, sp, #28
    37e4:	ca07      	ldmia	r2, {r0, r1, r2}
    37e6:	c303      	stmia	r3!, {r0, r1}
    37e8:	801a      	strh	r2, [r3, #0]
		break;
    37ea:	e7d8      	b.n	379e <sync_cb+0x26>
		strcpy(type, "random-id");
    37ec:	4a0a      	ldr	r2, [pc, #40]	; (3818 <sync_cb+0xa0>)
    37ee:	ab07      	add	r3, sp, #28
    37f0:	ca07      	ldmia	r2, {r0, r1, r2}
    37f2:	c303      	stmia	r3!, {r0, r1}
    37f4:	801a      	strh	r2, [r3, #0]
		break;
    37f6:	e7d2      	b.n	379e <sync_cb+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    37f8:	4a08      	ldr	r2, [pc, #32]	; (381c <sync_cb+0xa4>)
    37fa:	210a      	movs	r1, #10
    37fc:	a807      	add	r0, sp, #28
    37fe:	f015 fc5d 	bl	190bc <snprintk>
		break;
    3802:	e7cc      	b.n	379e <sync_cb+0x26>
    3804:	0001e80c 	.word	0x0001e80c
    3808:	0001e824 	.word	0x0001e824
    380c:	20000f28 	.word	0x20000f28
    3810:	0001e814 	.word	0x0001e814
    3814:	0001e848 	.word	0x0001e848
    3818:	0001e854 	.word	0x0001e854
    381c:	0001e81c 	.word	0x0001e81c

00003820 <term_cb>:
{
    3820:	b570      	push	{r4, r5, r6, lr}
    3822:	b092      	sub	sp, #72	; 0x48
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
    3824:	680c      	ldr	r4, [r1, #0]
	switch (addr->type) {
    3826:	7823      	ldrb	r3, [r4, #0]
    3828:	2b03      	cmp	r3, #3
    382a:	d839      	bhi.n	38a0 <term_cb+0x80>
    382c:	e8df f003 	tbb	[pc, r3]
    3830:	322c2202 	.word	0x322c2202
		strcpy(type, "public");
    3834:	4b1d      	ldr	r3, [pc, #116]	; (38ac <term_cb+0x8c>)
    3836:	e893 0003 	ldmia.w	r3, {r0, r1}
    383a:	9007      	str	r0, [sp, #28]
    383c:	f8ad 1020 	strh.w	r1, [sp, #32]
    3840:	0c09      	lsrs	r1, r1, #16
    3842:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    3846:	79a3      	ldrb	r3, [r4, #6]
    3848:	7962      	ldrb	r2, [r4, #5]
    384a:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    384c:	78e0      	ldrb	r0, [r4, #3]
    384e:	78a5      	ldrb	r5, [r4, #2]
    3850:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3852:	ae07      	add	r6, sp, #28
    3854:	9605      	str	r6, [sp, #20]
    3856:	9404      	str	r4, [sp, #16]
    3858:	9503      	str	r5, [sp, #12]
    385a:	9002      	str	r0, [sp, #8]
    385c:	9101      	str	r1, [sp, #4]
    385e:	9200      	str	r2, [sp, #0]
    3860:	4a13      	ldr	r2, [pc, #76]	; (38b0 <term_cb+0x90>)
    3862:	211e      	movs	r1, #30
    3864:	a80a      	add	r0, sp, #40	; 0x28
    3866:	f015 fc29 	bl	190bc <snprintk>
    386a:	4812      	ldr	r0, [pc, #72]	; (38b4 <term_cb+0x94>)
    386c:	f00f fb4e 	bl	12f0c <z_impl_k_sem_give>
}
    3870:	b012      	add	sp, #72	; 0x48
    3872:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    3874:	4b10      	ldr	r3, [pc, #64]	; (38b8 <term_cb+0x98>)
    3876:	e893 0003 	ldmia.w	r3, {r0, r1}
    387a:	9007      	str	r0, [sp, #28]
    387c:	f8ad 1020 	strh.w	r1, [sp, #32]
    3880:	0c09      	lsrs	r1, r1, #16
    3882:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
    3886:	e7de      	b.n	3846 <term_cb+0x26>
		strcpy(type, "public-id");
    3888:	4a0c      	ldr	r2, [pc, #48]	; (38bc <term_cb+0x9c>)
    388a:	ab07      	add	r3, sp, #28
    388c:	ca07      	ldmia	r2, {r0, r1, r2}
    388e:	c303      	stmia	r3!, {r0, r1}
    3890:	801a      	strh	r2, [r3, #0]
		break;
    3892:	e7d8      	b.n	3846 <term_cb+0x26>
		strcpy(type, "random-id");
    3894:	4a0a      	ldr	r2, [pc, #40]	; (38c0 <term_cb+0xa0>)
    3896:	ab07      	add	r3, sp, #28
    3898:	ca07      	ldmia	r2, {r0, r1, r2}
    389a:	c303      	stmia	r3!, {r0, r1}
    389c:	801a      	strh	r2, [r3, #0]
		break;
    389e:	e7d2      	b.n	3846 <term_cb+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    38a0:	4a08      	ldr	r2, [pc, #32]	; (38c4 <term_cb+0xa4>)
    38a2:	210a      	movs	r1, #10
    38a4:	a807      	add	r0, sp, #28
    38a6:	f015 fc09 	bl	190bc <snprintk>
		break;
    38aa:	e7cc      	b.n	3846 <term_cb+0x26>
    38ac:	0001e80c 	.word	0x0001e80c
    38b0:	0001e824 	.word	0x0001e824
    38b4:	20000f40 	.word	0x20000f40
    38b8:	0001e814 	.word	0x0001e814
    38bc:	0001e848 	.word	0x0001e848
    38c0:	0001e854 	.word	0x0001e854
    38c4:	0001e81c 	.word	0x0001e81c

000038c8 <recv_cb>:
{
    38c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ca:	b093      	sub	sp, #76	; 0x4c
    38cc:	4615      	mov	r5, r2
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
    38ce:	680c      	ldr	r4, [r1, #0]
	switch (addr->type) {
    38d0:	7823      	ldrb	r3, [r4, #0]
    38d2:	2b03      	cmp	r3, #3
    38d4:	d83d      	bhi.n	3952 <recv_cb+0x8a>
    38d6:	e8df f003 	tbb	[pc, r3]
    38da:	2602      	.short	0x2602
    38dc:	3630      	.short	0x3630
		strcpy(type, "public");
    38de:	4b20      	ldr	r3, [pc, #128]	; (3960 <recv_cb+0x98>)
    38e0:	e893 0003 	ldmia.w	r3, {r0, r1}
    38e4:	9007      	str	r0, [sp, #28]
    38e6:	f8ad 1020 	strh.w	r1, [sp, #32]
    38ea:	0c09      	lsrs	r1, r1, #16
    38ec:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    38f0:	79a3      	ldrb	r3, [r4, #6]
    38f2:	7962      	ldrb	r2, [r4, #5]
    38f4:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    38f6:	78e0      	ldrb	r0, [r4, #3]
    38f8:	78a6      	ldrb	r6, [r4, #2]
    38fa:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    38fc:	af07      	add	r7, sp, #28
    38fe:	9705      	str	r7, [sp, #20]
    3900:	9404      	str	r4, [sp, #16]
    3902:	9603      	str	r6, [sp, #12]
    3904:	9002      	str	r0, [sp, #8]
    3906:	9101      	str	r1, [sp, #4]
    3908:	9200      	str	r2, [sp, #0]
    390a:	4a16      	ldr	r2, [pc, #88]	; (3964 <recv_cb+0x9c>)
    390c:	211e      	movs	r1, #30
    390e:	a80a      	add	r0, sp, #40	; 0x28
    3910:	f015 fbd4 	bl	190bc <snprintk>
	bin2hex(buf->data, buf->len, data_str, sizeof(data_str));
    3914:	f640 43e5 	movw	r3, #3301	; 0xce5
    3918:	4a13      	ldr	r2, [pc, #76]	; (3968 <recv_cb+0xa0>)
    391a:	88a9      	ldrh	r1, [r5, #4]
    391c:	6828      	ldr	r0, [r5, #0]
    391e:	f015 fb3c 	bl	18f9a <bin2hex>
}
    3922:	b013      	add	sp, #76	; 0x4c
    3924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
    3926:	4b11      	ldr	r3, [pc, #68]	; (396c <recv_cb+0xa4>)
    3928:	e893 0003 	ldmia.w	r3, {r0, r1}
    392c:	9007      	str	r0, [sp, #28]
    392e:	f8ad 1020 	strh.w	r1, [sp, #32]
    3932:	0c09      	lsrs	r1, r1, #16
    3934:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
    3938:	e7da      	b.n	38f0 <recv_cb+0x28>
		strcpy(type, "public-id");
    393a:	4a0d      	ldr	r2, [pc, #52]	; (3970 <recv_cb+0xa8>)
    393c:	ab07      	add	r3, sp, #28
    393e:	ca07      	ldmia	r2, {r0, r1, r2}
    3940:	c303      	stmia	r3!, {r0, r1}
    3942:	801a      	strh	r2, [r3, #0]
		break;
    3944:	e7d4      	b.n	38f0 <recv_cb+0x28>
		strcpy(type, "random-id");
    3946:	4a0b      	ldr	r2, [pc, #44]	; (3974 <recv_cb+0xac>)
    3948:	ab07      	add	r3, sp, #28
    394a:	ca07      	ldmia	r2, {r0, r1, r2}
    394c:	c303      	stmia	r3!, {r0, r1}
    394e:	801a      	strh	r2, [r3, #0]
		break;
    3950:	e7ce      	b.n	38f0 <recv_cb+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3952:	4a09      	ldr	r2, [pc, #36]	; (3978 <recv_cb+0xb0>)
    3954:	210a      	movs	r1, #10
    3956:	a807      	add	r0, sp, #28
    3958:	f015 fbb0 	bl	190bc <snprintk>
		break;
    395c:	e7c8      	b.n	38f0 <recv_cb+0x28>
    395e:	bf00      	nop
    3960:	0001e80c 	.word	0x0001e80c
    3964:	0001e824 	.word	0x0001e824
    3968:	200014e8 	.word	0x200014e8
    396c:	0001e814 	.word	0x0001e814
    3970:	0001e848 	.word	0x0001e848
    3974:	0001e854 	.word	0x0001e854
    3978:	0001e81c 	.word	0x0001e81c

0000397c <main>:

void main(void)
{
    397c:	b508      	push	{r3, lr}
	int err;

	// printk("Starting Connectionless Locator Demo\n");

	// printk("Bluetooth initialization...");
	err = bt_enable(NULL);
    397e:	2000      	movs	r0, #0
    3980:	f002 f910 	bl	5ba4 <bt_enable>
	if (err) {
		// printk("failed (err %d)\n", err);
	}
	// printk("success\n");

	scan_init();
    3984:	f7ff fda2 	bl	34cc <scan_init>

	scan_enabled = false;
    3988:	4b1c      	ldr	r3, [pc, #112]	; (39fc <main+0x80>)
    398a:	2200      	movs	r2, #0
    398c:	701a      	strb	r2, [r3, #0]
    398e:	e00b      	b.n	39a8 <main+0x2c>
			}
			continue;
		}
		// printk("success. Periodic sync established.\n");

		enable_cte_rx();
    3990:	f7ff feb0 	bl	36f4 <enable_cte_rx>

		/* Disable scan to cleanup output */
		scan_disable();
    3994:	f7ff fec2 	bl	371c <scan_disable>
	return z_impl_k_sem_take(sem, timeout);
    3998:	f04f 32ff 	mov.w	r2, #4294967295
    399c:	f04f 33ff 	mov.w	r3, #4294967295
    39a0:	4817      	ldr	r0, [pc, #92]	; (3a00 <main+0x84>)
    39a2:	f00f fadb 	bl	12f5c <z_impl_k_sem_take>

		// printk("Waiting for periodic sync lost...\n");
		err = k_sem_take(&sem_per_sync_lost, K_FOREVER);
		if (err) {
    39a6:	bb40      	cbnz	r0, 39fa <main+0x7e>
		per_adv_found = false;
    39a8:	4b16      	ldr	r3, [pc, #88]	; (3a04 <main+0x88>)
    39aa:	2200      	movs	r2, #0
    39ac:	701a      	strb	r2, [r3, #0]
		scan_enable();
    39ae:	f7ff fe73 	bl	3698 <scan_enable>
    39b2:	f04f 32ff 	mov.w	r2, #4294967295
    39b6:	f04f 33ff 	mov.w	r3, #4294967295
    39ba:	4813      	ldr	r0, [pc, #76]	; (3a08 <main+0x8c>)
    39bc:	f00f face 	bl	12f5c <z_impl_k_sem_take>
		if (err) {
    39c0:	b9d8      	cbnz	r0, 39fa <main+0x7e>
		create_sync();
    39c2:	f7ff feb5 	bl	3730 <create_sync>
		err = k_sem_take(&sem_per_sync, K_MSEC(sync_create_timeout_ms));
    39c6:	4b11      	ldr	r3, [pc, #68]	; (3a0c <main+0x90>)
    39c8:	6818      	ldr	r0, [r3, #0]
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    39ca:	0c41      	lsrs	r1, r0, #17
    39cc:	03c0      	lsls	r0, r0, #15
    39ce:	f240 33e7 	movw	r3, #999	; 0x3e7
    39d2:	18c0      	adds	r0, r0, r3
    39d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39d8:	f04f 0300 	mov.w	r3, #0
    39dc:	f141 0100 	adc.w	r1, r1, #0
    39e0:	f7fd fbea 	bl	11b8 <__aeabi_uldivmod>
    39e4:	4602      	mov	r2, r0
    39e6:	460b      	mov	r3, r1
    39e8:	4809      	ldr	r0, [pc, #36]	; (3a10 <main+0x94>)
    39ea:	f00f fab7 	bl	12f5c <z_impl_k_sem_take>
		if (err) {
    39ee:	2800      	cmp	r0, #0
    39f0:	d0ce      	beq.n	3990 <main+0x14>
			err = delete_sync();
    39f2:	f7ff fe77 	bl	36e4 <delete_sync>
			if (err) {
    39f6:	2800      	cmp	r0, #0
    39f8:	d0d6      	beq.n	39a8 <main+0x2c>
			// printk("failed (err %d)\n", err);
			return;
		}
		// printk("Periodic sync lost.\n");
	}
}
    39fa:	bd08      	pop	{r3, pc}
    39fc:	20009292 	.word	0x20009292
    3a00:	20000f40 	.word	0x20000f40
    3a04:	20009290 	.word	0x20009290
    3a08:	20000f10 	.word	0x20000f10
    3a0c:	200021e0 	.word	0x200021e0
    3a10:	20000f28 	.word	0x20000f28

00003a14 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    3a14:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3a16:	680b      	ldr	r3, [r1, #0]
    3a18:	3301      	adds	r3, #1
    3a1a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3a1c:	4b01      	ldr	r3, [pc, #4]	; (3a24 <char_out+0x10>)
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	4798      	blx	r3
}
    3a22:	bd08      	pop	{r3, pc}
    3a24:	200003a0 	.word	0x200003a0

00003a28 <__printk_hook_install>:
	_char_out = fn;
    3a28:	4b01      	ldr	r3, [pc, #4]	; (3a30 <__printk_hook_install+0x8>)
    3a2a:	6018      	str	r0, [r3, #0]
}
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	200003a0 	.word	0x200003a0

00003a34 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    3a34:	b500      	push	{lr}
    3a36:	b083      	sub	sp, #12
    3a38:	4602      	mov	r2, r0
    3a3a:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
    3a3c:	2100      	movs	r1, #0
    3a3e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    3a40:	a901      	add	r1, sp, #4
    3a42:	4803      	ldr	r0, [pc, #12]	; (3a50 <vprintk+0x1c>)
    3a44:	f000 fad8 	bl	3ff8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    3a48:	b003      	add	sp, #12
    3a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a4e:	bf00      	nop
    3a50:	00003a15 	.word	0x00003a15

00003a54 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3a54:	b510      	push	{r4, lr}
    3a56:	b084      	sub	sp, #16
    3a58:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3a5a:	9001      	str	r0, [sp, #4]
    3a5c:	9102      	str	r1, [sp, #8]
    3a5e:	2100      	movs	r1, #0
    3a60:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    3a62:	a901      	add	r1, sp, #4
    3a64:	4805      	ldr	r0, [pc, #20]	; (3a7c <vsnprintk+0x28>)
    3a66:	f000 fac7 	bl	3ff8 <cbvprintf>

	if (ctx.count < ctx.max) {
    3a6a:	9b03      	ldr	r3, [sp, #12]
    3a6c:	9a02      	ldr	r2, [sp, #8]
    3a6e:	4293      	cmp	r3, r2
    3a70:	da01      	bge.n	3a76 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    3a72:	2200      	movs	r2, #0
    3a74:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    3a76:	9803      	ldr	r0, [sp, #12]
    3a78:	b004      	add	sp, #16
    3a7a:	bd10      	pop	{r4, pc}
    3a7c:	00019071 	.word	0x00019071

00003a80 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a84:	b083      	sub	sp, #12
    3a86:	4604      	mov	r4, r0
    3a88:	4608      	mov	r0, r1
    3a8a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3a8c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3a8e:	f013 0f08 	tst.w	r3, #8
    3a92:	d105      	bne.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a94:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    3a98:	2300      	movs	r3, #0
    3a9a:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    3a9c:	9301      	str	r3, [sp, #4]
}
    3a9e:	e069      	b.n	3b74 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xdc>
		if (evt == EVT_COMPLETE) {
    3aa0:	2901      	cmp	r1, #1
    3aa2:	d009      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3aa4:	f043 0320 	orr.w	r3, r3, #32
    3aa8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3aaa:	f385 8811 	msr	BASEPRI, r5
    3aae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3ab2:	b003      	add	sp, #12
    3ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3ab8:	f043 0310 	orr.w	r3, r3, #16
    3abc:	8323      	strh	r3, [r4, #24]
    3abe:	e7f4      	b.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
			evt = process_recheck(mgr);
    3ac0:	4620      	mov	r0, r4
    3ac2:	f015 fb30 	bl	19126 <process_recheck>
    3ac6:	e057      	b.n	3b78 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe0>
			res = mgr->last_res;
    3ac8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    3acc:	464a      	mov	r2, r9
    3ace:	4669      	mov	r1, sp
    3ad0:	4620      	mov	r0, r4
    3ad2:	f015 fb41 	bl	19158 <process_complete>
		onoff_transition_fn transit = NULL;
    3ad6:	2700      	movs	r7, #0
    3ad8:	e05a      	b.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
			transit = mgr->transitions->start;
    3ada:	6923      	ldr	r3, [r4, #16]
    3adc:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    3ade:	2106      	movs	r1, #6
    3ae0:	4620      	mov	r0, r4
    3ae2:	f015 faf9 	bl	190d8 <set_state>
		res = 0;
    3ae6:	f04f 0900 	mov.w	r9, #0
    3aea:	e051      	b.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
			transit = mgr->transitions->stop;
    3aec:	6923      	ldr	r3, [r4, #16]
    3aee:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    3af0:	2104      	movs	r1, #4
    3af2:	4620      	mov	r0, r4
    3af4:	f015 faf0 	bl	190d8 <set_state>
		res = 0;
    3af8:	f04f 0900 	mov.w	r9, #0
    3afc:	e048      	b.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
			transit = mgr->transitions->reset;
    3afe:	6923      	ldr	r3, [r4, #16]
    3b00:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    3b02:	2105      	movs	r1, #5
    3b04:	4620      	mov	r0, r4
    3b06:	f015 fae7 	bl	190d8 <set_state>
		res = 0;
    3b0a:	f04f 0900 	mov.w	r9, #0
    3b0e:	e03f      	b.n	3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    3b10:	2200      	movs	r2, #0
    3b12:	e046      	b.n	3ba2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10a>
    3b14:	2200      	movs	r2, #0
    3b16:	e044      	b.n	3ba2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3b18:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    3b1c:	8323      	strh	r3, [r4, #24]
    3b1e:	f385 8811 	msr	BASEPRI, r5
    3b22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3b26:	2900      	cmp	r1, #0
    3b28:	d144      	bne.n	3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3b2a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    3b2c:	b12b      	cbz	r3, 3b3a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa2>
				notify_all(mgr, &clients, state, res);
    3b2e:	464b      	mov	r3, r9
    3b30:	4642      	mov	r2, r8
    3b32:	4669      	mov	r1, sp
    3b34:	4620      	mov	r0, r4
    3b36:	f015 fb86 	bl	19246 <notify_all>
			if (transit != NULL) {
    3b3a:	b117      	cbz	r7, 3b42 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xaa>
				transit(mgr, transition_complete);
    3b3c:	4925      	ldr	r1, [pc, #148]	; (3bd4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x13c>)
    3b3e:	4620      	mov	r0, r4
    3b40:	47b8      	blx	r7
	__asm__ volatile(
    3b42:	f04f 0320 	mov.w	r3, #32
    3b46:	f3ef 8511 	mrs	r5, BASEPRI
    3b4a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b4e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3b52:	8b23      	ldrh	r3, [r4, #24]
    3b54:	f023 0308 	bic.w	r3, r3, #8
    3b58:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3b5a:	8b23      	ldrh	r3, [r4, #24]
    3b5c:	f013 0f10 	tst.w	r3, #16
    3b60:	d02e      	beq.n	3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3b62:	f023 0310 	bic.w	r3, r3, #16
    3b66:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3b68:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3b6a:	8b26      	ldrh	r6, [r4, #24]
    3b6c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    3b70:	2800      	cmp	r0, #0
    3b72:	d09a      	beq.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		if (evt == EVT_RECHECK) {
    3b74:	2802      	cmp	r0, #2
    3b76:	d0a3      	beq.n	3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>
		if (evt == EVT_NOP) {
    3b78:	2800      	cmp	r0, #0
    3b7a:	d096      	beq.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		if (evt == EVT_COMPLETE) {
    3b7c:	2801      	cmp	r0, #1
    3b7e:	d0a3      	beq.n	3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>
		} else if (evt == EVT_START) {
    3b80:	2803      	cmp	r0, #3
    3b82:	d0aa      	beq.n	3ada <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x42>
		} else if (evt == EVT_STOP) {
    3b84:	2804      	cmp	r0, #4
    3b86:	d0b1      	beq.n	3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>
		} else if (evt == EVT_RESET) {
    3b88:	2805      	cmp	r0, #5
    3b8a:	d0b8      	beq.n	3afe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x66>
		onoff_transition_fn transit = NULL;
    3b8c:	2700      	movs	r7, #0
		res = 0;
    3b8e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3b90:	8b23      	ldrh	r3, [r4, #24]
    3b92:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3b96:	45b0      	cmp	r8, r6
    3b98:	d0ba      	beq.n	3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>
    3b9a:	68a2      	ldr	r2, [r4, #8]
    3b9c:	2a00      	cmp	r2, #0
    3b9e:	d0b9      	beq.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3ba0:	2201      	movs	r2, #1
		if (do_monitors
    3ba2:	4611      	mov	r1, r2
    3ba4:	2a00      	cmp	r2, #0
    3ba6:	d1b7      	bne.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3ba8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    3baa:	2a00      	cmp	r2, #0
    3bac:	d1b4      	bne.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
		    || (transit != NULL)) {
    3bae:	2f00      	cmp	r7, #0
    3bb0:	d1b2      	bne.n	3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>
    3bb2:	e7d2      	b.n	3b5a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc2>
				notify_monitors(mgr, state, res);
    3bb4:	464a      	mov	r2, r9
    3bb6:	4641      	mov	r1, r8
    3bb8:	4620      	mov	r0, r4
    3bba:	f015 fa95 	bl	190e8 <notify_monitors>
    3bbe:	e7b4      	b.n	3b2a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x92>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3bc0:	f013 0f20 	tst.w	r3, #32
    3bc4:	d004      	beq.n	3bd0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x138>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3bc6:	f023 0320 	bic.w	r3, r3, #32
    3bca:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    3bcc:	2002      	movs	r0, #2
    3bce:	e7cc      	b.n	3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
		evt = EVT_NOP;
    3bd0:	2000      	movs	r0, #0
    3bd2:	e7ca      	b.n	3b6a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd2>
    3bd4:	00019275 	.word	0x00019275

00003bd8 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    3bd8:	4684      	mov	ip, r0
	const char *sp = *str;
    3bda:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    3bdc:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
    3bde:	e005      	b.n	3bec <extract_decimal+0x14>
		val = 10U * val + *sp++ - '0';
    3be0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3be4:	3201      	adds	r2, #1
    3be6:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    3bea:	3830      	subs	r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    3bec:	7813      	ldrb	r3, [r2, #0]
    3bee:	4904      	ldr	r1, [pc, #16]	; (3c00 <extract_decimal+0x28>)
    3bf0:	5c59      	ldrb	r1, [r3, r1]
    3bf2:	f011 0f04 	tst.w	r1, #4
    3bf6:	d1f3      	bne.n	3be0 <extract_decimal+0x8>
	}
	*str = sp;
    3bf8:	f8cc 2000 	str.w	r2, [ip]
	return val;
}
    3bfc:	4770      	bx	lr
    3bfe:	bf00      	nop
    3c00:	0001f995 	.word	0x0001f995

00003c04 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
    3c04:	b570      	push	{r4, r5, r6, lr}
    3c06:	b082      	sub	sp, #8
    3c08:	4604      	mov	r4, r0
	*conv = (struct conversion) {
    3c0a:	2300      	movs	r3, #0
    3c0c:	6003      	str	r3, [r0, #0]
    3c0e:	6043      	str	r3, [r0, #4]
    3c10:	6083      	str	r3, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
    3c12:	784b      	ldrb	r3, [r1, #1]
    3c14:	2b25      	cmp	r3, #37	; 0x25
    3c16:	d002      	beq.n	3c1e <extract_conversion+0x1a>
    3c18:	1c4e      	adds	r6, r1, #1
	bool loop = true;
    3c1a:	2501      	movs	r5, #1
    3c1c:	e01f      	b.n	3c5e <extract_conversion+0x5a>
		conv->specifier = *sp++;
    3c1e:	1c88      	adds	r0, r1, #2
    3c20:	70e3      	strb	r3, [r4, #3]
		return sp;
    3c22:	e145      	b.n	3eb0 <extract_conversion+0x2ac>
			conv->flag_dash = true;
    3c24:	7823      	ldrb	r3, [r4, #0]
    3c26:	f043 0304 	orr.w	r3, r3, #4
    3c2a:	7023      	strb	r3, [r4, #0]
		if (loop) {
    3c2c:	b1b5      	cbz	r5, 3c5c <extract_conversion+0x58>
			++sp;
    3c2e:	3601      	adds	r6, #1
    3c30:	e014      	b.n	3c5c <extract_conversion+0x58>
			conv->flag_plus = true;
    3c32:	7823      	ldrb	r3, [r4, #0]
    3c34:	f043 0308 	orr.w	r3, r3, #8
    3c38:	7023      	strb	r3, [r4, #0]
			break;
    3c3a:	e7f7      	b.n	3c2c <extract_conversion+0x28>
			conv->flag_space = true;
    3c3c:	7823      	ldrb	r3, [r4, #0]
    3c3e:	f043 0310 	orr.w	r3, r3, #16
    3c42:	7023      	strb	r3, [r4, #0]
			break;
    3c44:	e7f2      	b.n	3c2c <extract_conversion+0x28>
			conv->flag_hash = true;
    3c46:	7823      	ldrb	r3, [r4, #0]
    3c48:	f043 0320 	orr.w	r3, r3, #32
    3c4c:	7023      	strb	r3, [r4, #0]
			break;
    3c4e:	e7ed      	b.n	3c2c <extract_conversion+0x28>
			conv->flag_zero = true;
    3c50:	7823      	ldrb	r3, [r4, #0]
    3c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c56:	7023      	strb	r3, [r4, #0]
			break;
    3c58:	e7e8      	b.n	3c2c <extract_conversion+0x28>
		switch (*sp) {
    3c5a:	2500      	movs	r5, #0
	} while (loop);
    3c5c:	b345      	cbz	r5, 3cb0 <extract_conversion+0xac>
		switch (*sp) {
    3c5e:	7833      	ldrb	r3, [r6, #0]
    3c60:	3b20      	subs	r3, #32
    3c62:	2b10      	cmp	r3, #16
    3c64:	d8f9      	bhi.n	3c5a <extract_conversion+0x56>
    3c66:	a201      	add	r2, pc, #4	; (adr r2, 3c6c <extract_conversion+0x68>)
    3c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3c6c:	00003c3d 	.word	0x00003c3d
    3c70:	00003c5b 	.word	0x00003c5b
    3c74:	00003c5b 	.word	0x00003c5b
    3c78:	00003c47 	.word	0x00003c47
    3c7c:	00003c5b 	.word	0x00003c5b
    3c80:	00003c5b 	.word	0x00003c5b
    3c84:	00003c5b 	.word	0x00003c5b
    3c88:	00003c5b 	.word	0x00003c5b
    3c8c:	00003c5b 	.word	0x00003c5b
    3c90:	00003c5b 	.word	0x00003c5b
    3c94:	00003c5b 	.word	0x00003c5b
    3c98:	00003c33 	.word	0x00003c33
    3c9c:	00003c5b 	.word	0x00003c5b
    3ca0:	00003c25 	.word	0x00003c25
    3ca4:	00003c5b 	.word	0x00003c5b
    3ca8:	00003c5b 	.word	0x00003c5b
    3cac:	00003c51 	.word	0x00003c51
	if (conv->flag_zero && conv->flag_dash) {
    3cb0:	7823      	ldrb	r3, [r4, #0]
    3cb2:	f003 0344 	and.w	r3, r3, #68	; 0x44
    3cb6:	2b44      	cmp	r3, #68	; 0x44
    3cb8:	d05f      	beq.n	3d7a <extract_conversion+0x176>
	}

	sp = extract_flags(conv, sp);
	sp = extract_width(conv, sp);
    3cba:	9601      	str	r6, [sp, #4]
	conv->width_present = true;
    3cbc:	7823      	ldrb	r3, [r4, #0]
    3cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3cc2:	7023      	strb	r3, [r4, #0]
	if (*sp == '*') {
    3cc4:	7833      	ldrb	r3, [r6, #0]
    3cc6:	2b2a      	cmp	r3, #42	; 0x2a
    3cc8:	d05c      	beq.n	3d84 <extract_conversion+0x180>
	size_t width = extract_decimal(&sp);
    3cca:	a801      	add	r0, sp, #4
    3ccc:	f7ff ff84 	bl	3bd8 <extract_decimal>
	if (sp != wp) {
    3cd0:	9b01      	ldr	r3, [sp, #4]
    3cd2:	429e      	cmp	r6, r3
    3cd4:	d00f      	beq.n	3cf6 <extract_conversion+0xf2>
		conv->width_present = true;
    3cd6:	7823      	ldrb	r3, [r4, #0]
    3cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3cdc:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    3cde:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    3ce0:	b2db      	uxtb	r3, r3
    3ce2:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    3ce6:	2800      	cmp	r0, #0
    3ce8:	db54      	blt.n	3d94 <extract_conversion+0x190>
    3cea:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    3cec:	4313      	orrs	r3, r2
    3cee:	7822      	ldrb	r2, [r4, #0]
    3cf0:	f363 0241 	bfi	r2, r3, #1, #1
    3cf4:	7022      	strb	r2, [r4, #0]
	return sp;
    3cf6:	9b01      	ldr	r3, [sp, #4]
	sp = extract_prec(conv, sp);
    3cf8:	9301      	str	r3, [sp, #4]
	conv->prec_present = (*sp == '.');
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	2b2e      	cmp	r3, #46	; 0x2e
    3cfe:	bf14      	ite	ne
    3d00:	2300      	movne	r3, #0
    3d02:	2301      	moveq	r3, #1
    3d04:	7862      	ldrb	r2, [r4, #1]
    3d06:	f363 0241 	bfi	r2, r3, #1, #1
    3d0a:	7062      	strb	r2, [r4, #1]
	if (!conv->prec_present) {
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d043      	beq.n	3d98 <extract_conversion+0x194>
	++sp;
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	1c5a      	adds	r2, r3, #1
    3d14:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    3d16:	785b      	ldrb	r3, [r3, #1]
    3d18:	2b2a      	cmp	r3, #42	; 0x2a
    3d1a:	d03f      	beq.n	3d9c <extract_conversion+0x198>
	size_t prec = extract_decimal(&sp);
    3d1c:	a801      	add	r0, sp, #4
    3d1e:	f7ff ff5b 	bl	3bd8 <extract_decimal>
	conv->prec_value = prec;
    3d22:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    3d24:	7823      	ldrb	r3, [r4, #0]
    3d26:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    3d2a:	2800      	cmp	r0, #0
    3d2c:	db3e      	blt.n	3dac <extract_conversion+0x1a8>
    3d2e:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    3d30:	4313      	orrs	r3, r2
    3d32:	7822      	ldrb	r2, [r4, #0]
    3d34:	f363 0241 	bfi	r2, r3, #1, #1
    3d38:	7022      	strb	r2, [r4, #0]
	return sp;
    3d3a:	9801      	ldr	r0, [sp, #4]
	switch (*sp) {
    3d3c:	7803      	ldrb	r3, [r0, #0]
    3d3e:	3b4c      	subs	r3, #76	; 0x4c
    3d40:	2b2e      	cmp	r3, #46	; 0x2e
    3d42:	f200 809d 	bhi.w	3e80 <extract_conversion+0x27c>
    3d46:	e8df f003 	tbb	[pc, r3]
    3d4a:	9b90      	.short	0x9b90
    3d4c:	9b9b9b9b 	.word	0x9b9b9b9b
    3d50:	9b9b9b9b 	.word	0x9b9b9b9b
    3d54:	9b9b9b9b 	.word	0x9b9b9b9b
    3d58:	9b9b9b9b 	.word	0x9b9b9b9b
    3d5c:	9b9b9b9b 	.word	0x9b9b9b9b
    3d60:	9b9b9b9b 	.word	0x9b9b9b9b
    3d64:	9b339b9b 	.word	0x9b339b9b
    3d68:	9b459b57 	.word	0x9b459b57
    3d6c:	9b9b9b9b 	.word	0x9b9b9b9b
    3d70:	9b899b9b 	.word	0x9b899b9b
    3d74:	9b9b9b9b 	.word	0x9b9b9b9b
    3d78:	82          	.byte	0x82
    3d79:	00          	.byte	0x00
		conv->flag_zero = false;
    3d7a:	7823      	ldrb	r3, [r4, #0]
    3d7c:	f36f 1386 	bfc	r3, #6, #1
    3d80:	7023      	strb	r3, [r4, #0]
    3d82:	e79a      	b.n	3cba <extract_conversion+0xb6>
		conv->width_star = true;
    3d84:	7863      	ldrb	r3, [r4, #1]
    3d86:	f043 0301 	orr.w	r3, r3, #1
    3d8a:	7063      	strb	r3, [r4, #1]
		return ++sp;
    3d8c:	4633      	mov	r3, r6
    3d8e:	3301      	adds	r3, #1
    3d90:	9301      	str	r3, [sp, #4]
    3d92:	e7b1      	b.n	3cf8 <extract_conversion+0xf4>
				      || (width != (size_t)conv->width_value));
    3d94:	2201      	movs	r2, #1
    3d96:	e7a9      	b.n	3cec <extract_conversion+0xe8>
		return sp;
    3d98:	9801      	ldr	r0, [sp, #4]
    3d9a:	e7cf      	b.n	3d3c <extract_conversion+0x138>
		conv->prec_star = true;
    3d9c:	7863      	ldrb	r3, [r4, #1]
    3d9e:	f043 0304 	orr.w	r3, r3, #4
    3da2:	7063      	strb	r3, [r4, #1]
		return ++sp;
    3da4:	4610      	mov	r0, r2
    3da6:	3001      	adds	r0, #1
    3da8:	9001      	str	r0, [sp, #4]
    3daa:	e7c7      	b.n	3d3c <extract_conversion+0x138>
			      || (prec != (size_t)conv->prec_value));
    3dac:	2201      	movs	r2, #1
    3dae:	e7bf      	b.n	3d30 <extract_conversion+0x12c>
		if (*++sp == 'h') {
    3db0:	1c42      	adds	r2, r0, #1
    3db2:	7843      	ldrb	r3, [r0, #1]
    3db4:	2b68      	cmp	r3, #104	; 0x68
    3db6:	d006      	beq.n	3dc6 <extract_conversion+0x1c2>
			conv->length_mod = LENGTH_H;
    3db8:	7863      	ldrb	r3, [r4, #1]
    3dba:	2102      	movs	r1, #2
    3dbc:	f361 03c6 	bfi	r3, r1, #3, #4
    3dc0:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'h') {
    3dc2:	4610      	mov	r0, r2
    3dc4:	e01e      	b.n	3e04 <extract_conversion+0x200>
			conv->length_mod = LENGTH_HH;
    3dc6:	7863      	ldrb	r3, [r4, #1]
    3dc8:	2201      	movs	r2, #1
    3dca:	f362 03c6 	bfi	r3, r2, #3, #4
    3dce:	7063      	strb	r3, [r4, #1]
			++sp;
    3dd0:	3002      	adds	r0, #2
    3dd2:	e017      	b.n	3e04 <extract_conversion+0x200>
		if (*++sp == 'l') {
    3dd4:	1c42      	adds	r2, r0, #1
    3dd6:	7843      	ldrb	r3, [r0, #1]
    3dd8:	2b6c      	cmp	r3, #108	; 0x6c
    3dda:	d006      	beq.n	3dea <extract_conversion+0x1e6>
			conv->length_mod = LENGTH_L;
    3ddc:	7863      	ldrb	r3, [r4, #1]
    3dde:	2103      	movs	r1, #3
    3de0:	f361 03c6 	bfi	r3, r1, #3, #4
    3de4:	7063      	strb	r3, [r4, #1]
		if (*++sp == 'l') {
    3de6:	4610      	mov	r0, r2
    3de8:	e00c      	b.n	3e04 <extract_conversion+0x200>
			conv->length_mod = LENGTH_LL;
    3dea:	7863      	ldrb	r3, [r4, #1]
    3dec:	2204      	movs	r2, #4
    3dee:	f362 03c6 	bfi	r3, r2, #3, #4
    3df2:	7063      	strb	r3, [r4, #1]
			++sp;
    3df4:	3002      	adds	r0, #2
    3df6:	e005      	b.n	3e04 <extract_conversion+0x200>
		conv->length_mod = LENGTH_J;
    3df8:	7863      	ldrb	r3, [r4, #1]
    3dfa:	2205      	movs	r2, #5
    3dfc:	f362 03c6 	bfi	r3, r2, #3, #4
    3e00:	7063      	strb	r3, [r4, #1]
		++sp;
    3e02:	3001      	adds	r0, #1
	conv->specifier = *sp++;
    3e04:	f810 3b01 	ldrb.w	r3, [r0], #1
    3e08:	70e3      	strb	r3, [r4, #3]
	switch (conv->specifier) {
    3e0a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    3e0e:	2a37      	cmp	r2, #55	; 0x37
    3e10:	d87d      	bhi.n	3f0e <extract_conversion+0x30a>
    3e12:	e8df f002 	tbb	[pc, r2]
    3e16:	7c5e      	.short	0x7c5e
    3e18:	5e5e7c7c 	.word	0x5e5e7c7c
    3e1c:	7c7c7c5e 	.word	0x7c7c7c5e
    3e20:	7c7c7c7c 	.word	0x7c7c7c7c
    3e24:	7c7c7c7c 	.word	0x7c7c7c7c
    3e28:	7c7c7c7c 	.word	0x7c7c7c7c
    3e2c:	7c7c4f7c 	.word	0x7c7c4f7c
    3e30:	7c7c7c7c 	.word	0x7c7c7c7c
    3e34:	7c5e7c7c 	.word	0x7c5e7c7c
    3e38:	5e5e3a4f 	.word	0x5e5e3a4f
    3e3c:	7c3a7c5e 	.word	0x7c3a7c5e
    3e40:	657c7c7c 	.word	0x657c7c7c
    3e44:	7c7c714f 	.word	0x7c7c714f
    3e48:	7c4f7c71 	.word	0x7c4f7c71
    3e4c:	4f7c      	.short	0x4f7c
		conv->length_mod = LENGTH_Z;
    3e4e:	7863      	ldrb	r3, [r4, #1]
    3e50:	2206      	movs	r2, #6
    3e52:	f362 03c6 	bfi	r3, r2, #3, #4
    3e56:	7063      	strb	r3, [r4, #1]
		++sp;
    3e58:	3001      	adds	r0, #1
		break;
    3e5a:	e7d3      	b.n	3e04 <extract_conversion+0x200>
		conv->length_mod = LENGTH_T;
    3e5c:	7863      	ldrb	r3, [r4, #1]
    3e5e:	2207      	movs	r2, #7
    3e60:	f362 03c6 	bfi	r3, r2, #3, #4
    3e64:	7063      	strb	r3, [r4, #1]
		++sp;
    3e66:	3001      	adds	r0, #1
		break;
    3e68:	e7cc      	b.n	3e04 <extract_conversion+0x200>
		conv->length_mod = LENGTH_UPPER_L;
    3e6a:	7863      	ldrb	r3, [r4, #1]
    3e6c:	2208      	movs	r2, #8
    3e6e:	f362 03c6 	bfi	r3, r2, #3, #4
    3e72:	7063      	strb	r3, [r4, #1]
		++sp;
    3e74:	3001      	adds	r0, #1
		conv->unsupported = true;
    3e76:	7823      	ldrb	r3, [r4, #0]
    3e78:	f043 0302 	orr.w	r3, r3, #2
    3e7c:	7023      	strb	r3, [r4, #0]
		break;
    3e7e:	e7c1      	b.n	3e04 <extract_conversion+0x200>
		conv->length_mod = LENGTH_NONE;
    3e80:	7863      	ldrb	r3, [r4, #1]
    3e82:	f36f 03c6 	bfc	r3, #3, #4
    3e86:	7063      	strb	r3, [r4, #1]
		break;
    3e88:	e7bc      	b.n	3e04 <extract_conversion+0x200>
		conv->specifier_cat = SPECIFIER_SINT;
    3e8a:	78a2      	ldrb	r2, [r4, #2]
    3e8c:	2101      	movs	r1, #1
    3e8e:	f361 0202 	bfi	r2, r1, #0, #3
    3e92:	70a2      	strb	r2, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    3e94:	7862      	ldrb	r2, [r4, #1]
    3e96:	f002 0278 	and.w	r2, r2, #120	; 0x78
    3e9a:	2a40      	cmp	r2, #64	; 0x40
    3e9c:	d010      	beq.n	3ec0 <extract_conversion+0x2bc>
		if (conv->specifier == 'c') {
    3e9e:	2b63      	cmp	r3, #99	; 0x63
    3ea0:	d013      	beq.n	3eca <extract_conversion+0x2c6>
	conv->unsupported |= unsupported;
    3ea2:	7823      	ldrb	r3, [r4, #0]
    3ea4:	f3c3 0240 	ubfx	r2, r3, #1, #1
    3ea8:	4315      	orrs	r5, r2
    3eaa:	f365 0341 	bfi	r3, r5, #1, #1
    3eae:	7023      	strb	r3, [r4, #0]
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
    3eb0:	b002      	add	sp, #8
    3eb2:	bd70      	pop	{r4, r5, r6, pc}
		conv->specifier_cat = SPECIFIER_UINT;
    3eb4:	78a2      	ldrb	r2, [r4, #2]
    3eb6:	2102      	movs	r1, #2
    3eb8:	f361 0202 	bfi	r2, r1, #0, #3
    3ebc:	70a2      	strb	r2, [r4, #2]
    3ebe:	e7e9      	b.n	3e94 <extract_conversion+0x290>
			conv->invalid = true;
    3ec0:	7821      	ldrb	r1, [r4, #0]
    3ec2:	f041 0101 	orr.w	r1, r1, #1
    3ec6:	7021      	strb	r1, [r4, #0]
    3ec8:	e7e9      	b.n	3e9e <extract_conversion+0x29a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    3eca:	1e15      	subs	r5, r2, #0
    3ecc:	bf18      	it	ne
    3ece:	2501      	movne	r5, #1
    3ed0:	e7e7      	b.n	3ea2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
    3ed2:	78a3      	ldrb	r3, [r4, #2]
    3ed4:	2204      	movs	r2, #4
    3ed6:	f362 0302 	bfi	r3, r2, #0, #3
    3eda:	70a3      	strb	r3, [r4, #2]
			unsupported = true;
    3edc:	2501      	movs	r5, #1
			break;
    3ede:	e7e0      	b.n	3ea2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    3ee0:	78a3      	ldrb	r3, [r4, #2]
    3ee2:	2203      	movs	r2, #3
    3ee4:	f362 0302 	bfi	r3, r2, #0, #3
    3ee8:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    3eea:	7863      	ldrb	r3, [r4, #1]
    3eec:	f003 0378 	and.w	r3, r3, #120	; 0x78
    3ef0:	2b40      	cmp	r3, #64	; 0x40
    3ef2:	d1d6      	bne.n	3ea2 <extract_conversion+0x29e>
			unsupported = true;
    3ef4:	2501      	movs	r5, #1
    3ef6:	e7d4      	b.n	3ea2 <extract_conversion+0x29e>
		conv->specifier_cat = SPECIFIER_PTR;
    3ef8:	78a3      	ldrb	r3, [r4, #2]
    3efa:	2203      	movs	r2, #3
    3efc:	f362 0302 	bfi	r3, r2, #0, #3
    3f00:	70a3      	strb	r3, [r4, #2]
		if (conv->length_mod != LENGTH_NONE) {
    3f02:	7863      	ldrb	r3, [r4, #1]
    3f04:	f013 0f78 	tst.w	r3, #120	; 0x78
    3f08:	d0cb      	beq.n	3ea2 <extract_conversion+0x29e>
			unsupported = true;
    3f0a:	2501      	movs	r5, #1
    3f0c:	e7c9      	b.n	3ea2 <extract_conversion+0x29e>
		conv->invalid = true;
    3f0e:	7823      	ldrb	r3, [r4, #0]
    3f10:	f043 0301 	orr.w	r3, r3, #1
    3f14:	7023      	strb	r3, [r4, #0]
		break;
    3f16:	e7c4      	b.n	3ea2 <extract_conversion+0x29e>

00003f18 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    3f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f1c:	b083      	sub	sp, #12
    3f1e:	4604      	mov	r4, r0
    3f20:	460d      	mov	r5, r1
    3f22:	9201      	str	r2, [sp, #4]
    3f24:	469a      	mov	sl, r3
    3f26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    3f28:	78d3      	ldrb	r3, [r2, #3]
    3f2a:	4a32      	ldr	r2, [pc, #200]	; (3ff4 <encode_uint+0xdc>)
    3f2c:	f813 b002 	ldrb.w	fp, [r3, r2]
    3f30:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    3f34:	2b6f      	cmp	r3, #111	; 0x6f
    3f36:	d00f      	beq.n	3f58 <encode_uint+0x40>
    3f38:	d906      	bls.n	3f48 <encode_uint+0x30>
    3f3a:	2b70      	cmp	r3, #112	; 0x70
    3f3c:	d00f      	beq.n	3f5e <encode_uint+0x46>
    3f3e:	2b78      	cmp	r3, #120	; 0x78
    3f40:	d110      	bne.n	3f64 <encode_uint+0x4c>
		return 16;
    3f42:	f04f 0910 	mov.w	r9, #16
    3f46:	e023      	b.n	3f90 <encode_uint+0x78>
	switch (specifier) {
    3f48:	2b58      	cmp	r3, #88	; 0x58
    3f4a:	d002      	beq.n	3f52 <encode_uint+0x3a>
    3f4c:	f04f 090a 	mov.w	r9, #10
    3f50:	e01e      	b.n	3f90 <encode_uint+0x78>
		return 16;
    3f52:	f04f 0910 	mov.w	r9, #16
    3f56:	e01b      	b.n	3f90 <encode_uint+0x78>
		return 8;
    3f58:	f04f 0908 	mov.w	r9, #8
    3f5c:	e018      	b.n	3f90 <encode_uint+0x78>
		return 16;
    3f5e:	f04f 0910 	mov.w	r9, #16
    3f62:	e015      	b.n	3f90 <encode_uint+0x78>
	switch (specifier) {
    3f64:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    3f68:	e012      	b.n	3f90 <encode_uint+0x78>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
    3f6a:	b2d2      	uxtb	r2, r2
    3f6c:	3230      	adds	r2, #48	; 0x30
    3f6e:	b2d2      	uxtb	r2, r2
    3f70:	f806 2d01 	strb.w	r2, [r6, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
    3f74:	463a      	mov	r2, r7
    3f76:	4643      	mov	r3, r8
    3f78:	4620      	mov	r0, r4
    3f7a:	4629      	mov	r1, r5
    3f7c:	f7fd f91c 	bl	11b8 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    3f80:	42bc      	cmp	r4, r7
    3f82:	f175 0300 	sbcs.w	r3, r5, #0
    3f86:	d319      	bcc.n	3fbc <encode_uint+0xa4>
    3f88:	4556      	cmp	r6, sl
    3f8a:	d917      	bls.n	3fbc <encode_uint+0xa4>
		value /= radix;
    3f8c:	4604      	mov	r4, r0
    3f8e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    3f90:	f04f 0800 	mov.w	r8, #0
    3f94:	464f      	mov	r7, r9
    3f96:	464a      	mov	r2, r9
    3f98:	4643      	mov	r3, r8
    3f9a:	4620      	mov	r0, r4
    3f9c:	4629      	mov	r1, r5
    3f9e:	f7fd f90b 	bl	11b8 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3fa2:	2a09      	cmp	r2, #9
    3fa4:	d9e1      	bls.n	3f6a <encode_uint+0x52>
    3fa6:	f1bb 0f01 	cmp.w	fp, #1
    3faa:	d003      	beq.n	3fb4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3fac:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3fae:	3257      	adds	r2, #87	; 0x57
    3fb0:	b2d2      	uxtb	r2, r2
    3fb2:	e7dd      	b.n	3f70 <encode_uint+0x58>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    3fb4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3fb6:	3237      	adds	r2, #55	; 0x37
    3fb8:	b2d2      	uxtb	r2, r2
    3fba:	e7d9      	b.n	3f70 <encode_uint+0x58>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    3fbc:	9b01      	ldr	r3, [sp, #4]
    3fbe:	781b      	ldrb	r3, [r3, #0]
    3fc0:	f013 0f20 	tst.w	r3, #32
    3fc4:	d005      	beq.n	3fd2 <encode_uint+0xba>
		if (radix == 8) {
    3fc6:	f1b9 0f08 	cmp.w	r9, #8
    3fca:	d006      	beq.n	3fda <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
    3fcc:	f1b9 0f10 	cmp.w	r9, #16
    3fd0:	d009      	beq.n	3fe6 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
    3fd2:	4630      	mov	r0, r6
    3fd4:	b003      	add	sp, #12
    3fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    3fda:	9a01      	ldr	r2, [sp, #4]
    3fdc:	7893      	ldrb	r3, [r2, #2]
    3fde:	f043 0308 	orr.w	r3, r3, #8
    3fe2:	7093      	strb	r3, [r2, #2]
    3fe4:	e7f5      	b.n	3fd2 <encode_uint+0xba>
			conv->altform_0c = true;
    3fe6:	9a01      	ldr	r2, [sp, #4]
    3fe8:	7893      	ldrb	r3, [r2, #2]
    3fea:	f043 0310 	orr.w	r3, r3, #16
    3fee:	7093      	strb	r3, [r2, #2]
    3ff0:	e7ef      	b.n	3fd2 <encode_uint+0xba>
    3ff2:	bf00      	nop
    3ff4:	0001f995 	.word	0x0001f995

00003ff8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    3ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ffc:	b091      	sub	sp, #68	; 0x44
    3ffe:	4606      	mov	r6, r0
    4000:	460d      	mov	r5, r1
    4002:	4691      	mov	r9, r2
    4004:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4006:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4008:	f899 0000 	ldrb.w	r0, [r9]
    400c:	2800      	cmp	r0, #0
    400e:	f000 82d5 	beq.w	45bc <cbvprintf+0x5c4>
		if (*fp != '%') {
    4012:	2825      	cmp	r0, #37	; 0x25
    4014:	d008      	beq.n	4028 <cbvprintf+0x30>
			OUTC(*fp++);
    4016:	f109 0901 	add.w	r9, r9, #1
    401a:	4629      	mov	r1, r5
    401c:	47b0      	blx	r6
    401e:	2800      	cmp	r0, #0
    4020:	f2c0 82cd 	blt.w	45be <cbvprintf+0x5c6>
    4024:	3401      	adds	r4, #1
			continue;
    4026:	e7ef      	b.n	4008 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    4028:	2300      	movs	r3, #0
    402a:	9304      	str	r3, [sp, #16]
    402c:	9305      	str	r3, [sp, #20]
    402e:	9306      	str	r3, [sp, #24]
    4030:	9307      	str	r3, [sp, #28]
    4032:	9308      	str	r3, [sp, #32]
    4034:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    4036:	4649      	mov	r1, r9
    4038:	a806      	add	r0, sp, #24
    403a:	f7ff fde3 	bl	3c04 <extract_conversion>
    403e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    4040:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4044:	f013 0f01 	tst.w	r3, #1
    4048:	f000 8097 	beq.w	417a <cbvprintf+0x182>
			width = va_arg(ap, int);
    404c:	9b03      	ldr	r3, [sp, #12]
    404e:	1d1a      	adds	r2, r3, #4
    4050:	9203      	str	r2, [sp, #12]
    4052:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    4054:	2f00      	cmp	r7, #0
    4056:	f2c0 8088 	blt.w	416a <cbvprintf+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    405a:	f89d 3019 	ldrb.w	r3, [sp, #25]
    405e:	f013 0f04 	tst.w	r3, #4
    4062:	f000 809c 	beq.w	419e <cbvprintf+0x1a6>
			int arg = va_arg(ap, int);
    4066:	9b03      	ldr	r3, [sp, #12]
    4068:	1d1a      	adds	r2, r3, #4
    406a:	9203      	str	r2, [sp, #12]
    406c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    4070:	f1ba 0f00 	cmp.w	sl, #0
    4074:	f2c0 808a 	blt.w	418c <cbvprintf+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    4078:	2300      	movs	r3, #0
    407a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    407c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    407e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4082:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    4086:	f89d 1019 	ldrb.w	r1, [sp, #25]
    408a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    408e:	2b01      	cmp	r3, #1
    4090:	f000 808e 	beq.w	41b0 <cbvprintf+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    4094:	2b02      	cmp	r3, #2
    4096:	f000 80d3 	beq.w	4240 <cbvprintf+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    409a:	2b04      	cmp	r3, #4
    409c:	f000 8124 	beq.w	42e8 <cbvprintf+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    40a0:	2b03      	cmp	r3, #3
    40a2:	f000 813b 	beq.w	431c <cbvprintf+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    40a6:	f89d 8018 	ldrb.w	r8, [sp, #24]
    40aa:	f018 0b03 	ands.w	fp, r8, #3
    40ae:	f040 813b 	bne.w	4328 <cbvprintf+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    40b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
    40b6:	3b25      	subs	r3, #37	; 0x25
    40b8:	2b53      	cmp	r3, #83	; 0x53
    40ba:	f200 81e6 	bhi.w	448a <cbvprintf+0x492>
    40be:	e8df f013 	tbh	[pc, r3, lsl #1]
    40c2:	0140      	.short	0x0140
    40c4:	01e401e4 	.word	0x01e401e4
    40c8:	01e401e4 	.word	0x01e401e4
    40cc:	01e401e4 	.word	0x01e401e4
    40d0:	01e401e4 	.word	0x01e401e4
    40d4:	01e401e4 	.word	0x01e401e4
    40d8:	01e401e4 	.word	0x01e401e4
    40dc:	01e401e4 	.word	0x01e401e4
    40e0:	01e401e4 	.word	0x01e401e4
    40e4:	01e401e4 	.word	0x01e401e4
    40e8:	01e401e4 	.word	0x01e401e4
    40ec:	01e401e4 	.word	0x01e401e4
    40f0:	01e401e4 	.word	0x01e401e4
    40f4:	01e401e4 	.word	0x01e401e4
    40f8:	01e401e4 	.word	0x01e401e4
    40fc:	01e401e4 	.word	0x01e401e4
    4100:	01e401e4 	.word	0x01e401e4
    4104:	01e401e4 	.word	0x01e401e4
    4108:	01e401e4 	.word	0x01e401e4
    410c:	01e401e4 	.word	0x01e401e4
    4110:	01e401e4 	.word	0x01e401e4
    4114:	01e401e4 	.word	0x01e401e4
    4118:	01e401e4 	.word	0x01e401e4
    411c:	01e401e4 	.word	0x01e401e4
    4120:	01e401e4 	.word	0x01e401e4
    4124:	01e401e4 	.word	0x01e401e4
    4128:	01e40181 	.word	0x01e40181
    412c:	01e401e4 	.word	0x01e401e4
    4130:	01e401e4 	.word	0x01e401e4
    4134:	01e401e4 	.word	0x01e401e4
    4138:	01e401e4 	.word	0x01e401e4
    413c:	015e01e4 	.word	0x015e01e4
    4140:	01e40167 	.word	0x01e40167
    4144:	01e401e4 	.word	0x01e401e4
    4148:	016701e4 	.word	0x016701e4
    414c:	01e401e4 	.word	0x01e401e4
    4150:	01e401e4 	.word	0x01e401e4
    4154:	018101be 	.word	0x018101be
    4158:	01e401a2 	.word	0x01e401a2
    415c:	014d01e4 	.word	0x014d01e4
    4160:	018101e4 	.word	0x018101e4
    4164:	01e401e4 	.word	0x01e401e4
    4168:	0181      	.short	0x0181
				conv->flag_dash = true;
    416a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    416e:	f043 0304 	orr.w	r3, r3, #4
    4172:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    4176:	427f      	negs	r7, r7
    4178:	e76f      	b.n	405a <cbvprintf+0x62>
		} else if (conv->width_present) {
    417a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    417e:	2b00      	cmp	r3, #0
    4180:	db02      	blt.n	4188 <cbvprintf+0x190>
		int width = -1;
    4182:	f04f 37ff 	mov.w	r7, #4294967295
    4186:	e768      	b.n	405a <cbvprintf+0x62>
			width = conv->width_value;
    4188:	9f07      	ldr	r7, [sp, #28]
    418a:	e766      	b.n	405a <cbvprintf+0x62>
				conv->prec_present = false;
    418c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4190:	f36f 0341 	bfc	r3, #1, #1
    4194:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    4198:	f04f 3aff 	mov.w	sl, #4294967295
    419c:	e76c      	b.n	4078 <cbvprintf+0x80>
		} else if (conv->prec_present) {
    419e:	f013 0f02 	tst.w	r3, #2
    41a2:	d002      	beq.n	41aa <cbvprintf+0x1b2>
			precision = conv->prec_value;
    41a4:	f8dd a020 	ldr.w	sl, [sp, #32]
    41a8:	e766      	b.n	4078 <cbvprintf+0x80>
		int precision = -1;
    41aa:	f04f 3aff 	mov.w	sl, #4294967295
    41ae:	e763      	b.n	4078 <cbvprintf+0x80>
			switch (length_mod) {
    41b0:	1ecb      	subs	r3, r1, #3
    41b2:	2b04      	cmp	r3, #4
    41b4:	d804      	bhi.n	41c0 <cbvprintf+0x1c8>
    41b6:	e8df f003 	tbb	[pc, r3]
    41ba:	1d0b      	.short	0x1d0b
    41bc:	3529      	.short	0x3529
    41be:	35          	.byte	0x35
    41bf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    41c0:	9b03      	ldr	r3, [sp, #12]
    41c2:	1d1a      	adds	r2, r3, #4
    41c4:	9203      	str	r2, [sp, #12]
    41c6:	681b      	ldr	r3, [r3, #0]
    41c8:	17da      	asrs	r2, r3, #31
    41ca:	9304      	str	r3, [sp, #16]
    41cc:	9205      	str	r2, [sp, #20]
				break;
    41ce:	e006      	b.n	41de <cbvprintf+0x1e6>
					value->sint = va_arg(ap, long);
    41d0:	9b03      	ldr	r3, [sp, #12]
    41d2:	1d1a      	adds	r2, r3, #4
    41d4:	9203      	str	r2, [sp, #12]
    41d6:	681b      	ldr	r3, [r3, #0]
    41d8:	17da      	asrs	r2, r3, #31
    41da:	9304      	str	r3, [sp, #16]
    41dc:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    41de:	2901      	cmp	r1, #1
    41e0:	d028      	beq.n	4234 <cbvprintf+0x23c>
			} else if (length_mod == LENGTH_H) {
    41e2:	2902      	cmp	r1, #2
    41e4:	f47f af5f 	bne.w	40a6 <cbvprintf+0xae>
				value->sint = (short)value->sint;
    41e8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    41ec:	17da      	asrs	r2, r3, #31
    41ee:	9304      	str	r3, [sp, #16]
    41f0:	9205      	str	r2, [sp, #20]
    41f2:	e758      	b.n	40a6 <cbvprintf+0xae>
					(sint_value_type)va_arg(ap, long long);
    41f4:	9b03      	ldr	r3, [sp, #12]
    41f6:	3307      	adds	r3, #7
    41f8:	f023 0307 	bic.w	r3, r3, #7
    41fc:	f103 0208 	add.w	r2, r3, #8
    4200:	9203      	str	r2, [sp, #12]
    4202:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    4206:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    420a:	e7e8      	b.n	41de <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
    420c:	9b03      	ldr	r3, [sp, #12]
    420e:	3307      	adds	r3, #7
    4210:	f023 0307 	bic.w	r3, r3, #7
    4214:	f103 0208 	add.w	r2, r3, #8
    4218:	9203      	str	r2, [sp, #12]
    421a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    421e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    4222:	e7dc      	b.n	41de <cbvprintf+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4224:	9b03      	ldr	r3, [sp, #12]
    4226:	1d1a      	adds	r2, r3, #4
    4228:	9203      	str	r2, [sp, #12]
    422a:	681b      	ldr	r3, [r3, #0]
    422c:	17da      	asrs	r2, r3, #31
				value->sint =
    422e:	9304      	str	r3, [sp, #16]
    4230:	9205      	str	r2, [sp, #20]
				break;
    4232:	e7d4      	b.n	41de <cbvprintf+0x1e6>
				value->sint = (char)value->sint;
    4234:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4238:	9304      	str	r3, [sp, #16]
    423a:	2300      	movs	r3, #0
    423c:	9305      	str	r3, [sp, #20]
    423e:	e732      	b.n	40a6 <cbvprintf+0xae>
			switch (length_mod) {
    4240:	1ecb      	subs	r3, r1, #3
    4242:	2b04      	cmp	r3, #4
    4244:	d804      	bhi.n	4250 <cbvprintf+0x258>
    4246:	e8df f003 	tbb	[pc, r3]
    424a:	1f0b      	.short	0x1f0b
    424c:	4135      	.short	0x4135
    424e:	41          	.byte	0x41
    424f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    4250:	9b03      	ldr	r3, [sp, #12]
    4252:	1d1a      	adds	r2, r3, #4
    4254:	9203      	str	r2, [sp, #12]
    4256:	681b      	ldr	r3, [r3, #0]
    4258:	9304      	str	r3, [sp, #16]
    425a:	2300      	movs	r3, #0
    425c:	9305      	str	r3, [sp, #20]
				break;
    425e:	e01e      	b.n	429e <cbvprintf+0x2a6>
				    && (conv->specifier == 'c')) {
    4260:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    4264:	2b63      	cmp	r3, #99	; 0x63
    4266:	d007      	beq.n	4278 <cbvprintf+0x280>
					value->uint = va_arg(ap, unsigned long);
    4268:	9b03      	ldr	r3, [sp, #12]
    426a:	1d1a      	adds	r2, r3, #4
    426c:	9203      	str	r2, [sp, #12]
    426e:	681b      	ldr	r3, [r3, #0]
    4270:	9304      	str	r3, [sp, #16]
    4272:	2300      	movs	r3, #0
    4274:	9305      	str	r3, [sp, #20]
    4276:	e012      	b.n	429e <cbvprintf+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
    4278:	9b03      	ldr	r3, [sp, #12]
    427a:	1d1a      	adds	r2, r3, #4
    427c:	9203      	str	r2, [sp, #12]
    427e:	681b      	ldr	r3, [r3, #0]
    4280:	9304      	str	r3, [sp, #16]
    4282:	2300      	movs	r3, #0
    4284:	9305      	str	r3, [sp, #20]
    4286:	e00a      	b.n	429e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap,
    4288:	9b03      	ldr	r3, [sp, #12]
    428a:	3307      	adds	r3, #7
    428c:	f023 0307 	bic.w	r3, r3, #7
    4290:	f103 0208 	add.w	r2, r3, #8
    4294:	9203      	str	r2, [sp, #12]
    4296:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    429a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    429e:	2901      	cmp	r1, #1
    42a0:	d01c      	beq.n	42dc <cbvprintf+0x2e4>
			} else if (length_mod == LENGTH_H) {
    42a2:	2902      	cmp	r1, #2
    42a4:	f47f aeff 	bne.w	40a6 <cbvprintf+0xae>
				value->uint = (unsigned short)value->uint;
    42a8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    42ac:	9304      	str	r3, [sp, #16]
    42ae:	2300      	movs	r3, #0
    42b0:	9305      	str	r3, [sp, #20]
    42b2:	e6f8      	b.n	40a6 <cbvprintf+0xae>
					(uint_value_type)va_arg(ap,
    42b4:	9b03      	ldr	r3, [sp, #12]
    42b6:	3307      	adds	r3, #7
    42b8:	f023 0307 	bic.w	r3, r3, #7
    42bc:	f103 0208 	add.w	r2, r3, #8
    42c0:	9203      	str	r2, [sp, #12]
    42c2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    42c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    42ca:	e7e8      	b.n	429e <cbvprintf+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
    42cc:	9b03      	ldr	r3, [sp, #12]
    42ce:	1d1a      	adds	r2, r3, #4
    42d0:	9203      	str	r2, [sp, #12]
    42d2:	681b      	ldr	r3, [r3, #0]
				value->uint =
    42d4:	9304      	str	r3, [sp, #16]
    42d6:	2300      	movs	r3, #0
    42d8:	9305      	str	r3, [sp, #20]
				break;
    42da:	e7e0      	b.n	429e <cbvprintf+0x2a6>
				value->uint = (unsigned char)value->uint;
    42dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    42e0:	9304      	str	r3, [sp, #16]
    42e2:	2300      	movs	r3, #0
    42e4:	9305      	str	r3, [sp, #20]
    42e6:	e6de      	b.n	40a6 <cbvprintf+0xae>
			if (length_mod == LENGTH_UPPER_L) {
    42e8:	2908      	cmp	r1, #8
    42ea:	d00b      	beq.n	4304 <cbvprintf+0x30c>
				value->dbl = va_arg(ap, double);
    42ec:	9b03      	ldr	r3, [sp, #12]
    42ee:	3307      	adds	r3, #7
    42f0:	f023 0307 	bic.w	r3, r3, #7
    42f4:	f103 0208 	add.w	r2, r3, #8
    42f8:	9203      	str	r2, [sp, #12]
    42fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    42fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4302:	e6d0      	b.n	40a6 <cbvprintf+0xae>
				value->ldbl = va_arg(ap, long double);
    4304:	9b03      	ldr	r3, [sp, #12]
    4306:	3307      	adds	r3, #7
    4308:	f023 0307 	bic.w	r3, r3, #7
    430c:	f103 0208 	add.w	r2, r3, #8
    4310:	9203      	str	r2, [sp, #12]
    4312:	e9d3 2300 	ldrd	r2, r3, [r3]
    4316:	e9cd 2304 	strd	r2, r3, [sp, #16]
    431a:	e6c4      	b.n	40a6 <cbvprintf+0xae>
			value->ptr = va_arg(ap, void *);
    431c:	9b03      	ldr	r3, [sp, #12]
    431e:	1d1a      	adds	r2, r3, #4
    4320:	9203      	str	r2, [sp, #12]
    4322:	681b      	ldr	r3, [r3, #0]
    4324:	9304      	str	r3, [sp, #16]
    4326:	e6be      	b.n	40a6 <cbvprintf+0xae>
			OUTS(sp, fp);
    4328:	9f02      	ldr	r7, [sp, #8]
    432a:	463b      	mov	r3, r7
    432c:	464a      	mov	r2, r9
    432e:	4629      	mov	r1, r5
    4330:	4630      	mov	r0, r6
    4332:	f015 fa32 	bl	1979a <outs>
    4336:	2800      	cmp	r0, #0
    4338:	f2c0 8141 	blt.w	45be <cbvprintf+0x5c6>
    433c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    433e:	46b9      	mov	r9, r7
			continue;
    4340:	e662      	b.n	4008 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    4342:	4629      	mov	r1, r5
    4344:	2025      	movs	r0, #37	; 0x25
    4346:	47b0      	blx	r6
    4348:	2800      	cmp	r0, #0
    434a:	f2c0 8138 	blt.w	45be <cbvprintf+0x5c6>
    434e:	3401      	adds	r4, #1
		char sign = 0;
    4350:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    4352:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4356:	f04f 0900 	mov.w	r9, #0
			break;
    435a:	e09b      	b.n	4494 <cbvprintf+0x49c>
		case 's': {
			bps = (const char *)value->ptr;
    435c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    4360:	f1ba 0f00 	cmp.w	sl, #0
    4364:	db07      	blt.n	4376 <cbvprintf+0x37e>
				len = strnlen(bps, precision);
    4366:	4651      	mov	r1, sl
    4368:	4648      	mov	r0, r9
    436a:	f010 fbf9 	bl	14b60 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    436e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    4372:	46d8      	mov	r8, fp
			precision = -1;

			break;
    4374:	e08e      	b.n	4494 <cbvprintf+0x49c>
				len = strlen(bps);
    4376:	4648      	mov	r0, r9
    4378:	f7fb fec2 	bl	100 <strlen>
    437c:	e7f7      	b.n	436e <cbvprintf+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    437e:	9b04      	ldr	r3, [sp, #16]
    4380:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    4384:	46d8      	mov	r8, fp
			bpe = buf + 1;
    4386:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    438a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    438e:	e081      	b.n	4494 <cbvprintf+0x49c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    4390:	f018 0f08 	tst.w	r8, #8
    4394:	d105      	bne.n	43a2 <cbvprintf+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
    4396:	f018 0810 	ands.w	r8, r8, #16
    439a:	d004      	beq.n	43a6 <cbvprintf+0x3ae>
				sign = ' ';
    439c:	f04f 0820 	mov.w	r8, #32
    43a0:	e001      	b.n	43a6 <cbvprintf+0x3ae>
				sign = '+';
    43a2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    43a6:	9a04      	ldr	r2, [sp, #16]
    43a8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    43aa:	2b00      	cmp	r3, #0
    43ac:	db02      	blt.n	43b4 <cbvprintf+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    43ae:	9204      	str	r2, [sp, #16]
    43b0:	9305      	str	r3, [sp, #20]
    43b2:	e008      	b.n	43c6 <cbvprintf+0x3ce>
				value->uint = (uint_value_type)-sint;
    43b4:	4252      	negs	r2, r2
    43b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    43ba:	9204      	str	r2, [sp, #16]
    43bc:	9305      	str	r3, [sp, #20]
				sign = '-';
    43be:	f04f 082d 	mov.w	r8, #45	; 0x2d
    43c2:	e000      	b.n	43c6 <cbvprintf+0x3ce>
		switch (conv->specifier) {
    43c4:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    43c6:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    43ca:	9300      	str	r3, [sp, #0]
    43cc:	ab0a      	add	r3, sp, #40	; 0x28
    43ce:	aa06      	add	r2, sp, #24
    43d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    43d4:	f7ff fda0 	bl	3f18 <encode_uint>
    43d8:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    43da:	f1ba 0f00 	cmp.w	sl, #0
    43de:	f2c0 8088 	blt.w	44f2 <cbvprintf+0x4fa>
				size_t len = bpe - bps;
    43e2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    43e6:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    43ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
    43ee:	f36f 1286 	bfc	r2, #6, #1
    43f2:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    43f6:	459a      	cmp	sl, r3
    43f8:	d97e      	bls.n	44f8 <cbvprintf+0x500>
					conv->pad0_value = precision - (int)len;
    43fa:	ebaa 0303 	sub.w	r3, sl, r3
    43fe:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    4400:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4404:	e046      	b.n	4494 <cbvprintf+0x49c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    4406:	9804      	ldr	r0, [sp, #16]
    4408:	b928      	cbnz	r0, 4416 <cbvprintf+0x41e>
		char sign = 0;
    440a:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    440c:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 45c4 <cbvprintf+0x5cc>
			bps = "(nil)";
    4410:	f1aa 0905 	sub.w	r9, sl, #5
    4414:	e03e      	b.n	4494 <cbvprintf+0x49c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4416:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    441a:	9300      	str	r3, [sp, #0]
    441c:	ab0a      	add	r3, sp, #40	; 0x28
    441e:	aa06      	add	r2, sp, #24
    4420:	2100      	movs	r1, #0
    4422:	f7ff fd79 	bl	3f18 <encode_uint>
    4426:	4681      	mov	r9, r0
				conv->altform_0c = true;
    4428:	f89d 301a 	ldrb.w	r3, [sp, #26]
    442c:	f043 0310 	orr.w	r3, r3, #16
    4430:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    4434:	2378      	movs	r3, #120	; 0x78
    4436:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    443a:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    443c:	e7cd      	b.n	43da <cbvprintf+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    443e:	9a04      	ldr	r2, [sp, #16]
	switch ((enum length_mod_enum)conv->length_mod) {
    4440:	f89d 3019 	ldrb.w	r3, [sp, #25]
    4444:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    4448:	2b07      	cmp	r3, #7
    444a:	d806      	bhi.n	445a <cbvprintf+0x462>
    444c:	e8df f003 	tbb	[pc, r3]
    4450:	0f0d0b04 	.word	0x0f0d0b04
    4454:	1b191511 	.word	0x1b191511
		*(int *)dp = count;
    4458:	6014      	str	r4, [r2, #0]
		char sign = 0;
    445a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    445c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    4460:	f04f 0900 	mov.w	r9, #0
}
    4464:	e016      	b.n	4494 <cbvprintf+0x49c>
		*(signed char *)dp = (signed char)count;
    4466:	7014      	strb	r4, [r2, #0]
		break;
    4468:	e7f7      	b.n	445a <cbvprintf+0x462>
		*(short *)dp = (short)count;
    446a:	8014      	strh	r4, [r2, #0]
		break;
    446c:	e7f5      	b.n	445a <cbvprintf+0x462>
		*(long *)dp = (long)count;
    446e:	6014      	str	r4, [r2, #0]
		break;
    4470:	e7f3      	b.n	445a <cbvprintf+0x462>
		*(long long *)dp = (long long)count;
    4472:	17e3      	asrs	r3, r4, #31
    4474:	6014      	str	r4, [r2, #0]
    4476:	6053      	str	r3, [r2, #4]
		break;
    4478:	e7ef      	b.n	445a <cbvprintf+0x462>
		*(intmax_t *)dp = (intmax_t)count;
    447a:	17e3      	asrs	r3, r4, #31
    447c:	6014      	str	r4, [r2, #0]
    447e:	6053      	str	r3, [r2, #4]
		break;
    4480:	e7eb      	b.n	445a <cbvprintf+0x462>
		*(size_t *)dp = (size_t)count;
    4482:	6014      	str	r4, [r2, #0]
		break;
    4484:	e7e9      	b.n	445a <cbvprintf+0x462>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4486:	6014      	str	r4, [r2, #0]
		break;
    4488:	e7e7      	b.n	445a <cbvprintf+0x462>
		switch (conv->specifier) {
    448a:	46d8      	mov	r8, fp
    448c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    4490:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    4494:	f1b9 0f00 	cmp.w	r9, #0
    4498:	f000 808d 	beq.w	45b6 <cbvprintf+0x5be>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    449c:	ebaa 0209 	sub.w	r2, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    44a0:	f1b8 0f00 	cmp.w	r8, #0
    44a4:	d000      	beq.n	44a8 <cbvprintf+0x4b0>
			nj_len += 1U;
    44a6:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    44a8:	f89d 101a 	ldrb.w	r1, [sp, #26]
    44ac:	f011 0f10 	tst.w	r1, #16
    44b0:	d025      	beq.n	44fe <cbvprintf+0x506>
			nj_len += 2U;
    44b2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    44b4:	9b07      	ldr	r3, [sp, #28]
    44b6:	4413      	add	r3, r2
		if (conv->pad_fp) {
    44b8:	f011 0f40 	tst.w	r1, #64	; 0x40
    44bc:	d001      	beq.n	44c2 <cbvprintf+0x4ca>
			nj_len += conv->pad0_pre_exp;
    44be:	9a08      	ldr	r2, [sp, #32]
    44c0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    44c2:	2f00      	cmp	r7, #0
    44c4:	dd31      	ble.n	452a <cbvprintf+0x532>
			width -= (int)nj_len;
    44c6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    44c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    44cc:	f013 0f04 	tst.w	r3, #4
    44d0:	d12b      	bne.n	452a <cbvprintf+0x532>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    44d2:	f013 0f40 	tst.w	r3, #64	; 0x40
    44d6:	d017      	beq.n	4508 <cbvprintf+0x510>
					if (sign != 0) {
    44d8:	f1b8 0f00 	cmp.w	r8, #0
    44dc:	d017      	beq.n	450e <cbvprintf+0x516>
						OUTC(sign);
    44de:	4629      	mov	r1, r5
    44e0:	4640      	mov	r0, r8
    44e2:	47b0      	blx	r6
    44e4:	2800      	cmp	r0, #0
    44e6:	db6a      	blt.n	45be <cbvprintf+0x5c6>
    44e8:	3401      	adds	r4, #1
						sign = 0;
    44ea:	46d8      	mov	r8, fp
					}
					pad = '0';
    44ec:	f04f 0b30 	mov.w	fp, #48	; 0x30
    44f0:	e00f      	b.n	4512 <cbvprintf+0x51a>
		const char *bpe = buf + sizeof(buf);
    44f2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    44f6:	e7cd      	b.n	4494 <cbvprintf+0x49c>
    44f8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    44fc:	e7ca      	b.n	4494 <cbvprintf+0x49c>
		} else if (conv->altform_0) {
    44fe:	f011 0f08 	tst.w	r1, #8
    4502:	d0d7      	beq.n	44b4 <cbvprintf+0x4bc>
			nj_len += 1U;
    4504:	3201      	adds	r2, #1
    4506:	e7d5      	b.n	44b4 <cbvprintf+0x4bc>
				char pad = ' ';
    4508:	f04f 0b20 	mov.w	fp, #32
    450c:	e001      	b.n	4512 <cbvprintf+0x51a>
					pad = '0';
    450e:	f04f 0b30 	mov.w	fp, #48	; 0x30
    4512:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    4514:	1e5f      	subs	r7, r3, #1
    4516:	2b00      	cmp	r3, #0
    4518:	dd07      	ble.n	452a <cbvprintf+0x532>
					OUTC(pad);
    451a:	4629      	mov	r1, r5
    451c:	4658      	mov	r0, fp
    451e:	47b0      	blx	r6
    4520:	2800      	cmp	r0, #0
    4522:	db4c      	blt.n	45be <cbvprintf+0x5c6>
    4524:	3401      	adds	r4, #1
				while (width-- > 0) {
    4526:	463b      	mov	r3, r7
    4528:	e7f4      	b.n	4514 <cbvprintf+0x51c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    452a:	f1b8 0f00 	cmp.w	r8, #0
    452e:	d005      	beq.n	453c <cbvprintf+0x544>
			OUTC(sign);
    4530:	4629      	mov	r1, r5
    4532:	4640      	mov	r0, r8
    4534:	47b0      	blx	r6
    4536:	2800      	cmp	r0, #0
    4538:	db41      	blt.n	45be <cbvprintf+0x5c6>
    453a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    453c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    4540:	f3c3 1200 	ubfx	r2, r3, #4, #1
    4544:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    4548:	4313      	orrs	r3, r2
    454a:	d005      	beq.n	4558 <cbvprintf+0x560>
				OUTC('0');
    454c:	4629      	mov	r1, r5
    454e:	2030      	movs	r0, #48	; 0x30
    4550:	47b0      	blx	r6
    4552:	2800      	cmp	r0, #0
    4554:	db33      	blt.n	45be <cbvprintf+0x5c6>
    4556:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    4558:	f89d 301a 	ldrb.w	r3, [sp, #26]
    455c:	f013 0f10 	tst.w	r3, #16
    4560:	d006      	beq.n	4570 <cbvprintf+0x578>
				OUTC(conv->specifier);
    4562:	4629      	mov	r1, r5
    4564:	f89d 001b 	ldrb.w	r0, [sp, #27]
    4568:	47b0      	blx	r6
    456a:	2800      	cmp	r0, #0
    456c:	db27      	blt.n	45be <cbvprintf+0x5c6>
    456e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    4570:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    4572:	f103 38ff 	add.w	r8, r3, #4294967295
    4576:	2b00      	cmp	r3, #0
    4578:	dd07      	ble.n	458a <cbvprintf+0x592>
				OUTC('0');
    457a:	4629      	mov	r1, r5
    457c:	2030      	movs	r0, #48	; 0x30
    457e:	47b0      	blx	r6
    4580:	2800      	cmp	r0, #0
    4582:	db1c      	blt.n	45be <cbvprintf+0x5c6>
    4584:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    4586:	4643      	mov	r3, r8
    4588:	e7f3      	b.n	4572 <cbvprintf+0x57a>
			}

			OUTS(bps, bpe);
    458a:	4653      	mov	r3, sl
    458c:	464a      	mov	r2, r9
    458e:	4629      	mov	r1, r5
    4590:	4630      	mov	r0, r6
    4592:	f015 f902 	bl	1979a <outs>
    4596:	2800      	cmp	r0, #0
    4598:	db11      	blt.n	45be <cbvprintf+0x5c6>
    459a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    459c:	2f00      	cmp	r7, #0
    459e:	dd07      	ble.n	45b0 <cbvprintf+0x5b8>
			OUTC(' ');
    45a0:	4629      	mov	r1, r5
    45a2:	2020      	movs	r0, #32
    45a4:	47b0      	blx	r6
    45a6:	2800      	cmp	r0, #0
    45a8:	db09      	blt.n	45be <cbvprintf+0x5c6>
    45aa:	3401      	adds	r4, #1
			--width;
    45ac:	3f01      	subs	r7, #1
    45ae:	e7f5      	b.n	459c <cbvprintf+0x5a4>
		fp = extract_conversion(conv, sp);
    45b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
    45b4:	e528      	b.n	4008 <cbvprintf+0x10>
    45b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    45ba:	e525      	b.n	4008 <cbvprintf+0x10>
		}
	}

	return count;
    45bc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    45be:	b011      	add	sp, #68	; 0x44
    45c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45c4:	0001e869 	.word	0x0001e869

000045c8 <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    45c8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = _current_cpu->id;
    45ca:	4b2a      	ldr	r3, [pc, #168]	; (4674 <pm_system_resume+0xac>)
    45cc:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    45ce:	f005 031f 	and.w	r3, r5, #31
    45d2:	2201      	movs	r2, #1
    45d4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    45d6:	0969      	lsrs	r1, r5, #5
    45d8:	4b27      	ldr	r3, [pc, #156]	; (4678 <pm_system_resume+0xb0>)
    45da:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    45de:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    45e0:	f3bf 8f5b 	dmb	ish
    45e4:	e853 1f00 	ldrex	r1, [r3]
    45e8:	ea01 0400 	and.w	r4, r1, r0
    45ec:	e843 4600 	strex	r6, r4, [r3]
    45f0:	2e00      	cmp	r6, #0
    45f2:	d1f7      	bne.n	45e4 <pm_system_resume+0x1c>
    45f4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    45f8:	420a      	tst	r2, r1
    45fa:	d100      	bne.n	45fe <pm_system_resume+0x36>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    45fc:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    45fe:	481f      	ldr	r0, [pc, #124]	; (467c <pm_system_resume+0xb4>)
    4600:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4604:	0093      	lsls	r3, r2, #2
    4606:	18c1      	adds	r1, r0, r3
	if (pm_state_exit_post_ops != NULL) {
    4608:	4a1d      	ldr	r2, [pc, #116]	; (4680 <pm_system_resume+0xb8>)
    460a:	b172      	cbz	r2, 462a <pm_system_resume+0x62>
		pm_state_exit_post_ops(info->state, info->substate_id);
    460c:	7849      	ldrb	r1, [r1, #1]
    460e:	5cc0      	ldrb	r0, [r0, r3]
    4610:	f015 f9e0 	bl	199d4 <pm_state_exit_post_ops>
    4614:	f04f 0320 	mov.w	r3, #32
    4618:	f3ef 8611 	mrs	r6, BASEPRI
    461c:	f383 8812 	msr	BASEPRI_MAX, r3
    4620:	f3bf 8f6f 	isb	sy
    4624:	4b17      	ldr	r3, [pc, #92]	; (4684 <pm_system_resume+0xbc>)
    4626:	681c      	ldr	r4, [r3, #0]
    4628:	e010      	b.n	464c <pm_system_resume+0x84>
	__asm__ volatile(
    462a:	2300      	movs	r3, #0
    462c:	f383 8811 	msr	BASEPRI, r3
    4630:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4634:	e7ee      	b.n	4614 <pm_system_resume+0x4c>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4636:	4b0f      	ldr	r3, [pc, #60]	; (4674 <pm_system_resume+0xac>)
    4638:	7d1b      	ldrb	r3, [r3, #20]
    463a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    463e:	0099      	lsls	r1, r3, #2
    4640:	4b0e      	ldr	r3, [pc, #56]	; (467c <pm_system_resume+0xb4>)
    4642:	5c58      	ldrb	r0, [r3, r1]
    4644:	4790      	blx	r2
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    4646:	b10c      	cbz	r4, 464c <pm_system_resume+0x84>
	return node->next;
    4648:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    464a:	b124      	cbz	r4, 4656 <pm_system_resume+0x8e>
    464c:	b11c      	cbz	r4, 4656 <pm_system_resume+0x8e>
			callback = notifier->state_exit;
    464e:	68a2      	ldr	r2, [r4, #8]
		if (callback) {
    4650:	2a00      	cmp	r2, #0
    4652:	d1f0      	bne.n	4636 <pm_system_resume+0x6e>
    4654:	e7f7      	b.n	4646 <pm_system_resume+0x7e>
	__asm__ volatile(
    4656:	f386 8811 	msr	BASEPRI, r6
    465a:	f3bf 8f6f 	isb	sy
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    465e:	4807      	ldr	r0, [pc, #28]	; (467c <pm_system_resume+0xb4>)
    4660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4664:	00aa      	lsls	r2, r5, #2
    4666:	1881      	adds	r1, r0, r2
    4668:	2300      	movs	r3, #0
    466a:	5083      	str	r3, [r0, r2]
    466c:	604b      	str	r3, [r1, #4]
    466e:	608b      	str	r3, [r1, #8]
}
    4670:	e7c4      	b.n	45fc <pm_system_resume+0x34>
    4672:	bf00      	nop
    4674:	20009210 	.word	0x20009210
    4678:	200021fc 	.word	0x200021fc
    467c:	200021ec 	.word	0x200021ec
    4680:	000199d5 	.word	0x000199d5
    4684:	200021e4 	.word	0x200021e4

00004688 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	4604      	mov	r4, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    468c:	4b57      	ldr	r3, [pc, #348]	; (47ec <pm_system_suspend+0x164>)
    468e:	7d1d      	ldrb	r5, [r3, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    4690:	096a      	lsrs	r2, r5, #5
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4692:	f3bf 8f5b 	dmb	ish
    4696:	4b56      	ldr	r3, [pc, #344]	; (47f0 <pm_system_suspend+0x168>)
    4698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    469c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    46a0:	f005 021f 	and.w	r2, r5, #31
    46a4:	4113      	asrs	r3, r2

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    46a6:	f013 0f01 	tst.w	r3, #1
    46aa:	d015      	beq.n	46d8 <pm_system_suspend+0x50>
		if (info != NULL) {
			z_cpus_pm_state[id] = *info;
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    46ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    46b0:	4a50      	ldr	r2, [pc, #320]	; (47f4 <pm_system_suspend+0x16c>)
    46b2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    46b6:	b1f3      	cbz	r3, 46f6 <pm_system_suspend+0x6e>
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    46b8:	f1b4 3fff 	cmp.w	r4, #4294967295
    46bc:	d131      	bne.n	4722 <pm_system_suspend+0x9a>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    46be:	f00e fe79 	bl	133b4 <k_sched_lock>
	__asm__ volatile(
    46c2:	f04f 0320 	mov.w	r3, #32
    46c6:	f3ef 8611 	mrs	r6, BASEPRI
    46ca:	f383 8812 	msr	BASEPRI_MAX, r3
    46ce:	f3bf 8f6f 	isb	sy
	return list->head;
    46d2:	4b49      	ldr	r3, [pc, #292]	; (47f8 <pm_system_suspend+0x170>)
    46d4:	681c      	ldr	r4, [r3, #0]
    46d6:	e045      	b.n	4764 <pm_system_suspend+0xdc>
		info = pm_policy_next_state(id, ticks);
    46d8:	4601      	mov	r1, r0
    46da:	4628      	mov	r0, r5
    46dc:	f000 f8a4 	bl	4828 <pm_policy_next_state>
		if (info != NULL) {
    46e0:	2800      	cmp	r0, #0
    46e2:	d0e3      	beq.n	46ac <pm_system_suspend+0x24>
			z_cpus_pm_state[id] = *info;
    46e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    46e8:	4a42      	ldr	r2, [pc, #264]	; (47f4 <pm_system_suspend+0x16c>)
    46ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    46ee:	c807      	ldmia	r0, {r0, r1, r2}
    46f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    46f4:	e7da      	b.n	46ac <pm_system_suspend+0x24>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    46f6:	f005 021f 	and.w	r2, r5, #31
    46fa:	2301      	movs	r3, #1
    46fc:	4093      	lsls	r3, r2

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    46fe:	096d      	lsrs	r5, r5, #5
    4700:	4a3b      	ldr	r2, [pc, #236]	; (47f0 <pm_system_suspend+0x168>)
    4702:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    4706:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4708:	f3bf 8f5b 	dmb	ish
    470c:	e855 2f00 	ldrex	r2, [r5]
    4710:	401a      	ands	r2, r3
    4712:	e845 2100 	strex	r1, r2, [r5]
    4716:	2900      	cmp	r1, #0
    4718:	d1f8      	bne.n	470c <pm_system_suspend+0x84>
    471a:	f3bf 8f5b 	dmb	ish
		ret = false;
    471e:	2000      	movs	r0, #0
		goto end;
    4720:	e062      	b.n	47e8 <pm_system_suspend+0x160>
		     k_us_to_ticks_ceil32(
    4722:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    4726:	4a33      	ldr	r2, [pc, #204]	; (47f4 <pm_system_suspend+0x16c>)
    4728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    472c:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    472e:	0c41      	lsrs	r1, r0, #17
    4730:	03c0      	lsls	r0, r0, #15
    4732:	4b32      	ldr	r3, [pc, #200]	; (47fc <pm_system_suspend+0x174>)
    4734:	18c0      	adds	r0, r0, r3
    4736:	4a32      	ldr	r2, [pc, #200]	; (4800 <pm_system_suspend+0x178>)
    4738:	f04f 0300 	mov.w	r3, #0
    473c:	f141 0100 	adc.w	r1, r1, #0
    4740:	f7fc fd3a 	bl	11b8 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    4744:	2101      	movs	r1, #1
    4746:	1a20      	subs	r0, r4, r0
    4748:	f019 fd41 	bl	1e1ce <z_set_timeout_expiry>
    474c:	e7b7      	b.n	46be <pm_system_suspend+0x36>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    474e:	4b27      	ldr	r3, [pc, #156]	; (47ec <pm_system_suspend+0x164>)
    4750:	7d1b      	ldrb	r3, [r3, #20]
    4752:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4756:	4927      	ldr	r1, [pc, #156]	; (47f4 <pm_system_suspend+0x16c>)
    4758:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    475c:	4790      	blx	r2
Z_GENLIST_PEEK_NEXT(slist, snode)
    475e:	b10c      	cbz	r4, 4764 <pm_system_suspend+0xdc>
	return node->next;
    4760:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4762:	b124      	cbz	r4, 476e <pm_system_suspend+0xe6>
    4764:	b11c      	cbz	r4, 476e <pm_system_suspend+0xe6>
			callback = notifier->state_entry;
    4766:	6862      	ldr	r2, [r4, #4]
		if (callback) {
    4768:	2a00      	cmp	r2, #0
    476a:	d1f0      	bne.n	474e <pm_system_suspend+0xc6>
    476c:	e7f7      	b.n	475e <pm_system_suspend+0xd6>
	__asm__ volatile(
    476e:	f386 8811 	msr	BASEPRI, r6
    4772:	f3bf 8f6f 	isb	sy
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4776:	f005 031f 	and.w	r3, r5, #31
    477a:	2101      	movs	r1, #1
    477c:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    477e:	096b      	lsrs	r3, r5, #5
    4780:	4a20      	ldr	r2, [pc, #128]	; (4804 <pm_system_suspend+0x17c>)
    4782:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4786:	f3bf 8f5b 	dmb	ish
    478a:	e853 2f00 	ldrex	r2, [r3]
    478e:	430a      	orrs	r2, r1
    4790:	e843 2000 	strex	r0, r2, [r3]
    4794:	2800      	cmp	r0, #0
    4796:	d1f8      	bne.n	478a <pm_system_suspend+0x102>
    4798:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    479c:	4b1a      	ldr	r3, [pc, #104]	; (4808 <pm_system_suspend+0x180>)
    479e:	b14b      	cbz	r3, 47b4 <pm_system_suspend+0x12c>
		pm_state_set(info->state, info->substate_id);
    47a0:	4b14      	ldr	r3, [pc, #80]	; (47f4 <pm_system_suspend+0x16c>)
    47a2:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    47a6:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    47aa:	7849      	ldrb	r1, [r1, #1]
    47ac:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    47b0:	f015 f904 	bl	199bc <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    47b4:	f7ff ff08 	bl	45c8 <pm_system_resume>
	atomic_val_t mask = ATOMIC_MASK(bit);
    47b8:	f005 031f 	and.w	r3, r5, #31
    47bc:	2401      	movs	r4, #1
    47be:	fa04 f303 	lsl.w	r3, r4, r3
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    47c2:	096d      	lsrs	r5, r5, #5
    47c4:	4a0a      	ldr	r2, [pc, #40]	; (47f0 <pm_system_suspend+0x168>)
    47c6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    47ca:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    47cc:	f3bf 8f5b 	dmb	ish
    47d0:	e855 2f00 	ldrex	r2, [r5]
    47d4:	401a      	ands	r2, r3
    47d6:	e845 2100 	strex	r1, r2, [r5]
    47da:	2900      	cmp	r1, #0
    47dc:	d1f8      	bne.n	47d0 <pm_system_suspend+0x148>
    47de:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(z_cpus_pm_state_forced, id);
	k_sched_unlock();
    47e2:	f00f f809 	bl	137f8 <k_sched_unlock>
	bool ret = true;
    47e6:	4620      	mov	r0, r4
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    47e8:	bd70      	pop	{r4, r5, r6, pc}
    47ea:	bf00      	nop
    47ec:	20009210 	.word	0x20009210
    47f0:	200021f8 	.word	0x200021f8
    47f4:	200021ec 	.word	0x200021ec
    47f8:	200021e4 	.word	0x200021e4
    47fc:	000f423f 	.word	0x000f423f
    4800:	000f4240 	.word	0x000f4240
    4804:	200021fc 	.word	0x200021fc
    4808:	000199bd 	.word	0x000199bd

0000480c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    480c:	f3bf 8f5b 	dmb	ish
    4810:	4b04      	ldr	r3, [pc, #16]	; (4824 <pm_policy_state_lock_is_active+0x18>)
    4812:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4816:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    481a:	3800      	subs	r0, #0
    481c:	bf18      	it	ne
    481e:	2001      	movne	r0, #1
    4820:	4770      	bx	lr
    4822:	bf00      	nop
    4824:	20002200 	.word	0x20002200

00004828 <pm_policy_next_state>:
{
    4828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    482c:	b082      	sub	sp, #8
    482e:	460e      	mov	r6, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4830:	a901      	add	r1, sp, #4
    4832:	f000 f843 	bl	48bc <pm_state_cpu_get_all>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4836:	1e44      	subs	r4, r0, #1
    4838:	b224      	sxth	r4, r4
    483a:	e007      	b.n	484c <pm_policy_next_state+0x24>
		if ((ticks == K_TICKS_FOREVER) ||
    483c:	f1b6 3fff 	cmp.w	r6, #4294967295
    4840:	d032      	beq.n	48a8 <pm_policy_next_state+0x80>
		    (ticks >= (min_residency + exit_latency))) {
    4842:	4440      	add	r0, r8
		if ((ticks == K_TICKS_FOREVER) ||
    4844:	42b0      	cmp	r0, r6
    4846:	d92f      	bls.n	48a8 <pm_policy_next_state+0x80>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4848:	3c01      	subs	r4, #1
    484a:	b224      	sxth	r4, r4
    484c:	2c00      	cmp	r4, #0
    484e:	db2a      	blt.n	48a6 <pm_policy_next_state+0x7e>
		const struct pm_state_info *state = &cpu_states[i];
    4850:	9b01      	ldr	r3, [sp, #4]
    4852:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4856:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    485a:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    485e:	f7ff ffd5 	bl	480c <pm_policy_state_lock_is_active>
    4862:	2800      	cmp	r0, #0
    4864:	d1f0      	bne.n	4848 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    4866:	6868      	ldr	r0, [r5, #4]
    4868:	0c41      	lsrs	r1, r0, #17
    486a:	03c0      	lsls	r0, r0, #15
    486c:	4f10      	ldr	r7, [pc, #64]	; (48b0 <pm_policy_next_state+0x88>)
    486e:	19c0      	adds	r0, r0, r7
    4870:	4a10      	ldr	r2, [pc, #64]	; (48b4 <pm_policy_next_state+0x8c>)
    4872:	f04f 0300 	mov.w	r3, #0
    4876:	f141 0100 	adc.w	r1, r1, #0
    487a:	f7fc fc9d 	bl	11b8 <__aeabi_uldivmod>
    487e:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    4880:	68ab      	ldr	r3, [r5, #8]
    4882:	0c59      	lsrs	r1, r3, #17
    4884:	03db      	lsls	r3, r3, #15
    4886:	19d8      	adds	r0, r3, r7
    4888:	4a0a      	ldr	r2, [pc, #40]	; (48b4 <pm_policy_next_state+0x8c>)
    488a:	f04f 0300 	mov.w	r3, #0
    488e:	f141 0100 	adc.w	r1, r1, #0
    4892:	f7fc fc91 	bl	11b8 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4896:	4b08      	ldr	r3, [pc, #32]	; (48b8 <pm_policy_next_state+0x90>)
    4898:	681b      	ldr	r3, [r3, #0]
    489a:	f1b3 3fff 	cmp.w	r3, #4294967295
    489e:	d0cd      	beq.n	483c <pm_policy_next_state+0x14>
    48a0:	4283      	cmp	r3, r0
    48a2:	d8cb      	bhi.n	483c <pm_policy_next_state+0x14>
    48a4:	e7d0      	b.n	4848 <pm_policy_next_state+0x20>
	return NULL;
    48a6:	2500      	movs	r5, #0
}
    48a8:	4628      	mov	r0, r5
    48aa:	b002      	add	sp, #8
    48ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48b0:	000f423f 	.word	0x000f423f
    48b4:	000f4240 	.word	0x000f4240
    48b8:	200003a4 	.word	0x200003a4

000048bc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    48bc:	b908      	cbnz	r0, 48c2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    48be:	4b02      	ldr	r3, [pc, #8]	; (48c8 <pm_state_cpu_get_all+0xc>)
    48c0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    48c2:	2000      	movs	r0, #0
    48c4:	4770      	bx	lr
    48c6:	bf00      	nop
    48c8:	0001e86c 	.word	0x0001e86c

000048cc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    48cc:	4901      	ldr	r1, [pc, #4]	; (48d4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    48ce:	2210      	movs	r2, #16
	str	r2, [r1]
    48d0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    48d2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    48d4:	e000ed10 	.word	0xe000ed10

000048d8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    48d8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    48da:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    48dc:	f380 8811 	msr	BASEPRI, r0
	isb
    48e0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    48e4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    48e8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    48ea:	b662      	cpsie	i
	isb
    48ec:	f3bf 8f6f 	isb	sy

	bx	lr
    48f0:	4770      	bx	lr
    48f2:	bf00      	nop

000048f4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    48f4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    48f6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    48f8:	f381 8811 	msr	BASEPRI, r1

	wfe
    48fc:	bf20      	wfe

	msr	BASEPRI, r0
    48fe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4902:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4904:	4770      	bx	lr
    4906:	bf00      	nop

00004908 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4908:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    490a:	2800      	cmp	r0, #0
    490c:	db07      	blt.n	491e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    490e:	f000 021f 	and.w	r2, r0, #31
    4912:	0940      	lsrs	r0, r0, #5
    4914:	2301      	movs	r3, #1
    4916:	4093      	lsls	r3, r2
    4918:	4a01      	ldr	r2, [pc, #4]	; (4920 <arch_irq_enable+0x18>)
    491a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
    491e:	4770      	bx	lr
    4920:	e000e100 	.word	0xe000e100

00004924 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4924:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4926:	2800      	cmp	r0, #0
    4928:	db0c      	blt.n	4944 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    492a:	f000 021f 	and.w	r2, r0, #31
    492e:	0940      	lsrs	r0, r0, #5
    4930:	2301      	movs	r3, #1
    4932:	4093      	lsls	r3, r2
    4934:	3020      	adds	r0, #32
    4936:	4a04      	ldr	r2, [pc, #16]	; (4948 <arch_irq_disable+0x24>)
    4938:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    493c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4940:	f3bf 8f6f 	isb	sy
}
    4944:	4770      	bx	lr
    4946:	bf00      	nop
    4948:	e000e100 	.word	0xe000e100

0000494c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    494c:	0942      	lsrs	r2, r0, #5
    494e:	4b05      	ldr	r3, [pc, #20]	; (4964 <arch_irq_is_enabled+0x18>)
    4950:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4954:	f000 001f 	and.w	r0, r0, #31
    4958:	2301      	movs	r3, #1
    495a:	fa03 f000 	lsl.w	r0, r3, r0
}
    495e:	4010      	ands	r0, r2
    4960:	4770      	bx	lr
    4962:	bf00      	nop
    4964:	e000e100 	.word	0xe000e100

00004968 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    4968:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    496a:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    496c:	2800      	cmp	r0, #0
    496e:	db08      	blt.n	4982 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4970:	0149      	lsls	r1, r1, #5
    4972:	b2c9      	uxtb	r1, r1
    4974:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4978:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    497c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    4980:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4982:	f000 000f 	and.w	r0, r0, #15
    4986:	0149      	lsls	r1, r1, #5
    4988:	b2c9      	uxtb	r1, r1
    498a:	4b01      	ldr	r3, [pc, #4]	; (4990 <z_arm_irq_priority_set+0x28>)
    498c:	5419      	strb	r1, [r3, r0]
}
    498e:	4770      	bx	lr
    4990:	e000ed14 	.word	0xe000ed14

00004994 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4994:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4996:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4998:	4b05      	ldr	r3, [pc, #20]	; (49b0 <_arch_isr_direct_pm+0x1c>)
    499a:	699b      	ldr	r3, [r3, #24]
    499c:	b90b      	cbnz	r3, 49a2 <_arch_isr_direct_pm+0xe>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    499e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    49a0:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
    49a2:	4b03      	ldr	r3, [pc, #12]	; (49b0 <_arch_isr_direct_pm+0x1c>)
    49a4:	2200      	movs	r2, #0
    49a6:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    49a8:	f019 f881 	bl	1daae <z_pm_save_idle_exit>
    49ac:	e7f7      	b.n	499e <_arch_isr_direct_pm+0xa>
    49ae:	bf00      	nop
    49b0:	20009210 	.word	0x20009210

000049b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    49b4:	bf30      	wfi
    b z_SysNmiOnReset
    49b6:	f7ff bffd 	b.w	49b4 <z_SysNmiOnReset>
    49ba:	bf00      	nop

000049bc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    49bc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    49be:	4b0b      	ldr	r3, [pc, #44]	; (49ec <z_arm_prep_c+0x30>)
    49c0:	4a0b      	ldr	r2, [pc, #44]	; (49f0 <z_arm_prep_c+0x34>)
    49c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    49c6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    49c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    49d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    49d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    49d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    49dc:	f00d ffce 	bl	1297c <z_bss_zero>
	z_data_copy();
    49e0:	f00f f88a 	bl	13af8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    49e4:	f000 fa1a 	bl	4e1c <z_arm_interrupt_init>
	z_cstart();
    49e8:	f00e f826 	bl	12a38 <z_cstart>
    49ec:	e000ed00 	.word	0xe000ed00
    49f0:	00000000 	.word	0x00000000

000049f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    49f4:	4a0a      	ldr	r2, [pc, #40]	; (4a20 <arch_swap+0x2c>)
    49f6:	6893      	ldr	r3, [r2, #8]
    49f8:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
    49fc:	4909      	ldr	r1, [pc, #36]	; (4a24 <arch_swap+0x30>)
    49fe:	6809      	ldr	r1, [r1, #0]
    4a00:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4a04:	4908      	ldr	r1, [pc, #32]	; (4a28 <arch_swap+0x34>)
    4a06:	684b      	ldr	r3, [r1, #4]
    4a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4a0c:	604b      	str	r3, [r1, #4]
    4a0e:	2300      	movs	r3, #0
    4a10:	f383 8811 	msr	BASEPRI, r3
    4a14:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4a18:	6893      	ldr	r3, [r2, #8]
}
    4a1a:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    4a1e:	4770      	bx	lr
    4a20:	20009210 	.word	0x20009210
    4a24:	0001f93c 	.word	0x0001f93c
    4a28:	e000ed00 	.word	0xe000ed00

00004a2c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4a2c:	4913      	ldr	r1, [pc, #76]	; (4a7c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4a2e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4a30:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4a34:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4a36:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4a3a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a3e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    4a40:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4a44:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4a48:	4f0d      	ldr	r7, [pc, #52]	; (4a80 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4a4a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4a4e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    4a50:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4a52:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4a54:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
    4a58:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4a5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4a5e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4a62:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4a64:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4a66:	f000 fa83 	bl	4f70 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4a6a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4a6e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4a72:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4a76:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4a7a:	4770      	bx	lr
    ldr r1, =_kernel
    4a7c:	20009210 	.word	0x20009210
    ldr v4, =_SCS_ICSR
    4a80:	e000ed04 	.word	0xe000ed04

00004a84 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4a84:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4a88:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4a8a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4a8e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4a92:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4a94:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4a98:	2902      	cmp	r1, #2
    beq _oops
    4a9a:	d0ff      	beq.n	4a9c <_oops>

00004a9c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4a9c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4a9e:	f014 fea9 	bl	197f4 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4aa2:	bd01      	pop	{r0, pc}

00004aa4 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4aa4:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4aa6:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4aaa:	490e      	ldr	r1, [pc, #56]	; (4ae4 <arch_new_thread+0x40>)
    4aac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4ab0:	f021 0101 	bic.w	r1, r1, #1
    4ab4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4ab8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4abc:	9b01      	ldr	r3, [sp, #4]
    4abe:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    4ac2:	9b02      	ldr	r3, [sp, #8]
    4ac4:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4ac8:	9b03      	ldr	r3, [sp, #12]
    4aca:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4ad2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    4ad6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4ad8:	2300      	movs	r3, #0
    4ada:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4ade:	bc10      	pop	{r4}
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop
    4ae4:	00019383 	.word	0x00019383

00004ae8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4ae8:	4b12      	ldr	r3, [pc, #72]	; (4b34 <z_check_thread_stack_fail+0x4c>)
    4aea:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4aec:	b302      	cbz	r2, 4b30 <z_check_thread_stack_fail+0x48>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4aee:	f110 0f16 	cmn.w	r0, #22
    4af2:	d011      	beq.n	4b18 <z_check_thread_stack_fail+0x30>
    4af4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    4af8:	f1a3 0c20 	sub.w	ip, r3, #32
    4afc:	4584      	cmp	ip, r0
    4afe:	d805      	bhi.n	4b0c <z_check_thread_stack_fail+0x24>
    4b00:	4283      	cmp	r3, r0
    4b02:	d905      	bls.n	4b10 <z_check_thread_stack_fail+0x28>
    4b04:	428b      	cmp	r3, r1
    4b06:	d805      	bhi.n	4b14 <z_check_thread_stack_fail+0x2c>
    4b08:	2100      	movs	r1, #0
    4b0a:	e00b      	b.n	4b24 <z_check_thread_stack_fail+0x3c>
    4b0c:	2100      	movs	r1, #0
    4b0e:	e009      	b.n	4b24 <z_check_thread_stack_fail+0x3c>
    4b10:	2100      	movs	r1, #0
    4b12:	e007      	b.n	4b24 <z_check_thread_stack_fail+0x3c>
    4b14:	2101      	movs	r1, #1
    4b16:	e005      	b.n	4b24 <z_check_thread_stack_fail+0x3c>
    4b18:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    4b1c:	428b      	cmp	r3, r1
    4b1e:	bf94      	ite	ls
    4b20:	2100      	movls	r1, #0
    4b22:	2101      	movhi	r1, #1
    4b24:	b909      	cbnz	r1, 4b2a <z_check_thread_stack_fail+0x42>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    4b26:	2000      	movs	r0, #0
}
    4b28:	4770      	bx	lr
		return thread->stack_info.start;
    4b2a:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
    4b2e:	4770      	bx	lr
		return 0;
    4b30:	2000      	movs	r0, #0
    4b32:	4770      	bx	lr
    4b34:	20009210 	.word	0x20009210

00004b38 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4b38:	b508      	push	{r3, lr}
    4b3a:	460d      	mov	r5, r1
    4b3c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4b3e:	4b08      	ldr	r3, [pc, #32]	; (4b60 <arch_switch_to_main_thread+0x28>)
    4b40:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4b42:	f000 fa15 	bl	4f70 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4b46:	4620      	mov	r0, r4
    4b48:	f385 8809 	msr	PSP, r5
    4b4c:	2100      	movs	r1, #0
    4b4e:	b663      	cpsie	if
    4b50:	f381 8811 	msr	BASEPRI, r1
    4b54:	f3bf 8f6f 	isb	sy
    4b58:	2200      	movs	r2, #0
    4b5a:	2300      	movs	r3, #0
    4b5c:	f014 fc11 	bl	19382 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4b60:	20009210 	.word	0x20009210

00004b64 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4b64:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4b66:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4b68:	4a0b      	ldr	r2, [pc, #44]	; (4b98 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4b6a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    4b6c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4b6e:	bf1e      	ittt	ne
	movne	r1, #0
    4b70:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4b72:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    4b74:	f018 ff9b 	blne	1daae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4b78:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4b7a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4b7e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4b82:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4b86:	4905      	ldr	r1, [pc, #20]	; (4b9c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4b88:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4b8a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4b8c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4b8e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4b92:	4903      	ldr	r1, [pc, #12]	; (4ba0 <_isr_wrapper+0x3c>)
	bx r1
    4b94:	4708      	bx	r1
    4b96:	0000      	.short	0x0000
	ldr r2, =_kernel
    4b98:	20009210 	.word	0x20009210
	ldr r1, =_sw_isr_table
    4b9c:	0001e4e8 	.word	0x0001e4e8
	ldr r1, =z_arm_int_exit
    4ba0:	00004ba5 	.word	0x00004ba5

00004ba4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4ba4:	4b04      	ldr	r3, [pc, #16]	; (4bb8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4ba6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4ba8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4baa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4bac:	d003      	beq.n	4bb6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4bae:	4903      	ldr	r1, [pc, #12]	; (4bbc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4bb4:	600a      	str	r2, [r1, #0]

00004bb6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4bb6:	4770      	bx	lr
	ldr r3, =_kernel
    4bb8:	20009210 	.word	0x20009210
	ldr r1, =_SCS_ICSR
    4bbc:	e000ed04 	.word	0xe000ed04

00004bc0 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    4bc0:	b510      	push	{r4, lr}
    4bc2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4bc4:	4b12      	ldr	r3, [pc, #72]	; (4c10 <bus_fault+0x50>)
    4bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bcc:	f413 7f00 	tst.w	r3, #512	; 0x200
    4bd0:	d00b      	beq.n	4bea <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4bd2:	4b0f      	ldr	r3, [pc, #60]	; (4c10 <bus_fault+0x50>)
    4bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bd8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4bdc:	d005      	beq.n	4bea <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    4bde:	b121      	cbz	r1, 4bea <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4be0:	4a0b      	ldr	r2, [pc, #44]	; (4c10 <bus_fault+0x50>)
    4be2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4be4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4be8:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4bea:	4b09      	ldr	r3, [pc, #36]	; (4c10 <bus_fault+0x50>)
    4bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4bf0:	f413 7f80 	tst.w	r3, #256	; 0x100
    4bf4:	d101      	bne.n	4bfa <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4bf6:	4b06      	ldr	r3, [pc, #24]	; (4c10 <bus_fault+0x50>)
    4bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4bfa:	4a05      	ldr	r2, [pc, #20]	; (4c10 <bus_fault+0x50>)
    4bfc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4bfe:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4c02:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    4c04:	2101      	movs	r1, #1
    4c06:	f014 fe07 	bl	19818 <memory_fault_recoverable>
    4c0a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    4c0c:	2000      	movs	r0, #0
    4c0e:	bd10      	pop	{r4, pc}
    4c10:	e000ed00 	.word	0xe000ed00

00004c14 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4c14:	4b07      	ldr	r3, [pc, #28]	; (4c34 <usage_fault+0x20>)
    4c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4c22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4c24:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    4c28:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    4c2c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    4c2e:	2000      	movs	r0, #0
    4c30:	4770      	bx	lr
    4c32:	bf00      	nop
    4c34:	e000ed00 	.word	0xe000ed00

00004c38 <mem_manage_fault>:
{
    4c38:	b570      	push	{r4, r5, r6, lr}
    4c3a:	4605      	mov	r5, r0
    4c3c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4c3e:	4b25      	ldr	r3, [pc, #148]	; (4cd4 <mem_manage_fault+0x9c>)
    4c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4c42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c46:	f013 0f02 	tst.w	r3, #2
    4c4a:	d00c      	beq.n	4c66 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    4c4c:	4b21      	ldr	r3, [pc, #132]	; (4cd4 <mem_manage_fault+0x9c>)
    4c4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c52:	f013 0f80 	tst.w	r3, #128	; 0x80
    4c56:	d02f      	beq.n	4cb8 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    4c58:	b139      	cbz	r1, 4c6a <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4c5a:	4a1e      	ldr	r2, [pc, #120]	; (4cd4 <mem_manage_fault+0x9c>)
    4c5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4c62:	6293      	str	r3, [r2, #40]	; 0x28
    4c64:	e001      	b.n	4c6a <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    4c66:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4c6a:	4b1a      	ldr	r3, [pc, #104]	; (4cd4 <mem_manage_fault+0x9c>)
    4c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4c6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c72:	f013 0f10 	tst.w	r3, #16
    4c76:	d104      	bne.n	4c82 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4c78:	4b16      	ldr	r3, [pc, #88]	; (4cd4 <mem_manage_fault+0x9c>)
    4c7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4c7c:	f014 0402 	ands.w	r4, r4, #2
    4c80:	d004      	beq.n	4c8c <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4c82:	4b14      	ldr	r3, [pc, #80]	; (4cd4 <mem_manage_fault+0x9c>)
    4c84:	685c      	ldr	r4, [r3, #4]
    4c86:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    4c8a:	d118      	bne.n	4cbe <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4c8c:	4b11      	ldr	r3, [pc, #68]	; (4cd4 <mem_manage_fault+0x9c>)
    4c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c90:	f013 0f20 	tst.w	r3, #32
    4c94:	d004      	beq.n	4ca0 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    4c96:	4a0f      	ldr	r2, [pc, #60]	; (4cd4 <mem_manage_fault+0x9c>)
    4c98:	6a53      	ldr	r3, [r2, #36]	; 0x24
    4c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4c9e:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4ca0:	4a0c      	ldr	r2, [pc, #48]	; (4cd4 <mem_manage_fault+0x9c>)
    4ca2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ca4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4ca8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    4caa:	2101      	movs	r1, #1
    4cac:	4628      	mov	r0, r5
    4cae:	f014 fdb3 	bl	19818 <memory_fault_recoverable>
    4cb2:	7030      	strb	r0, [r6, #0]
}
    4cb4:	4620      	mov	r0, r4
    4cb6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    4cb8:	f06f 0015 	mvn.w	r0, #21
    4cbc:	e7d5      	b.n	4c6a <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4cbe:	4629      	mov	r1, r5
    4cc0:	f7ff ff12 	bl	4ae8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4cc4:	4604      	mov	r4, r0
    4cc6:	2800      	cmp	r0, #0
    4cc8:	d0e0      	beq.n	4c8c <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4cca:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4cce:	2402      	movs	r4, #2
    4cd0:	e7dc      	b.n	4c8c <mem_manage_fault+0x54>
    4cd2:	bf00      	nop
    4cd4:	e000ed00 	.word	0xe000ed00

00004cd8 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4cd8:	b508      	push	{r3, lr}
    4cda:	4684      	mov	ip, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4cdc:	2300      	movs	r3, #0
    4cde:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4ce0:	4b1b      	ldr	r3, [pc, #108]	; (4d50 <hard_fault+0x78>)
    4ce2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4ce4:	f010 0002 	ands.w	r0, r0, #2
    4ce8:	d12e      	bne.n	4d48 <hard_fault+0x70>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cec:	2b00      	cmp	r3, #0
    4cee:	db2c      	blt.n	4d4a <hard_fault+0x72>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4cf0:	4b17      	ldr	r3, [pc, #92]	; (4d50 <hard_fault+0x78>)
    4cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cf4:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
    4cf8:	d028      	beq.n	4d4c <hard_fault+0x74>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4cfa:	f8dc 3018 	ldr.w	r3, [ip, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4cfe:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4d02:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4d06:	429a      	cmp	r2, r3
    4d08:	d00f      	beq.n	4d2a <hard_fault+0x52>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
		} else if (SCB_MMFSR != 0) {
    4d0a:	4b11      	ldr	r3, [pc, #68]	; (4d50 <hard_fault+0x78>)
    4d0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    4d10:	b973      	cbnz	r3, 4d30 <hard_fault+0x58>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if (SCB_BFSR != 0) {
    4d12:	4b0f      	ldr	r3, [pc, #60]	; (4d50 <hard_fault+0x78>)
    4d14:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    4d18:	b983      	cbnz	r3, 4d3c <hard_fault+0x64>
			reason = bus_fault(esf, 1, recoverable);
		} else if (SCB_UFSR != 0) {
    4d1a:	4b0d      	ldr	r3, [pc, #52]	; (4d50 <hard_fault+0x78>)
    4d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    4d1e:	b29b      	uxth	r3, r3
    4d20:	b19b      	cbz	r3, 4d4a <hard_fault+0x72>
			reason = usage_fault(esf);
    4d22:	4660      	mov	r0, ip
    4d24:	f7ff ff76 	bl	4c14 <usage_fault>
    4d28:	e00f      	b.n	4d4a <hard_fault+0x72>
			reason = esf->basic.r0;
    4d2a:	f8dc 0000 	ldr.w	r0, [ip]
    4d2e:	e00c      	b.n	4d4a <hard_fault+0x72>
			reason = mem_manage_fault(esf, 1, recoverable);
    4d30:	460a      	mov	r2, r1
    4d32:	2101      	movs	r1, #1
    4d34:	4660      	mov	r0, ip
    4d36:	f7ff ff7f 	bl	4c38 <mem_manage_fault>
    4d3a:	e006      	b.n	4d4a <hard_fault+0x72>
			reason = bus_fault(esf, 1, recoverable);
    4d3c:	460a      	mov	r2, r1
    4d3e:	2101      	movs	r1, #1
    4d40:	4660      	mov	r0, ip
    4d42:	f7ff ff3d 	bl	4bc0 <bus_fault>
    4d46:	e000      	b.n	4d4a <hard_fault+0x72>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4d48:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4d4a:	bd08      	pop	{r3, pc}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4d4c:	4618      	mov	r0, r3
	return reason;
    4d4e:	e7fc      	b.n	4d4a <hard_fault+0x72>
    4d50:	e000ed00 	.word	0xe000ed00

00004d54 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4d54:	b530      	push	{r4, r5, lr}
    4d56:	b08b      	sub	sp, #44	; 0x2c
    4d58:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4d5a:	4b26      	ldr	r3, [pc, #152]	; (4df4 <z_arm_fault+0xa0>)
    4d5c:	6859      	ldr	r1, [r3, #4]
    4d5e:	f3c1 0108 	ubfx	r1, r1, #0, #9
    4d62:	2300      	movs	r3, #0
    4d64:	f383 8811 	msr	BASEPRI, r3
    4d68:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4d6c:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4d70:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4d74:	d115      	bne.n	4da2 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4d76:	f002 030c 	and.w	r3, r2, #12
    4d7a:	2b08      	cmp	r3, #8
    4d7c:	d014      	beq.n	4da8 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4d7e:	f012 0f08 	tst.w	r2, #8
    4d82:	d00b      	beq.n	4d9c <z_arm_fault+0x48>
	*nested_exc = false;
    4d84:	2500      	movs	r5, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    4d86:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    4d8a:	4620      	mov	r0, r4
    4d8c:	f014 fd49 	bl	19822 <fault_handle>
    4d90:	4686      	mov	lr, r0
	if (recoverable) {
    4d92:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4d96:	b153      	cbz	r3, 4dae <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    4d98:	b00b      	add	sp, #44	; 0x2c
    4d9a:	bd30      	pop	{r4, r5, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    4d9c:	4604      	mov	r4, r0
			*nested_exc = true;
    4d9e:	2501      	movs	r5, #1
    4da0:	e7f1      	b.n	4d86 <z_arm_fault+0x32>
	*nested_exc = false;
    4da2:	2500      	movs	r5, #0
		return NULL;
    4da4:	462c      	mov	r4, r5
    4da6:	e7ee      	b.n	4d86 <z_arm_fault+0x32>
	*nested_exc = false;
    4da8:	2500      	movs	r5, #0
		return NULL;
    4daa:	462c      	mov	r4, r5
    4dac:	e7eb      	b.n	4d86 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4dae:	f10d 0c04 	add.w	ip, sp, #4
    4db2:	6820      	ldr	r0, [r4, #0]
    4db4:	6861      	ldr	r1, [r4, #4]
    4db6:	68a2      	ldr	r2, [r4, #8]
    4db8:	68e3      	ldr	r3, [r4, #12]
    4dba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    4dbe:	6920      	ldr	r0, [r4, #16]
    4dc0:	6961      	ldr	r1, [r4, #20]
    4dc2:	69a2      	ldr	r2, [r4, #24]
    4dc4:	69e3      	ldr	r3, [r4, #28]
    4dc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
	if (nested_exc) {
    4dca:	b145      	cbz	r5, 4dde <z_arm_fault+0x8a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4dcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4dd0:	b95a      	cbnz	r2, 4dea <z_arm_fault+0x96>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4dd2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4dd6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4dda:	9308      	str	r3, [sp, #32]
    4ddc:	e005      	b.n	4dea <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4dde:	9b08      	ldr	r3, [sp, #32]
    4de0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4de4:	f023 0301 	bic.w	r3, r3, #1
    4de8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4dea:	a901      	add	r1, sp, #4
    4dec:	4670      	mov	r0, lr
    4dee:	f014 fcfd 	bl	197ec <z_arm_fatal_error>
    4df2:	e7d1      	b.n	4d98 <z_arm_fault+0x44>
    4df4:	e000ed00 	.word	0xe000ed00

00004df8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4df8:	4a02      	ldr	r2, [pc, #8]	; (4e04 <z_arm_fault_init+0xc>)
    4dfa:	6953      	ldr	r3, [r2, #20]
    4dfc:	f043 0310 	orr.w	r3, r3, #16
    4e00:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4e02:	4770      	bx	lr
    4e04:	e000ed00 	.word	0xe000ed00

00004e08 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4e08:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4e0c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4e10:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4e12:	4672      	mov	r2, lr
	bl z_arm_fault
    4e14:	f7ff ff9e 	bl	4d54 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4e18:	bd01      	pop	{r0, pc}
    4e1a:	bf00      	nop

00004e1c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4e1c:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4e1e:	e006      	b.n	4e2e <z_arm_interrupt_init+0x12>
    4e20:	f002 010f 	and.w	r1, r2, #15
    4e24:	4b09      	ldr	r3, [pc, #36]	; (4e4c <z_arm_interrupt_init+0x30>)
    4e26:	440b      	add	r3, r1
    4e28:	2120      	movs	r1, #32
    4e2a:	7619      	strb	r1, [r3, #24]
    4e2c:	3201      	adds	r2, #1
    4e2e:	2a2f      	cmp	r2, #47	; 0x2f
    4e30:	dc0a      	bgt.n	4e48 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4e32:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4e34:	2b00      	cmp	r3, #0
    4e36:	dbf3      	blt.n	4e20 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4e38:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4e3c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4e40:	2120      	movs	r1, #32
    4e42:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    4e46:	e7f1      	b.n	4e2c <z_arm_interrupt_init+0x10>
	}
}
    4e48:	4770      	bx	lr
    4e4a:	bf00      	nop
    4e4c:	e000ecfc 	.word	0xe000ecfc

00004e50 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4e50:	2000      	movs	r0, #0
    msr CONTROL, r0
    4e52:	f380 8814 	msr	CONTROL, r0
    isb
    4e56:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4e5a:	f019 fabf 	bl	1e3dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4e5e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4e60:	490d      	ldr	r1, [pc, #52]	; (4e98 <__start+0x48>)
    str r0, [r1]
    4e62:	6008      	str	r0, [r1, #0]
    dsb
    4e64:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4e68:	480c      	ldr	r0, [pc, #48]	; (4e9c <__start+0x4c>)
    msr msp, r0
    4e6a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4e6e:	f000 f82d 	bl	4ecc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4e72:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4e74:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4e78:	4809      	ldr	r0, [pc, #36]	; (4ea0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4e7a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4e7e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4e80:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4e84:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4e88:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4e8a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4e8c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4e90:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4e94:	f7ff fd92 	bl	49bc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4e98:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4e9c:	20009f60 	.word	0x20009f60
    ldr r0, =z_interrupt_stacks
    4ea0:	2000a0e0 	.word	0x2000a0e0

00004ea4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4ea4:	4b08      	ldr	r3, [pc, #32]	; (4ec8 <z_arm_clear_arm_mpu_config+0x24>)
    4ea6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    4eaa:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4eae:	2300      	movs	r3, #0
    4eb0:	e006      	b.n	4ec0 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4eb2:	4a05      	ldr	r2, [pc, #20]	; (4ec8 <z_arm_clear_arm_mpu_config+0x24>)
    4eb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4eb8:	2100      	movs	r1, #0
    4eba:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4ebe:	3301      	adds	r3, #1
    4ec0:	4283      	cmp	r3, r0
    4ec2:	dbf6      	blt.n	4eb2 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    4ec4:	4770      	bx	lr
    4ec6:	bf00      	nop
    4ec8:	e000ed00 	.word	0xe000ed00

00004ecc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4ecc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4ece:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4ed0:	2400      	movs	r4, #0
    4ed2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4ed6:	f7ff ffe5 	bl	4ea4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4eda:	4623      	mov	r3, r4
    4edc:	e008      	b.n	4ef0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4ede:	f103 0120 	add.w	r1, r3, #32
    4ee2:	4a0e      	ldr	r2, [pc, #56]	; (4f1c <z_arm_init_arch_hw_at_boot+0x50>)
    4ee4:	f04f 30ff 	mov.w	r0, #4294967295
    4ee8:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4eec:	3301      	adds	r3, #1
    4eee:	b2db      	uxtb	r3, r3
    4ef0:	2b07      	cmp	r3, #7
    4ef2:	d9f4      	bls.n	4ede <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4ef4:	2300      	movs	r3, #0
    4ef6:	e008      	b.n	4f0a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4ef8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4efc:	4a07      	ldr	r2, [pc, #28]	; (4f1c <z_arm_init_arch_hw_at_boot+0x50>)
    4efe:	f04f 30ff 	mov.w	r0, #4294967295
    4f02:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4f06:	3301      	adds	r3, #1
    4f08:	b2db      	uxtb	r3, r3
    4f0a:	2b07      	cmp	r3, #7
    4f0c:	d9f4      	bls.n	4ef8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4f0e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4f14:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4f18:	bd10      	pop	{r4, pc}
    4f1a:	bf00      	nop
    4f1c:	e000e100 	.word	0xe000e100

00004f20 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4f20:	b508      	push	{r3, lr}
	if (_current == thread) {
    4f22:	4b0a      	ldr	r3, [pc, #40]	; (4f4c <z_impl_k_thread_abort+0x2c>)
    4f24:	689b      	ldr	r3, [r3, #8]
    4f26:	4283      	cmp	r3, r0
    4f28:	d002      	beq.n	4f30 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    4f2a:	f00e fda9 	bl	13a80 <z_thread_abort>
}
    4f2e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f30:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4f34:	2b00      	cmp	r3, #0
    4f36:	d0f8      	beq.n	4f2a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4f38:	4b05      	ldr	r3, [pc, #20]	; (4f50 <z_impl_k_thread_abort+0x30>)
    4f3a:	685a      	ldr	r2, [r3, #4]
    4f3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4f40:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4f44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    4f48:	625a      	str	r2, [r3, #36]	; 0x24
    4f4a:	e7ee      	b.n	4f2a <z_impl_k_thread_abort+0xa>
    4f4c:	20009210 	.word	0x20009210
    4f50:	e000ed00 	.word	0xe000ed00

00004f54 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4f54:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4f56:	4b03      	ldr	r3, [pc, #12]	; (4f64 <z_arm_configure_static_mpu_regions+0x10>)
    4f58:	4a03      	ldr	r2, [pc, #12]	; (4f68 <z_arm_configure_static_mpu_regions+0x14>)
    4f5a:	2101      	movs	r1, #1
    4f5c:	4803      	ldr	r0, [pc, #12]	; (4f6c <z_arm_configure_static_mpu_regions+0x18>)
    4f5e:	f014 fce6 	bl	1992e <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4f62:	bd08      	pop	{r3, pc}
    4f64:	20020000 	.word	0x20020000
    4f68:	20000000 	.word	0x20000000
    4f6c:	0001e86c 	.word	0x0001e86c

00004f70 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4f70:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4f72:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    4f76:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4f78:	4804      	ldr	r0, [pc, #16]	; (4f8c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4f7a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4f7c:	2320      	movs	r3, #32
    4f7e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4f80:	4b03      	ldr	r3, [pc, #12]	; (4f90 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4f82:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4f84:	2101      	movs	r1, #1
    4f86:	f014 fcd6 	bl	19936 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4f8a:	bd08      	pop	{r3, pc}
    4f8c:	2000221c 	.word	0x2000221c
    4f90:	150b0000 	.word	0x150b0000

00004f94 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4f94:	4a08      	ldr	r2, [pc, #32]	; (4fb8 <region_init+0x24>)
    4f96:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4f9a:	680b      	ldr	r3, [r1, #0]
    4f9c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4fa0:	4303      	orrs	r3, r0
    4fa2:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4fa6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4faa:	688b      	ldr	r3, [r1, #8]
    4fac:	f043 0301 	orr.w	r3, r3, #1
    4fb0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4fb4:	4770      	bx	lr
    4fb6:	bf00      	nop
    4fb8:	e000ed00 	.word	0xe000ed00

00004fbc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4fbc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4fbe:	4c03      	ldr	r4, [pc, #12]	; (4fcc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4fc0:	2301      	movs	r3, #1
    4fc2:	7822      	ldrb	r2, [r4, #0]
    4fc4:	f014 fc8b 	bl	198de <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4fc8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4fca:	bd10      	pop	{r4, pc}
    4fcc:	20009293 	.word	0x20009293

00004fd0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4fd0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4fd2:	2300      	movs	r3, #0
    4fd4:	4a09      	ldr	r2, [pc, #36]	; (4ffc <mpu_configure_dynamic_mpu_regions+0x2c>)
    4fd6:	7812      	ldrb	r2, [r2, #0]
    4fd8:	f014 fc81 	bl	198de <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4fdc:	f110 0f16 	cmn.w	r0, #22
    4fe0:	d00a      	beq.n	4ff8 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4fe2:	4603      	mov	r3, r0
    4fe4:	e006      	b.n	4ff4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4fe6:	4a06      	ldr	r2, [pc, #24]	; (5000 <mpu_configure_dynamic_mpu_regions+0x30>)
    4fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    4fec:	2100      	movs	r1, #0
    4fee:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    4ff2:	3301      	adds	r3, #1
    4ff4:	2b07      	cmp	r3, #7
    4ff6:	ddf6      	ble.n	4fe6 <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4ff8:	bd08      	pop	{r3, pc}
    4ffa:	bf00      	nop
    4ffc:	20009293 	.word	0x20009293
    5000:	e000ed00 	.word	0xe000ed00

00005004 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5004:	4b04      	ldr	r3, [pc, #16]	; (5018 <arm_core_mpu_enable+0x14>)
    5006:	2205      	movs	r2, #5
    5008:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    500c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5010:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5014:	4770      	bx	lr
    5016:	bf00      	nop
    5018:	e000ed00 	.word	0xe000ed00

0000501c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    501c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5020:	4b02      	ldr	r3, [pc, #8]	; (502c <arm_core_mpu_disable+0x10>)
    5022:	2200      	movs	r2, #0
    5024:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5028:	4770      	bx	lr
    502a:	bf00      	nop
    502c:	e000ed00 	.word	0xe000ed00

00005030 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    5030:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5032:	4b0e      	ldr	r3, [pc, #56]	; (506c <z_arm_mpu_init+0x3c>)
    5034:	681d      	ldr	r5, [r3, #0]
    5036:	2d08      	cmp	r5, #8
    5038:	d815      	bhi.n	5066 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    503a:	f7ff ffef 	bl	501c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    503e:	2400      	movs	r4, #0
    5040:	e009      	b.n	5056 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5042:	4b0a      	ldr	r3, [pc, #40]	; (506c <z_arm_mpu_init+0x3c>)
    5044:	6859      	ldr	r1, [r3, #4]
    5046:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    504a:	0093      	lsls	r3, r2, #2
    504c:	4419      	add	r1, r3
    504e:	4620      	mov	r0, r4
    5050:	f7ff ffa0 	bl	4f94 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5054:	3401      	adds	r4, #1
    5056:	42a5      	cmp	r5, r4
    5058:	d8f3      	bhi.n	5042 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    505a:	4b05      	ldr	r3, [pc, #20]	; (5070 <z_arm_mpu_init+0x40>)
    505c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    505e:	f7ff ffd1 	bl	5004 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5062:	2000      	movs	r0, #0
}
    5064:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    5066:	f04f 30ff 	mov.w	r0, #4294967295
    506a:	e7fb      	b.n	5064 <z_arm_mpu_init+0x34>
    506c:	0001e890 	.word	0x0001e890
    5070:	20009293 	.word	0x20009293

00005074 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5074:	4b01      	ldr	r3, [pc, #4]	; (507c <__stdout_hook_install+0x8>)
    5076:	6018      	str	r0, [r3, #0]
}
    5078:	4770      	bx	lr
    507a:	bf00      	nop
    507c:	200003ac 	.word	0x200003ac

00005080 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    5080:	b570      	push	{r4, r5, r6, lr}
    5082:	4606      	mov	r6, r0
    5084:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
    5086:	2400      	movs	r4, #0
    5088:	e000      	b.n	508c <z_impl_zephyr_read_stdin+0xc>
    508a:	3401      	adds	r4, #1
    508c:	42ac      	cmp	r4, r5
    508e:	da08      	bge.n	50a2 <z_impl_zephyr_read_stdin+0x22>
		*(buf + i) = _stdin_hook();
    5090:	4b05      	ldr	r3, [pc, #20]	; (50a8 <z_impl_zephyr_read_stdin+0x28>)
    5092:	681b      	ldr	r3, [r3, #0]
    5094:	4798      	blx	r3
    5096:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    5098:	280a      	cmp	r0, #10
    509a:	d001      	beq.n	50a0 <z_impl_zephyr_read_stdin+0x20>
    509c:	280d      	cmp	r0, #13
    509e:	d1f4      	bne.n	508a <z_impl_zephyr_read_stdin+0xa>
			i++;
    50a0:	3401      	adds	r4, #1
			break;
		}
	}
	return i;
}
    50a2:	4620      	mov	r0, r4
    50a4:	bd70      	pop	{r4, r5, r6, pc}
    50a6:	bf00      	nop
    50a8:	200003a8 	.word	0x200003a8

000050ac <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    50ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50ae:	4605      	mov	r5, r0
    50b0:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    50b2:	2400      	movs	r4, #0
    50b4:	e004      	b.n	50c0 <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
    50b6:	4b09      	ldr	r3, [pc, #36]	; (50dc <z_impl_zephyr_write_stdout+0x30>)
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	7830      	ldrb	r0, [r6, #0]
    50bc:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    50be:	3401      	adds	r4, #1
    50c0:	42bc      	cmp	r4, r7
    50c2:	da08      	bge.n	50d6 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
    50c4:	192e      	adds	r6, r5, r4
    50c6:	5d2b      	ldrb	r3, [r5, r4]
    50c8:	2b0a      	cmp	r3, #10
    50ca:	d1f4      	bne.n	50b6 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
    50cc:	4b03      	ldr	r3, [pc, #12]	; (50dc <z_impl_zephyr_write_stdout+0x30>)
    50ce:	681b      	ldr	r3, [r3, #0]
    50d0:	200d      	movs	r0, #13
    50d2:	4798      	blx	r3
    50d4:	e7ef      	b.n	50b6 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
    50d6:	4638      	mov	r0, r7
    50d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50da:	bf00      	nop
    50dc:	200003ac 	.word	0x200003ac

000050e0 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    50e0:	b508      	push	{r3, lr}
	_write(1, "exit\n", 5);
    50e2:	2205      	movs	r2, #5
    50e4:	4902      	ldr	r1, [pc, #8]	; (50f0 <_exit+0x10>)
    50e6:	2001      	movs	r0, #1
    50e8:	f014 fc36 	bl	19958 <_write>
	while (1) {
    50ec:	e7fe      	b.n	50ec <_exit+0xc>
    50ee:	bf00      	nop
    50f0:	0001e878 	.word	0x0001e878

000050f4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    50f4:	4602      	mov	r2, r0
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    50f6:	4b08      	ldr	r3, [pc, #32]	; (5118 <_sbrk+0x24>)
    50f8:	6819      	ldr	r1, [r3, #0]
    50fa:	4b08      	ldr	r3, [pc, #32]	; (511c <_sbrk+0x28>)
    50fc:	18c8      	adds	r0, r1, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    50fe:	440a      	add	r2, r1
    5100:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    5104:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    5108:	429a      	cmp	r2, r3
    510a:	d202      	bcs.n	5112 <_sbrk+0x1e>
		heap_sz += count;
    510c:	4b02      	ldr	r3, [pc, #8]	; (5118 <_sbrk+0x24>)
    510e:	601a      	str	r2, [r3, #0]
		ret = ptr;
    5110:	4770      	bx	lr

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    5112:	f04f 30ff 	mov.w	r0, #4294967295
	}

	return ret;
}
    5116:	4770      	bx	lr
    5118:	20002228 	.word	0x20002228
    511c:	2000b390 	.word	0x2000b390

00005120 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5120:	f04f 0320 	mov.w	r3, #32
    5124:	f3ef 8211 	mrs	r2, BASEPRI
    5128:	f383 8812 	msr	BASEPRI_MAX, r3
    512c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5130:	2301      	movs	r3, #1
    5132:	4906      	ldr	r1, [pc, #24]	; (514c <nordicsemi_nrf52_init+0x2c>)
    5134:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5138:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    513c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5140:	f382 8811 	msr	BASEPRI, r2
    5144:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5148:	2000      	movs	r0, #0
    514a:	4770      	bx	lr
    514c:	4001e000 	.word	0x4001e000

00005150 <sys_arch_reboot>:
    *p_gpregret = val;
    5150:	b2c0      	uxtb	r0, r0
    5152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5156:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    515a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    515e:	4905      	ldr	r1, [pc, #20]	; (5174 <sys_arch_reboot+0x24>)
    5160:	68ca      	ldr	r2, [r1, #12]
    5162:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5166:	4b04      	ldr	r3, [pc, #16]	; (5178 <sys_arch_reboot+0x28>)
    5168:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    516a:	60cb      	str	r3, [r1, #12]
    516c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5170:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5172:	e7fd      	b.n	5170 <sys_arch_reboot+0x20>
    5174:	e000ed00 	.word	0xe000ed00
    5178:	05fa0004 	.word	0x05fa0004

0000517c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    517c:	b130      	cbz	r0, 518c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    517e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5180:	0180      	lsls	r0, r0, #6
    5182:	4b03      	ldr	r3, [pc, #12]	; (5190 <arch_busy_wait+0x14>)
    5184:	f043 0301 	orr.w	r3, r3, #1
    5188:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    518a:	bd08      	pop	{r3, pc}
    518c:	4770      	bx	lr
    518e:	bf00      	nop
    5190:	0001e6f0 	.word	0x0001e6f0

00005194 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    5194:	b538      	push	{r3, r4, r5, lr}
    5196:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    5198:	4805      	ldr	r0, [pc, #20]	; (51b0 <bt_buf_get_rx+0x1c>)
    519a:	f017 fd9b 	bl	1ccd4 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    519e:	4605      	mov	r5, r0
    51a0:	b120      	cbz	r0, 51ac <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    51a2:	2100      	movs	r1, #0
    51a4:	3008      	adds	r0, #8
    51a6:	f017 fdb7 	bl	1cd18 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    51aa:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    51ac:	4628      	mov	r0, r5
    51ae:	bd38      	pop	{r3, r4, r5, pc}
    51b0:	20000fe0 	.word	0x20000fe0

000051b4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    51b4:	b510      	push	{r4, lr}
    51b6:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    51b8:	4b0a      	ldr	r3, [pc, #40]	; (51e4 <bt_buf_get_cmd_complete+0x30>)
    51ba:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
    51be:	b158      	cbz	r0, 51d8 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
    51c0:	f017 fde2 	bl	1cd88 <net_buf_ref>
    51c4:	4604      	mov	r4, r0
    51c6:	2301      	movs	r3, #1
    51c8:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
    51ca:	2100      	movs	r1, #0
    51cc:	8181      	strh	r1, [r0, #12]
    51ce:	3008      	adds	r0, #8
    51d0:	f017 fda2 	bl	1cd18 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    51d4:	4620      	mov	r0, r4
    51d6:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    51d8:	460b      	mov	r3, r1
    51da:	2001      	movs	r0, #1
    51dc:	f7ff ffda 	bl	5194 <bt_buf_get_rx>
    51e0:	4604      	mov	r4, r0
    51e2:	e7f7      	b.n	51d4 <bt_buf_get_cmd_complete+0x20>
    51e4:	20000000 	.word	0x20000000

000051e8 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    51e8:	b510      	push	{r4, lr}
	switch (evt) {
    51ea:	f1a0 0c0e 	sub.w	ip, r0, #14
    51ee:	f1bc 0f01 	cmp.w	ip, #1
    51f2:	d906      	bls.n	5202 <bt_buf_get_evt+0x1a>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
    51f4:	b959      	cbnz	r1, 520e <bt_buf_get_evt+0x26>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    51f6:	2001      	movs	r0, #1
    51f8:	f7ff ffcc 	bl	5194 <bt_buf_get_rx>
    51fc:	4604      	mov	r4, r0
	}
}
    51fe:	4620      	mov	r0, r4
    5200:	bd10      	pop	{r4, pc}
		return bt_buf_get_cmd_complete(timeout);
    5202:	4610      	mov	r0, r2
    5204:	4619      	mov	r1, r3
    5206:	f7ff ffd5 	bl	51b4 <bt_buf_get_cmd_complete>
    520a:	4604      	mov	r4, r0
    520c:	e7f7      	b.n	51fe <bt_buf_get_evt+0x16>
	return net_buf_alloc_fixed(pool, timeout);
    520e:	4806      	ldr	r0, [pc, #24]	; (5228 <bt_buf_get_evt+0x40>)
    5210:	f017 fd60 	bl	1ccd4 <net_buf_alloc_fixed>
			if (buf) {
    5214:	4604      	mov	r4, r0
    5216:	2800      	cmp	r0, #0
    5218:	d0f1      	beq.n	51fe <bt_buf_get_evt+0x16>
	net_buf_simple_reserve(&buf->b, reserve);
    521a:	2100      	movs	r1, #0
    521c:	3008      	adds	r0, #8
    521e:	f017 fd7b 	bl	1cd18 <net_buf_simple_reserve>
    5222:	2301      	movs	r3, #1
    5224:	7523      	strb	r3, [r4, #20]
			return buf;
    5226:	e7ea      	b.n	51fe <bt_buf_get_evt+0x16>
    5228:	20000f88 	.word	0x20000f88

0000522c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    522c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
    522e:	7851      	ldrb	r1, [r2, #1]
    5230:	4b07      	ldr	r3, [pc, #28]	; (5250 <read_local_ver_complete+0x24>)
    5232:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    5236:	8851      	ldrh	r1, [r2, #2]
    5238:	84d9      	strh	r1, [r3, #38]	; 0x26
	bt_dev.lmp_version = rp->lmp_version;
    523a:	7911      	ldrb	r1, [r2, #4]
    523c:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    5240:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    5244:	8519      	strh	r1, [r3, #40]	; 0x28
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    5246:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    524a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	20000000 	.word	0x20000000

00005254 <read_le_features_complete>:

static void read_le_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    5254:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    5256:	4b03      	ldr	r3, [pc, #12]	; (5264 <read_le_features_complete+0x10>)
    5258:	f8d2 0001 	ldr.w	r0, [r2, #1]
    525c:	f8d2 1005 	ldr.w	r1, [r2, #5]
    5260:	c303      	stmia	r3!, {r0, r1}
}
    5262:	4770      	bx	lr
    5264:	20000090 	.word	0x20000090

00005268 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
    5268:	b530      	push	{r4, r5, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    526a:	6884      	ldr	r4, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
    526c:	f104 0c01 	add.w	ip, r4, #1
    5270:	4d09      	ldr	r5, [pc, #36]	; (5298 <read_supported_commands_complete+0x30>)
    5272:	3441      	adds	r4, #65	; 0x41
    5274:	46ae      	mov	lr, r5
    5276:	f8dc 0000 	ldr.w	r0, [ip]
    527a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    527e:	f8dc 2008 	ldr.w	r2, [ip, #8]
    5282:	f8dc 300c 	ldr.w	r3, [ip, #12]
    5286:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    528a:	f10c 0c10 	add.w	ip, ip, #16
    528e:	4675      	mov	r5, lr
    5290:	45a4      	cmp	ip, r4
    5292:	d1ef      	bne.n	5274 <read_supported_commands_complete+0xc>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
    5294:	bd30      	pop	{r4, r5, pc}
    5296:	bf00      	nop
    5298:	20000034 	.word	0x20000034

0000529c <read_local_features_complete>:

static void read_local_features_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    529c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    529e:	4b03      	ldr	r3, [pc, #12]	; (52ac <read_local_features_complete+0x10>)
    52a0:	f8d2 0001 	ldr.w	r0, [r2, #1]
    52a4:	f8d2 1005 	ldr.w	r1, [r2, #5]
    52a8:	c303      	stmia	r3!, {r0, r1}
}
    52aa:	4770      	bx	lr
    52ac:	2000002c 	.word	0x2000002c

000052b0 <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    52b0:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    52b2:	7a19      	ldrb	r1, [r3, #8]
    52b4:	79da      	ldrb	r2, [r3, #7]
    52b6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    52ba:	7998      	ldrb	r0, [r3, #6]
    52bc:	795a      	ldrb	r2, [r3, #5]
    52be:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    52c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    52c6:	7918      	ldrb	r0, [r3, #4]
    52c8:	78d9      	ldrb	r1, [r3, #3]
    52ca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    52ce:	7898      	ldrb	r0, [r3, #2]
    52d0:	785b      	ldrb	r3, [r3, #1]
    52d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    52d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    52da:	4903      	ldr	r1, [pc, #12]	; (52e8 <le_read_supp_states_complete+0x38>)
    52dc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
    52e0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
}
    52e4:	4770      	bx	lr
    52e6:	bf00      	nop
    52e8:	20000000 	.word	0x20000000

000052ec <hci_reset_complete>:
{
    52ec:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
    52ee:	6883      	ldr	r3, [r0, #8]
    52f0:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    52f2:	b9a3      	cbnz	r3, 531e <hci_reset_complete+0x32>
		bt_scan_reset();
    52f4:	f001 f860 	bl	63b8 <bt_scan_reset>
    52f8:	f3bf 8f5b 	dmb	ish
    52fc:	4b08      	ldr	r3, [pc, #32]	; (5320 <hci_reset_complete+0x34>)
    52fe:	f853 2f88 	ldr.w	r2, [r3, #136]!
    5302:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    5306:	f002 0209 	and.w	r2, r2, #9
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    530a:	f3bf 8f5b 	dmb	ish
    530e:	e853 1f00 	ldrex	r1, [r3]
    5312:	e843 2000 	strex	r0, r2, [r3]
    5316:	2800      	cmp	r0, #0
    5318:	d1f9      	bne.n	530e <hci_reset_complete+0x22>
    531a:	f3bf 8f5b 	dmb	ish
}
    531e:	bd08      	pop	{r3, pc}
    5320:	20000000 	.word	0x20000000

00005324 <hci_cmd_done>:
{
    5324:	b570      	push	{r4, r5, r6, lr}
    5326:	4606      	mov	r6, r0
    5328:	460d      	mov	r5, r1
    532a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    532c:	7990      	ldrb	r0, [r2, #6]
    532e:	f00b fa71 	bl	10814 <net_buf_pool_get>
    5332:	4b39      	ldr	r3, [pc, #228]	; (5418 <hci_cmd_done+0xf4>)
    5334:	4283      	cmp	r3, r0
    5336:	d000      	beq.n	533a <hci_cmd_done+0x16>
}
    5338:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
    533a:	4620      	mov	r0, r4
    533c:	f017 fc1e 	bl	1cb7c <net_buf_id>
    5340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5344:	4b35      	ldr	r3, [pc, #212]	; (541c <hci_cmd_done+0xf8>)
    5346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    534a:	8843      	ldrh	r3, [r0, #2]
    534c:	42b3      	cmp	r3, r6
    534e:	d1f3      	bne.n	5338 <hci_cmd_done+0x14>
	if (bt_dev.sent_cmd) {
    5350:	4b33      	ldr	r3, [pc, #204]	; (5420 <hci_cmd_done+0xfc>)
    5352:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
    5356:	b128      	cbz	r0, 5364 <hci_cmd_done+0x40>
		net_buf_unref(bt_dev.sent_cmd);
    5358:	f017 fcf0 	bl	1cd3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    535c:	4b30      	ldr	r3, [pc, #192]	; (5420 <hci_cmd_done+0xfc>)
    535e:	2200      	movs	r2, #0
    5360:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	if (cmd(buf)->state && !status) {
    5364:	4620      	mov	r0, r4
    5366:	f017 fc09 	bl	1cb7c <net_buf_id>
    536a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    536e:	4b2b      	ldr	r3, [pc, #172]	; (541c <hci_cmd_done+0xf8>)
    5370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5374:	6843      	ldr	r3, [r0, #4]
    5376:	b103      	cbz	r3, 537a <hci_cmd_done+0x56>
    5378:	b1ed      	cbz	r5, 53b6 <hci_cmd_done+0x92>
	if (cmd(buf)->sync) {
    537a:	4620      	mov	r0, r4
    537c:	f017 fbfe 	bl	1cb7c <net_buf_id>
    5380:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5384:	4b25      	ldr	r3, [pc, #148]	; (541c <hci_cmd_done+0xf8>)
    5386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    538a:	6883      	ldr	r3, [r0, #8]
    538c:	2b00      	cmp	r3, #0
    538e:	d0d3      	beq.n	5338 <hci_cmd_done+0x14>
		cmd(buf)->status = status;
    5390:	4620      	mov	r0, r4
    5392:	f017 fbf3 	bl	1cb7c <net_buf_id>
    5396:	4e21      	ldr	r6, [pc, #132]	; (541c <hci_cmd_done+0xf8>)
    5398:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    539c:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
    53a0:	4620      	mov	r0, r4
    53a2:	f017 fbeb 	bl	1cb7c <net_buf_id>
    53a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    53aa:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    53ae:	68b0      	ldr	r0, [r6, #8]
	z_impl_k_sem_give(sem);
    53b0:	f00d fdac 	bl	12f0c <z_impl_k_sem_give>
}
    53b4:	e7c0      	b.n	5338 <hci_cmd_done+0x14>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    53b6:	4620      	mov	r0, r4
    53b8:	f017 fbe0 	bl	1cb7c <net_buf_id>
    53bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    53c0:	4b16      	ldr	r3, [pc, #88]	; (541c <hci_cmd_done+0xf8>)
    53c2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    53c6:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    53c8:	6819      	ldr	r1, [r3, #0]
    53ca:	685a      	ldr	r2, [r3, #4]
    53cc:	7a18      	ldrb	r0, [r3, #8]
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    53ce:	f002 061f 	and.w	r6, r2, #31
    53d2:	2301      	movs	r3, #1
    53d4:	40b3      	lsls	r3, r6

	if (val) {
    53d6:	b170      	cbz	r0, 53f6 <hci_cmd_done+0xd2>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    53d8:	0952      	lsrs	r2, r2, #5
    53da:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53de:	f3bf 8f5b 	dmb	ish
    53e2:	e852 1f00 	ldrex	r1, [r2]
    53e6:	4319      	orrs	r1, r3
    53e8:	e842 1000 	strex	r0, r1, [r2]
    53ec:	2800      	cmp	r0, #0
    53ee:	d1f8      	bne.n	53e2 <hci_cmd_done+0xbe>
    53f0:	f3bf 8f5b 	dmb	ish
    53f4:	e7c1      	b.n	537a <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    53f6:	0952      	lsrs	r2, r2, #5
    53f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    53fc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53fe:	f3bf 8f5b 	dmb	ish
    5402:	e852 1f00 	ldrex	r1, [r2]
    5406:	4019      	ands	r1, r3
    5408:	e842 1000 	strex	r0, r1, [r2]
    540c:	2800      	cmp	r0, #0
    540e:	d1f8      	bne.n	5402 <hci_cmd_done+0xde>
    5410:	f3bf 8f5b 	dmb	ish
	}
}
    5414:	e7b1      	b.n	537a <hci_cmd_done+0x56>
    5416:	bf00      	nop
    5418:	20000fb4 	.word	0x20000fb4
    541c:	2000222c 	.word	0x2000222c
    5420:	20000000 	.word	0x20000000

00005424 <hci_cmd_status>:
{
    5424:	b538      	push	{r3, r4, r5, lr}
    5426:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    5428:	2104      	movs	r1, #4
    542a:	3008      	adds	r0, #8
    542c:	f017 fcf5 	bl	1ce1a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5430:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5432:	4622      	mov	r2, r4
    5434:	7801      	ldrb	r1, [r0, #0]
    5436:	8840      	ldrh	r0, [r0, #2]
    5438:	f7ff ff74 	bl	5324 <hci_cmd_done>
	if (ncmd) {
    543c:	b905      	cbnz	r5, 5440 <hci_cmd_status+0x1c>
}
    543e:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
    5440:	4801      	ldr	r0, [pc, #4]	; (5448 <hci_cmd_status+0x24>)
    5442:	f00d fd63 	bl	12f0c <z_impl_k_sem_give>
    5446:	e7fa      	b.n	543e <hci_cmd_status+0x1a>
    5448:	200000a0 	.word	0x200000a0

0000544c <hci_cmd_complete>:
{
    544c:	b538      	push	{r3, r4, r5, lr}
    544e:	4604      	mov	r4, r0
    5450:	2103      	movs	r1, #3
    5452:	3008      	adds	r0, #8
    5454:	f017 fce1 	bl	1ce1a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5458:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
    545a:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    545c:	4622      	mov	r2, r4
    545e:	7819      	ldrb	r1, [r3, #0]
    5460:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5464:	f7ff ff5e 	bl	5324 <hci_cmd_done>
	if (ncmd) {
    5468:	b905      	cbnz	r5, 546c <hci_cmd_complete+0x20>
}
    546a:	bd38      	pop	{r3, r4, r5, pc}
    546c:	4801      	ldr	r0, [pc, #4]	; (5474 <hci_cmd_complete+0x28>)
    546e:	f00d fd4d 	bl	12f0c <z_impl_k_sem_give>
    5472:	e7fa      	b.n	546a <hci_cmd_complete+0x1e>
    5474:	200000a0 	.word	0x200000a0

00005478 <hci_le_meta_event>:
{
    5478:	b510      	push	{r4, lr}
    547a:	4604      	mov	r4, r0
    547c:	2101      	movs	r1, #1
    547e:	3008      	adds	r0, #8
    5480:	f017 fccb 	bl	1ce1a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5484:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
    5486:	2300      	movs	r3, #0
    5488:	2b06      	cmp	r3, #6
    548a:	d80d      	bhi.n	54a8 <hci_le_meta_event+0x30>
		const struct event_handler *handler = &handlers[i];
    548c:	4a08      	ldr	r2, [pc, #32]	; (54b0 <hci_le_meta_event+0x38>)
    548e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    5492:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    5496:	4290      	cmp	r0, r2
    5498:	d107      	bne.n	54aa <hci_le_meta_event+0x32>
		if (buf->len < handler->min_len) {
    549a:	89a2      	ldrh	r2, [r4, #12]
    549c:	784b      	ldrb	r3, [r1, #1]
    549e:	429a      	cmp	r2, r3
    54a0:	d302      	bcc.n	54a8 <hci_le_meta_event+0x30>
		handler->handler(buf);
    54a2:	684b      	ldr	r3, [r1, #4]
    54a4:	4620      	mov	r0, r4
    54a6:	4798      	blx	r3
}
    54a8:	bd10      	pop	{r4, pc}
	for (i = 0; i < num_handlers; i++) {
    54aa:	3301      	adds	r3, #1
    54ac:	e7ec      	b.n	5488 <hci_le_meta_event+0x10>
    54ae:	bf00      	nop
    54b0:	0001e9e4 	.word	0x0001e9e4

000054b4 <hci_event>:
{
    54b4:	b538      	push	{r3, r4, r5, lr}
    54b6:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
    54b8:	8983      	ldrh	r3, [r0, #12]
    54ba:	2b01      	cmp	r3, #1
    54bc:	d927      	bls.n	550e <hci_event+0x5a>
    54be:	2102      	movs	r1, #2
    54c0:	f104 0008 	add.w	r0, r4, #8
    54c4:	f017 fca9 	bl	1ce1a <net_buf_simple_pull_mem>
    54c8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    54ca:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
    54cc:	2b05      	cmp	r3, #5
    54ce:	d02e      	beq.n	552e <hci_event+0x7a>
    54d0:	d32f      	bcc.n	5532 <hci_event+0x7e>
    54d2:	3b0e      	subs	r3, #14
    54d4:	b2db      	uxtb	r3, r3
    54d6:	2b01      	cmp	r3, #1
    54d8:	d827      	bhi.n	552a <hci_event+0x76>
		__fallthrough;
#endif /* defined(CONFIG_BT_CONN) */
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    54da:	2301      	movs	r3, #1
    54dc:	f013 0f02 	tst.w	r3, #2
    54e0:	d029      	beq.n	5536 <hci_event+0x82>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    54e2:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
    54e4:	2300      	movs	r3, #0
    54e6:	2b02      	cmp	r3, #2
    54e8:	d80d      	bhi.n	5506 <hci_event+0x52>
		const struct event_handler *handler = &handlers[i];
    54ea:	4a1b      	ldr	r2, [pc, #108]	; (5558 <hci_event+0xa4>)
    54ec:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    54f0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    54f4:	4290      	cmp	r0, r2
    54f6:	d12c      	bne.n	5552 <hci_event+0x9e>
		if (buf->len < handler->min_len) {
    54f8:	89a2      	ldrh	r2, [r4, #12]
    54fa:	784b      	ldrb	r3, [r1, #1]
    54fc:	429a      	cmp	r2, r3
    54fe:	d302      	bcc.n	5506 <hci_event+0x52>
		handler->handler(buf);
    5500:	684b      	ldr	r3, [r1, #4]
    5502:	4620      	mov	r0, r4
    5504:	4798      	blx	r3
	net_buf_unref(buf);
    5506:	4620      	mov	r0, r4
    5508:	f017 fc18 	bl	1cd3c <net_buf_unref>
}
    550c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    550e:	f640 1337 	movw	r3, #2359	; 0x937
    5512:	4a12      	ldr	r2, [pc, #72]	; (555c <hci_event+0xa8>)
    5514:	4912      	ldr	r1, [pc, #72]	; (5560 <hci_event+0xac>)
    5516:	4813      	ldr	r0, [pc, #76]	; (5564 <hci_event+0xb0>)
    5518:	f014 f959 	bl	197ce <assert_print>
    551c:	4040      	eors	r0, r0
    551e:	f380 8811 	msr	BASEPRI, r0
    5522:	f04f 0003 	mov.w	r0, #3
    5526:	df02      	svc	2
    5528:	e7c9      	b.n	54be <hci_event+0xa>
	default:
		return BT_HCI_EVT_FLAG_RECV;
    552a:	2302      	movs	r3, #2
    552c:	e7d6      	b.n	54dc <hci_event+0x28>
	switch (evt) {
    552e:	2303      	movs	r3, #3
    5530:	e7d4      	b.n	54dc <hci_event+0x28>
		return BT_HCI_EVT_FLAG_RECV;
    5532:	2302      	movs	r3, #2
    5534:	e7d2      	b.n	54dc <hci_event+0x28>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    5536:	f640 133b 	movw	r3, #2363	; 0x93b
    553a:	4a08      	ldr	r2, [pc, #32]	; (555c <hci_event+0xa8>)
    553c:	490a      	ldr	r1, [pc, #40]	; (5568 <hci_event+0xb4>)
    553e:	4809      	ldr	r0, [pc, #36]	; (5564 <hci_event+0xb0>)
    5540:	f014 f945 	bl	197ce <assert_print>
    5544:	4040      	eors	r0, r0
    5546:	f380 8811 	msr	BASEPRI, r0
    554a:	f04f 0003 	mov.w	r0, #3
    554e:	df02      	svc	2
    5550:	e7c7      	b.n	54e2 <hci_event+0x2e>
	for (i = 0; i < num_handlers; i++) {
    5552:	3301      	adds	r3, #1
    5554:	e7c7      	b.n	54e6 <hci_event+0x32>
    5556:	bf00      	nop
    5558:	0001ea2c 	.word	0x0001ea2c
    555c:	0001e8d0 	.word	0x0001e8d0
    5560:	0001e904 	.word	0x0001e904
    5564:	0001e920 	.word	0x0001e920
    5568:	0001e940 	.word	0x0001e940

0000556c <bt_hci_cmd_state_set_init>:
{
    556c:	b510      	push	{r4, lr}
    556e:	460c      	mov	r4, r1
	state->target = target;
    5570:	600a      	str	r2, [r1, #0]
	state->bit = bit;
    5572:	604b      	str	r3, [r1, #4]
	state->val = val;
    5574:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5578:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
    557a:	f017 faff 	bl	1cb7c <net_buf_id>
    557e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5582:	4b02      	ldr	r3, [pc, #8]	; (558c <bt_hci_cmd_state_set_init+0x20>)
    5584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5588:	6044      	str	r4, [r0, #4]
}
    558a:	bd10      	pop	{r4, pc}
    558c:	2000222c 	.word	0x2000222c

00005590 <bt_hci_cmd_create>:
{
    5590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5594:	4606      	mov	r6, r0
    5596:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
    5598:	f04f 32ff 	mov.w	r2, #4294967295
    559c:	f04f 33ff 	mov.w	r3, #4294967295
    55a0:	4818      	ldr	r0, [pc, #96]	; (5604 <bt_hci_cmd_create+0x74>)
    55a2:	f017 fb97 	bl	1ccd4 <net_buf_alloc_fixed>
    55a6:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    55a8:	f100 0908 	add.w	r9, r0, #8
    55ac:	2100      	movs	r1, #0
    55ae:	4648      	mov	r0, r9
    55b0:	f017 fbb2 	bl	1cd18 <net_buf_simple_reserve>
    55b4:	f04f 0800 	mov.w	r8, #0
    55b8:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    55bc:	4620      	mov	r0, r4
    55be:	f017 fadd 	bl	1cb7c <net_buf_id>
    55c2:	4d11      	ldr	r5, [pc, #68]	; (5608 <bt_hci_cmd_create+0x78>)
    55c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    55c8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    55cc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    55ce:	4620      	mov	r0, r4
    55d0:	f017 fad4 	bl	1cb7c <net_buf_id>
    55d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    55d8:	eb05 0380 	add.w	r3, r5, r0, lsl #2
    55dc:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
    55e0:	4620      	mov	r0, r4
    55e2:	f017 facb 	bl	1cb7c <net_buf_id>
    55e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    55ea:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    55ee:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
    55f2:	2103      	movs	r1, #3
    55f4:	4648      	mov	r0, r9
    55f6:	f017 fbf7 	bl	1cde8 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    55fa:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
    55fc:	7087      	strb	r7, [r0, #2]
}
    55fe:	4620      	mov	r0, r4
    5600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5604:	20000fb4 	.word	0x20000fb4
    5608:	2000222c 	.word	0x2000222c

0000560c <bt_hci_cmd_send_sync>:
{
    560c:	b570      	push	{r4, r5, r6, lr}
    560e:	b086      	sub	sp, #24
    5610:	4615      	mov	r5, r2
	if (!buf) {
    5612:	460c      	mov	r4, r1
    5614:	b359      	cbz	r1, 566e <bt_hci_cmd_send_sync+0x62>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5616:	2201      	movs	r2, #1
    5618:	2100      	movs	r1, #0
    561a:	4668      	mov	r0, sp
    561c:	f018 fb45 	bl	1dcaa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5620:	4620      	mov	r0, r4
    5622:	f017 faab 	bl	1cb7c <net_buf_id>
    5626:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    562a:	4b26      	ldr	r3, [pc, #152]	; (56c4 <bt_hci_cmd_send_sync+0xb8>)
    562c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5630:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    5634:	4620      	mov	r0, r4
    5636:	f017 fba7 	bl	1cd88 <net_buf_ref>
    563a:	4601      	mov	r1, r0
    563c:	4822      	ldr	r0, [pc, #136]	; (56c8 <bt_hci_cmd_send_sync+0xbc>)
    563e:	f017 fb6f 	bl	1cd20 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5642:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5646:	2300      	movs	r3, #0
    5648:	4668      	mov	r0, sp
    564a:	f00d fc87 	bl	12f5c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    564e:	4606      	mov	r6, r0
    5650:	b9a8      	cbnz	r0, 567e <bt_hci_cmd_send_sync+0x72>
	status = cmd(buf)->status;
    5652:	4620      	mov	r0, r4
    5654:	f017 fa92 	bl	1cb7c <net_buf_id>
    5658:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    565c:	4b19      	ldr	r3, [pc, #100]	; (56c4 <bt_hci_cmd_send_sync+0xb8>)
    565e:	f813 6020 	ldrb.w	r6, [r3, r0, lsl #2]
	if (status) {
    5662:	b9f6      	cbnz	r6, 56a2 <bt_hci_cmd_send_sync+0x96>
	if (rsp) {
    5664:	b345      	cbz	r5, 56b8 <bt_hci_cmd_send_sync+0xac>
		*rsp = buf;
    5666:	602c      	str	r4, [r5, #0]
	return 0;
    5668:	2000      	movs	r0, #0
}
    566a:	b006      	add	sp, #24
    566c:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    566e:	f7ff ff8f 	bl	5590 <bt_hci_cmd_create>
		if (!buf) {
    5672:	4604      	mov	r4, r0
    5674:	2800      	cmp	r0, #0
    5676:	d1ce      	bne.n	5616 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    5678:	f06f 0068 	mvn.w	r0, #104	; 0x68
    567c:	e7f5      	b.n	566a <bt_hci_cmd_send_sync+0x5e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    567e:	f240 1335 	movw	r3, #309	; 0x135
    5682:	4a12      	ldr	r2, [pc, #72]	; (56cc <bt_hci_cmd_send_sync+0xc0>)
    5684:	4912      	ldr	r1, [pc, #72]	; (56d0 <bt_hci_cmd_send_sync+0xc4>)
    5686:	4813      	ldr	r0, [pc, #76]	; (56d4 <bt_hci_cmd_send_sync+0xc8>)
    5688:	f014 f8a1 	bl	197ce <assert_print>
    568c:	4631      	mov	r1, r6
    568e:	4812      	ldr	r0, [pc, #72]	; (56d8 <bt_hci_cmd_send_sync+0xcc>)
    5690:	f014 f89d 	bl	197ce <assert_print>
    5694:	4040      	eors	r0, r0
    5696:	f380 8811 	msr	BASEPRI, r0
    569a:	f04f 0003 	mov.w	r0, #3
    569e:	df02      	svc	2
    56a0:	e7d7      	b.n	5652 <bt_hci_cmd_send_sync+0x46>
		net_buf_unref(buf);
    56a2:	4620      	mov	r0, r4
    56a4:	f017 fb4a 	bl	1cd3c <net_buf_unref>
		switch (status) {
    56a8:	2e09      	cmp	r6, #9
    56aa:	d002      	beq.n	56b2 <bt_hci_cmd_send_sync+0xa6>
			return -EIO;
    56ac:	f06f 0004 	mvn.w	r0, #4
    56b0:	e7db      	b.n	566a <bt_hci_cmd_send_sync+0x5e>
			return -ECONNREFUSED;
    56b2:	f06f 006e 	mvn.w	r0, #110	; 0x6e
    56b6:	e7d8      	b.n	566a <bt_hci_cmd_send_sync+0x5e>
		net_buf_unref(buf);
    56b8:	4620      	mov	r0, r4
    56ba:	f017 fb3f 	bl	1cd3c <net_buf_unref>
	return 0;
    56be:	2000      	movs	r0, #0
    56c0:	e7d3      	b.n	566a <bt_hci_cmd_send_sync+0x5e>
    56c2:	bf00      	nop
    56c4:	2000222c 	.word	0x2000222c
    56c8:	200000bc 	.word	0x200000bc
    56cc:	0001e8d0 	.word	0x0001e8d0
    56d0:	0001e970 	.word	0x0001e970
    56d4:	0001e920 	.word	0x0001e920
    56d8:	0001e97c 	.word	0x0001e97c

000056dc <common_init>:
	bt_dev.le.rl_size = rp->rl_size;
}
#endif /* defined(CONFIG_BT_SMP) */

static int common_init(void)
{
    56dc:	b510      	push	{r4, lr}
    56de:	b082      	sub	sp, #8
	struct net_buf *rsp;
	int err;

	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    56e0:	4b22      	ldr	r3, [pc, #136]	; (576c <common_init+0x90>)
    56e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    56e6:	689b      	ldr	r3, [r3, #8]
    56e8:	f013 0f01 	tst.w	r3, #1
    56ec:	d10d      	bne.n	570a <common_init+0x2e>
		/* Send HCI_RESET */
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    56ee:	aa01      	add	r2, sp, #4
    56f0:	2100      	movs	r1, #0
    56f2:	f640 4003 	movw	r0, #3075	; 0xc03
    56f6:	f7ff ff89 	bl	560c <bt_hci_cmd_send_sync>
		if (err) {
    56fa:	4604      	mov	r4, r0
    56fc:	b968      	cbnz	r0, 571a <common_init+0x3e>
			return err;
		}
		hci_reset_complete(rsp);
    56fe:	9801      	ldr	r0, [sp, #4]
    5700:	f7ff fdf4 	bl	52ec <hci_reset_complete>
		net_buf_unref(rsp);
    5704:	9801      	ldr	r0, [sp, #4]
    5706:	f017 fb19 	bl	1cd3c <net_buf_unref>
	}

	/* Read Local Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    570a:	aa01      	add	r2, sp, #4
    570c:	2100      	movs	r1, #0
    570e:	f241 0003 	movw	r0, #4099	; 0x1003
    5712:	f7ff ff7b 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5716:	4604      	mov	r4, r0
    5718:	b110      	cbz	r0, 5720 <common_init+0x44>
		return err;
	}
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

	return 0;
}
    571a:	4620      	mov	r0, r4
    571c:	b002      	add	sp, #8
    571e:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
    5720:	9801      	ldr	r0, [sp, #4]
    5722:	f7ff fdbb 	bl	529c <read_local_features_complete>
	net_buf_unref(rsp);
    5726:	9801      	ldr	r0, [sp, #4]
    5728:	f017 fb08 	bl	1cd3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    572c:	aa01      	add	r2, sp, #4
    572e:	2100      	movs	r1, #0
    5730:	f241 0001 	movw	r0, #4097	; 0x1001
    5734:	f7ff ff6a 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5738:	4604      	mov	r4, r0
    573a:	2800      	cmp	r0, #0
    573c:	d1ed      	bne.n	571a <common_init+0x3e>
	read_local_ver_complete(rsp);
    573e:	9801      	ldr	r0, [sp, #4]
    5740:	f7ff fd74 	bl	522c <read_local_ver_complete>
	net_buf_unref(rsp);
    5744:	9801      	ldr	r0, [sp, #4]
    5746:	f017 faf9 	bl	1cd3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    574a:	aa01      	add	r2, sp, #4
    574c:	2100      	movs	r1, #0
    574e:	f241 0002 	movw	r0, #4098	; 0x1002
    5752:	f7ff ff5b 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5756:	4604      	mov	r4, r0
    5758:	2800      	cmp	r0, #0
    575a:	d1de      	bne.n	571a <common_init+0x3e>
	read_supported_commands_complete(rsp);
    575c:	9801      	ldr	r0, [sp, #4]
    575e:	f7ff fd83 	bl	5268 <read_supported_commands_complete>
	net_buf_unref(rsp);
    5762:	9801      	ldr	r0, [sp, #4]
    5764:	f017 faea 	bl	1cd3c <net_buf_unref>
	return 0;
    5768:	e7d7      	b.n	571a <common_init+0x3e>
    576a:	bf00      	nop
    576c:	20000000 	.word	0x20000000

00005770 <le_init>:
	struct bt_hci_cp_write_le_host_supp *cp_le;
	struct net_buf *buf, *rsp;
	int err;

	/* For now we only support LE capable controllers */
	if (!BT_FEAT_LE(bt_dev.features)) {
    5770:	4b32      	ldr	r3, [pc, #200]	; (583c <le_init+0xcc>)
    5772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    5776:	f013 0f40 	tst.w	r3, #64	; 0x40
    577a:	d058      	beq.n	582e <le_init+0xbe>
{
    577c:	b510      	push	{r4, lr}
    577e:	b082      	sub	sp, #8
		BT_ERR("Non-LE capable controller detected!");
		return -ENODEV;
	}

	/* Read Low Energy Supported Features */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    5780:	aa01      	add	r2, sp, #4
    5782:	2100      	movs	r1, #0
    5784:	f242 0003 	movw	r0, #8195	; 0x2003
    5788:	f7ff ff40 	bl	560c <bt_hci_cmd_send_sync>
				   &rsp);
	if (err) {
    578c:	4603      	mov	r3, r0
    578e:	b110      	cbz	r0, 5796 <le_init+0x26>
		}
	}
#endif /* CONFIG_BT_DF */

	return  le_set_event_mask();
}
    5790:	4618      	mov	r0, r3
    5792:	b002      	add	sp, #8
    5794:	bd10      	pop	{r4, pc}
	read_le_features_complete(rsp);
    5796:	9801      	ldr	r0, [sp, #4]
    5798:	f7ff fd5c 	bl	5254 <read_le_features_complete>
	net_buf_unref(rsp);
    579c:	9801      	ldr	r0, [sp, #4]
    579e:	f017 facd 	bl	1cd3c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    57a2:	4b26      	ldr	r3, [pc, #152]	; (583c <le_init+0xcc>)
    57a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    57a8:	f013 0f20 	tst.w	r3, #32
    57ac:	d017      	beq.n	57de <le_init+0x6e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    57ae:	4b23      	ldr	r3, [pc, #140]	; (583c <le_init+0xcc>)
    57b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    57b4:	f013 0f08 	tst.w	r3, #8
    57b8:	d129      	bne.n	580e <le_init+0x9e>
	if (BT_FEAT_LE_CONNECTIONLESS_CTE_TX(bt_dev.le.features) ||
    57ba:	4b20      	ldr	r3, [pc, #128]	; (583c <le_init+0xcc>)
    57bc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    57c0:	f013 0f18 	tst.w	r3, #24
    57c4:	d102      	bne.n	57cc <le_init+0x5c>
	    BT_FEAT_LE_CONNECTIONLESS_CTE_RX(bt_dev.le.features) ||
    57c6:	f013 0f80 	tst.w	r3, #128	; 0x80
    57ca:	d004      	beq.n	57d6 <le_init+0x66>
		err = le_df_init();
    57cc:	f001 fb4c 	bl	6e68 <le_df_init>
		if (err) {
    57d0:	4603      	mov	r3, r0
    57d2:	2800      	cmp	r0, #0
    57d4:	d1dc      	bne.n	5790 <le_init+0x20>
	return  le_set_event_mask();
    57d6:	f014 f96c 	bl	19ab2 <le_set_event_mask>
    57da:	4603      	mov	r3, r0
    57dc:	e7d8      	b.n	5790 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    57de:	2102      	movs	r1, #2
    57e0:	f640 406d 	movw	r0, #3181	; 0xc6d
    57e4:	f7ff fed4 	bl	5590 <bt_hci_cmd_create>
		if (!buf) {
    57e8:	4604      	mov	r4, r0
    57ea:	b320      	cbz	r0, 5836 <le_init+0xc6>
    57ec:	2102      	movs	r1, #2
    57ee:	3008      	adds	r0, #8
    57f0:	f017 fafa 	bl	1cde8 <net_buf_simple_add>
		cp_le->le = 0x01;
    57f4:	2301      	movs	r3, #1
    57f6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    57f8:	2200      	movs	r2, #0
    57fa:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    57fc:	4621      	mov	r1, r4
    57fe:	f640 406d 	movw	r0, #3181	; 0xc6d
    5802:	f7ff ff03 	bl	560c <bt_hci_cmd_send_sync>
		if (err) {
    5806:	4603      	mov	r3, r0
    5808:	2800      	cmp	r0, #0
    580a:	d0d0      	beq.n	57ae <le_init+0x3e>
    580c:	e7c0      	b.n	5790 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    580e:	aa01      	add	r2, sp, #4
    5810:	2100      	movs	r1, #0
    5812:	f242 001c 	movw	r0, #8220	; 0x201c
    5816:	f7ff fef9 	bl	560c <bt_hci_cmd_send_sync>
		if (err) {
    581a:	4603      	mov	r3, r0
    581c:	2800      	cmp	r0, #0
    581e:	d1b7      	bne.n	5790 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    5820:	9801      	ldr	r0, [sp, #4]
    5822:	f7ff fd45 	bl	52b0 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    5826:	9801      	ldr	r0, [sp, #4]
    5828:	f017 fa88 	bl	1cd3c <net_buf_unref>
    582c:	e7c5      	b.n	57ba <le_init+0x4a>
		return -ENODEV;
    582e:	f06f 0312 	mvn.w	r3, #18
}
    5832:	4618      	mov	r0, r3
    5834:	4770      	bx	lr
			return -ENOBUFS;
    5836:	f06f 0368 	mvn.w	r3, #104	; 0x68
    583a:	e7a9      	b.n	5790 <le_init+0x20>
    583c:	20000000 	.word	0x20000000

00005840 <hci_vs_init>:
	return "unknown";
}
#endif /* CONFIG_BT_DEBUG */

static void hci_vs_init(void)
{
    5840:	b510      	push	{r4, lr}
    5842:	b082      	sub	sp, #8
				"Zephyr vendor HCI");
			return;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    5844:	aa01      	add	r2, sp, #4
    5846:	2100      	movs	r1, #0
    5848:	f64f 4001 	movw	r0, #64513	; 0xfc01
    584c:	f7ff fede 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5850:	b108      	cbz	r0, 5856 <hci_vs_init+0x16>
		rp.feat = (void *)rsp->data;
		memcpy(bt_dev.vs_features, rp.feat->features,
		       BT_DEV_VS_FEAT_MAX);
		net_buf_unref(rsp);
	}
}
    5852:	b002      	add	sp, #8
    5854:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    5856:	9801      	ldr	r0, [sp, #4]
    5858:	f017 fa70 	bl	1cd3c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    585c:	aa01      	add	r2, sp, #4
    585e:	2100      	movs	r1, #0
    5860:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5864:	f7ff fed2 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5868:	2800      	cmp	r0, #0
    586a:	d1f2      	bne.n	5852 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    586c:	9801      	ldr	r0, [sp, #4]
    586e:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5870:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    5874:	4c0c      	ldr	r4, [pc, #48]	; (58a8 <hci_vs_init+0x68>)
    5876:	f8a4 3075 	strh.w	r3, [r4, #117]	; 0x75
	net_buf_unref(rsp);
    587a:	f017 fa5f 	bl	1cd3c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    587e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
    5882:	f013 0f04 	tst.w	r3, #4
    5886:	d0e4      	beq.n	5852 <hci_vs_init+0x12>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5888:	aa01      	add	r2, sp, #4
    588a:	2100      	movs	r1, #0
    588c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    5890:	f7ff febc 	bl	560c <bt_hci_cmd_send_sync>
		if (err) {
    5894:	2800      	cmp	r0, #0
    5896:	d1dc      	bne.n	5852 <hci_vs_init+0x12>
		rp.feat = (void *)rsp->data;
    5898:	9801      	ldr	r0, [sp, #4]
    589a:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    589c:	785a      	ldrb	r2, [r3, #1]
    589e:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
		net_buf_unref(rsp);
    58a2:	f017 fa4b 	bl	1cd3c <net_buf_unref>
    58a6:	e7d4      	b.n	5852 <hci_vs_init+0x12>
    58a8:	20000000 	.word	0x20000000

000058ac <hci_init>:
#endif /* CONFIG_BT_HCI_VS_EXT */

static int hci_init(void)
{
    58ac:	b508      	push	{r3, lr}
			return err;
		}
	}
#endif /* defined(CONFIG_BT_HCI_SETUP) */

	err = common_init();
    58ae:	f7ff ff15 	bl	56dc <common_init>
	if (err) {
    58b2:	4603      	mov	r3, r0
    58b4:	b108      	cbz	r0, 58ba <hci_init+0xe>
	if (err) {
		return err;
	}

	return 0;
}
    58b6:	4618      	mov	r0, r3
    58b8:	bd08      	pop	{r3, pc}
	err = le_init();
    58ba:	f7ff ff59 	bl	5770 <le_init>
	if (err) {
    58be:	4603      	mov	r3, r0
    58c0:	2800      	cmp	r0, #0
    58c2:	d1f8      	bne.n	58b6 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    58c4:	4b0a      	ldr	r3, [pc, #40]	; (58f0 <hci_init+0x44>)
    58c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
    58ca:	f013 0f20 	tst.w	r3, #32
    58ce:	d104      	bne.n	58da <hci_init+0x2e>
		err = bt_br_init();
    58d0:	f014 f8e7 	bl	19aa2 <bt_br_init>
		if (err) {
    58d4:	4603      	mov	r3, r0
    58d6:	2800      	cmp	r0, #0
    58d8:	d1ed      	bne.n	58b6 <hci_init+0xa>
	err = set_event_mask();
    58da:	f014 f90b 	bl	19af4 <set_event_mask>
	if (err) {
    58de:	4603      	mov	r3, r0
    58e0:	2800      	cmp	r0, #0
    58e2:	d1e8      	bne.n	58b6 <hci_init+0xa>
	hci_vs_init();
    58e4:	f7ff ffac 	bl	5840 <hci_vs_init>
	err = bt_id_init();
    58e8:	f000 fb80 	bl	5fec <bt_id_init>
    58ec:	4603      	mov	r3, r0
	if (err) {
    58ee:	e7e2      	b.n	58b6 <hci_init+0xa>
    58f0:	20000000 	.word	0x20000000

000058f4 <bt_send>:

int bt_send(struct net_buf *buf)
{
    58f4:	b508      	push	{r3, lr}

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
    58f6:	4b03      	ldr	r3, [pc, #12]	; (5904 <bt_send+0x10>)
    58f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    58fc:	695b      	ldr	r3, [r3, #20]
    58fe:	4798      	blx	r3
}
    5900:	bd08      	pop	{r3, pc}
    5902:	bf00      	nop
    5904:	20000000 	.word	0x20000000

00005908 <send_cmd>:
{
    5908:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    590a:	2200      	movs	r2, #0
    590c:	2300      	movs	r3, #0
    590e:	4826      	ldr	r0, [pc, #152]	; (59a8 <send_cmd+0xa0>)
    5910:	f017 f9e7 	bl	1cce2 <net_buf_get>
	BT_ASSERT(buf);
    5914:	4604      	mov	r4, r0
    5916:	b1d8      	cbz	r0, 5950 <send_cmd+0x48>
    5918:	4d24      	ldr	r5, [pc, #144]	; (59ac <send_cmd+0xa4>)
    591a:	f04f 32ff 	mov.w	r2, #4294967295
    591e:	f04f 33ff 	mov.w	r3, #4294967295
    5922:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    5926:	f00d fb19 	bl	12f5c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    592a:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
    592e:	b120      	cbz	r0, 593a <send_cmd+0x32>
		net_buf_unref(bt_dev.sent_cmd);
    5930:	f017 fa04 	bl	1cd3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5934:	2200      	movs	r2, #0
    5936:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
	bt_dev.sent_cmd = net_buf_ref(buf);
    593a:	4620      	mov	r0, r4
    593c:	f017 fa24 	bl	1cd88 <net_buf_ref>
    5940:	4b1a      	ldr	r3, [pc, #104]	; (59ac <send_cmd+0xa4>)
    5942:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
	err = bt_send(buf);
    5946:	4620      	mov	r0, r4
    5948:	f7ff ffd4 	bl	58f4 <bt_send>
	if (err) {
    594c:	b970      	cbnz	r0, 596c <send_cmd+0x64>
}
    594e:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    5950:	f640 134a 	movw	r3, #2378	; 0x94a
    5954:	4a16      	ldr	r2, [pc, #88]	; (59b0 <send_cmd+0xa8>)
    5956:	4917      	ldr	r1, [pc, #92]	; (59b4 <send_cmd+0xac>)
    5958:	4817      	ldr	r0, [pc, #92]	; (59b8 <send_cmd+0xb0>)
    595a:	f013 ff38 	bl	197ce <assert_print>
    595e:	4040      	eors	r0, r0
    5960:	f380 8811 	msr	BASEPRI, r0
    5964:	f04f 0003 	mov.w	r0, #3
    5968:	df02      	svc	2
    596a:	e7d5      	b.n	5918 <send_cmd+0x10>
	z_impl_k_sem_give(sem);
    596c:	4d0f      	ldr	r5, [pc, #60]	; (59ac <send_cmd+0xa4>)
    596e:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
    5972:	f00d facb 	bl	12f0c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    5976:	4620      	mov	r0, r4
    5978:	f017 f900 	bl	1cb7c <net_buf_id>
    597c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5980:	4b0e      	ldr	r3, [pc, #56]	; (59bc <send_cmd+0xb4>)
    5982:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5986:	4622      	mov	r2, r4
    5988:	211f      	movs	r1, #31
    598a:	8840      	ldrh	r0, [r0, #2]
    598c:	f7ff fcca 	bl	5324 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5990:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
    5994:	f017 f9d2 	bl	1cd3c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5998:	2300      	movs	r3, #0
    599a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(buf);
    599e:	4620      	mov	r0, r4
    59a0:	f017 f9cc 	bl	1cd3c <net_buf_unref>
    59a4:	e7d3      	b.n	594e <send_cmd+0x46>
    59a6:	bf00      	nop
    59a8:	200000bc 	.word	0x200000bc
    59ac:	20000000 	.word	0x20000000
    59b0:	0001e8d0 	.word	0x0001e8d0
    59b4:	0001ebcc 	.word	0x0001ebcc
    59b8:	0001e920 	.word	0x0001e920
    59bc:	2000222c 	.word	0x2000222c

000059c0 <hci_tx_thread>:
{
    59c0:	b508      	push	{r3, lr}
    59c2:	e012      	b.n	59ea <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
    59c4:	f640 13b3 	movw	r3, #2483	; 0x9b3
    59c8:	4a0f      	ldr	r2, [pc, #60]	; (5a08 <hci_tx_thread+0x48>)
    59ca:	4910      	ldr	r1, [pc, #64]	; (5a0c <hci_tx_thread+0x4c>)
    59cc:	4810      	ldr	r0, [pc, #64]	; (5a10 <hci_tx_thread+0x50>)
    59ce:	f013 fefe 	bl	197ce <assert_print>
    59d2:	4040      	eors	r0, r0
    59d4:	f380 8811 	msr	BASEPRI, r0
    59d8:	f04f 0003 	mov.w	r0, #3
    59dc:	df02      	svc	2
		process_events(events, ev_count);
    59de:	2101      	movs	r1, #1
    59e0:	480c      	ldr	r0, [pc, #48]	; (5a14 <hci_tx_thread+0x54>)
    59e2:	f014 f8b3 	bl	19b4c <process_events>
	z_impl_k_yield();
    59e6:	f00d ff89 	bl	138fc <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
    59ea:	480a      	ldr	r0, [pc, #40]	; (5a14 <hci_tx_thread+0x54>)
    59ec:	68c3      	ldr	r3, [r0, #12]
    59ee:	f36f 3352 	bfc	r3, #13, #6
    59f2:	60c3      	str	r3, [r0, #12]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    59f4:	f04f 32ff 	mov.w	r2, #4294967295
    59f8:	f04f 33ff 	mov.w	r3, #4294967295
    59fc:	2101      	movs	r1, #1
    59fe:	f00e fbe5 	bl	141cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
    5a02:	2800      	cmp	r0, #0
    5a04:	d1de      	bne.n	59c4 <hci_tx_thread+0x4>
    5a06:	e7ea      	b.n	59de <hci_tx_thread+0x1e>
    5a08:	0001e8d0 	.word	0x0001e8d0
    5a0c:	0001e970 	.word	0x0001e970
    5a10:	0001e920 	.word	0x0001e920
    5a14:	200003b0 	.word	0x200003b0

00005a18 <hci_event_prio>:
		      sizeof(struct bt_hci_evt_num_completed_packets)),
#endif /* CONFIG_BT_CONN_TX */
};

void hci_event_prio(struct net_buf *buf)
{
    5a18:	b570      	push	{r4, r5, r6, lr}
    5a1a:	b082      	sub	sp, #8
    5a1c:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
    5a1e:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    5a22:	4628      	mov	r0, r5
    5a24:	f017 fa09 	bl	1ce3a <net_buf_simple_headroom>
    5a28:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
    5a2c:	89a3      	ldrh	r3, [r4, #12]
    5a2e:	f8ad 3006 	strh.w	r3, [sp, #6]

	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a32:	2b01      	cmp	r3, #1
    5a34:	d92f      	bls.n	5a96 <hci_event_prio+0x7e>
	return net_buf_simple_pull_mem(&buf->b, len);
    5a36:	2102      	movs	r1, #2
    5a38:	4628      	mov	r0, r5
    5a3a:	f017 f9ee 	bl	1ce1a <net_buf_simple_pull_mem>
    5a3e:	4605      	mov	r5, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5a40:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
    5a42:	2b05      	cmp	r3, #5
    5a44:	d037      	beq.n	5ab6 <hci_event_prio+0x9e>
    5a46:	d338      	bcc.n	5aba <hci_event_prio+0xa2>
    5a48:	3b0e      	subs	r3, #14
    5a4a:	b2db      	uxtb	r3, r3
    5a4c:	2b01      	cmp	r3, #1
    5a4e:	d830      	bhi.n	5ab2 <hci_event_prio+0x9a>
		return BT_HCI_EVT_FLAG_RECV_PRIO;
    5a50:	2601      	movs	r6, #1
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5a52:	f016 0f01 	tst.w	r6, #1
    5a56:	d032      	beq.n	5abe <hci_event_prio+0xa6>

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    5a58:	7828      	ldrb	r0, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
    5a5a:	2300      	movs	r3, #0
    5a5c:	2b01      	cmp	r3, #1
    5a5e:	d80d      	bhi.n	5a7c <hci_event_prio+0x64>
		const struct event_handler *handler = &handlers[i];
    5a60:	4a21      	ldr	r2, [pc, #132]	; (5ae8 <hci_event_prio+0xd0>)
    5a62:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
    5a66:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    5a6a:	4290      	cmp	r0, r2
    5a6c:	d135      	bne.n	5ada <hci_event_prio+0xc2>
		if (buf->len < handler->min_len) {
    5a6e:	89a2      	ldrh	r2, [r4, #12]
    5a70:	784b      	ldrb	r3, [r1, #1]
    5a72:	429a      	cmp	r2, r3
    5a74:	d302      	bcc.n	5a7c <hci_event_prio+0x64>
		handler->handler(buf);
    5a76:	684b      	ldr	r3, [r1, #4]
    5a78:	4620      	mov	r0, r4
    5a7a:	4798      	blx	r3

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    5a7c:	f016 0f02 	tst.w	r6, #2
    5a80:	d02d      	beq.n	5ade <hci_event_prio+0xc6>
	buf->data = buf->__buf + state->offset;
    5a82:	6923      	ldr	r3, [r4, #16]
    5a84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5a88:	4413      	add	r3, r2
    5a8a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
    5a8c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a90:	81a3      	strh	r3, [r4, #12]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
    5a92:	b002      	add	sp, #8
    5a94:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a96:	f640 534f 	movw	r3, #3407	; 0xd4f
    5a9a:	4a14      	ldr	r2, [pc, #80]	; (5aec <hci_event_prio+0xd4>)
    5a9c:	4914      	ldr	r1, [pc, #80]	; (5af0 <hci_event_prio+0xd8>)
    5a9e:	4815      	ldr	r0, [pc, #84]	; (5af4 <hci_event_prio+0xdc>)
    5aa0:	f013 fe95 	bl	197ce <assert_print>
    5aa4:	4040      	eors	r0, r0
    5aa6:	f380 8811 	msr	BASEPRI, r0
    5aaa:	f04f 0003 	mov.w	r0, #3
    5aae:	df02      	svc	2
    5ab0:	e7c1      	b.n	5a36 <hci_event_prio+0x1e>
		return BT_HCI_EVT_FLAG_RECV;
    5ab2:	2602      	movs	r6, #2
    5ab4:	e7cd      	b.n	5a52 <hci_event_prio+0x3a>
	switch (evt) {
    5ab6:	2603      	movs	r6, #3
    5ab8:	e7cb      	b.n	5a52 <hci_event_prio+0x3a>
		return BT_HCI_EVT_FLAG_RECV;
    5aba:	2602      	movs	r6, #2
    5abc:	e7c9      	b.n	5a52 <hci_event_prio+0x3a>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5abe:	f640 5353 	movw	r3, #3411	; 0xd53
    5ac2:	4a0a      	ldr	r2, [pc, #40]	; (5aec <hci_event_prio+0xd4>)
    5ac4:	490c      	ldr	r1, [pc, #48]	; (5af8 <hci_event_prio+0xe0>)
    5ac6:	480b      	ldr	r0, [pc, #44]	; (5af4 <hci_event_prio+0xdc>)
    5ac8:	f013 fe81 	bl	197ce <assert_print>
    5acc:	4040      	eors	r0, r0
    5ace:	f380 8811 	msr	BASEPRI, r0
    5ad2:	f04f 0003 	mov.w	r0, #3
    5ad6:	df02      	svc	2
    5ad8:	e7be      	b.n	5a58 <hci_event_prio+0x40>
	for (i = 0; i < num_handlers; i++) {
    5ada:	3301      	adds	r3, #1
    5adc:	e7be      	b.n	5a5c <hci_event_prio+0x44>
		net_buf_unref(buf);
    5ade:	4620      	mov	r0, r4
    5ae0:	f017 f92c 	bl	1cd3c <net_buf_unref>
}
    5ae4:	e7d5      	b.n	5a92 <hci_event_prio+0x7a>
    5ae6:	bf00      	nop
    5ae8:	0001ea44 	.word	0x0001ea44
    5aec:	0001e8d0 	.word	0x0001e8d0
    5af0:	0001e904 	.word	0x0001e904
    5af4:	0001e920 	.word	0x0001e920
    5af8:	0001e99c 	.word	0x0001e99c

00005afc <bt_recv_prio>:
		return -EINVAL;
	}
}

int bt_recv_prio(struct net_buf *buf)
{
    5afc:	b510      	push	{r4, lr}
    5afe:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    5b00:	7d03      	ldrb	r3, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5b02:	2b01      	cmp	r3, #1
    5b04:	d104      	bne.n	5b10 <bt_recv_prio+0x14>

	hci_event_prio(buf);
    5b06:	4620      	mov	r0, r4
    5b08:	f7ff ff86 	bl	5a18 <hci_event_prio>

	return 0;
}
    5b0c:	2000      	movs	r0, #0
    5b0e:	bd10      	pop	{r4, pc}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5b10:	f640 53a5 	movw	r3, #3493	; 0xda5
    5b14:	4a05      	ldr	r2, [pc, #20]	; (5b2c <bt_recv_prio+0x30>)
    5b16:	4906      	ldr	r1, [pc, #24]	; (5b30 <bt_recv_prio+0x34>)
    5b18:	4806      	ldr	r0, [pc, #24]	; (5b34 <bt_recv_prio+0x38>)
    5b1a:	f013 fe58 	bl	197ce <assert_print>
    5b1e:	4040      	eors	r0, r0
    5b20:	f380 8811 	msr	BASEPRI, r0
    5b24:	f04f 0003 	mov.w	r0, #3
    5b28:	df02      	svc	2
    5b2a:	e7ec      	b.n	5b06 <bt_recv_prio+0xa>
    5b2c:	0001e8d0 	.word	0x0001e8d0
    5b30:	0001e9b8 	.word	0x0001e9b8
    5b34:	0001e920 	.word	0x0001e920

00005b38 <bt_hci_driver_register>:

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
    5b38:	4b0a      	ldr	r3, [pc, #40]	; (5b64 <bt_hci_driver_register+0x2c>)
    5b3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5b3e:	b943      	cbnz	r3, 5b52 <bt_hci_driver_register+0x1a>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
    5b40:	68c3      	ldr	r3, [r0, #12]
    5b42:	b14b      	cbz	r3, 5b58 <bt_hci_driver_register+0x20>
    5b44:	6943      	ldr	r3, [r0, #20]
    5b46:	b153      	cbz	r3, 5b5e <bt_hci_driver_register+0x26>
		return -EINVAL;
	}

	bt_dev.drv = drv;
    5b48:	4b06      	ldr	r3, [pc, #24]	; (5b64 <bt_hci_driver_register+0x2c>)
    5b4a:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
    5b4e:	2000      	movs	r0, #0
    5b50:	4770      	bx	lr
		return -EALREADY;
    5b52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5b56:	4770      	bx	lr
		return -EINVAL;
    5b58:	f06f 0015 	mvn.w	r0, #21
    5b5c:	4770      	bx	lr
    5b5e:	f06f 0015 	mvn.w	r0, #21
}
    5b62:	4770      	bx	lr
    5b64:	20000000 	.word	0x20000000

00005b68 <bt_finalize_init>:

void bt_finalize_init(void)
{
    5b68:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5b6a:	4b08      	ldr	r3, [pc, #32]	; (5b8c <bt_finalize_init+0x24>)
    5b6c:	f3bf 8f5b 	dmb	ish
    5b70:	e853 2f00 	ldrex	r2, [r3]
    5b74:	f042 0204 	orr.w	r2, r2, #4
    5b78:	e843 2100 	strex	r1, r2, [r3]
    5b7c:	2900      	cmp	r1, #0
    5b7e:	d1f7      	bne.n	5b70 <bt_finalize_init+0x8>
    5b80:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(bt_dev.flags, BT_DEV_READY);

	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
    5b84:	2000      	movs	r0, #0
    5b86:	f000 fc21 	bl	63cc <bt_le_scan_update>
	}

	bt_dev_show_info();
}
    5b8a:	bd08      	pop	{r3, pc}
    5b8c:	20000088 	.word	0x20000088

00005b90 <init_work>:
	bt_finalize_init();
	return 0;
}

static void init_work(struct k_work *work)
{
    5b90:	b508      	push	{r3, lr}
	int err;

	err = bt_init();
    5b92:	f013 fffb 	bl	19b8c <bt_init>
	if (ready_cb) {
    5b96:	4b02      	ldr	r3, [pc, #8]	; (5ba0 <init_work+0x10>)
    5b98:	681b      	ldr	r3, [r3, #0]
    5b9a:	b103      	cbz	r3, 5b9e <init_work+0xe>
		ready_cb(err);
    5b9c:	4798      	blx	r3
	}
}
    5b9e:	bd08      	pop	{r3, pc}
    5ba0:	20002244 	.word	0x20002244

00005ba4 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
    5ba4:	b530      	push	{r4, r5, lr}
    5ba6:	b089      	sub	sp, #36	; 0x24
	int err;

	if (!bt_dev.drv) {
    5ba8:	4b29      	ldr	r3, [pc, #164]	; (5c50 <bt_enable+0xac>)
    5baa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5bae:	2b00      	cmp	r3, #0
    5bb0:	d048      	beq.n	5c44 <bt_enable+0xa0>
    5bb2:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bb4:	4b27      	ldr	r3, [pc, #156]	; (5c54 <bt_enable+0xb0>)
    5bb6:	f3bf 8f5b 	dmb	ish
    5bba:	e853 2f00 	ldrex	r2, [r3]
    5bbe:	f022 0202 	bic.w	r2, r2, #2
    5bc2:	e843 2100 	strex	r1, r2, [r3]
    5bc6:	2900      	cmp	r1, #0
    5bc8:	d1f7      	bne.n	5bba <bt_enable+0x16>
    5bca:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5bce:	f3bf 8f5b 	dmb	ish
    5bd2:	e853 2f00 	ldrex	r2, [r3]
    5bd6:	f042 0101 	orr.w	r1, r2, #1
    5bda:	e843 1000 	strex	r0, r1, [r3]
    5bde:	2800      	cmp	r0, #0
    5be0:	d1f7      	bne.n	5bd2 <bt_enable+0x2e>
    5be2:	f3bf 8f5b 	dmb	ish
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5be6:	f012 0f01 	tst.w	r2, #1
    5bea:	d12e      	bne.n	5c4a <bt_enable+0xa6>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
    5bec:	4b1a      	ldr	r3, [pc, #104]	; (5c58 <bt_enable+0xb4>)
    5bee:	601c      	str	r4, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5bf0:	4d1a      	ldr	r5, [pc, #104]	; (5c5c <bt_enable+0xb8>)
    5bf2:	2200      	movs	r2, #0
    5bf4:	2300      	movs	r3, #0
    5bf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5bfa:	2300      	movs	r3, #0
    5bfc:	9304      	str	r3, [sp, #16]
    5bfe:	f06f 0208 	mvn.w	r2, #8
    5c02:	9203      	str	r2, [sp, #12]
    5c04:	9302      	str	r3, [sp, #8]
    5c06:	9301      	str	r3, [sp, #4]
    5c08:	9300      	str	r3, [sp, #0]
    5c0a:	4b15      	ldr	r3, [pc, #84]	; (5c60 <bt_enable+0xbc>)
    5c0c:	f44f 7220 	mov.w	r2, #640	; 0x280
    5c10:	4914      	ldr	r1, [pc, #80]	; (5c64 <bt_enable+0xc0>)
    5c12:	4628      	mov	r0, r5
    5c14:	f017 ff29 	bl	1da6a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5c18:	4913      	ldr	r1, [pc, #76]	; (5c68 <bt_enable+0xc4>)
    5c1a:	4628      	mov	r0, r5
    5c1c:	f00c ff82 	bl	12b24 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
    5c20:	4b0b      	ldr	r3, [pc, #44]	; (5c50 <bt_enable+0xac>)
    5c22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5c26:	68db      	ldr	r3, [r3, #12]
    5c28:	4798      	blx	r3
	if (err) {
    5c2a:	4605      	mov	r5, r0
    5c2c:	b918      	cbnz	r0, 5c36 <bt_enable+0x92>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
    5c2e:	b12c      	cbz	r4, 5c3c <bt_enable+0x98>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
    5c30:	480e      	ldr	r0, [pc, #56]	; (5c6c <bt_enable+0xc8>)
    5c32:	f00d faf7 	bl	13224 <k_work_submit>
	return 0;
}
    5c36:	4628      	mov	r0, r5
    5c38:	b009      	add	sp, #36	; 0x24
    5c3a:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    5c3c:	f013 ffa6 	bl	19b8c <bt_init>
    5c40:	4605      	mov	r5, r0
    5c42:	e7f8      	b.n	5c36 <bt_enable+0x92>
		return -ENODEV;
    5c44:	f06f 0512 	mvn.w	r5, #18
    5c48:	e7f5      	b.n	5c36 <bt_enable+0x92>
		return -EALREADY;
    5c4a:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5c4e:	e7f2      	b.n	5c36 <bt_enable+0x92>
    5c50:	20000000 	.word	0x20000000
    5c54:	20000088 	.word	0x20000088
    5c58:	20002244 	.word	0x20002244
    5c5c:	20001010 	.word	0x20001010
    5c60:	000059c1 	.word	0x000059c1
    5c64:	200092c0 	.word	0x200092c0
    5c68:	0001e9dc 	.word	0x0001e9dc
    5c6c:	20000078 	.word	0x20000078

00005c70 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    5c70:	b570      	push	{r4, r5, r6, lr}
    5c72:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5c74:	2400      	movs	r4, #0
    5c76:	e001      	b.n	5c7c <id_find+0xc>
    5c78:	3401      	adds	r4, #1
    5c7a:	b2e4      	uxtb	r4, r4
    5c7c:	4b09      	ldr	r3, [pc, #36]	; (5ca4 <id_find+0x34>)
    5c7e:	79db      	ldrb	r3, [r3, #7]
    5c80:	42a3      	cmp	r3, r4
    5c82:	d90b      	bls.n	5c9c <id_find+0x2c>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5c84:	4626      	mov	r6, r4
    5c86:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5c8a:	2207      	movs	r2, #7
    5c8c:	4905      	ldr	r1, [pc, #20]	; (5ca4 <id_find+0x34>)
    5c8e:	4419      	add	r1, r3
    5c90:	4628      	mov	r0, r5
    5c92:	f00e fe7b 	bl	1498c <memcmp>
    5c96:	2800      	cmp	r0, #0
    5c98:	d1ee      	bne.n	5c78 <id_find+0x8>
    5c9a:	e001      	b.n	5ca0 <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
    5c9c:	f06f 0601 	mvn.w	r6, #1
}
    5ca0:	4630      	mov	r0, r6
    5ca2:	bd70      	pop	{r4, r5, r6, pc}
    5ca4:	20000000 	.word	0x20000000

00005ca8 <set_random_address>:
{
    5ca8:	b538      	push	{r3, r4, r5, lr}
    5caa:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
    5cac:	2206      	movs	r2, #6
    5cae:	4913      	ldr	r1, [pc, #76]	; (5cfc <set_random_address+0x54>)
    5cb0:	f00e fe6c 	bl	1498c <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5cb4:	b900      	cbnz	r0, 5cb8 <set_random_address+0x10>
}
    5cb6:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5cb8:	2106      	movs	r1, #6
    5cba:	f242 0005 	movw	r0, #8197	; 0x2005
    5cbe:	f7ff fc67 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
    5cc2:	4605      	mov	r5, r0
    5cc4:	b1b0      	cbz	r0, 5cf4 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5cc6:	2206      	movs	r2, #6
    5cc8:	4621      	mov	r1, r4
    5cca:	3008      	adds	r0, #8
    5ccc:	f017 f892 	bl	1cdf4 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5cd0:	2200      	movs	r2, #0
    5cd2:	4629      	mov	r1, r5
    5cd4:	f242 0005 	movw	r0, #8197	; 0x2005
    5cd8:	f7ff fc98 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5cdc:	2800      	cmp	r0, #0
    5cde:	d1ea      	bne.n	5cb6 <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
    5ce0:	4b07      	ldr	r3, [pc, #28]	; (5d00 <set_random_address+0x58>)
    5ce2:	6822      	ldr	r2, [r4, #0]
    5ce4:	f8c3 201d 	str.w	r2, [r3, #29]
    5ce8:	88a2      	ldrh	r2, [r4, #4]
    5cea:	f8a3 2021 	strh.w	r2, [r3, #33]	; 0x21
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5cee:	2201      	movs	r2, #1
    5cf0:	771a      	strb	r2, [r3, #28]
	return 0;
    5cf2:	e7e0      	b.n	5cb6 <set_random_address+0xe>
		return -ENOBUFS;
    5cf4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5cf8:	e7dd      	b.n	5cb6 <set_random_address+0xe>
    5cfa:	bf00      	nop
    5cfc:	2000001d 	.word	0x2000001d
    5d00:	20000000 	.word	0x20000000

00005d04 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
    5d04:	b530      	push	{r4, r5, lr}
    5d06:	b085      	sub	sp, #20
    5d08:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5d0a:	460d      	mov	r5, r1
    5d0c:	b149      	cbz	r1, 5d22 <id_create+0x1e>
    5d0e:	2300      	movs	r3, #0
    5d10:	9302      	str	r3, [sp, #8]
    5d12:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
    5d16:	2207      	movs	r2, #7
    5d18:	a902      	add	r1, sp, #8
    5d1a:	4628      	mov	r0, r5
    5d1c:	f00e fe36 	bl	1498c <memcmp>
    5d20:	bb00      	cbnz	r0, 5d64 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
    5d22:	4668      	mov	r0, sp
    5d24:	f013 feae 	bl	19a84 <bt_addr_le_create_static>
			if (err) {
    5d28:	4603      	mov	r3, r0
    5d2a:	b9c0      	cbnz	r0, 5d5e <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
    5d2c:	4668      	mov	r0, sp
    5d2e:	f7ff ff9f 	bl	5c70 <id_find>
    5d32:	2800      	cmp	r0, #0
    5d34:	daf5      	bge.n	5d22 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5d36:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5d3a:	4a10      	ldr	r2, [pc, #64]	; (5d7c <id_create+0x78>)
    5d3c:	18a3      	adds	r3, r4, r2
    5d3e:	9800      	ldr	r0, [sp, #0]
    5d40:	50a0      	str	r0, [r4, r2]
    5d42:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5d46:	f89d 1006 	ldrb.w	r1, [sp, #6]
    5d4a:	8098      	strh	r0, [r3, #4]
    5d4c:	7199      	strb	r1, [r3, #6]

		if (addr) {
    5d4e:	b12d      	cbz	r5, 5d5c <id_create+0x58>
    5d50:	58a2      	ldr	r2, [r4, r2]
    5d52:	602a      	str	r2, [r5, #0]
    5d54:	889a      	ldrh	r2, [r3, #4]
    5d56:	799b      	ldrb	r3, [r3, #6]
    5d58:	80aa      	strh	r2, [r5, #4]
    5d5a:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    5d5c:	2300      	movs	r3, #0
}
    5d5e:	4618      	mov	r0, r3
    5d60:	b005      	add	sp, #20
    5d62:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5d64:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    5d68:	4a04      	ldr	r2, [pc, #16]	; (5d7c <id_create+0x78>)
    5d6a:	18a3      	adds	r3, r4, r2
    5d6c:	6829      	ldr	r1, [r5, #0]
    5d6e:	50a1      	str	r1, [r4, r2]
    5d70:	88a9      	ldrh	r1, [r5, #4]
    5d72:	79aa      	ldrb	r2, [r5, #6]
    5d74:	8099      	strh	r1, [r3, #4]
    5d76:	719a      	strb	r2, [r3, #6]
}
    5d78:	e7f0      	b.n	5d5c <id_create+0x58>
    5d7a:	bf00      	nop
    5d7c:	20000000 	.word	0x20000000

00005d80 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    5d80:	b570      	push	{r4, r5, r6, lr}
    5d82:	b088      	sub	sp, #32
    5d84:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5d86:	4605      	mov	r5, r0
    5d88:	b1c0      	cbz	r0, 5dbc <bt_id_create+0x3c>
    5d8a:	2300      	movs	r3, #0
    5d8c:	9304      	str	r3, [sp, #16]
    5d8e:	f8cd 3013 	str.w	r3, [sp, #19]
	return memcmp(a, b, sizeof(*a));
    5d92:	2207      	movs	r2, #7
    5d94:	a904      	add	r1, sp, #16
    5d96:	f00e fdf9 	bl	1498c <memcmp>
    5d9a:	b178      	cbz	r0, 5dbc <bt_id_create+0x3c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5d9c:	782b      	ldrb	r3, [r5, #0]
    5d9e:	2b01      	cmp	r3, #1
    5da0:	d136      	bne.n	5e10 <bt_id_create+0x90>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
    5da2:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
    5da4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5da8:	2bc0      	cmp	r3, #192	; 0xc0
    5daa:	d002      	beq.n	5db2 <bt_id_create+0x32>
			BT_ERR("Only static random identity address supported");
			return -EINVAL;
    5dac:	f06f 0015 	mvn.w	r0, #21
    5db0:	e02c      	b.n	5e0c <bt_id_create+0x8c>
		}

		if (id_find(addr) >= 0) {
    5db2:	4628      	mov	r0, r5
    5db4:	f7ff ff5c 	bl	5c70 <id_find>
    5db8:	2800      	cmp	r0, #0
    5dba:	da2c      	bge.n	5e16 <bt_id_create+0x96>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    5dbc:	bb8c      	cbnz	r4, 5e22 <bt_id_create+0xa2>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    5dbe:	4b1c      	ldr	r3, [pc, #112]	; (5e30 <bt_id_create+0xb0>)
    5dc0:	79db      	ldrb	r3, [r3, #7]
    5dc2:	2b01      	cmp	r3, #1
    5dc4:	d030      	beq.n	5e28 <bt_id_create+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5dc6:	f3bf 8f5b 	dmb	ish
    5dca:	4b1a      	ldr	r3, [pc, #104]	; (5e34 <bt_id_create+0xb4>)
    5dcc:	681b      	ldr	r3, [r3, #0]
    5dce:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5dd2:	f013 0f01 	tst.w	r3, #1
    5dd6:	d10e      	bne.n	5df6 <bt_id_create+0x76>
		uint8_t zero_irk[16] = { 0 };
    5dd8:	2300      	movs	r3, #0
    5dda:	9300      	str	r3, [sp, #0]
    5ddc:	9301      	str	r3, [sp, #4]
    5dde:	9302      	str	r3, [sp, #8]
    5de0:	9303      	str	r3, [sp, #12]

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    5de2:	b1dd      	cbz	r5, 5e1c <bt_id_create+0x9c>
    5de4:	9306      	str	r3, [sp, #24]
    5de6:	f8cd 301b 	str.w	r3, [sp, #27]
    5dea:	2207      	movs	r2, #7
    5dec:	a906      	add	r1, sp, #24
    5dee:	4628      	mov	r0, r5
    5df0:	f00e fdcc 	bl	1498c <memcmp>
    5df4:	b190      	cbz	r0, 5e1c <bt_id_create+0x9c>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
    5df6:	4b0e      	ldr	r3, [pc, #56]	; (5e30 <bt_id_create+0xb0>)
    5df8:	79de      	ldrb	r6, [r3, #7]
    5dfa:	1c72      	adds	r2, r6, #1
    5dfc:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
    5dfe:	4622      	mov	r2, r4
    5e00:	4629      	mov	r1, r5
    5e02:	4630      	mov	r0, r6
    5e04:	f7ff ff7e 	bl	5d04 <id_create>
	if (err) {
    5e08:	b900      	cbnz	r0, 5e0c <bt_id_create+0x8c>
		return err;
	}

	return new_id;
    5e0a:	4630      	mov	r0, r6
}
    5e0c:	b008      	add	sp, #32
    5e0e:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    5e10:	f06f 0015 	mvn.w	r0, #21
    5e14:	e7fa      	b.n	5e0c <bt_id_create+0x8c>
			return -EALREADY;
    5e16:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5e1a:	e7f7      	b.n	5e0c <bt_id_create+0x8c>
			return -EINVAL;
    5e1c:	f06f 0015 	mvn.w	r0, #21
    5e20:	e7f4      	b.n	5e0c <bt_id_create+0x8c>
		return -EINVAL;
    5e22:	f06f 0015 	mvn.w	r0, #21
    5e26:	e7f1      	b.n	5e0c <bt_id_create+0x8c>
		return -ENOMEM;
    5e28:	f06f 000b 	mvn.w	r0, #11
    5e2c:	e7ee      	b.n	5e0c <bt_id_create+0x8c>
    5e2e:	bf00      	nop
    5e30:	20000000 	.word	0x20000000
    5e34:	20000088 	.word	0x20000088

00005e38 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    5e38:	b570      	push	{r4, r5, r6, lr}
    5e3a:	b086      	sub	sp, #24
    5e3c:	4604      	mov	r4, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    5e3e:	aa01      	add	r2, sp, #4
    5e40:	2100      	movs	r1, #0
    5e42:	f241 0009 	movw	r0, #4105	; 0x1009
    5e46:	f7ff fbe1 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5e4a:	b110      	cbz	r0, 5e52 <bt_id_read_public_addr+0x1a>
		BT_WARN("Failed to read public address");
		return 0U;
    5e4c:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    5e4e:	b006      	add	sp, #24
    5e50:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5e52:	9b01      	ldr	r3, [sp, #4]
    5e54:	689e      	ldr	r6, [r3, #8]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5e56:	1c75      	adds	r5, r6, #1
    5e58:	2300      	movs	r3, #0
    5e5a:	9302      	str	r3, [sp, #8]
    5e5c:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    5e60:	2206      	movs	r2, #6
    5e62:	a902      	add	r1, sp, #8
    5e64:	4628      	mov	r0, r5
    5e66:	f00e fd91 	bl	1498c <memcmp>
    5e6a:	b158      	cbz	r0, 5e84 <bt_id_read_public_addr+0x4c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    5e6c:	4b0f      	ldr	r3, [pc, #60]	; (5eac <bt_id_read_public_addr+0x74>)
    5e6e:	e893 0003 	ldmia.w	r3, {r0, r1}
    5e72:	9004      	str	r0, [sp, #16]
    5e74:	f8ad 1014 	strh.w	r1, [sp, #20]
    5e78:	2206      	movs	r2, #6
    5e7a:	a904      	add	r1, sp, #16
    5e7c:	4628      	mov	r0, r5
    5e7e:	f00e fd85 	bl	1498c <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    5e82:	b920      	cbnz	r0, 5e8e <bt_id_read_public_addr+0x56>
		net_buf_unref(rsp);
    5e84:	9801      	ldr	r0, [sp, #4]
    5e86:	f016 ff59 	bl	1cd3c <net_buf_unref>
		return 0U;
    5e8a:	2000      	movs	r0, #0
    5e8c:	e7df      	b.n	5e4e <bt_id_read_public_addr+0x16>
    5e8e:	f8d6 3001 	ldr.w	r3, [r6, #1]
    5e92:	f8c4 3001 	str.w	r3, [r4, #1]
    5e96:	88ab      	ldrh	r3, [r5, #4]
    5e98:	f8a4 3005 	strh.w	r3, [r4, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
    5e9c:	2300      	movs	r3, #0
    5e9e:	7023      	strb	r3, [r4, #0]
	net_buf_unref(rsp);
    5ea0:	9801      	ldr	r0, [sp, #4]
    5ea2:	f016 ff4b 	bl	1cd3c <net_buf_unref>
	return 1U;
    5ea6:	2001      	movs	r0, #1
    5ea8:	e7d1      	b.n	5e4e <bt_id_read_public_addr+0x16>
    5eaa:	bf00      	nop
    5eac:	0001e6d8 	.word	0x0001e6d8

00005eb0 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    5eb0:	b500      	push	{lr}
    5eb2:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    5eb4:	4668      	mov	r0, sp
    5eb6:	f7ff ffbf 	bl	5e38 <bt_id_read_public_addr>
    5eba:	4b06      	ldr	r3, [pc, #24]	; (5ed4 <bt_setup_public_id_addr+0x24>)
    5ebc:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    5ebe:	b918      	cbnz	r0, 5ec8 <bt_setup_public_id_addr+0x18>
		return 0;
    5ec0:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
    5ec2:	b003      	add	sp, #12
    5ec4:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
    5ec8:	2200      	movs	r2, #0
    5eca:	4669      	mov	r1, sp
    5ecc:	4610      	mov	r0, r2
    5ece:	f7ff ff19 	bl	5d04 <id_create>
    5ed2:	e7f6      	b.n	5ec2 <bt_setup_public_id_addr+0x12>
    5ed4:	20000000 	.word	0x20000000

00005ed8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    5ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5eda:	b083      	sub	sp, #12
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    5edc:	4b1d      	ldr	r3, [pc, #116]	; (5f54 <bt_read_static_addr+0x7c>)
    5ede:	f893 4076 	ldrb.w	r4, [r3, #118]	; 0x76
    5ee2:	f014 0401 	ands.w	r4, r4, #1
    5ee6:	d102      	bne.n	5eee <bt_read_static_addr+0x16>
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
    5ee8:	4620      	mov	r0, r4
    5eea:	b003      	add	sp, #12
    5eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5eee:	4605      	mov	r5, r0
    5ef0:	460e      	mov	r6, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    5ef2:	aa01      	add	r2, sp, #4
    5ef4:	2100      	movs	r1, #0
    5ef6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    5efa:	f7ff fb87 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    5efe:	4684      	mov	ip, r0
    5f00:	bb28      	cbnz	r0, 5f4e <bt_read_static_addr+0x76>
	rp = (void *)rsp->data;
    5f02:	9b01      	ldr	r3, [sp, #4]
    5f04:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    5f06:	785c      	ldrb	r4, [r3, #1]
    5f08:	42b4      	cmp	r4, r6
    5f0a:	bf28      	it	cs
    5f0c:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
    5f0e:	e018      	b.n	5f42 <bt_read_static_addr+0x6a>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    5f10:	2116      	movs	r1, #22
    5f12:	fb01 f10c 	mul.w	r1, r1, ip
    5f16:	186a      	adds	r2, r5, r1
    5f18:	f8d3 e002 	ldr.w	lr, [r3, #2]
    5f1c:	f8d3 7006 	ldr.w	r7, [r3, #6]
    5f20:	f8d3 600a 	ldr.w	r6, [r3, #10]
    5f24:	f8d3 000e 	ldr.w	r0, [r3, #14]
    5f28:	f845 e001 	str.w	lr, [r5, r1]
    5f2c:	6057      	str	r7, [r2, #4]
    5f2e:	6096      	str	r6, [r2, #8]
    5f30:	60d0      	str	r0, [r2, #12]
    5f32:	f8d3 e012 	ldr.w	lr, [r3, #18]
    5f36:	f8c2 e010 	str.w	lr, [r2, #16]
    5f3a:	8ad9      	ldrh	r1, [r3, #22]
    5f3c:	8291      	strh	r1, [r2, #20]
	for (i = 0; i < cnt; i++) {
    5f3e:	f10c 0c01 	add.w	ip, ip, #1
    5f42:	4564      	cmp	r4, ip
    5f44:	dce4      	bgt.n	5f10 <bt_read_static_addr+0x38>
	net_buf_unref(rsp);
    5f46:	9801      	ldr	r0, [sp, #4]
    5f48:	f016 fef8 	bl	1cd3c <net_buf_unref>
	if (!cnt) {
    5f4c:	e7cc      	b.n	5ee8 <bt_read_static_addr+0x10>
		return 0;
    5f4e:	2400      	movs	r4, #0
    5f50:	e7ca      	b.n	5ee8 <bt_read_static_addr+0x10>
    5f52:	bf00      	nop
    5f54:	20000000 	.word	0x20000000

00005f58 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    5f58:	b510      	push	{r4, lr}
    5f5a:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    5f5c:	4b18      	ldr	r3, [pc, #96]	; (5fc0 <bt_setup_random_id_addr+0x68>)
    5f5e:	79dc      	ldrb	r4, [r3, #7]
    5f60:	b934      	cbnz	r4, 5f70 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    5f62:	2101      	movs	r1, #1
    5f64:	a802      	add	r0, sp, #8
    5f66:	f7ff ffb7 	bl	5ed8 <bt_read_static_addr>
    5f6a:	4b15      	ldr	r3, [pc, #84]	; (5fc0 <bt_setup_random_id_addr+0x68>)
    5f6c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
    5f6e:	b948      	cbnz	r0, 5f84 <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
    5f70:	2100      	movs	r1, #0
    5f72:	4608      	mov	r0, r1
    5f74:	f7ff ff04 	bl	5d80 <bt_id_create>
    5f78:	4603      	mov	r3, r0
}
    5f7a:	4618      	mov	r0, r3
    5f7c:	b008      	add	sp, #32
    5f7e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    5f80:	3401      	adds	r4, #1
    5f82:	b2e4      	uxtb	r4, r4
    5f84:	4b0e      	ldr	r3, [pc, #56]	; (5fc0 <bt_setup_random_id_addr+0x68>)
    5f86:	79db      	ldrb	r3, [r3, #7]
    5f88:	42a3      	cmp	r3, r4
    5f8a:	d916      	bls.n	5fba <bt_setup_random_id_addr+0x62>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    5f8c:	aa02      	add	r2, sp, #8
    5f8e:	2316      	movs	r3, #22
    5f90:	fb04 f303 	mul.w	r3, r4, r3
    5f94:	18d1      	adds	r1, r2, r3
	memcpy(dst, src, sizeof(*dst));
    5f96:	58d3      	ldr	r3, [r2, r3]
    5f98:	f8cd 3001 	str.w	r3, [sp, #1]
    5f9c:	888b      	ldrh	r3, [r1, #4]
    5f9e:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
    5fa2:	2301      	movs	r3, #1
    5fa4:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    5fa8:	2200      	movs	r2, #0
    5faa:	4669      	mov	r1, sp
    5fac:	4620      	mov	r0, r4
    5fae:	f7ff fea9 	bl	5d04 <id_create>
				if (err) {
    5fb2:	4603      	mov	r3, r0
    5fb4:	2800      	cmp	r0, #0
    5fb6:	d0e3      	beq.n	5f80 <bt_setup_random_id_addr+0x28>
    5fb8:	e7df      	b.n	5f7a <bt_setup_random_id_addr+0x22>
			return 0;
    5fba:	2300      	movs	r3, #0
    5fbc:	e7dd      	b.n	5f7a <bt_setup_random_id_addr+0x22>
    5fbe:	bf00      	nop
    5fc0:	20000000 	.word	0x20000000

00005fc4 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    5fc4:	b510      	push	{r4, lr}
    5fc6:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    5fc8:	4b07      	ldr	r3, [pc, #28]	; (5fe8 <bt_id_set_scan_own_addr+0x24>)
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    5fce:	f013 fe44 	bl	19c5a <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    5fd2:	b108      	cbz	r0, 5fd8 <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
    5fd4:	2000      	movs	r0, #0
}
    5fd6:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    5fd8:	f013 fe43 	bl	19c62 <bt_id_set_private_addr>
			if (err) {
    5fdc:	2800      	cmp	r0, #0
    5fde:	d1fa      	bne.n	5fd6 <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5fe0:	2301      	movs	r3, #1
    5fe2:	7023      	strb	r3, [r4, #0]
    5fe4:	e7f7      	b.n	5fd6 <bt_id_set_scan_own_addr+0x12>
    5fe6:	bf00      	nop
    5fe8:	20000000 	.word	0x20000000

00005fec <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    5fec:	b508      	push	{r3, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    5fee:	4b0a      	ldr	r3, [pc, #40]	; (6018 <bt_id_init+0x2c>)
    5ff0:	79db      	ldrb	r3, [r3, #7]
    5ff2:	b123      	cbz	r3, 5ffe <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    5ff4:	4b08      	ldr	r3, [pc, #32]	; (6018 <bt_id_init+0x2c>)
    5ff6:	79db      	ldrb	r3, [r3, #7]
    5ff8:	b133      	cbz	r3, 6008 <bt_id_init+0x1c>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    5ffa:	2000      	movs	r0, #0
}
    5ffc:	bd08      	pop	{r3, pc}
		err = bt_setup_public_id_addr();
    5ffe:	f7ff ff57 	bl	5eb0 <bt_setup_public_id_addr>
		if (err) {
    6002:	2800      	cmp	r0, #0
    6004:	d0f6      	beq.n	5ff4 <bt_id_init+0x8>
    6006:	e7f9      	b.n	5ffc <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
    6008:	f7ff ffa6 	bl	5f58 <bt_setup_random_id_addr>
		if (err) {
    600c:	2800      	cmp	r0, #0
    600e:	d1f5      	bne.n	5ffc <bt_id_init+0x10>
		err = set_random_address(&bt_dev.id_addr[0].a);
    6010:	4802      	ldr	r0, [pc, #8]	; (601c <bt_id_init+0x30>)
    6012:	f7ff fe49 	bl	5ca8 <set_random_address>
		if (err) {
    6016:	e7f1      	b.n	5ffc <bt_id_init+0x10>
    6018:	20000000 	.word	0x20000000
    601c:	20000001 	.word	0x20000001

00006020 <reset_reassembling_advertiser>:
	buf->len  = 0U;
    6020:	4b03      	ldr	r3, [pc, #12]	; (6030 <reset_reassembling_advertiser+0x10>)
    6022:	2200      	movs	r2, #0
    6024:	809a      	strh	r2, [r3, #4]
	buf->data = buf->__buf;
    6026:	6899      	ldr	r1, [r3, #8]
    6028:	6019      	str	r1, [r3, #0]
}

static void reset_reassembling_advertiser(void)
{
	net_buf_simple_reset(&ext_scan_buf);
	reassembling_advertiser.state = FRAG_ADV_INACTIVE;
    602a:	4b02      	ldr	r3, [pc, #8]	; (6034 <reset_reassembling_advertiser+0x14>)
    602c:	721a      	strb	r2, [r3, #8]
}
    602e:	4770      	bx	lr
    6030:	200003c4 	.word	0x200003c4
    6034:	20002350 	.word	0x20002350

00006038 <set_le_ext_scan_enable>:
	reset_reassembling_advertiser();
#endif
}

static int set_le_ext_scan_enable(uint8_t enable, uint16_t duration)
{
    6038:	b570      	push	{r4, r5, r6, lr}
    603a:	b086      	sub	sp, #24
    603c:	4604      	mov	r4, r0
    603e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_ext_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, sizeof(*cp));
    6040:	2106      	movs	r1, #6
    6042:	f242 0042 	movw	r0, #8258	; 0x2042
    6046:	f7ff faa3 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
    604a:	b350      	cbz	r0, 60a2 <set_le_ext_scan_enable+0x6a>
    604c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
    604e:	2106      	movs	r1, #6
    6050:	3008      	adds	r0, #8
    6052:	f016 fec9 	bl	1cde8 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    6056:	2c01      	cmp	r4, #1
    6058:	d019      	beq.n	608e <set_le_ext_scan_enable+0x56>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    605a:	2300      	movs	r3, #0
    605c:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
    605e:	7004      	strb	r4, [r0, #0]
	cp->duration = sys_cpu_to_le16(duration);
    6060:	8045      	strh	r5, [r0, #2]
	cp->period = 0;
    6062:	2500      	movs	r5, #0
    6064:	7105      	strb	r5, [r0, #4]
    6066:	7145      	strb	r5, [r0, #5]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    6068:	2c01      	cmp	r4, #1
    606a:	bf14      	ite	ne
    606c:	2400      	movne	r4, #0
    606e:	2401      	moveq	r4, #1
    6070:	9400      	str	r4, [sp, #0]
    6072:	2306      	movs	r3, #6
    6074:	4a0c      	ldr	r2, [pc, #48]	; (60a8 <set_le_ext_scan_enable+0x70>)
    6076:	a903      	add	r1, sp, #12
    6078:	4630      	mov	r0, r6
    607a:	f7ff fa77 	bl	556c <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_ENABLE, buf, NULL);
    607e:	462a      	mov	r2, r5
    6080:	4631      	mov	r1, r6
    6082:	f242 0042 	movw	r0, #8258	; 0x2042
    6086:	f7ff fac1 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    608a:	b006      	add	sp, #24
    608c:	bd70      	pop	{r4, r5, r6, pc}
    608e:	f3bf 8f5b 	dmb	ish
    6092:	4b05      	ldr	r3, [pc, #20]	; (60a8 <set_le_ext_scan_enable+0x70>)
    6094:	681b      	ldr	r3, [r3, #0]
    6096:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    609a:	f3c3 2340 	ubfx	r3, r3, #9, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
    609e:	7043      	strb	r3, [r0, #1]
    60a0:	e7dd      	b.n	605e <set_le_ext_scan_enable+0x26>
		return -ENOBUFS;
    60a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    60a6:	e7f0      	b.n	608a <set_le_ext_scan_enable+0x52>
    60a8:	20000088 	.word	0x20000088

000060ac <start_le_scan_ext>:
}

static int start_le_scan_ext(struct bt_hci_ext_scan_phy *phy_1m,
			     struct bt_hci_ext_scan_phy *phy_coded,
			     uint16_t duration)
{
    60ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60b0:	b082      	sub	sp, #8
    60b2:	460c      	mov	r4, r1
    60b4:	4616      	mov	r6, r2
	struct net_buf *buf;
	uint8_t own_addr_type;
	bool active_scan;
	int err;

	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    60b6:	4680      	mov	r8, r0
    60b8:	b110      	cbz	r0, 60c0 <start_le_scan_ext+0x14>
    60ba:	7803      	ldrb	r3, [r0, #0]
    60bc:	2b01      	cmp	r3, #1
    60be:	d053      	beq.n	6168 <start_le_scan_ext+0xbc>
    60c0:	2c00      	cmp	r4, #0
    60c2:	d053      	beq.n	616c <start_le_scan_ext+0xc0>
		      (phy_coded && phy_coded->type == BT_HCI_LE_SCAN_ACTIVE);
    60c4:	7823      	ldrb	r3, [r4, #0]
    60c6:	2b01      	cmp	r3, #1
    60c8:	d052      	beq.n	6170 <start_le_scan_ext+0xc4>
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    60ca:	2700      	movs	r7, #0

	if (duration > 0) {
    60cc:	b166      	cbz	r6, 60e8 <start_le_scan_ext+0x3c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60ce:	4b3e      	ldr	r3, [pc, #248]	; (61c8 <start_le_scan_ext+0x11c>)
    60d0:	f3bf 8f5b 	dmb	ish
    60d4:	e853 2f00 	ldrex	r2, [r3]
    60d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    60dc:	e843 2100 	strex	r1, r2, [r3]
    60e0:	2900      	cmp	r1, #0
    60e2:	d1f7      	bne.n	60d4 <start_le_scan_ext+0x28>
    60e4:	f3bf 8f5b 	dmb	ish
		if (IS_ENABLED(CONFIG_BT_PRIVACY) && !bt_id_rpa_is_new()) {
			atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
		}
	}

	err = bt_id_set_scan_own_addr(active_scan, &own_addr_type);
    60e8:	f10d 0107 	add.w	r1, sp, #7
    60ec:	4638      	mov	r0, r7
    60ee:	f7ff ff69 	bl	5fc4 <bt_id_set_scan_own_addr>
	if (err) {
    60f2:	bbb0      	cbnz	r0, 6162 <start_le_scan_ext+0xb6>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
    60f4:	f1b8 0f00 	cmp.w	r8, #0
    60f8:	d03c      	beq.n	6174 <start_le_scan_ext+0xc8>
    60fa:	2108      	movs	r1, #8
    60fc:	2c00      	cmp	r4, #0
    60fe:	d03b      	beq.n	6178 <start_le_scan_ext+0xcc>
    6100:	2305      	movs	r3, #5
    6102:	4419      	add	r1, r3
    6104:	f242 0041 	movw	r0, #8257	; 0x2041
    6108:	f7ff fa42 	bl	5590 <bt_hci_cmd_create>
				sizeof(*set_param) +
				(phy_1m ? sizeof(*phy_1m) : 0) +
				(phy_coded ? sizeof(*phy_coded) : 0));
	if (!buf) {
    610c:	4682      	mov	sl, r0
    610e:	2800      	cmp	r0, #0
    6110:	d057      	beq.n	61c2 <start_le_scan_ext+0x116>
    6112:	f100 0908 	add.w	r9, r0, #8
    6116:	2103      	movs	r1, #3
    6118:	4648      	mov	r0, r9
    611a:	f016 fe65 	bl	1cde8 <net_buf_simple_add>
    611e:	4605      	mov	r5, r0
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
	set_param->own_addr_type = own_addr_type;
    6120:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6124:	7003      	strb	r3, [r0, #0]
	set_param->phys = 0;
    6126:	2300      	movs	r3, #0
    6128:	7083      	strb	r3, [r0, #2]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param->filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param->filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
    612a:	7043      	strb	r3, [r0, #1]
	}

	if (phy_1m) {
    612c:	f1b8 0f00 	cmp.w	r8, #0
    6130:	d006      	beq.n	6140 <start_le_scan_ext+0x94>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_1M;
    6132:	2301      	movs	r3, #1
    6134:	7083      	strb	r3, [r0, #2]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6136:	2205      	movs	r2, #5
    6138:	4641      	mov	r1, r8
    613a:	4648      	mov	r0, r9
    613c:	f016 fe5a 	bl	1cdf4 <net_buf_simple_add_mem>
		net_buf_add_mem(buf, phy_1m, sizeof(*phy_1m));
	}

	if (phy_coded) {
    6140:	b144      	cbz	r4, 6154 <start_le_scan_ext+0xa8>
		set_param->phys |= BT_HCI_LE_EXT_SCAN_PHY_CODED;
    6142:	78ab      	ldrb	r3, [r5, #2]
    6144:	f043 0304 	orr.w	r3, r3, #4
    6148:	70ab      	strb	r3, [r5, #2]
    614a:	2205      	movs	r2, #5
    614c:	4621      	mov	r1, r4
    614e:	4648      	mov	r0, r9
    6150:	f016 fe50 	bl	1cdf4 <net_buf_simple_add_mem>
		net_buf_add_mem(buf, phy_coded, sizeof(*phy_coded));
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM, buf, NULL);
    6154:	2200      	movs	r2, #0
    6156:	4651      	mov	r1, sl
    6158:	f242 0041 	movw	r0, #8257	; 0x2041
    615c:	f7ff fa56 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    6160:	b160      	cbz	r0, 617c <start_le_scan_ext+0xd0>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    6162:	b002      	add	sp, #8
    6164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	active_scan = (phy_1m && phy_1m->type == BT_HCI_LE_SCAN_ACTIVE) ||
    6168:	2701      	movs	r7, #1
    616a:	e7af      	b.n	60cc <start_le_scan_ext+0x20>
    616c:	2700      	movs	r7, #0
    616e:	e7ad      	b.n	60cc <start_le_scan_ext+0x20>
    6170:	2701      	movs	r7, #1
    6172:	e7ab      	b.n	60cc <start_le_scan_ext+0x20>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EXT_SCAN_PARAM,
    6174:	2103      	movs	r1, #3
    6176:	e7c1      	b.n	60fc <start_le_scan_ext+0x50>
    6178:	2300      	movs	r3, #0
    617a:	e7c2      	b.n	6102 <start_le_scan_ext+0x56>
	err = set_le_ext_scan_enable(BT_HCI_LE_SCAN_ENABLE, duration);
    617c:	4631      	mov	r1, r6
    617e:	2001      	movs	r0, #1
    6180:	f7ff ff5a 	bl	6038 <set_le_ext_scan_enable>
	if (err) {
    6184:	2800      	cmp	r0, #0
    6186:	d1ec      	bne.n	6162 <start_le_scan_ext+0xb6>
	if (val) {
    6188:	b16f      	cbz	r7, 61a6 <start_le_scan_ext+0xfa>
    618a:	4b0f      	ldr	r3, [pc, #60]	; (61c8 <start_le_scan_ext+0x11c>)
    618c:	f3bf 8f5b 	dmb	ish
    6190:	e853 2f00 	ldrex	r2, [r3]
    6194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    6198:	e843 2100 	strex	r1, r2, [r3]
    619c:	2900      	cmp	r1, #0
    619e:	d1f7      	bne.n	6190 <start_le_scan_ext+0xe4>
    61a0:	f3bf 8f5b 	dmb	ish
    61a4:	e7dd      	b.n	6162 <start_le_scan_ext+0xb6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61a6:	4b08      	ldr	r3, [pc, #32]	; (61c8 <start_le_scan_ext+0x11c>)
    61a8:	f3bf 8f5b 	dmb	ish
    61ac:	e853 2f00 	ldrex	r2, [r3]
    61b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    61b4:	e843 2100 	strex	r1, r2, [r3]
    61b8:	2900      	cmp	r1, #0
    61ba:	d1f7      	bne.n	61ac <start_le_scan_ext+0x100>
    61bc:	f3bf 8f5b 	dmb	ish
}
    61c0:	e7cf      	b.n	6162 <start_le_scan_ext+0xb6>
		return -ENOBUFS;
    61c2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    61c6:	e7cc      	b.n	6162 <start_le_scan_ext+0xb6>
    61c8:	20000088 	.word	0x20000088

000061cc <get_pending_per_adv_sync>:
	return per_adv_sync;
}

static struct bt_le_per_adv_sync *get_pending_per_adv_sync(void)
{
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    61cc:	2300      	movs	r3, #0
    61ce:	b10b      	cbz	r3, 61d4 <get_pending_per_adv_sync+0x8>
				    BT_PER_ADV_SYNC_SYNCING)) {
			return &per_adv_sync_pool[i];
		}
	}

	return NULL;
    61d0:	2000      	movs	r0, #0
}
    61d2:	4770      	bx	lr
		if (atomic_test_bit(per_adv_sync_pool[i].flags,
    61d4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    61d8:	00ca      	lsls	r2, r1, #3
    61da:	3210      	adds	r2, #16
    61dc:	4908      	ldr	r1, [pc, #32]	; (6200 <get_pending_per_adv_sync+0x34>)
    61de:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    61e0:	f3bf 8f5b 	dmb	ish
    61e4:	6852      	ldr	r2, [r2, #4]
    61e6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    61ea:	f3c2 0280 	ubfx	r2, r2, #2, #1
    61ee:	b90a      	cbnz	r2, 61f4 <get_pending_per_adv_sync+0x28>
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    61f0:	3301      	adds	r3, #1
    61f2:	e7ec      	b.n	61ce <get_pending_per_adv_sync+0x2>
			return &per_adv_sync_pool[i];
    61f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    61f8:	00da      	lsls	r2, r3, #3
    61fa:	4608      	mov	r0, r1
    61fc:	4410      	add	r0, r2
    61fe:	4770      	bx	lr
    6200:	20002338 	.word	0x20002338

00006204 <per_adv_sync_new>:
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    6204:	2300      	movs	r3, #0
    6206:	b1bb      	cbz	r3, 6238 <per_adv_sync_new+0x34>
	struct bt_le_per_adv_sync *per_adv_sync = NULL;
    6208:	2000      	movs	r0, #0
	if (!per_adv_sync) {
    620a:	b1a0      	cbz	r0, 6236 <per_adv_sync_new+0x32>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    620c:	2300      	movs	r3, #0
    620e:	6003      	str	r3, [r0, #0]
    6210:	6043      	str	r3, [r0, #4]
    6212:	6083      	str	r3, [r0, #8]
    6214:	60c3      	str	r3, [r0, #12]
    6216:	6103      	str	r3, [r0, #16]
    6218:	4602      	mov	r2, r0
    621a:	f842 3f14 	str.w	r3, [r2, #20]!
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    621e:	f3bf 8f5b 	dmb	ish
    6222:	e852 3f00 	ldrex	r3, [r2]
    6226:	f043 0301 	orr.w	r3, r3, #1
    622a:	e842 3100 	strex	r1, r3, [r2]
    622e:	2900      	cmp	r1, #0
    6230:	d1f7      	bne.n	6222 <per_adv_sync_new+0x1e>
    6232:	f3bf 8f5b 	dmb	ish
}
    6236:	4770      	bx	lr
		if (!atomic_test_bit(per_adv_sync_pool[i].flags,
    6238:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    623c:	00ca      	lsls	r2, r1, #3
    623e:	3210      	adds	r2, #16
    6240:	4908      	ldr	r1, [pc, #32]	; (6264 <per_adv_sync_new+0x60>)
    6242:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6244:	f3bf 8f5b 	dmb	ish
    6248:	6852      	ldr	r2, [r2, #4]
    624a:	f3bf 8f5b 	dmb	ish
    624e:	f002 0201 	and.w	r2, r2, #1
    6252:	b10a      	cbz	r2, 6258 <per_adv_sync_new+0x54>
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    6254:	3301      	adds	r3, #1
    6256:	e7d6      	b.n	6206 <per_adv_sync_new+0x2>
			per_adv_sync = &per_adv_sync_pool[i];
    6258:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    625c:	00da      	lsls	r2, r3, #3
    625e:	4608      	mov	r0, r1
    6260:	4410      	add	r0, r2
			break;
    6262:	e7d2      	b.n	620a <per_adv_sync_new+0x6>
    6264:	20002338 	.word	0x20002338

00006268 <init_reassembling_advertiser>:
{
    6268:	4602      	mov	r2, r0
	memcpy(dst, src, sizeof(*dst));
    626a:	4b05      	ldr	r3, [pc, #20]	; (6280 <init_reassembling_advertiser+0x18>)
    626c:	6800      	ldr	r0, [r0, #0]
    626e:	6018      	str	r0, [r3, #0]
    6270:	8890      	ldrh	r0, [r2, #4]
    6272:	7992      	ldrb	r2, [r2, #6]
    6274:	8098      	strh	r0, [r3, #4]
    6276:	719a      	strb	r2, [r3, #6]
	reassembling_advertiser.sid = sid;
    6278:	71d9      	strb	r1, [r3, #7]
	reassembling_advertiser.state = FRAG_ADV_REASSEMBLING;
    627a:	2201      	movs	r2, #1
    627c:	721a      	strb	r2, [r3, #8]
}
    627e:	4770      	bx	lr
    6280:	20002350 	.word	0x20002350

00006284 <le_adv_recv>:
{
    6284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6288:	b086      	sub	sp, #24
    628a:	4604      	mov	r4, r0
    628c:	4688      	mov	r8, r1
    628e:	4615      	mov	r5, r2
    6290:	4699      	mov	r9, r3
    6292:	f3bf 8f5b 	dmb	ish
    6296:	4b45      	ldr	r3, [pc, #276]	; (63ac <le_adv_recv+0x128>)
    6298:	681b      	ldr	r3, [r3, #0]
    629a:	f3bf 8f5b 	dmb	ish
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    629e:	f013 0f80 	tst.w	r3, #128	; 0x80
    62a2:	d003      	beq.n	62ac <le_adv_recv+0x28>
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
    62a4:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    62a6:	f013 0f04 	tst.w	r3, #4
    62aa:	d17c      	bne.n	63a6 <le_adv_recv+0x122>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    62ac:	7822      	ldrb	r2, [r4, #0]
    62ae:	1e93      	subs	r3, r2, #2
    62b0:	b2db      	uxtb	r3, r3
    62b2:	2b01      	cmp	r3, #1
    62b4:	d938      	bls.n	6328 <le_adv_recv+0xa4>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    62b6:	2aff      	cmp	r2, #255	; 0xff
    62b8:	d044      	beq.n	6344 <le_adv_recv+0xc0>
		bt_addr_le_copy(&id_addr,
    62ba:	4621      	mov	r1, r4
    62bc:	2000      	movs	r0, #0
    62be:	f013 fcce 	bl	19c5e <bt_lookup_id_addr>
    62c2:	4603      	mov	r3, r0
    62c4:	6800      	ldr	r0, [r0, #0]
    62c6:	9001      	str	r0, [sp, #4]
    62c8:	889a      	ldrh	r2, [r3, #4]
    62ca:	799b      	ldrb	r3, [r3, #6]
    62cc:	f8ad 2008 	strh.w	r2, [sp, #8]
    62d0:	f88d 300a 	strb.w	r3, [sp, #10]
	info->addr = &id_addr;
    62d4:	ab01      	add	r3, sp, #4
    62d6:	f8c8 3000 	str.w	r3, [r8]
	if (scan_dev_found_cb) {
    62da:	4b35      	ldr	r3, [pc, #212]	; (63b0 <le_adv_recv+0x12c>)
    62dc:	681b      	ldr	r3, [r3, #0]
    62de:	b1bb      	cbz	r3, 6310 <le_adv_recv+0x8c>
	state->offset = net_buf_simple_headroom(buf);
    62e0:	4628      	mov	r0, r5
    62e2:	f016 fdaa 	bl	1ce3a <net_buf_simple_headroom>
    62e6:	b284      	uxth	r4, r0
    62e8:	f8ad 400c 	strh.w	r4, [sp, #12]
	state->len = buf->len;
    62ec:	88ae      	ldrh	r6, [r5, #4]
    62ee:	f8ad 600e 	strh.w	r6, [sp, #14]
		buf->len = len;
    62f2:	f8a5 9004 	strh.w	r9, [r5, #4]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    62f6:	4b2e      	ldr	r3, [pc, #184]	; (63b0 <le_adv_recv+0x12c>)
    62f8:	681f      	ldr	r7, [r3, #0]
    62fa:	462b      	mov	r3, r5
    62fc:	f898 2007 	ldrb.w	r2, [r8, #7]
    6300:	f998 1005 	ldrsb.w	r1, [r8, #5]
    6304:	a801      	add	r0, sp, #4
    6306:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
    6308:	68ab      	ldr	r3, [r5, #8]
    630a:	4423      	add	r3, r4
    630c:	602b      	str	r3, [r5, #0]
	buf->len = state->len;
    630e:	80ae      	strh	r6, [r5, #4]
	return list->head;
    6310:	4b28      	ldr	r3, [pc, #160]	; (63b4 <le_adv_recv+0x130>)
    6312:	681e      	ldr	r6, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    6314:	b1f6      	cbz	r6, 6354 <le_adv_recv+0xd0>
    6316:	3e08      	subs	r6, #8
    6318:	d01e      	beq.n	6358 <le_adv_recv+0xd4>
Z_GENLIST_PEEK_NEXT(slist, snode)
    631a:	f116 0408 	adds.w	r4, r6, #8
    631e:	d020      	beq.n	6362 <le_adv_recv+0xde>
	return node->next;
    6320:	68b4      	ldr	r4, [r6, #8]
    6322:	b1f4      	cbz	r4, 6362 <le_adv_recv+0xde>
    6324:	3c08      	subs	r4, #8
    6326:	e01c      	b.n	6362 <le_adv_recv+0xde>
    6328:	6820      	ldr	r0, [r4, #0]
    632a:	9001      	str	r0, [sp, #4]
    632c:	88a2      	ldrh	r2, [r4, #4]
    632e:	79a3      	ldrb	r3, [r4, #6]
    6330:	f8ad 2008 	strh.w	r2, [sp, #8]
    6334:	f88d 300a 	strb.w	r3, [sp, #10]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6338:	f89d 3004 	ldrb.w	r3, [sp, #4]
    633c:	3b02      	subs	r3, #2
    633e:	f88d 3004 	strb.w	r3, [sp, #4]
    6342:	e7c7      	b.n	62d4 <le_adv_recv+0x50>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    6344:	2300      	movs	r3, #0
    6346:	9304      	str	r3, [sp, #16]
    6348:	f8cd 3013 	str.w	r3, [sp, #19]
    634c:	9301      	str	r3, [sp, #4]
    634e:	f8cd 3007 	str.w	r3, [sp, #7]
    6352:	e7bf      	b.n	62d4 <le_adv_recv+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    6354:	4634      	mov	r4, r6
    6356:	e004      	b.n	6362 <le_adv_recv+0xde>
    6358:	4634      	mov	r4, r6
    635a:	e002      	b.n	6362 <le_adv_recv+0xde>
    635c:	4622      	mov	r2, r4
    635e:	4626      	mov	r6, r4
    6360:	4614      	mov	r4, r2
    6362:	b306      	cbz	r6, 63a6 <le_adv_recv+0x122>
		if (listener->recv) {
    6364:	6833      	ldr	r3, [r6, #0]
    6366:	b1a3      	cbz	r3, 6392 <le_adv_recv+0x10e>
	state->offset = net_buf_simple_headroom(buf);
    6368:	4628      	mov	r0, r5
    636a:	f016 fd66 	bl	1ce3a <net_buf_simple_headroom>
    636e:	b287      	uxth	r7, r0
    6370:	f8ad 700c 	strh.w	r7, [sp, #12]
	state->len = buf->len;
    6374:	f8b5 a004 	ldrh.w	sl, [r5, #4]
    6378:	f8ad a00e 	strh.w	sl, [sp, #14]
			buf->len = len;
    637c:	f8a5 9004 	strh.w	r9, [r5, #4]
			listener->recv(info, buf);
    6380:	6833      	ldr	r3, [r6, #0]
    6382:	4629      	mov	r1, r5
    6384:	4640      	mov	r0, r8
    6386:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    6388:	68aa      	ldr	r2, [r5, #8]
    638a:	443a      	add	r2, r7
    638c:	602a      	str	r2, [r5, #0]
	buf->len = state->len;
    638e:	f8a5 a004 	strh.w	sl, [r5, #4]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    6392:	2c00      	cmp	r4, #0
    6394:	d0e2      	beq.n	635c <le_adv_recv+0xd8>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6396:	f114 0208 	adds.w	r2, r4, #8
    639a:	d0e0      	beq.n	635e <le_adv_recv+0xda>
	return node->next;
    639c:	68a2      	ldr	r2, [r4, #8]
    639e:	2a00      	cmp	r2, #0
    63a0:	d0dd      	beq.n	635e <le_adv_recv+0xda>
    63a2:	3a08      	subs	r2, #8
    63a4:	e7db      	b.n	635e <le_adv_recv+0xda>
}
    63a6:	b006      	add	sp, #24
    63a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    63ac:	20000088 	.word	0x20000088
    63b0:	20002364 	.word	0x20002364
    63b4:	2000235c 	.word	0x2000235c

000063b8 <bt_scan_reset>:
{
    63b8:	b508      	push	{r3, lr}
	scan_dev_found_cb = NULL;
    63ba:	4b03      	ldr	r3, [pc, #12]	; (63c8 <bt_scan_reset+0x10>)
    63bc:	2200      	movs	r2, #0
    63be:	601a      	str	r2, [r3, #0]
	reset_reassembling_advertiser();
    63c0:	f7ff fe2e 	bl	6020 <reset_reassembling_advertiser>
}
    63c4:	bd08      	pop	{r3, pc}
    63c6:	bf00      	nop
    63c8:	20002364 	.word	0x20002364

000063cc <bt_le_scan_update>:
{
    63cc:	b538      	push	{r3, r4, r5, lr}
    63ce:	f3bf 8f5b 	dmb	ish
    63d2:	4b12      	ldr	r3, [pc, #72]	; (641c <bt_le_scan_update+0x50>)
    63d4:	681b      	ldr	r3, [r3, #0]
    63d6:	f3bf 8f5b 	dmb	ish
    63da:	f3c3 14c0 	ubfx	r4, r3, #7, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    63de:	f013 0f80 	tst.w	r3, #128	; 0x80
    63e2:	d002      	beq.n	63ea <bt_le_scan_update+0x1e>
		return 0;
    63e4:	2400      	movs	r4, #0
}
    63e6:	4620      	mov	r0, r4
    63e8:	bd38      	pop	{r3, r4, r5, pc}
    63ea:	4605      	mov	r5, r0
    63ec:	f3bf 8f5b 	dmb	ish
    63f0:	4b0a      	ldr	r3, [pc, #40]	; (641c <bt_le_scan_update+0x50>)
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    63f8:	f013 0f40 	tst.w	r3, #64	; 0x40
    63fc:	d003      	beq.n	6406 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    63fe:	2000      	movs	r0, #0
    6400:	f013 fd28 	bl	19e54 <bt_le_scan_set_enable>
		if (err) {
    6404:	b940      	cbnz	r0, 6418 <bt_le_scan_update+0x4c>
	if (get_pending_per_adv_sync()) {
    6406:	f7ff fee1 	bl	61cc <get_pending_per_adv_sync>
    640a:	2800      	cmp	r0, #0
    640c:	d0eb      	beq.n	63e6 <bt_le_scan_update+0x1a>
		return start_passive_scan(fast_scan);
    640e:	4628      	mov	r0, r5
    6410:	f013 fc8d 	bl	19d2e <start_passive_scan>
    6414:	4604      	mov	r4, r0
    6416:	e7e6      	b.n	63e6 <bt_le_scan_update+0x1a>
			return err;
    6418:	4604      	mov	r4, r0
    641a:	e7e4      	b.n	63e6 <bt_le_scan_update+0x1a>
    641c:	20000088 	.word	0x20000088

00006420 <bt_hci_le_scan_timeout>:
{
    6420:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6422:	4b29      	ldr	r3, [pc, #164]	; (64c8 <bt_hci_le_scan_timeout+0xa8>)
    6424:	f3bf 8f5b 	dmb	ish
    6428:	e853 2f00 	ldrex	r2, [r3]
    642c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    6430:	e843 2100 	strex	r1, r2, [r3]
    6434:	2900      	cmp	r1, #0
    6436:	d1f7      	bne.n	6428 <bt_hci_le_scan_timeout+0x8>
    6438:	f3bf 8f5b 	dmb	ish
    643c:	f3bf 8f5b 	dmb	ish
    6440:	e853 2f00 	ldrex	r2, [r3]
    6444:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    6448:	e843 2100 	strex	r1, r2, [r3]
    644c:	2900      	cmp	r1, #0
    644e:	d1f7      	bne.n	6440 <bt_hci_le_scan_timeout+0x20>
    6450:	f3bf 8f5b 	dmb	ish
    6454:	f3bf 8f5b 	dmb	ish
    6458:	e853 2f00 	ldrex	r2, [r3]
    645c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    6460:	e843 2100 	strex	r1, r2, [r3]
    6464:	2900      	cmp	r1, #0
    6466:	d1f7      	bne.n	6458 <bt_hci_le_scan_timeout+0x38>
    6468:	f3bf 8f5b 	dmb	ish
    646c:	f3bf 8f5b 	dmb	ish
    6470:	e853 2f00 	ldrex	r2, [r3]
    6474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    6478:	e843 2100 	strex	r1, r2, [r3]
    647c:	2900      	cmp	r1, #0
    647e:	d1f7      	bne.n	6470 <bt_hci_le_scan_timeout+0x50>
    6480:	f3bf 8f5b 	dmb	ish
	return list->head;
    6484:	4b11      	ldr	r3, [pc, #68]	; (64cc <bt_hci_le_scan_timeout+0xac>)
    6486:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    6488:	b142      	cbz	r2, 649c <bt_hci_le_scan_timeout+0x7c>
    648a:	3a08      	subs	r2, #8
    648c:	d008      	beq.n	64a0 <bt_hci_le_scan_timeout+0x80>
Z_GENLIST_PEEK_NEXT(slist, snode)
    648e:	f112 0408 	adds.w	r4, r2, #8
    6492:	d00a      	beq.n	64aa <bt_hci_le_scan_timeout+0x8a>
	return node->next;
    6494:	6894      	ldr	r4, [r2, #8]
    6496:	b144      	cbz	r4, 64aa <bt_hci_le_scan_timeout+0x8a>
    6498:	3c08      	subs	r4, #8
    649a:	e006      	b.n	64aa <bt_hci_le_scan_timeout+0x8a>
    649c:	4614      	mov	r4, r2
    649e:	e004      	b.n	64aa <bt_hci_le_scan_timeout+0x8a>
    64a0:	4614      	mov	r4, r2
    64a2:	e002      	b.n	64aa <bt_hci_le_scan_timeout+0x8a>
    64a4:	4623      	mov	r3, r4
    64a6:	4622      	mov	r2, r4
    64a8:	461c      	mov	r4, r3
    64aa:	b162      	cbz	r2, 64c6 <bt_hci_le_scan_timeout+0xa6>
		if (listener->timeout) {
    64ac:	6853      	ldr	r3, [r2, #4]
    64ae:	b103      	cbz	r3, 64b2 <bt_hci_le_scan_timeout+0x92>
			listener->timeout();
    64b0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    64b2:	2c00      	cmp	r4, #0
    64b4:	d0f6      	beq.n	64a4 <bt_hci_le_scan_timeout+0x84>
Z_GENLIST_PEEK_NEXT(slist, snode)
    64b6:	f114 0308 	adds.w	r3, r4, #8
    64ba:	d0f4      	beq.n	64a6 <bt_hci_le_scan_timeout+0x86>
	return node->next;
    64bc:	68a3      	ldr	r3, [r4, #8]
    64be:	2b00      	cmp	r3, #0
    64c0:	d0f1      	beq.n	64a6 <bt_hci_le_scan_timeout+0x86>
    64c2:	3b08      	subs	r3, #8
    64c4:	e7ef      	b.n	64a6 <bt_hci_le_scan_timeout+0x86>
}
    64c6:	bd10      	pop	{r4, pc}
    64c8:	20000088 	.word	0x20000088
    64cc:	2000235c 	.word	0x2000235c

000064d0 <bt_hci_le_adv_ext_report>:
{
    64d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64d4:	b084      	sub	sp, #16
    64d6:	4680      	mov	r8, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    64d8:	f100 0708 	add.w	r7, r0, #8
    64dc:	4638      	mov	r0, r7
    64de:	f016 fca4 	bl	1ce2a <net_buf_simple_pull_u8>
	BT_DBG("Adv number of reports %u", num_reports);
    64e2:	e04b      	b.n	657c <bt_hci_le_adv_ext_report+0xac>
			create_ext_adv_info(evt, &scan_info);
    64e4:	4669      	mov	r1, sp
    64e6:	f013 fc47 	bl	19d78 <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
    64ea:	7de3      	ldrb	r3, [r4, #23]
    64ec:	463a      	mov	r2, r7
    64ee:	4669      	mov	r1, sp
    64f0:	1ca0      	adds	r0, r4, #2
    64f2:	f7ff fec7 	bl	6284 <le_adv_recv>
			continue;
    64f6:	e040      	b.n	657a <bt_hci_le_adv_ext_report+0xaa>
				    !fragmented_advertisers_equal(&reassembling_advertiser,
    64f8:	7ac2      	ldrb	r2, [r0, #11]
    64fa:	1c81      	adds	r1, r0, #2
    64fc:	483d      	ldr	r0, [pc, #244]	; (65f4 <bt_hci_le_adv_ext_report+0x124>)
    64fe:	f013 fc2d 	bl	19d5c <fragmented_advertisers_equal>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
    6502:	b108      	cbz	r0, 6508 <bt_hci_le_adv_ext_report+0x38>
    6504:	2300      	movs	r3, #0
    6506:	e051      	b.n	65ac <bt_hci_le_adv_ext_report+0xdc>
    6508:	2301      	movs	r3, #1
    650a:	e04f      	b.n	65ac <bt_hci_le_adv_ext_report+0xdc>
			create_ext_adv_info(evt, &scan_info);
    650c:	4669      	mov	r1, sp
    650e:	4620      	mov	r0, r4
    6510:	f013 fc32 	bl	19d78 <create_ext_adv_info>
			le_adv_recv(&evt->addr, &scan_info, &buf->b, evt->length);
    6514:	7de3      	ldrb	r3, [r4, #23]
    6516:	463a      	mov	r2, r7
    6518:	4669      	mov	r1, sp
    651a:	1ca0      	adds	r0, r4, #2
    651c:	f7ff feb2 	bl	6284 <le_adv_recv>
			continue;
    6520:	e02b      	b.n	657a <bt_hci_le_adv_ext_report+0xaa>
	return net_buf_simple_pull_mem(&buf->b, len);
    6522:	7de1      	ldrb	r1, [r4, #23]
    6524:	4638      	mov	r0, r7
    6526:	f016 fc78 	bl	1ce1a <net_buf_simple_pull_mem>
			continue;
    652a:	e026      	b.n	657a <bt_hci_le_adv_ext_report+0xaa>
    652c:	7de1      	ldrb	r1, [r4, #23]
    652e:	4638      	mov	r0, r7
    6530:	f016 fc73 	bl	1ce1a <net_buf_simple_pull_mem>
			reset_reassembling_advertiser();
    6534:	f7ff fd74 	bl	6020 <reset_reassembling_advertiser>
			continue;
    6538:	e01f      	b.n	657a <bt_hci_le_adv_ext_report+0xaa>
			init_reassembling_advertiser(&evt->addr, evt->sid);
    653a:	7ae1      	ldrb	r1, [r4, #11]
    653c:	1ca0      	adds	r0, r4, #2
    653e:	f7ff fe93 	bl	6268 <init_reassembling_advertiser>
    6542:	e040      	b.n	65c6 <bt_hci_le_adv_ext_report+0xf6>
		if (reassembling_advertiser.state == FRAG_ADV_DISCARDING) {
    6544:	4b2b      	ldr	r3, [pc, #172]	; (65f4 <bt_hci_le_adv_ext_report+0x124>)
    6546:	7a1b      	ldrb	r3, [r3, #8]
    6548:	2b02      	cmp	r3, #2
    654a:	d047      	beq.n	65dc <bt_hci_le_adv_ext_report+0x10c>
		net_buf_simple_add_mem(&ext_scan_buf, buf->data, evt->length);
    654c:	f8d8 1008 	ldr.w	r1, [r8, #8]
    6550:	4829      	ldr	r0, [pc, #164]	; (65f8 <bt_hci_le_adv_ext_report+0x128>)
    6552:	f016 fc4f 	bl	1cdf4 <net_buf_simple_add_mem>
		if (more_to_come) {
    6556:	2e01      	cmp	r6, #1
    6558:	d00f      	beq.n	657a <bt_hci_le_adv_ext_report+0xaa>
		create_ext_adv_info(evt, &scan_info);
    655a:	4669      	mov	r1, sp
    655c:	4620      	mov	r0, r4
    655e:	f013 fc0b 	bl	19d78 <create_ext_adv_info>
		le_adv_recv(&evt->addr, &scan_info, &ext_scan_buf, ext_scan_buf.len);
    6562:	4a25      	ldr	r2, [pc, #148]	; (65f8 <bt_hci_le_adv_ext_report+0x128>)
    6564:	8893      	ldrh	r3, [r2, #4]
    6566:	4669      	mov	r1, sp
    6568:	1ca0      	adds	r0, r4, #2
    656a:	f7ff fe8b 	bl	6284 <le_adv_recv>
		reset_reassembling_advertiser();
    656e:	f7ff fd57 	bl	6020 <reset_reassembling_advertiser>
	return net_buf_simple_pull(&buf->b, len);
    6572:	7de1      	ldrb	r1, [r4, #23]
    6574:	4638      	mov	r0, r7
    6576:	f016 fc48 	bl	1ce0a <net_buf_simple_pull>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
    657a:	4628      	mov	r0, r5
	while (num_reports--) {
    657c:	1e45      	subs	r5, r0, #1
    657e:	b2ed      	uxtb	r5, r5
    6580:	2800      	cmp	r0, #0
    6582:	d034      	beq.n	65ee <bt_hci_le_adv_ext_report+0x11e>
		if (buf->len < sizeof(*evt)) {
    6584:	f8b8 300c 	ldrh.w	r3, [r8, #12]
    6588:	2b17      	cmp	r3, #23
    658a:	d930      	bls.n	65ee <bt_hci_le_adv_ext_report+0x11e>
	return net_buf_simple_pull_mem(&buf->b, len);
    658c:	2118      	movs	r1, #24
    658e:	4638      	mov	r0, r7
    6590:	f016 fc43 	bl	1ce1a <net_buf_simple_pull_mem>
    6594:	4604      	mov	r4, r0
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS(evt->evt_type);
    6596:	8803      	ldrh	r3, [r0, #0]
    6598:	f3c3 1641 	ubfx	r6, r3, #5, #2
		if (evt->evt_type & BT_HCI_LE_ADV_EVT_TYPE_LEGACY) {
    659c:	f013 0f10 	tst.w	r3, #16
    65a0:	d1a0      	bne.n	64e4 <bt_hci_le_adv_ext_report+0x14>
		is_new_advertiser = reassembling_advertiser.state == FRAG_ADV_INACTIVE ||
    65a2:	4b14      	ldr	r3, [pc, #80]	; (65f4 <bt_hci_le_adv_ext_report+0x124>)
    65a4:	7a1b      	ldrb	r3, [r3, #8]
    65a6:	2b00      	cmp	r3, #0
    65a8:	d1a6      	bne.n	64f8 <bt_hci_le_adv_ext_report+0x28>
    65aa:	2301      	movs	r3, #1
		if (is_new_advertiser && is_report_complete) {
    65ac:	461a      	mov	r2, r3
    65ae:	b10b      	cbz	r3, 65b4 <bt_hci_le_adv_ext_report+0xe4>
    65b0:	2e00      	cmp	r6, #0
    65b2:	d0ab      	beq.n	650c <bt_hci_le_adv_ext_report+0x3c>
		if (is_new_advertiser && reassembling_advertiser.state == FRAG_ADV_REASSEMBLING) {
    65b4:	b11a      	cbz	r2, 65be <bt_hci_le_adv_ext_report+0xee>
    65b6:	4b0f      	ldr	r3, [pc, #60]	; (65f4 <bt_hci_le_adv_ext_report+0x124>)
    65b8:	7a1b      	ldrb	r3, [r3, #8]
    65ba:	2b01      	cmp	r3, #1
    65bc:	d0b1      	beq.n	6522 <bt_hci_le_adv_ext_report+0x52>
		if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE) {
    65be:	2e02      	cmp	r6, #2
    65c0:	d0b4      	beq.n	652c <bt_hci_le_adv_ext_report+0x5c>
		if (is_new_advertiser) {
    65c2:	2a00      	cmp	r2, #0
    65c4:	d1b9      	bne.n	653a <bt_hci_le_adv_ext_report+0x6a>
		if (evt->length + ext_scan_buf.len > ext_scan_buf.size) {
    65c6:	7de2      	ldrb	r2, [r4, #23]
    65c8:	490b      	ldr	r1, [pc, #44]	; (65f8 <bt_hci_le_adv_ext_report+0x128>)
    65ca:	888b      	ldrh	r3, [r1, #4]
    65cc:	4413      	add	r3, r2
    65ce:	88c9      	ldrh	r1, [r1, #6]
    65d0:	428b      	cmp	r3, r1
    65d2:	ddb7      	ble.n	6544 <bt_hci_le_adv_ext_report+0x74>
			reassembling_advertiser.state = FRAG_ADV_DISCARDING;
    65d4:	4b07      	ldr	r3, [pc, #28]	; (65f4 <bt_hci_le_adv_ext_report+0x124>)
    65d6:	2102      	movs	r1, #2
    65d8:	7219      	strb	r1, [r3, #8]
    65da:	e7b3      	b.n	6544 <bt_hci_le_adv_ext_report+0x74>
    65dc:	4611      	mov	r1, r2
    65de:	4638      	mov	r0, r7
    65e0:	f016 fc1b 	bl	1ce1a <net_buf_simple_pull_mem>
			if (!more_to_come) {
    65e4:	2e01      	cmp	r6, #1
    65e6:	d0c8      	beq.n	657a <bt_hci_le_adv_ext_report+0xaa>
				reset_reassembling_advertiser();
    65e8:	f7ff fd1a 	bl	6020 <reset_reassembling_advertiser>
			continue;
    65ec:	e7c5      	b.n	657a <bt_hci_le_adv_ext_report+0xaa>
}
    65ee:	b004      	add	sp, #16
    65f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f4:	20002350 	.word	0x20002350
    65f8:	200003c4 	.word	0x200003c4

000065fc <bt_hci_get_per_adv_sync>:

struct bt_le_per_adv_sync *bt_hci_get_per_adv_sync(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    65fc:	2300      	movs	r3, #0
    65fe:	b10b      	cbz	r3, 6604 <bt_hci_get_per_adv_sync+0x8>
				    BT_PER_ADV_SYNC_SYNCED)) {
			return &per_adv_sync_pool[i];
		}
	}

	return NULL;
    6600:	2000      	movs	r0, #0
}
    6602:	4770      	bx	lr
		if (per_adv_sync_pool[i].handle == handle &&
    6604:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    6608:	490c      	ldr	r1, [pc, #48]	; (663c <bt_hci_get_per_adv_sync+0x40>)
    660a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    660e:	8912      	ldrh	r2, [r2, #8]
    6610:	4282      	cmp	r2, r0
    6612:	d001      	beq.n	6618 <bt_hci_get_per_adv_sync+0x1c>
	for (int i = 0; i < ARRAY_SIZE(per_adv_sync_pool); i++) {
    6614:	3301      	adds	r3, #1
    6616:	e7f2      	b.n	65fe <bt_hci_get_per_adv_sync+0x2>
		    atomic_test_bit(per_adv_sync_pool[i].flags,
    6618:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    661c:	00d2      	lsls	r2, r2, #3
    661e:	3210      	adds	r2, #16
    6620:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6622:	f3bf 8f5b 	dmb	ish
    6626:	6852      	ldr	r2, [r2, #4]
    6628:	f3bf 8f5b 	dmb	ish
		if (per_adv_sync_pool[i].handle == handle &&
    662c:	f012 0f02 	tst.w	r2, #2
    6630:	d0f0      	beq.n	6614 <bt_hci_get_per_adv_sync+0x18>
			return &per_adv_sync_pool[i];
    6632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6636:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
    663a:	4770      	bx	lr
    663c:	20002338 	.word	0x20002338

00006640 <bt_hci_le_per_adv_report_recv>:

void bt_hci_le_per_adv_report_recv(struct bt_le_per_adv_sync *per_adv_sync,
				   struct net_buf_simple *buf,
				   const struct bt_le_per_adv_sync_recv_info *info)
{
    6640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6644:	b083      	sub	sp, #12
    6646:	4607      	mov	r7, r0
    6648:	460e      	mov	r6, r1
    664a:	4690      	mov	r8, r2
	return list->head;
    664c:	4b14      	ldr	r3, [pc, #80]	; (66a0 <bt_hci_le_per_adv_report_recv+0x60>)
    664e:	681c      	ldr	r4, [r3, #0]
	struct net_buf_simple_state state;
	struct bt_le_per_adv_sync_cb *listener;

	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6650:	b1dc      	cbz	r4, 668a <bt_hci_le_per_adv_report_recv+0x4a>
    6652:	3c18      	subs	r4, #24
    6654:	e019      	b.n	668a <bt_hci_le_per_adv_report_recv+0x4a>
	state->offset = net_buf_simple_headroom(buf);
    6656:	4630      	mov	r0, r6
    6658:	f016 fbef 	bl	1ce3a <net_buf_simple_headroom>
    665c:	b285      	uxth	r5, r0
    665e:	f8ad 5004 	strh.w	r5, [sp, #4]
	state->len = buf->len;
    6662:	f8b6 9004 	ldrh.w	r9, [r6, #4]
    6666:	f8ad 9006 	strh.w	r9, [sp, #6]
		if (listener->recv) {
			net_buf_simple_save(buf, &state);
			listener->recv(per_adv_sync, info, buf);
    666a:	68a3      	ldr	r3, [r4, #8]
    666c:	4632      	mov	r2, r6
    666e:	4641      	mov	r1, r8
    6670:	4638      	mov	r0, r7
    6672:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
    6674:	68b3      	ldr	r3, [r6, #8]
    6676:	442b      	add	r3, r5
    6678:	6033      	str	r3, [r6, #0]
	buf->len = state->len;
    667a:	f8a6 9004 	strh.w	r9, [r6, #4]
Z_GENLIST_PEEK_NEXT(slist, snode)
    667e:	f114 0318 	adds.w	r3, r4, #24
    6682:	d007      	beq.n	6694 <bt_hci_le_per_adv_report_recv+0x54>
	return node->next;
    6684:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6686:	b13c      	cbz	r4, 6698 <bt_hci_le_per_adv_report_recv+0x58>
    6688:	3c18      	subs	r4, #24
    668a:	b12c      	cbz	r4, 6698 <bt_hci_le_per_adv_report_recv+0x58>
		if (listener->recv) {
    668c:	68a3      	ldr	r3, [r4, #8]
    668e:	2b00      	cmp	r3, #0
    6690:	d1e1      	bne.n	6656 <bt_hci_le_per_adv_report_recv+0x16>
    6692:	e7f4      	b.n	667e <bt_hci_le_per_adv_report_recv+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6694:	461c      	mov	r4, r3
    6696:	e7f8      	b.n	668a <bt_hci_le_per_adv_report_recv+0x4a>
			net_buf_simple_restore(buf, &state);
		}
	}
}
    6698:	b003      	add	sp, #12
    669a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    669e:	bf00      	nop
    66a0:	20002330 	.word	0x20002330

000066a4 <bt_hci_le_per_adv_sync_established>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_PER_ADV_TERMINATE_SYNC, buf,
				    NULL);
}

void bt_hci_le_per_adv_sync_established(struct net_buf *buf)
{
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	b086      	sub	sp, #24
	struct bt_hci_evt_le_per_adv_sync_established *evt =
    66a8:	6884      	ldr	r4, [r0, #8]
	struct bt_le_per_adv_sync *pending_per_adv_sync;
	struct bt_le_per_adv_sync_cb *listener;
	bool unexpected_evt;
	int err;

	pending_per_adv_sync = get_pending_per_adv_sync();
    66aa:	f7ff fd8f 	bl	61cc <get_pending_per_adv_sync>

	if (pending_per_adv_sync) {
    66ae:	4605      	mov	r5, r0
    66b0:	b180      	cbz	r0, 66d4 <bt_hci_le_per_adv_sync_established+0x30>
		atomic_clear_bit(pending_per_adv_sync->flags,
    66b2:	f100 0314 	add.w	r3, r0, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    66b6:	f3bf 8f5b 	dmb	ish
    66ba:	e853 2f00 	ldrex	r2, [r3]
    66be:	f022 0204 	bic.w	r2, r2, #4
    66c2:	e843 2100 	strex	r1, r2, [r3]
    66c6:	2900      	cmp	r1, #0
    66c8:	d1f7      	bne.n	66ba <bt_hci_le_per_adv_sync_established+0x16>
    66ca:	f3bf 8f5b 	dmb	ish
				 BT_PER_ADV_SYNC_SYNCING);
		err = bt_le_scan_update(false);
    66ce:	2000      	movs	r0, #0
    66d0:	f7ff fe7c 	bl	63cc <bt_le_scan_update>
		if (err) {
			BT_ERR("Could not update scan (%d)", err);
		}
	}

	if (evt->status == BT_HCI_ERR_OP_CANCELLED_BY_HOST) {
    66d4:	7823      	ldrb	r3, [r4, #0]
    66d6:	2b44      	cmp	r3, #68	; 0x44
    66d8:	d024      	beq.n	6724 <bt_hci_le_per_adv_sync_established+0x80>
		}

		return;
	}

	if (!pending_per_adv_sync ||
    66da:	b16d      	cbz	r5, 66f8 <bt_hci_le_per_adv_sync_established+0x54>
	    (!atomic_test_bit(pending_per_adv_sync->flags,
    66dc:	f105 0614 	add.w	r6, r5, #20
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    66e0:	f3bf 8f5b 	dmb	ish
    66e4:	696b      	ldr	r3, [r5, #20]
    66e6:	f3bf 8f5b 	dmb	ish
	if (!pending_per_adv_sync ||
    66ea:	f013 0f08 	tst.w	r3, #8
    66ee:	d126      	bne.n	673e <bt_hci_le_per_adv_sync_established+0x9a>
			      BT_PER_ADV_SYNC_SYNCING_USE_LIST) &&
	     ((pending_per_adv_sync->sid != evt->sid) ||
    66f0:	79ea      	ldrb	r2, [r5, #7]
    66f2:	78e3      	ldrb	r3, [r4, #3]
			      BT_PER_ADV_SYNC_SYNCING_USE_LIST) &&
    66f4:	429a      	cmp	r2, r3
    66f6:	d01b      	beq.n	6730 <bt_hci_le_per_adv_sync_established+0x8c>
	      bt_addr_le_cmp(&pending_per_adv_sync->addr, &evt->adv_addr)))) {
		BT_ERR("Unexpected per adv sync established event");
		/* Request terminate of pending periodic advertising in controller */
		per_adv_sync_terminate(sys_le16_to_cpu(evt->handle));
    66f8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    66fc:	f013 fb5b 	bl	19db6 <per_adv_sync_terminate>

		unexpected_evt = true;
    6700:	2301      	movs	r3, #1
	} else {
		unexpected_evt = false;
	}

	if (unexpected_evt || evt->status != BT_HCI_ERR_SUCCESS) {
		if (pending_per_adv_sync) {
    6702:	b19d      	cbz	r5, 672c <bt_hci_le_per_adv_sync_established+0x88>
			struct bt_le_per_adv_sync_term_info term_info;

			/* Terminate the pending PA sync and notify app */
			term_info.addr = &pending_per_adv_sync->addr;
    6704:	9500      	str	r5, [sp, #0]
			term_info.sid = pending_per_adv_sync->sid;
    6706:	79ea      	ldrb	r2, [r5, #7]
    6708:	f88d 2004 	strb.w	r2, [sp, #4]
			term_info.reason = unexpected_evt ? BT_HCI_ERR_UNSPECIFIED : evt->status;
    670c:	b9db      	cbnz	r3, 6746 <bt_hci_le_per_adv_sync_established+0xa2>
    670e:	7823      	ldrb	r3, [r4, #0]
    6710:	f88d 3005 	strb.w	r3, [sp, #5]

			/* Deleting before callback, so the caller will be able
			 * to restart sync in the callback.
			 */
			per_adv_sync_delete(pending_per_adv_sync);
    6714:	4628      	mov	r0, r5
    6716:	f013 fb67 	bl	19de8 <per_adv_sync_delete>
	return list->head;
    671a:	4b43      	ldr	r3, [pc, #268]	; (6828 <bt_hci_le_per_adv_sync_established+0x184>)
    671c:	681c      	ldr	r4, [r3, #0]

			SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs,
    671e:	b1dc      	cbz	r4, 6758 <bt_hci_le_per_adv_sync_established+0xb4>
    6720:	3c18      	subs	r4, #24
    6722:	e019      	b.n	6758 <bt_hci_le_per_adv_sync_established+0xb4>
		if (pending_per_adv_sync) {
    6724:	b115      	cbz	r5, 672c <bt_hci_le_per_adv_sync_established+0x88>
			per_adv_sync_delete(pending_per_adv_sync);
    6726:	4628      	mov	r0, r5
    6728:	f013 fb5e 	bl	19de8 <per_adv_sync_delete>
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
		if (listener->synced) {
			listener->synced(pending_per_adv_sync, &sync_info);
		}
	}
}
    672c:	b006      	add	sp, #24
    672e:	bd70      	pop	{r4, r5, r6, pc}
	return memcmp(a, b, sizeof(*a));
    6730:	2207      	movs	r2, #7
    6732:	1d21      	adds	r1, r4, #4
    6734:	4628      	mov	r0, r5
    6736:	f00e f929 	bl	1498c <memcmp>
	     ((pending_per_adv_sync->sid != evt->sid) ||
    673a:	2800      	cmp	r0, #0
    673c:	d1dc      	bne.n	66f8 <bt_hci_le_per_adv_sync_established+0x54>
	if (unexpected_evt || evt->status != BT_HCI_ERR_SUCCESS) {
    673e:	7823      	ldrb	r3, [r4, #0]
    6740:	b19b      	cbz	r3, 676a <bt_hci_le_per_adv_sync_established+0xc6>
		unexpected_evt = false;
    6742:	2300      	movs	r3, #0
    6744:	e7dd      	b.n	6702 <bt_hci_le_per_adv_sync_established+0x5e>
			term_info.reason = unexpected_evt ? BT_HCI_ERR_UNSPECIFIED : evt->status;
    6746:	231f      	movs	r3, #31
    6748:	e7e2      	b.n	6710 <bt_hci_le_per_adv_sync_established+0x6c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    674a:	f114 0f18 	cmn.w	r4, #24
    674e:	d0ed      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
	return node->next;
    6750:	69a4      	ldr	r4, [r4, #24]
			SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs,
    6752:	2c00      	cmp	r4, #0
    6754:	d0ea      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
    6756:	3c18      	subs	r4, #24
    6758:	2c00      	cmp	r4, #0
    675a:	d0e7      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
				if (listener->term) {
    675c:	6863      	ldr	r3, [r4, #4]
    675e:	2b00      	cmp	r3, #0
    6760:	d0f3      	beq.n	674a <bt_hci_le_per_adv_sync_established+0xa6>
					listener->term(pending_per_adv_sync,
    6762:	4669      	mov	r1, sp
    6764:	4628      	mov	r0, r5
    6766:	4798      	blx	r3
    6768:	e7ef      	b.n	674a <bt_hci_le_per_adv_sync_established+0xa6>
	pending_per_adv_sync->report_truncated = false;
    676a:	2300      	movs	r3, #0
    676c:	742b      	strb	r3, [r5, #16]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    676e:	f3bf 8f5b 	dmb	ish
    6772:	e856 2f00 	ldrex	r2, [r6]
    6776:	f042 0202 	orr.w	r2, r2, #2
    677a:	e846 2100 	strex	r1, r2, [r6]
    677e:	2900      	cmp	r1, #0
    6780:	d1f7      	bne.n	6772 <bt_hci_le_per_adv_sync_established+0xce>
    6782:	f3bf 8f5b 	dmb	ish
	pending_per_adv_sync->handle = sys_le16_to_cpu(evt->handle);
    6786:	f8b4 2001 	ldrh.w	r2, [r4, #1]
    678a:	812a      	strh	r2, [r5, #8]
	pending_per_adv_sync->interval = sys_le16_to_cpu(evt->interval);
    678c:	89a2      	ldrh	r2, [r4, #12]
    678e:	816a      	strh	r2, [r5, #10]
		sys_le16_to_cpu(evt->clock_accuracy);
    6790:	7ba2      	ldrb	r2, [r4, #14]
	pending_per_adv_sync->clock_accuracy =
    6792:	81aa      	strh	r2, [r5, #12]
	pending_per_adv_sync->phy = evt->phy;
    6794:	7ae2      	ldrb	r2, [r4, #11]
    6796:	73aa      	strb	r2, [r5, #14]
	memset(&sync_info, 0, sizeof(sync_info));
    6798:	9302      	str	r3, [sp, #8]
    679a:	9303      	str	r3, [sp, #12]
    679c:	9304      	str	r3, [sp, #16]
    679e:	9305      	str	r3, [sp, #20]
	sync_info.interval = pending_per_adv_sync->interval;
    67a0:	896b      	ldrh	r3, [r5, #10]
    67a2:	f8ad 300e 	strh.w	r3, [sp, #14]
	sync_info.phy = bt_get_phy(pending_per_adv_sync->phy);
    67a6:	7ba8      	ldrb	r0, [r5, #14]
    67a8:	f013 f9c5 	bl	19b36 <bt_get_phy>
    67ac:	f88d 0010 	strb.w	r0, [sp, #16]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    67b0:	f3bf 8f5b 	dmb	ish
    67b4:	696b      	ldr	r3, [r5, #20]
    67b6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(pending_per_adv_sync->flags,
    67ba:	f013 0f08 	tst.w	r3, #8
    67be:	d113      	bne.n	67e8 <bt_hci_le_per_adv_sync_established+0x144>
	sync_info.addr = &pending_per_adv_sync->addr;
    67c0:	9502      	str	r5, [sp, #8]
	sync_info.sid = pending_per_adv_sync->sid;
    67c2:	79eb      	ldrb	r3, [r5, #7]
    67c4:	f88d 300c 	strb.w	r3, [sp, #12]
    67c8:	f3bf 8f5b 	dmb	ish
    67cc:	696b      	ldr	r3, [r5, #20]
    67ce:	f3bf 8f5b 	dmb	ish
    67d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
				 BT_PER_ADV_SYNC_RECV_DISABLED);
    67d6:	f083 0301 	eor.w	r3, r3, #1
	sync_info.recv_enabled =
    67da:	f88d 3011 	strb.w	r3, [sp, #17]
	return list->head;
    67de:	4b12      	ldr	r3, [pc, #72]	; (6828 <bt_hci_le_per_adv_sync_established+0x184>)
    67e0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    67e2:	b1bc      	cbz	r4, 6814 <bt_hci_le_per_adv_sync_established+0x170>
    67e4:	3c18      	subs	r4, #24
    67e6:	e015      	b.n	6814 <bt_hci_le_per_adv_sync_established+0x170>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    67e8:	6863      	ldr	r3, [r4, #4]
    67ea:	602b      	str	r3, [r5, #0]
    67ec:	8922      	ldrh	r2, [r4, #8]
    67ee:	7aa3      	ldrb	r3, [r4, #10]
    67f0:	80aa      	strh	r2, [r5, #4]
    67f2:	71ab      	strb	r3, [r5, #6]
		pending_per_adv_sync->sid = evt->sid;
    67f4:	78e3      	ldrb	r3, [r4, #3]
    67f6:	71eb      	strb	r3, [r5, #7]
		if (pending_per_adv_sync->addr.type == BT_ADDR_LE_PUBLIC_ID ||
    67f8:	782b      	ldrb	r3, [r5, #0]
    67fa:	3b02      	subs	r3, #2
    67fc:	b2db      	uxtb	r3, r3
    67fe:	2b01      	cmp	r3, #1
    6800:	d8de      	bhi.n	67c0 <bt_hci_le_per_adv_sync_established+0x11c>
			pending_per_adv_sync->addr.type -= BT_ADDR_LE_PUBLIC_ID;
    6802:	702b      	strb	r3, [r5, #0]
    6804:	e7dc      	b.n	67c0 <bt_hci_le_per_adv_sync_established+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6806:	f114 0f18 	cmn.w	r4, #24
    680a:	d08f      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
	return node->next;
    680c:	69a4      	ldr	r4, [r4, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    680e:	2c00      	cmp	r4, #0
    6810:	d08c      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
    6812:	3c18      	subs	r4, #24
    6814:	2c00      	cmp	r4, #0
    6816:	d089      	beq.n	672c <bt_hci_le_per_adv_sync_established+0x88>
		if (listener->synced) {
    6818:	6823      	ldr	r3, [r4, #0]
    681a:	2b00      	cmp	r3, #0
    681c:	d0f3      	beq.n	6806 <bt_hci_le_per_adv_sync_established+0x162>
			listener->synced(pending_per_adv_sync, &sync_info);
    681e:	a902      	add	r1, sp, #8
    6820:	4628      	mov	r0, r5
    6822:	4798      	blx	r3
    6824:	e7ef      	b.n	6806 <bt_hci_le_per_adv_sync_established+0x162>
    6826:	bf00      	nop
    6828:	20002330 	.word	0x20002330

0000682c <bt_hci_le_per_adv_sync_lost>:

void bt_hci_le_per_adv_sync_lost(struct net_buf *buf)
{
    682c:	b530      	push	{r4, r5, lr}
    682e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_per_adv_sync_lost *evt =
    6830:	6883      	ldr	r3, [r0, #8]
		(struct bt_hci_evt_le_per_adv_sync_lost *)buf->data;
	struct bt_le_per_adv_sync_term_info term_info;
	struct bt_le_per_adv_sync *per_adv_sync;
	struct bt_le_per_adv_sync_cb *listener;

	per_adv_sync = bt_hci_get_per_adv_sync(sys_le16_to_cpu(evt->handle));
    6832:	8818      	ldrh	r0, [r3, #0]
    6834:	f7ff fee2 	bl	65fc <bt_hci_get_per_adv_sync>

	if (!per_adv_sync) {
    6838:	b1f0      	cbz	r0, 6878 <bt_hci_le_per_adv_sync_lost+0x4c>
    683a:	4605      	mov	r5, r0
		BT_ERR("Unknown handle 0x%04Xfor periodic adv sync lost",
		       sys_le16_to_cpu(evt->handle));
		return;
	}

	term_info.addr = &per_adv_sync->addr;
    683c:	9000      	str	r0, [sp, #0]
	term_info.sid = per_adv_sync->sid;
    683e:	79c3      	ldrb	r3, [r0, #7]
    6840:	f88d 3004 	strb.w	r3, [sp, #4]
	/* There is no status in the per. adv. sync lost event */
	term_info.reason = BT_HCI_ERR_UNSPECIFIED;
    6844:	231f      	movs	r3, #31
    6846:	f88d 3005 	strb.w	r3, [sp, #5]

	/* Deleting before callback, so the caller will be able to restart
	 * sync in the callback
	 */
	per_adv_sync_delete(per_adv_sync);
    684a:	f013 facd 	bl	19de8 <per_adv_sync_delete>
	return list->head;
    684e:	4b0b      	ldr	r3, [pc, #44]	; (687c <bt_hci_le_per_adv_sync_lost+0x50>)
    6850:	681c      	ldr	r4, [r3, #0]


	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6852:	b13c      	cbz	r4, 6864 <bt_hci_le_per_adv_sync_lost+0x38>
    6854:	3c18      	subs	r4, #24
    6856:	e005      	b.n	6864 <bt_hci_le_per_adv_sync_lost+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6858:	f114 0318 	adds.w	r3, r4, #24
    685c:	d00a      	beq.n	6874 <bt_hci_le_per_adv_sync_lost+0x48>
	return node->next;
    685e:	69a4      	ldr	r4, [r4, #24]
    6860:	b154      	cbz	r4, 6878 <bt_hci_le_per_adv_sync_lost+0x4c>
    6862:	3c18      	subs	r4, #24
    6864:	b144      	cbz	r4, 6878 <bt_hci_le_per_adv_sync_lost+0x4c>
		if (listener->term) {
    6866:	6863      	ldr	r3, [r4, #4]
    6868:	2b00      	cmp	r3, #0
    686a:	d0f5      	beq.n	6858 <bt_hci_le_per_adv_sync_lost+0x2c>
			listener->term(per_adv_sync, &term_info);
    686c:	4669      	mov	r1, sp
    686e:	4628      	mov	r0, r5
    6870:	4798      	blx	r3
    6872:	e7f1      	b.n	6858 <bt_hci_le_per_adv_sync_lost+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6874:	461c      	mov	r4, r3
    6876:	e7f5      	b.n	6864 <bt_hci_le_per_adv_sync_lost+0x38>
		}
	}
}
    6878:	b003      	add	sp, #12
    687a:	bd30      	pop	{r4, r5, pc}
    687c:	20002330 	.word	0x20002330

00006880 <bt_hci_le_df_connectionless_iq_report>:
	}
}
#endif /* CONFIG_BT_ISO_BROADCAST */
#if defined(CONFIG_BT_DF_CONNECTIONLESS_CTE_RX)
void bt_hci_le_df_connectionless_iq_report(struct net_buf *buf)
{
    6880:	b510      	push	{r4, lr}
    6882:	b086      	sub	sp, #24

	struct bt_df_per_adv_sync_iq_samples_report cte_report;
	struct bt_le_per_adv_sync *per_adv_sync;
	struct bt_le_per_adv_sync_cb *listener;

	err = hci_df_prepare_connectionless_iq_report(buf, &cte_report, &per_adv_sync);
    6884:	aa01      	add	r2, sp, #4
    6886:	a902      	add	r1, sp, #8
    6888:	f013 fbd3 	bl	1a032 <hci_df_prepare_connectionless_iq_report>
	if (err) {
    688c:	b9a0      	cbnz	r0, 68b8 <bt_hci_le_df_connectionless_iq_report+0x38>
	return list->head;
    688e:	4b0b      	ldr	r3, [pc, #44]	; (68bc <bt_hci_le_df_connectionless_iq_report+0x3c>)
    6890:	681c      	ldr	r4, [r3, #0]
		BT_ERR("Prepare CTE conn IQ report failed %d", err);
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    6892:	b13c      	cbz	r4, 68a4 <bt_hci_le_df_connectionless_iq_report+0x24>
    6894:	3c18      	subs	r4, #24
    6896:	e005      	b.n	68a4 <bt_hci_le_df_connectionless_iq_report+0x24>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6898:	f114 0318 	adds.w	r3, r4, #24
    689c:	d00a      	beq.n	68b4 <bt_hci_le_df_connectionless_iq_report+0x34>
	return node->next;
    689e:	69a4      	ldr	r4, [r4, #24]
    68a0:	b154      	cbz	r4, 68b8 <bt_hci_le_df_connectionless_iq_report+0x38>
    68a2:	3c18      	subs	r4, #24
    68a4:	b144      	cbz	r4, 68b8 <bt_hci_le_df_connectionless_iq_report+0x38>
		if (listener->cte_report_cb) {
    68a6:	6963      	ldr	r3, [r4, #20]
    68a8:	2b00      	cmp	r3, #0
    68aa:	d0f5      	beq.n	6898 <bt_hci_le_df_connectionless_iq_report+0x18>
			listener->cte_report_cb(per_adv_sync, &cte_report);
    68ac:	a902      	add	r1, sp, #8
    68ae:	9801      	ldr	r0, [sp, #4]
    68b0:	4798      	blx	r3
    68b2:	e7f1      	b.n	6898 <bt_hci_le_df_connectionless_iq_report+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&pa_sync_cbs, listener, node) {
    68b4:	461c      	mov	r4, r3
    68b6:	e7f5      	b.n	68a4 <bt_hci_le_df_connectionless_iq_report+0x24>
		}
	}
}
    68b8:	b006      	add	sp, #24
    68ba:	bd10      	pop	{r4, pc}
    68bc:	20002330 	.word	0x20002330

000068c0 <bt_le_scan_start>:
    68c0:	f3bf 8f5b 	dmb	ish
    68c4:	4b53      	ldr	r3, [pc, #332]	; (6a14 <bt_le_scan_start+0x154>)
    68c6:	681b      	ldr	r3, [r3, #0]
    68c8:	f3bf 8f5b 	dmb	ish

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    68cc:	f013 0f04 	tst.w	r3, #4
    68d0:	f000 8093 	beq.w	69fa <bt_le_scan_start+0x13a>
{
    68d4:	b530      	push	{r4, r5, lr}
    68d6:	b085      	sub	sp, #20
    68d8:	4604      	mov	r4, r0
    68da:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
    68dc:	f013 fa04 	bl	19ce8 <valid_le_scan_param>
    68e0:	2800      	cmp	r0, #0
    68e2:	f000 808d 	beq.w	6a00 <bt_le_scan_start+0x140>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
    68e6:	7823      	ldrb	r3, [r4, #0]
    68e8:	b123      	cbz	r3, 68f4 <bt_le_scan_start+0x34>
    68ea:	f013 f9ce 	bl	19c8a <bt_id_scan_random_addr_check>
    68ee:	2800      	cmp	r0, #0
    68f0:	f000 8089 	beq.w	6a06 <bt_le_scan_start+0x146>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    68f4:	4b47      	ldr	r3, [pc, #284]	; (6a14 <bt_le_scan_start+0x154>)
    68f6:	f3bf 8f5b 	dmb	ish
    68fa:	e853 2f00 	ldrex	r2, [r3]
    68fe:	f042 0180 	orr.w	r1, r2, #128	; 0x80
    6902:	e843 1000 	strex	r0, r1, [r3]
    6906:	2800      	cmp	r0, #0
    6908:	d1f7      	bne.n	68fa <bt_le_scan_start+0x3a>
    690a:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    690e:	f012 0f80 	tst.w	r2, #128	; 0x80
    6912:	d17b      	bne.n	6a0c <bt_le_scan_start+0x14c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6914:	f3bf 8f5b 	dmb	ish
    6918:	681b      	ldr	r3, [r3, #0]
    691a:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    691e:	f013 0f40 	tst.w	r3, #64	; 0x40
    6922:	d003      	beq.n	692c <bt_le_scan_start+0x6c>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    6924:	2000      	movs	r0, #0
    6926:	f013 fa95 	bl	19e54 <bt_le_scan_set_enable>
		if (err) {
    692a:	b9f8      	cbnz	r0, 696c <bt_le_scan_start+0xac>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
    692c:	6863      	ldr	r3, [r4, #4]
	if (val) {
    692e:	f013 0f01 	tst.w	r3, #1
    6932:	d029      	beq.n	6988 <bt_le_scan_start+0xc8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6934:	4b37      	ldr	r3, [pc, #220]	; (6a14 <bt_le_scan_start+0x154>)
    6936:	f3bf 8f5b 	dmb	ish
    693a:	e853 2f00 	ldrex	r2, [r3]
    693e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    6942:	e843 2100 	strex	r1, r2, [r3]
    6946:	2900      	cmp	r1, #0
    6948:	d1f7      	bne.n	693a <bt_le_scan_start+0x7a>
    694a:	f3bf 8f5b 	dmb	ish
		struct bt_hci_ext_scan_phy param_coded;

		struct bt_hci_ext_scan_phy *phy_1m = NULL;
		struct bt_hci_ext_scan_phy *phy_coded = NULL;

		if (!(param->options & BT_LE_SCAN_OPT_NO_1M)) {
    694e:	6863      	ldr	r3, [r4, #4]
    6950:	f013 0f08 	tst.w	r3, #8
    6954:	d126      	bne.n	69a4 <bt_le_scan_start+0xe4>
			param_1m.type = param->type;
    6956:	7823      	ldrb	r3, [r4, #0]
    6958:	f88d 3000 	strb.w	r3, [sp]
			param_1m.interval = sys_cpu_to_le16(param->interval);
    695c:	8923      	ldrh	r3, [r4, #8]
    695e:	f8ad 3001 	strh.w	r3, [sp, #1]
			param_1m.window = sys_cpu_to_le16(param->window);
    6962:	8963      	ldrh	r3, [r4, #10]
    6964:	f8ad 3003 	strh.w	r3, [sp, #3]

			phy_1m = &param_1m;
    6968:	4668      	mov	r0, sp
    696a:	e01c      	b.n	69a6 <bt_le_scan_start+0xe6>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    696c:	4b29      	ldr	r3, [pc, #164]	; (6a14 <bt_le_scan_start+0x154>)
    696e:	f3bf 8f5b 	dmb	ish
    6972:	e853 2f00 	ldrex	r2, [r3]
    6976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    697a:	e843 2100 	strex	r1, r2, [r3]
    697e:	2900      	cmp	r1, #0
    6980:	d1f7      	bne.n	6972 <bt_le_scan_start+0xb2>
    6982:	f3bf 8f5b 	dmb	ish
			return err;
    6986:	e028      	b.n	69da <bt_le_scan_start+0x11a>
    6988:	4b22      	ldr	r3, [pc, #136]	; (6a14 <bt_le_scan_start+0x154>)
    698a:	f3bf 8f5b 	dmb	ish
    698e:	e853 2f00 	ldrex	r2, [r3]
    6992:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    6996:	e843 2100 	strex	r1, r2, [r3]
    699a:	2900      	cmp	r1, #0
    699c:	d1f7      	bne.n	698e <bt_le_scan_start+0xce>
    699e:	f3bf 8f5b 	dmb	ish
    69a2:	e7d4      	b.n	694e <bt_le_scan_start+0x8e>
		struct bt_hci_ext_scan_phy *phy_1m = NULL;
    69a4:	2000      	movs	r0, #0
		}

		if (param->options & BT_LE_SCAN_OPT_CODED) {
    69a6:	6863      	ldr	r3, [r4, #4]
    69a8:	f013 0f04 	tst.w	r3, #4
    69ac:	d00e      	beq.n	69cc <bt_le_scan_start+0x10c>
			uint16_t interval = param->interval_coded ?
    69ae:	89e2      	ldrh	r2, [r4, #14]
    69b0:	b902      	cbnz	r2, 69b4 <bt_le_scan_start+0xf4>
    69b2:	8922      	ldrh	r2, [r4, #8]
				param->interval_coded :
				param->interval;
			uint16_t window = param->window_coded ?
    69b4:	8a23      	ldrh	r3, [r4, #16]
    69b6:	b903      	cbnz	r3, 69ba <bt_le_scan_start+0xfa>
    69b8:	8963      	ldrh	r3, [r4, #10]
				param->window_coded :
				param->window;

			param_coded.type = param->type;
    69ba:	7821      	ldrb	r1, [r4, #0]
    69bc:	f88d 1008 	strb.w	r1, [sp, #8]
			param_coded.interval = sys_cpu_to_le16(interval);
    69c0:	f8ad 2009 	strh.w	r2, [sp, #9]
			param_coded.window = sys_cpu_to_le16(window);
    69c4:	f8ad 300b 	strh.w	r3, [sp, #11]
			phy_coded = &param_coded;
    69c8:	a902      	add	r1, sp, #8
    69ca:	e000      	b.n	69ce <bt_le_scan_start+0x10e>
		struct bt_hci_ext_scan_phy *phy_coded = NULL;
    69cc:	2100      	movs	r1, #0
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
    69ce:	89a2      	ldrh	r2, [r4, #12]
    69d0:	f7ff fb6c 	bl	60ac <start_le_scan_ext>

		err = start_le_scan_legacy(param->type, param->interval,
					   param->window);
	}

	if (err) {
    69d4:	b918      	cbnz	r0, 69de <bt_le_scan_start+0x11e>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
    69d6:	4b10      	ldr	r3, [pc, #64]	; (6a18 <bt_le_scan_start+0x158>)
    69d8:	601d      	str	r5, [r3, #0]

	return 0;
}
    69da:	b005      	add	sp, #20
    69dc:	bd30      	pop	{r4, r5, pc}
    69de:	4b0d      	ldr	r3, [pc, #52]	; (6a14 <bt_le_scan_start+0x154>)
    69e0:	f3bf 8f5b 	dmb	ish
    69e4:	e853 2f00 	ldrex	r2, [r3]
    69e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    69ec:	e843 2100 	strex	r1, r2, [r3]
    69f0:	2900      	cmp	r1, #0
    69f2:	d1f7      	bne.n	69e4 <bt_le_scan_start+0x124>
    69f4:	f3bf 8f5b 	dmb	ish
		return err;
    69f8:	e7ef      	b.n	69da <bt_le_scan_start+0x11a>
		return -EAGAIN;
    69fa:	f06f 000a 	mvn.w	r0, #10
}
    69fe:	4770      	bx	lr
		return -EINVAL;
    6a00:	f06f 0015 	mvn.w	r0, #21
    6a04:	e7e9      	b.n	69da <bt_le_scan_start+0x11a>
		return -EINVAL;
    6a06:	f06f 0015 	mvn.w	r0, #21
    6a0a:	e7e6      	b.n	69da <bt_le_scan_start+0x11a>
		return -EALREADY;
    6a0c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6a10:	e7e3      	b.n	69da <bt_le_scan_start+0x11a>
    6a12:	bf00      	nop
    6a14:	20000088 	.word	0x20000088
    6a18:	20002364 	.word	0x20002364

00006a1c <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
    6a1c:	b508      	push	{r3, lr}
    6a1e:	4b1b      	ldr	r3, [pc, #108]	; (6a8c <bt_le_scan_stop+0x70>)
    6a20:	f3bf 8f5b 	dmb	ish
    6a24:	e853 2f00 	ldrex	r2, [r3]
    6a28:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    6a2c:	e843 1000 	strex	r0, r1, [r3]
    6a30:	2800      	cmp	r0, #0
    6a32:	d1f7      	bne.n	6a24 <bt_le_scan_stop+0x8>
    6a34:	f3bf 8f5b 	dmb	ish
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    6a38:	f012 0f80 	tst.w	r2, #128	; 0x80
    6a3c:	d022      	beq.n	6a84 <bt_le_scan_stop+0x68>
		return -EALREADY;
	}

	bt_scan_reset();
    6a3e:	f7ff fcbb 	bl	63b8 <bt_scan_reset>
    6a42:	4b12      	ldr	r3, [pc, #72]	; (6a8c <bt_le_scan_stop+0x70>)
    6a44:	f3bf 8f5b 	dmb	ish
    6a48:	e853 2f00 	ldrex	r2, [r3]
    6a4c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
    6a50:	e843 1000 	strex	r0, r1, [r3]
    6a54:	2800      	cmp	r0, #0
    6a56:	d1f7      	bne.n	6a48 <bt_le_scan_stop+0x2c>
    6a58:	f3bf 8f5b 	dmb	ish

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
    6a5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6a60:	d103      	bne.n	6a6a <bt_le_scan_stop+0x4e>
#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
    6a62:	2000      	movs	r0, #0
    6a64:	f7ff fcb2 	bl	63cc <bt_le_scan_update>
}
    6a68:	bd08      	pop	{r3, pc}
    6a6a:	f3bf 8f5b 	dmb	ish
    6a6e:	e853 2f00 	ldrex	r2, [r3]
    6a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    6a76:	e843 2100 	strex	r1, r2, [r3]
    6a7a:	2900      	cmp	r1, #0
    6a7c:	d1f7      	bne.n	6a6e <bt_le_scan_stop+0x52>
    6a7e:	f3bf 8f5b 	dmb	ish
}
    6a82:	e7ee      	b.n	6a62 <bt_le_scan_stop+0x46>
		return -EALREADY;
    6a84:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6a88:	e7ee      	b.n	6a68 <bt_le_scan_stop+0x4c>
    6a8a:	bf00      	nop
    6a8c:	20000088 	.word	0x20000088

00006a90 <bt_le_scan_cb_register>:

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
    6a90:	f100 0308 	add.w	r3, r0, #8
	parent->next = child;
    6a94:	2200      	movs	r2, #0
    6a96:	6082      	str	r2, [r0, #8]
	return list->tail;
    6a98:	4a05      	ldr	r2, [pc, #20]	; (6ab0 <bt_le_scan_cb_register+0x20>)
    6a9a:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6a9c:	b11a      	cbz	r2, 6aa6 <bt_le_scan_cb_register+0x16>
	parent->next = child;
    6a9e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6aa0:	4a03      	ldr	r2, [pc, #12]	; (6ab0 <bt_le_scan_cb_register+0x20>)
    6aa2:	6053      	str	r3, [r2, #4]
}
    6aa4:	4770      	bx	lr
    6aa6:	4a02      	ldr	r2, [pc, #8]	; (6ab0 <bt_le_scan_cb_register+0x20>)
    6aa8:	6053      	str	r3, [r2, #4]
	list->head = node;
    6aaa:	6013      	str	r3, [r2, #0]
}
    6aac:	4770      	bx	lr
    6aae:	bf00      	nop
    6ab0:	2000235c 	.word	0x2000235c

00006ab4 <bt_le_per_adv_sync_delete>:

	return 0;
}

int bt_le_per_adv_sync_delete(struct bt_le_per_adv_sync *per_adv_sync)
{
    6ab4:	b538      	push	{r3, r4, r5, lr}
	int err = 0;

	if (!BT_FEAT_LE_EXT_PER_ADV(bt_dev.le.features)) {
    6ab6:	4b13      	ldr	r3, [pc, #76]	; (6b04 <bt_le_per_adv_sync_delete+0x50>)
    6ab8:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    6abc:	f013 0f20 	tst.w	r3, #32
    6ac0:	d01c      	beq.n	6afc <bt_le_per_adv_sync_delete+0x48>
    6ac2:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ac4:	f3bf 8f5b 	dmb	ish
    6ac8:	6943      	ldr	r3, [r0, #20]
    6aca:	f3bf 8f5b 	dmb	ish
		return -ENOTSUP;
	}

	if (atomic_test_bit(per_adv_sync->flags, BT_PER_ADV_SYNC_SYNCED)) {
    6ace:	f013 0f02 	tst.w	r3, #2
    6ad2:	d007      	beq.n	6ae4 <bt_le_per_adv_sync_delete+0x30>
		err = bt_le_per_adv_sync_terminate(per_adv_sync);
    6ad4:	f013 f9ae 	bl	19e34 <bt_le_per_adv_sync_terminate>

		if (!err) {
    6ad8:	4605      	mov	r5, r0
    6ada:	b940      	cbnz	r0, 6aee <bt_le_per_adv_sync_delete+0x3a>
			per_adv_sync_delete(per_adv_sync);
    6adc:	4620      	mov	r0, r4
    6ade:	f013 f983 	bl	19de8 <per_adv_sync_delete>
    6ae2:	e004      	b.n	6aee <bt_le_per_adv_sync_delete+0x3a>
		}
	} else if (get_pending_per_adv_sync() == per_adv_sync) {
    6ae4:	f7ff fb72 	bl	61cc <get_pending_per_adv_sync>
    6ae8:	4284      	cmp	r4, r0
    6aea:	d002      	beq.n	6af2 <bt_le_per_adv_sync_delete+0x3e>
	int err = 0;
    6aec:	2500      	movs	r5, #0
		 * handler when cancelling.
		 */
	}

	return err;
}
    6aee:	4628      	mov	r0, r5
    6af0:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_le_per_adv_sync_create_cancel(per_adv_sync);
    6af2:	4620      	mov	r0, r4
    6af4:	f013 f985 	bl	19e02 <bt_le_per_adv_sync_create_cancel>
    6af8:	4605      	mov	r5, r0
    6afa:	e7f8      	b.n	6aee <bt_le_per_adv_sync_delete+0x3a>
		return -ENOTSUP;
    6afc:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6b00:	e7f5      	b.n	6aee <bt_le_per_adv_sync_delete+0x3a>
    6b02:	bf00      	nop
    6b04:	20000000 	.word	0x20000000

00006b08 <bt_le_per_adv_sync_create>:
{
    6b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!BT_FEAT_LE_EXT_PER_ADV(bt_dev.le.features)) {
    6b0c:	4b77      	ldr	r3, [pc, #476]	; (6cec <bt_le_per_adv_sync_create+0x1e4>)
    6b0e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
    6b12:	f013 0f20 	tst.w	r3, #32
    6b16:	f000 80d4 	beq.w	6cc2 <bt_le_per_adv_sync_create+0x1ba>
    6b1a:	4604      	mov	r4, r0
    6b1c:	460e      	mov	r6, r1
	if (get_pending_per_adv_sync()) {
    6b1e:	f7ff fb55 	bl	61cc <get_pending_per_adv_sync>
    6b22:	2800      	cmp	r0, #0
    6b24:	f040 80d0 	bne.w	6cc8 <bt_le_per_adv_sync_create+0x1c0>
	if (param->sid > BT_GAP_SID_MAX ||
    6b28:	79e3      	ldrb	r3, [r4, #7]
    6b2a:	2b0f      	cmp	r3, #15
    6b2c:	f200 80cf 	bhi.w	6cce <bt_le_per_adv_sync_create+0x1c6>
		   param->skip > BT_GAP_PER_ADV_MAX_SKIP ||
    6b30:	89a3      	ldrh	r3, [r4, #12]
	if (param->sid > BT_GAP_SID_MAX ||
    6b32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6b36:	f080 80cd 	bcs.w	6cd4 <bt_le_per_adv_sync_create+0x1cc>
		   param->timeout > BT_GAP_PER_ADV_MAX_TIMEOUT ||
    6b3a:	89e3      	ldrh	r3, [r4, #14]
		   param->skip > BT_GAP_PER_ADV_MAX_SKIP ||
    6b3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6b40:	f200 80cb 	bhi.w	6cda <bt_le_per_adv_sync_create+0x1d2>
		   param->timeout > BT_GAP_PER_ADV_MAX_TIMEOUT ||
    6b44:	2b09      	cmp	r3, #9
    6b46:	f240 80cb 	bls.w	6ce0 <bt_le_per_adv_sync_create+0x1d8>
	per_adv_sync = per_adv_sync_new();
    6b4a:	f7ff fb5b 	bl	6204 <per_adv_sync_new>
	if (!per_adv_sync) {
    6b4e:	4605      	mov	r5, r0
    6b50:	2800      	cmp	r0, #0
    6b52:	f000 80c8 	beq.w	6ce6 <bt_le_per_adv_sync_create+0x1de>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_PER_ADV_CREATE_SYNC, sizeof(*cp));
    6b56:	210e      	movs	r1, #14
    6b58:	f242 0044 	movw	r0, #8260	; 0x2044
    6b5c:	f7fe fd18 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
    6b60:	4607      	mov	r7, r0
    6b62:	2800      	cmp	r0, #0
    6b64:	f000 8094 	beq.w	6c90 <bt_le_per_adv_sync_create+0x188>
	return net_buf_simple_add(&buf->b, len);
    6b68:	210e      	movs	r1, #14
    6b6a:	3008      	adds	r0, #8
    6b6c:	f016 f93c 	bl	1cde8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    6b70:	2300      	movs	r3, #0
    6b72:	6003      	str	r3, [r0, #0]
    6b74:	6043      	str	r3, [r0, #4]
    6b76:	6083      	str	r3, [r0, #8]
    6b78:	8183      	strh	r3, [r0, #12]
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_USE_PER_ADV_LIST) {
    6b7a:	68a3      	ldr	r3, [r4, #8]
    6b7c:	f013 0f01 	tst.w	r3, #1
    6b80:	f000 808c 	beq.w	6c9c <bt_le_per_adv_sync_create+0x194>
		atomic_set_bit(per_adv_sync->flags,
    6b84:	f105 0314 	add.w	r3, r5, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b88:	f3bf 8f5b 	dmb	ish
    6b8c:	e853 2f00 	ldrex	r2, [r3]
    6b90:	f042 0208 	orr.w	r2, r2, #8
    6b94:	e843 2100 	strex	r1, r2, [r3]
    6b98:	2900      	cmp	r1, #0
    6b9a:	d1f7      	bne.n	6b8c <bt_le_per_adv_sync_create+0x84>
    6b9c:	f3bf 8f5b 	dmb	ish
		cp->options |= BT_HCI_LE_PER_ADV_CREATE_SYNC_FP_USE_LIST;
    6ba0:	7803      	ldrb	r3, [r0, #0]
    6ba2:	f043 0301 	orr.w	r3, r3, #1
    6ba6:	7003      	strb	r3, [r0, #0]
	if (param->options &
    6ba8:	68a3      	ldr	r3, [r4, #8]
    6baa:	f013 0f02 	tst.w	r3, #2
    6bae:	d011      	beq.n	6bd4 <bt_le_per_adv_sync_create+0xcc>
		cp->options |=
    6bb0:	7803      	ldrb	r3, [r0, #0]
    6bb2:	f043 0302 	orr.w	r3, r3, #2
    6bb6:	7003      	strb	r3, [r0, #0]
		atomic_set_bit(per_adv_sync->flags,
    6bb8:	f105 0314 	add.w	r3, r5, #20
    6bbc:	f3bf 8f5b 	dmb	ish
    6bc0:	e853 2f00 	ldrex	r2, [r3]
    6bc4:	f042 0210 	orr.w	r2, r2, #16
    6bc8:	e843 2100 	strex	r1, r2, [r3]
    6bcc:	2900      	cmp	r1, #0
    6bce:	d1f7      	bne.n	6bc0 <bt_le_per_adv_sync_create+0xb8>
    6bd0:	f3bf 8f5b 	dmb	ish
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_FILTER_DUPLICATE) {
    6bd4:	68a3      	ldr	r3, [r4, #8]
    6bd6:	f013 0f04 	tst.w	r3, #4
    6bda:	d003      	beq.n	6be4 <bt_le_per_adv_sync_create+0xdc>
		cp->options |=
    6bdc:	7803      	ldrb	r3, [r0, #0]
    6bde:	f043 0304 	orr.w	r3, r3, #4
    6be2:	7003      	strb	r3, [r0, #0]
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOA) {
    6be4:	68a3      	ldr	r3, [r4, #8]
    6be6:	f013 0f08 	tst.w	r3, #8
    6bea:	d003      	beq.n	6bf4 <bt_le_per_adv_sync_create+0xec>
		cp->cte_type |= BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_NO_AOA;
    6bec:	7b43      	ldrb	r3, [r0, #13]
    6bee:	f043 0301 	orr.w	r3, r3, #1
    6bf2:	7343      	strb	r3, [r0, #13]
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOD_1US) {
    6bf4:	68a3      	ldr	r3, [r4, #8]
    6bf6:	f013 0f10 	tst.w	r3, #16
    6bfa:	d003      	beq.n	6c04 <bt_le_per_adv_sync_create+0xfc>
		cp->cte_type |=
    6bfc:	7b43      	ldrb	r3, [r0, #13]
    6bfe:	f043 0302 	orr.w	r3, r3, #2
    6c02:	7343      	strb	r3, [r0, #13]
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_DONT_SYNC_AOD_2US) {
    6c04:	68a3      	ldr	r3, [r4, #8]
    6c06:	f013 0f20 	tst.w	r3, #32
    6c0a:	d003      	beq.n	6c14 <bt_le_per_adv_sync_create+0x10c>
		cp->cte_type |=
    6c0c:	7b43      	ldrb	r3, [r0, #13]
    6c0e:	f043 0304 	orr.w	r3, r3, #4
    6c12:	7343      	strb	r3, [r0, #13]
	if (param->options & BT_LE_PER_ADV_SYNC_OPT_SYNC_ONLY_CONST_TONE_EXT) {
    6c14:	68a3      	ldr	r3, [r4, #8]
    6c16:	f013 0f40 	tst.w	r3, #64	; 0x40
    6c1a:	d003      	beq.n	6c24 <bt_le_per_adv_sync_create+0x11c>
		cp->cte_type |= BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_ONLY_CTE;
    6c1c:	7b43      	ldrb	r3, [r0, #13]
    6c1e:	f043 0310 	orr.w	r3, r3, #16
    6c22:	7343      	strb	r3, [r0, #13]
	cp->skip = sys_cpu_to_le16(param->skip);
    6c24:	89a3      	ldrh	r3, [r4, #12]
    6c26:	f8a0 3009 	strh.w	r3, [r0, #9]
	cp->sync_timeout = sys_cpu_to_le16(param->timeout);
    6c2a:	89e3      	ldrh	r3, [r4, #14]
    6c2c:	f8a0 300b 	strh.w	r3, [r0, #11]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_PER_ADV_CREATE_SYNC, buf, NULL);
    6c30:	2200      	movs	r2, #0
    6c32:	4639      	mov	r1, r7
    6c34:	f242 0044 	movw	r0, #8260	; 0x2044
    6c38:	f7fe fce8 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
    6c3c:	4607      	mov	r7, r0
    6c3e:	bbb8      	cbnz	r0, 6cb0 <bt_le_per_adv_sync_create+0x1a8>
	atomic_set_bit(per_adv_sync->flags, BT_PER_ADV_SYNC_SYNCING);
    6c40:	f105 0314 	add.w	r3, r5, #20
    6c44:	f3bf 8f5b 	dmb	ish
    6c48:	e853 2f00 	ldrex	r2, [r3]
    6c4c:	f042 0204 	orr.w	r2, r2, #4
    6c50:	e843 2100 	strex	r1, r2, [r3]
    6c54:	2900      	cmp	r1, #0
    6c56:	d1f7      	bne.n	6c48 <bt_le_per_adv_sync_create+0x140>
    6c58:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c5c:	f3bf 8f5b 	dmb	ish
    6c60:	4b23      	ldr	r3, [pc, #140]	; (6cf0 <bt_le_per_adv_sync_create+0x1e8>)
    6c62:	681b      	ldr	r3, [r3, #0]
    6c64:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    6c68:	f013 0f40 	tst.w	r3, #64	; 0x40
    6c6c:	d104      	bne.n	6c78 <bt_le_per_adv_sync_create+0x170>
		err = bt_le_scan_update(true);
    6c6e:	2001      	movs	r0, #1
    6c70:	f7ff fbac 	bl	63cc <bt_le_scan_update>
		if (err) {
    6c74:	4680      	mov	r8, r0
    6c76:	b9f8      	cbnz	r0, 6cb8 <bt_le_per_adv_sync_create+0x1b0>
	*out_sync = per_adv_sync;
    6c78:	6035      	str	r5, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6c7a:	6823      	ldr	r3, [r4, #0]
    6c7c:	602b      	str	r3, [r5, #0]
    6c7e:	88a2      	ldrh	r2, [r4, #4]
    6c80:	79a3      	ldrb	r3, [r4, #6]
    6c82:	80aa      	strh	r2, [r5, #4]
    6c84:	71ab      	strb	r3, [r5, #6]
	per_adv_sync->sid = param->sid;
    6c86:	79e3      	ldrb	r3, [r4, #7]
    6c88:	71eb      	strb	r3, [r5, #7]
}
    6c8a:	4638      	mov	r0, r7
    6c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		per_adv_sync_delete(per_adv_sync);
    6c90:	4628      	mov	r0, r5
    6c92:	f013 f8a9 	bl	19de8 <per_adv_sync_delete>
		return -ENOBUFS;
    6c96:	f06f 0768 	mvn.w	r7, #104	; 0x68
    6c9a:	e7f6      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
    6c9c:	6823      	ldr	r3, [r4, #0]
    6c9e:	f8c0 3002 	str.w	r3, [r0, #2]
    6ca2:	88a2      	ldrh	r2, [r4, #4]
    6ca4:	79a3      	ldrb	r3, [r4, #6]
    6ca6:	80c2      	strh	r2, [r0, #6]
    6ca8:	7203      	strb	r3, [r0, #8]
		cp->sid = param->sid;
    6caa:	79e3      	ldrb	r3, [r4, #7]
    6cac:	7043      	strb	r3, [r0, #1]
    6cae:	e77b      	b.n	6ba8 <bt_le_per_adv_sync_create+0xa0>
		per_adv_sync_delete(per_adv_sync);
    6cb0:	4628      	mov	r0, r5
    6cb2:	f013 f899 	bl	19de8 <per_adv_sync_delete>
		return err;
    6cb6:	e7e8      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
			bt_le_per_adv_sync_delete(per_adv_sync);
    6cb8:	4628      	mov	r0, r5
    6cba:	f7ff fefb 	bl	6ab4 <bt_le_per_adv_sync_delete>
			return err;
    6cbe:	4647      	mov	r7, r8
    6cc0:	e7e3      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
		return -ENOTSUP;
    6cc2:	f06f 0785 	mvn.w	r7, #133	; 0x85
    6cc6:	e7e0      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
		return -EBUSY;
    6cc8:	f06f 070f 	mvn.w	r7, #15
    6ccc:	e7dd      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
		return -EINVAL;
    6cce:	f06f 0715 	mvn.w	r7, #21
    6cd2:	e7da      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
    6cd4:	f06f 0715 	mvn.w	r7, #21
    6cd8:	e7d7      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
    6cda:	f06f 0715 	mvn.w	r7, #21
    6cde:	e7d4      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
    6ce0:	f06f 0715 	mvn.w	r7, #21
    6ce4:	e7d1      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
		return -ENOMEM;
    6ce6:	f06f 070b 	mvn.w	r7, #11
    6cea:	e7ce      	b.n	6c8a <bt_le_per_adv_sync_create+0x182>
    6cec:	20000000 	.word	0x20000000
    6cf0:	20000088 	.word	0x20000088

00006cf4 <bt_le_per_adv_sync_cb_register>:

void bt_le_per_adv_sync_cb_register(struct bt_le_per_adv_sync_cb *cb)
{
	sys_slist_append(&pa_sync_cbs, &cb->node);
    6cf4:	f100 0318 	add.w	r3, r0, #24
	parent->next = child;
    6cf8:	2200      	movs	r2, #0
    6cfa:	6182      	str	r2, [r0, #24]
	return list->tail;
    6cfc:	4a05      	ldr	r2, [pc, #20]	; (6d14 <bt_le_per_adv_sync_cb_register+0x20>)
    6cfe:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
    6d00:	b11a      	cbz	r2, 6d0a <bt_le_per_adv_sync_cb_register+0x16>
	parent->next = child;
    6d02:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6d04:	4a03      	ldr	r2, [pc, #12]	; (6d14 <bt_le_per_adv_sync_cb_register+0x20>)
    6d06:	6053      	str	r3, [r2, #4]
}
    6d08:	4770      	bx	lr
    6d0a:	4a02      	ldr	r2, [pc, #8]	; (6d14 <bt_le_per_adv_sync_cb_register+0x20>)
    6d0c:	6053      	str	r3, [r2, #4]
	list->head = node;
    6d0e:	6013      	str	r3, [r2, #0]
}
    6d10:	4770      	bx	lr
    6d12:	bf00      	nop
    6d14:	20002330 	.word	0x20002330

00006d18 <valid_cte_rx_common_params>:

#if defined(CONFIG_BT_DF_CONNECTIONLESS_CTE_RX) || defined(CONFIG_BT_DF_CONNECTION_CTE_RX)
static bool valid_cte_rx_common_params(uint8_t cte_types, uint8_t slot_durations,
				       uint8_t num_ant_ids, const uint8_t *ant_ids)
{
	if (!(cte_types & BT_DF_CTE_TYPE_ALL)) {
    6d18:	f010 0f07 	tst.w	r0, #7
    6d1c:	d01e      	beq.n	6d5c <valid_cte_rx_common_params+0x44>
		return false;
	}

	if (cte_types & BT_DF_CTE_TYPE_AOA) {
    6d1e:	f010 0f01 	tst.w	r0, #1
    6d22:	d01d      	beq.n	6d60 <valid_cte_rx_common_params+0x48>
		if (df_ant_info.num_ant < DF_SAMPLING_ANTENNA_NUMBER_MIN ||
    6d24:	4816      	ldr	r0, [pc, #88]	; (6d80 <valid_cte_rx_common_params+0x68>)
    6d26:	7840      	ldrb	r0, [r0, #1]
    6d28:	2801      	cmp	r0, #1
    6d2a:	d91b      	bls.n	6d64 <valid_cte_rx_common_params+0x4c>
		    !BT_FEAT_LE_ANT_SWITCH_RX_AOA(bt_dev.le.features)) {
    6d2c:	4815      	ldr	r0, [pc, #84]	; (6d84 <valid_cte_rx_common_params+0x6c>)
    6d2e:	f890 0092 	ldrb.w	r0, [r0, #146]	; 0x92
		if (df_ant_info.num_ant < DF_SAMPLING_ANTENNA_NUMBER_MIN ||
    6d32:	f010 0f40 	tst.w	r0, #64	; 0x40
    6d36:	d017      	beq.n	6d68 <valid_cte_rx_common_params+0x50>
			return false;
		}

		if (!(slot_durations == BT_HCI_LE_ANTENNA_SWITCHING_SLOT_2US ||
    6d38:	2902      	cmp	r1, #2
    6d3a:	d006      	beq.n	6d4a <valid_cte_rx_common_params+0x32>
    6d3c:	2901      	cmp	r1, #1
    6d3e:	d115      	bne.n	6d6c <valid_cte_rx_common_params+0x54>
		      (slot_durations == BT_HCI_LE_ANTENNA_SWITCHING_SLOT_1US &&
		       DF_AOA_RX_1US_SUPPORT(df_ant_info.switch_sample_rates)))) {
    6d40:	490f      	ldr	r1, [pc, #60]	; (6d80 <valid_cte_rx_common_params+0x68>)
    6d42:	7809      	ldrb	r1, [r1, #0]
		      (slot_durations == BT_HCI_LE_ANTENNA_SWITCHING_SLOT_1US &&
    6d44:	f011 0f04 	tst.w	r1, #4
    6d48:	d012      	beq.n	6d70 <valid_cte_rx_common_params+0x58>
			return false;
		}

		if (num_ant_ids < BT_HCI_LE_SWITCH_PATTERN_LEN_MIN ||
    6d4a:	2a01      	cmp	r2, #1
    6d4c:	d912      	bls.n	6d74 <valid_cte_rx_common_params+0x5c>
		    num_ant_ids > df_ant_info.max_switch_pattern_len || !ant_ids) {
    6d4e:	490c      	ldr	r1, [pc, #48]	; (6d80 <valid_cte_rx_common_params+0x68>)
    6d50:	7889      	ldrb	r1, [r1, #2]
		if (num_ant_ids < BT_HCI_LE_SWITCH_PATTERN_LEN_MIN ||
    6d52:	4291      	cmp	r1, r2
    6d54:	d310      	bcc.n	6d78 <valid_cte_rx_common_params+0x60>
		    num_ant_ids > df_ant_info.max_switch_pattern_len || !ant_ids) {
    6d56:	b18b      	cbz	r3, 6d7c <valid_cte_rx_common_params+0x64>
			return false;
		}
	}

	return true;
    6d58:	2001      	movs	r0, #1
    6d5a:	4770      	bx	lr
		return false;
    6d5c:	2000      	movs	r0, #0
    6d5e:	4770      	bx	lr
	return true;
    6d60:	2001      	movs	r0, #1
    6d62:	4770      	bx	lr
			return false;
    6d64:	2000      	movs	r0, #0
    6d66:	4770      	bx	lr
    6d68:	2000      	movs	r0, #0
    6d6a:	4770      	bx	lr
			return false;
    6d6c:	2000      	movs	r0, #0
    6d6e:	4770      	bx	lr
    6d70:	2000      	movs	r0, #0
    6d72:	4770      	bx	lr
			return false;
    6d74:	2000      	movs	r0, #0
    6d76:	4770      	bx	lr
    6d78:	2000      	movs	r0, #0
    6d7a:	4770      	bx	lr
    6d7c:	2000      	movs	r0, #0
}
    6d7e:	4770      	bx	lr
    6d80:	20002368 	.word	0x20002368
    6d84:	20000000 	.word	0x20000000

00006d88 <prepare_cl_cte_rx_enable_cmd_params>:

static int
prepare_cl_cte_rx_enable_cmd_params(struct net_buf **buf, struct bt_le_per_adv_sync *sync,
				    const struct bt_df_per_adv_sync_cte_rx_param *params,
				    bool enable)
{
    6d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d8c:	4607      	mov	r7, r0
    6d8e:	4688      	mov	r8, r1
    6d90:	4615      	mov	r5, r2
    6d92:	461e      	mov	r6, r3
	struct bt_hci_cp_le_set_cl_cte_sampling_enable *cp;
	uint8_t switch_pattern_len;

	if (params->cte_types & BT_DF_CTE_TYPE_AOA) {
    6d94:	7813      	ldrb	r3, [r2, #0]
    6d96:	f013 0f01 	tst.w	r3, #1
    6d9a:	d02e      	beq.n	6dfa <prepare_cl_cte_rx_enable_cmd_params+0x72>
		switch_pattern_len = params->num_ant_ids;
    6d9c:	f892 9003 	ldrb.w	r9, [r2, #3]
	}

	/* If CTE Rx is enabled, command parameters total length must include
	 * antenna ids, so command size if extended by num_and_ids.
	 */
	*buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_CL_CTE_SAMPLING_ENABLE,
    6da0:	b376      	cbz	r6, 6e00 <prepare_cl_cte_rx_enable_cmd_params+0x78>
    6da2:	f109 0106 	add.w	r1, r9, #6
    6da6:	b2c9      	uxtb	r1, r1
    6da8:	f242 0053 	movw	r0, #8275	; 0x2053
    6dac:	f7fe fbf0 	bl	5590 <bt_hci_cmd_create>
    6db0:	6038      	str	r0, [r7, #0]
				 (sizeof(struct bt_hci_cp_le_set_cl_cte_sampling_enable) +
				 (enable ? switch_pattern_len : 0)));
	if (!(*buf)) {
    6db2:	b358      	cbz	r0, 6e0c <prepare_cl_cte_rx_enable_cmd_params+0x84>
    6db4:	2106      	movs	r1, #6
    6db6:	3008      	adds	r0, #8
    6db8:	f016 f816 	bl	1cde8 <net_buf_simple_add>
    6dbc:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    6dbe:	2300      	movs	r3, #0
    6dc0:	6003      	str	r3, [r0, #0]
    6dc2:	8083      	strh	r3, [r0, #4]
	}

	cp = net_buf_add(*buf, sizeof(*cp));
	(void)memset(cp, 0, sizeof(*cp));

	cp->sync_handle = sys_cpu_to_le16(sync->handle);
    6dc4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
    6dc8:	8003      	strh	r3, [r0, #0]
	cp->sampling_enable = enable ? 1 : 0;
    6dca:	7086      	strb	r6, [r0, #2]

	if (enable) {
    6dcc:	b30e      	cbz	r6, 6e12 <prepare_cl_cte_rx_enable_cmd_params+0x8a>
		const uint8_t *ant_ids;
		uint8_t *dest_ant_ids;

		cp->max_sampled_cte = params->max_cte_count;
    6dce:	78ab      	ldrb	r3, [r5, #2]
    6dd0:	7103      	strb	r3, [r0, #4]

		if (params->cte_types & BT_DF_CTE_TYPE_AOA) {
    6dd2:	782b      	ldrb	r3, [r5, #0]
    6dd4:	f013 0f01 	tst.w	r3, #1
    6dd8:	d014      	beq.n	6e04 <prepare_cl_cte_rx_enable_cmd_params+0x7c>
			cp->slot_durations = params->slot_durations;
    6dda:	786b      	ldrb	r3, [r5, #1]
    6ddc:	70c3      	strb	r3, [r0, #3]
			ant_ids = params->ant_ids;
    6dde:	686e      	ldr	r6, [r5, #4]
			 */
			cp->slot_durations = BT_HCI_LE_ANTENNA_SWITCHING_SLOT_2US;
			ant_ids = &df_dummy_switch_pattern[0];
		}

		cp->switch_pattern_len = switch_pattern_len;
    6de0:	f884 9005 	strb.w	r9, [r4, #5]
		dest_ant_ids = net_buf_add(*buf, params->num_ant_ids);
    6de4:	6838      	ldr	r0, [r7, #0]
    6de6:	78e9      	ldrb	r1, [r5, #3]
    6de8:	3008      	adds	r0, #8
    6dea:	f015 fffd 	bl	1cde8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6dee:	7962      	ldrb	r2, [r4, #5]
    6df0:	4631      	mov	r1, r6
    6df2:	f7fa fa83 	bl	12fc <memcpy>
		memcpy(dest_ant_ids, ant_ids, cp->switch_pattern_len);
	}

	return 0;
    6df6:	2000      	movs	r0, #0
    6df8:	e00c      	b.n	6e14 <prepare_cl_cte_rx_enable_cmd_params+0x8c>
		switch_pattern_len = ARRAY_SIZE(df_dummy_switch_pattern);
    6dfa:	f04f 0902 	mov.w	r9, #2
    6dfe:	e7cf      	b.n	6da0 <prepare_cl_cte_rx_enable_cmd_params+0x18>
	*buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_CL_CTE_SAMPLING_ENABLE,
    6e00:	2106      	movs	r1, #6
    6e02:	e7d1      	b.n	6da8 <prepare_cl_cte_rx_enable_cmd_params+0x20>
			cp->slot_durations = BT_HCI_LE_ANTENNA_SWITCHING_SLOT_2US;
    6e04:	2302      	movs	r3, #2
    6e06:	70c3      	strb	r3, [r0, #3]
			ant_ids = &df_dummy_switch_pattern[0];
    6e08:	4e03      	ldr	r6, [pc, #12]	; (6e18 <prepare_cl_cte_rx_enable_cmd_params+0x90>)
    6e0a:	e7e9      	b.n	6de0 <prepare_cl_cte_rx_enable_cmd_params+0x58>
		return -ENOBUFS;
    6e0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6e10:	e000      	b.n	6e14 <prepare_cl_cte_rx_enable_cmd_params+0x8c>
	return 0;
    6e12:	2000      	movs	r0, #0
}
    6e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e18:	0001ea54 	.word	0x0001ea54

00006e1c <bt_df_set_per_adv_sync_cte_rx_enable>:

#if defined(CONFIG_BT_DF_CONNECTIONLESS_CTE_RX)
static int
bt_df_set_per_adv_sync_cte_rx_enable(struct bt_le_per_adv_sync *sync, bool enable,
				     const struct bt_df_per_adv_sync_cte_rx_param *params)
{
    6e1c:	b508      	push	{r3, lr}
	if (!BT_FEAT_LE_CONNECTIONLESS_CTE_RX(bt_dev.le.features)) {
    6e1e:	4b11      	ldr	r3, [pc, #68]	; (6e64 <bt_df_set_per_adv_sync_cte_rx_enable+0x48>)
    6e20:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
    6e24:	f013 0f10 	tst.w	r3, #16
    6e28:	d013      	beq.n	6e52 <bt_df_set_per_adv_sync_cte_rx_enable+0x36>
    6e2a:	f3bf 8f5b 	dmb	ish
    6e2e:	6943      	ldr	r3, [r0, #20]
    6e30:	f3bf 8f5b 	dmb	ish
		return -ENOTSUP;
	}

	if (!atomic_test_bit(sync->flags, BT_PER_ADV_SYNC_SYNCED)) {
    6e34:	f013 0f02 	tst.w	r3, #2
    6e38:	d00e      	beq.n	6e58 <bt_df_set_per_adv_sync_cte_rx_enable+0x3c>
		return -EINVAL;
	}

	if (!enable &&
    6e3a:	b939      	cbnz	r1, 6e4c <bt_df_set_per_adv_sync_cte_rx_enable+0x30>
    6e3c:	f3bf 8f5b 	dmb	ish
    6e40:	6943      	ldr	r3, [r0, #20]
    6e42:	f3bf 8f5b 	dmb	ish
    6e46:	f013 0f20 	tst.w	r3, #32
    6e4a:	d008      	beq.n	6e5e <bt_df_set_per_adv_sync_cte_rx_enable+0x42>
	    !atomic_test_bit(sync->flags, BT_PER_ADV_SYNC_CTE_ENABLED)) {
		return -EALREADY;
	}

	return hci_df_set_cl_cte_rx_enable(sync, enable, params);
    6e4c:	f013 f8b6 	bl	19fbc <hci_df_set_cl_cte_rx_enable>
}
    6e50:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    6e52:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6e56:	e7fb      	b.n	6e50 <bt_df_set_per_adv_sync_cte_rx_enable+0x34>
		return -EINVAL;
    6e58:	f06f 0015 	mvn.w	r0, #21
    6e5c:	e7f8      	b.n	6e50 <bt_df_set_per_adv_sync_cte_rx_enable+0x34>
		return -EALREADY;
    6e5e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6e62:	e7f5      	b.n	6e50 <bt_df_set_per_adv_sync_cte_rx_enable+0x34>
    6e64:	20000000 	.word	0x20000000

00006e68 <le_df_init>:
{
    6e68:	b500      	push	{lr}
    6e6a:	b083      	sub	sp, #12
	err = hci_df_read_ant_info(&switch_sample_rates, &num_ant,
    6e6c:	f10d 0305 	add.w	r3, sp, #5
    6e70:	f10d 0207 	add.w	r2, sp, #7
    6e74:	a901      	add	r1, sp, #4
    6e76:	f10d 0006 	add.w	r0, sp, #6
    6e7a:	f013 f87d 	bl	19f78 <hci_df_read_ant_info>
	if (err) {
    6e7e:	b960      	cbnz	r0, 6e9a <le_df_init+0x32>
	df_ant_info.max_switch_pattern_len = max_switch_pattern_len;
    6e80:	4b07      	ldr	r3, [pc, #28]	; (6ea0 <le_df_init+0x38>)
    6e82:	f89d 2007 	ldrb.w	r2, [sp, #7]
    6e86:	709a      	strb	r2, [r3, #2]
	df_ant_info.switch_sample_rates = switch_sample_rates;
    6e88:	f89d 2006 	ldrb.w	r2, [sp, #6]
    6e8c:	701a      	strb	r2, [r3, #0]
	df_ant_info.max_cte_len = max_cte_len;
    6e8e:	f89d 2005 	ldrb.w	r2, [sp, #5]
    6e92:	70da      	strb	r2, [r3, #3]
	df_ant_info.num_ant = num_ant;
    6e94:	f89d 2004 	ldrb.w	r2, [sp, #4]
    6e98:	705a      	strb	r2, [r3, #1]
}
    6e9a:	b003      	add	sp, #12
    6e9c:	f85d fb04 	ldr.w	pc, [sp], #4
    6ea0:	20002368 	.word	0x20002368

00006ea4 <dequeue>:
	return 0;
}

static void dequeue(uint8_t callee_id, uint8_t caller_id, memq_link_t *link,
		    struct mayfly *m)
{
    6ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ea6:	4616      	mov	r6, r2
    6ea8:	461c      	mov	r4, r3
	uint8_t req;

	req = m->_req;
    6eaa:	781b      	ldrb	r3, [r3, #0]
    6eac:	b2df      	uxtb	r7, r3
	if (((req - m->_ack) & 0x03) != 1U) {
    6eae:	7862      	ldrb	r2, [r4, #1]
    6eb0:	1a9b      	subs	r3, r3, r2
    6eb2:	f003 0303 	and.w	r3, r3, #3
    6eb6:	2b01      	cmp	r3, #1
    6eb8:	d100      	bne.n	6ebc <dequeue+0x18>

			m->_ack = ack;
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
		}
	}
}
    6eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ebc:	4605      	mov	r5, r0
		memq_dequeue(mft[callee_id][caller_id].tail,
    6ebe:	f8df c048 	ldr.w	ip, [pc, #72]	; 6f08 <dequeue+0x64>
    6ec2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    6ec6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6eca:	0100      	lsls	r0, r0, #4
    6ecc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6ed0:	4603      	mov	r3, r0
    6ed2:	4463      	add	r3, ip
    6ed4:	2200      	movs	r2, #0
    6ed6:	4619      	mov	r1, r3
    6ed8:	6858      	ldr	r0, [r3, #4]
    6eda:	f013 f973 	bl	1a1c4 <memq_dequeue>
		m->_link = link;
    6ede:	6066      	str	r6, [r4, #4]
		ack = m->_ack;
    6ee0:	7862      	ldrb	r2, [r4, #1]
		m->_ack = req;
    6ee2:	7067      	strb	r7, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    6ee4:	7823      	ldrb	r3, [r4, #0]
    6ee6:	1a9b      	subs	r3, r3, r2
    6ee8:	f003 0303 	and.w	r3, r3, #3
    6eec:	2b01      	cmp	r3, #1
    6eee:	d1e4      	bne.n	6eba <dequeue+0x16>
			m->_ack = ack;
    6ef0:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    6ef2:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    6ef6:	4a04      	ldr	r2, [pc, #16]	; (6f08 <dequeue+0x64>)
    6ef8:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    6efc:	3204      	adds	r2, #4
    6efe:	4621      	mov	r1, r4
    6f00:	4630      	mov	r0, r6
    6f02:	f013 f94d 	bl	1a1a0 <memq_enqueue>
}
    6f06:	e7d8      	b.n	6eba <dequeue+0x16>
    6f08:	200023f0 	.word	0x200023f0

00006f0c <mayfly_init>:
{
    6f0c:	b538      	push	{r3, r4, r5, lr}
	callee_id = MAYFLY_CALLEE_COUNT;
    6f0e:	2504      	movs	r5, #4
	while (callee_id--) {
    6f10:	e015      	b.n	6f3e <mayfly_init+0x32>
			memq_init(&mfl[callee_id][caller_id],
    6f12:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    6f16:	0099      	lsls	r1, r3, #2
    6f18:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6f1c:	0113      	lsls	r3, r2, #4
    6f1e:	440b      	add	r3, r1
    6f20:	490a      	ldr	r1, [pc, #40]	; (6f4c <mayfly_init+0x40>)
    6f22:	4419      	add	r1, r3
    6f24:	eb04 0085 	add.w	r0, r4, r5, lsl #2
    6f28:	1d0a      	adds	r2, r1, #4
    6f2a:	4b09      	ldr	r3, [pc, #36]	; (6f50 <mayfly_init+0x44>)
    6f2c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6f30:	f013 f933 	bl	1a19a <memq_init>
		while (caller_id--) {
    6f34:	4623      	mov	r3, r4
    6f36:	1e5c      	subs	r4, r3, #1
    6f38:	b2e4      	uxtb	r4, r4
    6f3a:	2b00      	cmp	r3, #0
    6f3c:	d1e9      	bne.n	6f12 <mayfly_init+0x6>
	while (callee_id--) {
    6f3e:	462b      	mov	r3, r5
    6f40:	3d01      	subs	r5, #1
    6f42:	b2ed      	uxtb	r5, r5
    6f44:	b10b      	cbz	r3, 6f4a <mayfly_init+0x3e>
		caller_id = MAYFLY_CALLER_COUNT;
    6f46:	2304      	movs	r3, #4
    6f48:	e7f5      	b.n	6f36 <mayfly_init+0x2a>
}
    6f4a:	bd38      	pop	{r3, r4, r5, pc}
    6f4c:	200023f0 	.word	0x200023f0
    6f50:	2000236c 	.word	0x2000236c

00006f54 <mayfly_enqueue>:
{
    6f54:	b570      	push	{r4, r5, r6, lr}
    6f56:	4606      	mov	r6, r0
    6f58:	460d      	mov	r5, r1
    6f5a:	461c      	mov	r4, r3
		!mayfly_is_enabled(caller_id, callee_id) ||
    6f5c:	b172      	cbz	r2, 6f7c <mayfly_enqueue+0x28>
    6f5e:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6f60:	b2c9      	uxtb	r1, r1
	ack = m->_ack;
    6f62:	7862      	ldrb	r2, [r4, #1]
	state = (m->_req - ack) & 0x03;
    6f64:	7823      	ldrb	r3, [r4, #0]
    6f66:	1a9b      	subs	r3, r3, r2
	if (state != 0U) {
    6f68:	f013 0303 	ands.w	r3, r3, #3
    6f6c:	d02e      	beq.n	6fcc <mayfly_enqueue+0x78>
		if (chain) {
    6f6e:	b351      	cbz	r1, 6fc6 <mayfly_enqueue+0x72>
			if (state != 1U) {
    6f70:	2b01      	cmp	r3, #1
    6f72:	d04b      	beq.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
				m->_req = ack + 1;
    6f74:	3201      	adds	r2, #1
    6f76:	b2d2      	uxtb	r2, r2
    6f78:	7022      	strb	r2, [r4, #0]
				goto mayfly_enqueue_pend;
    6f7a:	e03e      	b.n	6ffa <mayfly_enqueue+0xa6>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6f7c:	f015 fcf4 	bl	1c968 <mayfly_prio_is_equal>
    6f80:	b908      	cbnz	r0, 6f86 <mayfly_enqueue+0x32>
		!mayfly_is_enabled(caller_id, callee_id) ||
    6f82:	2101      	movs	r1, #1
    6f84:	e7ec      	b.n	6f60 <mayfly_enqueue+0xc>
    6f86:	4629      	mov	r1, r5
    6f88:	4630      	mov	r0, r6
    6f8a:	f009 fb0f 	bl	105ac <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    6f8e:	b1c0      	cbz	r0, 6fc2 <mayfly_enqueue+0x6e>
		(mft[callee_id][caller_id].disable_req !=
    6f90:	491f      	ldr	r1, [pc, #124]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6f92:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    6f96:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6f9a:	0112      	lsls	r2, r2, #4
    6f9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6fa0:	440b      	add	r3, r1
    6fa2:	7a98      	ldrb	r0, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    6fa4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    6fa8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6fac:	0112      	lsls	r2, r2, #4
    6fae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6fb2:	440b      	add	r3, r1
    6fb4:	7adb      	ldrb	r3, [r3, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    6fb6:	4298      	cmp	r0, r3
    6fb8:	d001      	beq.n	6fbe <mayfly_enqueue+0x6a>
    6fba:	2101      	movs	r1, #1
    6fbc:	e7d0      	b.n	6f60 <mayfly_enqueue+0xc>
    6fbe:	2100      	movs	r1, #0
    6fc0:	e7ce      	b.n	6f60 <mayfly_enqueue+0xc>
    6fc2:	2101      	movs	r1, #1
    6fc4:	e7cc      	b.n	6f60 <mayfly_enqueue+0xc>
		m->_req = ack + 2;
    6fc6:	1c93      	adds	r3, r2, #2
    6fc8:	b2db      	uxtb	r3, r3
    6fca:	7023      	strb	r3, [r4, #0]
	if (!chain) {
    6fcc:	b921      	cbnz	r1, 6fd8 <mayfly_enqueue+0x84>
		m->fp(m->param);
    6fce:	68e3      	ldr	r3, [r4, #12]
    6fd0:	68a0      	ldr	r0, [r4, #8]
    6fd2:	4798      	blx	r3
		return 0;
    6fd4:	2000      	movs	r0, #0
    6fd6:	e018      	b.n	700a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
	m->_req = ack + 1;
    6fd8:	3201      	adds	r2, #1
    6fda:	b2d2      	uxtb	r2, r2
    6fdc:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    6fde:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    6fe2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    6fe6:	011b      	lsls	r3, r3, #4
    6fe8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6fec:	4b08      	ldr	r3, [pc, #32]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6fee:	441a      	add	r2, r3
    6ff0:	3204      	adds	r2, #4
    6ff2:	4621      	mov	r1, r4
    6ff4:	6860      	ldr	r0, [r4, #4]
    6ff6:	f013 f8d3 	bl	1a1a0 <memq_enqueue>
	mfp[callee_id] = 1U;
    6ffa:	4b06      	ldr	r3, [pc, #24]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6ffc:	2201      	movs	r2, #1
    6ffe:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    7000:	4629      	mov	r1, r5
    7002:	4630      	mov	r0, r6
    7004:	f009 faf8 	bl	105f8 <mayfly_pend>
	return 0;
    7008:	2000      	movs	r0, #0
}
    700a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    700c:	2001      	movs	r0, #1
    700e:	e7fc      	b.n	700a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa>
    7010:	200023f0 	.word	0x200023f0
    7014:	200023ec 	.word	0x200023ec

00007018 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    7018:	4b4c      	ldr	r3, [pc, #304]	; (714c <mayfly_run+0x134>)
    701a:	5c1b      	ldrb	r3, [r3, r0]
    701c:	2b00      	cmp	r3, #0
    701e:	f000 8094 	beq.w	714a <mayfly_run+0x132>
{
    7022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7026:	b083      	sub	sp, #12
    7028:	4606      	mov	r6, r0
		return;
	}
	mfp[callee_id] = 0U;
    702a:	2700      	movs	r7, #0
    702c:	4b47      	ldr	r3, [pc, #284]	; (714c <mayfly_run+0x134>)
    702e:	541f      	strb	r7, [r3, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    7030:	2304      	movs	r3, #4
	uint8_t enable = 0U;
    7032:	46b8      	mov	r8, r7
	uint8_t disable = 0U;
    7034:	46b9      	mov	r9, r7
	while (caller_id--) {
    7036:	1e5d      	subs	r5, r3, #1
    7038:	b2ed      	uxtb	r5, r5
    703a:	2b00      	cmp	r3, #0
    703c:	d079      	beq.n	7132 <mayfly_run+0x11a>
		memq_link_t *link;
		struct mayfly *m = 0;
    703e:	2300      	movs	r3, #0
    7040:	9301      	str	r3, [sp, #4]

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    7042:	4843      	ldr	r0, [pc, #268]	; (7150 <mayfly_run+0x138>)
    7044:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7048:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    704c:	0112      	lsls	r2, r2, #4
    704e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7052:	18c1      	adds	r1, r0, r3
    7054:	aa01      	add	r2, sp, #4
    7056:	6849      	ldr	r1, [r1, #4]
    7058:	58c0      	ldr	r0, [r0, r3]
    705a:	f013 f8ab 	bl	1a1b4 <memq_peek>
    705e:	4607      	mov	r7, r0
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    7060:	2f00      	cmp	r7, #0
    7062:	d032      	beq.n	70ca <mayfly_run+0xb2>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    7064:	9b01      	ldr	r3, [sp, #4]
    7066:	781c      	ldrb	r4, [r3, #0]
    7068:	785a      	ldrb	r2, [r3, #1]
    706a:	1aa4      	subs	r4, r4, r2
    706c:	f004 0403 	and.w	r4, r4, #3
			if (state == 1U) {
    7070:	2c01      	cmp	r4, #1
    7072:	d023      	beq.n	70bc <mayfly_run+0xa4>
				/* call the mayfly function */
				m->fp(m->param);
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    7074:	9b01      	ldr	r3, [sp, #4]
    7076:	463a      	mov	r2, r7
    7078:	4629      	mov	r1, r5
    707a:	4630      	mov	r0, r6
    707c:	f7ff ff12 	bl	6ea4 <dequeue>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    7080:	4833      	ldr	r0, [pc, #204]	; (7150 <mayfly_run+0x138>)
    7082:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7086:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    708a:	0112      	lsls	r2, r2, #4
    708c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7090:	18c1      	adds	r1, r0, r3
    7092:	aa01      	add	r2, sp, #4
    7094:	6849      	ldr	r1, [r1, #4]
    7096:	58c0      	ldr	r0, [r0, r3]
    7098:	f013 f88c 	bl	1a1b4 <memq_peek>
    709c:	4607      	mov	r7, r0
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    709e:	2c01      	cmp	r4, #1
    70a0:	d1de      	bne.n	7060 <mayfly_run+0x48>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    70a2:	b90d      	cbnz	r5, 70a8 <mayfly_run+0x90>
    70a4:	2800      	cmp	r0, #0
    70a6:	d0db      	beq.n	7060 <mayfly_run+0x48>
					/* set mayfly callee pending */
					mfp[callee_id] = 1U;
    70a8:	4b28      	ldr	r3, [pc, #160]	; (714c <mayfly_run+0x134>)
    70aa:	2201      	movs	r2, #1
    70ac:	559a      	strb	r2, [r3, r6]

					/* pend the callee for execution */
					mayfly_pend(callee_id, callee_id);
    70ae:	4631      	mov	r1, r6
    70b0:	4630      	mov	r0, r6
    70b2:	f009 faa1 	bl	105f8 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    70b6:	b003      	add	sp, #12
    70b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				m->_ack--;
    70bc:	3a01      	subs	r2, #1
    70be:	705a      	strb	r2, [r3, #1]
				m->fp(m->param);
    70c0:	9b01      	ldr	r3, [sp, #4]
    70c2:	68da      	ldr	r2, [r3, #12]
    70c4:	6898      	ldr	r0, [r3, #8]
    70c6:	4790      	blx	r2
    70c8:	e7d4      	b.n	7074 <mayfly_run+0x5c>
		if (mft[callee_id][caller_id].disable_req !=
    70ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    70ce:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    70d2:	0112      	lsls	r2, r2, #4
    70d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    70d8:	4a1d      	ldr	r2, [pc, #116]	; (7150 <mayfly_run+0x138>)
    70da:	4413      	add	r3, r2
    70dc:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    70de:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    70e0:	4299      	cmp	r1, r3
    70e2:	d00b      	beq.n	70fc <mayfly_run+0xe4>
			mft[callee_id][caller_id].disable_ack =
    70e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    70e8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    70ec:	0112      	lsls	r2, r2, #4
    70ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    70f2:	4a17      	ldr	r2, [pc, #92]	; (7150 <mayfly_run+0x138>)
    70f4:	4413      	add	r3, r2
    70f6:	72d9      	strb	r1, [r3, #11]
			disable = 1U;
    70f8:	f04f 0901 	mov.w	r9, #1
		if (mft[callee_id][caller_id].enable_req !=
    70fc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    7100:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    7104:	0112      	lsls	r2, r2, #4
    7106:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    710a:	4a11      	ldr	r2, [pc, #68]	; (7150 <mayfly_run+0x138>)
    710c:	4413      	add	r3, r2
    710e:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    7110:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    7112:	4299      	cmp	r1, r3
    7114:	d00b      	beq.n	712e <mayfly_run+0x116>
			mft[callee_id][caller_id].enable_ack =
    7116:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    711a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    711e:	0112      	lsls	r2, r2, #4
    7120:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    7124:	4a0a      	ldr	r2, [pc, #40]	; (7150 <mayfly_run+0x138>)
    7126:	4413      	add	r3, r2
    7128:	7259      	strb	r1, [r3, #9]
			enable = 1U;
    712a:	f04f 0801 	mov.w	r8, #1
	while (caller_id--) {
    712e:	462b      	mov	r3, r5
    7130:	e781      	b.n	7036 <mayfly_run+0x1e>
	if (disable && !enable) {
    7132:	f1b9 0f00 	cmp.w	r9, #0
    7136:	d0be      	beq.n	70b6 <mayfly_run+0x9e>
    7138:	f1b8 0f00 	cmp.w	r8, #0
    713c:	d1bb      	bne.n	70b6 <mayfly_run+0x9e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    713e:	2200      	movs	r2, #0
    7140:	4631      	mov	r1, r6
    7142:	4630      	mov	r0, r6
    7144:	f009 fa12 	bl	1056c <mayfly_enable_cb>
    7148:	e7b5      	b.n	70b6 <mayfly_run+0x9e>
    714a:	4770      	bx	lr
    714c:	200023ec 	.word	0x200023ec
    7150:	200023f0 	.word	0x200023f0

00007154 <ticker_remainder_inc>:
 * @internal
 */
static uint8_t ticker_remainder_inc(struct ticker_node *ticker)
{
#ifdef HAL_TICKER_REMAINDER_RANGE
	ticker->remainder_current += ticker->remainder_periodic;
    7154:	6a03      	ldr	r3, [r0, #32]
    7156:	6a42      	ldr	r2, [r0, #36]	; 0x24
    7158:	4413      	add	r3, r2
    715a:	6243      	str	r3, [r0, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    715c:	4a05      	ldr	r2, [pc, #20]	; (7174 <ticker_remainder_inc+0x20>)
    715e:	441a      	add	r2, r3
    7160:	4905      	ldr	r1, [pc, #20]	; (7178 <ticker_remainder_inc+0x24>)
    7162:	428a      	cmp	r2, r1
    7164:	d901      	bls.n	716a <ticker_remainder_inc+0x16>
	    (ticker->remainder_current > (HAL_TICKER_REMAINDER_RANGE >> 1))) {
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
		return 1;
	}
	return 0;
    7166:	2000      	movs	r0, #0
#else
	return 0;
#endif
}
    7168:	4770      	bx	lr
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    716a:	4a04      	ldr	r2, [pc, #16]	; (717c <ticker_remainder_inc+0x28>)
    716c:	441a      	add	r2, r3
    716e:	6242      	str	r2, [r0, #36]	; 0x24
		return 1;
    7170:	2001      	movs	r0, #1
    7172:	4770      	bx	lr
    7174:	ff172b5a 	.word	0xff172b5a
    7178:	7f172b59 	.word	0x7f172b59
    717c:	fe2e56b6 	.word	0xfe2e56b6

00007180 <ticker_remainder_dec>:
 *
 * @return Returns 1 to indicate decrement is due, otherwise 0
 * @internal
 */
static uint8_t ticker_remainder_dec(struct ticker_node *ticker)
{
    7180:	4603      	mov	r3, r0
#ifdef HAL_TICKER_REMAINDER_RANGE
	uint8_t decrement = 0U;

	if ((ticker->remainder_current >= BIT(31)) ||
    7182:	6a41      	ldr	r1, [r0, #36]	; 0x24
    7184:	4a07      	ldr	r2, [pc, #28]	; (71a4 <ticker_remainder_dec+0x24>)
    7186:	440a      	add	r2, r1
    7188:	4807      	ldr	r0, [pc, #28]	; (71a8 <ticker_remainder_dec+0x28>)
    718a:	4282      	cmp	r2, r0
    718c:	d908      	bls.n	71a0 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (HAL_TICKER_REMAINDER_RANGE >> 1))) {
		decrement++;
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    718e:	4a07      	ldr	r2, [pc, #28]	; (71ac <ticker_remainder_dec+0x2c>)
    7190:	440a      	add	r2, r1
    7192:	625a      	str	r2, [r3, #36]	; 0x24
		decrement++;
    7194:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
    7196:	6a19      	ldr	r1, [r3, #32]
    7198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    719a:	1a52      	subs	r2, r2, r1
    719c:	625a      	str	r2, [r3, #36]	; 0x24
	return decrement;
#else
	return 0;
#endif
}
    719e:	4770      	bx	lr
	uint8_t decrement = 0U;
    71a0:	2000      	movs	r0, #0
    71a2:	e7f8      	b.n	7196 <ticker_remainder_dec+0x16>
    71a4:	ff172b5a 	.word	0xff172b5a
    71a8:	7f172b59 	.word	0x7f172b59
    71ac:	01d1a94a 	.word	0x01d1a94a

000071b0 <ticker_init>:
uint32_t ticker_init(uint8_t instance_index, uint8_t count_node, void *node,
		  uint8_t count_user, void *user, uint8_t count_op, void *user_op,
		  ticker_caller_id_get_cb_t caller_id_get_cb,
		  ticker_sched_cb_t sched_cb,
		  ticker_trigger_set_cb_t trigger_set_cb)
{
    71b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    71b2:	9f05      	ldr	r7, [sp, #20]
    71b4:	f89d 6018 	ldrb.w	r6, [sp, #24]
    71b8:	9d07      	ldr	r5, [sp, #28]
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op_ = (void *)user_op;
	struct ticker_user *users;

	if (instance_index >= TICKER_INSTANCE_MAX) {
    71ba:	2800      	cmp	r0, #0
    71bc:	d14a      	bne.n	7254 <ticker_init+0xa4>
    71be:	461c      	mov	r4, r3
    71c0:	4684      	mov	ip, r0
		return TICKER_STATUS_FAILURE;
	}

	instance->count_node = count_node;
    71c2:	4826      	ldr	r0, [pc, #152]	; (725c <ticker_init+0xac>)
    71c4:	232c      	movs	r3, #44	; 0x2c
    71c6:	fb03 f30c 	mul.w	r3, r3, ip
    71ca:	eb00 0e03 	add.w	lr, r0, r3
    71ce:	f88e 1008 	strb.w	r1, [lr, #8]
	instance->nodes = node;
    71d2:	50c2      	str	r2, [r0, r3]

#if !defined(CONFIG_BT_TICKER_LOW_LAT) && \
	!defined(CONFIG_BT_TICKER_SLOT_AGNOSTIC)
	while (count_node--) {
    71d4:	e007      	b.n	71e6 <ticker_init+0x36>
		instance->nodes[count_node].priority = 0;
    71d6:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    71da:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    71de:	2300      	movs	r3, #0
    71e0:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	while (count_node--) {
    71e4:	4601      	mov	r1, r0
    71e6:	1e48      	subs	r0, r1, #1
    71e8:	b2c0      	uxtb	r0, r0
    71ea:	2900      	cmp	r1, #0
    71ec:	d1f3      	bne.n	71d6 <ticker_init+0x26>
	}
#endif /* !CONFIG_BT_TICKER_LOW_LAT &&
	* !CONFIG_BT_TICKER_SLOT_AGNOSTIC
	*/

	instance->count_user = count_user;
    71ee:	4b1b      	ldr	r3, [pc, #108]	; (725c <ticker_init+0xac>)
    71f0:	222c      	movs	r2, #44	; 0x2c
    71f2:	fb02 330c 	mla	r3, r2, ip, r3
    71f6:	725c      	strb	r4, [r3, #9]
	instance->users = user;
    71f8:	605f      	str	r7, [r3, #4]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->users[0];
	while (count_user--) {
    71fa:	e00a      	b.n	7212 <ticker_init+0x62>
		users[count_user].user_op = user_op_;
    71fc:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    7200:	605d      	str	r5, [r3, #4]
		user_op_ += users[count_user].count_user_op;
    7202:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
    7206:	2134      	movs	r1, #52	; 0x34
    7208:	fb01 5503 	mla	r5, r1, r3, r5
		count_op -= users[count_user].count_user_op;
    720c:	1af3      	subs	r3, r6, r3
    720e:	b2de      	uxtb	r6, r3
	while (count_user--) {
    7210:	4614      	mov	r4, r2
    7212:	1e62      	subs	r2, r4, #1
    7214:	b2d2      	uxtb	r2, r2
    7216:	2c00      	cmp	r4, #0
    7218:	d1f0      	bne.n	71fc <ticker_init+0x4c>
	}

	if (count_op) {
    721a:	b9ee      	cbnz	r6, 7258 <ticker_init+0xa8>
		return TICKER_STATUS_FAILURE;
	}

	instance->caller_id_get_cb = caller_id_get_cb;
    721c:	4b0f      	ldr	r3, [pc, #60]	; (725c <ticker_init+0xac>)
    721e:	222c      	movs	r2, #44	; 0x2c
    7220:	fb02 3c0c 	mla	ip, r2, ip, r3
    7224:	9b08      	ldr	r3, [sp, #32]
    7226:	f8cc 3020 	str.w	r3, [ip, #32]
	instance->sched_cb = sched_cb;
    722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    722c:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	instance->trigger_set_cb = trigger_set_cb;
    7230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7232:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

	instance->ticker_id_head = TICKER_NULL;
    7236:	23ff      	movs	r3, #255	; 0xff
    7238:	f88c 301d 	strb.w	r3, [ip, #29]
	instance->ticker_id_slot_previous = TICKER_NULL;
    723c:	f88c 301c 	strb.w	r3, [ip, #28]
	instance->ticks_slot_previous = 0U;
    7240:	2000      	movs	r0, #0
    7242:	f8cc 0018 	str.w	r0, [ip, #24]
	instance->ticks_current = 0U;
    7246:	f8cc 0014 	str.w	r0, [ip, #20]
	instance->ticks_elapsed_first = 0U;
    724a:	f88c 000a 	strb.w	r0, [ip, #10]
	instance->ticks_elapsed_last = 0U;
    724e:	f88c 000b 	strb.w	r0, [ip, #11]

	return TICKER_STATUS_SUCCESS;
}
    7252:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
    7254:	2001      	movs	r0, #1
    7256:	e7fc      	b.n	7252 <ticker_init+0xa2>
		return TICKER_STATUS_FAILURE;
    7258:	2001      	movs	r0, #1
    725a:	e7fa      	b.n	7252 <ticker_init+0xa2>
    725c:	200024b0 	.word	0x200024b0

00007260 <ticker_trigger>:
 * corresponding mayfly.
 *
 * @param instance_index Index of ticker instance
 */
void ticker_trigger(uint8_t instance_index)
{
    7260:	b510      	push	{r4, lr}
	struct ticker_instance *instance;

	DEBUG_TICKER_ISR(1);

	instance = &_instance[instance_index];
    7262:	4b05      	ldr	r3, [pc, #20]	; (7278 <ticker_trigger+0x18>)
    7264:	222c      	movs	r2, #44	; 0x2c
    7266:	fb02 3300 	mla	r3, r2, r0, r3
	if (instance->sched_cb) {
    726a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    726c:	b11c      	cbz	r4, 7276 <ticker_trigger+0x16>
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    726e:	2201      	movs	r2, #1
    7270:	2103      	movs	r1, #3
    7272:	2002      	movs	r0, #2
    7274:	47a0      	blx	r4
				   TICKER_CALL_ID_WORKER, 1, instance);
	}

	DEBUG_TICKER_ISR(0);
}
    7276:	bd10      	pop	{r4, pc}
    7278:	200024b0 	.word	0x200024b0

0000727c <ticker_start_ext>:
		   uint32_t ticks_anchor, uint32_t ticks_first, uint32_t ticks_periodic,
		   uint32_t remainder_periodic, uint16_t lazy, uint32_t ticks_slot,
		   ticker_timeout_func fp_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
#endif
{
    727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7280:	4686      	mov	lr, r0
    7282:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7284:	4d25      	ldr	r5, [pc, #148]	; (731c <ticker_start_ext+0xa0>)
    7286:	212c      	movs	r1, #44	; 0x2c
    7288:	fb01 550e 	mla	r5, r1, lr, r5
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	uint8_t last;

	user = &instance->users[user_id];
    728c:	686c      	ldr	r4, [r5, #4]
    728e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3

	last = user->last + 1;
    7292:	78f1      	ldrb	r1, [r6, #3]
    7294:	f101 0c01 	add.w	ip, r1, #1
    7298:	fa5f fc8c 	uxtb.w	ip, ip
	if (last >= user->count_user_op) {
    729c:	f814 4030 	ldrb.w	r4, [r4, r0, lsl #3]
    72a0:	4564      	cmp	r4, ip
    72a2:	d801      	bhi.n	72a8 <ticker_start_ext+0x2c>
		last = 0U;
    72a4:	f04f 0c00 	mov.w	ip, #0
	}

	if (last == user->first) {
    72a8:	7874      	ldrb	r4, [r6, #1]
    72aa:	4564      	cmp	r4, ip
    72ac:	d034      	beq.n	7318 <ticker_start_ext+0x9c>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    72ae:	f8d6 8004 	ldr.w	r8, [r6, #4]
    72b2:	2434      	movs	r4, #52	; 0x34
    72b4:	fb04 f101 	mul.w	r1, r4, r1
    72b8:	eb08 0401 	add.w	r4, r8, r1
	user_op->op = TICKER_USER_OP_TYPE_START;
    72bc:	2704      	movs	r7, #4
    72be:	f808 7001 	strb.w	r7, [r8, r1]
	user_op->id = ticker_id;
    72c2:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
    72c4:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    72c6:	9b06      	ldr	r3, [sp, #24]
    72c8:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    72ca:	9b07      	ldr	r3, [sp, #28]
    72cc:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    72ce:	9b08      	ldr	r3, [sp, #32]
    72d0:	6123      	str	r3, [r4, #16]
#if !defined(CONFIG_BT_TICKER_SLOT_AGNOSTIC)
	user_op->params.start.ticks_slot = ticks_slot;
    72d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    72d4:	61a3      	str	r3, [r4, #24]
#endif
	user_op->params.start.lazy = lazy;
    72d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    72da:	82a3      	strh	r3, [r4, #20]
#if defined(CONFIG_BT_TICKER_EXT)
	user_op->params.start.ext_data = ext_data;
    72dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    72de:	6263      	str	r3, [r4, #36]	; 0x24
#endif
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    72e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    72e2:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    72e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    72e6:	6223      	str	r3, [r4, #32]
	user_op->status = TICKER_STATUS_BUSY;
    72e8:	2302      	movs	r3, #2
    72ea:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    72ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    72ee:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    72f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    72f2:	6323      	str	r3, [r4, #48]	; 0x30

	user->last = last;
    72f4:	f886 c003 	strb.w	ip, [r6, #3]

	instance->sched_cb(instance->caller_id_get_cb(user_id),
    72f8:	4b08      	ldr	r3, [pc, #32]	; (731c <ticker_start_ext+0xa0>)
    72fa:	222c      	movs	r2, #44	; 0x2c
    72fc:	fb02 3e0e 	mla	lr, r2, lr, r3
    7300:	f8de 6024 	ldr.w	r6, [lr, #36]	; 0x24
    7304:	f8de 3020 	ldr.w	r3, [lr, #32]
    7308:	4798      	blx	r3
    730a:	462b      	mov	r3, r5
    730c:	2200      	movs	r2, #0
    730e:	4639      	mov	r1, r7
    7310:	47b0      	blx	r6
			   TICKER_CALL_ID_JOB, 0, instance);

	return user_op->status;
    7312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    7314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    7318:	2001      	movs	r0, #1
    731a:	e7fb      	b.n	7314 <ticker_start_ext+0x98>
    731c:	200024b0 	.word	0x200024b0

00007320 <ticker_update_ext>:
			   uint32_t ticks_slot_plus, uint32_t ticks_slot_minus,
			   uint16_t lazy, uint8_t force,
			   ticker_op_func fp_op_func, void *op_context,
			   uint8_t must_expire)
#endif /* CONFIG_BT_TICKER_EXT */
{
    7320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7324:	4686      	mov	lr, r0
    7326:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7328:	4d24      	ldr	r5, [pc, #144]	; (73bc <ticker_update_ext+0x9c>)
    732a:	212c      	movs	r1, #44	; 0x2c
    732c:	fb01 550e 	mla	r5, r1, lr, r5
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	uint8_t last;

	user = &instance->users[user_id];
    7330:	686c      	ldr	r4, [r5, #4]
    7332:	eb04 06c0 	add.w	r6, r4, r0, lsl #3

	last = user->last + 1;
    7336:	78f1      	ldrb	r1, [r6, #3]
    7338:	f101 0c01 	add.w	ip, r1, #1
    733c:	fa5f fc8c 	uxtb.w	ip, ip
	if (last >= user->count_user_op) {
    7340:	f814 4030 	ldrb.w	r4, [r4, r0, lsl #3]
    7344:	4564      	cmp	r4, ip
    7346:	d801      	bhi.n	734c <ticker_update_ext+0x2c>
		last = 0U;
    7348:	f04f 0c00 	mov.w	ip, #0
	}

	if (last == user->first) {
    734c:	7874      	ldrb	r4, [r6, #1]
    734e:	4564      	cmp	r4, ip
    7350:	d031      	beq.n	73b6 <ticker_update_ext+0x96>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7352:	6877      	ldr	r7, [r6, #4]
    7354:	2434      	movs	r4, #52	; 0x34
    7356:	fb04 f101 	mul.w	r1, r4, r1
    735a:	187c      	adds	r4, r7, r1
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    735c:	f04f 0805 	mov.w	r8, #5
    7360:	f807 8001 	strb.w	r8, [r7, r1]
	user_op->id = ticker_id;
    7364:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    7366:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    7368:	9b06      	ldr	r3, [sp, #24]
    736a:	60a3      	str	r3, [r4, #8]
#if !defined(CONFIG_BT_TICKER_SLOT_AGNOSTIC)
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    736c:	9b07      	ldr	r3, [sp, #28]
    736e:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    7370:	9b08      	ldr	r3, [sp, #32]
    7372:	6123      	str	r3, [r4, #16]
#endif /* CONFIG_BT_TICKER_SLOT_AGNOSTIC */
	user_op->params.update.lazy = lazy;
    7374:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    7378:	82a3      	strh	r3, [r4, #20]
	user_op->params.update.force = force;
    737a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    737e:	75a3      	strb	r3, [r4, #22]
#if defined(CONFIG_BT_TICKER_EXT)
	user_op->params.update.must_expire = must_expire;
    7380:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
    7384:	75e3      	strb	r3, [r4, #23]
#endif /* CONFIG_BT_TICKER_EXT */
	user_op->status = TICKER_STATUS_BUSY;
    7386:	2302      	movs	r3, #2
    7388:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    738c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    738e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7390:	6323      	str	r3, [r4, #48]	; 0x30

	user->last = last;
    7392:	f886 c003 	strb.w	ip, [r6, #3]

	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7396:	4b09      	ldr	r3, [pc, #36]	; (73bc <ticker_update_ext+0x9c>)
    7398:	222c      	movs	r2, #44	; 0x2c
    739a:	fb02 3e0e 	mla	lr, r2, lr, r3
    739e:	f8de 6024 	ldr.w	r6, [lr, #36]	; 0x24
    73a2:	f8de 3020 	ldr.w	r3, [lr, #32]
    73a6:	4798      	blx	r3
    73a8:	462b      	mov	r3, r5
    73aa:	2200      	movs	r2, #0
    73ac:	2104      	movs	r1, #4
    73ae:	47b0      	blx	r6
			   TICKER_CALL_ID_JOB, 0, instance);

	return user_op->status;
    73b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    73b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    73b6:	2001      	movs	r0, #1
    73b8:	e7fb      	b.n	73b2 <ticker_update_ext+0x92>
    73ba:	bf00      	nop
    73bc:	200024b0 	.word	0x200024b0

000073c0 <ticker_yield_abs>:
 * before exiting ticker_stop
 */
uint32_t ticker_yield_abs(uint8_t instance_index, uint8_t user_id,
			  uint8_t ticker_id, uint32_t ticks_at_yield,
			  ticker_op_func fp_op_func, void *op_context)
{
    73c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73c4:	4686      	mov	lr, r0
    73c6:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    73c8:	4d1c      	ldr	r5, [pc, #112]	; (743c <ticker_yield_abs+0x7c>)
    73ca:	212c      	movs	r1, #44	; 0x2c
    73cc:	fb01 550e 	mla	r5, r1, lr, r5
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	uint8_t last;

	user = &instance->users[user_id];
    73d0:	686c      	ldr	r4, [r5, #4]
    73d2:	eb04 06c0 	add.w	r6, r4, r0, lsl #3

	last = user->last + 1;
    73d6:	78f1      	ldrb	r1, [r6, #3]
    73d8:	f101 0c01 	add.w	ip, r1, #1
    73dc:	fa5f fc8c 	uxtb.w	ip, ip
	if (last >= user->count_user_op) {
    73e0:	f814 4030 	ldrb.w	r4, [r4, r0, lsl #3]
    73e4:	4564      	cmp	r4, ip
    73e6:	d801      	bhi.n	73ec <ticker_yield_abs+0x2c>
		last = 0U;
    73e8:	f04f 0c00 	mov.w	ip, #0
	}

	if (last == user->first) {
    73ec:	7874      	ldrb	r4, [r6, #1]
    73ee:	4564      	cmp	r4, ip
    73f0:	d022      	beq.n	7438 <ticker_yield_abs+0x78>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    73f2:	6877      	ldr	r7, [r6, #4]
    73f4:	2434      	movs	r4, #52	; 0x34
    73f6:	fb04 f101 	mul.w	r1, r4, r1
    73fa:	187c      	adds	r4, r7, r1
	user_op->op = TICKER_USER_OP_TYPE_YIELD_ABS;
    73fc:	f04f 0806 	mov.w	r8, #6
    7400:	f807 8001 	strb.w	r8, [r7, r1]
	user_op->id = ticker_id;
    7404:	7062      	strb	r2, [r4, #1]
	user_op->params.yield.ticks_at_yield = ticks_at_yield;
    7406:	6063      	str	r3, [r4, #4]
	user_op->status = TICKER_STATUS_BUSY;
    7408:	2302      	movs	r3, #2
    740a:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    740c:	9b06      	ldr	r3, [sp, #24]
    740e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    7410:	9b07      	ldr	r3, [sp, #28]
    7412:	6323      	str	r3, [r4, #48]	; 0x30

	user->last = last;
    7414:	f886 c003 	strb.w	ip, [r6, #3]

	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7418:	4b08      	ldr	r3, [pc, #32]	; (743c <ticker_yield_abs+0x7c>)
    741a:	222c      	movs	r2, #44	; 0x2c
    741c:	fb02 3e0e 	mla	lr, r2, lr, r3
    7420:	f8de 6024 	ldr.w	r6, [lr, #36]	; 0x24
    7424:	f8de 3020 	ldr.w	r3, [lr, #32]
    7428:	4798      	blx	r3
    742a:	462b      	mov	r3, r5
    742c:	2200      	movs	r2, #0
    742e:	2104      	movs	r1, #4
    7430:	47b0      	blx	r6
			   TICKER_CALL_ID_JOB, 0, instance);

	return user_op->status;
    7432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    7434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    7438:	2001      	movs	r0, #1
    743a:	e7fb      	b.n	7434 <ticker_yield_abs+0x74>
    743c:	200024b0 	.word	0x200024b0

00007440 <ticker_stop>:
 * available, and TICKER_STATUS_SUCCESS is returned if ticker_job gets to run
 * before exiting ticker_stop
 */
uint32_t ticker_stop(uint8_t instance_index, uint8_t user_id, uint8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
    7440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7444:	4686      	mov	lr, r0
    7446:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    7448:	4c1b      	ldr	r4, [pc, #108]	; (74b8 <ticker_stop+0x78>)
    744a:	212c      	movs	r1, #44	; 0x2c
    744c:	fb01 440e 	mla	r4, r1, lr, r4
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	uint8_t last;

	user = &instance->users[user_id];
    7450:	6865      	ldr	r5, [r4, #4]
    7452:	eb05 06c0 	add.w	r6, r5, r0, lsl #3

	last = user->last + 1;
    7456:	78f1      	ldrb	r1, [r6, #3]
    7458:	f101 0c01 	add.w	ip, r1, #1
    745c:	fa5f fc8c 	uxtb.w	ip, ip
	if (last >= user->count_user_op) {
    7460:	f815 5030 	ldrb.w	r5, [r5, r0, lsl #3]
    7464:	4565      	cmp	r5, ip
    7466:	d801      	bhi.n	746c <ticker_stop+0x2c>
		last = 0U;
    7468:	f04f 0c00 	mov.w	ip, #0
	}

	if (last == user->first) {
    746c:	7875      	ldrb	r5, [r6, #1]
    746e:	4565      	cmp	r5, ip
    7470:	d020      	beq.n	74b4 <ticker_stop+0x74>
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
    7472:	6877      	ldr	r7, [r6, #4]
    7474:	2534      	movs	r5, #52	; 0x34
    7476:	fb05 f101 	mul.w	r1, r5, r1
    747a:	187d      	adds	r5, r7, r1
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    747c:	f04f 0807 	mov.w	r8, #7
    7480:	f807 8001 	strb.w	r8, [r7, r1]
	user_op->id = ticker_id;
    7484:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    7486:	2202      	movs	r2, #2
    7488:	62aa      	str	r2, [r5, #40]	; 0x28
	user_op->fp_op_func = fp_op_func;
    748a:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    748c:	9b06      	ldr	r3, [sp, #24]
    748e:	632b      	str	r3, [r5, #48]	; 0x30

	user->last = last;
    7490:	f886 c003 	strb.w	ip, [r6, #3]

	instance->sched_cb(instance->caller_id_get_cb(user_id),
    7494:	4b08      	ldr	r3, [pc, #32]	; (74b8 <ticker_stop+0x78>)
    7496:	222c      	movs	r2, #44	; 0x2c
    7498:	fb02 3e0e 	mla	lr, r2, lr, r3
    749c:	f8de 6024 	ldr.w	r6, [lr, #36]	; 0x24
    74a0:	f8de 3020 	ldr.w	r3, [lr, #32]
    74a4:	4798      	blx	r3
    74a6:	4623      	mov	r3, r4
    74a8:	2200      	movs	r2, #0
    74aa:	2104      	movs	r1, #4
    74ac:	47b0      	blx	r6
			   TICKER_CALL_ID_JOB, 0, instance);

	return user_op->status;
    74ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    74b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    74b4:	2001      	movs	r0, #1
    74b6:	e7fb      	b.n	74b0 <ticker_stop+0x70>
    74b8:	200024b0 	.word	0x200024b0

000074bc <ticker_job>:
	if (instance->worker_trigger) {
    74bc:	7fc3      	ldrb	r3, [r0, #31]
    74be:	2b00      	cmp	r3, #0
    74c0:	f040 8118 	bne.w	76f4 <ticker_job+0x238>
{
    74c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    74c8:	b089      	sub	sp, #36	; 0x24
    74ca:	4606      	mov	r6, r0
	if (instance->job_guard) {
    74cc:	7f84      	ldrb	r4, [r0, #30]
    74ce:	2c00      	cmp	r4, #0
    74d0:	d140      	bne.n	7554 <ticker_job+0x98>
	instance->job_guard = 1U;
    74d2:	2301      	movs	r3, #1
    74d4:	7783      	strb	r3, [r0, #30]
	ticks_previous = instance->ticks_current;
    74d6:	6945      	ldr	r5, [r0, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    74d8:	7a83      	ldrb	r3, [r0, #10]
    74da:	7ac2      	ldrb	r2, [r0, #11]
    74dc:	4293      	cmp	r3, r2
    74de:	d044      	beq.n	756a <ticker_job+0xae>
	uint8_t idx = *ticks_elapsed_index + 1;
    74e0:	3301      	adds	r3, #1
    74e2:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    74e4:	2b02      	cmp	r3, #2
    74e6:	d03e      	beq.n	7566 <ticker_job+0xaa>
	*ticks_elapsed_index = idx;
    74e8:	72b3      	strb	r3, [r6, #10]
		ticks_elapsed =
    74ea:	3302      	adds	r3, #2
    74ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    74f0:	685f      	ldr	r7, [r3, #4]
		instance->ticks_current += ticks_elapsed;
    74f2:	19eb      	adds	r3, r5, r7
    74f4:	6173      	str	r3, [r6, #20]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    74f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    74fa:	6173      	str	r3, [r6, #20]
		flag_elapsed = 1U;
    74fc:	f04f 0901 	mov.w	r9, #1
	insert_head = TICKER_NULL;
    7500:	23ff      	movs	r3, #255	; 0xff
    7502:	f88d 301f 	strb.w	r3, [sp, #31]
	ticker_id_old_head = instance->ticker_id_head;
    7506:	f896 a01d 	ldrb.w	sl, [r6, #29]
	pending = ticker_job_list_manage(instance, ticks_elapsed, &insert_head);
    750a:	f10d 021f 	add.w	r2, sp, #31
    750e:	4639      	mov	r1, r7
    7510:	4630      	mov	r0, r6
    7512:	f013 fa9e 	bl	1aa52 <ticker_job_list_manage>
    7516:	9005      	str	r0, [sp, #20]
	if (instance->ticker_id_head != ticker_id_old_head) {
    7518:	7f73      	ldrb	r3, [r6, #29]
    751a:	4553      	cmp	r3, sl
    751c:	d000      	beq.n	7520 <ticker_job+0x64>
		flag_compare_update = 1U;
    751e:	2401      	movs	r4, #1
	if (flag_elapsed) {
    7520:	f1b9 0f00 	cmp.w	r9, #0
    7524:	d024      	beq.n	7570 <ticker_job+0xb4>
		ticker_job_worker_bh(instance, ticks_previous, ticks_elapsed,
    7526:	f10d 031f 	add.w	r3, sp, #31
    752a:	463a      	mov	r2, r7
    752c:	4629      	mov	r1, r5
    752e:	4630      	mov	r0, r6
    7530:	f013 fb56 	bl	1abe0 <ticker_job_worker_bh>
		if (instance->ticker_id_head != ticker_id_old_head) {
    7534:	7f73      	ldrb	r3, [r6, #29]
    7536:	4553      	cmp	r3, sl
    7538:	d000      	beq.n	753c <ticker_job+0x80>
			flag_compare_update = 1U;
    753a:	464c      	mov	r4, r9
		ticker_job_list_insert(instance, insert_head);
    753c:	f89d 101f 	ldrb.w	r1, [sp, #31]
    7540:	4630      	mov	r0, r6
    7542:	f013 f97b 	bl	1a83c <ticker_job_list_insert>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    7546:	4639      	mov	r1, r7
    7548:	4630      	mov	r0, r6
    754a:	f012 ffa3 	bl	1a494 <ticker_job_reschedule_in_window>
    754e:	b9a8      	cbnz	r0, 757c <ticker_job+0xc0>
    7550:	46a1      	mov	r9, r4
    7552:	e013      	b.n	757c <ticker_job+0xc0>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    7554:	6a44      	ldr	r4, [r0, #36]	; 0x24
    7556:	4603      	mov	r3, r0
    7558:	2201      	movs	r2, #1
    755a:	2104      	movs	r1, #4
    755c:	4608      	mov	r0, r1
    755e:	47a0      	blx	r4
}
    7560:	b009      	add	sp, #36	; 0x24
    7562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		idx = 0U;
    7566:	4623      	mov	r3, r4
    7568:	e7be      	b.n	74e8 <ticker_job+0x2c>
		flag_elapsed = 0U;
    756a:	46a1      	mov	r9, r4
		ticks_elapsed = 0U;
    756c:	2700      	movs	r7, #0
    756e:	e7c7      	b.n	7500 <ticker_job+0x44>
		ticker_job_list_insert(instance, insert_head);
    7570:	f89d 101f 	ldrb.w	r1, [sp, #31]
    7574:	4630      	mov	r0, r6
    7576:	f013 f961 	bl	1a83c <ticker_job_list_insert>
    757a:	46a1      	mov	r9, r4
	if (instance->ticker_id_head != ticker_id_old_head) {
    757c:	7f73      	ldrb	r3, [r6, #29]
    757e:	4553      	cmp	r3, sl
    7580:	d001      	beq.n	7586 <ticker_job+0xca>
		flag_compare_update = 1U;
    7582:	f04f 0901 	mov.w	r9, #1
	if (!pending) {
    7586:	9b05      	ldr	r3, [sp, #20]
    7588:	b173      	cbz	r3, 75a8 <ticker_job+0xec>
	if (flag_compare_update) {
    758a:	f1b9 0f00 	cmp.w	r9, #0
    758e:	d158      	bne.n	7642 <ticker_job+0x186>
	instance->job_guard = 0U;
    7590:	2300      	movs	r3, #0
    7592:	77b3      	strb	r3, [r6, #30]
	if (instance->worker_trigger) {
    7594:	7ff3      	ldrb	r3, [r6, #31]
    7596:	2b00      	cmp	r3, #0
    7598:	d0e2      	beq.n	7560 <ticker_job+0xa4>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    759a:	6a74      	ldr	r4, [r6, #36]	; 0x24
    759c:	4633      	mov	r3, r6
    759e:	2201      	movs	r2, #1
    75a0:	2103      	movs	r1, #3
    75a2:	2004      	movs	r0, #4
    75a4:	47a0      	blx	r4
	DEBUG_TICKER_JOB(0);
    75a6:	e7db      	b.n	7560 <ticker_job+0xa4>
	users = &instance->users[0];
    75a8:	f8d6 b004 	ldr.w	fp, [r6, #4]
	count_user = instance->count_user;
    75ac:	f896 8009 	ldrb.w	r8, [r6, #9]
	while (count_user--) {
    75b0:	4643      	mov	r3, r8
    75b2:	f108 38ff 	add.w	r8, r8, #4294967295
    75b6:	fa5f f888 	uxtb.w	r8, r8
    75ba:	2b00      	cmp	r3, #0
    75bc:	d0e5      	beq.n	758a <ticker_job+0xce>
		user = &users[count_user];
    75be:	eb0b 04c8 	add.w	r4, fp, r8, lsl #3
		user_op = &user->user_op[0];
    75c2:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
    75c4:	e026      	b.n	7614 <ticker_job+0x158>
		ticker_by_next_slot_get(instance,
    75c6:	68eb      	ldr	r3, [r5, #12]
    75c8:	68aa      	ldr	r2, [r5, #8]
    75ca:	6869      	ldr	r1, [r5, #4]
    75cc:	2000      	movs	r0, #0
    75ce:	9002      	str	r0, [sp, #8]
    75d0:	9001      	str	r0, [sp, #4]
    75d2:	9000      	str	r0, [sp, #0]
    75d4:	4630      	mov	r0, r6
    75d6:	f012 fe16 	bl	1a206 <ticker_by_next_slot_get>
		uop->status = TICKER_STATUS_SUCCESS;
    75da:	2300      	movs	r3, #0
    75dc:	62ab      	str	r3, [r5, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    75de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if (fp_op_func) {
    75e0:	b33b      	cbz	r3, 7632 <ticker_job+0x176>
		fp_op_func(uop->status, uop->op_context);
    75e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    75e4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    75e6:	4798      	blx	r3
    75e8:	e023      	b.n	7632 <ticker_job+0x176>
		if (uop->id < instance->count_node) {
    75ea:	786b      	ldrb	r3, [r5, #1]
    75ec:	7a32      	ldrb	r2, [r6, #8]
    75ee:	4293      	cmp	r3, r2
    75f0:	d20c      	bcs.n	760c <ticker_job+0x150>
			struct ticker_node *node = instance->nodes;
    75f2:	6832      	ldr	r2, [r6, #0]
			node[uop->id].priority =
    75f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    75f8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
				uop->params.priority_set.priority;
    75fc:	f995 2004 	ldrsb.w	r2, [r5, #4]
			node[uop->id].priority =
    7600:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    7604:	2300      	movs	r3, #0
    7606:	62ab      	str	r3, [r5, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    7608:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		break;
    760a:	e7e9      	b.n	75e0 <ticker_job+0x124>
			uop->status = TICKER_STATUS_FAILURE;
    760c:	2301      	movs	r3, #1
    760e:	62ab      	str	r3, [r5, #40]	; 0x28
    7610:	e7fa      	b.n	7608 <ticker_job+0x14c>
			user->first = first;
    7612:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    7614:	7863      	ldrb	r3, [r4, #1]
    7616:	78e2      	ldrb	r2, [r4, #3]
    7618:	4293      	cmp	r3, r2
    761a:	d0c9      	beq.n	75b0 <ticker_job+0xf4>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    761c:	2234      	movs	r2, #52	; 0x34
    761e:	fb02 f303 	mul.w	r3, r2, r3
    7622:	18fd      	adds	r5, r7, r3
	switch (uop->op) {
    7624:	5cfb      	ldrb	r3, [r7, r3]
    7626:	2b02      	cmp	r3, #2
    7628:	d0cd      	beq.n	75c6 <ticker_job+0x10a>
    762a:	2b03      	cmp	r3, #3
    762c:	d0dd      	beq.n	75ea <ticker_job+0x12e>
    762e:	2b01      	cmp	r3, #1
    7630:	d0d3      	beq.n	75da <ticker_job+0x11e>
			first = user->first + 1;
    7632:	7863      	ldrb	r3, [r4, #1]
    7634:	3301      	adds	r3, #1
    7636:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
    7638:	7822      	ldrb	r2, [r4, #0]
    763a:	4293      	cmp	r3, r2
    763c:	d1e9      	bne.n	7612 <ticker_job+0x156>
				first = 0U;
    763e:	9b05      	ldr	r3, [sp, #20]
    7640:	e7e7      	b.n	7612 <ticker_job+0x156>
	if (instance->ticker_id_head == TICKER_NULL) {
    7642:	7f73      	ldrb	r3, [r6, #29]
    7644:	2bff      	cmp	r3, #255	; 0xff
    7646:	d010      	beq.n	766a <ticker_job+0x1ae>
	if (ticker_id_old_head == TICKER_NULL) {
    7648:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    764c:	d017      	beq.n	767e <ticker_job+0x1c2>
	ticker = &instance->nodes[instance->ticker_id_head];
    764e:	6832      	ldr	r2, [r6, #0]
    7650:	7f73      	ldrb	r3, [r6, #29]
    7652:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7656:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	ticks_to_expire = ticker->ticks_to_expire;
    765a:	f8d3 9008 	ldr.w	r9, [r3, #8]
	i = 10U;
    765e:	f04f 080a 	mov.w	r8, #10
    7662:	4633      	mov	r3, r6
    7664:	4646      	mov	r6, r8
    7666:	4698      	mov	r8, r3
    7668:	e032      	b.n	76d0 <ticker_job+0x214>
		if (cntr_stop() == 0) {
    766a:	f008 fa21 	bl	fab0 <cntr_stop>
    766e:	2800      	cmp	r0, #0
    7670:	d18e      	bne.n	7590 <ticker_job+0xd4>
			instance->ticks_slot_previous = 0U;
    7672:	2300      	movs	r3, #0
    7674:	61b3      	str	r3, [r6, #24]
			instance->ticks_current = cntr_cnt_get();
    7676:	f008 fa43 	bl	fb00 <cntr_cnt_get>
    767a:	6170      	str	r0, [r6, #20]
		return;
    767c:	e788      	b.n	7590 <ticker_job+0xd4>
		ticks_current = cntr_cnt_get();
    767e:	f008 fa3f 	bl	fb00 <cntr_cnt_get>
    7682:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    7684:	f008 fa04 	bl	fa90 <cntr_start>
    7688:	2800      	cmp	r0, #0
    768a:	d1e0      	bne.n	764e <ticker_job+0x192>
			instance->ticks_current = ticks_current;
    768c:	6174      	str	r4, [r6, #20]
    768e:	e7de      	b.n	764e <ticker_job+0x192>
		i--;
    7690:	3e01      	subs	r6, #1
		ctr = cntr_cnt_get();
    7692:	f008 fa35 	bl	fb00 <cntr_cnt_get>
    7696:	4605      	mov	r5, r0
		cc = instance->ticks_current;
    7698:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    769c:	4621      	mov	r1, r4
    769e:	f012 ffda 	bl	1a656 <ticker_ticks_diff_get>
    76a2:	3003      	adds	r0, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    76a4:	4581      	cmp	r9, r0
    76a6:	bf2c      	ite	cs
    76a8:	444c      	addcs	r4, r9
    76aa:	1824      	addcc	r4, r4, r0
		cc &= HAL_TICKER_CNTR_MASK;
    76ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    76b0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
    76b4:	4620      	mov	r0, r4
    76b6:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    76b8:	f008 fa22 	bl	fb00 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    76bc:	4629      	mov	r1, r5
    76be:	f012 ffca 	bl	1a656 <ticker_ticks_diff_get>
    76c2:	1cc7      	adds	r7, r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    76c4:	4629      	mov	r1, r5
    76c6:	4620      	mov	r0, r4
    76c8:	f012 ffc5 	bl	1a656 <ticker_ticks_diff_get>
    76cc:	4287      	cmp	r7, r0
    76ce:	d90f      	bls.n	76f0 <ticker_job+0x234>
		LL_ASSERT(i);
    76d0:	2e00      	cmp	r6, #0
    76d2:	d1dd      	bne.n	7690 <ticker_job+0x1d4>
    76d4:	f44f 6314 	mov.w	r3, #2368	; 0x940
    76d8:	4a07      	ldr	r2, [pc, #28]	; (76f8 <ticker_job+0x23c>)
    76da:	4908      	ldr	r1, [pc, #32]	; (76fc <ticker_job+0x240>)
    76dc:	4808      	ldr	r0, [pc, #32]	; (7700 <ticker_job+0x244>)
    76de:	f012 f876 	bl	197ce <assert_print>
    76e2:	4040      	eors	r0, r0
    76e4:	f380 8811 	msr	BASEPRI, r0
    76e8:	f04f 0003 	mov.w	r0, #3
    76ec:	df02      	svc	2
    76ee:	e7cf      	b.n	7690 <ticker_job+0x1d4>
    76f0:	4646      	mov	r6, r8
    76f2:	e74d      	b.n	7590 <ticker_job+0xd4>
    76f4:	4770      	bx	lr
    76f6:	bf00      	nop
    76f8:	0001ea58 	.word	0x0001ea58
    76fc:	0001e808 	.word	0x0001e808
    7700:	0001e920 	.word	0x0001e920

00007704 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    7704:	b538      	push	{r3, r4, r5, lr}
    7706:	4604      	mov	r4, r0
    7708:	460d      	mov	r5, r1
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
    770a:	2000      	movs	r0, #0
    770c:	f014 fb7d 	bl	1be0a <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
    7710:	f010 0f06 	tst.w	r0, #6
    7714:	d10e      	bne.n	7734 <ll_addr_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    7716:	b134      	cbz	r4, 7726 <ll_addr_set+0x22>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    7718:	4b07      	ldr	r3, [pc, #28]	; (7738 <ll_addr_set+0x34>)
    771a:	6828      	ldr	r0, [r5, #0]
    771c:	6018      	str	r0, [r3, #0]
    771e:	88aa      	ldrh	r2, [r5, #4]
    7720:	809a      	strh	r2, [r3, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    7722:	2000      	movs	r0, #0
}
    7724:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    7726:	4b05      	ldr	r3, [pc, #20]	; (773c <ll_addr_set+0x38>)
    7728:	6828      	ldr	r0, [r5, #0]
    772a:	6018      	str	r0, [r3, #0]
    772c:	88aa      	ldrh	r2, [r5, #4]
    772e:	809a      	strh	r2, [r3, #4]
	return 0;
    7730:	4620      	mov	r0, r4
    7732:	e7f7      	b.n	7724 <ll_addr_set+0x20>
		return BT_HCI_ERR_CMD_DISALLOWED;
    7734:	200c      	movs	r0, #12
    7736:	e7f5      	b.n	7724 <ll_addr_set+0x20>
    7738:	200024e4 	.word	0x200024e4
    773c:	200024dc 	.word	0x200024dc

00007740 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
    7740:	2801      	cmp	r0, #1
    7742:	d802      	bhi.n	774a <ll_addr_get+0xa>
		return NULL;
	}

	if (addr_type) {
    7744:	b918      	cbnz	r0, 774e <ll_addr_get+0xe>
		return rnd_addr;
	}

	return pub_addr;
    7746:	4803      	ldr	r0, [pc, #12]	; (7754 <ll_addr_get+0x14>)
    7748:	4770      	bx	lr
		return NULL;
    774a:	2000      	movs	r0, #0
    774c:	4770      	bx	lr
		return rnd_addr;
    774e:	4802      	ldr	r0, [pc, #8]	; (7758 <ll_addr_get+0x18>)
}
    7750:	4770      	bx	lr
    7752:	bf00      	nop
    7754:	200024dc 	.word	0x200024dc
    7758:	200024e4 	.word	0x200024e4

0000775c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    775c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    775e:	4802      	ldr	r0, [pc, #8]	; (7768 <hci_driver_init+0xc>)
    7760:	f7fe f9ea 	bl	5b38 <bt_hci_driver_register>

	return 0;
}
    7764:	2000      	movs	r0, #0
    7766:	bd08      	pop	{r3, pc}
    7768:	0001eafc 	.word	0x0001eafc

0000776c <cmd_handle>:
{
    776c:	b510      	push	{r4, lr}
    776e:	b082      	sub	sp, #8
	struct node_rx_pdu *node_rx = NULL;
    7770:	2300      	movs	r3, #0
    7772:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    7774:	a901      	add	r1, sp, #4
    7776:	f001 fca5 	bl	90c4 <hci_cmd_handle>
	if (evt) {
    777a:	b158      	cbz	r0, 7794 <cmd_handle+0x28>
		bt_recv_prio(evt);
    777c:	f7fe f9be 	bl	5afc <bt_recv_prio>
		if (node_rx) {
    7780:	9c01      	ldr	r4, [sp, #4]
    7782:	b13c      	cbz	r4, 7794 <cmd_handle+0x28>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    7784:	4620      	mov	r0, r4
    7786:	f014 f95e 	bl	1ba46 <hci_get_class>
    778a:	7160      	strb	r0, [r4, #5]
			k_fifo_put(&recv_fifo, node_rx);
    778c:	9901      	ldr	r1, [sp, #4]
    778e:	4803      	ldr	r0, [pc, #12]	; (779c <cmd_handle+0x30>)
    7790:	f016 fa35 	bl	1dbfe <k_queue_append>
}
    7794:	2000      	movs	r0, #0
    7796:	b002      	add	sp, #8
    7798:	bd10      	pop	{r4, pc}
    779a:	bf00      	nop
    779c:	20000f70 	.word	0x20000f70

000077a0 <recv_thread>:
{
    77a0:	b530      	push	{r4, r5, lr}
    77a2:	b083      	sub	sp, #12
	return z_impl_k_queue_get(queue, timeout);
    77a4:	f04f 32ff 	mov.w	r2, #4294967295
    77a8:	f04f 33ff 	mov.w	r3, #4294967295
    77ac:	4827      	ldr	r0, [pc, #156]	; (784c <recv_thread+0xac>)
    77ae:	f00b fb73 	bl	12e98 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    77b2:	4604      	mov	r4, r0
    77b4:	2800      	cmp	r0, #0
    77b6:	d037      	beq.n	7828 <recv_thread+0x88>
	buf = encode_node(node_rx, class);
    77b8:	f990 3005 	ldrsb.w	r3, [r0, #5]
    77bc:	9001      	str	r0, [sp, #4]
	switch (class) {
    77be:	1e5a      	subs	r2, r3, #1
    77c0:	2a03      	cmp	r2, #3
    77c2:	d81d      	bhi.n	7800 <recv_thread+0x60>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    77c4:	2b02      	cmp	r3, #2
    77c6:	d013      	beq.n	77f0 <recv_thread+0x50>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    77c8:	f04f 32ff 	mov.w	r2, #4294967295
    77cc:	f04f 33ff 	mov.w	r3, #4294967295
    77d0:	2001      	movs	r0, #1
    77d2:	f7fd fcdf 	bl	5194 <bt_buf_get_rx>
    77d6:	4604      	mov	r4, r0
		if (buf) {
    77d8:	b11c      	cbz	r4, 77e2 <recv_thread+0x42>
			hci_evt_encode(node_rx, buf);
    77da:	4621      	mov	r1, r4
    77dc:	9801      	ldr	r0, [sp, #4]
    77de:	f014 f927 	bl	1ba30 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    77e2:	9b01      	ldr	r3, [sp, #4]
    77e4:	2200      	movs	r2, #0
    77e6:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    77e8:	a801      	add	r0, sp, #4
    77ea:	f001 fe29 	bl	9440 <ll_rx_mem_release>
	return buf;
    77ee:	e01b      	b.n	7828 <recv_thread+0x88>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    77f0:	2200      	movs	r2, #0
    77f2:	2300      	movs	r3, #0
    77f4:	2101      	movs	r1, #1
    77f6:	2000      	movs	r0, #0
    77f8:	f7fd fcf6 	bl	51e8 <bt_buf_get_evt>
    77fc:	4604      	mov	r4, r0
    77fe:	e7eb      	b.n	77d8 <recv_thread+0x38>
		LL_ASSERT(0);
    7800:	f240 13a3 	movw	r3, #419	; 0x1a3
    7804:	4a12      	ldr	r2, [pc, #72]	; (7850 <recv_thread+0xb0>)
    7806:	4913      	ldr	r1, [pc, #76]	; (7854 <recv_thread+0xb4>)
    7808:	4813      	ldr	r0, [pc, #76]	; (7858 <recv_thread+0xb8>)
    780a:	f011 ffe0 	bl	197ce <assert_print>
    780e:	4040      	eors	r0, r0
    7810:	f380 8811 	msr	BASEPRI, r0
    7814:	f04f 0003 	mov.w	r0, #3
    7818:	df02      	svc	2
	struct net_buf *buf = NULL;
    781a:	2400      	movs	r4, #0
		break;
    781c:	e7e1      	b.n	77e2 <recv_thread+0x42>
				net_buf_unref(frag);
    781e:	4628      	mov	r0, r5
    7820:	f015 fa8c 	bl	1cd3c <net_buf_unref>
	z_impl_k_yield();
    7824:	f00c f86a 	bl	138fc <z_impl_k_yield>
		while (buf) {
    7828:	2c00      	cmp	r4, #0
    782a:	d0bb      	beq.n	77a4 <recv_thread+0x4>
			frag = net_buf_ref(buf);
    782c:	4620      	mov	r0, r4
    782e:	f015 faab 	bl	1cd88 <net_buf_ref>
    7832:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    7834:	4621      	mov	r1, r4
    7836:	2000      	movs	r0, #0
    7838:	f015 faca 	bl	1cdd0 <net_buf_frag_del>
    783c:	4604      	mov	r4, r0
			if (frag->len) {
    783e:	89ab      	ldrh	r3, [r5, #12]
    7840:	2b00      	cmp	r3, #0
    7842:	d0ec      	beq.n	781e <recv_thread+0x7e>
				bt_recv(frag);
    7844:	4628      	mov	r0, r5
    7846:	f012 f994 	bl	19b72 <bt_recv>
    784a:	e7eb      	b.n	7824 <recv_thread+0x84>
    784c:	20000f70 	.word	0x20000f70
    7850:	0001ea98 	.word	0x0001ea98
    7854:	0001ead8 	.word	0x0001ead8
    7858:	0001e920 	.word	0x0001e920

0000785c <prio_recv_thread>:
{
    785c:	b510      	push	{r4, lr}
    785e:	b082      	sub	sp, #8
    7860:	e00d      	b.n	787e <prio_recv_thread+0x22>
					node_rx->hdr.next = NULL;
    7862:	9b01      	ldr	r3, [sp, #4]
    7864:	2200      	movs	r2, #0
    7866:	601a      	str	r2, [r3, #0]
					ll_rx_mem_release((void **)&node_rx);
    7868:	a801      	add	r0, sp, #4
    786a:	f001 fde9 	bl	9440 <ll_rx_mem_release>
    786e:	e024      	b.n	78ba <prio_recv_thread+0x5e>
			if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    7870:	f89d 3001 	ldrb.w	r3, [sp, #1]
    7874:	f013 0f02 	tst.w	r3, #2
    7878:	d12b      	bne.n	78d2 <prio_recv_thread+0x76>
		if (iso_received || node_rx) {
    787a:	9b01      	ldr	r3, [sp, #4]
    787c:	b373      	cbz	r3, 78dc <prio_recv_thread+0x80>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    787e:	f10d 0102 	add.w	r1, sp, #2
    7882:	a801      	add	r0, sp, #4
    7884:	f001 fdc0 	bl	9408 <ll_rx_get>
    7888:	2800      	cmp	r0, #0
    788a:	d1f8      	bne.n	787e <prio_recv_thread+0x22>
		if (node_rx) {
    788c:	9b01      	ldr	r3, [sp, #4]
    788e:	2b00      	cmp	r3, #0
    7890:	d0f3      	beq.n	787a <prio_recv_thread+0x1e>
			ll_rx_dequeue();
    7892:	f001 fd35 	bl	9300 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    7896:	9c01      	ldr	r4, [sp, #4]
    7898:	4620      	mov	r0, r4
    789a:	f014 f8d4 	bl	1ba46 <hci_get_class>
    789e:	7160      	strb	r0, [r4, #5]
			buf = process_prio_evt(node_rx, &evt_flags);
    78a0:	f10d 0101 	add.w	r1, sp, #1
    78a4:	9801      	ldr	r0, [sp, #4]
    78a6:	f013 fa60 	bl	1ad6a <process_prio_evt>
			if (buf) {
    78aa:	4604      	mov	r4, r0
    78ac:	2800      	cmp	r0, #0
    78ae:	d0df      	beq.n	7870 <prio_recv_thread+0x14>
				if (!(evt_flags & BT_HCI_EVT_FLAG_RECV)) {
    78b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    78b4:	f013 0f02 	tst.w	r3, #2
    78b8:	d0d3      	beq.n	7862 <prio_recv_thread+0x6>
				bt_recv_prio(buf);
    78ba:	4620      	mov	r0, r4
    78bc:	f7fe f91e 	bl	5afc <bt_recv_prio>
				if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    78c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
    78c4:	f013 0f02 	tst.w	r3, #2
    78c8:	d0d2      	beq.n	7870 <prio_recv_thread+0x14>
					net_buf_unref(buf);
    78ca:	4620      	mov	r0, r4
    78cc:	f015 fa36 	bl	1cd3c <net_buf_unref>
    78d0:	e7ce      	b.n	7870 <prio_recv_thread+0x14>
				k_fifo_put(&recv_fifo, node_rx);
    78d2:	9901      	ldr	r1, [sp, #4]
    78d4:	4805      	ldr	r0, [pc, #20]	; (78ec <prio_recv_thread+0x90>)
    78d6:	f016 f992 	bl	1dbfe <k_queue_append>
    78da:	e7ce      	b.n	787a <prio_recv_thread+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    78dc:	f04f 32ff 	mov.w	r2, #4294967295
    78e0:	f04f 33ff 	mov.w	r3, #4294967295
    78e4:	4802      	ldr	r0, [pc, #8]	; (78f0 <prio_recv_thread+0x94>)
    78e6:	f00b fb39 	bl	12f5c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    78ea:	e7c8      	b.n	787e <prio_recv_thread+0x22>
    78ec:	20000f70 	.word	0x20000f70
    78f0:	20000f58 	.word	0x20000f58

000078f4 <hci_driver_open>:
{
    78f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    78f8:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    78fa:	481d      	ldr	r0, [pc, #116]	; (7970 <hci_driver_open+0x7c>)
    78fc:	f002 f9de 	bl	9cbc <ll_init>
	if (err) {
    7900:	4605      	mov	r5, r0
    7902:	b118      	cbz	r0, 790c <hci_driver_open+0x18>
}
    7904:	4628      	mov	r0, r5
    7906:	b008      	add	sp, #32
    7908:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	hci_init(NULL);
    790c:	f014 f8bc 	bl	1ba88 <hci_init>
			K_PRIO_COOP(CONFIG_BT_DRIVER_RX_HIGH_PRIO), 0, K_NO_WAIT);
    7910:	f04f 0800 	mov.w	r8, #0
    7914:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7918:	4e16      	ldr	r6, [pc, #88]	; (7974 <hci_driver_open+0x80>)
    791a:	e9cd 8906 	strd	r8, r9, [sp, #24]
    791e:	2400      	movs	r4, #0
    7920:	9404      	str	r4, [sp, #16]
    7922:	f06f 0309 	mvn.w	r3, #9
    7926:	9303      	str	r3, [sp, #12]
    7928:	9402      	str	r4, [sp, #8]
    792a:	9401      	str	r4, [sp, #4]
    792c:	9400      	str	r4, [sp, #0]
    792e:	4b12      	ldr	r3, [pc, #72]	; (7978 <hci_driver_open+0x84>)
    7930:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    7934:	4911      	ldr	r1, [pc, #68]	; (797c <hci_driver_open+0x88>)
    7936:	4630      	mov	r0, r6
    7938:	f016 f897 	bl	1da6a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    793c:	4910      	ldr	r1, [pc, #64]	; (7980 <hci_driver_open+0x8c>)
    793e:	4630      	mov	r0, r6
    7940:	f00b f8f0 	bl	12b24 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7944:	4e0f      	ldr	r6, [pc, #60]	; (7984 <hci_driver_open+0x90>)
    7946:	e9cd 8906 	strd	r8, r9, [sp, #24]
    794a:	9404      	str	r4, [sp, #16]
    794c:	f06f 0307 	mvn.w	r3, #7
    7950:	9303      	str	r3, [sp, #12]
    7952:	9402      	str	r4, [sp, #8]
    7954:	9401      	str	r4, [sp, #4]
    7956:	9400      	str	r4, [sp, #0]
    7958:	4b0b      	ldr	r3, [pc, #44]	; (7988 <hci_driver_open+0x94>)
    795a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    795e:	490b      	ldr	r1, [pc, #44]	; (798c <hci_driver_open+0x98>)
    7960:	4630      	mov	r0, r6
    7962:	f016 f882 	bl	1da6a <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    7966:	490a      	ldr	r1, [pc, #40]	; (7990 <hci_driver_open+0x9c>)
    7968:	4630      	mov	r0, r6
    796a:	f00b f8db 	bl	12b24 <z_impl_k_thread_name_set>
	return 0;
    796e:	e7c9      	b.n	7904 <hci_driver_open+0x10>
    7970:	20000f58 	.word	0x20000f58
    7974:	200010c8 	.word	0x200010c8
    7978:	0000785d 	.word	0x0000785d
    797c:	20009560 	.word	0x20009560
    7980:	0001eadc 	.word	0x0001eadc
    7984:	20001180 	.word	0x20001180
    7988:	000077a1 	.word	0x000077a1
    798c:	20009740 	.word	0x20009740
    7990:	0001eae8 	.word	0x0001eae8

00007994 <dup_ext_adv_reset>:
	}
}

#if defined(CONFIG_BT_CTLR_SYNC_PERIODIC_ADI_SUPPORT)
static void dup_ext_adv_reset(void)
{
    7994:	b510      	push	{r4, lr}
	for (int32_t i = 0; i < dup_count; i++) {
    7996:	2400      	movs	r4, #0
    7998:	e00b      	b.n	79b2 <dup_ext_adv_reset+0x1e>
		struct dup_entry *dup;

		dup = &dup_filter[i];
		dup->mask = 0U;
    799a:	4808      	ldr	r0, [pc, #32]	; (79bc <dup_ext_adv_reset+0x28>)
    799c:	2326      	movs	r3, #38	; 0x26
    799e:	fb04 f303 	mul.w	r3, r4, r3
    79a2:	18c2      	adds	r2, r0, r3
    79a4:	2100      	movs	r1, #0
    79a6:	71d1      	strb	r1, [r2, #7]
		dup_ext_adv_mode_reset(dup->adv_mode);
    79a8:	3308      	adds	r3, #8
    79aa:	4418      	add	r0, r3
    79ac:	f013 f9ff 	bl	1adae <dup_ext_adv_mode_reset>
	for (int32_t i = 0; i < dup_count; i++) {
    79b0:	3401      	adds	r4, #1
    79b2:	4b03      	ldr	r3, [pc, #12]	; (79c0 <dup_ext_adv_reset+0x2c>)
    79b4:	681b      	ldr	r3, [r3, #0]
    79b6:	42a3      	cmp	r3, r4
    79b8:	dcef      	bgt.n	799a <dup_ext_adv_reset+0x6>
	}
}
    79ba:	bd10      	pop	{r4, pc}
    79bc:	200024f4 	.word	0x200024f4
    79c0:	200024ec 	.word	0x200024ec

000079c4 <cmd_complete_status>:
{
    79c4:	b538      	push	{r3, r4, r5, lr}
    79c6:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    79c8:	2101      	movs	r1, #1
    79ca:	4b06      	ldr	r3, [pc, #24]	; (79e4 <cmd_complete_status+0x20>)
    79cc:	8818      	ldrh	r0, [r3, #0]
    79ce:	f012 f920 	bl	19c12 <bt_hci_cmd_complete_create>
    79d2:	4604      	mov	r4, r0
    79d4:	2101      	movs	r1, #1
    79d6:	3008      	adds	r0, #8
    79d8:	f015 fa06 	bl	1cde8 <net_buf_simple_add>
	ccst->status = status;
    79dc:	7005      	strb	r5, [r0, #0]
}
    79de:	4620      	mov	r0, r4
    79e0:	bd38      	pop	{r3, r4, r5, pc}
    79e2:	bf00      	nop
    79e4:	2000928c 	.word	0x2000928c

000079e8 <set_event_mask_page_2>:
{
    79e8:	b510      	push	{r4, lr}
    79ea:	460c      	mov	r4, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    79ec:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    79ee:	79d9      	ldrb	r1, [r3, #7]
    79f0:	799a      	ldrb	r2, [r3, #6]
    79f2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    79f6:	7958      	ldrb	r0, [r3, #5]
    79f8:	791a      	ldrb	r2, [r3, #4]
    79fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    79fe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    7a02:	78d8      	ldrb	r0, [r3, #3]
    7a04:	7899      	ldrb	r1, [r3, #2]
    7a06:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    7a0a:	7858      	ldrb	r0, [r3, #1]
    7a0c:	781b      	ldrb	r3, [r3, #0]
    7a0e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    7a12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    7a16:	4904      	ldr	r1, [pc, #16]	; (7a28 <set_event_mask_page_2+0x40>)
    7a18:	600b      	str	r3, [r1, #0]
    7a1a:	604a      	str	r2, [r1, #4]
	*evt = cmd_complete_status(0x00);
    7a1c:	2000      	movs	r0, #0
    7a1e:	f7ff ffd1 	bl	79c4 <cmd_complete_status>
    7a22:	6020      	str	r0, [r4, #0]
}
    7a24:	bd10      	pop	{r4, pc}
    7a26:	bf00      	nop
    7a28:	20001238 	.word	0x20001238

00007a2c <le_scan_timeout>:
	le_adv_ext_report(pdu_data, node_rx, buf, BT_HCI_LE_EXT_SCAN_PHY_CODED);
}

static void le_scan_timeout(struct pdu_data *pdu_data,
			    struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    7a2c:	b508      	push	{r3, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7a2e:	4b08      	ldr	r3, [pc, #32]	; (7a50 <le_scan_timeout+0x24>)
    7a30:	685b      	ldr	r3, [r3, #4]
    7a32:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    7a36:	d005      	beq.n	7a44 <le_scan_timeout+0x18>
    7a38:	4610      	mov	r0, r2
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_TIMEOUT)) {
    7a3a:	4b06      	ldr	r3, [pc, #24]	; (7a54 <le_scan_timeout+0x28>)
    7a3c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7a3e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7a42:	d100      	bne.n	7a46 <le_scan_timeout+0x1a>
		return;
	}

	meta_evt(buf, BT_HCI_EVT_LE_SCAN_TIMEOUT, 0U);
}
    7a44:	bd08      	pop	{r3, pc}
	meta_evt(buf, BT_HCI_EVT_LE_SCAN_TIMEOUT, 0U);
    7a46:	2200      	movs	r2, #0
    7a48:	2111      	movs	r1, #17
    7a4a:	f013 fa2b 	bl	1aea4 <meta_evt>
    7a4e:	e7f9      	b.n	7a44 <le_scan_timeout+0x18>
    7a50:	200000d8 	.word	0x200000d8
    7a54:	200000e0 	.word	0x200000e0

00007a58 <le_per_adv_sync_lost>:
				 struct node_rx_pdu *node_rx,
				 struct net_buf *buf)
{
	struct bt_hci_evt_le_per_adv_sync_lost *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7a58:	4b0a      	ldr	r3, [pc, #40]	; (7a84 <le_per_adv_sync_lost+0x2c>)
    7a5a:	685b      	ldr	r3, [r3, #4]
    7a5c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    7a60:	d00f      	beq.n	7a82 <le_per_adv_sync_lost+0x2a>
{
    7a62:	b510      	push	{r4, lr}
    7a64:	460c      	mov	r4, r1
    7a66:	4610      	mov	r0, r2
	    !(le_event_mask & BT_EVT_MASK_LE_PER_ADV_SYNC_LOST)) {
    7a68:	4b07      	ldr	r3, [pc, #28]	; (7a88 <le_per_adv_sync_lost+0x30>)
    7a6a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7a6c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    7a70:	d100      	bne.n	7a74 <le_per_adv_sync_lost+0x1c>
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_PER_ADV_SYNC_LOST, sizeof(*sep));
	sep->handle = sys_cpu_to_le16(node_rx->hdr.handle);
}
    7a72:	bd10      	pop	{r4, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_PER_ADV_SYNC_LOST, sizeof(*sep));
    7a74:	2202      	movs	r2, #2
    7a76:	2110      	movs	r1, #16
    7a78:	f013 fa14 	bl	1aea4 <meta_evt>
	sep->handle = sys_cpu_to_le16(node_rx->hdr.handle);
    7a7c:	88e3      	ldrh	r3, [r4, #6]
    7a7e:	8003      	strh	r3, [r0, #0]
    7a80:	e7f7      	b.n	7a72 <le_per_adv_sync_lost+0x1a>
    7a82:	4770      	bx	lr
    7a84:	200000d8 	.word	0x200000d8
    7a88:	200000e0 	.word	0x200000e0

00007a8c <reset>:
{
    7a8c:	b5d0      	push	{r4, r6, r7, lr}
	dup_count = DUP_FILTER_DISABLED;
    7a8e:	4b10      	ldr	r3, [pc, #64]	; (7ad0 <reset+0x44>)
    7a90:	f04f 32ff 	mov.w	r2, #4294967295
    7a94:	601a      	str	r2, [r3, #0]
	dup_scan = false;
    7a96:	4b0f      	ldr	r3, [pc, #60]	; (7ad4 <reset+0x48>)
    7a98:	2200      	movs	r2, #0
    7a9a:	701a      	strb	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    7a9c:	4b0e      	ldr	r3, [pc, #56]	; (7ad8 <reset+0x4c>)
    7a9e:	f04f 36ff 	mov.w	r6, #4294967295
    7aa2:	f641 77ff 	movw	r7, #8191	; 0x1fff
    7aa6:	e9c3 6700 	strd	r6, r7, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    7aaa:	4b0c      	ldr	r3, [pc, #48]	; (7adc <reset+0x50>)
    7aac:	2600      	movs	r6, #0
    7aae:	2700      	movs	r7, #0
    7ab0:	e9c3 6700 	strd	r6, r7, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    7ab4:	4b0a      	ldr	r3, [pc, #40]	; (7ae0 <reset+0x54>)
    7ab6:	261f      	movs	r6, #31
    7ab8:	2700      	movs	r7, #0
    7aba:	e9c3 6700 	strd	r6, r7, [r3]
	if (buf) {
    7abe:	b130      	cbz	r0, 7ace <reset+0x42>
    7ac0:	460c      	mov	r4, r1
		ll_reset();
    7ac2:	f002 f973 	bl	9dac <ll_reset>
		*evt = cmd_complete_status(0x00);
    7ac6:	2000      	movs	r0, #0
    7ac8:	f7ff ff7c 	bl	79c4 <cmd_complete_status>
    7acc:	6020      	str	r0, [r4, #0]
}
    7ace:	bdd0      	pop	{r4, r6, r7, pc}
    7ad0:	200024ec 	.word	0x200024ec
    7ad4:	20009294 	.word	0x20009294
    7ad8:	200000d8 	.word	0x200000d8
    7adc:	20001238 	.word	0x20001238
    7ae0:	200000e0 	.word	0x200000e0

00007ae4 <le_set_scan_enable>:
{
    7ae4:	b538      	push	{r3, r4, r5, lr}
    7ae6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    7ae8:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_legacy_check(evt)) {
    7aea:	4608      	mov	r0, r1
    7aec:	f013 f9c3 	bl	1ae76 <adv_cmds_legacy_check>
    7af0:	2800      	cmp	r0, #0
    7af2:	d12d      	bne.n	7b50 <le_set_scan_enable+0x6c>
	if (cmd->enable && cmd->filter_dup) {
    7af4:	782b      	ldrb	r3, [r5, #0]
    7af6:	b1f3      	cbz	r3, 7b36 <le_set_scan_enable+0x52>
    7af8:	786b      	ldrb	r3, [r5, #1]
    7afa:	b1e3      	cbz	r3, 7b36 <le_set_scan_enable+0x52>
		} else if (dup_count == DUP_FILTER_DISABLED) {
    7afc:	4b16      	ldr	r3, [pc, #88]	; (7b58 <le_set_scan_enable+0x74>)
    7afe:	681b      	ldr	r3, [r3, #0]
    7b00:	f1b3 3fff 	cmp.w	r3, #4294967295
    7b04:	d008      	beq.n	7b18 <le_set_scan_enable+0x34>
		} else if (!dup_scan) {
    7b06:	4b15      	ldr	r3, [pc, #84]	; (7b5c <le_set_scan_enable+0x78>)
    7b08:	781b      	ldrb	r3, [r3, #0]
    7b0a:	b173      	cbz	r3, 7b2a <le_set_scan_enable+0x46>
			dup_count = 0;
    7b0c:	2300      	movs	r3, #0
    7b0e:	4a12      	ldr	r2, [pc, #72]	; (7b58 <le_set_scan_enable+0x74>)
    7b10:	6013      	str	r3, [r2, #0]
			dup_curr = 0U;
    7b12:	4a13      	ldr	r2, [pc, #76]	; (7b60 <le_set_scan_enable+0x7c>)
    7b14:	6013      	str	r3, [r2, #0]
    7b16:	e011      	b.n	7b3c <le_set_scan_enable+0x58>
			dup_scan = true;
    7b18:	4b10      	ldr	r3, [pc, #64]	; (7b5c <le_set_scan_enable+0x78>)
    7b1a:	2201      	movs	r2, #1
    7b1c:	701a      	strb	r2, [r3, #0]
			dup_count = 0;
    7b1e:	2300      	movs	r3, #0
    7b20:	4a0d      	ldr	r2, [pc, #52]	; (7b58 <le_set_scan_enable+0x74>)
    7b22:	6013      	str	r3, [r2, #0]
			dup_curr = 0U;
    7b24:	4a0e      	ldr	r2, [pc, #56]	; (7b60 <le_set_scan_enable+0x7c>)
    7b26:	6013      	str	r3, [r2, #0]
    7b28:	e008      	b.n	7b3c <le_set_scan_enable+0x58>
			dup_scan = true;
    7b2a:	4b0c      	ldr	r3, [pc, #48]	; (7b5c <le_set_scan_enable+0x78>)
    7b2c:	2201      	movs	r2, #1
    7b2e:	701a      	strb	r2, [r3, #0]
			dup_ext_adv_reset();
    7b30:	f7ff ff30 	bl	7994 <dup_ext_adv_reset>
    7b34:	e002      	b.n	7b3c <le_set_scan_enable+0x58>
		dup_scan = false;
    7b36:	4b09      	ldr	r3, [pc, #36]	; (7b5c <le_set_scan_enable+0x78>)
    7b38:	2200      	movs	r2, #0
    7b3a:	701a      	strb	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable, 0, 0);
    7b3c:	2200      	movs	r2, #0
    7b3e:	4611      	mov	r1, r2
    7b40:	7828      	ldrb	r0, [r5, #0]
    7b42:	f014 f8f9 	bl	1bd38 <ll_scan_enable>
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCAN_ENABLE_STRICT) &&
    7b46:	280c      	cmp	r0, #12
    7b48:	d003      	beq.n	7b52 <le_set_scan_enable+0x6e>
	*evt = cmd_complete_status(status);
    7b4a:	f7ff ff3b 	bl	79c4 <cmd_complete_status>
    7b4e:	6020      	str	r0, [r4, #0]
}
    7b50:	bd38      	pop	{r3, r4, r5, pc}
		status = BT_HCI_ERR_SUCCESS;
    7b52:	2000      	movs	r0, #0
    7b54:	e7f9      	b.n	7b4a <le_set_scan_enable+0x66>
    7b56:	bf00      	nop
    7b58:	200024ec 	.word	0x200024ec
    7b5c:	20009294 	.word	0x20009294
    7b60:	200024f0 	.word	0x200024f0

00007b64 <le_set_ext_scan_enable>:
{
    7b64:	b538      	push	{r3, r4, r5, lr}
    7b66:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_ext_scan_enable *cmd = (void *)buf->data;
    7b68:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
    7b6a:	4608      	mov	r0, r1
    7b6c:	f013 f917 	bl	1ad9e <adv_cmds_ext_check>
    7b70:	2800      	cmp	r0, #0
    7b72:	d12d      	bne.n	7bd0 <le_set_ext_scan_enable+0x6c>
	if (cmd->enable && cmd->filter_dup) {
    7b74:	782b      	ldrb	r3, [r5, #0]
    7b76:	b1f3      	cbz	r3, 7bb6 <le_set_ext_scan_enable+0x52>
    7b78:	786b      	ldrb	r3, [r5, #1]
    7b7a:	b1e3      	cbz	r3, 7bb6 <le_set_ext_scan_enable+0x52>
		} else if (dup_count == DUP_FILTER_DISABLED) {
    7b7c:	4b16      	ldr	r3, [pc, #88]	; (7bd8 <le_set_ext_scan_enable+0x74>)
    7b7e:	681b      	ldr	r3, [r3, #0]
    7b80:	f1b3 3fff 	cmp.w	r3, #4294967295
    7b84:	d008      	beq.n	7b98 <le_set_ext_scan_enable+0x34>
		} else if (!dup_scan) {
    7b86:	4b15      	ldr	r3, [pc, #84]	; (7bdc <le_set_ext_scan_enable+0x78>)
    7b88:	781b      	ldrb	r3, [r3, #0]
    7b8a:	b173      	cbz	r3, 7baa <le_set_ext_scan_enable+0x46>
			dup_count = 0;
    7b8c:	2300      	movs	r3, #0
    7b8e:	4a12      	ldr	r2, [pc, #72]	; (7bd8 <le_set_ext_scan_enable+0x74>)
    7b90:	6013      	str	r3, [r2, #0]
			dup_curr = 0U;
    7b92:	4a13      	ldr	r2, [pc, #76]	; (7be0 <le_set_ext_scan_enable+0x7c>)
    7b94:	6013      	str	r3, [r2, #0]
    7b96:	e011      	b.n	7bbc <le_set_ext_scan_enable+0x58>
			dup_scan = true;
    7b98:	4b10      	ldr	r3, [pc, #64]	; (7bdc <le_set_ext_scan_enable+0x78>)
    7b9a:	2201      	movs	r2, #1
    7b9c:	701a      	strb	r2, [r3, #0]
			dup_count = 0;
    7b9e:	2300      	movs	r3, #0
    7ba0:	4a0d      	ldr	r2, [pc, #52]	; (7bd8 <le_set_ext_scan_enable+0x74>)
    7ba2:	6013      	str	r3, [r2, #0]
			dup_curr = 0U;
    7ba4:	4a0e      	ldr	r2, [pc, #56]	; (7be0 <le_set_ext_scan_enable+0x7c>)
    7ba6:	6013      	str	r3, [r2, #0]
    7ba8:	e008      	b.n	7bbc <le_set_ext_scan_enable+0x58>
			dup_scan = true;
    7baa:	4b0c      	ldr	r3, [pc, #48]	; (7bdc <le_set_ext_scan_enable+0x78>)
    7bac:	2201      	movs	r2, #1
    7bae:	701a      	strb	r2, [r3, #0]
			dup_ext_adv_reset();
    7bb0:	f7ff fef0 	bl	7994 <dup_ext_adv_reset>
    7bb4:	e002      	b.n	7bbc <le_set_ext_scan_enable+0x58>
		dup_scan = false;
    7bb6:	4b09      	ldr	r3, [pc, #36]	; (7bdc <le_set_ext_scan_enable+0x78>)
    7bb8:	2200      	movs	r2, #0
    7bba:	701a      	strb	r2, [r3, #0]
	status = ll_scan_enable(cmd->enable, cmd->duration, cmd->period);
    7bbc:	88aa      	ldrh	r2, [r5, #4]
    7bbe:	8869      	ldrh	r1, [r5, #2]
    7bc0:	7828      	ldrb	r0, [r5, #0]
    7bc2:	f014 f8b9 	bl	1bd38 <ll_scan_enable>
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCAN_ENABLE_STRICT) &&
    7bc6:	280c      	cmp	r0, #12
    7bc8:	d003      	beq.n	7bd2 <le_set_ext_scan_enable+0x6e>
	*evt = cmd_complete_status(status);
    7bca:	f7ff fefb 	bl	79c4 <cmd_complete_status>
    7bce:	6020      	str	r0, [r4, #0]
}
    7bd0:	bd38      	pop	{r3, r4, r5, pc}
		status = BT_HCI_ERR_SUCCESS;
    7bd2:	2000      	movs	r0, #0
    7bd4:	e7f9      	b.n	7bca <le_set_ext_scan_enable+0x66>
    7bd6:	bf00      	nop
    7bd8:	200024ec 	.word	0x200024ec
    7bdc:	20009294 	.word	0x20009294
    7be0:	200024f0 	.word	0x200024f0

00007be4 <cmd_status>:
{
    7be4:	b508      	push	{r3, lr}
    7be6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    7be8:	4b02      	ldr	r3, [pc, #8]	; (7bf4 <cmd_status+0x10>)
    7bea:	8818      	ldrh	r0, [r3, #0]
    7bec:	f012 f823 	bl	19c36 <bt_hci_cmd_status_create>
}
    7bf0:	bd08      	pop	{r3, pc}
    7bf2:	bf00      	nop
    7bf4:	2000928c 	.word	0x2000928c

00007bf8 <le_per_adv_create_sync>:
{
    7bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bfa:	b085      	sub	sp, #20
    7bfc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_per_adv_create_sync *cmd = (void *)buf->data;
    7bfe:	6884      	ldr	r4, [r0, #8]
	if (adv_cmds_ext_check(NULL)) {
    7c00:	2000      	movs	r0, #0
    7c02:	f013 f8cc 	bl	1ad9e <adv_cmds_ext_check>
    7c06:	b9f0      	cbnz	r0, 7c46 <le_per_adv_create_sync+0x4e>
	if (cmd->options & BT_HCI_LE_PER_ADV_CREATE_SYNC_FP_FILTER_DUPLICATE) {
    7c08:	7820      	ldrb	r0, [r4, #0]
    7c0a:	f010 0f04 	tst.w	r0, #4
    7c0e:	d01f      	beq.n	7c50 <le_per_adv_create_sync+0x58>
		if (!dup_scan || (dup_count == DUP_FILTER_DISABLED)) {
    7c10:	4b18      	ldr	r3, [pc, #96]	; (7c74 <le_per_adv_create_sync+0x7c>)
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	b123      	cbz	r3, 7c20 <le_per_adv_create_sync+0x28>
    7c16:	4b18      	ldr	r3, [pc, #96]	; (7c78 <le_per_adv_create_sync+0x80>)
    7c18:	681b      	ldr	r3, [r3, #0]
    7c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    7c1e:	d104      	bne.n	7c2a <le_per_adv_create_sync+0x32>
			dup_count = 0;
    7c20:	2300      	movs	r3, #0
    7c22:	4a15      	ldr	r2, [pc, #84]	; (7c78 <le_per_adv_create_sync+0x80>)
    7c24:	6013      	str	r3, [r2, #0]
			dup_curr = 0U;
    7c26:	4a15      	ldr	r2, [pc, #84]	; (7c7c <le_per_adv_create_sync+0x84>)
    7c28:	6013      	str	r3, [r2, #0]
	skip = sys_le16_to_cpu(cmd->skip);
    7c2a:	f8b4 6009 	ldrh.w	r6, [r4, #9]
	sync_timeout = sys_le16_to_cpu(cmd->sync_timeout);
    7c2e:	f8b4 700b 	ldrh.w	r7, [r4, #11]
	if ((cmd->cte_type & BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_INVALID_VALUE) != 0) {
    7c32:	7b63      	ldrb	r3, [r4, #13]
    7c34:	f033 021f 	bics.w	r2, r3, #31
    7c38:	d013      	beq.n	7c62 <le_per_adv_create_sync+0x6a>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7c3a:	200c      	movs	r0, #12
	*evt = cmd_status(status);
    7c3c:	f7ff ffd2 	bl	7be4 <cmd_status>
    7c40:	6028      	str	r0, [r5, #0]
}
    7c42:	b005      	add	sp, #20
    7c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*evt = cmd_status(BT_HCI_ERR_CMD_DISALLOWED);
    7c46:	200c      	movs	r0, #12
    7c48:	f7ff ffcc 	bl	7be4 <cmd_status>
    7c4c:	6028      	str	r0, [r5, #0]
		return;
    7c4e:	e7f8      	b.n	7c42 <le_per_adv_create_sync+0x4a>
	} else if (!dup_scan) {
    7c50:	4b08      	ldr	r3, [pc, #32]	; (7c74 <le_per_adv_create_sync+0x7c>)
    7c52:	781b      	ldrb	r3, [r3, #0]
    7c54:	2b00      	cmp	r3, #0
    7c56:	d1e8      	bne.n	7c2a <le_per_adv_create_sync+0x32>
		dup_count = DUP_FILTER_DISABLED;
    7c58:	4b07      	ldr	r3, [pc, #28]	; (7c78 <le_per_adv_create_sync+0x80>)
    7c5a:	f04f 32ff 	mov.w	r2, #4294967295
    7c5e:	601a      	str	r2, [r3, #0]
    7c60:	e7e3      	b.n	7c2a <le_per_adv_create_sync+0x32>
		status = ll_sync_create(cmd->options, cmd->sid, cmd->addr.type, cmd->addr.a.val,
    7c62:	78a2      	ldrb	r2, [r4, #2]
    7c64:	7861      	ldrb	r1, [r4, #1]
    7c66:	9302      	str	r3, [sp, #8]
    7c68:	9701      	str	r7, [sp, #4]
    7c6a:	9600      	str	r6, [sp, #0]
    7c6c:	1ce3      	adds	r3, r4, #3
    7c6e:	f003 f923 	bl	aeb8 <ll_sync_create>
    7c72:	e7e3      	b.n	7c3c <le_per_adv_create_sync+0x44>
    7c74:	20009294 	.word	0x20009294
    7c78:	200024ec 	.word	0x200024ec
    7c7c:	200024f0 	.word	0x200024f0

00007c80 <dup_found>:
{
    7c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c84:	461f      	mov	r7, r3
    7c86:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	if (dup_count >= 0) {
    7c8a:	4b8b      	ldr	r3, [pc, #556]	; (7eb8 <dup_found+0x238>)
    7c8c:	681b      	ldr	r3, [r3, #0]
    7c8e:	2b00      	cmp	r3, #0
    7c90:	db04      	blt.n	7c9c <dup_found+0x1c>
    7c92:	4681      	mov	r9, r0
    7c94:	4688      	mov	r8, r1
    7c96:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
    7c98:	2400      	movs	r4, #0
    7c9a:	e003      	b.n	7ca4 <dup_found+0x24>
	return false;
    7c9c:	2000      	movs	r0, #0
}
    7c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (int32_t i = 0; i < dup_count; i++) {
    7ca2:	3401      	adds	r4, #1
    7ca4:	4b84      	ldr	r3, [pc, #528]	; (7eb8 <dup_found+0x238>)
    7ca6:	681b      	ldr	r3, [r3, #0]
    7ca8:	42a3      	cmp	r3, r4
    7caa:	f340 80c9 	ble.w	7e40 <dup_found+0x1c0>
			dup = &dup_filter[i];
    7cae:	4d83      	ldr	r5, [pc, #524]	; (7ebc <dup_found+0x23c>)
    7cb0:	2326      	movs	r3, #38	; 0x26
    7cb2:	fb03 5504 	mla	r5, r3, r4, r5
			if (memcmp(addr, &dup->addr.a.val[0],
    7cb6:	2206      	movs	r2, #6
    7cb8:	1c69      	adds	r1, r5, #1
    7cba:	4630      	mov	r0, r6
    7cbc:	f00c fe66 	bl	1498c <memcmp>
    7cc0:	2800      	cmp	r0, #0
    7cc2:	d1ee      	bne.n	7ca2 <dup_found+0x22>
			    (addr_type != dup->addr.type)) {
    7cc4:	f04f 0c26 	mov.w	ip, #38	; 0x26
    7cc8:	fb0c fc04 	mul.w	ip, ip, r4
    7ccc:	4b7b      	ldr	r3, [pc, #492]	; (7ebc <dup_found+0x23c>)
    7cce:	f813 300c 	ldrb.w	r3, [r3, ip]
				   sizeof(bt_addr_t)) ||
    7cd2:	4543      	cmp	r3, r8
    7cd4:	d1e5      	bne.n	7ca2 <dup_found+0x22>
	if (!(dup->mask & BIT(adv_type))) {
    7cd6:	79eb      	ldrb	r3, [r5, #7]
    7cd8:	fa23 f209 	lsr.w	r2, r3, r9
    7cdc:	f012 0f01 	tst.w	r2, #1
    7ce0:	d056      	beq.n	7d90 <dup_found+0x110>
	} else if (adv_type != PDU_ADV_TYPE_EXT_IND) {
    7ce2:	f1b9 0f07 	cmp.w	r9, #7
    7ce6:	f040 80a7 	bne.w	7e38 <dup_found+0x1b8>
	} else if (dup->adv_mode[adv_mode].set_count == 0U) {
    7cea:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    7cee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    7cf2:	7a1b      	ldrb	r3, [r3, #8]
    7cf4:	f013 001f 	ands.w	r0, r3, #31
    7cf8:	d05b      	beq.n	7db2 <dup_found+0x132>
	} else if (adi) {
    7cfa:	9b08      	ldr	r3, [sp, #32]
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d063      	beq.n	7dc8 <dup_found+0x148>
		for (j = 0; j < dup_mode->set_count; j++) {
    7d00:	2200      	movs	r2, #0
    7d02:	4282      	cmp	r2, r0
    7d04:	f080 808d 	bcs.w	7e22 <dup_found+0x1a2>
			adv_set = &dup_mode->set[j];
    7d08:	4611      	mov	r1, r2
			if (adv_set->adi.sid != adi->sid) {
    7d0a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7d0e:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    7d12:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    7d16:	442b      	add	r3, r5
    7d18:	7b1c      	ldrb	r4, [r3, #12]
    7d1a:	9b08      	ldr	r3, [sp, #32]
    7d1c:	785b      	ldrb	r3, [r3, #1]
    7d1e:	091b      	lsrs	r3, r3, #4
    7d20:	ebb3 1f14 	cmp.w	r3, r4, lsr #4
    7d24:	d152      	bne.n	7dcc <dup_found+0x14c>
			if (adv_set->adi.did != adi->did) {
    7d26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    7d2a:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    7d2e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    7d32:	442b      	add	r3, r5
    7d34:	7ada      	ldrb	r2, [r3, #11]
    7d36:	7b1b      	ldrb	r3, [r3, #12]
    7d38:	f003 030f 	and.w	r3, r3, #15
    7d3c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    7d40:	9a08      	ldr	r2, [sp, #32]
    7d42:	7812      	ldrb	r2, [r2, #0]
    7d44:	9808      	ldr	r0, [sp, #32]
    7d46:	7840      	ldrb	r0, [r0, #1]
    7d48:	f000 000f 	and.w	r0, r0, #15
    7d4c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    7d50:	4293      	cmp	r3, r2
    7d52:	d04a      	beq.n	7dea <dup_found+0x16a>
				adv_set->adi.did = adi->did;
    7d54:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    7d58:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    7d5c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    7d60:	442b      	add	r3, r5
    7d62:	72da      	strb	r2, [r3, #11]
    7d64:	7b18      	ldrb	r0, [r3, #12]
    7d66:	f020 000f 	bic.w	r0, r0, #15
    7d6a:	ea40 2212 	orr.w	r2, r0, r2, lsr #8
    7d6e:	731a      	strb	r2, [r3, #12]
				if (data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_COMPLETE) {
    7d70:	f1ba 0f00 	cmp.w	sl, #0
    7d74:	d12d      	bne.n	7dd2 <dup_found+0x152>
					adv_set->data_cmplt = 1U;
    7d76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7d7a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    7d7e:	eb01 0347 	add.w	r3, r1, r7, lsl #1
    7d82:	441d      	add	r5, r3
    7d84:	7aab      	ldrb	r3, [r5, #10]
    7d86:	f043 0301 	orr.w	r3, r3, #1
    7d8a:	72ab      	strb	r3, [r5, #10]
				return false;
    7d8c:	2000      	movs	r0, #0
    7d8e:	e786      	b.n	7c9e <dup_found+0x1e>
		dup->mask |= BIT(adv_type);
    7d90:	2201      	movs	r2, #1
    7d92:	fa02 f909 	lsl.w	r9, r2, r9
    7d96:	ea43 0309 	orr.w	r3, r3, r9
    7d9a:	71eb      	strb	r3, [r5, #7]
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
    7d9c:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    7da0:	4090      	lsls	r0, r2
    7da2:	3008      	adds	r0, #8
    7da4:	4652      	mov	r2, sl
    7da6:	9908      	ldr	r1, [sp, #32]
    7da8:	4428      	add	r0, r5
    7daa:	f013 f88f 	bl	1aecc <dup_ext_adv_adi_store>
		return false;
    7dae:	2000      	movs	r0, #0
    7db0:	e775      	b.n	7c9e <dup_found+0x1e>
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
    7db2:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    7db6:	0040      	lsls	r0, r0, #1
    7db8:	3008      	adds	r0, #8
    7dba:	4652      	mov	r2, sl
    7dbc:	9908      	ldr	r1, [sp, #32]
    7dbe:	4428      	add	r0, r5
    7dc0:	f013 f884 	bl	1aecc <dup_ext_adv_adi_store>
		return false;
    7dc4:	2000      	movs	r0, #0
    7dc6:	e76a      	b.n	7c9e <dup_found+0x1e>
	return true;
    7dc8:	2001      	movs	r0, #1
    7dca:	e768      	b.n	7c9e <dup_found+0x1e>
		for (j = 0; j < dup_mode->set_count; j++) {
    7dcc:	3201      	adds	r2, #1
    7dce:	b2d2      	uxtb	r2, r2
    7dd0:	e797      	b.n	7d02 <dup_found+0x82>
					adv_set->data_cmplt = 0U;
    7dd2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7dd6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    7dda:	eb01 0347 	add.w	r3, r1, r7, lsl #1
    7dde:	441d      	add	r5, r3
    7de0:	7aab      	ldrb	r3, [r5, #10]
    7de2:	f36f 0300 	bfc	r3, #0, #1
    7de6:	72ab      	strb	r3, [r5, #10]
    7de8:	e7d0      	b.n	7d8c <dup_found+0x10c>
			} else if (!adv_set->data_cmplt &&
    7dea:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    7dee:	eb07 0247 	add.w	r2, r7, r7, lsl #1
    7df2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    7df6:	442b      	add	r3, r5
    7df8:	7a9b      	ldrb	r3, [r3, #10]
    7dfa:	f013 0301 	ands.w	r3, r3, #1
    7dfe:	d102      	bne.n	7e06 <dup_found+0x186>
    7e00:	f1ba 0f00 	cmp.w	sl, #0
    7e04:	d002      	beq.n	7e0c <dup_found+0x18c>
			} else if (!adv_set->data_cmplt) {
    7e06:	b9cb      	cbnz	r3, 7e3c <dup_found+0x1bc>
				return false;
    7e08:	2000      	movs	r0, #0
    7e0a:	e748      	b.n	7c9e <dup_found+0x1e>
				adv_set->data_cmplt = 1U;
    7e0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    7e10:	eb01 0342 	add.w	r3, r1, r2, lsl #1
    7e14:	441d      	add	r5, r3
    7e16:	7aab      	ldrb	r3, [r5, #10]
    7e18:	f043 0301 	orr.w	r3, r3, #1
    7e1c:	72ab      	strb	r3, [r5, #10]
				return false;
    7e1e:	2000      	movs	r0, #0
    7e20:	e73d      	b.n	7c9e <dup_found+0x1e>
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
    7e22:	eb07 0047 	add.w	r0, r7, r7, lsl #1
    7e26:	0040      	lsls	r0, r0, #1
    7e28:	3008      	adds	r0, #8
    7e2a:	4652      	mov	r2, sl
    7e2c:	9908      	ldr	r1, [sp, #32]
    7e2e:	4428      	add	r0, r5
    7e30:	f013 f84c 	bl	1aecc <dup_ext_adv_adi_store>
		return false;
    7e34:	2000      	movs	r0, #0
    7e36:	e732      	b.n	7c9e <dup_found+0x1e>
		return true;
    7e38:	2001      	movs	r0, #1
    7e3a:	e730      	b.n	7c9e <dup_found+0x1e>
			return true;
    7e3c:	2001      	movs	r0, #1
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
    7e3e:	e72e      	b.n	7c9e <dup_found+0x1e>
		dup = &dup_filter[dup_curr];
    7e40:	4b1f      	ldr	r3, [pc, #124]	; (7ec0 <dup_found+0x240>)
    7e42:	681c      	ldr	r4, [r3, #0]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
    7e44:	4d1d      	ldr	r5, [pc, #116]	; (7ebc <dup_found+0x23c>)
    7e46:	2326      	movs	r3, #38	; 0x26
    7e48:	fb03 f404 	mul.w	r4, r3, r4
    7e4c:	192b      	adds	r3, r5, r4
    7e4e:	6832      	ldr	r2, [r6, #0]
    7e50:	f8c3 2001 	str.w	r2, [r3, #1]
    7e54:	88b2      	ldrh	r2, [r6, #4]
    7e56:	f8a3 2005 	strh.w	r2, [r3, #5]
		dup->addr.type = addr_type;
    7e5a:	f805 8004 	strb.w	r8, [r5, r4]
		dup->mask = BIT(adv_type);
    7e5e:	2201      	movs	r2, #1
    7e60:	fa02 f909 	lsl.w	r9, r2, r9
    7e64:	f883 9007 	strb.w	r9, [r3, #7]
		dup_ext_adv_mode_reset(dup->adv_mode);
    7e68:	f104 0008 	add.w	r0, r4, #8
    7e6c:	4428      	add	r0, r5
    7e6e:	f012 ff9e 	bl	1adae <dup_ext_adv_mode_reset>
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
    7e72:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    7e76:	eb04 0747 	add.w	r7, r4, r7, lsl #1
    7e7a:	f107 0008 	add.w	r0, r7, #8
    7e7e:	4652      	mov	r2, sl
    7e80:	9908      	ldr	r1, [sp, #32]
    7e82:	4428      	add	r0, r5
    7e84:	f013 f822 	bl	1aecc <dup_ext_adv_adi_store>
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7e88:	4b0b      	ldr	r3, [pc, #44]	; (7eb8 <dup_found+0x238>)
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	2b0f      	cmp	r3, #15
    7e8e:	dc0a      	bgt.n	7ea6 <dup_found+0x226>
			dup_count++;
    7e90:	3301      	adds	r3, #1
    7e92:	4a09      	ldr	r2, [pc, #36]	; (7eb8 <dup_found+0x238>)
    7e94:	6013      	str	r3, [r2, #0]
			dup_curr = dup_count;
    7e96:	4a0a      	ldr	r2, [pc, #40]	; (7ec0 <dup_found+0x240>)
    7e98:	6013      	str	r3, [r2, #0]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    7e9a:	4b09      	ldr	r3, [pc, #36]	; (7ec0 <dup_found+0x240>)
    7e9c:	681b      	ldr	r3, [r3, #0]
    7e9e:	2b10      	cmp	r3, #16
    7ea0:	d006      	beq.n	7eb0 <dup_found+0x230>
	return false;
    7ea2:	2000      	movs	r0, #0
    7ea4:	e6fb      	b.n	7c9e <dup_found+0x1e>
			dup_curr++;
    7ea6:	4a06      	ldr	r2, [pc, #24]	; (7ec0 <dup_found+0x240>)
    7ea8:	6813      	ldr	r3, [r2, #0]
    7eaa:	3301      	adds	r3, #1
    7eac:	6013      	str	r3, [r2, #0]
    7eae:	e7f4      	b.n	7e9a <dup_found+0x21a>
			dup_curr = 0U;
    7eb0:	2000      	movs	r0, #0
    7eb2:	4b03      	ldr	r3, [pc, #12]	; (7ec0 <dup_found+0x240>)
    7eb4:	6018      	str	r0, [r3, #0]
    7eb6:	e6f2      	b.n	7c9e <dup_found+0x1e>
    7eb8:	200024ec 	.word	0x200024ec
    7ebc:	200024f4 	.word	0x200024f4
    7ec0:	200024f0 	.word	0x200024f0

00007ec4 <le_dir_adv_report>:
{
    7ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ec8:	b082      	sub	sp, #8
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7eca:	4d31      	ldr	r5, [pc, #196]	; (7f90 <le_dir_adv_report+0xcc>)
    7ecc:	686d      	ldr	r5, [r5, #4]
    7ece:	f015 5f00 	tst.w	r5, #536870912	; 0x20000000
    7ed2:	d043      	beq.n	7f5c <le_dir_adv_report+0x98>
    7ed4:	4604      	mov	r4, r0
    7ed6:	4688      	mov	r8, r1
    7ed8:	4617      	mov	r7, r2
    7eda:	461e      	mov	r6, r3
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
    7edc:	4b2d      	ldr	r3, [pc, #180]	; (7f94 <le_dir_adv_report+0xd0>)
    7ede:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7ee0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    7ee4:	d03a      	beq.n	7f5c <le_dir_adv_report+0x98>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    7ee6:	7803      	ldrb	r3, [r0, #0]
    7ee8:	f003 030f 	and.w	r3, r3, #15
    7eec:	2b01      	cmp	r3, #1
    7eee:	d138      	bne.n	7f62 <le_dir_adv_report+0x9e>
	if (dup_scan &&
    7ef0:	4b29      	ldr	r3, [pc, #164]	; (7f98 <le_dir_adv_report+0xd4>)
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	b163      	cbz	r3, 7f10 <le_dir_adv_report+0x4c>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    7ef6:	4622      	mov	r2, r4
    7ef8:	f812 0b02 	ldrb.w	r0, [r2], #2
    7efc:	2300      	movs	r3, #0
    7efe:	9301      	str	r3, [sp, #4]
    7f00:	9300      	str	r3, [sp, #0]
    7f02:	f3c0 1180 	ubfx	r1, r0, #6, #1
    7f06:	f000 000f 	and.w	r0, r0, #15
    7f0a:	f7ff feb9 	bl	7c80 <dup_found>
	if (dup_scan &&
    7f0e:	bb28      	cbnz	r0, 7f5c <le_dir_adv_report+0x98>
	drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    7f10:	2211      	movs	r2, #17
    7f12:	210b      	movs	r1, #11
    7f14:	4640      	mov	r0, r8
    7f16:	f012 ffc5 	bl	1aea4 <meta_evt>
    7f1a:	4605      	mov	r5, r0
	drp->num_reports = 1U;
    7f1c:	2301      	movs	r3, #1
    7f1e:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
    7f20:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    7f22:	f014 f9e1 	bl	1c2e8 <ll_rl_size_get>
    7f26:	42b0      	cmp	r0, r6
    7f28:	d829      	bhi.n	7f7e <le_dir_adv_report+0xba>
		dir_info->addr.type = adv->tx_addr;
    7f2a:	4623      	mov	r3, r4
    7f2c:	f813 2b02 	ldrb.w	r2, [r3], #2
    7f30:	f3c2 1280 	ubfx	r2, r2, #6, #1
    7f34:	70aa      	strb	r2, [r5, #2]
    7f36:	f8d4 2002 	ldr.w	r2, [r4, #2]
    7f3a:	f8c5 2003 	str.w	r2, [r5, #3]
    7f3e:	889b      	ldrh	r3, [r3, #4]
    7f40:	f8a5 3007 	strh.w	r3, [r5, #7]
	dir_info->dir_addr.type = adv->rx_addr;
    7f44:	4623      	mov	r3, r4
    7f46:	f813 2b08 	ldrb.w	r2, [r3], #8
    7f4a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    7f4e:	726a      	strb	r2, [r5, #9]
    7f50:	68a2      	ldr	r2, [r4, #8]
    7f52:	f8c5 200a 	str.w	r2, [r5, #10]
    7f56:	889b      	ldrh	r3, [r3, #4]
    7f58:	81eb      	strh	r3, [r5, #14]
	dir_info->rssi = rssi;
    7f5a:	742f      	strb	r7, [r5, #16]
}
    7f5c:	b002      	add	sp, #8
    7f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    7f62:	f241 5374 	movw	r3, #5492	; 0x1574
    7f66:	4a0d      	ldr	r2, [pc, #52]	; (7f9c <le_dir_adv_report+0xd8>)
    7f68:	490d      	ldr	r1, [pc, #52]	; (7fa0 <le_dir_adv_report+0xdc>)
    7f6a:	480e      	ldr	r0, [pc, #56]	; (7fa4 <le_dir_adv_report+0xe0>)
    7f6c:	f011 fc2f 	bl	197ce <assert_print>
    7f70:	4040      	eors	r0, r0
    7f72:	f380 8811 	msr	BASEPRI, r0
    7f76:	f04f 0003 	mov.w	r0, #3
    7f7a:	df02      	svc	2
    7f7c:	e7b8      	b.n	7ef0 <le_dir_adv_report+0x2c>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    7f7e:	1cea      	adds	r2, r5, #3
    7f80:	1ca9      	adds	r1, r5, #2
    7f82:	4630      	mov	r0, r6
    7f84:	f003 fdf8 	bl	bb78 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
    7f88:	78ab      	ldrb	r3, [r5, #2]
    7f8a:	3302      	adds	r3, #2
    7f8c:	70ab      	strb	r3, [r5, #2]
    7f8e:	e7d9      	b.n	7f44 <le_dir_adv_report+0x80>
    7f90:	200000d8 	.word	0x200000d8
    7f94:	200000e0 	.word	0x200000e0
    7f98:	20009294 	.word	0x20009294
    7f9c:	0001eb14 	.word	0x0001eb14
    7fa0:	0001eb50 	.word	0x0001eb50
    7fa4:	0001e920 	.word	0x0001e920

00007fa8 <le_advertising_report>:
{
    7fa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7fac:	b085      	sub	sp, #20
    7fae:	4604      	mov	r4, r0
    7fb0:	460b      	mov	r3, r1
    7fb2:	4617      	mov	r7, r2
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    7fb4:	4a44      	ldr	r2, [pc, #272]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    7fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
    7fba:	9002      	str	r0, [sp, #8]
    7fbc:	f8ad 100c 	strh.w	r1, [sp, #12]
    7fc0:	0c09      	lsrs	r1, r1, #16
    7fc2:	f88d 100e 	strb.w	r1, [sp, #14]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    7fc6:	7e1d      	ldrb	r5, [r3, #24]
    7fc8:	426d      	negs	r5, r5
    7fca:	b26e      	sxtb	r6, r5
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    7fcc:	f893 8019 	ldrb.w	r8, [r3, #25]
	direct_report = node_rx->hdr.rx_ftr.direct;
    7fd0:	7e9d      	ldrb	r5, [r3, #26]
    7fd2:	f3c5 0540 	ubfx	r5, r5, #1, #1
	if (adv->tx_addr) {
    7fd6:	7823      	ldrb	r3, [r4, #0]
    7fd8:	f013 0f40 	tst.w	r3, #64	; 0x40
    7fdc:	d14b      	bne.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
	if (direct_report) {
    7fde:	2d00      	cmp	r5, #0
    7fe0:	d150      	bne.n	8084 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x84>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7fe2:	4b3a      	ldr	r3, [pc, #232]	; (80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>)
    7fe4:	685b      	ldr	r3, [r3, #4]
    7fe6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    7fea:	d041      	beq.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
    7fec:	4b38      	ldr	r3, [pc, #224]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    7fee:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    7ff0:	f013 0f02 	tst.w	r3, #2
    7ff4:	d03c      	beq.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
	if (dup_scan &&
    7ff6:	4b37      	ldr	r3, [pc, #220]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    7ff8:	781b      	ldrb	r3, [r3, #0]
    7ffa:	2b00      	cmp	r3, #0
    7ffc:	d149      	bne.n	8092 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    7ffe:	7823      	ldrb	r3, [r4, #0]
    8000:	f003 030f 	and.w	r3, r3, #15
    8004:	2b01      	cmp	r3, #1
    8006:	d053      	beq.n	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
		data_len = (adv->len - BDADDR_SIZE);
    8008:	f894 9001 	ldrb.w	r9, [r4, #1]
    800c:	f1a9 0906 	sub.w	r9, r9, #6
    8010:	fa5f f989 	uxtb.w	r9, r9
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    8014:	f109 020b 	add.w	r2, r9, #11
    8018:	b2d2      	uxtb	r2, r2
    801a:	2102      	movs	r1, #2
    801c:	4638      	mov	r0, r7
    801e:	f012 ff41 	bl	1aea4 <meta_evt>
    8022:	4605      	mov	r5, r0
	sep->num_reports = 1U;
    8024:	2301      	movs	r3, #1
    8026:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    8028:	7823      	ldrb	r3, [r4, #0]
    802a:	f003 030f 	and.w	r3, r3, #15
    802e:	aa04      	add	r2, sp, #16
    8030:	4413      	add	r3, r2
    8032:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    8036:	7043      	strb	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    8038:	f014 f956 	bl	1c2e8 <ll_rl_size_get>
    803c:	4540      	cmp	r0, r8
    803e:	d83a      	bhi.n	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
		adv_info->addr.type = adv->tx_addr;
    8040:	4623      	mov	r3, r4
    8042:	f813 2b02 	ldrb.w	r2, [r3], #2
    8046:	f3c2 1280 	ubfx	r2, r2, #6, #1
    804a:	70aa      	strb	r2, [r5, #2]
    804c:	f8d4 2002 	ldr.w	r2, [r4, #2]
    8050:	f8c5 2003 	str.w	r2, [r5, #3]
    8054:	889b      	ldrh	r3, [r3, #4]
    8056:	f8a5 3007 	strh.w	r3, [r5, #7]
	adv_info->length = data_len;
    805a:	f885 9009 	strb.w	r9, [r5, #9]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
    805e:	350a      	adds	r5, #10
    8060:	464a      	mov	r2, r9
    8062:	f104 0108 	add.w	r1, r4, #8
    8066:	4628      	mov	r0, r5
    8068:	f7f9 f948 	bl	12fc <memcpy>
	*prssi = rssi;
    806c:	f805 6009 	strb.w	r6, [r5, r9]
}
    8070:	b005      	add	sp, #20
    8072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    8076:	1ca3      	adds	r3, r4, #2
    8078:	4642      	mov	r2, r8
    807a:	2100      	movs	r1, #0
    807c:	4608      	mov	r0, r1
    807e:	f004 f9df 	bl	c440 <ll_rl_crpa_set>
    8082:	e7ac      	b.n	7fde <le_advertising_report+0x36>
		le_dir_adv_report(adv, buf, rssi, rl_idx);
    8084:	4643      	mov	r3, r8
    8086:	4632      	mov	r2, r6
    8088:	4639      	mov	r1, r7
    808a:	4620      	mov	r0, r4
    808c:	f7ff ff1a 	bl	7ec4 <le_dir_adv_report>
		return;
    8090:	e7ee      	b.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    8092:	4622      	mov	r2, r4
    8094:	f812 0b02 	ldrb.w	r0, [r2], #2
    8098:	2300      	movs	r3, #0
    809a:	9301      	str	r3, [sp, #4]
    809c:	9300      	str	r3, [sp, #0]
    809e:	f3c0 1180 	ubfx	r1, r0, #6, #1
    80a2:	f000 000f 	and.w	r0, r0, #15
    80a6:	f7ff fdeb 	bl	7c80 <dup_found>
	if (dup_scan &&
    80aa:	2800      	cmp	r0, #0
    80ac:	d0a7      	beq.n	7ffe <le_advertising_report+0x56>
    80ae:	e7df      	b.n	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
		data_len = 0U;
    80b0:	f04f 0900 	mov.w	r9, #0
    80b4:	e7ae      	b.n	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    80b6:	1cea      	adds	r2, r5, #3
    80b8:	1ca9      	adds	r1, r5, #2
    80ba:	4640      	mov	r0, r8
    80bc:	f003 fd5c 	bl	bb78 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    80c0:	78ab      	ldrb	r3, [r5, #2]
    80c2:	3302      	adds	r3, #2
    80c4:	70ab      	strb	r3, [r5, #2]
    80c6:	e7c8      	b.n	805a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a>
    80c8:	0001e6e0 	.word	0x0001e6e0
    80cc:	200000d8 	.word	0x200000d8
    80d0:	200000e0 	.word	0x200000e0
    80d4:	20009294 	.word	0x20009294

000080d8 <le_ext_adv_legacy_report>:
{
    80d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80dc:	b084      	sub	sp, #16
    80de:	4605      	mov	r5, r0
    80e0:	460e      	mov	r6, r1
	const uint8_t evt_type_lookup[] = {
    80e2:	4b4c      	ldr	r3, [pc, #304]	; (8214 <le_ext_adv_legacy_report+0x13c>)
    80e4:	e893 0003 	ldmia.w	r3, {r0, r1}
    80e8:	9002      	str	r0, [sp, #8]
    80ea:	f8ad 100c 	strh.w	r1, [sp, #12]
    80ee:	0c09      	lsrs	r1, r1, #16
    80f0:	f88d 100e 	strb.w	r1, [sp, #14]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    80f4:	4b48      	ldr	r3, [pc, #288]	; (8218 <le_ext_adv_legacy_report+0x140>)
    80f6:	685b      	ldr	r3, [r3, #4]
    80f8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    80fc:	d059      	beq.n	81b2 <le_ext_adv_legacy_report+0xda>
    80fe:	4614      	mov	r4, r2
	    !(le_event_mask & BT_EVT_MASK_LE_EXT_ADVERTISING_REPORT)) {
    8100:	4b46      	ldr	r3, [pc, #280]	; (821c <le_ext_adv_legacy_report+0x144>)
    8102:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8104:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    8108:	d053      	beq.n	81b2 <le_ext_adv_legacy_report+0xda>
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    810a:	7e37      	ldrb	r7, [r6, #24]
    810c:	427f      	negs	r7, r7
    810e:	b27f      	sxtb	r7, r7
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
    8110:	f896 8019 	ldrb.w	r8, [r6, #25]
	if (adv->tx_addr) {
    8114:	782b      	ldrb	r3, [r5, #0]
    8116:	f013 0f40 	tst.w	r3, #64	; 0x40
    811a:	d14d      	bne.n	81b8 <le_ext_adv_legacy_report+0xe0>
	if (dup_scan &&
    811c:	4b40      	ldr	r3, [pc, #256]	; (8220 <le_ext_adv_legacy_report+0x148>)
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	2b00      	cmp	r3, #0
    8122:	d150      	bne.n	81c6 <le_ext_adv_legacy_report+0xee>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    8124:	782b      	ldrb	r3, [r5, #0]
    8126:	f003 030f 	and.w	r3, r3, #15
    812a:	2b01      	cmp	r3, #1
    812c:	d05a      	beq.n	81e4 <le_ext_adv_legacy_report+0x10c>
		data_len = (adv->len - BDADDR_SIZE);
    812e:	786e      	ldrb	r6, [r5, #1]
    8130:	3e06      	subs	r6, #6
    8132:	b2f6      	uxtb	r6, r6
	sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
    8134:	f106 0219 	add.w	r2, r6, #25
    8138:	b2d2      	uxtb	r2, r2
    813a:	210d      	movs	r1, #13
    813c:	4620      	mov	r0, r4
    813e:	f012 feb1 	bl	1aea4 <meta_evt>
    8142:	4604      	mov	r4, r0
	sep->num_reports = 1U;
    8144:	2301      	movs	r3, #1
    8146:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = evt_type_lookup[adv->type];
    8148:	782b      	ldrb	r3, [r5, #0]
    814a:	f003 030f 	and.w	r3, r3, #15
    814e:	aa04      	add	r2, sp, #16
    8150:	4413      	add	r3, r2
    8152:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    8156:	f8a0 3001 	strh.w	r3, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
    815a:	f014 f8c5 	bl	1c2e8 <ll_rl_size_get>
    815e:	4540      	cmp	r0, r8
    8160:	d842      	bhi.n	81e8 <le_ext_adv_legacy_report+0x110>
		adv_info->addr.type = adv->tx_addr;
    8162:	462b      	mov	r3, r5
    8164:	f813 2b02 	ldrb.w	r2, [r3], #2
    8168:	f3c2 1280 	ubfx	r2, r2, #6, #1
    816c:	70e2      	strb	r2, [r4, #3]
    816e:	f8d5 2002 	ldr.w	r2, [r5, #2]
    8172:	6062      	str	r2, [r4, #4]
    8174:	889b      	ldrh	r3, [r3, #4]
    8176:	8123      	strh	r3, [r4, #8]
	adv_info->prim_phy = BT_HCI_LE_EXT_SCAN_PHY_1M;
    8178:	2301      	movs	r3, #1
    817a:	72a3      	strb	r3, [r4, #10]
	adv_info->sec_phy = 0U;
    817c:	2300      	movs	r3, #0
    817e:	72e3      	strb	r3, [r4, #11]
	adv_info->sid = 0xff;
    8180:	22ff      	movs	r2, #255	; 0xff
    8182:	7322      	strb	r2, [r4, #12]
	adv_info->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8184:	227f      	movs	r2, #127	; 0x7f
    8186:	7362      	strb	r2, [r4, #13]
	adv_info->rssi = rssi;
    8188:	73a7      	strb	r7, [r4, #14]
	adv_info->interval = 0U;
    818a:	73e3      	strb	r3, [r4, #15]
    818c:	7423      	strb	r3, [r4, #16]
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    818e:	782b      	ldrb	r3, [r5, #0]
    8190:	f003 030f 	and.w	r3, r3, #15
    8194:	2b01      	cmp	r3, #1
    8196:	d030      	beq.n	81fa <le_ext_adv_legacy_report+0x122>
		adv_info->direct_addr.type = 0U;
    8198:	2200      	movs	r2, #0
    819a:	7462      	strb	r2, [r4, #17]
__ssp_bos_icheck3(memset, void *, int)
    819c:	f8c4 2012 	str.w	r2, [r4, #18]
    81a0:	82e2      	strh	r2, [r4, #22]
	adv_info->length = data_len;
    81a2:	7626      	strb	r6, [r4, #24]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    81a4:	4632      	mov	r2, r6
    81a6:	f105 0108 	add.w	r1, r5, #8
    81aa:	f104 0019 	add.w	r0, r4, #25
    81ae:	f7f9 f8a5 	bl	12fc <memcpy>
}
    81b2:	b004      	add	sp, #16
    81b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
    81b8:	1cab      	adds	r3, r5, #2
    81ba:	4642      	mov	r2, r8
    81bc:	2100      	movs	r1, #0
    81be:	4608      	mov	r0, r1
    81c0:	f004 f93e 	bl	c440 <ll_rl_crpa_set>
    81c4:	e7aa      	b.n	811c <le_ext_adv_legacy_report+0x44>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
    81c6:	462a      	mov	r2, r5
    81c8:	f812 0b02 	ldrb.w	r0, [r2], #2
    81cc:	2300      	movs	r3, #0
    81ce:	9301      	str	r3, [sp, #4]
    81d0:	9300      	str	r3, [sp, #0]
    81d2:	f3c0 1180 	ubfx	r1, r0, #6, #1
    81d6:	f000 000f 	and.w	r0, r0, #15
    81da:	f7ff fd51 	bl	7c80 <dup_found>
	if (dup_scan &&
    81de:	2800      	cmp	r0, #0
    81e0:	d0a0      	beq.n	8124 <le_ext_adv_legacy_report+0x4c>
    81e2:	e7e6      	b.n	81b2 <le_ext_adv_legacy_report+0xda>
		data_len = 0U;
    81e4:	2600      	movs	r6, #0
    81e6:	e7a5      	b.n	8134 <le_ext_adv_legacy_report+0x5c>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    81e8:	1d22      	adds	r2, r4, #4
    81ea:	1ce1      	adds	r1, r4, #3
    81ec:	4640      	mov	r0, r8
    81ee:	f003 fcc3 	bl	bb78 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
    81f2:	78e3      	ldrb	r3, [r4, #3]
    81f4:	3302      	adds	r3, #2
    81f6:	70e3      	strb	r3, [r4, #3]
    81f8:	e7be      	b.n	8178 <le_ext_adv_legacy_report+0xa0>
		adv_info->direct_addr.type = adv->rx_addr;
    81fa:	462b      	mov	r3, r5
    81fc:	f813 2b08 	ldrb.w	r2, [r3], #8
    8200:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    8204:	7462      	strb	r2, [r4, #17]
    8206:	68aa      	ldr	r2, [r5, #8]
    8208:	f8c4 2012 	str.w	r2, [r4, #18]
    820c:	889b      	ldrh	r3, [r3, #4]
    820e:	82e3      	strh	r3, [r4, #22]
}
    8210:	e7c7      	b.n	81a2 <le_ext_adv_legacy_report+0xca>
    8212:	bf00      	nop
    8214:	0001eb78 	.word	0x0001eb78
    8218:	200000d8 	.word	0x200000d8
    821c:	200000e0 	.word	0x200000e0
    8220:	20009294 	.word	0x20009294

00008224 <dup_periodic_adv_reset>:
{
    8224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8226:	4607      	mov	r7, r0
    8228:	460e      	mov	r6, r1
    822a:	4615      	mov	r5, r2
	for (int32_t addr_idx = 0; addr_idx < dup_count; addr_idx++) {
    822c:	2400      	movs	r4, #0
    822e:	e000      	b.n	8232 <dup_periodic_adv_reset+0xe>
    8230:	3401      	adds	r4, #1
    8232:	4b1f      	ldr	r3, [pc, #124]	; (82b0 <dup_periodic_adv_reset+0x8c>)
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	42a3      	cmp	r3, r4
    8238:	dd35      	ble.n	82a6 <dup_periodic_adv_reset+0x82>
		if (memcmp(addr, dup->addr.a.val, sizeof(bt_addr_t)) ||
    823a:	491e      	ldr	r1, [pc, #120]	; (82b4 <dup_periodic_adv_reset+0x90>)
    823c:	2326      	movs	r3, #38	; 0x26
    823e:	fb03 1104 	mla	r1, r3, r4, r1
    8242:	2206      	movs	r2, #6
    8244:	3101      	adds	r1, #1
    8246:	4630      	mov	r0, r6
    8248:	f00c fba0 	bl	1498c <memcmp>
    824c:	2800      	cmp	r0, #0
    824e:	d1ef      	bne.n	8230 <dup_periodic_adv_reset+0xc>
		    (addr_type != dup->addr.type)) {
    8250:	2326      	movs	r3, #38	; 0x26
    8252:	fb04 f303 	mul.w	r3, r4, r3
    8256:	4a17      	ldr	r2, [pc, #92]	; (82b4 <dup_periodic_adv_reset+0x90>)
    8258:	5cd3      	ldrb	r3, [r2, r3]
		if (memcmp(addr, dup->addr.a.val, sizeof(bt_addr_t)) ||
    825a:	42bb      	cmp	r3, r7
    825c:	d1e8      	bne.n	8230 <dup_periodic_adv_reset+0xc>
		for (uint16_t set_idx = 0; set_idx < dup_mode->set_count;
    825e:	2300      	movs	r3, #0
    8260:	4a14      	ldr	r2, [pc, #80]	; (82b4 <dup_periodic_adv_reset+0x90>)
    8262:	2126      	movs	r1, #38	; 0x26
    8264:	fb01 2204 	mla	r2, r1, r4, r2
    8268:	f892 2020 	ldrb.w	r2, [r2, #32]
    826c:	f002 021f 	and.w	r2, r2, #31
    8270:	429a      	cmp	r2, r3
    8272:	d918      	bls.n	82a6 <dup_periodic_adv_reset+0x82>
			if (adv_set->adi.sid != sid) {
    8274:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    8278:	2026      	movs	r0, #38	; 0x26
    827a:	fb00 1104 	mla	r1, r0, r4, r1
    827e:	480d      	ldr	r0, [pc, #52]	; (82b4 <dup_periodic_adv_reset+0x90>)
    8280:	4401      	add	r1, r0
    8282:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    8286:	ebb5 1f11 	cmp.w	r5, r1, lsr #4
    828a:	d10d      	bne.n	82a8 <dup_periodic_adv_reset+0x84>
			adv_set->data_cmplt = 0U;
    828c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    8290:	2326      	movs	r3, #38	; 0x26
    8292:	fb03 2404 	mla	r4, r3, r4, r2
    8296:	4a07      	ldr	r2, [pc, #28]	; (82b4 <dup_periodic_adv_reset+0x90>)
    8298:	4414      	add	r4, r2
    829a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    829e:	f36f 0300 	bfc	r3, #0, #1
    82a2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
}
    82a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		     set_idx++) {
    82a8:	3301      	adds	r3, #1
    82aa:	b29b      	uxth	r3, r3
    82ac:	e7d8      	b.n	8260 <dup_periodic_adv_reset+0x3c>
    82ae:	bf00      	nop
    82b0:	200024ec 	.word	0x200024ec
    82b4:	200024f4 	.word	0x200024f4

000082b8 <le_per_adv_sync_established>:
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82b8:	4b2c      	ldr	r3, [pc, #176]	; (836c <le_per_adv_sync_established+0xb4>)
    82ba:	685b      	ldr	r3, [r3, #4]
    82bc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    82c0:	d053      	beq.n	836a <le_per_adv_sync_established+0xb2>
{
    82c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82c6:	4604      	mov	r4, r0
    82c8:	460e      	mov	r6, r1
    82ca:	4610      	mov	r0, r2
	    !(le_event_mask & BT_EVT_MASK_LE_PER_ADV_SYNC_ESTABLISHED)) {
    82cc:	4b28      	ldr	r3, [pc, #160]	; (8370 <le_per_adv_sync_established+0xb8>)
    82ce:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    82d0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    82d4:	d101      	bne.n	82da <le_per_adv_sync_established+0x22>
}
    82d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_PER_ADV_SYNC_ESTABLISHED,
    82da:	220f      	movs	r2, #15
    82dc:	210e      	movs	r1, #14
    82de:	f012 fde1 	bl	1aea4 <meta_evt>
    82e2:	4605      	mov	r5, r0
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_sync));
    82e4:	f014 0f01 	tst.w	r4, #1
    82e8:	d131      	bne.n	834e <le_per_adv_sync_established+0x96>
	sep->status = se->status;
    82ea:	7823      	ldrb	r3, [r4, #0]
    82ec:	702b      	strb	r3, [r5, #0]
	if (se->status == BT_HCI_ERR_OP_CANCELLED_BY_HOST) {
    82ee:	2b44      	cmp	r3, #68	; 0x44
    82f0:	d0f1      	beq.n	82d6 <le_per_adv_sync_established+0x1e>
	scan = node_rx->hdr.rx_ftr.param;
    82f2:	68b7      	ldr	r7, [r6, #8]
	dup_periodic_adv_reset(scan->periodic.adv_addr_type,
    82f4:	f897 0049 	ldrb.w	r0, [r7, #73]	; 0x49
			       scan->periodic.adv_addr,
    82f8:	f107 084a 	add.w	r8, r7, #74	; 0x4a
	dup_periodic_adv_reset(scan->periodic.adv_addr_type,
    82fc:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
    8300:	4641      	mov	r1, r8
    8302:	f000 0001 	and.w	r0, r0, #1
    8306:	f7ff ff8d 	bl	8224 <dup_periodic_adv_reset>
	sep->handle = sys_cpu_to_le16(node_rx->hdr.handle);
    830a:	88f3      	ldrh	r3, [r6, #6]
    830c:	f8a5 3001 	strh.w	r3, [r5, #1]
	sep->adv_addr.type = scan->periodic.adv_addr_type;
    8310:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
    8314:	f3c3 0300 	ubfx	r3, r3, #0, #1
    8318:	712b      	strb	r3, [r5, #4]
    831a:	f8d7 304a 	ldr.w	r3, [r7, #74]	; 0x4a
    831e:	f8c5 3005 	str.w	r3, [r5, #5]
    8322:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
    8326:	f8a5 3009 	strh.w	r3, [r5, #9]
	sep->sid = scan->periodic.sid;
    832a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
    832e:	70eb      	strb	r3, [r5, #3]
	sep->phy = find_lsb_set(se->phy);
    8330:	7862      	ldrb	r2, [r4, #1]
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    8332:	fa92 f3a2 	rbit	r3, r2
    8336:	fab3 f383 	clz	r3, r3
    833a:	b90a      	cbnz	r2, 8340 <le_per_adv_sync_established+0x88>
    833c:	f04f 33ff 	mov.w	r3, #4294967295
    8340:	3301      	adds	r3, #1
    8342:	72eb      	strb	r3, [r5, #11]
	sep->interval = sys_cpu_to_le16(se->interval);
    8344:	8863      	ldrh	r3, [r4, #2]
    8346:	81ab      	strh	r3, [r5, #12]
	sep->clock_accuracy = se->sca;
    8348:	7923      	ldrb	r3, [r4, #4]
    834a:	73ab      	strb	r3, [r5, #14]
    834c:	e7c3      	b.n	82d6 <le_per_adv_sync_established+0x1e>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_sync));
    834e:	f641 13f3 	movw	r3, #6643	; 0x19f3
    8352:	4a08      	ldr	r2, [pc, #32]	; (8374 <le_per_adv_sync_established+0xbc>)
    8354:	4908      	ldr	r1, [pc, #32]	; (8378 <le_per_adv_sync_established+0xc0>)
    8356:	4809      	ldr	r0, [pc, #36]	; (837c <le_per_adv_sync_established+0xc4>)
    8358:	f011 fa39 	bl	197ce <assert_print>
    835c:	4040      	eors	r0, r0
    835e:	f380 8811 	msr	BASEPRI, r0
    8362:	f04f 0003 	mov.w	r0, #3
    8366:	df02      	svc	2
    8368:	e7bf      	b.n	82ea <le_per_adv_sync_established+0x32>
    836a:	4770      	bx	lr
    836c:	200000d8 	.word	0x200000d8
    8370:	200000e0 	.word	0x200000e0
    8374:	0001eb14 	.word	0x0001eb14
    8378:	0001eb80 	.word	0x0001eb80
    837c:	0001e920 	.word	0x0001e920

00008380 <ext_adv_pdu_frag>:
{
    8380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8384:	b095      	sub	sp, #84	; 0x54
    8386:	900d      	str	r0, [sp, #52]	; 0x34
    8388:	910e      	str	r1, [sp, #56]	; 0x38
    838a:	920f      	str	r2, [sp, #60]	; 0x3c
    838c:	9310      	str	r3, [sp, #64]	; 0x40
    838e:	f89d b07c 	ldrb.w	fp, [sp, #124]	; 0x7c
    8392:	f89d a084 	ldrb.w	sl, [sp, #132]	; 0x84
    8396:	f99d 3088 	ldrsb.w	r3, [sp, #136]	; 0x88
    839a:	9311      	str	r3, [sp, #68]	; 0x44
    839c:	f99d 308c 	ldrsb.w	r3, [sp, #140]	; 0x8c
    83a0:	9312      	str	r3, [sp, #72]	; 0x48
    83a2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    83a6:	9313      	str	r3, [sp, #76]	; 0x4c
    83a8:	f89d 9098 	ldrb.w	r9, [sp, #152]	; 0x98
    83ac:	f8dd 809c 	ldr.w	r8, [sp, #156]	; 0x9c
    83b0:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    83b2:	9f29      	ldr	r7, [sp, #164]	; 0xa4
    83b4:	9e2b      	ldr	r6, [sp, #172]	; 0xac
	const uint8_t data_len_frag = MIN(*data_len, data_len_max);
    83b6:	782c      	ldrb	r4, [r5, #0]
    83b8:	454c      	cmp	r4, r9
    83ba:	bf28      	it	cs
    83bc:	464c      	movcs	r4, r9
    83be:	e006      	b.n	83ce <ext_adv_pdu_frag+0x4e>
		net_buf_frag_add(buf, *evt_buf);
    83c0:	6831      	ldr	r1, [r6, #0]
    83c2:	982a      	ldr	r0, [sp, #168]	; 0xa8
    83c4:	f014 fcf5 	bl	1cdb2 <net_buf_frag_add>
	} while (*data_len > data_len_max);
    83c8:	782b      	ldrb	r3, [r5, #0]
    83ca:	454b      	cmp	r3, r9
    83cc:	d93c      	bls.n	8448 <ext_adv_pdu_frag+0xc8>
		ext_adv_info_fill(evt_type, phy, sec_phy, adv_addr_type,
    83ce:	6833      	ldr	r3, [r6, #0]
    83d0:	930a      	str	r3, [sp, #40]	; 0x28
    83d2:	683b      	ldr	r3, [r7, #0]
    83d4:	9309      	str	r3, [sp, #36]	; 0x24
    83d6:	9408      	str	r4, [sp, #32]
    83d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    83da:	9307      	str	r3, [sp, #28]
    83dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    83de:	9306      	str	r3, [sp, #24]
    83e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    83e2:	9305      	str	r3, [sp, #20]
    83e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    83e6:	9304      	str	r3, [sp, #16]
    83e8:	f8cd a00c 	str.w	sl, [sp, #12]
    83ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
    83ee:	9302      	str	r3, [sp, #8]
    83f0:	f8cd b004 	str.w	fp, [sp, #4]
    83f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    83f6:	9300      	str	r3, [sp, #0]
    83f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    83fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    83fc:	990e      	ldr	r1, [sp, #56]	; 0x38
    83fe:	980d      	ldr	r0, [sp, #52]	; 0x34
    8400:	f012 fe7a 	bl	1b0f8 <ext_adv_info_fill>
		*data += data_len_frag;
    8404:	683b      	ldr	r3, [r7, #0]
    8406:	4423      	add	r3, r4
    8408:	603b      	str	r3, [r7, #0]
		*data_len -= data_len_frag;
    840a:	782b      	ldrb	r3, [r5, #0]
    840c:	1b1b      	subs	r3, r3, r4
    840e:	702b      	strb	r3, [r5, #0]
		*data_len_total -= data_len_frag;
    8410:	f8b8 3000 	ldrh.w	r3, [r8]
    8414:	1b1b      	subs	r3, r3, r4
    8416:	f8a8 3000 	strh.w	r3, [r8]
		*evt_buf = bt_buf_get_rx(BT_BUF_EVT, BUF_GET_TIMEOUT);
    841a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    841e:	2300      	movs	r3, #0
    8420:	2001      	movs	r0, #1
    8422:	f7fc feb7 	bl	5194 <bt_buf_get_rx>
    8426:	6030      	str	r0, [r6, #0]
		LL_ASSERT(*evt_buf);
    8428:	2800      	cmp	r0, #0
    842a:	d1c9      	bne.n	83c0 <ext_adv_pdu_frag+0x40>
    842c:	f241 738f 	movw	r3, #6031	; 0x178f
    8430:	4a07      	ldr	r2, [pc, #28]	; (8450 <ext_adv_pdu_frag+0xd0>)
    8432:	4908      	ldr	r1, [pc, #32]	; (8454 <ext_adv_pdu_frag+0xd4>)
    8434:	4808      	ldr	r0, [pc, #32]	; (8458 <ext_adv_pdu_frag+0xd8>)
    8436:	f011 f9ca 	bl	197ce <assert_print>
    843a:	4040      	eors	r0, r0
    843c:	f380 8811 	msr	BASEPRI, r0
    8440:	f04f 0003 	mov.w	r0, #3
    8444:	df02      	svc	2
    8446:	e7bb      	b.n	83c0 <ext_adv_pdu_frag+0x40>
}
    8448:	b015      	add	sp, #84	; 0x54
    844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    844e:	bf00      	nop
    8450:	0001eb14 	.word	0x0001eb14
    8454:	0001ebbc 	.word	0x0001ebbc
    8458:	0001e920 	.word	0x0001e920

0000845c <le_ext_adv_report>:
{
    845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8460:	b0af      	sub	sp, #188	; 0xbc
    8462:	4688      	mov	r8, r1
    8464:	9224      	str	r2, [sp, #144]	; 0x90
    8466:	9325      	str	r3, [sp, #148]	; 0x94
	int8_t scan_rsp_tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8468:	237f      	movs	r3, #127	; 0x7f
    846a:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
	int8_t tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    846e:	f88d 30b6 	strb.w	r3, [sp, #182]	; 0xb6
	const uint8_t *scan_data = NULL;
    8472:	2300      	movs	r3, #0
    8474:	932c      	str	r3, [sp, #176]	; 0xb0
	const uint8_t *data = NULL;
    8476:	932b      	str	r3, [sp, #172]	; 0xac
	uint8_t scan_data_len = 0U;
    8478:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
	uint8_t sec_phy_scan = 0U;
    847c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
	uint8_t data_len = 0U;
    8480:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
	uint8_t sec_phy = 0U;
    8484:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8488:	4ba0      	ldr	r3, [pc, #640]	; (870c <le_ext_adv_report+0x2b0>)
    848a:	685b      	ldr	r3, [r3, #4]
    848c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    8490:	b12b      	cbz	r3, 849e <le_ext_adv_report+0x42>
    8492:	4681      	mov	r9, r0
	    !(le_event_mask & BT_EVT_MASK_LE_EXT_ADVERTISING_REPORT)) {
    8494:	4b9e      	ldr	r3, [pc, #632]	; (8710 <le_ext_adv_report+0x2b4>)
    8496:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8498:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    849c:	d106      	bne.n	84ac <le_ext_adv_report+0x50>
		node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    849e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    84a2:	f012 ff3f 	bl	1b324 <node_rx_extra_list_release>
}
    84a6:	b02f      	add	sp, #188	; 0xbc
    84a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rl_idx = ll_rl_size_get();
    84ac:	f013 ff1c 	bl	1c2e8 <ll_rl_size_get>
    84b0:	9013      	str	r0, [sp, #76]	; 0x4c
	node_rx_next = node_rx_curr->hdr.rx_ftr.extra;
    84b2:	f8d8 a00c 	ldr.w	sl, [r8, #12]
	node_rx_curr = node_rx;
    84b6:	46c3      	mov	fp, r8
	uint8_t evt_type = 0U;
    84b8:	2300      	movs	r3, #0
    84ba:	9321      	str	r3, [sp, #132]	; 0x84
	bool devmatch = false;
    84bc:	9316      	str	r3, [sp, #88]	; 0x58
	uint8_t *adv_addr = NULL;
    84be:	9315      	str	r3, [sp, #84]	; 0x54
	bool direct_report = false;
    84c0:	9319      	str	r3, [sp, #100]	; 0x64
	uint8_t adv_addr_type = 0U;
    84c2:	931d      	str	r3, [sp, #116]	; 0x74
	uint16_t interval_le16 = 0U;
    84c4:	931f      	str	r3, [sp, #124]	; 0x7c
	uint8_t *direct_addr = NULL;
    84c6:	9318      	str	r3, [sp, #96]	; 0x60
	uint16_t data_len_total = 0U;
    84c8:	931c      	str	r3, [sp, #112]	; 0x70
	uint8_t direct_addr_type = 0U;
    84ca:	931e      	str	r3, [sp, #120]	; 0x78
	uint16_t scan_data_len_total = 0U;
    84cc:	9317      	str	r3, [sp, #92]	; 0x5c
	const struct pdu_adv_adi *adi = NULL;
    84ce:	9320      	str	r3, [sp, #128]	; 0x80
	struct node_rx_pdu *node_rx_data = NULL;
    84d0:	9322      	str	r3, [sp, #136]	; 0x88
	struct node_rx_pdu *node_rx_scan_data = NULL;
    84d2:	9323      	str	r3, [sp, #140]	; 0x8c
    84d4:	4656      	mov	r6, sl
    84d6:	46c2      	mov	sl, r8
    84d8:	e09c      	b.n	8614 <le_ext_adv_report+0x1b8>
		uint8_t *adv_addr_curr = NULL;
    84da:	2300      	movs	r3, #0
    84dc:	9314      	str	r3, [sp, #80]	; 0x50
		if (h->tgt_addr) {
    84de:	f010 0002 	ands.w	r0, r0, #2
    84e2:	d109      	bne.n	84f8 <le_ext_adv_report+0x9c>
		uint8_t *direct_addr_curr = NULL;
    84e4:	f04f 0e00 	mov.w	lr, #0
		if (h->adi) {
    84e8:	f899 3003 	ldrb.w	r3, [r9, #3]
    84ec:	f013 0f08 	tst.w	r3, #8
    84f0:	d01c      	beq.n	852c <le_ext_adv_report+0xd0>
			adi_curr = (void *)ptr;
    84f2:	46a4      	mov	ip, r4
			ptr += sizeof(*adi);
    84f4:	3402      	adds	r4, #2
    84f6:	e01b      	b.n	8530 <le_ext_adv_report+0xd4>
							 adv->rx_addr, ptr);
    84f8:	f899 3000 	ldrb.w	r3, [r9]
				ext_adv_direct_addr_type(lll,
    84fc:	9400      	str	r4, [sp, #0]
    84fe:	09db      	lsrs	r3, r3, #7
    8500:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8502:	f8da 0008 	ldr.w	r0, [sl, #8]
    8506:	f012 fe65 	bl	1b1d4 <ext_adv_direct_addr_type>
			ptr += BDADDR_SIZE;
    850a:	4623      	mov	r3, r4
			addr.type = adv->rx_addr;
    850c:	f899 2000 	ldrb.w	r2, [r9]
    8510:	f3c2 12c0 	ubfx	r2, r2, #7, #1
    8514:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
			(void)memcpy(addr.a.val, direct_addr_curr,
    8518:	f853 2b06 	ldr.w	r2, [r3], #6
    851c:	f8cd 2099 	str.w	r2, [sp, #153]	; 0x99
    8520:	88a2      	ldrh	r2, [r4, #4]
    8522:	f8ad 209d 	strh.w	r2, [sp, #157]	; 0x9d
			direct_addr_curr = ptr;
    8526:	46a6      	mov	lr, r4
			ptr += BDADDR_SIZE;
    8528:	461c      	mov	r4, r3
    852a:	e7dd      	b.n	84e8 <le_ext_adv_report+0x8c>
		struct pdu_adv_adi *adi_curr = NULL;
    852c:	f04f 0c00 	mov.w	ip, #0
		if (h->aux_ptr) {
    8530:	f013 0710 	ands.w	r7, r3, #16
    8534:	d005      	beq.n	8542 <le_ext_adv_report+0xe6>
			if (aux_ptr->phy > EXT_ADV_AUX_PHY_LE_CODED) {
    8536:	78a2      	ldrb	r2, [r4, #2]
    8538:	0957      	lsrs	r7, r2, #5
    853a:	2a5f      	cmp	r2, #95	; 0x5f
    853c:	d81c      	bhi.n	8578 <le_ext_adv_report+0x11c>
			ptr += sizeof(*aux_ptr);
    853e:	3403      	adds	r4, #3
			sec_phy_curr = HCI_AUX_PHY_TO_HCI_PHY(aux_ptr->phy);
    8540:	3701      	adds	r7, #1
		if (h->sync_info) {
    8542:	f013 0f20 	tst.w	r3, #32
    8546:	d002      	beq.n	854e <le_ext_adv_report+0xf2>
			interval_le16 = si->interval;
    8548:	8862      	ldrh	r2, [r4, #2]
    854a:	921f      	str	r2, [sp, #124]	; 0x7c
			ptr += sizeof(*si);
    854c:	3412      	adds	r4, #18
		if (h->tx_pwr) {
    854e:	f013 0f40 	tst.w	r3, #64	; 0x40
    8552:	d016      	beq.n	8582 <le_ext_adv_report+0x126>
			tx_pwr_curr = *(int8_t *)ptr;
    8554:	f914 2b01 	ldrsb.w	r2, [r4], #1
		hdr_len = ptr - (uint8_t *)p;
    8558:	1b65      	subs	r5, r4, r5
    855a:	b2ed      	uxtb	r5, r5
		hdr_buf_len = PDU_AC_EXT_HEADER_SIZE_MIN + p->ext_hdr_len;
    855c:	f899 3002 	ldrb.w	r3, [r9, #2]
    8560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8564:	3301      	adds	r3, #1
		if (hdr_len > hdr_buf_len) {
    8566:	429d      	cmp	r5, r3
    8568:	d815      	bhi.n	8596 <le_ext_adv_report+0x13a>
			uint8_t acad_len = hdr_buf_len - hdr_len;
    856a:	1b59      	subs	r1, r3, r5
			if (acad_len) {
    856c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8570:	d011      	beq.n	8596 <le_ext_adv_report+0x13a>
				ptr += acad_len;
    8572:	440c      	add	r4, r1
				hdr_len += acad_len;
    8574:	461d      	mov	r5, r3
    8576:	e00e      	b.n	8596 <le_ext_adv_report+0x13a>
				node_rx_extra_list_release(ftr->extra);
    8578:	f8da 000c 	ldr.w	r0, [sl, #12]
    857c:	f012 fed2 	bl	1b324 <node_rx_extra_list_release>
				return;
    8580:	e791      	b.n	84a6 <le_ext_adv_report+0x4a>
		int8_t tx_pwr_curr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8582:	227f      	movs	r2, #127	; 0x7f
    8584:	e7e8      	b.n	8558 <le_ext_adv_report+0xfc>
		uint8_t sec_phy_curr = 0U;
    8586:	4607      	mov	r7, r0
		uint8_t adv_addr_type_curr = 0U;
    8588:	4680      	mov	r8, r0
			hdr_len = PDU_AC_EXT_HEADER_SIZE_MIN;
    858a:	2501      	movs	r5, #1
		uint8_t *adv_addr_curr = NULL;
    858c:	2300      	movs	r3, #0
    858e:	469c      	mov	ip, r3
    8590:	9314      	str	r3, [sp, #80]	; 0x50
		uint8_t *direct_addr_curr = NULL;
    8592:	469e      	mov	lr, r3
		int8_t tx_pwr_curr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8594:	227f      	movs	r2, #127	; 0x7f
		if (hdr_len < adv->len) {
    8596:	f899 3001 	ldrb.w	r3, [r9, #1]
    859a:	42ab      	cmp	r3, r5
    859c:	d974      	bls.n	8688 <le_ext_adv_report+0x22c>
			data_len_curr = adv->len - hdr_len;
    859e:	1b5d      	subs	r5, r3, r5
    85a0:	b2ed      	uxtb	r5, r5
		if (node_rx_curr == node_rx) {
    85a2:	45da      	cmp	sl, fp
    85a4:	d073      	beq.n	868e <le_ext_adv_report+0x232>
			if (node_rx_curr->hdr.rx_ftr.scan_rsp) {
    85a6:	f89b 301a 	ldrb.w	r3, [fp, #26]
    85aa:	f013 0f10 	tst.w	r3, #16
    85ae:	d00b      	beq.n	85c8 <le_ext_adv_report+0x16c>
				if (sec_phy_curr) {
    85b0:	2f00      	cmp	r7, #0
    85b2:	f000 808b 	beq.w	86cc <le_ext_adv_report+0x270>
					sec_phy_scan = sec_phy_curr;
    85b6:	f88d 70aa 	strb.w	r7, [sp, #170]	; 0xaa
				scan_data_len = data_len_curr;
    85ba:	f88d 50ab 	strb.w	r5, [sp, #171]	; 0xab
				scan_data = data_curr;
    85be:	942c      	str	r4, [sp, #176]	; 0xb0
				scan_rsp_tx_pwr = tx_pwr_curr;
    85c0:	f88d 20b7 	strb.w	r2, [sp, #183]	; 0xb7
				node_rx_scan_data = node_rx_curr;
    85c4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
			if (!adv_addr) {
    85c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    85ca:	2b00      	cmp	r3, #0
    85cc:	f000 8083 	beq.w	86d6 <le_ext_adv_report+0x27a>
			if (!direct_addr) {
    85d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    85d2:	2b00      	cmp	r3, #0
    85d4:	f000 8084 	beq.w	86e0 <le_ext_adv_report+0x284>
			if (scan_data) {
    85d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    85da:	2b00      	cmp	r3, #0
    85dc:	f000 8084 	beq.w	86e8 <le_ext_adv_report+0x28c>
				scan_data_len_total += data_len_curr;
    85e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    85e2:	442b      	add	r3, r5
    85e4:	b29b      	uxth	r3, r3
    85e6:	9317      	str	r3, [sp, #92]	; 0x5c
			if (rl_idx >= ll_rl_size_get()) {
    85e8:	f013 fe7e 	bl	1c2e8 <ll_rl_size_get>
    85ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    85ee:	4283      	cmp	r3, r0
    85f0:	d301      	bcc.n	85f6 <le_ext_adv_report+0x19a>
				rl_idx = rl_idx_curr;
    85f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    85f4:	9313      	str	r3, [sp, #76]	; 0x4c
			if (!direct_report) {
    85f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    85f8:	b90b      	cbnz	r3, 85fe <le_ext_adv_report+0x1a2>
				direct_report = direct_report_curr;
    85fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    85fc:	9319      	str	r3, [sp, #100]	; 0x64
			if (!devmatch) {
    85fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8600:	b90b      	cbnz	r3, 8606 <le_ext_adv_report+0x1aa>
				devmatch = devmatch_curr;
    8602:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8604:	9316      	str	r3, [sp, #88]	; 0x58
		if (!node_rx_next) {
    8606:	2e00      	cmp	r6, #0
    8608:	f000 8084 	beq.w	8714 <le_ext_adv_report+0x2b8>
		adv = (void *)node_rx_curr->pdu;
    860c:	f106 0920 	add.w	r9, r6, #32
		node_rx_curr = node_rx_next;
    8610:	46b3      	mov	fp, r6
		node_rx_next = node_rx_curr->hdr.rx_ftr.extra;
    8612:	68f6      	ldr	r6, [r6, #12]
		bool direct_report_curr = node_rx_curr->hdr.rx_ftr.direct;
    8614:	f89b 101a 	ldrb.w	r1, [fp, #26]
    8618:	f3c1 0340 	ubfx	r3, r1, #1, #1
    861c:	9310      	str	r3, [sp, #64]	; 0x40
		uint8_t rl_idx_curr = node_rx_curr->hdr.rx_ftr.rl_idx;
    861e:	f89b 3019 	ldrb.w	r3, [fp, #25]
    8622:	9312      	str	r3, [sp, #72]	; 0x48
		direct_resolved_curr = node_rx_curr->hdr.rx_ftr.direct_resolved;
    8624:	f3c1 1140 	ubfx	r1, r1, #5, #1
		const bool devmatch_curr = node_rx_curr->hdr.rx_ftr.devmatch;
    8628:	f89b 301b 	ldrb.w	r3, [fp, #27]
    862c:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8630:	9311      	str	r3, [sp, #68]	; 0x44
		rssi = -(node_rx_curr->hdr.rx_ftr.rssi);
    8632:	f89b 3018 	ldrb.w	r3, [fp, #24]
    8636:	425b      	negs	r3, r3
    8638:	b25b      	sxtb	r3, r3
    863a:	931b      	str	r3, [sp, #108]	; 0x6c
		p = (void *)&adv->adv_ext_ind;
    863c:	f109 0502 	add.w	r5, r9, #2
		h = (void *)p->ext_hdr_adv_data;
    8640:	f109 0403 	add.w	r4, r9, #3
		evt_type_curr = p->adv_mode;
    8644:	f899 0002 	ldrb.w	r0, [r9, #2]
    8648:	0983      	lsrs	r3, r0, #6
    864a:	931a      	str	r3, [sp, #104]	; 0x68
		if (!p->ext_hdr_len) {
    864c:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
    8650:	d099      	beq.n	8586 <le_ext_adv_report+0x12a>
		ptr = h->data;
    8652:	f109 0404 	add.w	r4, r9, #4
		if (h->adv_addr) {
    8656:	f899 0003 	ldrb.w	r0, [r9, #3]
    865a:	f010 0801 	ands.w	r8, r0, #1
    865e:	f43f af3c 	beq.w	84da <le_ext_adv_report+0x7e>
			adv_addr_type_curr = adv->tx_addr;
    8662:	464b      	mov	r3, r9
    8664:	f813 8b04 	ldrb.w	r8, [r3], #4
    8668:	f3c8 1280 	ubfx	r2, r8, #6, #1
    866c:	4690      	mov	r8, r2
			addr.type = adv->tx_addr;
    866e:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
			(void)memcpy(addr.a.val, ptr, sizeof(bt_addr_t));
    8672:	f8d9 2004 	ldr.w	r2, [r9, #4]
    8676:	f8cd 2099 	str.w	r2, [sp, #153]	; 0x99
    867a:	889b      	ldrh	r3, [r3, #4]
    867c:	f8ad 309d 	strh.w	r3, [sp, #157]	; 0x9d
			adv_addr_curr = ptr;
    8680:	9414      	str	r4, [sp, #80]	; 0x50
			ptr += BDADDR_SIZE;
    8682:	f109 040a 	add.w	r4, r9, #10
    8686:	e72a      	b.n	84de <le_ext_adv_report+0x82>
		uint8_t *data_curr = NULL;
    8688:	2400      	movs	r4, #0
		uint8_t data_len_curr = 0U;
    868a:	4625      	mov	r5, r4
    868c:	e789      	b.n	85a2 <le_ext_adv_report+0x146>
			sec_phy = sec_phy_curr;
    868e:	f88d 70a2 	strb.w	r7, [sp, #162]	; 0xa2
			data_len = data_len_curr;
    8692:	f88d 50a3 	strb.w	r5, [sp, #163]	; 0xa3
			data_len_total = data_len;
    8696:	b2ab      	uxth	r3, r5
    8698:	931c      	str	r3, [sp, #112]	; 0x70
			data = data_curr;
    869a:	942b      	str	r4, [sp, #172]	; 0xac
			tx_pwr = tx_pwr_curr;
    869c:	f88d 20b6 	strb.w	r2, [sp, #182]	; 0xb6
			rl_idx = rl_idx_curr;
    86a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    86a2:	9313      	str	r3, [sp, #76]	; 0x4c
			evt_type = evt_type_curr;
    86a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    86a6:	9321      	str	r3, [sp, #132]	; 0x84
			devmatch = devmatch_curr;
    86a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86aa:	9316      	str	r3, [sp, #88]	; 0x58
			adv_addr = adv_addr_curr;
    86ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
    86ae:	9315      	str	r3, [sp, #84]	; 0x54
			direct_report = direct_report_curr;
    86b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    86b2:	9319      	str	r3, [sp, #100]	; 0x64
			adv_addr_type = adv_addr_type_curr;
    86b4:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
			direct_addr = direct_addr_curr;
    86b8:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
			direct_addr_type = direct_addr_type_curr;
    86bc:	901e      	str	r0, [sp, #120]	; 0x78
			adi = adi_curr;
    86be:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
			node_rx_data = node_rx_curr;
    86c2:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
			scan_data_len_total = 0U;
    86c6:	2300      	movs	r3, #0
    86c8:	9317      	str	r3, [sp, #92]	; 0x5c
    86ca:	e79c      	b.n	8606 <le_ext_adv_report+0x1aa>
					sec_phy_scan = sec_phy;
    86cc:	f89d 30a2 	ldrb.w	r3, [sp, #162]	; 0xa2
    86d0:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
    86d4:	e771      	b.n	85ba <le_ext_adv_report+0x15e>
				adv_addr = adv_addr_curr;
    86d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    86d8:	9315      	str	r3, [sp, #84]	; 0x54
				adv_addr_type = adv_addr_type_curr;
    86da:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
    86de:	e777      	b.n	85d0 <le_ext_adv_report+0x174>
				direct_addr = direct_addr_curr;
    86e0:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
				direct_addr_type = direct_addr_type_curr;
    86e4:	901e      	str	r0, [sp, #120]	; 0x78
    86e6:	e777      	b.n	85d8 <le_ext_adv_report+0x17c>
			} else if (!data) {
    86e8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    86ea:	b123      	cbz	r3, 86f6 <le_ext_adv_report+0x29a>
				data_len_total += data_len_curr;
    86ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    86ee:	442b      	add	r3, r5
    86f0:	b29b      	uxth	r3, r3
    86f2:	931c      	str	r3, [sp, #112]	; 0x70
    86f4:	e778      	b.n	85e8 <le_ext_adv_report+0x18c>
				data_len = data_len_curr;
    86f6:	f88d 50a3 	strb.w	r5, [sp, #163]	; 0xa3
				data_len_total = data_len;
    86fa:	b2ab      	uxth	r3, r5
    86fc:	931c      	str	r3, [sp, #112]	; 0x70
				data = data_curr;
    86fe:	942b      	str	r4, [sp, #172]	; 0xac
				tx_pwr = tx_pwr_curr;
    8700:	f88d 20b6 	strb.w	r2, [sp, #182]	; 0xb6
				node_rx_data = node_rx_curr;
    8704:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
    8708:	e76e      	b.n	85e8 <le_ext_adv_report+0x18c>
    870a:	bf00      	nop
    870c:	200000d8 	.word	0x200000d8
    8710:	200000e0 	.word	0x200000e0
			if (scan_data) {
    8714:	46d0      	mov	r8, sl
    8716:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    8718:	2b00      	cmp	r3, #0
    871a:	f000 80f3 	beq.w	8904 <le_ext_adv_report+0x4a8>
				if (has_aux_ptr) {
    871e:	2f00      	cmp	r7, #0
    8720:	f040 80f3 	bne.w	890a <le_ext_adv_report+0x4ae>
	uint8_t data_status = 0U;
    8724:	463c      	mov	r4, r7
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) &&
    8726:	9b16      	ldr	r3, [sp, #88]	; 0x58
    8728:	2b00      	cmp	r3, #0
    872a:	f000 80f4 	beq.w	8916 <le_ext_adv_report+0x4ba>
	if (adv_addr) {
    872e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8730:	b123      	cbz	r3, 873c <le_ext_adv_report+0x2e0>
		if (dup_scan &&
    8732:	4b9a      	ldr	r3, [pc, #616]	; (899c <le_ext_adv_report+0x540>)
    8734:	781b      	ldrb	r3, [r3, #0]
    8736:	2b00      	cmp	r3, #0
    8738:	f040 80f2 	bne.w	8920 <le_ext_adv_report+0x4c4>
	if (data_status) {
    873c:	b11c      	cbz	r4, 8746 <le_ext_adv_report+0x2ea>
		if (!(adv_addr ||
    873e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8740:	2b00      	cmp	r3, #0
    8742:	f000 8100 	beq.w	8946 <le_ext_adv_report+0x4ea>
	if (data_len_total > CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX) {
    8746:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8748:	2b1f      	cmp	r3, #31
    874a:	d909      	bls.n	8760 <le_ext_adv_report+0x304>
		if (data_len > data_len_total) {
    874c:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
    8750:	2b1f      	cmp	r3, #31
    8752:	f240 8108 	bls.w	8966 <le_ext_adv_report+0x50a>
			data_len = data_len_total;
    8756:	231f      	movs	r3, #31
    8758:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    875c:	2402      	movs	r4, #2
		data_len_total = CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX;
    875e:	931c      	str	r3, [sp, #112]	; 0x70
	if (direct_addr) {
    8760:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8762:	b11b      	cbz	r3, 876c <le_ext_adv_report+0x310>
		evt_type |= BT_HCI_LE_ADV_EVT_TYPE_DIRECT;
    8764:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8766:	f043 0304 	orr.w	r3, r3, #4
    876a:	9321      	str	r3, [sp, #132]	; 0x84
	evt_buf = buf;
    876c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    876e:	9329      	str	r3, [sp, #164]	; 0xa4
	if ((data_len < data_len_total) || (data_len > data_len_max)) {
    8770:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
    8774:	b29a      	uxth	r2, r3
    8776:	991c      	ldr	r1, [sp, #112]	; 0x70
    8778:	4291      	cmp	r1, r2
    877a:	d801      	bhi.n	8780 <le_ext_adv_report+0x324>
    877c:	2be5      	cmp	r3, #229	; 0xe5
    877e:	d926      	bls.n	87ce <le_ext_adv_report+0x372>
		ext_adv_data_frag(node_rx_data, evt_type, phy, &sec_phy,
    8780:	ab29      	add	r3, sp, #164	; 0xa4
    8782:	930e      	str	r3, [sp, #56]	; 0x38
    8784:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8786:	930d      	str	r3, [sp, #52]	; 0x34
    8788:	ab2b      	add	r3, sp, #172	; 0xac
    878a:	930c      	str	r3, [sp, #48]	; 0x30
    878c:	f10d 03a3 	add.w	r3, sp, #163	; 0xa3
    8790:	930b      	str	r3, [sp, #44]	; 0x2c
    8792:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    8794:	930a      	str	r3, [sp, #40]	; 0x28
    8796:	23e5      	movs	r3, #229	; 0xe5
    8798:	9309      	str	r3, [sp, #36]	; 0x24
    879a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    879c:	9308      	str	r3, [sp, #32]
    879e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    87a0:	9307      	str	r3, [sp, #28]
    87a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    87a4:	9306      	str	r3, [sp, #24]
    87a6:	f10d 03b6 	add.w	r3, sp, #182	; 0xb6
    87aa:	9305      	str	r3, [sp, #20]
    87ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87ae:	9304      	str	r3, [sp, #16]
    87b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    87b2:	9303      	str	r3, [sp, #12]
    87b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    87b6:	9302      	str	r3, [sp, #8]
    87b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    87ba:	9301      	str	r3, [sp, #4]
    87bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    87be:	9300      	str	r3, [sp, #0]
    87c0:	f10d 03a2 	add.w	r3, sp, #162	; 0xa2
    87c4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    87c6:	9921      	ldr	r1, [sp, #132]	; 0x84
    87c8:	9822      	ldr	r0, [sp, #136]	; 0x88
    87ca:	f012 fd27 	bl	1b21c <ext_adv_data_frag>
	evt_type |= (data_status << 5);
    87ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
    87d0:	ea43 1444 	orr.w	r4, r3, r4, lsl #5
    87d4:	b2e4      	uxtb	r4, r4
	ext_adv_info_fill(evt_type, phy, sec_phy, adv_addr_type, adv_addr,
    87d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    87d8:	930a      	str	r3, [sp, #40]	; 0x28
    87da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    87dc:	9309      	str	r3, [sp, #36]	; 0x24
    87de:	f89d 30a3 	ldrb.w	r3, [sp, #163]	; 0xa3
    87e2:	9308      	str	r3, [sp, #32]
    87e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    87e6:	9307      	str	r3, [sp, #28]
    87e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    87ea:	9306      	str	r3, [sp, #24]
    87ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    87ee:	9305      	str	r3, [sp, #20]
    87f0:	f99d 30b6 	ldrsb.w	r3, [sp, #182]	; 0xb6
    87f4:	9304      	str	r3, [sp, #16]
    87f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    87f8:	9303      	str	r3, [sp, #12]
    87fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
    87fc:	9302      	str	r3, [sp, #8]
    87fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    8800:	9301      	str	r3, [sp, #4]
    8802:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8804:	9300      	str	r3, [sp, #0]
    8806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8808:	f89d 20a2 	ldrb.w	r2, [sp, #162]	; 0xa2
    880c:	9925      	ldr	r1, [sp, #148]	; 0x94
    880e:	4620      	mov	r0, r4
    8810:	f012 fc72 	bl	1b0f8 <ext_adv_info_fill>
	if (!scan_data) {
    8814:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    8816:	2b00      	cmp	r3, #0
    8818:	f000 80a9 	beq.w	896e <le_ext_adv_report+0x512>
	if (scan_data_len_total > CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX) {
    881c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    881e:	2b1f      	cmp	r3, #31
    8820:	d909      	bls.n	8836 <le_ext_adv_report+0x3da>
		if (scan_data_len > scan_data_len_total) {
    8822:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
    8826:	2b1f      	cmp	r3, #31
    8828:	f240 80a6 	bls.w	8978 <le_ext_adv_report+0x51c>
			scan_data_len = scan_data_len_total;
    882c:	231f      	movs	r3, #31
    882e:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
		scan_data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8832:	2702      	movs	r7, #2
		scan_data_len_total = CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX;
    8834:	9317      	str	r3, [sp, #92]	; 0x5c
	evt_type &= ~(BIT_MASK(2) << 5);
    8836:	f004 049f 	and.w	r4, r4, #159	; 0x9f
    883a:	f044 0408 	orr.w	r4, r4, #8
	evt_buf = bt_buf_get_rx(BT_BUF_EVT, BUF_GET_TIMEOUT);
    883e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8842:	2300      	movs	r3, #0
    8844:	2001      	movs	r0, #1
    8846:	f7fc fca5 	bl	5194 <bt_buf_get_rx>
    884a:	9029      	str	r0, [sp, #164]	; 0xa4
	LL_ASSERT(evt_buf);
    884c:	2800      	cmp	r0, #0
    884e:	f000 8097 	beq.w	8980 <le_ext_adv_report+0x524>
	net_buf_frag_add(buf, evt_buf);
    8852:	9929      	ldr	r1, [sp, #164]	; 0xa4
    8854:	9824      	ldr	r0, [sp, #144]	; 0x90
    8856:	f014 faac 	bl	1cdb2 <net_buf_frag_add>
	if ((scan_data_len < scan_data_len_total) ||
    885a:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
    885e:	b29a      	uxth	r2, r3
    8860:	9917      	ldr	r1, [sp, #92]	; 0x5c
    8862:	4291      	cmp	r1, r2
    8864:	d801      	bhi.n	886a <le_ext_adv_report+0x40e>
    8866:	2be5      	cmp	r3, #229	; 0xe5
    8868:	d926      	bls.n	88b8 <le_ext_adv_report+0x45c>
		ext_adv_data_frag(node_rx_scan_data, evt_type, phy,
    886a:	ab29      	add	r3, sp, #164	; 0xa4
    886c:	930e      	str	r3, [sp, #56]	; 0x38
    886e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8870:	930d      	str	r3, [sp, #52]	; 0x34
    8872:	ab2c      	add	r3, sp, #176	; 0xb0
    8874:	930c      	str	r3, [sp, #48]	; 0x30
    8876:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
    887a:	930b      	str	r3, [sp, #44]	; 0x2c
    887c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    887e:	930a      	str	r3, [sp, #40]	; 0x28
    8880:	23e5      	movs	r3, #229	; 0xe5
    8882:	9309      	str	r3, [sp, #36]	; 0x24
    8884:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8886:	9308      	str	r3, [sp, #32]
    8888:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    888a:	9307      	str	r3, [sp, #28]
    888c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    888e:	9306      	str	r3, [sp, #24]
    8890:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
    8894:	9305      	str	r3, [sp, #20]
    8896:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8898:	9304      	str	r3, [sp, #16]
    889a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    889c:	9303      	str	r3, [sp, #12]
    889e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    88a0:	9302      	str	r3, [sp, #8]
    88a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    88a4:	9301      	str	r3, [sp, #4]
    88a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    88a8:	9300      	str	r3, [sp, #0]
    88aa:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
    88ae:	9a25      	ldr	r2, [sp, #148]	; 0x94
    88b0:	4621      	mov	r1, r4
    88b2:	9823      	ldr	r0, [sp, #140]	; 0x8c
    88b4:	f012 fcb2 	bl	1b21c <ext_adv_data_frag>
	evt_type |= (scan_data_status << 5);
    88b8:	ea44 1047 	orr.w	r0, r4, r7, lsl #5
	ext_adv_info_fill(evt_type, phy, sec_phy_scan, adv_addr_type, adv_addr,
    88bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    88be:	930a      	str	r3, [sp, #40]	; 0x28
    88c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    88c2:	9309      	str	r3, [sp, #36]	; 0x24
    88c4:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
    88c8:	9308      	str	r3, [sp, #32]
    88ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
    88cc:	9307      	str	r3, [sp, #28]
    88ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    88d0:	9306      	str	r3, [sp, #24]
    88d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    88d4:	9305      	str	r3, [sp, #20]
    88d6:	f99d 30b7 	ldrsb.w	r3, [sp, #183]	; 0xb7
    88da:	9304      	str	r3, [sp, #16]
    88dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    88de:	9303      	str	r3, [sp, #12]
    88e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    88e2:	9302      	str	r3, [sp, #8]
    88e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    88e6:	9301      	str	r3, [sp, #4]
    88e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    88ea:	9300      	str	r3, [sp, #0]
    88ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    88ee:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
    88f2:	9925      	ldr	r1, [sp, #148]	; 0x94
    88f4:	b2c0      	uxtb	r0, r0
    88f6:	f012 fbff 	bl	1b0f8 <ext_adv_info_fill>
	node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    88fa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    88fe:	f012 fd11 	bl	1b324 <node_rx_extra_list_release>
    8902:	e5d0      	b.n	84a6 <le_ext_adv_report+0x4a>
			} else if (has_aux_ptr) {
    8904:	b927      	cbnz	r7, 8910 <le_ext_adv_report+0x4b4>
	uint8_t data_status = 0U;
    8906:	463c      	mov	r4, r7
    8908:	e70d      	b.n	8726 <le_ext_adv_report+0x2ca>
    890a:	2400      	movs	r4, #0
					scan_data_status =
    890c:	2702      	movs	r7, #2
    890e:	e70a      	b.n	8726 <le_ext_adv_report+0x2ca>
				data_status =
    8910:	2402      	movs	r4, #2
	uint8_t scan_data_status = 0U;
    8912:	2700      	movs	r7, #0
    8914:	e707      	b.n	8726 <le_ext_adv_report+0x2ca>
		node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    8916:	f8d8 000c 	ldr.w	r0, [r8, #12]
    891a:	f012 fd03 	bl	1b324 <node_rx_extra_list_release>
		return;
    891e:	e5c2      	b.n	84a6 <le_ext_adv_report+0x4a>
		    dup_found(PDU_ADV_TYPE_EXT_IND, adv_addr_type, adv_addr,
    8920:	9401      	str	r4, [sp, #4]
    8922:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8924:	9300      	str	r3, [sp, #0]
    8926:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8928:	f003 0303 	and.w	r3, r3, #3
    892c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    892e:	991d      	ldr	r1, [sp, #116]	; 0x74
    8930:	2007      	movs	r0, #7
    8932:	f7ff f9a5 	bl	7c80 <dup_found>
		if (dup_scan &&
    8936:	2800      	cmp	r0, #0
    8938:	f43f af00 	beq.w	873c <le_ext_adv_report+0x2e0>
			node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    893c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8940:	f012 fcf0 	bl	1b324 <node_rx_extra_list_release>
			return;
    8944:	e5af      	b.n	84a6 <le_ext_adv_report+0x4a>
		if (!(adv_addr ||
    8946:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8948:	b143      	cbz	r3, 895c <le_ext_adv_report+0x500>
		      (adi && ((tx_pwr != BT_HCI_LE_ADV_TX_POWER_NO_PREF) ||
    894a:	f99d 30b6 	ldrsb.w	r3, [sp, #182]	; 0xb6
    894e:	2b7f      	cmp	r3, #127	; 0x7f
    8950:	f47f aef9 	bne.w	8746 <le_ext_adv_report+0x2ea>
    8954:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    8956:	2b00      	cmp	r3, #0
    8958:	f47f aef5 	bne.w	8746 <le_ext_adv_report+0x2ea>
			node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    895c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8960:	f012 fce0 	bl	1b324 <node_rx_extra_list_release>
			return;
    8964:	e59f      	b.n	84a6 <le_ext_adv_report+0x4a>
		data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8966:	2402      	movs	r4, #2
		data_len_total = CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX;
    8968:	231f      	movs	r3, #31
    896a:	931c      	str	r3, [sp, #112]	; 0x70
    896c:	e6f8      	b.n	8760 <le_ext_adv_report+0x304>
		node_rx_extra_list_release(node_rx->hdr.rx_ftr.extra);
    896e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    8972:	f012 fcd7 	bl	1b324 <node_rx_extra_list_release>
		return;
    8976:	e596      	b.n	84a6 <le_ext_adv_report+0x4a>
		scan_data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8978:	2702      	movs	r7, #2
		scan_data_len_total = CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX;
    897a:	231f      	movs	r3, #31
    897c:	9317      	str	r3, [sp, #92]	; 0x5c
    897e:	e75a      	b.n	8836 <le_ext_adv_report+0x3da>
	LL_ASSERT(evt_buf);
    8980:	f641 1393 	movw	r3, #6547	; 0x1993
    8984:	4a06      	ldr	r2, [pc, #24]	; (89a0 <le_ext_adv_report+0x544>)
    8986:	4907      	ldr	r1, [pc, #28]	; (89a4 <le_ext_adv_report+0x548>)
    8988:	4807      	ldr	r0, [pc, #28]	; (89a8 <le_ext_adv_report+0x54c>)
    898a:	f010 ff20 	bl	197ce <assert_print>
    898e:	4040      	eors	r0, r0
    8990:	f380 8811 	msr	BASEPRI, r0
    8994:	f04f 0003 	mov.w	r0, #3
    8998:	df02      	svc	2
    899a:	e75a      	b.n	8852 <le_ext_adv_report+0x3f6>
    899c:	20009294 	.word	0x20009294
    89a0:	0001eb14 	.word	0x0001eb14
    89a4:	0001ebc8 	.word	0x0001ebc8
    89a8:	0001e920 	.word	0x0001e920

000089ac <le_per_adv_sync_report>:
{
    89ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    89b0:	b08b      	sub	sp, #44	; 0x2c
    89b2:	9203      	str	r2, [sp, #12]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89b4:	4ba8      	ldr	r3, [pc, #672]	; (8c58 <le_per_adv_sync_report+0x2ac>)
    89b6:	685b      	ldr	r3, [r3, #4]
    89b8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    89bc:	d055      	beq.n	8a6a <le_per_adv_sync_report+0xbe>
    89be:	460e      	mov	r6, r1
	    (!(le_event_mask & BT_EVT_MASK_LE_PER_ADVERTISING_REPORT) &&
    89c0:	4aa6      	ldr	r2, [pc, #664]	; (8c5c <le_per_adv_sync_report+0x2b0>)
    89c2:	6813      	ldr	r3, [r2, #0]
    89c4:	6852      	ldr	r2, [r2, #4]
    89c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    89ca:	b913      	cbnz	r3, 89d2 <le_per_adv_sync_report+0x26>
	    (!(le_event_mask & BT_EVT_MASK_LE_PER_ADVERTISING_REPORT) &&
    89cc:	f012 0f02 	tst.w	r2, #2
    89d0:	d04b      	beq.n	8a6a <le_per_adv_sync_report+0xbe>
	sync = HDR_LLL2ULL(ftr->param);
    89d2:	68b2      	ldr	r2, [r6, #8]
    89d4:	6812      	ldr	r2, [r2, #0]
	if (unlikely(!sync->timeout_reload)) {
    89d6:	f8b2 1080 	ldrh.w	r1, [r2, #128]	; 0x80
    89da:	b289      	uxth	r1, r1
    89dc:	fab1 f481 	clz	r4, r1
    89e0:	0964      	lsrs	r4, r4, #5
    89e2:	2900      	cmp	r1, #0
    89e4:	d041      	beq.n	8a6a <le_per_adv_sync_report+0xbe>
	if ((le_event_mask & BT_EVT_MASK_LE_PER_ADVERTISING_REPORT) &&
    89e6:	b11b      	cbz	r3, 89f0 <le_per_adv_sync_report+0x44>
    89e8:	7ef3      	ldrb	r3, [r6, #27]
    89ea:	f013 0f10 	tst.w	r3, #16
    89ee:	d12c      	bne.n	8a4a <le_per_adv_sync_report+0x9e>
	rssi = -(node_rx->hdr.rx_ftr.rssi);
    89f0:	7e33      	ldrb	r3, [r6, #24]
    89f2:	425b      	negs	r3, r3
    89f4:	fa4f fa83 	sxtb.w	sl, r3
	p = (void *)&adv->adv_ext_ind;
    89f8:	1c83      	adds	r3, r0, #2
	h = (void *)p->ext_hdr_adv_data;
    89fa:	1cc7      	adds	r7, r0, #3
	if (!p->ext_hdr_len) {
    89fc:	7881      	ldrb	r1, [r0, #2]
    89fe:	f011 013f 	ands.w	r1, r1, #63	; 0x3f
    8a02:	9106      	str	r1, [sp, #24]
    8a04:	d05d      	beq.n	8ac2 <le_per_adv_sync_report+0x116>
	ptr = h->data;
    8a06:	1d07      	adds	r7, r0, #4
	if (h->adv_addr) {
    8a08:	78c1      	ldrb	r1, [r0, #3]
    8a0a:	f011 0f01 	tst.w	r1, #1
    8a0e:	d001      	beq.n	8a14 <le_per_adv_sync_report+0x68>
		ptr += BDADDR_SIZE;
    8a10:	f100 070a 	add.w	r7, r0, #10
	if (h->tgt_addr) {
    8a14:	f011 0f02 	tst.w	r1, #2
    8a18:	d000      	beq.n	8a1c <le_per_adv_sync_report+0x70>
		ptr += BDADDR_SIZE;
    8a1a:	3706      	adds	r7, #6
	if (h->cte_info) {
    8a1c:	f011 0f04 	tst.w	r1, #4
    8a20:	d026      	beq.n	8a70 <le_per_adv_sync_report+0xc4>
		cte_type = cte_info->type;
    8a22:	f817 5b01 	ldrb.w	r5, [r7], #1
    8a26:	09ad      	lsrs	r5, r5, #6
    8a28:	9505      	str	r5, [sp, #20]
	if (h->adi) {
    8a2a:	f011 0f08 	tst.w	r1, #8
    8a2e:	d022      	beq.n	8a76 <le_per_adv_sync_report+0xca>
		adi = (void *)ptr;
    8a30:	463d      	mov	r5, r7
		ptr += sizeof(struct pdu_adv_adi);
    8a32:	3702      	adds	r7, #2
	if (h->aux_ptr) {
    8a34:	f011 0f10 	tst.w	r1, #16
    8a38:	d01f      	beq.n	8a7a <le_per_adv_sync_report+0xce>
		if (aux_ptr->phy > EXT_ADV_AUX_PHY_LE_CODED) {
    8a3a:	f897 c002 	ldrb.w	ip, [r7, #2]
    8a3e:	f1bc 0f5f 	cmp.w	ip, #95	; 0x5f
    8a42:	d812      	bhi.n	8a6a <le_per_adv_sync_report+0xbe>
		aux_ptr = (void *)ptr;
    8a44:	9704      	str	r7, [sp, #16]
		ptr += sizeof(*aux_ptr);
    8a46:	3703      	adds	r7, #3
    8a48:	e01b      	b.n	8a82 <le_per_adv_sync_report+0xd6>
		sep = meta_evt(buf,
    8a4a:	2207      	movs	r2, #7
    8a4c:	210f      	movs	r1, #15
    8a4e:	9803      	ldr	r0, [sp, #12]
    8a50:	f012 fa28 	bl	1aea4 <meta_evt>
		sep->handle = sys_cpu_to_le16(node_rx->hdr.handle);
    8a54:	88f3      	ldrh	r3, [r6, #6]
    8a56:	8003      	strh	r3, [r0, #0]
		sep->tx_power = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8a58:	237f      	movs	r3, #127	; 0x7f
    8a5a:	7083      	strb	r3, [r0, #2]
		sep->rssi = BT_HCI_LE_RSSI_NOT_AVAILABLE;
    8a5c:	70c3      	strb	r3, [r0, #3]
		sep->cte_type = BT_HCI_LE_NO_CTE;
    8a5e:	23ff      	movs	r3, #255	; 0xff
    8a60:	7103      	strb	r3, [r0, #4]
		sep->data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8a62:	2302      	movs	r3, #2
    8a64:	7143      	strb	r3, [r0, #5]
		sep->length = 0;
    8a66:	2300      	movs	r3, #0
    8a68:	7183      	strb	r3, [r0, #6]
}
    8a6a:	b00b      	add	sp, #44	; 0x2c
    8a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t cte_type = BT_HCI_LE_NO_CTE;
    8a70:	25ff      	movs	r5, #255	; 0xff
    8a72:	9505      	str	r5, [sp, #20]
    8a74:	e7d9      	b.n	8a2a <le_per_adv_sync_report+0x7e>
	const struct pdu_adv_adi *adi = NULL;
    8a76:	2500      	movs	r5, #0
    8a78:	e7dc      	b.n	8a34 <le_per_adv_sync_report+0x88>
	struct pdu_adv_aux_ptr *aux_ptr = NULL;
    8a7a:	f04f 0c00 	mov.w	ip, #0
    8a7e:	f8cd c010 	str.w	ip, [sp, #16]
	if (h->sync_info) {
    8a82:	f011 0f20 	tst.w	r1, #32
    8a86:	d000      	beq.n	8a8a <le_per_adv_sync_report+0xde>
		ptr += sizeof(struct pdu_adv_sync_info);
    8a88:	3712      	adds	r7, #18
	if (h->tx_pwr) {
    8a8a:	f011 0f40 	tst.w	r1, #64	; 0x40
    8a8e:	d015      	beq.n	8abc <le_per_adv_sync_report+0x110>
		tx_pwr = *(int8_t *)ptr;
    8a90:	f917 1b01 	ldrsb.w	r1, [r7], #1
    8a94:	9107      	str	r1, [sp, #28]
	hdr_len = ptr - (uint8_t *)p;
    8a96:	1afb      	subs	r3, r7, r3
    8a98:	b2db      	uxtb	r3, r3
	hdr_buf_len = PDU_AC_EXT_HEADER_SIZE_MIN + p->ext_hdr_len;
    8a9a:	7881      	ldrb	r1, [r0, #2]
    8a9c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    8aa0:	3101      	adds	r1, #1
	if (hdr_len > hdr_buf_len) {
    8aa2:	428b      	cmp	r3, r1
    8aa4:	d85a      	bhi.n	8b5c <le_per_adv_sync_report+0x1b0>
		acad_len = hdr_buf_len - hdr_len;
    8aa6:	eba1 0c03 	sub.w	ip, r1, r3
		if (acad_len) {
    8aaa:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
    8aae:	f8cd c018 	str.w	ip, [sp, #24]
    8ab2:	d058      	beq.n	8b66 <le_per_adv_sync_report+0x1ba>
			hdr_len += acad_len;
    8ab4:	460b      	mov	r3, r1
			acad = ptr;
    8ab6:	46b9      	mov	r9, r7
			ptr += acad_len;
    8ab8:	4467      	add	r7, ip
    8aba:	e00c      	b.n	8ad6 <le_per_adv_sync_report+0x12a>
	int8_t tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8abc:	217f      	movs	r1, #127	; 0x7f
    8abe:	9107      	str	r1, [sp, #28]
    8ac0:	e7e9      	b.n	8a96 <le_per_adv_sync_report+0xea>
		hdr_len = PDU_AC_EXT_HEADER_SIZE_MIN;
    8ac2:	2301      	movs	r3, #1
	uint8_t *acad = NULL;
    8ac4:	f04f 0900 	mov.w	r9, #0
	uint8_t cte_type = BT_HCI_LE_NO_CTE;
    8ac8:	21ff      	movs	r1, #255	; 0xff
    8aca:	9105      	str	r1, [sp, #20]
	const struct pdu_adv_adi *adi = NULL;
    8acc:	464d      	mov	r5, r9
	struct pdu_adv_aux_ptr *aux_ptr = NULL;
    8ace:	f8cd 9010 	str.w	r9, [sp, #16]
	int8_t tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8ad2:	217f      	movs	r1, #127	; 0x7f
    8ad4:	9107      	str	r1, [sp, #28]
	if (hdr_len < adv->len) {
    8ad6:	f890 8001 	ldrb.w	r8, [r0, #1]
    8ada:	4598      	cmp	r8, r3
    8adc:	d946      	bls.n	8b6c <le_per_adv_sync_report+0x1c0>
		data_len = adv->len - hdr_len;
    8ade:	eba8 0803 	sub.w	r8, r8, r3
    8ae2:	fa5f f888 	uxtb.w	r8, r8
	} else if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC_ADI_SUPPORT) &&
    8ae6:	2d00      	cmp	r5, #0
    8ae8:	d051      	beq.n	8b8e <le_per_adv_sync_report+0x1e2>
			      BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_PARTIAL :
    8aea:	9b04      	ldr	r3, [sp, #16]
    8aec:	1e18      	subs	r0, r3, #0
    8aee:	bf18      	it	ne
    8af0:	2001      	movne	r0, #1
		accept = sync->rx_enable && ftr->sync_rx_enabled &&
    8af2:	f892 308e 	ldrb.w	r3, [r2, #142]	; 0x8e
    8af6:	f013 0f02 	tst.w	r3, #2
    8afa:	d007      	beq.n	8b0c <le_per_adv_sync_report+0x160>
    8afc:	7ef1      	ldrb	r1, [r6, #27]
    8afe:	f011 0f01 	tst.w	r1, #1
    8b02:	d003      	beq.n	8b0c <le_per_adv_sync_report+0x160>
    8b04:	f013 0f04 	tst.w	r3, #4
    8b08:	d133      	bne.n	8b72 <le_per_adv_sync_report+0x1c6>
    8b0a:	2401      	movs	r4, #1
	data_len_total = node_rx->hdr.rx_ftr.aux_data_len;
    8b0c:	f8b6 b01c 	ldrh.w	fp, [r6, #28]
	if ((le_event_mask & BT_EVT_MASK_LE_PER_ADVERTISING_REPORT) && accept &&
    8b10:	4b52      	ldr	r3, [pc, #328]	; (8c5c <le_per_adv_sync_report+0x2b0>)
    8b12:	681b      	ldr	r3, [r3, #0]
    8b14:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    8b18:	f000 80a8 	beq.w	8c6c <le_per_adv_sync_report+0x2c0>
    8b1c:	2c00      	cmp	r4, #0
    8b1e:	f000 8116 	beq.w	8d4e <le_per_adv_sync_report+0x3a2>
	    ((data_len_total - data_len) < CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX)) {
    8b22:	4645      	mov	r5, r8
    8b24:	ebab 0308 	sub.w	r3, fp, r8
	if ((le_event_mask & BT_EVT_MASK_LE_PER_ADVERTISING_REPORT) && accept &&
    8b28:	2b1e      	cmp	r3, #30
    8b2a:	f300 8112 	bgt.w	8d52 <le_per_adv_sync_report+0x3a6>
		if (data_len_total > data_len) {
    8b2e:	fa1f f888 	uxth.w	r8, r8
    8b32:	45c3      	cmp	fp, r8
    8b34:	d901      	bls.n	8b3a <le_per_adv_sync_report+0x18e>
			tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8b36:	237f      	movs	r3, #127	; 0x7f
    8b38:	9307      	str	r3, [sp, #28]
		data_len = MIN(data_len, (CONFIG_BT_CTLR_SCAN_DATA_LEN_MAX +
    8b3a:	f105 031f 	add.w	r3, r5, #31
    8b3e:	eba3 030b 	sub.w	r3, r3, fp
    8b42:	429d      	cmp	r5, r3
    8b44:	bfa8      	it	ge
    8b46:	461d      	movge	r5, r3
    8b48:	b2ed      	uxtb	r5, r5
	evt_buf = buf;
    8b4a:	9b03      	ldr	r3, [sp, #12]
    8b4c:	f8cd b020 	str.w	fp, [sp, #32]
    8b50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
    8b54:	4699      	mov	r9, r3
    8b56:	f8dd b01c 	ldr.w	fp, [sp, #28]
    8b5a:	e035      	b.n	8bc8 <le_per_adv_sync_report+0x21c>
	uint8_t *acad = NULL;
    8b5c:	f04f 0900 	mov.w	r9, #0
	uint8_t acad_len = 0U;
    8b60:	f8cd 9018 	str.w	r9, [sp, #24]
    8b64:	e7b7      	b.n	8ad6 <le_per_adv_sync_report+0x12a>
	uint8_t *acad = NULL;
    8b66:	f04f 0900 	mov.w	r9, #0
    8b6a:	e7b4      	b.n	8ad6 <le_per_adv_sync_report+0x12a>
	uint8_t *data = NULL;
    8b6c:	2700      	movs	r7, #0
	uint8_t data_len = 0U;
    8b6e:	46b8      	mov	r8, r7
    8b70:	e7b9      	b.n	8ae6 <le_per_adv_sync_report+0x13a>
				     sync->peer_id_addr_type,
    8b72:	4619      	mov	r1, r3
			  !dup_found(PDU_ADV_TYPE_EXT_IND,
    8b74:	9001      	str	r0, [sp, #4]
    8b76:	9500      	str	r5, [sp, #0]
    8b78:	2304      	movs	r3, #4
    8b7a:	3288      	adds	r2, #136	; 0x88
    8b7c:	f001 0101 	and.w	r1, r1, #1
    8b80:	2007      	movs	r0, #7
    8b82:	f7ff f87d 	bl	7c80 <dup_found>
			 (!sync->nodups ||
    8b86:	2800      	cmp	r0, #0
    8b88:	d1c0      	bne.n	8b0c <le_per_adv_sync_report+0x160>
		accept = sync->rx_enable && ftr->sync_rx_enabled &&
    8b8a:	2401      	movs	r4, #1
    8b8c:	e7be      	b.n	8b0c <le_per_adv_sync_report+0x160>
		accept = sync->rx_enable && ftr->sync_rx_enabled;
    8b8e:	f892 308e 	ldrb.w	r3, [r2, #142]	; 0x8e
    8b92:	f013 0f02 	tst.w	r3, #2
    8b96:	d0b9      	beq.n	8b0c <le_per_adv_sync_report+0x160>
    8b98:	7ef3      	ldrb	r3, [r6, #27]
    8b9a:	f013 0f01 	tst.w	r3, #1
    8b9e:	d0b5      	beq.n	8b0c <le_per_adv_sync_report+0x160>
    8ba0:	2401      	movs	r4, #1
    8ba2:	e7b3      	b.n	8b0c <le_per_adv_sync_report+0x160>
				evt_buf = bt_buf_get_rx(BT_BUF_EVT, BUF_GET_TIMEOUT);
    8ba4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8ba8:	2300      	movs	r3, #0
    8baa:	2001      	movs	r0, #1
    8bac:	f7fc faf2 	bl	5194 <bt_buf_get_rx>
				LL_ASSERT(evt_buf);
    8bb0:	4681      	mov	r9, r0
    8bb2:	b3b0      	cbz	r0, 8c22 <le_per_adv_sync_report+0x276>
				net_buf_frag_add(buf, evt_buf);
    8bb4:	4649      	mov	r1, r9
    8bb6:	9803      	ldr	r0, [sp, #12]
    8bb8:	f014 f8fb 	bl	1cdb2 <net_buf_frag_add>
				data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_PARTIAL;
    8bbc:	2301      	movs	r3, #1
				tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
    8bbe:	f04f 0b7f 	mov.w	fp, #127	; 0x7f
			sep->data_status = data_status;
    8bc2:	7163      	strb	r3, [r4, #5]
		} while (data_len > 0);
    8bc4:	2d00      	cmp	r5, #0
    8bc6:	d043      	beq.n	8c50 <le_per_adv_sync_report+0x2a4>
			data_len_frag = MIN(data_len, data_len_max);
    8bc8:	46a8      	mov	r8, r5
    8bca:	2df7      	cmp	r5, #247	; 0xf7
    8bcc:	bf28      	it	cs
    8bce:	f04f 08f7 	movcs.w	r8, #247	; 0xf7
			sep = meta_evt(evt_buf,
    8bd2:	f108 0207 	add.w	r2, r8, #7
    8bd6:	b2d2      	uxtb	r2, r2
    8bd8:	210f      	movs	r1, #15
    8bda:	4648      	mov	r0, r9
    8bdc:	f012 f962 	bl	1aea4 <meta_evt>
    8be0:	4604      	mov	r4, r0
			sep->handle = sys_cpu_to_le16(node_rx->hdr.handle);
    8be2:	88f3      	ldrh	r3, [r6, #6]
    8be4:	8003      	strh	r3, [r0, #0]
			sep->tx_power = tx_pwr;
    8be6:	f880 b002 	strb.w	fp, [r0, #2]
			sep->rssi = rssi;
    8bea:	f880 a003 	strb.w	sl, [r0, #3]
			sep->cte_type = cte_type;
    8bee:	9b05      	ldr	r3, [sp, #20]
    8bf0:	7103      	strb	r3, [r0, #4]
			sep->length = data_len_frag;
    8bf2:	f880 8006 	strb.w	r8, [r0, #6]
    8bf6:	4642      	mov	r2, r8
    8bf8:	4639      	mov	r1, r7
    8bfa:	3007      	adds	r0, #7
    8bfc:	f7f8 fb7e 	bl	12fc <memcpy>
			data += data_len_frag;
    8c00:	4447      	add	r7, r8
			data_len -= data_len_frag;
    8c02:	eba5 0508 	sub.w	r5, r5, r8
			if (data_len > 0) {
    8c06:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    8c0a:	d1cb      	bne.n	8ba4 <le_per_adv_sync_report+0x1f8>
			} else if (!aux_ptr &&
    8c0c:	9b04      	ldr	r3, [sp, #16]
    8c0e:	b1b3      	cbz	r3, 8c3e <le_per_adv_sync_report+0x292>
			} else if (ftr->aux_sched &&
    8c10:	7ef3      	ldrb	r3, [r6, #27]
    8c12:	f013 0f04 	tst.w	r3, #4
    8c16:	d017      	beq.n	8c48 <le_per_adv_sync_report+0x29c>
    8c18:	9b08      	ldr	r3, [sp, #32]
    8c1a:	2b1e      	cmp	r3, #30
    8c1c:	d916      	bls.n	8c4c <le_per_adv_sync_report+0x2a0>
				data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8c1e:	2302      	movs	r3, #2
    8c20:	e7cf      	b.n	8bc2 <le_per_adv_sync_report+0x216>
				LL_ASSERT(evt_buf);
    8c22:	f641 330e 	movw	r3, #6926	; 0x1b0e
    8c26:	4a0e      	ldr	r2, [pc, #56]	; (8c60 <le_per_adv_sync_report+0x2b4>)
    8c28:	490e      	ldr	r1, [pc, #56]	; (8c64 <le_per_adv_sync_report+0x2b8>)
    8c2a:	480f      	ldr	r0, [pc, #60]	; (8c68 <le_per_adv_sync_report+0x2bc>)
    8c2c:	f010 fdcf 	bl	197ce <assert_print>
    8c30:	4040      	eors	r0, r0
    8c32:	f380 8811 	msr	BASEPRI, r0
    8c36:	f04f 0003 	mov.w	r0, #3
    8c3a:	df02      	svc	2
    8c3c:	e7ba      	b.n	8bb4 <le_per_adv_sync_report+0x208>
			} else if (!aux_ptr &&
    8c3e:	9b08      	ldr	r3, [sp, #32]
    8c40:	2b1f      	cmp	r3, #31
    8c42:	d8e5      	bhi.n	8c10 <le_per_adv_sync_report+0x264>
				data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_COMPLETE;
    8c44:	462b      	mov	r3, r5
    8c46:	e7bc      	b.n	8bc2 <le_per_adv_sync_report+0x216>
				data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_INCOMPLETE;
    8c48:	2302      	movs	r3, #2
    8c4a:	e7ba      	b.n	8bc2 <le_per_adv_sync_report+0x216>
				data_status = BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_PARTIAL;
    8c4c:	2301      	movs	r3, #1
    8c4e:	e7b8      	b.n	8bc2 <le_per_adv_sync_report+0x216>
		evt_buf = NULL;
    8c50:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    8c54:	2400      	movs	r4, #0
    8c56:	e00a      	b.n	8c6e <le_per_adv_sync_report+0x2c2>
    8c58:	200000d8 	.word	0x200000d8
    8c5c:	200000e0 	.word	0x200000e0
    8c60:	0001eb14 	.word	0x0001eb14
    8c64:	0001ebc8 	.word	0x0001ebc8
    8c68:	0001e920 	.word	0x0001e920
	evt_buf = buf;
    8c6c:	9c03      	ldr	r4, [sp, #12]
	if ((le_event_mask & BT_EVT_MASK_LE_BIGINFO_ADV_REPORT) && acad &&
    8c6e:	4b49      	ldr	r3, [pc, #292]	; (8d94 <le_per_adv_sync_report+0x3e8>)
    8c70:	685b      	ldr	r3, [r3, #4]
    8c72:	f013 0f02 	tst.w	r3, #2
    8c76:	f43f aef8 	beq.w	8a6a <le_per_adv_sync_report+0xbe>
    8c7a:	f1b9 0f00 	cmp.w	r9, #0
    8c7e:	f43f aef4 	beq.w	8a6a <le_per_adv_sync_report+0xbe>
    8c82:	9b06      	ldr	r3, [sp, #24]
    8c84:	2b22      	cmp	r3, #34	; 0x22
    8c86:	f67f aef0 	bls.w	8a6a <le_per_adv_sync_report+0xbe>
		if (acad[PDU_ADV_DATA_HEADER_TYPE_OFFSET] != BT_DATA_BIG_INFO) {
    8c8a:	f899 3001 	ldrb.w	r3, [r9, #1]
    8c8e:	2b2c      	cmp	r3, #44	; 0x2c
    8c90:	f47f aeeb 	bne.w	8a6a <le_per_adv_sync_report+0xbe>
		bi_size = acad[PDU_ADV_DATA_HEADER_LEN_OFFSET];
    8c94:	f899 5000 	ldrb.w	r5, [r9]
		if (!evt_buf) {
    8c98:	2c00      	cmp	r4, #0
    8c9a:	d05c      	beq.n	8d56 <le_per_adv_sync_report+0x3aa>
		sep = meta_evt(evt_buf, BT_HCI_EVT_LE_BIGINFO_ADV_REPORT,
    8c9c:	2213      	movs	r2, #19
    8c9e:	2122      	movs	r1, #34	; 0x22
    8ca0:	4620      	mov	r0, r4
    8ca2:	f012 f8ff 	bl	1aea4 <meta_evt>
		sep->sync_handle = sys_cpu_to_le16(node_rx->hdr.handle);
    8ca6:	88f3      	ldrh	r3, [r6, #6]
    8ca8:	8003      	strh	r3, [r0, #0]
		sep->num_bis = bi->num_bis;
    8caa:	f899 3005 	ldrb.w	r3, [r9, #5]
    8cae:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    8cb2:	7083      	strb	r3, [r0, #2]
		sep->nse = bi->nse;
    8cb4:	f899 3006 	ldrb.w	r3, [r9, #6]
    8cb8:	f3c3 0304 	ubfx	r3, r3, #0, #5
    8cbc:	70c3      	strb	r3, [r0, #3]
		sep->iso_interval = bi->iso_interval;
    8cbe:	f899 2003 	ldrb.w	r2, [r9, #3]
    8cc2:	f899 3004 	ldrb.w	r3, [r9, #4]
    8cc6:	005b      	lsls	r3, r3, #1
    8cc8:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    8ccc:	f899 2005 	ldrb.w	r2, [r9, #5]
    8cd0:	f002 0207 	and.w	r2, r2, #7
    8cd4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8cd8:	8083      	strh	r3, [r0, #4]
		sep->bn = bi->bn;
    8cda:	f899 3006 	ldrb.w	r3, [r9, #6]
    8cde:	f3c3 1342 	ubfx	r3, r3, #5, #3
    8ce2:	7183      	strb	r3, [r0, #6]
		sep->pto = bi->pto;
    8ce4:	f899 3009 	ldrb.w	r3, [r9, #9]
    8ce8:	f3c3 1303 	ubfx	r3, r3, #4, #4
    8cec:	71c3      	strb	r3, [r0, #7]
		sep->irc = bi->irc;
    8cee:	f899 300c 	ldrb.w	r3, [r9, #12]
    8cf2:	f3c3 1303 	ubfx	r3, r3, #4, #4
    8cf6:	7203      	strb	r3, [r0, #8]
		sep->max_pdu = bi->max_pdu;
    8cf8:	f899 300d 	ldrb.w	r3, [r9, #13]
    8cfc:	f8a0 3009 	strh.w	r3, [r0, #9]
		sys_put_le24(sys_le24_to_cpu(bi->sdu_interval),
    8d00:	f899 2013 	ldrb.w	r2, [r9, #19]
    8d04:	f899 3014 	ldrb.w	r3, [r9, #20]
    8d08:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    8d0c:	f899 3015 	ldrb.w	r3, [r9, #21]
    8d10:	f003 030f 	and.w	r3, r3, #15
    8d14:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
	dst[0] = val;
    8d18:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    8d1a:	0a12      	lsrs	r2, r2, #8
    8d1c:	7302      	strb	r2, [r0, #12]
	dst[2] = val >> 16;
    8d1e:	0c1b      	lsrs	r3, r3, #16
    8d20:	7343      	strb	r3, [r0, #13]
		sep->max_sdu = bi->max_sdu;
    8d22:	f899 2015 	ldrb.w	r2, [r9, #21]
    8d26:	f899 3016 	ldrb.w	r3, [r9, #22]
    8d2a:	011b      	lsls	r3, r3, #4
    8d2c:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
    8d30:	81c3      	strh	r3, [r0, #14]
		sep->phy = HCI_AUX_PHY_TO_HCI_PHY(bi->chm_phy[4] >> 5);
    8d32:	f899 301d 	ldrb.w	r3, [r9, #29]
    8d36:	095b      	lsrs	r3, r3, #5
    8d38:	3301      	adds	r3, #1
    8d3a:	7403      	strb	r3, [r0, #16]
		sep->framing = (bi->payload_count_framing[4] >> 7) & 0x01;
    8d3c:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
    8d40:	09db      	lsrs	r3, r3, #7
    8d42:	7443      	strb	r3, [r0, #17]
		if (bi_size == (PDU_BIG_INFO_ENCRYPTED_SIZE + 1)) {
    8d44:	2d3a      	cmp	r5, #58	; 0x3a
    8d46:	d021      	beq.n	8d8c <le_per_adv_sync_report+0x3e0>
			sep->encryption = 0U;
    8d48:	2300      	movs	r3, #0
    8d4a:	7483      	strb	r3, [r0, #18]
    8d4c:	e68d      	b.n	8a6a <le_per_adv_sync_report+0xbe>
	evt_buf = buf;
    8d4e:	9c03      	ldr	r4, [sp, #12]
    8d50:	e78d      	b.n	8c6e <le_per_adv_sync_report+0x2c2>
    8d52:	9c03      	ldr	r4, [sp, #12]
    8d54:	e78b      	b.n	8c6e <le_per_adv_sync_report+0x2c2>
			evt_buf = bt_buf_get_rx(BT_BUF_EVT, BUF_GET_TIMEOUT);
    8d56:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8d5a:	2300      	movs	r3, #0
    8d5c:	2001      	movs	r0, #1
    8d5e:	f7fc fa19 	bl	5194 <bt_buf_get_rx>
			LL_ASSERT(evt_buf);
    8d62:	4604      	mov	r4, r0
    8d64:	b120      	cbz	r0, 8d70 <le_per_adv_sync_report+0x3c4>
			net_buf_frag_add(buf, evt_buf);
    8d66:	4621      	mov	r1, r4
    8d68:	9803      	ldr	r0, [sp, #12]
    8d6a:	f014 f822 	bl	1cdb2 <net_buf_frag_add>
    8d6e:	e795      	b.n	8c9c <le_per_adv_sync_report+0x2f0>
			LL_ASSERT(evt_buf);
    8d70:	f641 333e 	movw	r3, #6974	; 0x1b3e
    8d74:	4a08      	ldr	r2, [pc, #32]	; (8d98 <le_per_adv_sync_report+0x3ec>)
    8d76:	4909      	ldr	r1, [pc, #36]	; (8d9c <le_per_adv_sync_report+0x3f0>)
    8d78:	4809      	ldr	r0, [pc, #36]	; (8da0 <le_per_adv_sync_report+0x3f4>)
    8d7a:	f010 fd28 	bl	197ce <assert_print>
    8d7e:	4040      	eors	r0, r0
    8d80:	f380 8811 	msr	BASEPRI, r0
    8d84:	f04f 0003 	mov.w	r0, #3
    8d88:	df02      	svc	2
    8d8a:	e7ec      	b.n	8d66 <le_per_adv_sync_report+0x3ba>
			sep->encryption = 1U;
    8d8c:	2301      	movs	r3, #1
    8d8e:	7483      	strb	r3, [r0, #18]
    8d90:	e66b      	b.n	8a6a <le_per_adv_sync_report+0xbe>
    8d92:	bf00      	nop
    8d94:	200000e0 	.word	0x200000e0
    8d98:	0001eb14 	.word	0x0001eb14
    8d9c:	0001ebc8 	.word	0x0001ebc8
    8da0:	0001e920 	.word	0x0001e920

00008da4 <le_df_connectionless_iq_report>:
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8da4:	4b44      	ldr	r3, [pc, #272]	; (8eb8 <le_df_connectionless_iq_report+0x114>)
    8da6:	685b      	ldr	r3, [r3, #4]
    8da8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
    8dac:	f000 8083 	beq.w	8eb6 <le_df_connectionless_iq_report+0x112>
{
    8db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8db4:	460c      	mov	r4, r1
    8db6:	4616      	mov	r6, r2
	    !(le_event_mask & BT_EVT_MASK_LE_CONNECTIONLESS_IQ_REPORT)) {
    8db8:	4b40      	ldr	r3, [pc, #256]	; (8ebc <le_df_connectionless_iq_report+0x118>)
    8dba:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    8dbc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8dc0:	d101      	bne.n	8dc6 <le_df_connectionless_iq_report+0x22>
}
    8dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		sync = HDR_LLL2ULL(lll);
    8dc6:	6888      	ldr	r0, [r1, #8]
    8dc8:	f850 5b40 	ldr.w	r5, [r0], #64
		if (ull_df_sync_cfg_is_not_enabled(&lll->df_cfg) ||
    8dcc:	f013 f99d 	bl	1c10a <ull_df_sync_cfg_is_not_enabled>
    8dd0:	2800      	cmp	r0, #0
    8dd2:	d1f6      	bne.n	8dc2 <le_df_connectionless_iq_report+0x1e>
		    !sync->timeout_reload) {
    8dd4:	f8b5 3080 	ldrh.w	r3, [r5, #128]	; 0x80
    8dd8:	b29b      	uxth	r3, r3
		if (ull_df_sync_cfg_is_not_enabled(&lll->df_cfg) ||
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d0f1      	beq.n	8dc2 <le_df_connectionless_iq_report+0x1e>
		sync_handle = ull_sync_handle_get(sync);
    8dde:	4628      	mov	r0, r5
    8de0:	f002 f94a 	bl	b078 <ull_sync_handle_get>
    8de4:	4607      	mov	r7, r0
		per_evt_counter = iq_report->event_counter;
    8de6:	f8b4 8026 	ldrh.w	r8, [r4, #38]	; 0x26
	samples_cnt = (!iq_report->sample_count ? 1 : iq_report->sample_count);
    8dea:	f894 5020 	ldrb.w	r5, [r4, #32]
    8dee:	b905      	cbnz	r5, 8df2 <le_df_connectionless_iq_report+0x4e>
    8df0:	2501      	movs	r5, #1
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONNECTIONLESS_IQ_REPORT,
    8df2:	1daa      	adds	r2, r5, #6
    8df4:	0052      	lsls	r2, r2, #1
    8df6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    8dfa:	2115      	movs	r1, #21
    8dfc:	4630      	mov	r0, r6
    8dfe:	f012 f851 	bl	1aea4 <meta_evt>
	rssi = RSSI_DBM_TO_DECI_DBM(iq_report->hdr.rx_ftr.rssi);
    8e02:	7e23      	ldrb	r3, [r4, #24]
    8e04:	ebc3 3243 	rsb	r2, r3, r3, lsl #13
    8e08:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
    8e0c:	005b      	lsls	r3, r3, #1
	sep->sync_handle = sys_cpu_to_le16(sync_handle);
    8e0e:	8007      	strh	r7, [r0, #0]
	sep->rssi = sys_cpu_to_le16(rssi);
    8e10:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->rssi_ant_id = iq_report->rssi_ant_id;
    8e14:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    8e18:	7143      	strb	r3, [r0, #5]
	sep->cte_type = iq_report->cte_info.type;
    8e1a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    8e1e:	f3c3 1281 	ubfx	r2, r3, #6, #2
    8e22:	7182      	strb	r2, [r0, #6]
	sep->chan_idx = iq_report->chan_idx;
    8e24:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
    8e28:	7082      	strb	r2, [r0, #2]
	sep->per_evt_counter = sys_cpu_to_le16(per_evt_counter);
    8e2a:	f8a0 8009 	strh.w	r8, [r0, #9]
	if (sep->cte_type == BT_HCI_LE_AOA_CTE) {
    8e2e:	099b      	lsrs	r3, r3, #6
    8e30:	d109      	bne.n	8e46 <le_df_connectionless_iq_report+0xa2>
		sep->slot_durations = iq_report->local_slot_durations;
    8e32:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    8e36:	71c3      	strb	r3, [r0, #7]
	sep->packet_status = iq_report->packet_status;
    8e38:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    8e3c:	7203      	strb	r3, [r0, #8]
	if (iq_report->packet_status == BT_HCI_LE_CTE_INSUFFICIENT_RESOURCES) {
    8e3e:	2bff      	cmp	r3, #255	; 0xff
    8e40:	d008      	beq.n	8e54 <le_df_connectionless_iq_report+0xb0>
		for (uint8_t idx = 0U; idx < samples_cnt; ++idx) {
    8e42:	2200      	movs	r2, #0
    8e44:	e017      	b.n	8e76 <le_df_connectionless_iq_report+0xd2>
	} else if (sep->cte_type == BT_HCI_LE_AOD_CTE_1US) {
    8e46:	2b01      	cmp	r3, #1
    8e48:	d002      	beq.n	8e50 <le_df_connectionless_iq_report+0xac>
		sep->slot_durations = BT_HCI_LE_ANTENNA_SWITCHING_SLOT_2US;
    8e4a:	2302      	movs	r3, #2
    8e4c:	71c3      	strb	r3, [r0, #7]
    8e4e:	e7f3      	b.n	8e38 <le_df_connectionless_iq_report+0x94>
		sep->slot_durations = BT_HCI_LE_ANTENNA_SWITCHING_SLOT_1US;
    8e50:	71c3      	strb	r3, [r0, #7]
    8e52:	e7f1      	b.n	8e38 <le_df_connectionless_iq_report+0x94>
		sep->sample[0].i = BT_HCI_LE_CTE_REPORT_NO_VALID_SAMPLE;
    8e54:	2380      	movs	r3, #128	; 0x80
    8e56:	7303      	strb	r3, [r0, #12]
		sep->sample[0].q = BT_HCI_LE_CTE_REPORT_NO_VALID_SAMPLE;
    8e58:	7343      	strb	r3, [r0, #13]
		sep->sample_count = 0U;
    8e5a:	2300      	movs	r3, #0
    8e5c:	72c3      	strb	r3, [r0, #11]
    8e5e:	e7b0      	b.n	8dc2 <le_df_connectionless_iq_report+0x1e>
			sep->sample[idx].i = IQ_CONVERT_12_TO_8_BIT(iq_report->sample[idx].i);
    8e60:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    8e64:	e013      	b.n	8e8e <le_df_connectionless_iq_report+0xea>
			sep->sample[idx].q = IQ_CONVERT_12_TO_8_BIT(iq_report->sample[idx].q);
    8e66:	f06f 017f 	mvn.w	r1, #127	; 0x7f
    8e6a:	3304      	adds	r3, #4
    8e6c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    8e70:	7159      	strb	r1, [r3, #5]
		for (uint8_t idx = 0U; idx < samples_cnt; ++idx) {
    8e72:	3201      	adds	r2, #1
    8e74:	b2d2      	uxtb	r2, r2
    8e76:	42aa      	cmp	r2, r5
    8e78:	d21b      	bcs.n	8eb2 <le_df_connectionless_iq_report+0x10e>
			sep->sample[idx].i = IQ_CONVERT_12_TO_8_BIT(iq_report->sample[idx].i);
    8e7a:	4613      	mov	r3, r2
    8e7c:	f102 010a 	add.w	r1, r2, #10
    8e80:	f934 1021 	ldrsh.w	r1, [r4, r1, lsl #2]
    8e84:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    8e88:	d0ea      	beq.n	8e60 <le_df_connectionless_iq_report+0xbc>
    8e8a:	f341 1107 	sbfx	r1, r1, #4, #8
    8e8e:	f103 0c04 	add.w	ip, r3, #4
    8e92:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    8e96:	f88c 1004 	strb.w	r1, [ip, #4]
			sep->sample[idx].q = IQ_CONVERT_12_TO_8_BIT(iq_report->sample[idx].q);
    8e9a:	f103 010a 	add.w	r1, r3, #10
    8e9e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    8ea2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    8ea6:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
    8eaa:	d0dc      	beq.n	8e66 <le_df_connectionless_iq_report+0xc2>
    8eac:	f341 1107 	sbfx	r1, r1, #4, #8
    8eb0:	e7db      	b.n	8e6a <le_df_connectionless_iq_report+0xc6>
		sep->sample_count = samples_cnt;
    8eb2:	72c5      	strb	r5, [r0, #11]
    8eb4:	e785      	b.n	8dc2 <le_df_connectionless_iq_report+0x1e>
    8eb6:	4770      	bx	lr
    8eb8:	200000d8 	.word	0x200000d8
    8ebc:	200000e0 	.word	0x200000e0

00008ec0 <encode_control>:
 * @param pdu_data[in]    PDU. Same as node_rx_pdu->pdu, but more convenient
 * @param net_buf[out]    Upwards-going HCI buffer to fill
 */
static void encode_control(struct node_rx_pdu *node_rx,
			   struct pdu_data *pdu_data, struct net_buf *buf)
{
    8ec0:	b508      	push	{r3, lr}
    8ec2:	4684      	mov	ip, r0
    8ec4:	4608      	mov	r0, r1
	uint16_t handle;

	handle = node_rx->hdr.handle;

	switch (node_rx->hdr.type) {
    8ec6:	f89c 3004 	ldrb.w	r3, [ip, #4]
    8eca:	3b05      	subs	r3, #5
    8ecc:	2b21      	cmp	r3, #33	; 0x21
    8ece:	d836      	bhi.n	8f3e <encode_control+0x7e>
    8ed0:	e8df f003 	tbb	[pc, r3]
    8ed4:	1d191511 	.word	0x1d191511
    8ed8:	25213535 	.word	0x25213535
    8edc:	35352d29 	.word	0x35352d29
    8ee0:	35353535 	.word	0x35353535
    8ee4:	35353535 	.word	0x35353535
    8ee8:	35353535 	.word	0x35353535
    8eec:	35353535 	.word	0x35353535
    8ef0:	35353535 	.word	0x35353535
    8ef4:	3135      	.short	0x3135
#if defined(CONFIG_BT_OBSERVER)
	case NODE_RX_TYPE_REPORT:
		le_advertising_report(pdu_data, node_rx, buf);
    8ef6:	4661      	mov	r1, ip
    8ef8:	f7ff f856 	bl	7fa8 <le_advertising_report>

	default:
		LL_ASSERT(0);
		return;
	}
}
    8efc:	bd08      	pop	{r3, pc}
		le_adv_ext_1M_report(pdu_data, node_rx, buf);
    8efe:	4661      	mov	r1, ip
    8f00:	f012 fa30 	bl	1b364 <le_adv_ext_1M_report>
		break;
    8f04:	e7fa      	b.n	8efc <encode_control+0x3c>
		le_adv_ext_2M_report(pdu_data, node_rx, buf);
    8f06:	4661      	mov	r1, ip
    8f08:	f012 fa31 	bl	1b36e <le_adv_ext_2M_report>
		break;
    8f0c:	e7f6      	b.n	8efc <encode_control+0x3c>
		le_adv_ext_coded_report(pdu_data, node_rx, buf);
    8f0e:	4661      	mov	r1, ip
    8f10:	f012 fa32 	bl	1b378 <le_adv_ext_coded_report>
		break;
    8f14:	e7f2      	b.n	8efc <encode_control+0x3c>
		le_scan_timeout(pdu_data, node_rx, buf);
    8f16:	4661      	mov	r1, ip
    8f18:	f7fe fd88 	bl	7a2c <le_scan_timeout>
		break;
    8f1c:	e7ee      	b.n	8efc <encode_control+0x3c>
		le_per_adv_sync_established(pdu_data, node_rx, buf);
    8f1e:	4661      	mov	r1, ip
    8f20:	f7ff f9ca 	bl	82b8 <le_per_adv_sync_established>
		break;
    8f24:	e7ea      	b.n	8efc <encode_control+0x3c>
		le_per_adv_sync_report(pdu_data, node_rx, buf);
    8f26:	4661      	mov	r1, ip
    8f28:	f7ff fd40 	bl	89ac <le_per_adv_sync_report>
		break;
    8f2c:	e7e6      	b.n	8efc <encode_control+0x3c>
		le_per_adv_sync_lost(pdu_data, node_rx, buf);
    8f2e:	4661      	mov	r1, ip
    8f30:	f7fe fd92 	bl	7a58 <le_per_adv_sync_lost>
		break;
    8f34:	e7e2      	b.n	8efc <encode_control+0x3c>
		le_df_connectionless_iq_report(pdu_data, node_rx, buf);
    8f36:	4661      	mov	r1, ip
    8f38:	f7ff ff34 	bl	8da4 <le_df_connectionless_iq_report>
		break;
    8f3c:	e7de      	b.n	8efc <encode_control+0x3c>
		LL_ASSERT(0);
    8f3e:	f641 631a 	movw	r3, #7706	; 0x1e1a
    8f42:	4a06      	ldr	r2, [pc, #24]	; (8f5c <encode_control+0x9c>)
    8f44:	4906      	ldr	r1, [pc, #24]	; (8f60 <encode_control+0xa0>)
    8f46:	4807      	ldr	r0, [pc, #28]	; (8f64 <encode_control+0xa4>)
    8f48:	f010 fc41 	bl	197ce <assert_print>
    8f4c:	4040      	eors	r0, r0
    8f4e:	f380 8811 	msr	BASEPRI, r0
    8f52:	f04f 0003 	mov.w	r0, #3
    8f56:	df02      	svc	2
		return;
    8f58:	e7d0      	b.n	8efc <encode_control+0x3c>
    8f5a:	bf00      	nop
    8f5c:	0001eb14 	.word	0x0001eb14
    8f60:	0001ead8 	.word	0x0001ead8
    8f64:	0001e920 	.word	0x0001e920

00008f68 <le_set_event_mask>:
{
    8f68:	b510      	push	{r4, lr}
    8f6a:	460c      	mov	r4, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    8f6c:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    8f6e:	79d9      	ldrb	r1, [r3, #7]
    8f70:	799a      	ldrb	r2, [r3, #6]
    8f72:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    8f76:	7958      	ldrb	r0, [r3, #5]
    8f78:	791a      	ldrb	r2, [r3, #4]
    8f7a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    8f7e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    8f82:	78d8      	ldrb	r0, [r3, #3]
    8f84:	7899      	ldrb	r1, [r3, #2]
    8f86:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    8f8a:	7858      	ldrb	r0, [r3, #1]
    8f8c:	781b      	ldrb	r3, [r3, #0]
    8f8e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    8f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	le_event_mask = sys_get_le64(cmd->events);
    8f96:	4904      	ldr	r1, [pc, #16]	; (8fa8 <le_set_event_mask+0x40>)
    8f98:	600b      	str	r3, [r1, #0]
    8f9a:	604a      	str	r2, [r1, #4]
	*evt = cmd_complete_status(0x00);
    8f9c:	2000      	movs	r0, #0
    8f9e:	f7fe fd11 	bl	79c4 <cmd_complete_status>
    8fa2:	6020      	str	r0, [r4, #0]
}
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	bf00      	nop
    8fa8:	200000e0 	.word	0x200000e0

00008fac <set_event_mask>:
{
    8fac:	b510      	push	{r4, lr}
    8fae:	460c      	mov	r4, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    8fb0:	6883      	ldr	r3, [r0, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    8fb2:	79d9      	ldrb	r1, [r3, #7]
    8fb4:	799a      	ldrb	r2, [r3, #6]
    8fb6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    8fba:	7958      	ldrb	r0, [r3, #5]
    8fbc:	791a      	ldrb	r2, [r3, #4]
    8fbe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    8fc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
    8fc6:	78d8      	ldrb	r0, [r3, #3]
    8fc8:	7899      	ldrb	r1, [r3, #2]
    8fca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
    8fce:	7858      	ldrb	r0, [r3, #1]
    8fd0:	781b      	ldrb	r3, [r3, #0]
    8fd2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    8fd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	event_mask = sys_get_le64(cmd->events);
    8fda:	4904      	ldr	r1, [pc, #16]	; (8fec <set_event_mask+0x40>)
    8fdc:	600b      	str	r3, [r1, #0]
    8fde:	604a      	str	r2, [r1, #4]
	*evt = cmd_complete_status(0x00);
    8fe0:	2000      	movs	r0, #0
    8fe2:	f7fe fcef 	bl	79c4 <cmd_complete_status>
    8fe6:	6020      	str	r0, [r4, #0]
}
    8fe8:	bd10      	pop	{r4, pc}
    8fea:	bf00      	nop
    8fec:	200000d8 	.word	0x200000d8

00008ff0 <hci_cmd_complete>:
{
    8ff0:	b538      	push	{r3, r4, r5, lr}
    8ff2:	4605      	mov	r5, r0
    8ff4:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    8ff6:	4b05      	ldr	r3, [pc, #20]	; (900c <hci_cmd_complete+0x1c>)
    8ff8:	8818      	ldrh	r0, [r3, #0]
    8ffa:	f010 fe0a 	bl	19c12 <bt_hci_cmd_complete_create>
    8ffe:	6028      	str	r0, [r5, #0]
    9000:	4621      	mov	r1, r4
    9002:	3008      	adds	r0, #8
    9004:	f013 fef0 	bl	1cde8 <net_buf_simple_add>
}
    9008:	bd38      	pop	{r3, r4, r5, pc}
    900a:	bf00      	nop
    900c:	2000928c 	.word	0x2000928c

00009010 <vs_read_build_info>:
{
    9010:	b510      	push	{r4, lr}
    9012:	b086      	sub	sp, #24
    9014:	468e      	mov	lr, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    9016:	f10d 0c04 	add.w	ip, sp, #4
    901a:	4c0f      	ldr	r4, [pc, #60]	; (9058 <vs_read_build_info+0x48>)
    901c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    901e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    9022:	6823      	ldr	r3, [r4, #0]
    9024:	f8ac 3000 	strh.w	r3, [ip]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    9028:	2113      	movs	r1, #19
    902a:	4670      	mov	r0, lr
    902c:	f7ff ffe0 	bl	8ff0 <hci_cmd_complete>
    9030:	4686      	mov	lr, r0
	rp->status = 0x00;
    9032:	4604      	mov	r4, r0
    9034:	2300      	movs	r3, #0
    9036:	f804 3b01 	strb.w	r3, [r4], #1
    903a:	f10d 0c04 	add.w	ip, sp, #4
    903e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    9042:	f8ce 0001 	str.w	r0, [lr, #1]
    9046:	6061      	str	r1, [r4, #4]
    9048:	60a2      	str	r2, [r4, #8]
    904a:	60e3      	str	r3, [r4, #12]
    904c:	f8bc 3000 	ldrh.w	r3, [ip]
    9050:	8223      	strh	r3, [r4, #16]
}
    9052:	b006      	add	sp, #24
    9054:	bd10      	pop	{r4, pc}
    9056:	bf00      	nop
    9058:	0001ebd0 	.word	0x0001ebd0

0000905c <le_per_adv_recv_enable>:
{
    905c:	b570      	push	{r4, r5, r6, lr}
    905e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_per_adv_recv_enable *cmd = (void *)buf->data;
    9060:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
    9062:	4608      	mov	r0, r1
    9064:	f011 fe9b 	bl	1ad9e <adv_cmds_ext_check>
    9068:	b100      	cbz	r0, 906c <le_per_adv_recv_enable+0x10>
}
    906a:	bd70      	pop	{r4, r5, r6, pc}
	status = ll_sync_recv_enable(handle, cmd->enable);
    906c:	78a9      	ldrb	r1, [r5, #2]
    906e:	8828      	ldrh	r0, [r5, #0]
    9070:	f012 ff29 	bl	1bec6 <ll_sync_recv_enable>
	if (!status) {
    9074:	4606      	mov	r6, r0
    9076:	b980      	cbnz	r0, 909a <le_per_adv_recv_enable+0x3e>
		if (cmd->enable &
    9078:	78ab      	ldrb	r3, [r5, #2]
    907a:	f013 0f02 	tst.w	r3, #2
    907e:	d012      	beq.n	90a6 <le_per_adv_recv_enable+0x4a>
			if (!dup_scan || (dup_count == DUP_FILTER_DISABLED)) {
    9080:	4b0d      	ldr	r3, [pc, #52]	; (90b8 <le_per_adv_recv_enable+0x5c>)
    9082:	781b      	ldrb	r3, [r3, #0]
    9084:	b123      	cbz	r3, 9090 <le_per_adv_recv_enable+0x34>
    9086:	4b0d      	ldr	r3, [pc, #52]	; (90bc <le_per_adv_recv_enable+0x60>)
    9088:	681b      	ldr	r3, [r3, #0]
    908a:	f1b3 3fff 	cmp.w	r3, #4294967295
    908e:	d104      	bne.n	909a <le_per_adv_recv_enable+0x3e>
				dup_count = 0;
    9090:	2300      	movs	r3, #0
    9092:	4a0a      	ldr	r2, [pc, #40]	; (90bc <le_per_adv_recv_enable+0x60>)
    9094:	6013      	str	r3, [r2, #0]
				dup_curr = 0U;
    9096:	4a0a      	ldr	r2, [pc, #40]	; (90c0 <le_per_adv_recv_enable+0x64>)
    9098:	6013      	str	r3, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
    909a:	2101      	movs	r1, #1
    909c:	4620      	mov	r0, r4
    909e:	f7ff ffa7 	bl	8ff0 <hci_cmd_complete>
	ccst->status = status;
    90a2:	7006      	strb	r6, [r0, #0]
    90a4:	e7e1      	b.n	906a <le_per_adv_recv_enable+0xe>
		} else if (!dup_scan) {
    90a6:	4b04      	ldr	r3, [pc, #16]	; (90b8 <le_per_adv_recv_enable+0x5c>)
    90a8:	781b      	ldrb	r3, [r3, #0]
    90aa:	2b00      	cmp	r3, #0
    90ac:	d1f5      	bne.n	909a <le_per_adv_recv_enable+0x3e>
			dup_count = DUP_FILTER_DISABLED;
    90ae:	4b03      	ldr	r3, [pc, #12]	; (90bc <le_per_adv_recv_enable+0x60>)
    90b0:	f04f 32ff 	mov.w	r2, #4294967295
    90b4:	601a      	str	r2, [r3, #0]
    90b6:	e7f0      	b.n	909a <le_per_adv_recv_enable+0x3e>
    90b8:	20009294 	.word	0x20009294
    90bc:	200024ec 	.word	0x200024ec
    90c0:	200024f0 	.word	0x200024f0

000090c4 <hci_cmd_handle>:
{
    90c4:	b530      	push	{r4, r5, lr}
    90c6:	b083      	sub	sp, #12
	struct net_buf *evt = NULL;
    90c8:	2300      	movs	r3, #0
    90ca:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    90cc:	8983      	ldrh	r3, [r0, #12]
    90ce:	2b02      	cmp	r3, #2
    90d0:	d948      	bls.n	9164 <hci_cmd_handle+0xa0>
    90d2:	4604      	mov	r4, r0
    90d4:	460d      	mov	r5, r1
	return net_buf_simple_pull_mem(&buf->b, len);
    90d6:	2103      	movs	r1, #3
    90d8:	3008      	adds	r0, #8
    90da:	f013 fe9e 	bl	1ce1a <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    90de:	89a2      	ldrh	r2, [r4, #12]
    90e0:	7883      	ldrb	r3, [r0, #2]
    90e2:	429a      	cmp	r2, r3
    90e4:	d340      	bcc.n	9168 <hci_cmd_handle+0xa4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    90e6:	8802      	ldrh	r2, [r0, #0]
    90e8:	4b20      	ldr	r3, [pc, #128]	; (916c <hci_cmd_handle+0xa8>)
    90ea:	801a      	strh	r2, [r3, #0]
	ocf = BT_OCF(_opcode);
    90ec:	f3c2 0009 	ubfx	r0, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    90f0:	f3c2 2285 	ubfx	r2, r2, #10, #6
    90f4:	2a08      	cmp	r2, #8
    90f6:	d80a      	bhi.n	910e <hci_cmd_handle+0x4a>
    90f8:	b213      	sxth	r3, r2
    90fa:	b373      	cbz	r3, 915a <hci_cmd_handle+0x96>
    90fc:	3a01      	subs	r2, #1
    90fe:	2a07      	cmp	r2, #7
    9100:	d82b      	bhi.n	915a <hci_cmd_handle+0x96>
    9102:	e8df f002 	tbb	[pc, r2]
    9106:	2a0b      	.short	0x2a0b
    9108:	2a1f1a15 	.word	0x2a1f1a15
    910c:	242a      	.short	0x242a
    910e:	2a3f      	cmp	r2, #63	; 0x3f
    9110:	d123      	bne.n	915a <hci_cmd_handle+0x96>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    9112:	aa01      	add	r2, sp, #4
    9114:	4621      	mov	r1, r4
    9116:	f012 fc5e 	bl	1b9d6 <hci_vendor_cmd_handle_common>
		break;
    911a:	e003      	b.n	9124 <hci_cmd_handle+0x60>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    911c:	aa01      	add	r2, sp, #4
    911e:	4621      	mov	r1, r4
    9120:	f011 fe3f 	bl	1ada2 <link_control_cmd_handle>
	if (err == -EINVAL) {
    9124:	f110 0f16 	cmn.w	r0, #22
    9128:	d017      	beq.n	915a <hci_cmd_handle+0x96>
	return evt;
    912a:	9801      	ldr	r0, [sp, #4]
}
    912c:	b003      	add	sp, #12
    912e:	bd30      	pop	{r4, r5, pc}
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    9130:	aa01      	add	r2, sp, #4
    9132:	4621      	mov	r1, r4
    9134:	f012 f925 	bl	1b382 <ctrl_bb_cmd_handle>
		break;
    9138:	e7f4      	b.n	9124 <hci_cmd_handle+0x60>
		err = info_cmd_handle(ocf, cmd, &evt);
    913a:	aa01      	add	r2, sp, #4
    913c:	4621      	mov	r1, r4
    913e:	f012 fa10 	bl	1b562 <info_cmd_handle>
		break;
    9142:	e7ef      	b.n	9124 <hci_cmd_handle+0x60>
		err = status_cmd_handle(ocf, cmd, &evt);
    9144:	aa01      	add	r2, sp, #4
    9146:	4621      	mov	r1, r4
    9148:	f011 fe2e 	bl	1ada8 <status_cmd_handle>
		break;
    914c:	e7ea      	b.n	9124 <hci_cmd_handle+0x60>
		err = controller_cmd_handle(ocf, cmd, &evt, node_rx);
    914e:	462b      	mov	r3, r5
    9150:	aa01      	add	r2, sp, #4
    9152:	4621      	mov	r1, r4
    9154:	f012 fb5b 	bl	1b80e <controller_cmd_handle>
		break;
    9158:	e7e4      	b.n	9124 <hci_cmd_handle+0x60>
		evt = cmd_status(BT_HCI_ERR_UNKNOWN_CMD);
    915a:	2001      	movs	r0, #1
    915c:	f7fe fd42 	bl	7be4 <cmd_status>
    9160:	9001      	str	r0, [sp, #4]
    9162:	e7e2      	b.n	912a <hci_cmd_handle+0x66>
		return NULL;
    9164:	2000      	movs	r0, #0
    9166:	e7e1      	b.n	912c <hci_cmd_handle+0x68>
		return NULL;
    9168:	2000      	movs	r0, #0
    916a:	e7df      	b.n	912c <hci_cmd_handle+0x68>
    916c:	2000928c 	.word	0x2000928c

00009170 <ll_rx_link_quota_update>:
{
    9170:	b510      	push	{r4, lr}
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9172:	1e04      	subs	r4, r0, #0
    9174:	dd03      	ble.n	917e <ll_rx_link_quota_update+0xe>
    9176:	4b0b      	ldr	r3, [pc, #44]	; (91a4 <ll_rx_link_quota_update+0x34>)
    9178:	881b      	ldrh	r3, [r3, #0]
    917a:	2b23      	cmp	r3, #35	; 0x23
    917c:	d804      	bhi.n	9188 <ll_rx_link_quota_update+0x18>
	mem_link_rx.quota_pdu += delta;
    917e:	4b09      	ldr	r3, [pc, #36]	; (91a4 <ll_rx_link_quota_update+0x34>)
    9180:	8818      	ldrh	r0, [r3, #0]
    9182:	4420      	add	r0, r4
    9184:	8018      	strh	r0, [r3, #0]
}
    9186:	bd10      	pop	{r4, pc}
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    9188:	f240 6327 	movw	r3, #1575	; 0x627
    918c:	4a06      	ldr	r2, [pc, #24]	; (91a8 <ll_rx_link_quota_update+0x38>)
    918e:	4907      	ldr	r1, [pc, #28]	; (91ac <ll_rx_link_quota_update+0x3c>)
    9190:	4807      	ldr	r0, [pc, #28]	; (91b0 <ll_rx_link_quota_update+0x40>)
    9192:	f010 fb1c 	bl	197ce <assert_print>
    9196:	4040      	eors	r0, r0
    9198:	f380 8811 	msr	BASEPRI, r0
    919c:	f04f 0003 	mov.w	r0, #3
    91a0:	df02      	svc	2
    91a2:	e7ec      	b.n	917e <ll_rx_link_quota_update+0xe>
    91a4:	200027b4 	.word	0x200027b4
    91a8:	0001ebe4 	.word	0x0001ebe4
    91ac:	0001ec20 	.word	0x0001ec20
    91b0:	0001e920 	.word	0x0001e920

000091b4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    91b4:	b510      	push	{r4, lr}
    91b6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    91b8:	f013 f8fe 	bl	1c3b8 <lll_reset>
	LL_ASSERT(!err);
    91bc:	b948      	cbnz	r0, 91d2 <perform_lll_reset+0x1e>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
    91be:	f013 f9c9 	bl	1c554 <lll_scan_reset>
	LL_ASSERT(!err);
    91c2:	b9a0      	cbnz	r0, 91ee <perform_lll_reset+0x3a>
	err = lll_conn_reset();
	LL_ASSERT(!err);
#endif /* CONFIG_BT_CONN */

#if defined(CONFIG_BT_CTLR_DF)
	err = lll_df_reset();
    91c4:	f013 fb30 	bl	1c828 <lll_df_reset>
	LL_ASSERT(!err);
    91c8:	b9f8      	cbnz	r0, 920a <perform_lll_reset+0x56>
	z_impl_k_sem_give(sem);
    91ca:	4620      	mov	r0, r4
    91cc:	f009 fe9e 	bl	12f0c <z_impl_k_sem_give>
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    91d0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    91d2:	f640 034f 	movw	r3, #2127	; 0x84f
    91d6:	4a14      	ldr	r2, [pc, #80]	; (9228 <perform_lll_reset+0x74>)
    91d8:	4914      	ldr	r1, [pc, #80]	; (922c <perform_lll_reset+0x78>)
    91da:	4815      	ldr	r0, [pc, #84]	; (9230 <perform_lll_reset+0x7c>)
    91dc:	f010 faf7 	bl	197ce <assert_print>
    91e0:	4040      	eors	r0, r0
    91e2:	f380 8811 	msr	BASEPRI, r0
    91e6:	f04f 0003 	mov.w	r0, #3
    91ea:	df02      	svc	2
    91ec:	e7e7      	b.n	91be <perform_lll_reset+0xa>
	LL_ASSERT(!err);
    91ee:	f640 035a 	movw	r3, #2138	; 0x85a
    91f2:	4a0d      	ldr	r2, [pc, #52]	; (9228 <perform_lll_reset+0x74>)
    91f4:	490d      	ldr	r1, [pc, #52]	; (922c <perform_lll_reset+0x78>)
    91f6:	480e      	ldr	r0, [pc, #56]	; (9230 <perform_lll_reset+0x7c>)
    91f8:	f010 fae9 	bl	197ce <assert_print>
    91fc:	4040      	eors	r0, r0
    91fe:	f380 8811 	msr	BASEPRI, r0
    9202:	f04f 0003 	mov.w	r0, #3
    9206:	df02      	svc	2
    9208:	e7dc      	b.n	91c4 <perform_lll_reset+0x10>
	LL_ASSERT(!err);
    920a:	f640 0365 	movw	r3, #2149	; 0x865
    920e:	4a06      	ldr	r2, [pc, #24]	; (9228 <perform_lll_reset+0x74>)
    9210:	4906      	ldr	r1, [pc, #24]	; (922c <perform_lll_reset+0x78>)
    9212:	4807      	ldr	r0, [pc, #28]	; (9230 <perform_lll_reset+0x7c>)
    9214:	f010 fadb 	bl	197ce <assert_print>
    9218:	4040      	eors	r0, r0
    921a:	f380 8811 	msr	BASEPRI, r0
    921e:	f04f 0003 	mov.w	r0, #3
    9222:	df02      	svc	2
    9224:	e7d1      	b.n	91ca <perform_lll_reset+0x16>
    9226:	bf00      	nop
    9228:	0001ebe4 	.word	0x0001ebe4
    922c:	0001ec64 	.word	0x0001ec64
    9230:	0001e920 	.word	0x0001e920

00009234 <ull_ticker_status_give>:
{
    9234:	b508      	push	{r3, lr}
	*((uint32_t volatile *)param) = status;
    9236:	6008      	str	r0, [r1, #0]
    9238:	4801      	ldr	r0, [pc, #4]	; (9240 <ull_ticker_status_give+0xc>)
    923a:	f009 fe67 	bl	12f0c <z_impl_k_sem_give>
}
    923e:	bd08      	pop	{r3, pc}
    9240:	20005450 	.word	0x20005450

00009244 <ll_rx_link_alloc>:
{
    9244:	b508      	push	{r3, lr}
	return mem_acquire(&mem_link_rx.free);
    9246:	4802      	ldr	r0, [pc, #8]	; (9250 <ll_rx_link_alloc+0xc>)
    9248:	f010 ff64 	bl	1a114 <mem_acquire>
}
    924c:	bd08      	pop	{r3, pc}
    924e:	bf00      	nop
    9250:	200027b8 	.word	0x200027b8

00009254 <ll_rx_link_release>:
{
    9254:	b508      	push	{r3, lr}
	mem_release(link, &mem_link_rx.free);
    9256:	4902      	ldr	r1, [pc, #8]	; (9260 <ll_rx_link_release+0xc>)
    9258:	f010 ff6f 	bl	1a13a <mem_release>
}
    925c:	bd08      	pop	{r3, pc}
    925e:	bf00      	nop
    9260:	200027b8 	.word	0x200027b8

00009264 <rx_replenish>:
{
	return m;
}

static void rx_replenish(uint8_t max)
{
    9264:	b570      	push	{r4, r5, r6, lr}
    9266:	4605      	mov	r5, r0
	uint8_t idx;

	if (max > mem_link_rx.quota_pdu) {
    9268:	b282      	uxth	r2, r0
    926a:	4b19      	ldr	r3, [pc, #100]	; (92d0 <rx_replenish+0x6c>)
    926c:	881b      	ldrh	r3, [r3, #0]
    926e:	429a      	cmp	r2, r3
    9270:	d921      	bls.n	92b6 <rx_replenish+0x52>
		max = mem_link_rx.quota_pdu;
    9272:	b2dd      	uxtb	r5, r3
    9274:	e01f      	b.n	92b6 <rx_replenish+0x52>
			return;
		}

		rx = mem_acquire(&mem_pdu_rx.free);
		if (!rx) {
			ll_rx_link_release(link);
    9276:	4630      	mov	r0, r6
    9278:	f7ff ffec 	bl	9254 <ll_rx_link_release>
		MFIFO_BY_IDX_ENQUEUE(ll_pdu_rx_free, idx, rx);

		ll_rx_link_quota_dec();
	}
#endif /* CONFIG_BT_CONN */
}
    927c:	bd70      	pop	{r4, r5, r6, pc}
	 * We want to maintain the invariant of emptiness defined by
	 * first == last, but we just advanced a copy of the write-index before
	 * and may have wrapped. So if first == last the queue is full and we
	 * can not continue
	 */
	if (last == first) {
    927e:	42a2      	cmp	r2, r4
    9280:	d0fc      	beq.n	927c <rx_replenish+0x18>
		link = mem_acquire(&mem_link_rx.free);
    9282:	4814      	ldr	r0, [pc, #80]	; (92d4 <rx_replenish+0x70>)
    9284:	f010 ff46 	bl	1a114 <mem_acquire>
		if (!link) {
    9288:	4606      	mov	r6, r0
    928a:	2800      	cmp	r0, #0
    928c:	d0f6      	beq.n	927c <rx_replenish+0x18>
		rx = mem_acquire(&mem_pdu_rx.free);
    928e:	4812      	ldr	r0, [pc, #72]	; (92d8 <rx_replenish+0x74>)
    9290:	f010 ff40 	bl	1a114 <mem_acquire>
		if (!rx) {
    9294:	4601      	mov	r1, r0
    9296:	2800      	cmp	r0, #0
    9298:	d0ed      	beq.n	9276 <rx_replenish+0x12>
		rx->link = link;
    929a:	6006      	str	r6, [r0, #0]
		MFIFO_BY_IDX_ENQUEUE(pdu_rx_free, idx, rx);
    929c:	4b0f      	ldr	r3, [pc, #60]	; (92dc <rx_replenish+0x78>)
    929e:	781a      	ldrb	r2, [r3, #0]
 */
static inline void mfifo_by_idx_enqueue(uint8_t *fifo, uint8_t size, uint8_t idx,
					void *mem, uint8_t *last)
{
	/* API 2: fifo is array of void-ptrs */
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    92a0:	7958      	ldrb	r0, [r3, #5]
    92a2:	fb00 f202 	mul.w	r2, r0, r2
    92a6:	f103 0008 	add.w	r0, r3, #8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    92aa:	5081      	str	r1, [r0, r2]

	cpu_dmb(); /* Ensure data accesses are synchronized */
	*last = idx; /* Commit: Update write index */
    92ac:	715c      	strb	r4, [r3, #5]
		ll_rx_link_quota_dec();
    92ae:	f012 fbfb 	bl	1baa8 <ll_rx_link_quota_dec>
		max--;
    92b2:	3d01      	subs	r5, #1
    92b4:	b2ed      	uxtb	r5, r5
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    92b6:	2d00      	cmp	r5, #0
    92b8:	d0e0      	beq.n	927c <rx_replenish+0x18>
    92ba:	4b08      	ldr	r3, [pc, #32]	; (92dc <rx_replenish+0x78>)
    92bc:	7899      	ldrb	r1, [r3, #2]
    92be:	791a      	ldrb	r2, [r3, #4]
    92c0:	795c      	ldrb	r4, [r3, #5]
	last = last + 1;
    92c2:	3401      	adds	r4, #1
    92c4:	b2e4      	uxtb	r4, r4
	if (last == count) {
    92c6:	42a1      	cmp	r1, r4
    92c8:	d1d9      	bne.n	927e <rx_replenish+0x1a>
		last = 0U;
    92ca:	2400      	movs	r4, #0
    92cc:	e7d7      	b.n	927e <rx_replenish+0x1a>
    92ce:	bf00      	nop
    92d0:	200027b4 	.word	0x200027b4
    92d4:	200027b8 	.word	0x200027b8
    92d8:	200029fc 	.word	0x200029fc
    92dc:	20000510 	.word	0x20000510

000092e0 <rx_link_dequeue_release_quota_inc>:
	ll_rx_release(rx);
	rx_replenish_one();
}

static void rx_link_dequeue_release_quota_inc(memq_link_t *link)
{
    92e0:	b510      	push	{r4, lr}
    92e2:	4604      	mov	r4, r0
	(void)memq_dequeue(memq_ll_rx.tail,
    92e4:	4905      	ldr	r1, [pc, #20]	; (92fc <rx_link_dequeue_release_quota_inc+0x1c>)
    92e6:	2200      	movs	r2, #0
    92e8:	6848      	ldr	r0, [r1, #4]
    92ea:	f010 ff6b 	bl	1a1c4 <memq_dequeue>
			   &memq_ll_rx.head, NULL);
	ll_rx_link_release(link);
    92ee:	4620      	mov	r0, r4
    92f0:	f7ff ffb0 	bl	9254 <ll_rx_link_release>
	ll_rx_link_quota_inc();
    92f4:	f012 fbde 	bl	1bab4 <ll_rx_link_quota_inc>
}
    92f8:	bd10      	pop	{r4, pc}
    92fa:	bf00      	nop
    92fc:	20005434 	.word	0x20005434

00009300 <ll_rx_dequeue>:
{
    9300:	b510      	push	{r4, lr}
    9302:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    9304:	2300      	movs	r3, #0
    9306:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    9308:	4931      	ldr	r1, [pc, #196]	; (93d0 <ll_rx_dequeue+0xd0>)
    930a:	aa01      	add	r2, sp, #4
    930c:	6848      	ldr	r0, [r1, #4]
    930e:	f010 ff59 	bl	1a1c4 <memq_dequeue>
	LL_ASSERT(link);
    9312:	4604      	mov	r4, r0
    9314:	b1e0      	cbz	r0, 9350 <ll_rx_dequeue+0x50>
	ll_rx_link_release(link);
    9316:	4620      	mov	r0, r4
    9318:	f7ff ff9c 	bl	9254 <ll_rx_link_release>
	switch (rx->type) {
    931c:	9a01      	ldr	r2, [sp, #4]
    931e:	7913      	ldrb	r3, [r2, #4]
    9320:	2b26      	cmp	r3, #38	; 0x26
    9322:	d847      	bhi.n	93b4 <ll_rx_dequeue+0xb4>
    9324:	e8df f003 	tbb	[pc, r3]
    9328:	46464636 	.word	0x46464636
    932c:	22223646 	.word	0x22223646
    9330:	31464622 	.word	0x31464622
    9334:	46362236 	.word	0x46362236
    9338:	46464646 	.word	0x46464646
    933c:	46464646 	.word	0x46464646
    9340:	46464646 	.word	0x46464646
    9344:	46464646 	.word	0x46464646
    9348:	46464646 	.word	0x46464646
    934c:	4646      	.short	0x4646
    934e:	36          	.byte	0x36
    934f:	00          	.byte	0x00
	LL_ASSERT(link);
    9350:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    9354:	4a1f      	ldr	r2, [pc, #124]	; (93d4 <ll_rx_dequeue+0xd4>)
    9356:	4920      	ldr	r1, [pc, #128]	; (93d8 <ll_rx_dequeue+0xd8>)
    9358:	4820      	ldr	r0, [pc, #128]	; (93dc <ll_rx_dequeue+0xdc>)
    935a:	f010 fa38 	bl	197ce <assert_print>
    935e:	4040      	eors	r0, r0
    9360:	f380 8811 	msr	BASEPRI, r0
    9364:	f04f 0003 	mov.w	r0, #3
    9368:	df02      	svc	2
    936a:	e7d4      	b.n	9316 <ll_rx_dequeue+0x16>
		if (adv->type != PDU_ADV_TYPE_EXT_IND) {
    936c:	f892 3020 	ldrb.w	r3, [r2, #32]
    9370:	f003 030f 	and.w	r3, r3, #15
    9374:	2b07      	cmp	r3, #7
    9376:	d10b      	bne.n	9390 <ll_rx_dequeue+0x90>
		rx_curr = rx->rx_ftr.extra;
    9378:	68d4      	ldr	r4, [r2, #12]
		while (rx_curr) {
    937a:	e003      	b.n	9384 <ll_rx_dequeue+0x84>
			link_free = rx_curr->link;
    937c:	6820      	ldr	r0, [r4, #0]
			rx_curr = rx_curr->rx_ftr.extra;
    937e:	68e4      	ldr	r4, [r4, #12]
			ll_rx_link_release(link_free);
    9380:	f7ff ff68 	bl	9254 <ll_rx_link_release>
		while (rx_curr) {
    9384:	2c00      	cmp	r4, #0
    9386:	d1f9      	bne.n	937c <ll_rx_dequeue+0x7c>
    9388:	e002      	b.n	9390 <ll_rx_dequeue+0x90>
		ull_scan_term_dequeue(rx->handle);
    938a:	7990      	ldrb	r0, [r2, #6]
    938c:	f000 ff54 	bl	a238 <ull_scan_term_dequeue>
}
    9390:	b002      	add	sp, #8
    9392:	bd10      	pop	{r4, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    9394:	2b00      	cmp	r3, #0
    9396:	d1fb      	bne.n	9390 <ll_rx_dequeue+0x90>
    9398:	f240 43e2 	movw	r3, #1250	; 0x4e2
    939c:	4a0d      	ldr	r2, [pc, #52]	; (93d4 <ll_rx_dequeue+0xd4>)
    939e:	4910      	ldr	r1, [pc, #64]	; (93e0 <ll_rx_dequeue+0xe0>)
    93a0:	480e      	ldr	r0, [pc, #56]	; (93dc <ll_rx_dequeue+0xdc>)
    93a2:	f010 fa14 	bl	197ce <assert_print>
    93a6:	4040      	eors	r0, r0
    93a8:	f380 8811 	msr	BASEPRI, r0
    93ac:	f04f 0003 	mov.w	r0, #3
    93b0:	df02      	svc	2
    93b2:	e7ed      	b.n	9390 <ll_rx_dequeue+0x90>
		LL_ASSERT(0);
    93b4:	f240 43e6 	movw	r3, #1254	; 0x4e6
    93b8:	4a06      	ldr	r2, [pc, #24]	; (93d4 <ll_rx_dequeue+0xd4>)
    93ba:	490a      	ldr	r1, [pc, #40]	; (93e4 <ll_rx_dequeue+0xe4>)
    93bc:	4807      	ldr	r0, [pc, #28]	; (93dc <ll_rx_dequeue+0xdc>)
    93be:	f010 fa06 	bl	197ce <assert_print>
    93c2:	4040      	eors	r0, r0
    93c4:	f380 8811 	msr	BASEPRI, r0
    93c8:	f04f 0003 	mov.w	r0, #3
    93cc:	df02      	svc	2
}
    93ce:	e7df      	b.n	9390 <ll_rx_dequeue+0x90>
    93d0:	20005434 	.word	0x20005434
    93d4:	0001ebe4 	.word	0x0001ebe4
    93d8:	0001ec6c 	.word	0x0001ec6c
    93dc:	0001e920 	.word	0x0001e920
    93e0:	0001ec74 	.word	0x0001ec74
    93e4:	0001ead8 	.word	0x0001ead8

000093e8 <ll_rx_alloc>:
{
    93e8:	b508      	push	{r3, lr}
	return mem_acquire(&mem_pdu_rx.free);
    93ea:	4802      	ldr	r0, [pc, #8]	; (93f4 <ll_rx_alloc+0xc>)
    93ec:	f010 fe92 	bl	1a114 <mem_acquire>
}
    93f0:	bd08      	pop	{r3, pc}
    93f2:	bf00      	nop
    93f4:	200029fc 	.word	0x200029fc

000093f8 <ll_rx_release>:
{
    93f8:	b508      	push	{r3, lr}
	mem_release(node_rx, &mem_pdu_rx.free);
    93fa:	4902      	ldr	r1, [pc, #8]	; (9404 <ll_rx_release+0xc>)
    93fc:	f010 fe9d 	bl	1a13a <mem_release>
}
    9400:	bd08      	pop	{r3, pc}
    9402:	bf00      	nop
    9404:	200029fc 	.word	0x200029fc

00009408 <ll_rx_get>:
{
    9408:	b510      	push	{r4, lr}
    940a:	b082      	sub	sp, #8
    940c:	4604      	mov	r4, r0
	uint8_t cmplt = 0U;
    940e:	e004      	b.n	941a <ll_rx_get+0x12>
				rx_link_dequeue_release_quota_inc(link);
    9410:	f7ff ff66 	bl	92e0 <rx_link_dequeue_release_quota_inc>
				rx_release_replenish(rx);
    9414:	9801      	ldr	r0, [sp, #4]
    9416:	f012 fb60 	bl	1bada <rx_release_replenish>
	*node_rx = NULL;
    941a:	2300      	movs	r3, #0
    941c:	6023      	str	r3, [r4, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    941e:	4b07      	ldr	r3, [pc, #28]	; (943c <ll_rx_get+0x34>)
    9420:	aa01      	add	r2, sp, #4
    9422:	6859      	ldr	r1, [r3, #4]
    9424:	6818      	ldr	r0, [r3, #0]
    9426:	f010 fec5 	bl	1a1b4 <memq_peek>
	if (link) {
    942a:	b120      	cbz	r0, 9436 <ll_rx_get+0x2e>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
    942c:	9b01      	ldr	r3, [sp, #4]
    942e:	7919      	ldrb	r1, [r3, #4]
    9430:	2901      	cmp	r1, #1
    9432:	d0ed      	beq.n	9410 <ll_rx_get+0x8>
			*node_rx = rx;
    9434:	6023      	str	r3, [r4, #0]
}
    9436:	2000      	movs	r0, #0
    9438:	b002      	add	sp, #8
    943a:	bd10      	pop	{r4, pc}
    943c:	20005434 	.word	0x20005434

00009440 <ll_rx_mem_release>:
{
    9440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9444:	4607      	mov	r7, r0
	rx = *node_rx;
    9446:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    9448:	e026      	b.n	9498 <ll_rx_mem_release+0x58>
			ll_rx_release(rx_free);
    944a:	4620      	mov	r0, r4
    944c:	f7ff ffd4 	bl	93f8 <ll_rx_release>
		break;
    9450:	e021      	b.n	9496 <ll_rx_mem_release+0x56>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    9452:	b12b      	cbz	r3, 9460 <ll_rx_mem_release+0x20>
			ll_rx_link_quota_inc();
    9454:	f012 fb2e 	bl	1bab4 <ll_rx_link_quota_inc>
			ll_rx_release(rx_free);
    9458:	4620      	mov	r0, r4
    945a:	f7ff ffcd 	bl	93f8 <ll_rx_release>
			break;
    945e:	e01a      	b.n	9496 <ll_rx_mem_release+0x56>
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    9460:	f240 539c 	movw	r3, #1436	; 0x59c
    9464:	4a5b      	ldr	r2, [pc, #364]	; (95d4 <ll_rx_mem_release+0x194>)
    9466:	495c      	ldr	r1, [pc, #368]	; (95d8 <ll_rx_mem_release+0x198>)
    9468:	485c      	ldr	r0, [pc, #368]	; (95dc <ll_rx_mem_release+0x19c>)
    946a:	f010 f9b0 	bl	197ce <assert_print>
    946e:	4040      	eors	r0, r0
    9470:	f380 8811 	msr	BASEPRI, r0
    9474:	f04f 0003 	mov.w	r0, #3
    9478:	df02      	svc	2
    947a:	e7eb      	b.n	9454 <ll_rx_mem_release+0x14>
			uint8_t status = se->status;
    947c:	f894 6020 	ldrb.w	r6, [r4, #32]
			if ((status == BT_HCI_ERR_SUCCESS) ||
    9480:	2e00      	cmp	r6, #0
    9482:	d067      	beq.n	9554 <ll_rx_mem_release+0x114>
    9484:	2e1a      	cmp	r6, #26
    9486:	d065      	beq.n	9554 <ll_rx_mem_release+0x114>
			    (status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE) ||
    9488:	2e3e      	cmp	r6, #62	; 0x3e
    948a:	d063      	beq.n	9554 <ll_rx_mem_release+0x114>
				LL_ASSERT(status == BT_HCI_ERR_OP_CANCELLED_BY_HOST);
    948c:	2e44      	cmp	r6, #68	; 0x44
    948e:	d175      	bne.n	957c <ll_rx_mem_release+0x13c>
			ull_sync_release(sync);
    9490:	68a0      	ldr	r0, [r4, #8]
    9492:	f001 fe43 	bl	b11c <ull_sync_release>
{
    9496:	462c      	mov	r4, r5
	while (rx) {
    9498:	2c00      	cmp	r4, #0
    949a:	f000 8095 	beq.w	95c8 <ll_rx_mem_release+0x188>
		rx = rx->next;
    949e:	6825      	ldr	r5, [r4, #0]
		switch (rx_free->type) {
    94a0:	7923      	ldrb	r3, [r4, #4]
    94a2:	2b28      	cmp	r3, #40	; 0x28
    94a4:	f200 8082 	bhi.w	95ac <ll_rx_mem_release+0x16c>
    94a8:	a201      	add	r2, pc, #4	; (adr r2, 94b0 <ll_rx_mem_release+0x70>)
    94aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    94ae:	bf00      	nop
    94b0:	00009453 	.word	0x00009453
    94b4:	000095ad 	.word	0x000095ad
    94b8:	000095ad 	.word	0x000095ad
    94bc:	000095ad 	.word	0x000095ad
    94c0:	000095ad 	.word	0x000095ad
    94c4:	00009453 	.word	0x00009453
    94c8:	00009453 	.word	0x00009453
    94cc:	00009453 	.word	0x00009453
    94d0:	00009453 	.word	0x00009453
    94d4:	000095ad 	.word	0x000095ad
    94d8:	000095ad 	.word	0x000095ad
    94dc:	0000944b 	.word	0x0000944b
    94e0:	0000947d 	.word	0x0000947d
    94e4:	00009453 	.word	0x00009453
    94e8:	00009491 	.word	0x00009491
    94ec:	000095ad 	.word	0x000095ad
    94f0:	000095ad 	.word	0x000095ad
    94f4:	000095ad 	.word	0x000095ad
    94f8:	000095ad 	.word	0x000095ad
    94fc:	000095ad 	.word	0x000095ad
    9500:	000095ad 	.word	0x000095ad
    9504:	000095ad 	.word	0x000095ad
    9508:	000095ad 	.word	0x000095ad
    950c:	000095ad 	.word	0x000095ad
    9510:	000095ad 	.word	0x000095ad
    9514:	000095ad 	.word	0x000095ad
    9518:	000095ad 	.word	0x000095ad
    951c:	000095ad 	.word	0x000095ad
    9520:	000095ad 	.word	0x000095ad
    9524:	000095ad 	.word	0x000095ad
    9528:	000095ad 	.word	0x000095ad
    952c:	000095ad 	.word	0x000095ad
    9530:	000095ad 	.word	0x000095ad
    9534:	000095ad 	.word	0x000095ad
    9538:	000095ad 	.word	0x000095ad
    953c:	000095ad 	.word	0x000095ad
    9540:	000095ad 	.word	0x000095ad
    9544:	000095ad 	.word	0x000095ad
    9548:	00009599 	.word	0x00009599
    954c:	00009599 	.word	0x00009599
    9550:	00009599 	.word	0x00009599
				scan = (void *)rx_free->rx_ftr.param;
    9554:	f8d4 8008 	ldr.w	r8, [r4, #8]
				ll_rx_release(rx_free);
    9558:	4620      	mov	r0, r4
    955a:	f7ff ff4d 	bl	93f8 <ll_rx_release>
				sync = scan->periodic.sync;
    955e:	f8d8 4050 	ldr.w	r4, [r8, #80]	; 0x50
				ull_sync_setup_reset(scan);
    9562:	4640      	mov	r0, r8
    9564:	f012 fd6e 	bl	1c044 <ull_sync_setup_reset>
				if (status != BT_HCI_ERR_SUCCESS) {
    9568:	2e00      	cmp	r6, #0
    956a:	d094      	beq.n	9496 <ll_rx_mem_release+0x56>
					ll_rx_link_release(link_sync_lost);
    956c:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    9570:	f7ff fe70 	bl	9254 <ll_rx_link_release>
					ull_sync_release(sync);
    9574:	4620      	mov	r0, r4
    9576:	f001 fdd1 	bl	b11c <ull_sync_release>
    957a:	e78c      	b.n	9496 <ll_rx_mem_release+0x56>
				LL_ASSERT(status == BT_HCI_ERR_OP_CANCELLED_BY_HOST);
    957c:	f240 53cc 	movw	r3, #1484	; 0x5cc
    9580:	4a14      	ldr	r2, [pc, #80]	; (95d4 <ll_rx_mem_release+0x194>)
    9582:	4917      	ldr	r1, [pc, #92]	; (95e0 <ll_rx_mem_release+0x1a0>)
    9584:	4815      	ldr	r0, [pc, #84]	; (95dc <ll_rx_mem_release+0x19c>)
    9586:	f010 f922 	bl	197ce <assert_print>
    958a:	4040      	eors	r0, r0
    958c:	f380 8811 	msr	BASEPRI, r0
    9590:	f04f 0003 	mov.w	r0, #3
    9594:	df02      	svc	2
    9596:	e77b      	b.n	9490 <ll_rx_mem_release+0x50>
			ull_iq_report_link_inc_quota(report_cnt);
    9598:	2001      	movs	r0, #1
    959a:	f002 f84f 	bl	b63c <ull_iq_report_link_inc_quota>
			ull_df_iq_report_mem_release(rx_free);
    959e:	4620      	mov	r0, r4
    95a0:	f002 f844 	bl	b62c <ull_df_iq_report_mem_release>
			ull_df_rx_iq_report_alloc(report_cnt);
    95a4:	2001      	movs	r0, #1
    95a6:	f002 f86b 	bl	b680 <ull_df_rx_iq_report_alloc>
		break;
    95aa:	e774      	b.n	9496 <ll_rx_mem_release+0x56>
			LL_ASSERT(0);
    95ac:	f240 631b 	movw	r3, #1563	; 0x61b
    95b0:	4a08      	ldr	r2, [pc, #32]	; (95d4 <ll_rx_mem_release+0x194>)
    95b2:	490c      	ldr	r1, [pc, #48]	; (95e4 <ll_rx_mem_release+0x1a4>)
    95b4:	4809      	ldr	r0, [pc, #36]	; (95dc <ll_rx_mem_release+0x19c>)
    95b6:	f010 f90a 	bl	197ce <assert_print>
    95ba:	4040      	eors	r0, r0
    95bc:	f380 8811 	msr	BASEPRI, r0
    95c0:	f04f 0003 	mov.w	r0, #3
    95c4:	df02      	svc	2
			break;
    95c6:	e766      	b.n	9496 <ll_rx_mem_release+0x56>
	*node_rx = rx;
    95c8:	603c      	str	r4, [r7, #0]
	rx_replenish_all();
    95ca:	f012 fa7c 	bl	1bac6 <rx_replenish_all>
}
    95ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95d2:	bf00      	nop
    95d4:	0001ebe4 	.word	0x0001ebe4
    95d8:	0001ec94 	.word	0x0001ec94
    95dc:	0001e920 	.word	0x0001e920
    95e0:	0001ecb8 	.word	0x0001ecb8
    95e4:	0001ead8 	.word	0x0001ead8

000095e8 <ll_rx_put>:
{
    95e8:	b508      	push	{r3, lr}
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    95ea:	4a02      	ldr	r2, [pc, #8]	; (95f4 <ll_rx_put+0xc>)
    95ec:	f010 fdd8 	bl	1a1a0 <memq_enqueue>
}
    95f0:	bd08      	pop	{r3, pc}
    95f2:	bf00      	nop
    95f4:	20005438 	.word	0x20005438

000095f8 <ll_rx_sched>:
{
    95f8:	b508      	push	{r3, lr}
	k_sem_give(sem_recv);
    95fa:	4b02      	ldr	r3, [pc, #8]	; (9604 <ll_rx_sched+0xc>)
    95fc:	6818      	ldr	r0, [r3, #0]
    95fe:	f009 fc85 	bl	12f0c <z_impl_k_sem_give>
}
    9602:	bd08      	pop	{r3, pc}
    9604:	2000544c 	.word	0x2000544c

00009608 <rx_demux_rx>:
 * @brief Dispatch rx objects
 * @details Rx objects are only peeked, not dequeued yet.
 *   Execution context: ULL high priority Mayfly
 */
static inline int rx_demux_rx(memq_link_t *link, struct node_rx_hdr *rx)
{
    9608:	b538      	push	{r3, r4, r5, lr}
    960a:	4605      	mov	r5, r0
    960c:	460c      	mov	r4, r1
	/* Demux Rx objects */
	switch (rx->type) {
    960e:	790b      	ldrb	r3, [r1, #4]
    9610:	3b01      	subs	r3, #1
    9612:	2b27      	cmp	r3, #39	; 0x27
    9614:	d859      	bhi.n	96ca <rx_demux_rx+0xc2>
    9616:	e8df f003 	tbb	[pc, r3]
    961a:	584c      	.short	0x584c
    961c:	144c5858 	.word	0x144c5858
    9620:	2b141458 	.word	0x2b141458
    9624:	58143658 	.word	0x58143658
    9628:	58585858 	.word	0x58585858
    962c:	58585858 	.word	0x58585858
    9630:	58585858 	.word	0x58585858
    9634:	58585858 	.word	0x58585858
    9638:	58585858 	.word	0x58585858
    963c:	40585858 	.word	0x40585858
    9640:	4040      	.short	0x4040
	case NODE_RX_TYPE_SYNC_REPORT:
#endif /* CONFIG_BT_CTLR_SYNC_PERIODIC */
	{
		struct pdu_adv *adv;

		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9642:	4929      	ldr	r1, [pc, #164]	; (96e8 <rx_demux_rx+0xe0>)
    9644:	2200      	movs	r2, #0
    9646:	6848      	ldr	r0, [r1, #4]
    9648:	f010 fdbc 	bl	1a1c4 <memq_dequeue>

		adv = (void *)((struct node_rx_pdu *)rx)->pdu;
		if (adv->type != PDU_ADV_TYPE_EXT_IND) {
    964c:	f894 3020 	ldrb.w	r3, [r4, #32]
    9650:	f003 030f 	and.w	r3, r3, #15
    9654:	2b07      	cmp	r3, #7
    9656:	d006      	beq.n	9666 <rx_demux_rx+0x5e>
			ll_rx_put(link, rx);
    9658:	4621      	mov	r1, r4
    965a:	4628      	mov	r0, r5
    965c:	f7ff ffc4 	bl	95e8 <ll_rx_put>
			ll_rx_sched();
    9660:	f7ff ffca 	bl	95f8 <ll_rx_sched>
			break;
    9664:	e00d      	b.n	9682 <rx_demux_rx+0x7a>
		}

		ull_scan_aux_setup(link, rx);
    9666:	4621      	mov	r1, r4
    9668:	4628      	mov	r0, r5
    966a:	f7f8 f991 	bl	1990 <ull_scan_aux_setup>
	}
	break;
    966e:	e008      	b.n	9682 <rx_demux_rx+0x7a>

	case NODE_RX_TYPE_EXT_AUX_RELEASE:
	{
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9670:	491d      	ldr	r1, [pc, #116]	; (96e8 <rx_demux_rx+0xe0>)
    9672:	2200      	movs	r2, #0
    9674:	6848      	ldr	r0, [r1, #4]
    9676:	f010 fda5 	bl	1a1c4 <memq_dequeue>
		ull_scan_aux_release(link, rx);
    967a:	4621      	mov	r1, r4
    967c:	4628      	mov	r0, r5
    967e:	f001 fa19 	bl	aab4 <ull_scan_aux_release>
	}
	break;
	}

	return 0;
}
    9682:	2000      	movs	r0, #0
    9684:	bd38      	pop	{r3, r4, r5, pc}
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    9686:	4918      	ldr	r1, [pc, #96]	; (96e8 <rx_demux_rx+0xe0>)
    9688:	2200      	movs	r2, #0
    968a:	6848      	ldr	r0, [r1, #4]
    968c:	f010 fd9a 	bl	1a1c4 <memq_dequeue>
		ull_sync_established_report(link, rx);
    9690:	4621      	mov	r1, r4
    9692:	4628      	mov	r0, r5
    9694:	f001 fda8 	bl	b1e8 <ull_sync_established_report>
	break;
    9698:	e7f3      	b.n	9682 <rx_demux_rx+0x7a>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    969a:	4913      	ldr	r1, [pc, #76]	; (96e8 <rx_demux_rx+0xe0>)
    969c:	2200      	movs	r2, #0
    969e:	6848      	ldr	r0, [r1, #4]
    96a0:	f010 fd90 	bl	1a1c4 <memq_dequeue>
		ll_rx_put(link, rx);
    96a4:	4621      	mov	r1, r4
    96a6:	4628      	mov	r0, r5
    96a8:	f7ff ff9e 	bl	95e8 <ll_rx_put>
		ll_rx_sched();
    96ac:	f7ff ffa4 	bl	95f8 <ll_rx_sched>
	break;
    96b0:	e7e7      	b.n	9682 <rx_demux_rx+0x7a>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    96b2:	490d      	ldr	r1, [pc, #52]	; (96e8 <rx_demux_rx+0xe0>)
    96b4:	2200      	movs	r2, #0
    96b6:	6848      	ldr	r0, [r1, #4]
    96b8:	f010 fd84 	bl	1a1c4 <memq_dequeue>
		ll_rx_put(link, rx);
    96bc:	4621      	mov	r1, r4
    96be:	4628      	mov	r0, r5
    96c0:	f7ff ff92 	bl	95e8 <ll_rx_put>
		ll_rx_sched();
    96c4:	f7ff ff98 	bl	95f8 <ll_rx_sched>
	break;
    96c8:	e7db      	b.n	9682 <rx_demux_rx+0x7a>
		LL_ASSERT(0);
    96ca:	f640 234f 	movw	r3, #2639	; 0xa4f
    96ce:	4a07      	ldr	r2, [pc, #28]	; (96ec <rx_demux_rx+0xe4>)
    96d0:	4907      	ldr	r1, [pc, #28]	; (96f0 <rx_demux_rx+0xe8>)
    96d2:	4808      	ldr	r0, [pc, #32]	; (96f4 <rx_demux_rx+0xec>)
    96d4:	f010 f87b 	bl	197ce <assert_print>
    96d8:	4040      	eors	r0, r0
    96da:	f380 8811 	msr	BASEPRI, r0
    96de:	f04f 0003 	mov.w	r0, #3
    96e2:	df02      	svc	2
	break;
    96e4:	e7cd      	b.n	9682 <rx_demux_rx+0x7a>
    96e6:	bf00      	nop
    96e8:	20005444 	.word	0x20005444
    96ec:	0001ebe4 	.word	0x0001ebe4
    96f0:	0001ead8 	.word	0x0001ead8
    96f4:	0001e920 	.word	0x0001e920

000096f8 <rx_demux>:
{
    96f8:	b510      	push	{r4, lr}
    96fa:	b082      	sub	sp, #8
    96fc:	e005      	b.n	970a <rx_demux+0x12>
				nack = rx_demux_rx(link, rx);
    96fe:	9901      	ldr	r1, [sp, #4]
    9700:	4620      	mov	r0, r4
    9702:	f7ff ff81 	bl	9608 <rx_demux_rx>
			if (nack) {
    9706:	b9d0      	cbnz	r0, 973e <rx_demux+0x46>
	} while (link);
    9708:	b1cc      	cbz	r4, 973e <rx_demux+0x46>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    970a:	4b0e      	ldr	r3, [pc, #56]	; (9744 <rx_demux+0x4c>)
    970c:	aa01      	add	r2, sp, #4
    970e:	6859      	ldr	r1, [r3, #4]
    9710:	6818      	ldr	r0, [r3, #0]
    9712:	f010 fd4f 	bl	1a1b4 <memq_peek>
		if (link) {
    9716:	4604      	mov	r4, r0
    9718:	2800      	cmp	r0, #0
    971a:	d0f5      	beq.n	9708 <rx_demux+0x10>
			LL_ASSERT(rx);
    971c:	9b01      	ldr	r3, [sp, #4]
    971e:	2b00      	cmp	r3, #0
    9720:	d1ed      	bne.n	96fe <rx_demux+0x6>
    9722:	f640 03fd 	movw	r3, #2301	; 0x8fd
    9726:	4a08      	ldr	r2, [pc, #32]	; (9748 <rx_demux+0x50>)
    9728:	4908      	ldr	r1, [pc, #32]	; (974c <rx_demux+0x54>)
    972a:	4809      	ldr	r0, [pc, #36]	; (9750 <rx_demux+0x58>)
    972c:	f010 f84f 	bl	197ce <assert_print>
    9730:	4040      	eors	r0, r0
    9732:	f380 8811 	msr	BASEPRI, r0
    9736:	f04f 0003 	mov.w	r0, #3
    973a:	df02      	svc	2
    973c:	e7df      	b.n	96fe <rx_demux+0x6>
}
    973e:	b002      	add	sp, #8
    9740:	bd10      	pop	{r4, pc}
    9742:	bf00      	nop
    9744:	20005444 	.word	0x20005444
    9748:	0001ebe4 	.word	0x0001ebe4
    974c:	0001ecc8 	.word	0x0001ecc8
    9750:	0001e920 	.word	0x0001e920

00009754 <ull_ticker_status_take>:
{
    9754:	b510      	push	{r4, lr}
    9756:	460c      	mov	r4, r1
	if (ret == TICKER_STATUS_BUSY) {
    9758:	2802      	cmp	r0, #2
    975a:	d003      	beq.n	9764 <ull_ticker_status_take+0x10>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    975c:	b110      	cbz	r0, 9764 <ull_ticker_status_take+0x10>
    975e:	680b      	ldr	r3, [r1, #0]
    9760:	2b02      	cmp	r3, #2
    9762:	d008      	beq.n	9776 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    9764:	f04f 32ff 	mov.w	r2, #4294967295
    9768:	f04f 33ff 	mov.w	r3, #4294967295
    976c:	4809      	ldr	r0, [pc, #36]	; (9794 <ull_ticker_status_take+0x40>)
    976e:	f009 fbf5 	bl	12f5c <z_impl_k_sem_take>
	return *ret_cb;
    9772:	6820      	ldr	r0, [r4, #0]
}
    9774:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    9776:	f240 63ad 	movw	r3, #1709	; 0x6ad
    977a:	4a07      	ldr	r2, [pc, #28]	; (9798 <ull_ticker_status_take+0x44>)
    977c:	4907      	ldr	r1, [pc, #28]	; (979c <ull_ticker_status_take+0x48>)
    977e:	4808      	ldr	r0, [pc, #32]	; (97a0 <ull_ticker_status_take+0x4c>)
    9780:	f010 f825 	bl	197ce <assert_print>
    9784:	4040      	eors	r0, r0
    9786:	f380 8811 	msr	BASEPRI, r0
    978a:	f04f 0003 	mov.w	r0, #3
    978e:	df02      	svc	2
    9790:	e7e8      	b.n	9764 <ull_ticker_status_take+0x10>
    9792:	bf00      	nop
    9794:	20005450 	.word	0x20005450
    9798:	0001ebe4 	.word	0x0001ebe4
    979c:	0001ecd4 	.word	0x0001ecd4
    97a0:	0001e920 	.word	0x0001e920

000097a4 <ull_disable_mark>:
	if (!*m) {
    97a4:	4b04      	ldr	r3, [pc, #16]	; (97b8 <ull_disable_mark+0x14>)
    97a6:	681b      	ldr	r3, [r3, #0]
    97a8:	b113      	cbz	r3, 97b0 <ull_disable_mark+0xc>
}
    97aa:	4b03      	ldr	r3, [pc, #12]	; (97b8 <ull_disable_mark+0x14>)
    97ac:	6818      	ldr	r0, [r3, #0]
    97ae:	4770      	bx	lr
		*m = param;
    97b0:	4b01      	ldr	r3, [pc, #4]	; (97b8 <ull_disable_mark+0x14>)
    97b2:	6018      	str	r0, [r3, #0]
    97b4:	e7f9      	b.n	97aa <ull_disable_mark+0x6>
    97b6:	bf00      	nop
    97b8:	2000277c 	.word	0x2000277c

000097bc <ull_disable_unmark>:
{
    97bc:	4603      	mov	r3, r0
	if (*m && *m == param) {
    97be:	4a05      	ldr	r2, [pc, #20]	; (97d4 <ull_disable_unmark+0x18>)
    97c0:	6810      	ldr	r0, [r2, #0]
    97c2:	b110      	cbz	r0, 97ca <ull_disable_unmark+0xe>
    97c4:	4283      	cmp	r3, r0
    97c6:	d001      	beq.n	97cc <ull_disable_unmark+0x10>
	return NULL;
    97c8:	2000      	movs	r0, #0
}
    97ca:	4770      	bx	lr
		*m = NULL;
    97cc:	2100      	movs	r1, #0
    97ce:	6011      	str	r1, [r2, #0]
		return param;
    97d0:	4618      	mov	r0, r3
    97d2:	4770      	bx	lr
    97d4:	2000277c 	.word	0x2000277c

000097d8 <ull_disable_mark_get>:
}
    97d8:	4b01      	ldr	r3, [pc, #4]	; (97e0 <ull_disable_mark_get+0x8>)
    97da:	6818      	ldr	r0, [r3, #0]
    97dc:	4770      	bx	lr
    97de:	bf00      	nop
    97e0:	2000277c 	.word	0x2000277c

000097e4 <ull_disable>:
{
    97e4:	b530      	push	{r4, r5, lr}
    97e6:	b087      	sub	sp, #28
	hdr = HDR_LLL2ULL(lll);
    97e8:	6805      	ldr	r5, [r0, #0]
	return hdr->ref;
    97ea:	782b      	ldrb	r3, [r5, #0]
	if (!ull_ref_get(hdr)) {
    97ec:	b353      	cbz	r3, 9844 <ull_disable+0x60>
    97ee:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    97f0:	2201      	movs	r2, #1
    97f2:	2100      	movs	r1, #0
    97f4:	4668      	mov	r0, sp
    97f6:	f014 fa58 	bl	1dcaa <z_impl_k_sem_init>
	hdr->disabled_param = &sem;
    97fa:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    97fe:	4b14      	ldr	r3, [pc, #80]	; (9850 <ull_disable+0x6c>)
    9800:	616b      	str	r3, [r5, #20]
    9802:	782b      	ldrb	r3, [r5, #0]
	if (!ull_ref_get(hdr)) {
    9804:	b30b      	cbz	r3, 984a <ull_disable+0x66>
	mfy.param = lll;
    9806:	4b13      	ldr	r3, [pc, #76]	; (9854 <ull_disable+0x70>)
    9808:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    980a:	2200      	movs	r2, #0
    980c:	4611      	mov	r1, r2
    980e:	2003      	movs	r0, #3
    9810:	f7fd fba0 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    9814:	b940      	cbnz	r0, 9828 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
    9816:	f04f 32ff 	mov.w	r2, #4294967295
    981a:	f04f 33ff 	mov.w	r3, #4294967295
    981e:	4668      	mov	r0, sp
    9820:	f009 fb9c 	bl	12f5c <z_impl_k_sem_take>
}
    9824:	b007      	add	sp, #28
    9826:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    9828:	f240 732a 	movw	r3, #1834	; 0x72a
    982c:	4a0a      	ldr	r2, [pc, #40]	; (9858 <ull_disable+0x74>)
    982e:	490b      	ldr	r1, [pc, #44]	; (985c <ull_disable+0x78>)
    9830:	480b      	ldr	r0, [pc, #44]	; (9860 <ull_disable+0x7c>)
    9832:	f00f ffcc 	bl	197ce <assert_print>
    9836:	4040      	eors	r0, r0
    9838:	f380 8811 	msr	BASEPRI, r0
    983c:	f04f 0003 	mov.w	r0, #3
    9840:	df02      	svc	2
    9842:	e7e8      	b.n	9816 <ull_disable+0x32>
		return -EALREADY;
    9844:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9848:	e7ec      	b.n	9824 <ull_disable+0x40>
		return -EALREADY;
    984a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    984e:	e7e9      	b.n	9824 <ull_disable+0x40>
    9850:	0001babf 	.word	0x0001babf
    9854:	200006f4 	.word	0x200006f4
    9858:	0001ebe4 	.word	0x0001ebe4
    985c:	0001eccc 	.word	0x0001eccc
    9860:	0001e920 	.word	0x0001e920

00009864 <ull_ticker_stop_with_mark>:
{
    9864:	b5f0      	push	{r4, r5, r6, r7, lr}
    9866:	b085      	sub	sp, #20
    9868:	4605      	mov	r5, r0
    986a:	460c      	mov	r4, r1
    986c:	4616      	mov	r6, r2
	mark = ull_disable_mark(param);
    986e:	4608      	mov	r0, r1
    9870:	f7ff ff98 	bl	97a4 <ull_disable_mark>
	if (mark != param) {
    9874:	4284      	cmp	r4, r0
    9876:	d127      	bne.n	98c8 <ull_ticker_stop_with_mark+0x64>
	ret_cb = TICKER_STATUS_BUSY;
    9878:	2302      	movs	r3, #2
    987a:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    987c:	af03      	add	r7, sp, #12
    987e:	9700      	str	r7, [sp, #0]
    9880:	4b16      	ldr	r3, [pc, #88]	; (98dc <ull_ticker_stop_with_mark+0x78>)
    9882:	462a      	mov	r2, r5
    9884:	2103      	movs	r1, #3
    9886:	2000      	movs	r0, #0
    9888:	f7fd fdda 	bl	7440 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    988c:	4639      	mov	r1, r7
    988e:	f7ff ff61 	bl	9754 <ull_ticker_status_take>
	if (ret) {
    9892:	b148      	cbz	r0, 98a8 <ull_ticker_stop_with_mark+0x44>
		mark = ull_disable_unmark(param);
    9894:	4620      	mov	r0, r4
    9896:	f7ff ff91 	bl	97bc <ull_disable_unmark>
		if (mark != param) {
    989a:	4284      	cmp	r4, r0
    989c:	d017      	beq.n	98ce <ull_ticker_stop_with_mark+0x6a>
			return -ENOLCK;
    989e:	f06f 052d 	mvn.w	r5, #45	; 0x2d
}
    98a2:	4628      	mov	r0, r5
    98a4:	b005      	add	sp, #20
    98a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
    98a8:	4630      	mov	r0, r6
    98aa:	f7ff ff9b 	bl	97e4 <ull_disable>
    98ae:	4605      	mov	r5, r0
	mark = ull_disable_unmark(param);
    98b0:	4620      	mov	r0, r4
    98b2:	f7ff ff83 	bl	97bc <ull_disable_unmark>
	if (mark != param) {
    98b6:	4284      	cmp	r4, r0
    98b8:	d10c      	bne.n	98d4 <ull_ticker_stop_with_mark+0x70>
	if (err && (err != -EALREADY)) {
    98ba:	2d00      	cmp	r5, #0
    98bc:	d0f1      	beq.n	98a2 <ull_ticker_stop_with_mark+0x3e>
    98be:	f115 0f78 	cmn.w	r5, #120	; 0x78
    98c2:	d1ee      	bne.n	98a2 <ull_ticker_stop_with_mark+0x3e>
	return 0;
    98c4:	2500      	movs	r5, #0
    98c6:	e7ec      	b.n	98a2 <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
    98c8:	f06f 052d 	mvn.w	r5, #45	; 0x2d
    98cc:	e7e9      	b.n	98a2 <ull_ticker_stop_with_mark+0x3e>
		return -EALREADY;
    98ce:	f06f 0577 	mvn.w	r5, #119	; 0x77
    98d2:	e7e6      	b.n	98a2 <ull_ticker_stop_with_mark+0x3e>
		return -ENOLCK;
    98d4:	f06f 052d 	mvn.w	r5, #45	; 0x2d
    98d8:	e7e3      	b.n	98a2 <ull_ticker_stop_with_mark+0x3e>
    98da:	bf00      	nop
    98dc:	00009235 	.word	0x00009235

000098e0 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    98e0:	490d      	ldr	r1, [pc, #52]	; (9918 <ull_pdu_rx_alloc_peek+0x38>)
    98e2:	788b      	ldrb	r3, [r1, #2]
    98e4:	790a      	ldrb	r2, [r1, #4]
    98e6:	7949      	ldrb	r1, [r1, #5]
 * @details API 1 and 2
 *   Empty if first == last
 */
static inline uint8_t mfifo_avail_count_get(uint8_t count, uint8_t first, uint8_t last)
{
	if (last >= first) {
    98e8:	428a      	cmp	r2, r1
    98ea:	d80c      	bhi.n	9906 <ull_pdu_rx_alloc_peek+0x26>
		return last - first;
    98ec:	1a8b      	subs	r3, r1, r2
    98ee:	b2db      	uxtb	r3, r3
    98f0:	4298      	cmp	r0, r3
    98f2:	d80d      	bhi.n	9910 <ull_pdu_rx_alloc_peek+0x30>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    98f4:	4b08      	ldr	r3, [pc, #32]	; (9918 <ull_pdu_rx_alloc_peek+0x38>)
    98f6:	781b      	ldrb	r3, [r3, #0]
 * @details API 2
 */
static inline void *mfifo_dequeue_peek(uint8_t *fifo, uint8_t size, uint8_t first,
				       uint8_t last)
{
	if (first == last) {
    98f8:	428a      	cmp	r2, r1
    98fa:	d00b      	beq.n	9914 <ull_pdu_rx_alloc_peek+0x34>
		return NULL; /* Queue is empty */
	}

	/* API 2: fifo is array of void-ptrs */
	return *((void **)(fifo + first * size));
    98fc:	fb03 f202 	mul.w	r2, r3, r2
    9900:	4b06      	ldr	r3, [pc, #24]	; (991c <ull_pdu_rx_alloc_peek+0x3c>)
    9902:	5898      	ldr	r0, [r3, r2]
    9904:	4770      	bx	lr
		return count - first + last;
    9906:	1a9b      	subs	r3, r3, r2
    9908:	fa51 f383 	uxtab	r3, r1, r3
    990c:	b2db      	uxtb	r3, r3
    990e:	e7ef      	b.n	98f0 <ull_pdu_rx_alloc_peek+0x10>
		return NULL;
    9910:	2000      	movs	r0, #0
    9912:	4770      	bx	lr
		return NULL; /* Queue is empty */
    9914:	2000      	movs	r0, #0
}
    9916:	4770      	bx	lr
    9918:	20000510 	.word	0x20000510
    991c:	20000518 	.word	0x20000518

00009920 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    9920:	4b0b      	ldr	r3, [pc, #44]	; (9950 <ull_pdu_rx_alloc+0x30>)
    9922:	781a      	ldrb	r2, [r3, #0]
    9924:	f893 c002 	ldrb.w	ip, [r3, #2]
    9928:	7959      	ldrb	r1, [r3, #5]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    992a:	791b      	ldrb	r3, [r3, #4]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    992c:	4299      	cmp	r1, r3
    992e:	d00c      	beq.n	994a <ull_pdu_rx_alloc+0x2a>
	}

	/* Obtain address of head buffer.
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));
    9930:	fb03 f202 	mul.w	r2, r3, r2
    9934:	4907      	ldr	r1, [pc, #28]	; (9954 <ull_pdu_rx_alloc+0x34>)
    9936:	5888      	ldr	r0, [r1, r2]

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    9938:	3301      	adds	r3, #1
    993a:	b2db      	uxtb	r3, r3
	if (_first == count) {
    993c:	459c      	cmp	ip, r3
    993e:	d002      	beq.n	9946 <ull_pdu_rx_alloc+0x26>
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    9940:	4a03      	ldr	r2, [pc, #12]	; (9950 <ull_pdu_rx_alloc+0x30>)
    9942:	7113      	strb	r3, [r2, #4]

	return mem;
    9944:	4770      	bx	lr
		_first = 0U;
    9946:	2300      	movs	r3, #0
    9948:	e7fa      	b.n	9940 <ull_pdu_rx_alloc+0x20>
		return NULL;
    994a:	2000      	movs	r0, #0
}
    994c:	4770      	bx	lr
    994e:	bf00      	nop
    9950:	20000510 	.word	0x20000510
    9954:	20000518 	.word	0x20000518

00009958 <ull_rx_put>:
{
    9958:	b508      	push	{r3, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    995a:	4a02      	ldr	r2, [pc, #8]	; (9964 <ull_rx_put+0xc>)
    995c:	f010 fc20 	bl	1a1a0 <memq_enqueue>
}
    9960:	bd08      	pop	{r3, pc}
    9962:	bf00      	nop
    9964:	20005448 	.word	0x20005448

00009968 <ull_rx_sched>:
{
    9968:	b508      	push	{r3, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    996a:	4b03      	ldr	r3, [pc, #12]	; (9978 <ull_rx_sched+0x10>)
    996c:	2201      	movs	r2, #1
    996e:	4611      	mov	r1, r2
    9970:	2000      	movs	r0, #0
    9972:	f7fd faef 	bl	6f54 <mayfly_enqueue>
}
    9976:	bd08      	pop	{r3, pc}
    9978:	200006e4 	.word	0x200006e4

0000997c <ull_rx_put_done>:
{
    997c:	b508      	push	{r3, lr}
	memq_enqueue(link, done, &memq_ull_done.tail);
    997e:	4a02      	ldr	r2, [pc, #8]	; (9988 <ull_rx_put_done+0xc>)
    9980:	f010 fc0e 	bl	1a1a0 <memq_enqueue>
}
    9984:	bd08      	pop	{r3, pc}
    9986:	bf00      	nop
    9988:	20005440 	.word	0x20005440

0000998c <ull_rx_sched_done>:
{
    998c:	b508      	push	{r3, lr}
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    998e:	4b03      	ldr	r3, [pc, #12]	; (999c <ull_rx_sched_done+0x10>)
    9990:	2201      	movs	r2, #1
    9992:	4611      	mov	r1, r2
    9994:	2000      	movs	r0, #0
    9996:	f7fd fadd 	bl	6f54 <mayfly_enqueue>
}
    999a:	bd08      	pop	{r3, pc}
    999c:	200006d4 	.word	0x200006d4

000099a0 <ull_prepare_enqueue>:
{
    99a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99a2:	4606      	mov	r6, r0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    99a4:	4c18      	ldr	r4, [pc, #96]	; (9a08 <ull_prepare_enqueue+0x68>)
    99a6:	7820      	ldrb	r0, [r4, #0]
    99a8:	78a5      	ldrb	r5, [r4, #2]
    99aa:	f894 e004 	ldrb.w	lr, [r4, #4]
    99ae:	f894 c005 	ldrb.w	ip, [r4, #5]
	last = last + 1;
    99b2:	f10c 0401 	add.w	r4, ip, #1
    99b6:	b2e7      	uxtb	r7, r4
	if (last == count) {
    99b8:	42bd      	cmp	r5, r7
    99ba:	d01f      	beq.n	99fc <ull_prepare_enqueue+0x5c>
	if (last == first) {
    99bc:	45be      	cmp	lr, r7
    99be:	d01f      	beq.n	9a00 <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    99c0:	4c12      	ldr	r4, [pc, #72]	; (9a0c <ull_prepare_enqueue+0x6c>)
    99c2:	fb00 400c 	mla	r0, r0, ip, r4
	if (!e) {
    99c6:	b1c0      	cbz	r0, 99fa <ull_prepare_enqueue+0x5a>
    99c8:	f8d2 c000 	ldr.w	ip, [r2]
    99cc:	6855      	ldr	r5, [r2, #4]
    99ce:	6894      	ldr	r4, [r2, #8]
    99d0:	68d2      	ldr	r2, [r2, #12]
    99d2:	f8c0 c000 	str.w	ip, [r0]
    99d6:	6045      	str	r5, [r0, #4]
    99d8:	6084      	str	r4, [r0, #8]
    99da:	60c2      	str	r2, [r0, #12]
	e->prepare_cb = prepare_cb;
    99dc:	6103      	str	r3, [r0, #16]
	e->is_abort_cb = is_abort_cb;
    99de:	6146      	str	r6, [r0, #20]
	e->abort_cb = abort_cb;
    99e0:	6181      	str	r1, [r0, #24]
	e->is_resume = is_resume;
    99e2:	7f03      	ldrb	r3, [r0, #28]
    99e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
    99e8:	f362 0300 	bfi	r3, r2, #0, #1
    99ec:	7703      	strb	r3, [r0, #28]
	e->is_aborted = 0U;
    99ee:	b2db      	uxtb	r3, r3
    99f0:	f36f 0341 	bfc	r3, #1, #1
    99f4:	7703      	strb	r3, [r0, #28]
	*last = idx; /* Commit: Update write index */
    99f6:	4b04      	ldr	r3, [pc, #16]	; (9a08 <ull_prepare_enqueue+0x68>)
    99f8:	715f      	strb	r7, [r3, #5]
}
    99fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		last = 0U;
    99fc:	2700      	movs	r7, #0
    99fe:	e7dd      	b.n	99bc <ull_prepare_enqueue+0x1c>
		*mem = NULL; /* Signal the failure */
    9a00:	2000      	movs	r0, #0
		return 0;    /* DontCare */
    9a02:	4607      	mov	r7, r0
    9a04:	e7df      	b.n	99c6 <ull_prepare_enqueue+0x26>
    9a06:	bf00      	nop
    9a08:	200005ac 	.word	0x200005ac
    9a0c:	200005b4 	.word	0x200005b4

00009a10 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    9a10:	4b05      	ldr	r3, [pc, #20]	; (9a28 <ull_prepare_dequeue_get+0x18>)
    9a12:	7819      	ldrb	r1, [r3, #0]
    9a14:	791a      	ldrb	r2, [r3, #4]
    9a16:	795b      	ldrb	r3, [r3, #5]
	if (first == last) {
    9a18:	429a      	cmp	r2, r3
    9a1a:	d003      	beq.n	9a24 <ull_prepare_dequeue_get+0x14>
	return (void *)(fifo + first * size);
    9a1c:	4803      	ldr	r0, [pc, #12]	; (9a2c <ull_prepare_dequeue_get+0x1c>)
    9a1e:	fb01 0002 	mla	r0, r1, r2, r0
    9a22:	4770      	bx	lr
		return NULL;
    9a24:	2000      	movs	r0, #0
}
    9a26:	4770      	bx	lr
    9a28:	200005ac 	.word	0x200005ac
    9a2c:	200005b4 	.word	0x200005b4

00009a30 <ull_prepare_dequeue_iter>:
{
    9a30:	b510      	push	{r4, lr}
    9a32:	4603      	mov	r3, r0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    9a34:	4a0d      	ldr	r2, [pc, #52]	; (9a6c <ull_prepare_dequeue_iter+0x3c>)
    9a36:	7814      	ldrb	r4, [r2, #0]
    9a38:	f892 c002 	ldrb.w	ip, [r2, #2]
    9a3c:	7911      	ldrb	r1, [r2, #4]
    9a3e:	7952      	ldrb	r2, [r2, #5]
	if (*idx >= count) {
    9a40:	f890 e000 	ldrb.w	lr, [r0]
    9a44:	45f4      	cmp	ip, lr
    9a46:	d800      	bhi.n	9a4a <ull_prepare_dequeue_iter+0x1a>
		*idx = first;
    9a48:	7001      	strb	r1, [r0, #0]
	if (*idx == last) {
    9a4a:	7819      	ldrb	r1, [r3, #0]
    9a4c:	428a      	cmp	r2, r1
    9a4e:	d00a      	beq.n	9a66 <ull_prepare_dequeue_iter+0x36>
	i = *idx + 1;
    9a50:	1c4a      	adds	r2, r1, #1
    9a52:	b2d2      	uxtb	r2, r2
	if (i == count) {
    9a54:	4594      	cmp	ip, r2
    9a56:	d004      	beq.n	9a62 <ull_prepare_dequeue_iter+0x32>
	p = (void *)(fifo + (*idx) * size);
    9a58:	4805      	ldr	r0, [pc, #20]	; (9a70 <ull_prepare_dequeue_iter+0x40>)
    9a5a:	fb01 0004 	mla	r0, r1, r4, r0
	*idx = i;
    9a5e:	701a      	strb	r2, [r3, #0]
}
    9a60:	bd10      	pop	{r4, pc}
		i = 0U;
    9a62:	2200      	movs	r2, #0
    9a64:	e7f8      	b.n	9a58 <ull_prepare_dequeue_iter+0x28>
		return NULL;
    9a66:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    9a68:	e7fa      	b.n	9a60 <ull_prepare_dequeue_iter+0x30>
    9a6a:	bf00      	nop
    9a6c:	200005ac 	.word	0x200005ac
    9a70:	200005b4 	.word	0x200005b4

00009a74 <ull_prepare_dequeue>:
{
    9a74:	b570      	push	{r4, r5, r6, lr}
    9a76:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_get();
    9a78:	f7ff ffca 	bl	9a10 <ull_prepare_dequeue_get>
    9a7c:	4602      	mov	r2, r0
	while (next) {
    9a7e:	b1f2      	cbz	r2, 9abe <ull_prepare_dequeue+0x4a>
		uint8_t is_aborted = next->is_aborted;
    9a80:	7f13      	ldrb	r3, [r2, #28]
    9a82:	f3c3 0440 	ubfx	r4, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    9a86:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    9a8a:	f013 0f02 	tst.w	r3, #2
    9a8e:	d017      	beq.n	9ac0 <ull_prepare_dequeue+0x4c>
		MFIFO_DEQUEUE(prep);
    9a90:	4b18      	ldr	r3, [pc, #96]	; (9af4 <ull_prepare_dequeue+0x80>)
    9a92:	7899      	ldrb	r1, [r3, #2]
    9a94:	795a      	ldrb	r2, [r3, #5]
	uint8_t _first = *first; /* Copy read-index */
    9a96:	791b      	ldrb	r3, [r3, #4]
	if (_first == last) {
    9a98:	429a      	cmp	r2, r3
    9a9a:	d005      	beq.n	9aa8 <ull_prepare_dequeue+0x34>
	_first += 1U;
    9a9c:	3301      	adds	r3, #1
    9a9e:	b2db      	uxtb	r3, r3
	if (_first == count) {
    9aa0:	4299      	cmp	r1, r3
    9aa2:	d024      	beq.n	9aee <ull_prepare_dequeue+0x7a>
	*first = _first; /* Write back read-index */
    9aa4:	4a13      	ldr	r2, [pc, #76]	; (9af4 <ull_prepare_dequeue+0x80>)
    9aa6:	7113      	strb	r3, [r2, #4]
		next = ull_prepare_dequeue_get();
    9aa8:	f7ff ffb2 	bl	9a10 <ull_prepare_dequeue_get>
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    9aac:	4602      	mov	r2, r0
    9aae:	b130      	cbz	r0, 9abe <ull_prepare_dequeue+0x4a>
    9ab0:	2c00      	cmp	r4, #0
    9ab2:	d1e4      	bne.n	9a7e <ull_prepare_dequeue+0xa>
    9ab4:	b11e      	cbz	r6, 9abe <ull_prepare_dequeue+0x4a>
    9ab6:	7f03      	ldrb	r3, [r0, #28]
    9ab8:	f013 0f01 	tst.w	r3, #1
    9abc:	d0df      	beq.n	9a7e <ull_prepare_dequeue+0xa>
}
    9abe:	bd70      	pop	{r4, r5, r6, pc}
			mfy.param = next;
    9ac0:	4b0d      	ldr	r3, [pc, #52]	; (9af8 <ull_prepare_dequeue+0x84>)
    9ac2:	609a      	str	r2, [r3, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    9ac4:	2200      	movs	r2, #0
    9ac6:	4611      	mov	r1, r2
    9ac8:	4628      	mov	r0, r5
    9aca:	f7fd fa43 	bl	6f54 <mayfly_enqueue>
			LL_ASSERT(!ret);
    9ace:	2800      	cmp	r0, #0
    9ad0:	d0de      	beq.n	9a90 <ull_prepare_dequeue+0x1c>
    9ad2:	f240 73a1 	movw	r3, #1953	; 0x7a1
    9ad6:	4a09      	ldr	r2, [pc, #36]	; (9afc <ull_prepare_dequeue+0x88>)
    9ad8:	4909      	ldr	r1, [pc, #36]	; (9b00 <ull_prepare_dequeue+0x8c>)
    9ada:	480a      	ldr	r0, [pc, #40]	; (9b04 <ull_prepare_dequeue+0x90>)
    9adc:	f00f fe77 	bl	197ce <assert_print>
    9ae0:	4040      	eors	r0, r0
    9ae2:	f380 8811 	msr	BASEPRI, r0
    9ae6:	f04f 0003 	mov.w	r0, #3
    9aea:	df02      	svc	2
    9aec:	e7d0      	b.n	9a90 <ull_prepare_dequeue+0x1c>
		_first = 0U;
    9aee:	2300      	movs	r3, #0
    9af0:	e7d8      	b.n	9aa4 <ull_prepare_dequeue+0x30>
    9af2:	bf00      	nop
    9af4:	200005ac 	.word	0x200005ac
    9af8:	200006b4 	.word	0x200006b4
    9afc:	0001ebe4 	.word	0x0001ebe4
    9b00:	0001eccc 	.word	0x0001eccc
    9b04:	0001e920 	.word	0x0001e920

00009b08 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    9b08:	4a07      	ldr	r2, [pc, #28]	; (9b28 <ull_event_done_extra_get+0x20>)
    9b0a:	7811      	ldrb	r1, [r2, #0]
    9b0c:	7913      	ldrb	r3, [r2, #4]
    9b0e:	7952      	ldrb	r2, [r2, #5]
	if (first == last) {
    9b10:	4293      	cmp	r3, r2
    9b12:	d006      	beq.n	9b22 <ull_event_done_extra_get+0x1a>
	return *((void **)(fifo + first * size));
    9b14:	fb01 f303 	mul.w	r3, r1, r3
    9b18:	4a04      	ldr	r2, [pc, #16]	; (9b2c <ull_event_done_extra_get+0x24>)
    9b1a:	58d0      	ldr	r0, [r2, r3]
	if (!evdone) {
    9b1c:	b110      	cbz	r0, 9b24 <ull_event_done_extra_get+0x1c>
	return &evdone->extra;
    9b1e:	3024      	adds	r0, #36	; 0x24
    9b20:	4770      	bx	lr
		return NULL;
    9b22:	2000      	movs	r0, #0
}
    9b24:	4770      	bx	lr
    9b26:	bf00      	nop
    9b28:	200004f0 	.word	0x200004f0
    9b2c:	200004f8 	.word	0x200004f8

00009b30 <ull_event_done>:
{
    9b30:	b538      	push	{r3, r4, r5, lr}
    9b32:	4605      	mov	r5, r0
	evdone = MFIFO_DEQUEUE(done);
    9b34:	4b11      	ldr	r3, [pc, #68]	; (9b7c <ull_event_done+0x4c>)
    9b36:	781a      	ldrb	r2, [r3, #0]
    9b38:	7898      	ldrb	r0, [r3, #2]
    9b3a:	7959      	ldrb	r1, [r3, #5]
	uint8_t _first = *first; /* Copy read-index */
    9b3c:	791b      	ldrb	r3, [r3, #4]
	if (_first == last) {
    9b3e:	4299      	cmp	r1, r3
    9b40:	d019      	beq.n	9b76 <ull_event_done+0x46>
	mem = *((void **)(fifo + _first * size));
    9b42:	fb03 f202 	mul.w	r2, r3, r2
    9b46:	490e      	ldr	r1, [pc, #56]	; (9b80 <ull_event_done+0x50>)
    9b48:	588c      	ldr	r4, [r1, r2]
	_first += 1U;
    9b4a:	3301      	adds	r3, #1
    9b4c:	b2db      	uxtb	r3, r3
	if (_first == count) {
    9b4e:	4298      	cmp	r0, r3
    9b50:	d00f      	beq.n	9b72 <ull_event_done+0x42>
	*first = _first; /* Write back read-index */
    9b52:	4a0a      	ldr	r2, [pc, #40]	; (9b7c <ull_event_done+0x4c>)
    9b54:	7113      	strb	r3, [r2, #4]
	if (!evdone) {
    9b56:	b174      	cbz	r4, 9b76 <ull_event_done+0x46>
	link = evdone->hdr.link;
    9b58:	6820      	ldr	r0, [r4, #0]
	evdone->hdr.link = NULL;
    9b5a:	2300      	movs	r3, #0
    9b5c:	6023      	str	r3, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    9b5e:	2302      	movs	r3, #2
    9b60:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    9b62:	6225      	str	r5, [r4, #32]
	ull_rx_put_done(link, evdone);
    9b64:	4621      	mov	r1, r4
    9b66:	f7ff ff09 	bl	997c <ull_rx_put_done>
	ull_rx_sched_done();
    9b6a:	f7ff ff0f 	bl	998c <ull_rx_sched_done>
}
    9b6e:	4620      	mov	r0, r4
    9b70:	bd38      	pop	{r3, r4, r5, pc}
		_first = 0U;
    9b72:	2300      	movs	r3, #0
    9b74:	e7ed      	b.n	9b52 <ull_event_done+0x22>
		return NULL;
    9b76:	2400      	movs	r4, #0
    9b78:	e7f9      	b.n	9b6e <ull_event_done+0x3e>
    9b7a:	bf00      	nop
    9b7c:	200004f0 	.word	0x200004f0
    9b80:	200004f8 	.word	0x200004f8

00009b84 <init_reset>:
{
    9b84:	b570      	push	{r4, r5, r6, lr}
    9b86:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
    9b88:	4d40      	ldr	r5, [pc, #256]	; (9c8c <init_reset+0x108>)
    9b8a:	2300      	movs	r3, #0
    9b8c:	716b      	strb	r3, [r5, #5]
    9b8e:	712b      	strb	r3, [r5, #4]
    9b90:	4c3f      	ldr	r4, [pc, #252]	; (9c90 <init_reset+0x10c>)
    9b92:	4623      	mov	r3, r4
    9b94:	79a2      	ldrb	r2, [r4, #6]
    9b96:	88a1      	ldrh	r1, [r4, #4]
    9b98:	f104 0008 	add.w	r0, r4, #8
    9b9c:	f010 fa99 	bl	1a0d2 <mem_init>
    9ba0:	79a1      	ldrb	r1, [r4, #6]
    9ba2:	79e2      	ldrb	r2, [r4, #7]
    9ba4:	4e3b      	ldr	r6, [pc, #236]	; (9c94 <init_reset+0x110>)
    9ba6:	4633      	mov	r3, r6
    9ba8:	440a      	add	r2, r1
    9baa:	2108      	movs	r1, #8
    9bac:	1d30      	adds	r0, r6, #4
    9bae:	f010 fa90 	bl	1a0d2 <mem_init>
    9bb2:	79a3      	ldrb	r3, [r4, #6]
    9bb4:	9303      	str	r3, [sp, #12]
    9bb6:	9602      	str	r6, [sp, #8]
    9bb8:	9401      	str	r4, [sp, #4]
    9bba:	f105 0308 	add.w	r3, r5, #8
    9bbe:	9300      	str	r3, [sp, #0]
    9bc0:	1d6b      	adds	r3, r5, #5
    9bc2:	792a      	ldrb	r2, [r5, #4]
    9bc4:	78a9      	ldrb	r1, [r5, #2]
    9bc6:	7828      	ldrb	r0, [r5, #0]
    9bc8:	f011 ff94 	bl	1baf4 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    9bcc:	4b32      	ldr	r3, [pc, #200]	; (9c98 <init_reset+0x114>)
    9bce:	2225      	movs	r2, #37	; 0x25
    9bd0:	f44f 7192 	mov.w	r1, #292	; 0x124
    9bd4:	1d18      	adds	r0, r3, #4
    9bd6:	f010 fa7c 	bl	1a0d2 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    9bda:	4830      	ldr	r0, [pc, #192]	; (9c9c <init_reset+0x118>)
    9bdc:	1d04      	adds	r4, r0, #4
    9bde:	4623      	mov	r3, r4
    9be0:	2248      	movs	r2, #72	; 0x48
    9be2:	2108      	movs	r1, #8
    9be4:	4408      	add	r0, r1
    9be6:	f010 fa74 	bl	1a0d2 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    9bea:	4620      	mov	r0, r4
    9bec:	f010 fa92 	bl	1a114 <mem_acquire>
	LL_ASSERT(link);
    9bf0:	4604      	mov	r4, r0
    9bf2:	b300      	cbz	r0, 9c36 <init_reset+0xb2>
	MEMQ_INIT(ull_rx, link);
    9bf4:	492a      	ldr	r1, [pc, #168]	; (9ca0 <init_reset+0x11c>)
    9bf6:	1d0a      	adds	r2, r1, #4
    9bf8:	4620      	mov	r0, r4
    9bfa:	f010 face 	bl	1a19a <memq_init>
	link = mem_acquire(&mem_link_done.free);
    9bfe:	4825      	ldr	r0, [pc, #148]	; (9c94 <init_reset+0x110>)
    9c00:	f010 fa88 	bl	1a114 <mem_acquire>
	LL_ASSERT(link);
    9c04:	4604      	mov	r4, r0
    9c06:	b320      	cbz	r0, 9c52 <init_reset+0xce>
	MEMQ_INIT(ull_done, link);
    9c08:	4926      	ldr	r1, [pc, #152]	; (9ca4 <init_reset+0x120>)
    9c0a:	1d0a      	adds	r2, r1, #4
    9c0c:	4620      	mov	r0, r4
    9c0e:	f010 fac4 	bl	1a19a <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    9c12:	4825      	ldr	r0, [pc, #148]	; (9ca8 <init_reset+0x124>)
    9c14:	f010 fa7e 	bl	1a114 <mem_acquire>
	LL_ASSERT(link);
    9c18:	4604      	mov	r4, r0
    9c1a:	b340      	cbz	r0, 9c6e <init_reset+0xea>
	MEMQ_INIT(ll_rx, link);
    9c1c:	4923      	ldr	r1, [pc, #140]	; (9cac <init_reset+0x128>)
    9c1e:	1d0a      	adds	r2, r1, #4
    9c20:	4620      	mov	r0, r4
    9c22:	f010 faba 	bl	1a19a <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    9c26:	4b1d      	ldr	r3, [pc, #116]	; (9c9c <init_reset+0x118>)
    9c28:	2224      	movs	r2, #36	; 0x24
    9c2a:	801a      	strh	r2, [r3, #0]
	rx_replenish_all();
    9c2c:	f011 ff4b 	bl	1bac6 <rx_replenish_all>
}
    9c30:	2000      	movs	r0, #0
    9c32:	b004      	add	sp, #16
    9c34:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    9c36:	f640 032d 	movw	r3, #2093	; 0x82d
    9c3a:	4a1d      	ldr	r2, [pc, #116]	; (9cb0 <init_reset+0x12c>)
    9c3c:	491d      	ldr	r1, [pc, #116]	; (9cb4 <init_reset+0x130>)
    9c3e:	481e      	ldr	r0, [pc, #120]	; (9cb8 <init_reset+0x134>)
    9c40:	f00f fdc5 	bl	197ce <assert_print>
    9c44:	4040      	eors	r0, r0
    9c46:	f380 8811 	msr	BASEPRI, r0
    9c4a:	f04f 0003 	mov.w	r0, #3
    9c4e:	df02      	svc	2
    9c50:	e7d0      	b.n	9bf4 <init_reset+0x70>
	LL_ASSERT(link);
    9c52:	f640 0335 	movw	r3, #2101	; 0x835
    9c56:	4a16      	ldr	r2, [pc, #88]	; (9cb0 <init_reset+0x12c>)
    9c58:	4916      	ldr	r1, [pc, #88]	; (9cb4 <init_reset+0x130>)
    9c5a:	4817      	ldr	r0, [pc, #92]	; (9cb8 <init_reset+0x134>)
    9c5c:	f00f fdb7 	bl	197ce <assert_print>
    9c60:	4040      	eors	r0, r0
    9c62:	f380 8811 	msr	BASEPRI, r0
    9c66:	f04f 0003 	mov.w	r0, #3
    9c6a:	df02      	svc	2
    9c6c:	e7cc      	b.n	9c08 <init_reset+0x84>
	LL_ASSERT(link);
    9c6e:	f640 033d 	movw	r3, #2109	; 0x83d
    9c72:	4a0f      	ldr	r2, [pc, #60]	; (9cb0 <init_reset+0x12c>)
    9c74:	490f      	ldr	r1, [pc, #60]	; (9cb4 <init_reset+0x130>)
    9c76:	4810      	ldr	r0, [pc, #64]	; (9cb8 <init_reset+0x134>)
    9c78:	f00f fda9 	bl	197ce <assert_print>
    9c7c:	4040      	eors	r0, r0
    9c7e:	f380 8811 	msr	BASEPRI, r0
    9c82:	f04f 0003 	mov.w	r0, #3
    9c86:	df02      	svc	2
    9c88:	e7c8      	b.n	9c1c <init_reset+0x98>
    9c8a:	bf00      	nop
    9c8c:	200004f0 	.word	0x200004f0
    9c90:	200003d0 	.word	0x200003d0
    9c94:	20002780 	.word	0x20002780
    9c98:	200029fc 	.word	0x200029fc
    9c9c:	200027b4 	.word	0x200027b4
    9ca0:	20005444 	.word	0x20005444
    9ca4:	2000543c 	.word	0x2000543c
    9ca8:	200027b8 	.word	0x200027b8
    9cac:	20005434 	.word	0x20005434
    9cb0:	0001ebe4 	.word	0x0001ebe4
    9cb4:	0001ec6c 	.word	0x0001ec6c
    9cb8:	0001e920 	.word	0x0001e920

00009cbc <ll_init>:
{
    9cbc:	b510      	push	{r4, lr}
    9cbe:	b086      	sub	sp, #24
	sem_recv = sem_rx;
    9cc0:	4b2f      	ldr	r3, [pc, #188]	; (9d80 <ll_init+0xc4>)
    9cc2:	6018      	str	r0, [r3, #0]
	cntr_init();
    9cc4:	f005 fed6 	bl	fa74 <cntr_init>
	mayfly_init();
    9cc8:	f7fd f920 	bl	6f0c <mayfly_init>
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    9ccc:	4a2d      	ldr	r2, [pc, #180]	; (9d84 <ll_init+0xc8>)
    9cce:	2304      	movs	r3, #4
    9cd0:	7013      	strb	r3, [r2, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    9cd2:	7213      	strb	r3, [r2, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    9cd4:	2102      	movs	r1, #2
    9cd6:	7411      	strb	r1, [r2, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    9cd8:	7611      	strb	r1, [r2, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    9cda:	492b      	ldr	r1, [pc, #172]	; (9d88 <ll_init+0xcc>)
    9cdc:	9105      	str	r1, [sp, #20]
    9cde:	492b      	ldr	r1, [pc, #172]	; (9d8c <ll_init+0xd0>)
    9ce0:	9104      	str	r1, [sp, #16]
    9ce2:	492b      	ldr	r1, [pc, #172]	; (9d90 <ll_init+0xd4>)
    9ce4:	9103      	str	r1, [sp, #12]
    9ce6:	492b      	ldr	r1, [pc, #172]	; (9d94 <ll_init+0xd8>)
    9ce8:	9102      	str	r1, [sp, #8]
    9cea:	210c      	movs	r1, #12
    9cec:	9101      	str	r1, [sp, #4]
    9cee:	9200      	str	r2, [sp, #0]
    9cf0:	4a29      	ldr	r2, [pc, #164]	; (9d98 <ll_init+0xdc>)
    9cf2:	2105      	movs	r1, #5
    9cf4:	2000      	movs	r0, #0
    9cf6:	f7fd fa5b 	bl	71b0 <ticker_init>
	LL_ASSERT(!err);
    9cfa:	b958      	cbnz	r0, 9d14 <ll_init+0x58>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9cfc:	2201      	movs	r2, #1
    9cfe:	2100      	movs	r1, #0
    9d00:	4826      	ldr	r0, [pc, #152]	; (9d9c <ll_init+0xe0>)
    9d02:	f013 ffd2 	bl	1dcaa <z_impl_k_sem_init>
	err = lll_init();
    9d06:	f003 f8a7 	bl	ce58 <lll_init>
	if (err) {
    9d0a:	4604      	mov	r4, r0
    9d0c:	b180      	cbz	r0, 9d30 <ll_init+0x74>
}
    9d0e:	4620      	mov	r0, r4
    9d10:	b006      	add	sp, #24
    9d12:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    9d14:	f240 231f 	movw	r3, #543	; 0x21f
    9d18:	4a21      	ldr	r2, [pc, #132]	; (9da0 <ll_init+0xe4>)
    9d1a:	4922      	ldr	r1, [pc, #136]	; (9da4 <ll_init+0xe8>)
    9d1c:	4822      	ldr	r0, [pc, #136]	; (9da8 <ll_init+0xec>)
    9d1e:	f00f fd56 	bl	197ce <assert_print>
    9d22:	4040      	eors	r0, r0
    9d24:	f380 8811 	msr	BASEPRI, r0
    9d28:	f04f 0003 	mov.w	r0, #3
    9d2c:	df02      	svc	2
    9d2e:	e7e5      	b.n	9cfc <ll_init+0x40>
	err = init_reset();
    9d30:	f7ff ff28 	bl	9b84 <init_reset>
	if (err) {
    9d34:	4604      	mov	r4, r0
    9d36:	2800      	cmp	r0, #0
    9d38:	d1e9      	bne.n	9d0e <ll_init+0x52>
	err = lll_scan_init();
    9d3a:	f012 fc07 	bl	1c54c <lll_scan_init>
	if (err) {
    9d3e:	4604      	mov	r4, r0
    9d40:	2800      	cmp	r0, #0
    9d42:	d1e4      	bne.n	9d0e <ll_init+0x52>
	err = ull_scan_init();
    9d44:	f011 ff41 	bl	1bbca <ull_scan_init>
	if (err) {
    9d48:	4604      	mov	r4, r0
    9d4a:	2800      	cmp	r0, #0
    9d4c:	d1df      	bne.n	9d0e <ll_init+0x52>
	err = lll_sync_init();
    9d4e:	f012 fd37 	bl	1c7c0 <lll_sync_init>
	if (err) {
    9d52:	4604      	mov	r4, r0
    9d54:	2800      	cmp	r0, #0
    9d56:	d1da      	bne.n	9d0e <ll_init+0x52>
	err = ull_sync_init();
    9d58:	f012 f8a2 	bl	1bea0 <ull_sync_init>
	if (err) {
    9d5c:	4604      	mov	r4, r0
    9d5e:	2800      	cmp	r0, #0
    9d60:	d1d5      	bne.n	9d0e <ll_init+0x52>
	err = ull_df_init();
    9d62:	f012 f9e7 	bl	1c134 <ull_df_init>
	if (err) {
    9d66:	4604      	mov	r4, r0
    9d68:	2800      	cmp	r0, #0
    9d6a:	d1d0      	bne.n	9d0e <ll_init+0x52>
	err = lll_df_init();
    9d6c:	f012 fd56 	bl	1c81c <lll_df_init>
	if (err) {
    9d70:	4604      	mov	r4, r0
    9d72:	2800      	cmp	r0, #0
    9d74:	d1cb      	bne.n	9d0e <ll_init+0x52>
		ull_filter_reset(true);
    9d76:	2001      	movs	r0, #1
    9d78:	f002 f808 	bl	bd8c <ull_filter_reset>
	return  0;
    9d7c:	e7c7      	b.n	9d0e <ll_init+0x52>
    9d7e:	bf00      	nop
    9d80:	2000544c 	.word	0x2000544c
    9d84:	200057c8 	.word	0x200057c8
    9d88:	0001c991 	.word	0x0001c991
    9d8c:	000106b1 	.word	0x000106b1
    9d90:	00010655 	.word	0x00010655
    9d94:	20005558 	.word	0x20005558
    9d98:	20005468 	.word	0x20005468
    9d9c:	20005450 	.word	0x20005450
    9da0:	0001ebe4 	.word	0x0001ebe4
    9da4:	0001ec64 	.word	0x0001ec64
    9da8:	0001e920 	.word	0x0001e920

00009dac <ll_reset>:
{
    9dac:	b510      	push	{r4, lr}
    9dae:	b086      	sub	sp, #24
	err = ull_sync_reset();
    9db0:	f012 f98f 	bl	1c0d2 <ull_sync_reset>
	LL_ASSERT(!err);
    9db4:	bb60      	cbnz	r0, 9e10 <ll_reset+0x64>
	err = ull_scan_reset();
    9db6:	f011 ff6b 	bl	1bc90 <ull_scan_reset>
	LL_ASSERT(!err);
    9dba:	2800      	cmp	r0, #0
    9dbc:	d136      	bne.n	9e2c <ll_reset+0x80>
		ull_filter_reset(false);
    9dbe:	2000      	movs	r0, #0
    9dc0:	f001 ffe4 	bl	bd8c <ull_filter_reset>
	MFIFO_INIT(prep);
    9dc4:	4b35      	ldr	r3, [pc, #212]	; (9e9c <ll_reset+0xf0>)
    9dc6:	2400      	movs	r4, #0
    9dc8:	715c      	strb	r4, [r3, #5]
    9dca:	711c      	strb	r4, [r3, #4]
	MFIFO_INIT(pdu_rx_free);
    9dcc:	4b34      	ldr	r3, [pc, #208]	; (9ea0 <ll_reset+0xf4>)
    9dce:	715c      	strb	r4, [r3, #5]
    9dd0:	711c      	strb	r4, [r3, #4]
    9dd2:	2201      	movs	r2, #1
    9dd4:	4621      	mov	r1, r4
    9dd6:	4668      	mov	r0, sp
    9dd8:	f013 ff67 	bl	1dcaa <z_impl_k_sem_init>
		mfy.param = &sem;
    9ddc:	4b31      	ldr	r3, [pc, #196]	; (9ea4 <ll_reset+0xf8>)
    9dde:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    9de2:	4622      	mov	r2, r4
    9de4:	4621      	mov	r1, r4
    9de6:	2003      	movs	r0, #3
    9de8:	f7fd f8b4 	bl	6f54 <mayfly_enqueue>
		LL_ASSERT(!retval);
    9dec:	bb60      	cbnz	r0, 9e48 <ll_reset+0x9c>
	return z_impl_k_sem_take(sem, timeout);
    9dee:	f04f 32ff 	mov.w	r2, #4294967295
    9df2:	f04f 33ff 	mov.w	r3, #4294967295
    9df6:	4668      	mov	r0, sp
    9df8:	f009 f8b0 	bl	12f5c <z_impl_k_sem_take>
	err = init_reset();
    9dfc:	f7ff fec2 	bl	9b84 <init_reset>
	LL_ASSERT(!err);
    9e00:	2800      	cmp	r0, #0
    9e02:	d12f      	bne.n	9e64 <ll_reset+0xb8>
	err = ull_df_reset();
    9e04:	f012 f99a 	bl	1c13c <ull_df_reset>
	LL_ASSERT(!err);
    9e08:	2800      	cmp	r0, #0
    9e0a:	d139      	bne.n	9e80 <ll_reset+0xd4>
}
    9e0c:	b006      	add	sp, #24
    9e0e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    9e10:	f44f 7333 	mov.w	r3, #716	; 0x2cc
    9e14:	4a24      	ldr	r2, [pc, #144]	; (9ea8 <ll_reset+0xfc>)
    9e16:	4925      	ldr	r1, [pc, #148]	; (9eac <ll_reset+0x100>)
    9e18:	4825      	ldr	r0, [pc, #148]	; (9eb0 <ll_reset+0x104>)
    9e1a:	f00f fcd8 	bl	197ce <assert_print>
    9e1e:	4040      	eors	r0, r0
    9e20:	f380 8811 	msr	BASEPRI, r0
    9e24:	f04f 0003 	mov.w	r0, #3
    9e28:	df02      	svc	2
    9e2a:	e7c4      	b.n	9db6 <ll_reset+0xa>
	LL_ASSERT(!err);
    9e2c:	f240 23d1 	movw	r3, #721	; 0x2d1
    9e30:	4a1d      	ldr	r2, [pc, #116]	; (9ea8 <ll_reset+0xfc>)
    9e32:	491e      	ldr	r1, [pc, #120]	; (9eac <ll_reset+0x100>)
    9e34:	481e      	ldr	r0, [pc, #120]	; (9eb0 <ll_reset+0x104>)
    9e36:	f00f fcca 	bl	197ce <assert_print>
    9e3a:	4040      	eors	r0, r0
    9e3c:	f380 8811 	msr	BASEPRI, r0
    9e40:	f04f 0003 	mov.w	r0, #3
    9e44:	df02      	svc	2
    9e46:	e7ba      	b.n	9dbe <ll_reset+0x12>
		LL_ASSERT(!retval);
    9e48:	f44f 7348 	mov.w	r3, #800	; 0x320
    9e4c:	4a16      	ldr	r2, [pc, #88]	; (9ea8 <ll_reset+0xfc>)
    9e4e:	4919      	ldr	r1, [pc, #100]	; (9eb4 <ll_reset+0x108>)
    9e50:	4817      	ldr	r0, [pc, #92]	; (9eb0 <ll_reset+0x104>)
    9e52:	f00f fcbc 	bl	197ce <assert_print>
    9e56:	4040      	eors	r0, r0
    9e58:	f380 8811 	msr	BASEPRI, r0
    9e5c:	f04f 0003 	mov.w	r0, #3
    9e60:	df02      	svc	2
    9e62:	e7c4      	b.n	9dee <ll_reset+0x42>
	LL_ASSERT(!err);
    9e64:	f240 333a 	movw	r3, #826	; 0x33a
    9e68:	4a0f      	ldr	r2, [pc, #60]	; (9ea8 <ll_reset+0xfc>)
    9e6a:	4910      	ldr	r1, [pc, #64]	; (9eac <ll_reset+0x100>)
    9e6c:	4810      	ldr	r0, [pc, #64]	; (9eb0 <ll_reset+0x104>)
    9e6e:	f00f fcae 	bl	197ce <assert_print>
    9e72:	4040      	eors	r0, r0
    9e74:	f380 8811 	msr	BASEPRI, r0
    9e78:	f04f 0003 	mov.w	r0, #3
    9e7c:	df02      	svc	2
    9e7e:	e7c1      	b.n	9e04 <ll_reset+0x58>
	LL_ASSERT(!err);
    9e80:	f240 3342 	movw	r3, #834	; 0x342
    9e84:	4a08      	ldr	r2, [pc, #32]	; (9ea8 <ll_reset+0xfc>)
    9e86:	4909      	ldr	r1, [pc, #36]	; (9eac <ll_reset+0x100>)
    9e88:	4809      	ldr	r0, [pc, #36]	; (9eb0 <ll_reset+0x104>)
    9e8a:	f00f fca0 	bl	197ce <assert_print>
    9e8e:	4040      	eors	r0, r0
    9e90:	f380 8811 	msr	BASEPRI, r0
    9e94:	f04f 0003 	mov.w	r0, #3
    9e98:	df02      	svc	2
}
    9e9a:	e7b7      	b.n	9e0c <ll_reset+0x60>
    9e9c:	200005ac 	.word	0x200005ac
    9ea0:	20000510 	.word	0x20000510
    9ea4:	200006c4 	.word	0x200006c4
    9ea8:	0001ebe4 	.word	0x0001ebe4
    9eac:	0001ec64 	.word	0x0001ec64
    9eb0:	0001e920 	.word	0x0001e920
    9eb4:	0001ecf4 	.word	0x0001ecf4

00009eb8 <rx_demux_event_done>:

static inline void rx_demux_event_done(memq_link_t *link,
				       struct node_rx_hdr *rx)
{
    9eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eba:	b085      	sub	sp, #20
    9ebc:	4607      	mov	r7, r0
    9ebe:	460c      	mov	r4, r1
	struct node_rx_event_done *done = (void *)rx;
	struct ull_hdr *ull_hdr;
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
    9ec0:	6a0d      	ldr	r5, [r1, #32]
	if (ull_hdr) {
    9ec2:	b12d      	cbz	r5, 9ed0 <rx_demux_event_done+0x18>
    9ec4:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    9ec6:	b15b      	cbz	r3, 9ee0 <rx_demux_event_done+0x28>
	return hdr->ref--;
    9ec8:	782b      	ldrb	r3, [r5, #0]
    9eca:	3b01      	subs	r3, #1
    9ecc:	b2db      	uxtb	r3, r3
    9ece:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    9ed0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    9ed4:	2b03      	cmp	r3, #3
    9ed6:	d843      	bhi.n	9f60 <rx_demux_event_done+0xa8>
    9ed8:	e8df f003 	tbb	[pc, r3]
    9edc:	3e3a1013 	.word	0x3e3a1013
		LL_ASSERT(ull_ref_get(ull_hdr));
    9ee0:	f640 2362 	movw	r3, #2658	; 0xa62
    9ee4:	4a25      	ldr	r2, [pc, #148]	; (9f7c <rx_demux_event_done+0xc4>)
    9ee6:	4926      	ldr	r1, [pc, #152]	; (9f80 <rx_demux_event_done+0xc8>)
    9ee8:	4826      	ldr	r0, [pc, #152]	; (9f84 <rx_demux_event_done+0xcc>)
    9eea:	f00f fc70 	bl	197ce <assert_print>
    9eee:	4040      	eors	r0, r0
    9ef0:	f380 8811 	msr	BASEPRI, r0
    9ef4:	f04f 0003 	mov.w	r0, #3
    9ef8:	df02      	svc	2
    9efa:	e7e5      	b.n	9ec8 <rx_demux_event_done+0x10>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_CTLR_ADV_EXT)
#if defined(CONFIG_BT_OBSERVER)
	case EVENT_DONE_EXTRA_TYPE_SCAN:
		ull_scan_done(done);
    9efc:	4620      	mov	r0, r4
    9efe:	f000 fabf 	bl	a480 <ull_scan_done>
		LL_ASSERT(0);
		break;
	}

	/* Release done */
	done->extra.type = 0U;
    9f02:	2300      	movs	r3, #0
    9f04:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	release = RXFIFO_RELEASE(done, link, done);
    9f08:	4e1f      	ldr	r6, [pc, #124]	; (9f88 <rx_demux_event_done+0xd0>)
    9f0a:	9402      	str	r4, [sp, #8]
    9f0c:	9701      	str	r7, [sp, #4]
    9f0e:	f106 0308 	add.w	r3, r6, #8
    9f12:	9300      	str	r3, [sp, #0]
    9f14:	1d73      	adds	r3, r6, #5
    9f16:	7932      	ldrb	r2, [r6, #4]
    9f18:	78b1      	ldrb	r1, [r6, #2]
    9f1a:	7830      	ldrb	r0, [r6, #0]
    9f1c:	f011 fe1d 	bl	1bb5a <ull_rxfifo_release>
	LL_ASSERT(release == done);
    9f20:	4284      	cmp	r4, r0
    9f22:	d00c      	beq.n	9f3e <rx_demux_event_done+0x86>
    9f24:	f44f 632c 	mov.w	r3, #2752	; 0xac0
    9f28:	4a14      	ldr	r2, [pc, #80]	; (9f7c <rx_demux_event_done+0xc4>)
    9f2a:	4918      	ldr	r1, [pc, #96]	; (9f8c <rx_demux_event_done+0xd4>)
    9f2c:	4815      	ldr	r0, [pc, #84]	; (9f84 <rx_demux_event_done+0xcc>)
    9f2e:	f00f fc4e 	bl	197ce <assert_print>
    9f32:	4040      	eors	r0, r0
    9f34:	f380 8811 	msr	BASEPRI, r0
    9f38:	f04f 0003 	mov.w	r0, #3
    9f3c:	df02      	svc	2
	/* LLL done synchronize count */
	lll_done_ull_inc();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    9f3e:	b12d      	cbz	r5, 9f4c <rx_demux_event_done+0x94>
	return hdr->ref;
    9f40:	782b      	ldrb	r3, [r5, #0]
    9f42:	b91b      	cbnz	r3, 9f4c <rx_demux_event_done+0x94>
    9f44:	696b      	ldr	r3, [r5, #20]
    9f46:	b10b      	cbz	r3, 9f4c <rx_demux_event_done+0x94>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    9f48:	69a8      	ldr	r0, [r5, #24]
    9f4a:	4798      	blx	r3
	}
}
    9f4c:	b005      	add	sp, #20
    9f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ull_scan_aux_done(done);
    9f50:	4620      	mov	r0, r4
    9f52:	f000 fd41 	bl	a9d8 <ull_scan_aux_done>
		break;
    9f56:	e7d4      	b.n	9f02 <rx_demux_event_done+0x4a>
		ull_sync_done(done);
    9f58:	4620      	mov	r0, r4
    9f5a:	f001 f981 	bl	b260 <ull_sync_done>
		break;
    9f5e:	e7d0      	b.n	9f02 <rx_demux_event_done+0x4a>
		LL_ASSERT(0);
    9f60:	f640 23b9 	movw	r3, #2745	; 0xab9
    9f64:	4a05      	ldr	r2, [pc, #20]	; (9f7c <rx_demux_event_done+0xc4>)
    9f66:	490a      	ldr	r1, [pc, #40]	; (9f90 <rx_demux_event_done+0xd8>)
    9f68:	4806      	ldr	r0, [pc, #24]	; (9f84 <rx_demux_event_done+0xcc>)
    9f6a:	f00f fc30 	bl	197ce <assert_print>
    9f6e:	4040      	eors	r0, r0
    9f70:	f380 8811 	msr	BASEPRI, r0
    9f74:	f04f 0003 	mov.w	r0, #3
    9f78:	df02      	svc	2
		break;
    9f7a:	e7c2      	b.n	9f02 <rx_demux_event_done+0x4a>
    9f7c:	0001ebe4 	.word	0x0001ebe4
    9f80:	0001ecfc 	.word	0x0001ecfc
    9f84:	0001e920 	.word	0x0001e920
    9f88:	200004f0 	.word	0x200004f0
    9f8c:	0001ed14 	.word	0x0001ed14
    9f90:	0001ead8 	.word	0x0001ead8

00009f94 <ull_done>:
{
    9f94:	b510      	push	{r4, lr}
    9f96:	b082      	sub	sp, #8
    9f98:	e009      	b.n	9fae <ull_done+0x1a>
			(void)memq_dequeue(memq_ull_done.tail,
    9f9a:	490b      	ldr	r1, [pc, #44]	; (9fc8 <ull_done+0x34>)
    9f9c:	2200      	movs	r2, #0
    9f9e:	6848      	ldr	r0, [r1, #4]
    9fa0:	f010 f910 	bl	1a1c4 <memq_dequeue>
			rx_demux_event_done(link, done);
    9fa4:	9901      	ldr	r1, [sp, #4]
    9fa6:	4620      	mov	r0, r4
    9fa8:	f7ff ff86 	bl	9eb8 <rx_demux_event_done>
	} while (link);
    9fac:	b14c      	cbz	r4, 9fc2 <ull_done+0x2e>
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    9fae:	4b06      	ldr	r3, [pc, #24]	; (9fc8 <ull_done+0x34>)
    9fb0:	aa01      	add	r2, sp, #4
    9fb2:	6859      	ldr	r1, [r3, #4]
    9fb4:	6818      	ldr	r0, [r3, #0]
    9fb6:	f010 f8fd 	bl	1a1b4 <memq_peek>
		if (link) {
    9fba:	4604      	mov	r4, r0
    9fbc:	2800      	cmp	r0, #0
    9fbe:	d1ec      	bne.n	9f9a <ull_done+0x6>
    9fc0:	e7f4      	b.n	9fac <ull_done+0x18>
}
    9fc2:	b002      	add	sp, #8
    9fc4:	bd10      	pop	{r4, pc}
    9fc6:	bf00      	nop
    9fc8:	2000543c 	.word	0x2000543c

00009fcc <lll_resume>:
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
				   prepare_param, 0, 0);
}

void lll_resume(void *param)
{
    9fcc:	b500      	push	{lr}
    9fce:	b083      	sub	sp, #12
    9fd0:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    9fd2:	7f02      	ldrb	r2, [r0, #28]
    9fd4:	f002 0201 	and.w	r2, r2, #1
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    9fd8:	2101      	movs	r1, #1
    9fda:	9101      	str	r1, [sp, #4]
    9fdc:	9200      	str	r2, [sp, #0]
    9fde:	6902      	ldr	r2, [r0, #16]
    9fe0:	6981      	ldr	r1, [r0, #24]
    9fe2:	6940      	ldr	r0, [r0, #20]
    9fe4:	f003 f892 	bl	d10c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    9fe8:	b110      	cbz	r0, 9ff0 <lll_resume+0x24>
    9fea:	f110 0f77 	cmn.w	r0, #119	; 0x77
    9fee:	d102      	bne.n	9ff6 <lll_resume+0x2a>
}
    9ff0:	b003      	add	sp, #12
    9ff2:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    9ff6:	234f      	movs	r3, #79	; 0x4f
    9ff8:	4a05      	ldr	r2, [pc, #20]	; (a010 <lll_resume+0x44>)
    9ffa:	4906      	ldr	r1, [pc, #24]	; (a014 <lll_resume+0x48>)
    9ffc:	4806      	ldr	r0, [pc, #24]	; (a018 <lll_resume+0x4c>)
    9ffe:	f00f fbe6 	bl	197ce <assert_print>
    a002:	4040      	eors	r0, r0
    a004:	f380 8811 	msr	BASEPRI, r0
    a008:	f04f 0003 	mov.w	r0, #3
    a00c:	df02      	svc	2
}
    a00e:	e7ef      	b.n	9ff0 <lll_resume+0x24>
    a010:	0001ed24 	.word	0x0001ed24
    a014:	0001ed68 	.word	0x0001ed68
    a018:	0001e920 	.word	0x0001e920

0000a01c <duration_period_setup>:
}

static uint8_t duration_period_setup(struct ll_scan_set *scan,
				     uint16_t duration, uint16_t period,
				     struct node_rx_pdu **node_rx_scan_term)
{
    a01c:	b570      	push	{r4, r5, r6, lr}
    a01e:	4604      	mov	r4, r0
	struct lll_scan *lll;

	lll = &scan->lll;
	if (duration) {
    a020:	2900      	cmp	r1, #0
    a022:	d037      	beq.n	a094 <duration_period_setup+0x78>
    a024:	461d      	mov	r5, r3
    a026:	468c      	mov	ip, r1
		lll->duration_reload =
			ULL_SCAN_DURATION_TO_EVENTS(duration,
    a028:	f242 7110 	movw	r1, #10000	; 0x2710
    a02c:	fb01 f10c 	mul.w	r1, r1, ip
    a030:	4b1c      	ldr	r3, [pc, #112]	; (a0a4 <duration_period_setup+0x88>)
    a032:	fba3 3101 	umull	r3, r1, r3, r1
    a036:	0a49      	lsrs	r1, r1, #9
    a038:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    a03a:	fbb1 f1f0 	udiv	r1, r1, r0
		lll->duration_reload =
    a03e:	b289      	uxth	r1, r1
    a040:	8521      	strh	r1, [r4, #40]	; 0x28
						    scan->lll.interval);
		if (period) {
    a042:	b17a      	cbz	r2, a064 <duration_period_setup+0x48>
			    (duration >= ULL_SCAN_PERIOD_TO_DURATION(period))) {
				return BT_HCI_ERR_INVALID_PARAM;
			}

			scan->duration_lazy =
				ULL_SCAN_PERIOD_TO_EVENTS(period,
    a044:	4b18      	ldr	r3, [pc, #96]	; (a0a8 <duration_period_setup+0x8c>)
    a046:	fb02 f303 	mul.w	r3, r2, r3
    a04a:	4a16      	ldr	r2, [pc, #88]	; (a0a4 <duration_period_setup+0x88>)
    a04c:	fba2 2303 	umull	r2, r3, r2, r3
    a050:	0a5b      	lsrs	r3, r3, #9
    a052:	fbb3 f3f0 	udiv	r3, r3, r0
			scan->duration_lazy =
    a056:	b29b      	uxth	r3, r3
    a058:	87a3      	strh	r3, [r4, #60]	; 0x3c
							  scan->lll.interval);
			scan->duration_lazy -= lll->duration_reload;
    a05a:	1a5b      	subs	r3, r3, r1
    a05c:	87a3      	strh	r3, [r4, #60]	; 0x3c
			scan->node_rx_scan_term = NULL;
    a05e:	2000      	movs	r0, #0
    a060:	6420      	str	r0, [r4, #64]	; 0x40
    a062:	e01b      	b.n	a09c <duration_period_setup+0x80>
		} else {
			struct node_rx_pdu *node_rx;
			void *link_scan_term;

			scan->duration_lazy = 0U;
    a064:	2300      	movs	r3, #0
    a066:	87a3      	strh	r3, [r4, #60]	; 0x3c

			if (*node_rx_scan_term) {
    a068:	682b      	ldr	r3, [r5, #0]
    a06a:	b113      	cbz	r3, a072 <duration_period_setup+0x56>
				scan->node_rx_scan_term =
    a06c:	6423      	str	r3, [r4, #64]	; 0x40
					(void *)*node_rx_scan_term;

				return 0;
    a06e:	2000      	movs	r0, #0
    a070:	e014      	b.n	a09c <duration_period_setup+0x80>
			}

			/* The alloc here used for ext scan termination event */
			link_scan_term = ll_rx_link_alloc();
    a072:	f7ff f8e7 	bl	9244 <ll_rx_link_alloc>
			if (!link_scan_term) {
    a076:	4606      	mov	r6, r0
    a078:	b188      	cbz	r0, a09e <duration_period_setup+0x82>
				return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
			}

			node_rx = ll_rx_alloc();
    a07a:	f7ff f9b5 	bl	93e8 <ll_rx_alloc>
			if (!node_rx) {
    a07e:	b120      	cbz	r0, a08a <duration_period_setup+0x6e>
				ll_rx_link_release(link_scan_term);

				return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
			}

			node_rx->hdr.link = (void *)link_scan_term;
    a080:	6006      	str	r6, [r0, #0]
			scan->node_rx_scan_term = (void *)node_rx;
    a082:	6420      	str	r0, [r4, #64]	; 0x40
			*node_rx_scan_term = node_rx;
    a084:	6028      	str	r0, [r5, #0]
		lll->duration_reload = 0U;
		scan->duration_lazy = 0U;
		scan->node_rx_scan_term = NULL;
	}

	return 0;
    a086:	2000      	movs	r0, #0
    a088:	e008      	b.n	a09c <duration_period_setup+0x80>
				ll_rx_link_release(link_scan_term);
    a08a:	4630      	mov	r0, r6
    a08c:	f7ff f8e2 	bl	9254 <ll_rx_link_release>
				return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    a090:	2007      	movs	r0, #7
    a092:	e003      	b.n	a09c <duration_period_setup+0x80>
		lll->duration_reload = 0U;
    a094:	2000      	movs	r0, #0
    a096:	8520      	strh	r0, [r4, #40]	; 0x28
		scan->duration_lazy = 0U;
    a098:	87a0      	strh	r0, [r4, #60]	; 0x3c
		scan->node_rx_scan_term = NULL;
    a09a:	6420      	str	r0, [r4, #64]	; 0x40
}
    a09c:	bd70      	pop	{r4, r5, r6, pc}
				return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    a09e:	2007      	movs	r0, #7
    a0a0:	e7fc      	b.n	a09c <duration_period_setup+0x80>
    a0a2:	bf00      	nop
    a0a4:	d1b71759 	.word	0xd1b71759
    a0a8:	00138800 	.word	0x00138800

0000a0ac <ticker_stop_ext_op_cb>:
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, ext_disable};
	uint32_t ret;

	/* Ignore if race between thread and ULL */
	if (status != TICKER_STATUS_SUCCESS) {
    a0ac:	b100      	cbz	r0, a0b0 <ticker_stop_ext_op_cb+0x4>
    a0ae:	4770      	bx	lr
{
    a0b0:	b508      	push	{r3, lr}

		return;
	}

	/* Check if any pending LLL events that need to be aborted */
	mfy.param = param;
    a0b2:	4b0b      	ldr	r3, [pc, #44]	; (a0e0 <ticker_stop_ext_op_cb+0x34>)
    a0b4:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    a0b6:	2200      	movs	r2, #0
    a0b8:	2101      	movs	r1, #1
    a0ba:	2002      	movs	r0, #2
    a0bc:	f7fc ff4a 	bl	6f54 <mayfly_enqueue>
			     TICKER_USER_ID_ULL_HIGH, 0, &mfy);
	LL_ASSERT(!ret);
    a0c0:	b900      	cbnz	r0, a0c4 <ticker_stop_ext_op_cb+0x18>
}
    a0c2:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    a0c4:	f240 33ae 	movw	r3, #942	; 0x3ae
    a0c8:	4a06      	ldr	r2, [pc, #24]	; (a0e4 <ticker_stop_ext_op_cb+0x38>)
    a0ca:	4907      	ldr	r1, [pc, #28]	; (a0e8 <ticker_stop_ext_op_cb+0x3c>)
    a0cc:	4807      	ldr	r0, [pc, #28]	; (a0ec <ticker_stop_ext_op_cb+0x40>)
    a0ce:	f00f fb7e 	bl	197ce <assert_print>
    a0d2:	4040      	eors	r0, r0
    a0d4:	f380 8811 	msr	BASEPRI, r0
    a0d8:	f04f 0003 	mov.w	r0, #3
    a0dc:	df02      	svc	2
    a0de:	e7f0      	b.n	a0c2 <ticker_stop_ext_op_cb+0x16>
    a0e0:	20000714 	.word	0x20000714
    a0e4:	0001ed7c 	.word	0x0001ed7c
    a0e8:	0001eccc 	.word	0x0001eccc
    a0ec:	0001e920 	.word	0x0001e920

0000a0f0 <ext_disable>:

static void ext_disable(void *param)
{
    a0f0:	b510      	push	{r4, lr}
    a0f2:	4604      	mov	r4, r0
    a0f4:	7803      	ldrb	r3, [r0, #0]
	struct ull_hdr *hdr;

	/* Check ref count to determine if any pending LLL events in pipeline */
	scan = param;
	hdr = &scan->ull;
	if (ull_ref_get(hdr)) {
    a0f6:	2b00      	cmp	r3, #0
    a0f8:	d02c      	beq.n	a154 <ext_disable+0x64>
		static memq_link_t link;
		static struct mayfly mfy = {0, 0, &link, NULL, lll_disable};
		uint32_t ret;

		mfy.param = &scan->lll;
    a0fa:	f100 031c 	add.w	r3, r0, #28
    a0fe:	4a17      	ldr	r2, [pc, #92]	; (a15c <ext_disable+0x6c>)
    a100:	6093      	str	r3, [r2, #8]

		/* Setup disabled callback to be called when ref count
		 * returns to zero.
		 */
		LL_ASSERT(!hdr->disabled_cb);
    a102:	6943      	ldr	r3, [r0, #20]
    a104:	b163      	cbz	r3, a120 <ext_disable+0x30>
    a106:	f240 33c3 	movw	r3, #963	; 0x3c3
    a10a:	4a15      	ldr	r2, [pc, #84]	; (a160 <ext_disable+0x70>)
    a10c:	4915      	ldr	r1, [pc, #84]	; (a164 <ext_disable+0x74>)
    a10e:	4816      	ldr	r0, [pc, #88]	; (a168 <ext_disable+0x78>)
    a110:	f00f fb5d 	bl	197ce <assert_print>
    a114:	4040      	eors	r0, r0
    a116:	f380 8811 	msr	BASEPRI, r0
    a11a:	f04f 0003 	mov.w	r0, #3
    a11e:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    a120:	4b0e      	ldr	r3, [pc, #56]	; (a15c <ext_disable+0x6c>)
    a122:	689a      	ldr	r2, [r3, #8]
    a124:	61a2      	str	r2, [r4, #24]
		hdr->disabled_cb = ext_disabled_cb;
    a126:	4a11      	ldr	r2, [pc, #68]	; (a16c <ext_disable+0x7c>)
    a128:	6162      	str	r2, [r4, #20]

		/* Trigger LLL disable */
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    a12a:	2200      	movs	r2, #0
    a12c:	4611      	mov	r1, r2
    a12e:	2001      	movs	r0, #1
    a130:	f7fc ff10 	bl	6f54 <mayfly_enqueue>
				     TICKER_USER_ID_LLL, 0, &mfy);
		LL_ASSERT(!ret);
    a134:	b900      	cbnz	r0, a138 <ext_disable+0x48>
	} else {
		/* No pending LLL events */
		ext_disabled_cb(&scan->lll);
	}
}
    a136:	bd10      	pop	{r4, pc}
		LL_ASSERT(!ret);
    a138:	f240 33ca 	movw	r3, #970	; 0x3ca
    a13c:	4a08      	ldr	r2, [pc, #32]	; (a160 <ext_disable+0x70>)
    a13e:	490c      	ldr	r1, [pc, #48]	; (a170 <ext_disable+0x80>)
    a140:	4809      	ldr	r0, [pc, #36]	; (a168 <ext_disable+0x78>)
    a142:	f00f fb44 	bl	197ce <assert_print>
    a146:	4040      	eors	r0, r0
    a148:	f380 8811 	msr	BASEPRI, r0
    a14c:	f04f 0003 	mov.w	r0, #3
    a150:	df02      	svc	2
    a152:	e7f0      	b.n	a136 <ext_disable+0x46>
		ext_disabled_cb(&scan->lll);
    a154:	301c      	adds	r0, #28
    a156:	f011 fd2e 	bl	1bbb6 <ext_disabled_cb>
}
    a15a:	e7ec      	b.n	a136 <ext_disable+0x46>
    a15c:	20000704 	.word	0x20000704
    a160:	0001ed7c 	.word	0x0001ed7c
    a164:	0001edbc 	.word	0x0001edbc
    a168:	0001e920 	.word	0x0001e920
    a16c:	0001bbb7 	.word	0x0001bbb7
    a170:	0001eccc 	.word	0x0001eccc

0000a174 <ull_scan_disable>:
{
    a174:	b570      	push	{r4, r5, r6, lr}
    a176:	460c      	mov	r4, r1
	scan->is_stop = 1U;
    a178:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
    a17c:	f043 0301 	orr.w	r3, r3, #1
    a180:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
    a184:	3002      	adds	r0, #2
    a186:	f101 021c 	add.w	r2, r1, #28
    a18a:	b2c0      	uxtb	r0, r0
    a18c:	f7ff fb6a 	bl	9864 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    a190:	4605      	mov	r5, r0
    a192:	b110      	cbz	r0, a19a <ull_scan_disable+0x26>
    a194:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a198:	d104      	bne.n	a1a4 <ull_scan_disable+0x30>
	if (err) {
    a19a:	2d00      	cmp	r5, #0
    a19c:	d133      	bne.n	a206 <ull_scan_disable+0x92>
	for (uint8_t aux_handle = 0; aux_handle < CONFIG_BT_CTLR_SCAN_AUX_SET;
    a19e:	b17d      	cbz	r5, a1c0 <ull_scan_disable+0x4c>
	return 0;
    a1a0:	2000      	movs	r0, #0
}
    a1a2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    a1a4:	f240 13fb 	movw	r3, #507	; 0x1fb
    a1a8:	4a19      	ldr	r2, [pc, #100]	; (a210 <ull_scan_disable+0x9c>)
    a1aa:	491a      	ldr	r1, [pc, #104]	; (a214 <ull_scan_disable+0xa0>)
    a1ac:	481a      	ldr	r0, [pc, #104]	; (a218 <ull_scan_disable+0xa4>)
    a1ae:	f00f fb0e 	bl	197ce <assert_print>
    a1b2:	4040      	eors	r0, r0
    a1b4:	f380 8811 	msr	BASEPRI, r0
    a1b8:	f04f 0003 	mov.w	r0, #3
    a1bc:	df02      	svc	2
    a1be:	e7ec      	b.n	a19a <ull_scan_disable+0x26>
		aux = ull_scan_aux_set_get(aux_handle);
    a1c0:	4628      	mov	r0, r5
    a1c2:	f000 fbc3 	bl	a94c <ull_scan_aux_set_get>
    a1c6:	4606      	mov	r6, r0
		aux_scan_lll = aux->parent;
    a1c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
		if (!aux_scan_lll) {
    a1ca:	b113      	cbz	r3, a1d2 <ull_scan_disable+0x5e>
		aux_scan = HDR_LLL2ULL(aux_scan_lll);
    a1cc:	681b      	ldr	r3, [r3, #0]
		if (aux_scan == scan) {
    a1ce:	429c      	cmp	r4, r3
    a1d0:	d002      	beq.n	a1d8 <ull_scan_disable+0x64>
	     aux_handle++) {
    a1d2:	3501      	adds	r5, #1
    a1d4:	b2ed      	uxtb	r5, r5
    a1d6:	e7e2      	b.n	a19e <ull_scan_disable+0x2a>
			err = ull_scan_aux_stop(aux);
    a1d8:	f000 fcf8 	bl	abcc <ull_scan_aux_stop>
			if (err && (err != -EALREADY)) {
    a1dc:	b110      	cbz	r0, a1e4 <ull_scan_disable+0x70>
    a1de:	f110 0f78 	cmn.w	r0, #120	; 0x78
    a1e2:	d112      	bne.n	a20a <ull_scan_disable+0x96>
			LL_ASSERT(!aux->parent);
    a1e4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    a1e6:	2b00      	cmp	r3, #0
    a1e8:	d0f3      	beq.n	a1d2 <ull_scan_disable+0x5e>
    a1ea:	f240 2315 	movw	r3, #533	; 0x215
    a1ee:	4a08      	ldr	r2, [pc, #32]	; (a210 <ull_scan_disable+0x9c>)
    a1f0:	490a      	ldr	r1, [pc, #40]	; (a21c <ull_scan_disable+0xa8>)
    a1f2:	4809      	ldr	r0, [pc, #36]	; (a218 <ull_scan_disable+0xa4>)
    a1f4:	f00f faeb 	bl	197ce <assert_print>
    a1f8:	4040      	eors	r0, r0
    a1fa:	f380 8811 	msr	BASEPRI, r0
    a1fe:	f04f 0003 	mov.w	r0, #3
    a202:	df02      	svc	2
    a204:	e7e5      	b.n	a1d2 <ull_scan_disable+0x5e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    a206:	200c      	movs	r0, #12
    a208:	e7cb      	b.n	a1a2 <ull_scan_disable+0x2e>
				return BT_HCI_ERR_CMD_DISALLOWED;
    a20a:	200c      	movs	r0, #12
    a20c:	e7c9      	b.n	a1a2 <ull_scan_disable+0x2e>
    a20e:	bf00      	nop
    a210:	0001ed7c 	.word	0x0001ed7c
    a214:	0001edd0 	.word	0x0001edd0
    a218:	0001e920 	.word	0x0001e920
    a21c:	0001ede8 	.word	0x0001ede8

0000a220 <ull_scan_set_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
    a220:	4603      	mov	r3, r0
    a222:	b920      	cbnz	r0, a22e <ull_scan_set_get+0xe>
	return &ll_scan[handle];
    a224:	4803      	ldr	r0, [pc, #12]	; (a234 <ull_scan_set_get+0x14>)
    a226:	2254      	movs	r2, #84	; 0x54
    a228:	fb02 0003 	mla	r0, r2, r3, r0
    a22c:	4770      	bx	lr
		return NULL;
    a22e:	2000      	movs	r0, #0
}
    a230:	4770      	bx	lr
    a232:	bf00      	nop
    a234:	20005800 	.word	0x20005800

0000a238 <ull_scan_term_dequeue>:
{
    a238:	b510      	push	{r4, lr}
	scan = ull_scan_set_get(handle);
    a23a:	f7ff fff1 	bl	a220 <ull_scan_set_get>
	LL_ASSERT(scan);
    a23e:	4604      	mov	r4, r0
    a240:	b130      	cbz	r0, a250 <ull_scan_term_dequeue+0x18>
	scan->is_enabled = 0U;
    a242:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    a246:	f36f 0341 	bfc	r3, #1, #1
    a24a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
    a24e:	bd10      	pop	{r4, pc}
	LL_ASSERT(scan);
    a250:	f44f 7315 	mov.w	r3, #596	; 0x254
    a254:	4a05      	ldr	r2, [pc, #20]	; (a26c <ull_scan_term_dequeue+0x34>)
    a256:	4906      	ldr	r1, [pc, #24]	; (a270 <ull_scan_term_dequeue+0x38>)
    a258:	4806      	ldr	r0, [pc, #24]	; (a274 <ull_scan_term_dequeue+0x3c>)
    a25a:	f00f fab8 	bl	197ce <assert_print>
    a25e:	4040      	eors	r0, r0
    a260:	f380 8811 	msr	BASEPRI, r0
    a264:	f04f 0003 	mov.w	r0, #3
    a268:	df02      	svc	2
    a26a:	e7ea      	b.n	a242 <ull_scan_term_dequeue+0xa>
    a26c:	0001ed7c 	.word	0x0001ed7c
    a270:	0001edf8 	.word	0x0001edf8
    a274:	0001e920 	.word	0x0001e920

0000a278 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    a278:	4b04      	ldr	r3, [pc, #16]	; (a28c <ull_scan_handle_get+0x14>)
    a27a:	1ac0      	subs	r0, r0, r3
    a27c:	0880      	lsrs	r0, r0, #2
    a27e:	4b04      	ldr	r3, [pc, #16]	; (a290 <ull_scan_handle_get+0x18>)
    a280:	fba3 3000 	umull	r3, r0, r3, r0
}
    a284:	f3c0 0087 	ubfx	r0, r0, #2, #8
    a288:	4770      	bx	lr
    a28a:	bf00      	nop
    a28c:	20005800 	.word	0x20005800
    a290:	30c30c31 	.word	0x30c30c31

0000a294 <duration_period_update>:
	if (is_update) {
    a294:	b919      	cbnz	r1, a29e <duration_period_update+0xa>
		scan->lll.duration_expire = scan->lll.duration_reload;
    a296:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    a298:	8542      	strh	r2, [r0, #42]	; 0x2a
	return 0;
    a29a:	4608      	mov	r0, r1
}
    a29c:	4770      	bx	lr
{
    a29e:	b530      	push	{r4, r5, lr}
    a2a0:	b08b      	sub	sp, #44	; 0x2c
		scan->lll.duration_expire = 0U;
    a2a2:	2400      	movs	r4, #0
    a2a4:	8544      	strh	r4, [r0, #42]	; 0x2a
		ret_cb = TICKER_STATUS_BUSY;
    a2a6:	2302      	movs	r3, #2
    a2a8:	9309      	str	r3, [sp, #36]	; 0x24
				     ull_scan_handle_get(scan)),
    a2aa:	f7ff ffe5 	bl	a278 <ull_scan_handle_get>
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a2ae:	1c82      	adds	r2, r0, #2
    a2b0:	ad09      	add	r5, sp, #36	; 0x24
    a2b2:	9506      	str	r5, [sp, #24]
    a2b4:	4b0b      	ldr	r3, [pc, #44]	; (a2e4 <duration_period_update+0x50>)
    a2b6:	9305      	str	r3, [sp, #20]
    a2b8:	2301      	movs	r3, #1
    a2ba:	9304      	str	r3, [sp, #16]
    a2bc:	9303      	str	r3, [sp, #12]
    a2be:	9402      	str	r4, [sp, #8]
    a2c0:	9401      	str	r4, [sp, #4]
    a2c2:	9400      	str	r4, [sp, #0]
    a2c4:	4623      	mov	r3, r4
    a2c6:	b2d2      	uxtb	r2, r2
    a2c8:	2103      	movs	r1, #3
    a2ca:	4620      	mov	r0, r4
    a2cc:	f010 f9a7 	bl	1a61e <ticker_update>
		ret = ull_ticker_status_take(ret, &ret_cb);
    a2d0:	4629      	mov	r1, r5
    a2d2:	f7ff fa3f 	bl	9754 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    a2d6:	b910      	cbnz	r0, a2de <duration_period_update+0x4a>
		return 0;
    a2d8:	2000      	movs	r0, #0
}
    a2da:	b00b      	add	sp, #44	; 0x2c
    a2dc:	bd30      	pop	{r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    a2de:	200c      	movs	r0, #12
    a2e0:	e7fb      	b.n	a2da <duration_period_update+0x46>
    a2e2:	bf00      	nop
    a2e4:	00009235 	.word	0x00009235

0000a2e8 <ticker_cb>:
{
    a2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2ec:	b088      	sub	sp, #32
    a2ee:	4680      	mov	r8, r0
    a2f0:	4617      	mov	r7, r2
    a2f2:	461c      	mov	r4, r3
    a2f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	lll = &scan->lll;
    a2f6:	462e      	mov	r6, r5
	return ++hdr->ref;
    a2f8:	f816 3b1c 	ldrb.w	r3, [r6], #28
    a2fc:	3301      	adds	r3, #1
    a2fe:	b2db      	uxtb	r3, r3
    a300:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(ref);
    a302:	b1e3      	cbz	r3, a33e <ticker_cb+0x56>
	p.ticks_at_expire = ticks_at_expire;
    a304:	4956      	ldr	r1, [pc, #344]	; (a460 <ticker_cb+0x178>)
    a306:	f8c1 8000 	str.w	r8, [r1]
	p.remainder = remainder;
    a30a:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
    a30c:	810c      	strh	r4, [r1, #8]
	p.param = lll;
    a30e:	60ce      	str	r6, [r1, #12]
	p.force = force;
    a310:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    a314:	728b      	strb	r3, [r1, #10]
	mfy.param = &p;
    a316:	4b53      	ldr	r3, [pc, #332]	; (a464 <ticker_cb+0x17c>)
    a318:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    a31a:	2200      	movs	r2, #0
    a31c:	4611      	mov	r1, r2
    a31e:	2001      	movs	r0, #1
    a320:	f7fc fe18 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    a324:	b9c8      	cbnz	r0, a35a <ticker_cb+0x72>
	if (lll->duration_expire) {
    a326:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    a328:	2a00      	cmp	r2, #0
    a32a:	d05f      	beq.n	a3ec <ticker_cb+0x104>
		elapsed = lazy + 1;
    a32c:	3401      	adds	r4, #1
    a32e:	b2a3      	uxth	r3, r4
		if (lll->duration_expire > elapsed) {
    a330:	429a      	cmp	r2, r3
    a332:	d920      	bls.n	a376 <ticker_cb+0x8e>
			lll->duration_expire -= elapsed;
    a334:	1ad2      	subs	r2, r2, r3
    a336:	856a      	strh	r2, [r5, #42]	; 0x2a
}
    a338:	b008      	add	sp, #32
    a33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
    a33e:	f44f 733e 	mov.w	r3, #760	; 0x2f8
    a342:	4a49      	ldr	r2, [pc, #292]	; (a468 <ticker_cb+0x180>)
    a344:	4949      	ldr	r1, [pc, #292]	; (a46c <ticker_cb+0x184>)
    a346:	484a      	ldr	r0, [pc, #296]	; (a470 <ticker_cb+0x188>)
    a348:	f00f fa41 	bl	197ce <assert_print>
    a34c:	4040      	eors	r0, r0
    a34e:	f380 8811 	msr	BASEPRI, r0
    a352:	f04f 0003 	mov.w	r0, #3
    a356:	df02      	svc	2
    a358:	e7d4      	b.n	a304 <ticker_cb+0x1c>
	LL_ASSERT(!ret);
    a35a:	f240 3305 	movw	r3, #773	; 0x305
    a35e:	4a42      	ldr	r2, [pc, #264]	; (a468 <ticker_cb+0x180>)
    a360:	4944      	ldr	r1, [pc, #272]	; (a474 <ticker_cb+0x18c>)
    a362:	4843      	ldr	r0, [pc, #268]	; (a470 <ticker_cb+0x188>)
    a364:	f00f fa33 	bl	197ce <assert_print>
    a368:	4040      	eors	r0, r0
    a36a:	f380 8811 	msr	BASEPRI, r0
    a36e:	f04f 0003 	mov.w	r0, #3
    a372:	df02      	svc	2
    a374:	e7d7      	b.n	a326 <ticker_cb+0x3e>
			if (scan->duration_lazy) {
    a376:	8fac      	ldrh	r4, [r5, #60]	; 0x3c
    a378:	b1cc      	cbz	r4, a3ae <ticker_cb+0xc6>
				duration_lazy = lll->duration_expire +
    a37a:	4414      	add	r4, r2
    a37c:	b2a4      	uxth	r4, r4
    a37e:	1ae4      	subs	r4, r4, r3
    a380:	b2a4      	uxth	r4, r4
				handle = ull_scan_handle_get(scan);
    a382:	4628      	mov	r0, r5
    a384:	f7ff ff78 	bl	a278 <ull_scan_handle_get>
				LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a388:	4606      	mov	r6, r0
    a38a:	b998      	cbnz	r0, a3b4 <ticker_cb+0xcc>
				ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a38c:	1cb2      	adds	r2, r6, #2
    a38e:	2000      	movs	r0, #0
    a390:	9006      	str	r0, [sp, #24]
    a392:	9005      	str	r0, [sp, #20]
    a394:	9004      	str	r0, [sp, #16]
    a396:	9403      	str	r4, [sp, #12]
    a398:	9002      	str	r0, [sp, #8]
    a39a:	9001      	str	r0, [sp, #4]
    a39c:	9000      	str	r0, [sp, #0]
    a39e:	4603      	mov	r3, r0
    a3a0:	b2d2      	uxtb	r2, r2
    a3a2:	2101      	movs	r1, #1
    a3a4:	f010 f93b 	bl	1a61e <ticker_update>
				LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a3a8:	b108      	cbz	r0, a3ae <ticker_cb+0xc6>
    a3aa:	2802      	cmp	r0, #2
    a3ac:	d110      	bne.n	a3d0 <ticker_cb+0xe8>
			lll->duration_expire = 0U;
    a3ae:	2300      	movs	r3, #0
    a3b0:	856b      	strh	r3, [r5, #42]	; 0x2a
    a3b2:	e7c1      	b.n	a338 <ticker_cb+0x50>
				LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a3b4:	f240 3317 	movw	r3, #791	; 0x317
    a3b8:	4a2b      	ldr	r2, [pc, #172]	; (a468 <ticker_cb+0x180>)
    a3ba:	492f      	ldr	r1, [pc, #188]	; (a478 <ticker_cb+0x190>)
    a3bc:	482c      	ldr	r0, [pc, #176]	; (a470 <ticker_cb+0x188>)
    a3be:	f00f fa06 	bl	197ce <assert_print>
    a3c2:	4040      	eors	r0, r0
    a3c4:	f380 8811 	msr	BASEPRI, r0
    a3c8:	f04f 0003 	mov.w	r0, #3
    a3cc:	df02      	svc	2
    a3ce:	e7dd      	b.n	a38c <ticker_cb+0xa4>
				LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a3d0:	f240 331f 	movw	r3, #799	; 0x31f
    a3d4:	4a24      	ldr	r2, [pc, #144]	; (a468 <ticker_cb+0x180>)
    a3d6:	4929      	ldr	r1, [pc, #164]	; (a47c <ticker_cb+0x194>)
    a3d8:	4825      	ldr	r0, [pc, #148]	; (a470 <ticker_cb+0x188>)
    a3da:	f00f f9f8 	bl	197ce <assert_print>
    a3de:	4040      	eors	r0, r0
    a3e0:	f380 8811 	msr	BASEPRI, r0
    a3e4:	f04f 0003 	mov.w	r0, #3
    a3e8:	df02      	svc	2
    a3ea:	e7e0      	b.n	a3ae <ticker_cb+0xc6>
	} else if (lll->duration_reload && lazy) {
    a3ec:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    a3ee:	2b00      	cmp	r3, #0
    a3f0:	d0a2      	beq.n	a338 <ticker_cb+0x50>
    a3f2:	2c00      	cmp	r4, #0
    a3f4:	d0a0      	beq.n	a338 <ticker_cb+0x50>
		handle = ull_scan_handle_get(scan);
    a3f6:	4628      	mov	r0, r5
    a3f8:	f7ff ff3e 	bl	a278 <ull_scan_handle_get>
		LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a3fc:	4604      	mov	r4, r0
    a3fe:	bb08      	cbnz	r0, a444 <ticker_cb+0x15c>
		lll->duration_expire = lll->duration_reload;
    a400:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    a402:	856b      	strh	r3, [r5, #42]	; 0x2a
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    a404:	1ca2      	adds	r2, r4, #2
    a406:	2000      	movs	r0, #0
    a408:	9006      	str	r0, [sp, #24]
    a40a:	9005      	str	r0, [sp, #20]
    a40c:	2101      	movs	r1, #1
    a40e:	9104      	str	r1, [sp, #16]
    a410:	9103      	str	r1, [sp, #12]
    a412:	9002      	str	r0, [sp, #8]
    a414:	9001      	str	r0, [sp, #4]
    a416:	9000      	str	r0, [sp, #0]
    a418:	4603      	mov	r3, r0
    a41a:	b2d2      	uxtb	r2, r2
    a41c:	f010 f8ff 	bl	1a61e <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a420:	2800      	cmp	r0, #0
    a422:	d089      	beq.n	a338 <ticker_cb+0x50>
    a424:	2802      	cmp	r0, #2
    a426:	d087      	beq.n	a338 <ticker_cb+0x50>
    a428:	f44f 734c 	mov.w	r3, #816	; 0x330
    a42c:	4a0e      	ldr	r2, [pc, #56]	; (a468 <ticker_cb+0x180>)
    a42e:	4913      	ldr	r1, [pc, #76]	; (a47c <ticker_cb+0x194>)
    a430:	480f      	ldr	r0, [pc, #60]	; (a470 <ticker_cb+0x188>)
    a432:	f00f f9cc 	bl	197ce <assert_print>
    a436:	4040      	eors	r0, r0
    a438:	f380 8811 	msr	BASEPRI, r0
    a43c:	f04f 0003 	mov.w	r0, #3
    a440:	df02      	svc	2
}
    a442:	e779      	b.n	a338 <ticker_cb+0x50>
		LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a444:	f240 3329 	movw	r3, #809	; 0x329
    a448:	4a07      	ldr	r2, [pc, #28]	; (a468 <ticker_cb+0x180>)
    a44a:	490b      	ldr	r1, [pc, #44]	; (a478 <ticker_cb+0x190>)
    a44c:	4808      	ldr	r0, [pc, #32]	; (a470 <ticker_cb+0x188>)
    a44e:	f00f f9be 	bl	197ce <assert_print>
    a452:	4040      	eors	r0, r0
    a454:	f380 8811 	msr	BASEPRI, r0
    a458:	f04f 0003 	mov.w	r0, #3
    a45c:	df02      	svc	2
    a45e:	e7cf      	b.n	a400 <ticker_cb+0x118>
    a460:	20005854 	.word	0x20005854
    a464:	20000724 	.word	0x20000724
    a468:	0001ed7c 	.word	0x0001ed7c
    a46c:	0001ee00 	.word	0x0001ee00
    a470:	0001e920 	.word	0x0001e920
    a474:	0001eccc 	.word	0x0001eccc
    a478:	0001ee04 	.word	0x0001ee04
    a47c:	0001ee10 	.word	0x0001ee10

0000a480 <ull_scan_done>:
{
    a480:	b530      	push	{r4, r5, lr}
    a482:	b083      	sub	sp, #12
	scan = CONTAINER_OF(done->param, struct ll_scan_set, ull);
    a484:	6a04      	ldr	r4, [r0, #32]
	if (likely(scan->duration_lazy || !lll->duration_reload ||
    a486:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    a488:	b10b      	cbz	r3, a48e <ull_scan_done+0xe>
}
    a48a:	b003      	add	sp, #12
    a48c:	bd30      	pop	{r4, r5, pc}
	if (likely(scan->duration_lazy || !lll->duration_reload ||
    a48e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    a490:	2b00      	cmp	r3, #0
    a492:	d0fa      	beq.n	a48a <ull_scan_done+0xa>
    a494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    a496:	2b00      	cmp	r3, #0
    a498:	d1f7      	bne.n	a48a <ull_scan_done+0xa>
	lll->duration_reload = 0U;
    a49a:	8523      	strh	r3, [r4, #40]	; 0x28
	handle = ull_scan_handle_get(scan);
    a49c:	4620      	mov	r0, r4
    a49e:	f7ff feeb 	bl	a278 <ull_scan_handle_get>
	LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a4a2:	4605      	mov	r5, r0
    a4a4:	b9e8      	cbnz	r0, a4e2 <ull_scan_done+0x62>
	rx_hdr = (void *)scan->node_rx_scan_term;
    a4a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
	rx_hdr->type = NODE_RX_TYPE_EXT_SCAN_TERMINATE;
    a4a8:	220b      	movs	r2, #11
    a4aa:	711a      	strb	r2, [r3, #4]
	rx_hdr->handle = handle;
    a4ac:	80dd      	strh	r5, [r3, #6]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    a4ae:	1caa      	adds	r2, r5, #2
    a4b0:	9400      	str	r4, [sp, #0]
    a4b2:	4b13      	ldr	r3, [pc, #76]	; (a500 <ull_scan_done+0x80>)
    a4b4:	b2d2      	uxtb	r2, r2
    a4b6:	2101      	movs	r1, #1
    a4b8:	2000      	movs	r0, #0
    a4ba:	f7fc ffc1 	bl	7440 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    a4be:	2800      	cmp	r0, #0
    a4c0:	d0e3      	beq.n	a48a <ull_scan_done+0xa>
    a4c2:	2802      	cmp	r0, #2
    a4c4:	d0e1      	beq.n	a48a <ull_scan_done+0xa>
    a4c6:	f240 234b 	movw	r3, #587	; 0x24b
    a4ca:	4a0e      	ldr	r2, [pc, #56]	; (a504 <ull_scan_done+0x84>)
    a4cc:	490e      	ldr	r1, [pc, #56]	; (a508 <ull_scan_done+0x88>)
    a4ce:	480f      	ldr	r0, [pc, #60]	; (a50c <ull_scan_done+0x8c>)
    a4d0:	f00f f97d 	bl	197ce <assert_print>
    a4d4:	4040      	eors	r0, r0
    a4d6:	f380 8811 	msr	BASEPRI, r0
    a4da:	f04f 0003 	mov.w	r0, #3
    a4de:	df02      	svc	2
    a4e0:	e7d3      	b.n	a48a <ull_scan_done+0xa>
	LL_ASSERT(handle < BT_CTLR_SCAN_SET);
    a4e2:	f240 2333 	movw	r3, #563	; 0x233
    a4e6:	4a07      	ldr	r2, [pc, #28]	; (a504 <ull_scan_done+0x84>)
    a4e8:	4909      	ldr	r1, [pc, #36]	; (a510 <ull_scan_done+0x90>)
    a4ea:	4808      	ldr	r0, [pc, #32]	; (a50c <ull_scan_done+0x8c>)
    a4ec:	f00f f96f 	bl	197ce <assert_print>
    a4f0:	4040      	eors	r0, r0
    a4f2:	f380 8811 	msr	BASEPRI, r0
    a4f6:	f04f 0003 	mov.w	r0, #3
    a4fa:	df02      	svc	2
    a4fc:	e7d3      	b.n	a4a6 <ull_scan_done+0x26>
    a4fe:	bf00      	nop
    a500:	0000a0ad 	.word	0x0000a0ad
    a504:	0001ed7c 	.word	0x0001ed7c
    a508:	0001ee10 	.word	0x0001ee10
    a50c:	0001e920 	.word	0x0001e920
    a510:	0001ee04 	.word	0x0001ee04

0000a514 <ull_scan_is_valid_get>:
	if (((uint8_t *)scan < (uint8_t *)ll_scan) ||
    a514:	4b04      	ldr	r3, [pc, #16]	; (a528 <ull_scan_is_valid_get+0x14>)
    a516:	4298      	cmp	r0, r3
    a518:	d301      	bcc.n	a51e <ull_scan_is_valid_get+0xa>
    a51a:	d802      	bhi.n	a522 <ull_scan_is_valid_get+0xe>
    a51c:	4770      	bx	lr
		return NULL;
    a51e:	2000      	movs	r0, #0
    a520:	4770      	bx	lr
    a522:	2000      	movs	r0, #0
}
    a524:	4770      	bx	lr
    a526:	bf00      	nop
    a528:	20005800 	.word	0x20005800

0000a52c <init_reset>:
{
    a52c:	b508      	push	{r3, lr}
	mem_init(ll_scan_aux_pool, sizeof(struct ll_scan_aux_set),
    a52e:	4b04      	ldr	r3, [pc, #16]	; (a540 <init_reset+0x14>)
    a530:	2201      	movs	r2, #1
    a532:	213c      	movs	r1, #60	; 0x3c
    a534:	4803      	ldr	r0, [pc, #12]	; (a544 <init_reset+0x18>)
    a536:	f00f fdcc 	bl	1a0d2 <mem_init>
}
    a53a:	2000      	movs	r0, #0
    a53c:	bd08      	pop	{r3, pc}
    a53e:	bf00      	nop
    a540:	200058c8 	.word	0x200058c8
    a544:	2000587c 	.word	0x2000587c

0000a548 <aux_sync_partial>:

	ll_rx_put(rx->link, rx);
}

static void aux_sync_partial(void *param)
{
    a548:	b510      	push	{r4, lr}
	struct ll_scan_aux_set *aux;
	struct node_rx_hdr *rx;

	aux = param;
	rx = aux->rx_head;
    a54a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	aux->rx_head = NULL;
    a54c:	2300      	movs	r3, #0
    a54e:	62c3      	str	r3, [r0, #44]	; 0x2c

	LL_ASSERT(rx);
    a550:	b154      	cbz	r4, a568 <aux_sync_partial+0x20>
	rx->rx_ftr.aux_sched = 1U;
    a552:	7ee3      	ldrb	r3, [r4, #27]
    a554:	f043 0304 	orr.w	r3, r3, #4
    a558:	76e3      	strb	r3, [r4, #27]

	ll_rx_put(rx->link, rx);
    a55a:	4621      	mov	r1, r4
    a55c:	6820      	ldr	r0, [r4, #0]
    a55e:	f7ff f843 	bl	95e8 <ll_rx_put>
	ll_rx_sched();
    a562:	f7ff f849 	bl	95f8 <ll_rx_sched>
}
    a566:	bd10      	pop	{r4, pc}
	LL_ASSERT(rx);
    a568:	f240 4399 	movw	r3, #1177	; 0x499
    a56c:	4a05      	ldr	r2, [pc, #20]	; (a584 <aux_sync_partial+0x3c>)
    a56e:	4906      	ldr	r1, [pc, #24]	; (a588 <aux_sync_partial+0x40>)
    a570:	4806      	ldr	r0, [pc, #24]	; (a58c <aux_sync_partial+0x44>)
    a572:	f00f f92c 	bl	197ce <assert_print>
    a576:	4040      	eors	r0, r0
    a578:	f380 8811 	msr	BASEPRI, r0
    a57c:	f04f 0003 	mov.w	r0, #3
    a580:	df02      	svc	2
    a582:	e7e6      	b.n	a552 <aux_sync_partial+0xa>
    a584:	0001ee2c 	.word	0x0001ee2c
    a588:	0001ecc8 	.word	0x0001ecc8
    a58c:	0001e920 	.word	0x0001e920

0000a590 <ticker_op_cb>:

	DEBUG_RADIO_PREPARE_O(1);
}

static void ticker_op_cb(uint32_t status, void *param)
{
    a590:	b570      	push	{r4, r5, r6, lr}
    a592:	4605      	mov	r5, r0
    a594:	460c      	mov	r4, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC)) {
		struct ll_scan_aux_set *aux;
		struct lll_sync *sync_lll;

		aux = param;
		sync_lll = aux->parent;
    a596:	6a8e      	ldr	r6, [r1, #40]	; 0x28
		LL_ASSERT(sync_lll);
    a598:	b186      	cbz	r6, a5bc <ticker_op_cb+0x2c>

		sync = HDR_LLL2ULL(sync_lll);
		sync = ull_sync_is_valid_get(sync);
    a59a:	6830      	ldr	r0, [r6, #0]
    a59c:	f000 fd60 	bl	b060 <ull_sync_is_valid_get>
	} else {
		sync = NULL;
	}

	if (status == TICKER_STATUS_SUCCESS) {
    a5a0:	b9d5      	cbnz	r5, a5d8 <ticker_op_cb+0x48>
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync) {
    a5a2:	b150      	cbz	r0, a5ba <ticker_op_cb+0x2a>
			mfy.fp = aux_sync_partial;
    a5a4:	4b20      	ldr	r3, [pc, #128]	; (a628 <ticker_op_cb+0x98>)
    a5a6:	4a21      	ldr	r2, [pc, #132]	; (a62c <ticker_op_cb+0x9c>)
    a5a8:	60da      	str	r2, [r3, #12]

			mfy.fp = flush_safe;
		}
	}

	mfy.param = param;
    a5aa:	4b1f      	ldr	r3, [pc, #124]	; (a628 <ticker_op_cb+0x98>)
    a5ac:	609c      	str	r4, [r3, #8]

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_ULL_HIGH,
    a5ae:	2200      	movs	r2, #0
    a5b0:	2101      	movs	r1, #1
    a5b2:	2002      	movs	r0, #2
    a5b4:	f7fc fcce 	bl	6f54 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
    a5b8:	bb38      	cbnz	r0, a60a <ticker_op_cb+0x7a>
}
    a5ba:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(sync_lll);
    a5bc:	f240 5302 	movw	r3, #1282	; 0x502
    a5c0:	4a1b      	ldr	r2, [pc, #108]	; (a630 <ticker_op_cb+0xa0>)
    a5c2:	491c      	ldr	r1, [pc, #112]	; (a634 <ticker_op_cb+0xa4>)
    a5c4:	481c      	ldr	r0, [pc, #112]	; (a638 <ticker_op_cb+0xa8>)
    a5c6:	f00f f902 	bl	197ce <assert_print>
    a5ca:	4040      	eors	r0, r0
    a5cc:	f380 8811 	msr	BASEPRI, r0
    a5d0:	f04f 0003 	mov.w	r0, #3
    a5d4:	df02      	svc	2
    a5d6:	e7e0      	b.n	a59a <ticker_op_cb+0xa>
		if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && sync) {
    a5d8:	b118      	cbz	r0, a5e2 <ticker_op_cb+0x52>
			mfy.fp = aux_sync_incomplete;
    a5da:	4b13      	ldr	r3, [pc, #76]	; (a628 <ticker_op_cb+0x98>)
    a5dc:	4a17      	ldr	r2, [pc, #92]	; (a63c <ticker_op_cb+0xac>)
    a5de:	60da      	str	r2, [r3, #12]
    a5e0:	e7e3      	b.n	a5aa <ticker_op_cb+0x1a>
			LL_ASSERT(aux->parent);
    a5e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a5e4:	b11b      	cbz	r3, a5ee <ticker_op_cb+0x5e>
			mfy.fp = flush_safe;
    a5e6:	4b10      	ldr	r3, [pc, #64]	; (a628 <ticker_op_cb+0x98>)
    a5e8:	4a15      	ldr	r2, [pc, #84]	; (a640 <ticker_op_cb+0xb0>)
    a5ea:	60da      	str	r2, [r3, #12]
    a5ec:	e7dd      	b.n	a5aa <ticker_op_cb+0x1a>
			LL_ASSERT(aux->parent);
    a5ee:	f240 5317 	movw	r3, #1303	; 0x517
    a5f2:	4a0f      	ldr	r2, [pc, #60]	; (a630 <ticker_op_cb+0xa0>)
    a5f4:	4913      	ldr	r1, [pc, #76]	; (a644 <ticker_op_cb+0xb4>)
    a5f6:	4810      	ldr	r0, [pc, #64]	; (a638 <ticker_op_cb+0xa8>)
    a5f8:	f00f f8e9 	bl	197ce <assert_print>
    a5fc:	4040      	eors	r0, r0
    a5fe:	f380 8811 	msr	BASEPRI, r0
    a602:	f04f 0003 	mov.w	r0, #3
    a606:	df02      	svc	2
    a608:	e7ed      	b.n	a5e6 <ticker_op_cb+0x56>
	LL_ASSERT(!ret);
    a60a:	f240 5321 	movw	r3, #1313	; 0x521
    a60e:	4a08      	ldr	r2, [pc, #32]	; (a630 <ticker_op_cb+0xa0>)
    a610:	490d      	ldr	r1, [pc, #52]	; (a648 <ticker_op_cb+0xb8>)
    a612:	4809      	ldr	r0, [pc, #36]	; (a638 <ticker_op_cb+0xa8>)
    a614:	f00f f8db 	bl	197ce <assert_print>
    a618:	4040      	eors	r0, r0
    a61a:	f380 8811 	msr	BASEPRI, r0
    a61e:	f04f 0003 	mov.w	r0, #3
    a622:	df02      	svc	2
    a624:	e7c9      	b.n	a5ba <ticker_op_cb+0x2a>
    a626:	bf00      	nop
    a628:	20000754 	.word	0x20000754
    a62c:	0000a549 	.word	0x0000a549
    a630:	0001ee2c 	.word	0x0001ee2c
    a634:	0001ee70 	.word	0x0001ee70
    a638:	0001e920 	.word	0x0001e920
    a63c:	0000a7a9 	.word	0x0000a7a9
    a640:	0000a881 	.word	0x0000a881
    a644:	0001ef00 	.word	0x0001ef00
    a648:	0001eccc 	.word	0x0001eccc

0000a64c <ticker_cb>:
{
    a64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a64e:	4607      	mov	r7, r0
    a650:	461e      	mov	r6, r3
    a652:	9d07      	ldr	r5, [sp, #28]
    a654:	782a      	ldrb	r2, [r5, #0]
    a656:	3201      	adds	r2, #1
    a658:	b2d2      	uxtb	r2, r2
    a65a:	702a      	strb	r2, [r5, #0]
	LL_ASSERT(ref);
    a65c:	b18a      	cbz	r2, a682 <ticker_cb+0x36>
	p.ticks_at_expire = ticks_at_expire;
    a65e:	4c17      	ldr	r4, [pc, #92]	; (a6bc <ticker_cb+0x70>)
    a660:	6027      	str	r7, [r4, #0]
	p.remainder = 0; /* FIXME: remainder; */
    a662:	2100      	movs	r1, #0
    a664:	6061      	str	r1, [r4, #4]
	p.lazy = lazy;
    a666:	8126      	strh	r6, [r4, #8]
	p.force = force;
    a668:	f89d 3018 	ldrb.w	r3, [sp, #24]
    a66c:	72a3      	strb	r3, [r4, #10]
	p.param = &aux->lll;
    a66e:	351c      	adds	r5, #28
    a670:	60e5      	str	r5, [r4, #12]
	mfy.param = &p;
    a672:	4b13      	ldr	r3, [pc, #76]	; (a6c0 <ticker_cb+0x74>)
    a674:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    a676:	460a      	mov	r2, r1
    a678:	2001      	movs	r0, #1
    a67a:	f7fc fc6b 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    a67e:	b970      	cbnz	r0, a69e <ticker_cb+0x52>
}
    a680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(ref);
    a682:	f240 43e3 	movw	r3, #1251	; 0x4e3
    a686:	4a0f      	ldr	r2, [pc, #60]	; (a6c4 <ticker_cb+0x78>)
    a688:	490f      	ldr	r1, [pc, #60]	; (a6c8 <ticker_cb+0x7c>)
    a68a:	4810      	ldr	r0, [pc, #64]	; (a6cc <ticker_cb+0x80>)
    a68c:	f00f f89f 	bl	197ce <assert_print>
    a690:	4040      	eors	r0, r0
    a692:	f380 8811 	msr	BASEPRI, r0
    a696:	f04f 0003 	mov.w	r0, #3
    a69a:	df02      	svc	2
    a69c:	e7df      	b.n	a65e <ticker_cb+0x12>
	LL_ASSERT(!ret);
    a69e:	f44f 639e 	mov.w	r3, #1264	; 0x4f0
    a6a2:	4a08      	ldr	r2, [pc, #32]	; (a6c4 <ticker_cb+0x78>)
    a6a4:	490a      	ldr	r1, [pc, #40]	; (a6d0 <ticker_cb+0x84>)
    a6a6:	4809      	ldr	r0, [pc, #36]	; (a6cc <ticker_cb+0x80>)
    a6a8:	f00f f891 	bl	197ce <assert_print>
    a6ac:	4040      	eors	r0, r0
    a6ae:	f380 8811 	msr	BASEPRI, r0
    a6b2:	f04f 0003 	mov.w	r0, #3
    a6b6:	df02      	svc	2
}
    a6b8:	e7e2      	b.n	a680 <ticker_cb+0x34>
    a6ba:	bf00      	nop
    a6bc:	200058b8 	.word	0x200058b8
    a6c0:	20000744 	.word	0x20000744
    a6c4:	0001ee2c 	.word	0x0001ee2c
    a6c8:	0001ee00 	.word	0x0001ee00
    a6cc:	0001e920 	.word	0x0001e920
    a6d0:	0001eccc 	.word	0x0001eccc

0000a6d4 <flush>:
{
    a6d4:	b538      	push	{r3, r4, r5, lr}
    a6d6:	4604      	mov	r4, r0
	LL_ASSERT(aux->parent);
    a6d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a6da:	b303      	cbz	r3, a71e <flush+0x4a>
	rx = aux->rx_head;
    a6dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	if (rx) {
    a6de:	b361      	cbz	r1, a73a <flush+0x66>
		aux->rx_head = NULL;
    a6e0:	2300      	movs	r3, #0
    a6e2:	62e3      	str	r3, [r4, #44]	; 0x2c
		ll_rx_put(rx->link, rx);
    a6e4:	6808      	ldr	r0, [r1, #0]
    a6e6:	f7fe ff7f 	bl	95e8 <ll_rx_put>
		sched = true;
    a6ea:	2301      	movs	r3, #1
	rx = aux->rx_incomplete;
    a6ec:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	if (rx) {
    a6ee:	b330      	cbz	r0, a73e <flush+0x6a>
		aux->rx_incomplete = NULL;
    a6f0:	2300      	movs	r3, #0
    a6f2:	63a3      	str	r3, [r4, #56]	; 0x38
		rx_release_put(rx);
    a6f4:	f011 fbb3 	bl	1be5e <rx_release_put>
		ll_rx_sched();
    a6f8:	f7fe ff7e 	bl	95f8 <ll_rx_sched>
	lll = aux->parent;
    a6fc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	scan = ull_scan_is_valid_get(scan);
    a6fe:	6828      	ldr	r0, [r5, #0]
    a700:	f7ff ff08 	bl	a514 <ull_scan_is_valid_get>
	if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) || scan) {
    a704:	b1f0      	cbz	r0, a744 <flush+0x70>
		lll->lll_aux = NULL;
    a706:	2300      	movs	r3, #0
    a708:	60ab      	str	r3, [r5, #8]
	LL_ASSERT(aux->parent);
    a70a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a70c:	2b00      	cmp	r3, #0
    a70e:	d033      	beq.n	a778 <flush+0xa4>
	aux->parent = NULL;
    a710:	2300      	movs	r3, #0
    a712:	62a3      	str	r3, [r4, #40]	; 0x28
	mem_release(aux, &scan_aux_free);
    a714:	491f      	ldr	r1, [pc, #124]	; (a794 <flush+0xc0>)
    a716:	4620      	mov	r0, r4
    a718:	f00f fd0f 	bl	1a13a <mem_release>
}
    a71c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(aux->parent);
    a71e:	f240 435e 	movw	r3, #1118	; 0x45e
    a722:	4a1d      	ldr	r2, [pc, #116]	; (a798 <flush+0xc4>)
    a724:	491d      	ldr	r1, [pc, #116]	; (a79c <flush+0xc8>)
    a726:	481e      	ldr	r0, [pc, #120]	; (a7a0 <flush+0xcc>)
    a728:	f00f f851 	bl	197ce <assert_print>
    a72c:	4040      	eors	r0, r0
    a72e:	f380 8811 	msr	BASEPRI, r0
    a732:	f04f 0003 	mov.w	r0, #3
    a736:	df02      	svc	2
    a738:	e7d0      	b.n	a6dc <flush+0x8>
	bool sched = false;
    a73a:	2300      	movs	r3, #0
    a73c:	e7d6      	b.n	a6ec <flush+0x18>
	if (sched) {
    a73e:	2b00      	cmp	r3, #0
    a740:	d0dc      	beq.n	a6fc <flush+0x28>
    a742:	e7d9      	b.n	a6f8 <flush+0x24>
		sync_lll = aux->parent;
    a744:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		sync = HDR_LLL2ULL(sync_lll);
    a746:	682b      	ldr	r3, [r5, #0]
		LL_ASSERT(sync->is_stop || sync_lll->lll_aux);
    a748:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    a74c:	f013 0f08 	tst.w	r3, #8
    a750:	d101      	bne.n	a756 <flush+0x82>
    a752:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a754:	b113      	cbz	r3, a75c <flush+0x88>
		sync_lll->lll_aux = NULL;
    a756:	2300      	movs	r3, #0
    a758:	63eb      	str	r3, [r5, #60]	; 0x3c
    a75a:	e7d6      	b.n	a70a <flush+0x36>
		LL_ASSERT(sync->is_stop || sync_lll->lll_aux);
    a75c:	f240 4382 	movw	r3, #1154	; 0x482
    a760:	4a0d      	ldr	r2, [pc, #52]	; (a798 <flush+0xc4>)
    a762:	4910      	ldr	r1, [pc, #64]	; (a7a4 <flush+0xd0>)
    a764:	480e      	ldr	r0, [pc, #56]	; (a7a0 <flush+0xcc>)
    a766:	f00f f832 	bl	197ce <assert_print>
    a76a:	4040      	eors	r0, r0
    a76c:	f380 8811 	msr	BASEPRI, r0
    a770:	f04f 0003 	mov.w	r0, #3
    a774:	df02      	svc	2
    a776:	e7ee      	b.n	a756 <flush+0x82>
	LL_ASSERT(aux->parent);
    a778:	f240 4306 	movw	r3, #1030	; 0x406
    a77c:	4a06      	ldr	r2, [pc, #24]	; (a798 <flush+0xc4>)
    a77e:	4907      	ldr	r1, [pc, #28]	; (a79c <flush+0xc8>)
    a780:	4807      	ldr	r0, [pc, #28]	; (a7a0 <flush+0xcc>)
    a782:	f00f f824 	bl	197ce <assert_print>
    a786:	4040      	eors	r0, r0
    a788:	f380 8811 	msr	BASEPRI, r0
    a78c:	f04f 0003 	mov.w	r0, #3
    a790:	df02      	svc	2
    a792:	e7bd      	b.n	a710 <flush+0x3c>
    a794:	200058c8 	.word	0x200058c8
    a798:	0001ee2c 	.word	0x0001ee2c
    a79c:	0001ef00 	.word	0x0001ef00
    a7a0:	0001e920 	.word	0x0001e920
    a7a4:	0001ee7c 	.word	0x0001ee7c

0000a7a8 <aux_sync_incomplete>:
{
    a7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7ac:	4604      	mov	r4, r0
	LL_ASSERT(aux->parent);
    a7ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a7b0:	b14b      	cbz	r3, a7c6 <aux_sync_incomplete+0x1e>
	if (!aux->rx_head) {
    a7b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a7b4:	b1ab      	cbz	r3, a7e2 <aux_sync_incomplete+0x3a>
	return hdr->ref;
    a7b6:	7823      	ldrb	r3, [r4, #0]
	LL_ASSERT(!ull_ref_get(&aux->ull));
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d147      	bne.n	a84c <aux_sync_incomplete+0xa4>
	flush(aux);
    a7bc:	4620      	mov	r0, r4
    a7be:	f7ff ff89 	bl	a6d4 <flush>
}
    a7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(aux->parent);
    a7c6:	f240 43a6 	movw	r3, #1190	; 0x4a6
    a7ca:	4a27      	ldr	r2, [pc, #156]	; (a868 <aux_sync_incomplete+0xc0>)
    a7cc:	4927      	ldr	r1, [pc, #156]	; (a86c <aux_sync_incomplete+0xc4>)
    a7ce:	4828      	ldr	r0, [pc, #160]	; (a870 <aux_sync_incomplete+0xc8>)
    a7d0:	f00e fffd 	bl	197ce <assert_print>
    a7d4:	4040      	eors	r0, r0
    a7d6:	f380 8811 	msr	BASEPRI, r0
    a7da:	f04f 0003 	mov.w	r0, #3
    a7de:	df02      	svc	2
    a7e0:	e7e7      	b.n	a7b2 <aux_sync_incomplete+0xa>
		lll = aux->parent;
    a7e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
		LL_ASSERT(lll);
    a7e4:	b1b6      	cbz	r6, a814 <aux_sync_incomplete+0x6c>
		sync = HDR_LLL2ULL(lll);
    a7e6:	f8d6 8000 	ldr.w	r8, [r6]
		sync->data_len = 0U;
    a7ea:	2300      	movs	r3, #0
    a7ec:	f8a8 30b8 	strh.w	r3, [r8, #184]	; 0xb8
		rx = aux->rx_incomplete;
    a7f0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		LL_ASSERT(rx);
    a7f2:	b1ed      	cbz	r5, a830 <aux_sync_incomplete+0x88>
		aux->rx_incomplete = NULL;
    a7f4:	2700      	movs	r7, #0
    a7f6:	63a7      	str	r7, [r4, #56]	; 0x38
		rx->type = NODE_RX_TYPE_SYNC_REPORT;
    a7f8:	230d      	movs	r3, #13
    a7fa:	712b      	strb	r3, [r5, #4]
		rx->handle = ull_sync_handle_get(sync);
    a7fc:	4640      	mov	r0, r8
    a7fe:	f000 fc3b 	bl	b078 <ull_sync_handle_get>
    a802:	80e8      	strh	r0, [r5, #6]
		rx->rx_ftr.param = lll;
    a804:	60ae      	str	r6, [r5, #8]
		rx->rx_ftr.aux_failed = 1U;
    a806:	7eeb      	ldrb	r3, [r5, #27]
    a808:	f043 0310 	orr.w	r3, r3, #16
    a80c:	76eb      	strb	r3, [r5, #27]
		rx->rx_ftr.extra = NULL;
    a80e:	60ef      	str	r7, [r5, #12]
		aux->rx_head = rx;
    a810:	62e5      	str	r5, [r4, #44]	; 0x2c
    a812:	e7d0      	b.n	a7b6 <aux_sync_incomplete+0xe>
		LL_ASSERT(lll);
    a814:	f240 43b2 	movw	r3, #1202	; 0x4b2
    a818:	4a13      	ldr	r2, [pc, #76]	; (a868 <aux_sync_incomplete+0xc0>)
    a81a:	4916      	ldr	r1, [pc, #88]	; (a874 <aux_sync_incomplete+0xcc>)
    a81c:	4814      	ldr	r0, [pc, #80]	; (a870 <aux_sync_incomplete+0xc8>)
    a81e:	f00e ffd6 	bl	197ce <assert_print>
    a822:	4040      	eors	r0, r0
    a824:	f380 8811 	msr	BASEPRI, r0
    a828:	f04f 0003 	mov.w	r0, #3
    a82c:	df02      	svc	2
    a82e:	e7da      	b.n	a7e6 <aux_sync_incomplete+0x3e>
		LL_ASSERT(rx);
    a830:	f240 43ba 	movw	r3, #1210	; 0x4ba
    a834:	4a0c      	ldr	r2, [pc, #48]	; (a868 <aux_sync_incomplete+0xc0>)
    a836:	4910      	ldr	r1, [pc, #64]	; (a878 <aux_sync_incomplete+0xd0>)
    a838:	480d      	ldr	r0, [pc, #52]	; (a870 <aux_sync_incomplete+0xc8>)
    a83a:	f00e ffc8 	bl	197ce <assert_print>
    a83e:	4040      	eors	r0, r0
    a840:	f380 8811 	msr	BASEPRI, r0
    a844:	f04f 0003 	mov.w	r0, #3
    a848:	df02      	svc	2
    a84a:	e7d3      	b.n	a7f4 <aux_sync_incomplete+0x4c>
	LL_ASSERT(!ull_ref_get(&aux->ull));
    a84c:	f240 43ce 	movw	r3, #1230	; 0x4ce
    a850:	4a05      	ldr	r2, [pc, #20]	; (a868 <aux_sync_incomplete+0xc0>)
    a852:	490a      	ldr	r1, [pc, #40]	; (a87c <aux_sync_incomplete+0xd4>)
    a854:	4806      	ldr	r0, [pc, #24]	; (a870 <aux_sync_incomplete+0xc8>)
    a856:	f00e ffba 	bl	197ce <assert_print>
    a85a:	4040      	eors	r0, r0
    a85c:	f380 8811 	msr	BASEPRI, r0
    a860:	f04f 0003 	mov.w	r0, #3
    a864:	df02      	svc	2
    a866:	e7a9      	b.n	a7bc <aux_sync_incomplete+0x14>
    a868:	0001ee2c 	.word	0x0001ee2c
    a86c:	0001ef00 	.word	0x0001ef00
    a870:	0001e920 	.word	0x0001e920
    a874:	0001eea0 	.word	0x0001eea0
    a878:	0001ecc8 	.word	0x0001ecc8
    a87c:	0001eea4 	.word	0x0001eea4

0000a880 <flush_safe>:
{
    a880:	b510      	push	{r4, lr}
    a882:	4604      	mov	r4, r0
	LL_ASSERT(aux->parent);
    a884:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a886:	b1c3      	cbz	r3, a8ba <flush_safe+0x3a>
    a888:	7823      	ldrb	r3, [r4, #0]
	if (ref == 0U) {
    a88a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a88e:	b313      	cbz	r3, a8d6 <flush_safe+0x56>
		LL_ASSERT(ref < 2U);
    a890:	2a01      	cmp	r2, #1
    a892:	d824      	bhi.n	a8de <flush_safe+0x5e>
		LL_ASSERT(!hdr->disabled_cb);
    a894:	6963      	ldr	r3, [r4, #20]
    a896:	b163      	cbz	r3, a8b2 <flush_safe+0x32>
    a898:	f240 434c 	movw	r3, #1100	; 0x44c
    a89c:	4a17      	ldr	r2, [pc, #92]	; (a8fc <flush_safe+0x7c>)
    a89e:	4918      	ldr	r1, [pc, #96]	; (a900 <flush_safe+0x80>)
    a8a0:	4818      	ldr	r0, [pc, #96]	; (a904 <flush_safe+0x84>)
    a8a2:	f00e ff94 	bl	197ce <assert_print>
    a8a6:	4040      	eors	r0, r0
    a8a8:	f380 8811 	msr	BASEPRI, r0
    a8ac:	f04f 0003 	mov.w	r0, #3
    a8b0:	df02      	svc	2
		hdr->disabled_param = aux;
    a8b2:	61a4      	str	r4, [r4, #24]
		hdr->disabled_cb = done_disabled_cb;
    a8b4:	4b14      	ldr	r3, [pc, #80]	; (a908 <flush_safe+0x88>)
    a8b6:	6163      	str	r3, [r4, #20]
}
    a8b8:	bd10      	pop	{r4, pc}
	LL_ASSERT(aux->parent);
    a8ba:	f240 4336 	movw	r3, #1078	; 0x436
    a8be:	4a0f      	ldr	r2, [pc, #60]	; (a8fc <flush_safe+0x7c>)
    a8c0:	4912      	ldr	r1, [pc, #72]	; (a90c <flush_safe+0x8c>)
    a8c2:	4810      	ldr	r0, [pc, #64]	; (a904 <flush_safe+0x84>)
    a8c4:	f00e ff83 	bl	197ce <assert_print>
    a8c8:	4040      	eors	r0, r0
    a8ca:	f380 8811 	msr	BASEPRI, r0
    a8ce:	f04f 0003 	mov.w	r0, #3
    a8d2:	df02      	svc	2
    a8d4:	e7d8      	b.n	a888 <flush_safe+0x8>
		flush(aux);
    a8d6:	4620      	mov	r0, r4
    a8d8:	f7ff fefc 	bl	a6d4 <flush>
    a8dc:	e7ec      	b.n	a8b8 <flush_safe+0x38>
		LL_ASSERT(ref < 2U);
    a8de:	f240 434a 	movw	r3, #1098	; 0x44a
    a8e2:	4a06      	ldr	r2, [pc, #24]	; (a8fc <flush_safe+0x7c>)
    a8e4:	490a      	ldr	r1, [pc, #40]	; (a910 <flush_safe+0x90>)
    a8e6:	4807      	ldr	r0, [pc, #28]	; (a904 <flush_safe+0x84>)
    a8e8:	f00e ff71 	bl	197ce <assert_print>
    a8ec:	4040      	eors	r0, r0
    a8ee:	f380 8811 	msr	BASEPRI, r0
    a8f2:	f04f 0003 	mov.w	r0, #3
    a8f6:	df02      	svc	2
    a8f8:	e7cc      	b.n	a894 <flush_safe+0x14>
    a8fa:	bf00      	nop
    a8fc:	0001ee2c 	.word	0x0001ee2c
    a900:	0001edbc 	.word	0x0001edbc
    a904:	0001e920 	.word	0x0001e920
    a908:	0000a915 	.word	0x0000a915
    a90c:	0001ef00 	.word	0x0001ef00
    a910:	0001eebc 	.word	0x0001eebc

0000a914 <done_disabled_cb>:
{
    a914:	b510      	push	{r4, lr}
    a916:	4604      	mov	r4, r0
	LL_ASSERT(aux->parent);
    a918:	6a83      	ldr	r3, [r0, #40]	; 0x28
    a91a:	b11b      	cbz	r3, a924 <done_disabled_cb+0x10>
	flush(aux);
    a91c:	4620      	mov	r0, r4
    a91e:	f7ff fed9 	bl	a6d4 <flush>
}
    a922:	bd10      	pop	{r4, pc}
	LL_ASSERT(aux->parent);
    a924:	f240 432a 	movw	r3, #1066	; 0x42a
    a928:	4a05      	ldr	r2, [pc, #20]	; (a940 <done_disabled_cb+0x2c>)
    a92a:	4906      	ldr	r1, [pc, #24]	; (a944 <done_disabled_cb+0x30>)
    a92c:	4806      	ldr	r0, [pc, #24]	; (a948 <done_disabled_cb+0x34>)
    a92e:	f00e ff4e 	bl	197ce <assert_print>
    a932:	4040      	eors	r0, r0
    a934:	f380 8811 	msr	BASEPRI, r0
    a938:	f04f 0003 	mov.w	r0, #3
    a93c:	df02      	svc	2
    a93e:	e7ed      	b.n	a91c <done_disabled_cb+0x8>
    a940:	0001ee2c 	.word	0x0001ee2c
    a944:	0001ef00 	.word	0x0001ef00
    a948:	0001e920 	.word	0x0001e920

0000a94c <ull_scan_aux_set_get>:
	if (handle >= CONFIG_BT_CTLR_SCAN_AUX_SET) {
    a94c:	b928      	cbnz	r0, a95a <ull_scan_aux_set_get+0xe>
	return &ll_scan_aux_pool[handle];
    a94e:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    a952:	4803      	ldr	r0, [pc, #12]	; (a960 <ull_scan_aux_set_get+0x14>)
    a954:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    a958:	4770      	bx	lr
		return NULL;
    a95a:	2000      	movs	r0, #0
}
    a95c:	4770      	bx	lr
    a95e:	bf00      	nop
    a960:	2000587c 	.word	0x2000587c

0000a964 <ull_scan_aux_lll_handle_get>:
{
    a964:	b508      	push	{r3, lr}
	return mem_index_get(aux, ll_scan_aux_pool,
    a966:	223c      	movs	r2, #60	; 0x3c
    a968:	4902      	ldr	r1, [pc, #8]	; (a974 <ull_scan_aux_lll_handle_get+0x10>)
    a96a:	6800      	ldr	r0, [r0, #0]
    a96c:	f00f fbf8 	bl	1a160 <mem_index_get>
}
    a970:	b2c0      	uxtb	r0, r0
    a972:	bd08      	pop	{r3, pc}
    a974:	2000587c 	.word	0x2000587c

0000a978 <ull_scan_aux_lll_parent_get>:
{
    a978:	b570      	push	{r4, r5, r6, lr}
	aux = HDR_LLL2ULL(lll);
    a97a:	6804      	ldr	r4, [r0, #0]
	if (is_lll_scan) {
    a97c:	b149      	cbz	r1, a992 <ull_scan_aux_lll_parent_get+0x1a>
    a97e:	460e      	mov	r6, r1
		lll = aux->parent;
    a980:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		LL_ASSERT(lll);
    a982:	b145      	cbz	r5, a996 <ull_scan_aux_lll_parent_get+0x1e>
		*is_lll_scan = !!ull_scan_is_valid_get(scan);
    a984:	6828      	ldr	r0, [r5, #0]
    a986:	f7ff fdc5 	bl	a514 <ull_scan_is_valid_get>
    a98a:	3800      	subs	r0, #0
    a98c:	bf18      	it	ne
    a98e:	2001      	movne	r0, #1
    a990:	7030      	strb	r0, [r6, #0]
}
    a992:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a994:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(lll);
    a996:	f44f 734f 	mov.w	r3, #828	; 0x33c
    a99a:	4a06      	ldr	r2, [pc, #24]	; (a9b4 <ull_scan_aux_lll_parent_get+0x3c>)
    a99c:	4906      	ldr	r1, [pc, #24]	; (a9b8 <ull_scan_aux_lll_parent_get+0x40>)
    a99e:	4807      	ldr	r0, [pc, #28]	; (a9bc <ull_scan_aux_lll_parent_get+0x44>)
    a9a0:	f00e ff15 	bl	197ce <assert_print>
    a9a4:	4040      	eors	r0, r0
    a9a6:	f380 8811 	msr	BASEPRI, r0
    a9aa:	f04f 0003 	mov.w	r0, #3
    a9ae:	df02      	svc	2
    a9b0:	e7e8      	b.n	a984 <ull_scan_aux_lll_parent_get+0xc>
    a9b2:	bf00      	nop
    a9b4:	0001ee2c 	.word	0x0001ee2c
    a9b8:	0001eea0 	.word	0x0001eea0
    a9bc:	0001e920 	.word	0x0001e920

0000a9c0 <ull_scan_aux_is_valid_get>:
	if (((uint8_t *)aux < (uint8_t *)ll_scan_aux_pool) ||
    a9c0:	4b04      	ldr	r3, [pc, #16]	; (a9d4 <ull_scan_aux_is_valid_get+0x14>)
    a9c2:	4298      	cmp	r0, r3
    a9c4:	d301      	bcc.n	a9ca <ull_scan_aux_is_valid_get+0xa>
    a9c6:	d802      	bhi.n	a9ce <ull_scan_aux_is_valid_get+0xe>
    a9c8:	4770      	bx	lr
		return NULL;
    a9ca:	2000      	movs	r0, #0
    a9cc:	4770      	bx	lr
    a9ce:	2000      	movs	r0, #0
}
    a9d0:	4770      	bx	lr
    a9d2:	bf00      	nop
    a9d4:	2000587c 	.word	0x2000587c

0000a9d8 <ull_scan_aux_done>:
{
    a9d8:	b538      	push	{r3, r4, r5, lr}
	aux = CONTAINER_OF(done->param, struct ll_scan_aux_set, ull);
    a9da:	6a04      	ldr	r4, [r0, #32]
	    !ull_scan_aux_is_valid_get(aux)) {
    a9dc:	4620      	mov	r0, r4
    a9de:	f7ff ffef 	bl	a9c0 <ull_scan_aux_is_valid_get>
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) &&
    a9e2:	b188      	cbz	r0, aa08 <ull_scan_aux_done+0x30>
		lll = aux->parent;
    a9e4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		LL_ASSERT(lll);
    a9e6:	2d00      	cmp	r5, #0
    a9e8:	d03b      	beq.n	aa62 <ull_scan_aux_done+0x8a>
		scan = HDR_LLL2ULL(lll);
    a9ea:	682d      	ldr	r5, [r5, #0]
		LL_ASSERT(ull_scan_is_valid_get(scan));
    a9ec:	4628      	mov	r0, r5
    a9ee:	f7ff fd91 	bl	a514 <ull_scan_is_valid_get>
    a9f2:	2800      	cmp	r0, #0
    a9f4:	d043      	beq.n	aa7e <ull_scan_aux_done+0xa6>
		if (unlikely(scan->is_stop)) {
    a9f6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
    a9fa:	f013 0f01 	tst.w	r3, #1
    a9fe:	d102      	bne.n	aa06 <ull_scan_aux_done+0x2e>
	flush(aux);
    aa00:	4620      	mov	r0, r4
    aa02:	f7ff fe67 	bl	a6d4 <flush>
}
    aa06:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(ull_sync_is_valid_get(sync));
    aa08:	4620      	mov	r0, r4
    aa0a:	f000 fb29 	bl	b060 <ull_sync_is_valid_get>
    aa0e:	b1d0      	cbz	r0, aa46 <ull_scan_aux_done+0x6e>
		if (unlikely(sync->is_stop) || !sync->lll.lll_aux) {
    aa10:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    aa14:	f013 0f08 	tst.w	r3, #8
    aa18:	d1f5      	bne.n	aa06 <ull_scan_aux_done+0x2e>
    aa1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	d0f2      	beq.n	aa06 <ull_scan_aux_done+0x2e>
		aux = HDR_LLL2ULL(sync->lll.lll_aux);
    aa20:	6da3      	ldr	r3, [r4, #88]	; 0x58
    aa22:	681c      	ldr	r4, [r3, #0]
		LL_ASSERT(aux->parent);
    aa24:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    aa26:	2b00      	cmp	r3, #0
    aa28:	d1ea      	bne.n	aa00 <ull_scan_aux_done+0x28>
    aa2a:	f240 330a 	movw	r3, #778	; 0x30a
    aa2e:	4a1b      	ldr	r2, [pc, #108]	; (aa9c <ull_scan_aux_done+0xc4>)
    aa30:	491b      	ldr	r1, [pc, #108]	; (aaa0 <ull_scan_aux_done+0xc8>)
    aa32:	481c      	ldr	r0, [pc, #112]	; (aaa4 <ull_scan_aux_done+0xcc>)
    aa34:	f00e fecb 	bl	197ce <assert_print>
    aa38:	4040      	eors	r0, r0
    aa3a:	f380 8811 	msr	BASEPRI, r0
    aa3e:	f04f 0003 	mov.w	r0, #3
    aa42:	df02      	svc	2
    aa44:	e7dc      	b.n	aa00 <ull_scan_aux_done+0x28>
		LL_ASSERT(ull_sync_is_valid_get(sync));
    aa46:	f240 3302 	movw	r3, #770	; 0x302
    aa4a:	4a14      	ldr	r2, [pc, #80]	; (aa9c <ull_scan_aux_done+0xc4>)
    aa4c:	4916      	ldr	r1, [pc, #88]	; (aaa8 <ull_scan_aux_done+0xd0>)
    aa4e:	4815      	ldr	r0, [pc, #84]	; (aaa4 <ull_scan_aux_done+0xcc>)
    aa50:	f00e febd 	bl	197ce <assert_print>
    aa54:	4040      	eors	r0, r0
    aa56:	f380 8811 	msr	BASEPRI, r0
    aa5a:	f04f 0003 	mov.w	r0, #3
    aa5e:	df02      	svc	2
    aa60:	e7d6      	b.n	aa10 <ull_scan_aux_done+0x38>
		LL_ASSERT(lll);
    aa62:	f44f 7344 	mov.w	r3, #784	; 0x310
    aa66:	4a0d      	ldr	r2, [pc, #52]	; (aa9c <ull_scan_aux_done+0xc4>)
    aa68:	4910      	ldr	r1, [pc, #64]	; (aaac <ull_scan_aux_done+0xd4>)
    aa6a:	480e      	ldr	r0, [pc, #56]	; (aaa4 <ull_scan_aux_done+0xcc>)
    aa6c:	f00e feaf 	bl	197ce <assert_print>
    aa70:	4040      	eors	r0, r0
    aa72:	f380 8811 	msr	BASEPRI, r0
    aa76:	f04f 0003 	mov.w	r0, #3
    aa7a:	df02      	svc	2
    aa7c:	e7b5      	b.n	a9ea <ull_scan_aux_done+0x12>
		LL_ASSERT(ull_scan_is_valid_get(scan));
    aa7e:	f240 3313 	movw	r3, #787	; 0x313
    aa82:	4a06      	ldr	r2, [pc, #24]	; (aa9c <ull_scan_aux_done+0xc4>)
    aa84:	490a      	ldr	r1, [pc, #40]	; (aab0 <ull_scan_aux_done+0xd8>)
    aa86:	4807      	ldr	r0, [pc, #28]	; (aaa4 <ull_scan_aux_done+0xcc>)
    aa88:	f00e fea1 	bl	197ce <assert_print>
    aa8c:	4040      	eors	r0, r0
    aa8e:	f380 8811 	msr	BASEPRI, r0
    aa92:	f04f 0003 	mov.w	r0, #3
    aa96:	df02      	svc	2
    aa98:	e7ad      	b.n	a9f6 <ull_scan_aux_done+0x1e>
    aa9a:	bf00      	nop
    aa9c:	0001ee2c 	.word	0x0001ee2c
    aaa0:	0001ef00 	.word	0x0001ef00
    aaa4:	0001e920 	.word	0x0001e920
    aaa8:	0001efa8 	.word	0x0001efa8
    aaac:	0001eea0 	.word	0x0001eea0
    aab0:	0001efc4 	.word	0x0001efc4

0000aab4 <ull_scan_aux_release>:
{
    aab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aab8:	4605      	mov	r5, r0
    aaba:	460c      	mov	r4, r1
	param_ull = HDR_LLL2ULL(rx->rx_ftr.param);
    aabc:	688b      	ldr	r3, [r1, #8]
    aabe:	681f      	ldr	r7, [r3, #0]
	if (ull_scan_is_valid_get(param_ull)) {
    aac0:	4638      	mov	r0, r7
    aac2:	f7ff fd27 	bl	a514 <ull_scan_is_valid_get>
    aac6:	b310      	cbz	r0, ab0e <ull_scan_aux_release+0x5a>
		rx->type = NODE_RX_TYPE_RELEASE;
    aac8:	2301      	movs	r3, #1
    aaca:	7123      	strb	r3, [r4, #4]
		lll = rx->rx_ftr.param;
    aacc:	68a3      	ldr	r3, [r4, #8]
		lll_aux = lll->lll_aux;
    aace:	689e      	ldr	r6, [r3, #8]
	if (lll_aux) {
    aad0:	b1ae      	cbz	r6, aafe <ull_scan_aux_release+0x4a>
		aux = HDR_LLL2ULL(lll_aux);
    aad2:	6837      	ldr	r7, [r6, #0]
		lll = aux->parent;
    aad4:	6abe      	ldr	r6, [r7, #40]	; 0x28
		LL_ASSERT(lll);
    aad6:	2e00      	cmp	r6, #0
    aad8:	d042      	beq.n	ab60 <ull_scan_aux_release+0xac>
		scan = ull_scan_is_valid_get(scan);
    aada:	6830      	ldr	r0, [r6, #0]
    aadc:	f7ff fd1a 	bl	a514 <ull_scan_is_valid_get>
		if (scan) {
    aae0:	4602      	mov	r2, r0
    aae2:	2800      	cmp	r0, #0
    aae4:	d04a      	beq.n	ab7c <ull_scan_aux_release+0xc8>
			is_stop = scan->is_stop;
    aae6:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
    aaea:	f003 0301 	and.w	r3, r3, #1
		if (!is_stop) {
    aaee:	2b00      	cmp	r3, #0
    aaf0:	d158      	bne.n	aba4 <ull_scan_aux_release+0xf0>
			LL_ASSERT(aux->parent);
    aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	d047      	beq.n	ab88 <ull_scan_aux_release+0xd4>
			flush_safe(aux);
    aaf8:	4638      	mov	r0, r7
    aafa:	f7ff fec1 	bl	a880 <flush_safe>
	ll_rx_put(link, rx);
    aafe:	4621      	mov	r1, r4
    ab00:	4628      	mov	r0, r5
    ab02:	f7fe fd71 	bl	95e8 <ll_rx_put>
	ll_rx_sched();
    ab06:	f7fe fd77 	bl	95f8 <ll_rx_sched>
}
    ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   ull_scan_aux_is_valid_get(param_ull)) {
    ab0e:	4638      	mov	r0, r7
    ab10:	f7ff ff56 	bl	a9c0 <ull_scan_aux_is_valid_get>
	} else if (!IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) ||
    ab14:	b118      	cbz	r0, ab1e <ull_scan_aux_release+0x6a>
		rx->type = NODE_RX_TYPE_RELEASE;
    ab16:	2301      	movs	r3, #1
    ab18:	7123      	strb	r3, [r4, #4]
		lll_aux = rx->rx_ftr.param;
    ab1a:	68a6      	ldr	r6, [r4, #8]
    ab1c:	e7d8      	b.n	aad0 <ull_scan_aux_release+0x1c>
	} else if (ull_sync_is_valid_get(param_ull)) {
    ab1e:	4638      	mov	r0, r7
    ab20:	f000 fa9e 	bl	b060 <ull_sync_is_valid_get>
    ab24:	b170      	cbz	r0, ab44 <ull_scan_aux_release+0x90>
		sync->data_len = 0U;
    ab26:	f04f 0800 	mov.w	r8, #0
    ab2a:	f8a7 80b8 	strh.w	r8, [r7, #184]	; 0xb8
		lll = rx->rx_ftr.param;
    ab2e:	68a3      	ldr	r3, [r4, #8]
		lll_aux = lll->lll_aux;
    ab30:	6bde      	ldr	r6, [r3, #60]	; 0x3c
		rx->type = NODE_RX_TYPE_SYNC_REPORT;
    ab32:	230d      	movs	r3, #13
    ab34:	7123      	strb	r3, [r4, #4]
		rx->handle = ull_sync_handle_get(sync);
    ab36:	4638      	mov	r0, r7
    ab38:	f000 fa9e 	bl	b078 <ull_sync_handle_get>
    ab3c:	80e0      	strh	r0, [r4, #6]
		rx->rx_ftr.extra = NULL;
    ab3e:	f8c4 800c 	str.w	r8, [r4, #12]
    ab42:	e7c5      	b.n	aad0 <ull_scan_aux_release+0x1c>
		LL_ASSERT(0);
    ab44:	f44f 7360 	mov.w	r3, #896	; 0x380
    ab48:	4a1b      	ldr	r2, [pc, #108]	; (abb8 <ull_scan_aux_release+0x104>)
    ab4a:	491c      	ldr	r1, [pc, #112]	; (abbc <ull_scan_aux_release+0x108>)
    ab4c:	481c      	ldr	r0, [pc, #112]	; (abc0 <ull_scan_aux_release+0x10c>)
    ab4e:	f00e fe3e 	bl	197ce <assert_print>
    ab52:	4040      	eors	r0, r0
    ab54:	f380 8811 	msr	BASEPRI, r0
    ab58:	f04f 0003 	mov.w	r0, #3
    ab5c:	df02      	svc	2
	if (lll_aux) {
    ab5e:	e7ce      	b.n	aafe <ull_scan_aux_release+0x4a>
		LL_ASSERT(lll);
    ab60:	f44f 7363 	mov.w	r3, #908	; 0x38c
    ab64:	4a14      	ldr	r2, [pc, #80]	; (abb8 <ull_scan_aux_release+0x104>)
    ab66:	4917      	ldr	r1, [pc, #92]	; (abc4 <ull_scan_aux_release+0x110>)
    ab68:	4815      	ldr	r0, [pc, #84]	; (abc0 <ull_scan_aux_release+0x10c>)
    ab6a:	f00e fe30 	bl	197ce <assert_print>
    ab6e:	4040      	eors	r0, r0
    ab70:	f380 8811 	msr	BASEPRI, r0
    ab74:	f04f 0003 	mov.w	r0, #3
    ab78:	df02      	svc	2
    ab7a:	e7ae      	b.n	aada <ull_scan_aux_release+0x26>
			sync = HDR_LLL2ULL(sync_lll);
    ab7c:	6833      	ldr	r3, [r6, #0]
			is_stop = sync->is_stop;
    ab7e:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    ab82:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ab86:	e7b2      	b.n	aaee <ull_scan_aux_release+0x3a>
			LL_ASSERT(aux->parent);
    ab88:	f44f 7367 	mov.w	r3, #924	; 0x39c
    ab8c:	4a0a      	ldr	r2, [pc, #40]	; (abb8 <ull_scan_aux_release+0x104>)
    ab8e:	490e      	ldr	r1, [pc, #56]	; (abc8 <ull_scan_aux_release+0x114>)
    ab90:	480b      	ldr	r0, [pc, #44]	; (abc0 <ull_scan_aux_release+0x10c>)
    ab92:	f00e fe1c 	bl	197ce <assert_print>
    ab96:	4040      	eors	r0, r0
    ab98:	f380 8811 	msr	BASEPRI, r0
    ab9c:	f04f 0003 	mov.w	r0, #3
    aba0:	df02      	svc	2
    aba2:	e7a9      	b.n	aaf8 <ull_scan_aux_release+0x44>
		} else if (!scan) {
    aba4:	2a00      	cmp	r2, #0
    aba6:	d1aa      	bne.n	aafe <ull_scan_aux_release+0x4a>
			rx->link = link;
    aba8:	6025      	str	r5, [r4, #0]
			if (aux->rx_last) {
    abaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    abac:	b113      	cbz	r3, abb4 <ull_scan_aux_release+0x100>
				aux->rx_last->rx_ftr.extra = rx;
    abae:	60dc      	str	r4, [r3, #12]
			aux->rx_last = rx;
    abb0:	633c      	str	r4, [r7, #48]	; 0x30
			return;
    abb2:	e7aa      	b.n	ab0a <ull_scan_aux_release+0x56>
				aux->rx_head = rx;
    abb4:	62fc      	str	r4, [r7, #44]	; 0x2c
    abb6:	e7fb      	b.n	abb0 <ull_scan_aux_release+0xfc>
    abb8:	0001ee2c 	.word	0x0001ee2c
    abbc:	0001ead8 	.word	0x0001ead8
    abc0:	0001e920 	.word	0x0001e920
    abc4:	0001eea0 	.word	0x0001eea0
    abc8:	0001ef00 	.word	0x0001ef00

0000abcc <ull_scan_aux_stop>:
{
    abcc:	b538      	push	{r3, r4, r5, lr}
    abce:	4604      	mov	r4, r0
	return mem_index_get(aux, ll_scan_aux_pool,
    abd0:	223c      	movs	r2, #60	; 0x3c
    abd2:	492a      	ldr	r1, [pc, #168]	; (ac7c <ull_scan_aux_stop+0xb0>)
    abd4:	f00f fac4 	bl	1a160 <mem_index_get>
    abd8:	b2c0      	uxtb	r0, r0
					aux, &aux->lll);
    abda:	f104 051c 	add.w	r5, r4, #28
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_AUX_BASE + aux_handle,
    abde:	3003      	adds	r0, #3
    abe0:	462a      	mov	r2, r5
    abe2:	4621      	mov	r1, r4
    abe4:	b2c0      	uxtb	r0, r0
    abe6:	f7fe fe3d 	bl	9864 <ull_ticker_stop_with_mark>
	if (err && (err != -EALREADY)) {
    abea:	4603      	mov	r3, r0
    abec:	b110      	cbz	r0, abf4 <ull_scan_aux_stop+0x28>
    abee:	f110 0f78 	cmn.w	r0, #120	; 0x78
    abf2:	d114      	bne.n	ac1e <ull_scan_aux_stop+0x52>
	if (err == -EALREADY) {
    abf4:	f113 0f78 	cmn.w	r3, #120	; 0x78
    abf8:	d013      	beq.n	ac22 <ull_scan_aux_stop+0x56>
		lll = aux->parent;
    abfa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
		LL_ASSERT(lll);
    abfc:	b1ed      	cbz	r5, ac3a <ull_scan_aux_stop+0x6e>
		scan = ull_scan_is_valid_get(scan);
    abfe:	6828      	ldr	r0, [r5, #0]
    ac00:	f7ff fc88 	bl	a514 <ull_scan_is_valid_get>
		if (scan) {
    ac04:	b338      	cbz	r0, ac56 <ull_scan_aux_stop+0x8a>
			mfy.fp = flush;
    ac06:	4b1e      	ldr	r3, [pc, #120]	; (ac80 <ull_scan_aux_stop+0xb4>)
    ac08:	4a1e      	ldr	r2, [pc, #120]	; (ac84 <ull_scan_aux_stop+0xb8>)
    ac0a:	60da      	str	r2, [r3, #12]
	mfy.param = aux;
    ac0c:	4b1c      	ldr	r3, [pc, #112]	; (ac80 <ull_scan_aux_stop+0xb4>)
    ac0e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
    ac10:	2200      	movs	r2, #0
    ac12:	2101      	movs	r1, #1
    ac14:	2003      	movs	r0, #3
    ac16:	f7fc f99d 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ac1a:	bb00      	cbnz	r0, ac5e <ull_scan_aux_stop+0x92>
	return 0;
    ac1c:	2300      	movs	r3, #0
}
    ac1e:	4618      	mov	r0, r3
    ac20:	bd38      	pop	{r3, r4, r5, pc}
		err = ull_disable(&aux->lll);
    ac22:	4628      	mov	r0, r5
    ac24:	f7fe fdde 	bl	97e4 <ull_disable>
		if (err && (err != -EALREADY)) {
    ac28:	4603      	mov	r3, r0
    ac2a:	b110      	cbz	r0, ac32 <ull_scan_aux_stop+0x66>
    ac2c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    ac30:	d1f5      	bne.n	ac1e <ull_scan_aux_stop+0x52>
		mfy.fp = flush;
    ac32:	4b13      	ldr	r3, [pc, #76]	; (ac80 <ull_scan_aux_stop+0xb4>)
    ac34:	4a13      	ldr	r2, [pc, #76]	; (ac84 <ull_scan_aux_stop+0xb8>)
    ac36:	60da      	str	r2, [r3, #12]
    ac38:	e7e8      	b.n	ac0c <ull_scan_aux_stop+0x40>
		LL_ASSERT(lll);
    ac3a:	f44f 7376 	mov.w	r3, #984	; 0x3d8
    ac3e:	4a12      	ldr	r2, [pc, #72]	; (ac88 <ull_scan_aux_stop+0xbc>)
    ac40:	4912      	ldr	r1, [pc, #72]	; (ac8c <ull_scan_aux_stop+0xc0>)
    ac42:	4813      	ldr	r0, [pc, #76]	; (ac90 <ull_scan_aux_stop+0xc4>)
    ac44:	f00e fdc3 	bl	197ce <assert_print>
    ac48:	4040      	eors	r0, r0
    ac4a:	f380 8811 	msr	BASEPRI, r0
    ac4e:	f04f 0003 	mov.w	r0, #3
    ac52:	df02      	svc	2
    ac54:	e7d3      	b.n	abfe <ull_scan_aux_stop+0x32>
			mfy.fp = aux_sync_incomplete;
    ac56:	4b0a      	ldr	r3, [pc, #40]	; (ac80 <ull_scan_aux_stop+0xb4>)
    ac58:	4a0e      	ldr	r2, [pc, #56]	; (ac94 <ull_scan_aux_stop+0xc8>)
    ac5a:	60da      	str	r2, [r3, #12]
    ac5c:	e7d6      	b.n	ac0c <ull_scan_aux_stop+0x40>
	LL_ASSERT(!ret);
    ac5e:	f240 33ed 	movw	r3, #1005	; 0x3ed
    ac62:	4a09      	ldr	r2, [pc, #36]	; (ac88 <ull_scan_aux_stop+0xbc>)
    ac64:	490c      	ldr	r1, [pc, #48]	; (ac98 <ull_scan_aux_stop+0xcc>)
    ac66:	480a      	ldr	r0, [pc, #40]	; (ac90 <ull_scan_aux_stop+0xc4>)
    ac68:	f00e fdb1 	bl	197ce <assert_print>
    ac6c:	4040      	eors	r0, r0
    ac6e:	f380 8811 	msr	BASEPRI, r0
    ac72:	f04f 0003 	mov.w	r0, #3
    ac76:	df02      	svc	2
	return 0;
    ac78:	2300      	movs	r3, #0
    ac7a:	e7d0      	b.n	ac1e <ull_scan_aux_stop+0x52>
    ac7c:	2000587c 	.word	0x2000587c
    ac80:	20000734 	.word	0x20000734
    ac84:	0000a6d5 	.word	0x0000a6d5
    ac88:	0001ee2c 	.word	0x0001ee2c
    ac8c:	0001eea0 	.word	0x0001eea0
    ac90:	0001e920 	.word	0x0001e920
    ac94:	0000a7a9 	.word	0x0000a7a9
    ac98:	0001eccc 	.word	0x0001eccc

0000ac9c <ticker_start_op_cb>:
}

static void ticker_start_op_cb(uint32_t status, void *param)
{
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ac9c:	b900      	cbnz	r0, aca0 <ticker_start_op_cb+0x4>
    ac9e:	4770      	bx	lr
{
    aca0:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    aca2:	f240 43af 	movw	r3, #1199	; 0x4af
    aca6:	4a06      	ldr	r2, [pc, #24]	; (acc0 <ticker_start_op_cb+0x24>)
    aca8:	4906      	ldr	r1, [pc, #24]	; (acc4 <ticker_start_op_cb+0x28>)
    acaa:	4807      	ldr	r0, [pc, #28]	; (acc8 <ticker_start_op_cb+0x2c>)
    acac:	f00e fd8f 	bl	197ce <assert_print>
    acb0:	4040      	eors	r0, r0
    acb2:	f380 8811 	msr	BASEPRI, r0
    acb6:	f04f 0003 	mov.w	r0, #3
    acba:	df02      	svc	2
}
    acbc:	bd08      	pop	{r3, pc}
    acbe:	bf00      	nop
    acc0:	0001efe0 	.word	0x0001efe0
    acc4:	0001f020 	.word	0x0001f020
    acc8:	0001e920 	.word	0x0001e920

0000accc <init_reset>:
{
    accc:	b508      	push	{r3, lr}
	mem_init(ll_sync_pool, sizeof(struct ll_sync_set),
    acce:	4b06      	ldr	r3, [pc, #24]	; (ace8 <init_reset+0x1c>)
    acd0:	2201      	movs	r2, #1
    acd2:	21bc      	movs	r1, #188	; 0xbc
    acd4:	4805      	ldr	r0, [pc, #20]	; (acec <init_reset+0x20>)
    acd6:	f00f f9fc 	bl	1a0d2 <mem_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    acda:	2201      	movs	r2, #1
    acdc:	2100      	movs	r1, #0
    acde:	4804      	ldr	r0, [pc, #16]	; (acf0 <init_reset+0x24>)
    ace0:	f012 ffe3 	bl	1dcaa <z_impl_k_sem_init>
}
    ace4:	2000      	movs	r0, #0
    ace6:	bd08      	pop	{r3, pc}
    ace8:	200059c8 	.word	0x200059c8
    acec:	200058e4 	.word	0x200058e4
    acf0:	200059b0 	.word	0x200059b0

0000acf4 <ticker_cb>:
{
    acf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    acf8:	4607      	mov	r7, r0
    acfa:	4616      	mov	r6, r2
    acfc:	461d      	mov	r5, r3
    acfe:	9c07      	ldr	r4, [sp, #28]
	lll = &sync->lll;
    ad00:	f104 081c 	add.w	r8, r4, #28
	lll->is_rx_enabled = sync->rx_enable;
    ad04:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    ad08:	f3c3 0340 	ubfx	r3, r3, #1, #1
    ad0c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    ad10:	f363 0241 	bfi	r2, r3, #1, #1
    ad14:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	return ++hdr->ref;
    ad18:	7821      	ldrb	r1, [r4, #0]
    ad1a:	3101      	adds	r1, #1
    ad1c:	b2c9      	uxtb	r1, r1
    ad1e:	7021      	strb	r1, [r4, #0]
	LL_ASSERT(ref);
    ad20:	b1a9      	cbz	r1, ad4e <ticker_cb+0x5a>
	p.ticks_at_expire = ticks_at_expire;
    ad22:	4919      	ldr	r1, [pc, #100]	; (ad88 <ticker_cb+0x94>)
    ad24:	600f      	str	r7, [r1, #0]
	p.remainder = remainder;
    ad26:	604e      	str	r6, [r1, #4]
	p.lazy = lazy;
    ad28:	810d      	strh	r5, [r1, #8]
	p.force = force;
    ad2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ad2e:	728b      	strb	r3, [r1, #10]
	p.param = lll;
    ad30:	f8c1 800c 	str.w	r8, [r1, #12]
	mfy_lll_prepare.param = &p;
    ad34:	4b15      	ldr	r3, [pc, #84]	; (ad8c <ticker_cb+0x98>)
    ad36:	6099      	str	r1, [r3, #8]
	mfy_lll_prepare.fp = sync->lll_sync_prepare;
    ad38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    ad3c:	60da      	str	r2, [r3, #12]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
    ad3e:	2200      	movs	r2, #0
    ad40:	4611      	mov	r1, r2
    ad42:	2001      	movs	r0, #1
    ad44:	f7fc f906 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    ad48:	b978      	cbnz	r0, ad6a <ticker_cb+0x76>
}
    ad4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(ref);
    ad4e:	f240 4399 	movw	r3, #1177	; 0x499
    ad52:	4a0f      	ldr	r2, [pc, #60]	; (ad90 <ticker_cb+0x9c>)
    ad54:	490f      	ldr	r1, [pc, #60]	; (ad94 <ticker_cb+0xa0>)
    ad56:	4810      	ldr	r0, [pc, #64]	; (ad98 <ticker_cb+0xa4>)
    ad58:	f00e fd39 	bl	197ce <assert_print>
    ad5c:	4040      	eors	r0, r0
    ad5e:	f380 8811 	msr	BASEPRI, r0
    ad62:	f04f 0003 	mov.w	r0, #3
    ad66:	df02      	svc	2
    ad68:	e7db      	b.n	ad22 <ticker_cb+0x2e>
	LL_ASSERT(!ret);
    ad6a:	f240 43a7 	movw	r3, #1191	; 0x4a7
    ad6e:	4a08      	ldr	r2, [pc, #32]	; (ad90 <ticker_cb+0x9c>)
    ad70:	490a      	ldr	r1, [pc, #40]	; (ad9c <ticker_cb+0xa8>)
    ad72:	4809      	ldr	r0, [pc, #36]	; (ad98 <ticker_cb+0xa4>)
    ad74:	f00e fd2b 	bl	197ce <assert_print>
    ad78:	4040      	eors	r0, r0
    ad7a:	f380 8811 	msr	BASEPRI, r0
    ad7e:	f04f 0003 	mov.w	r0, #3
    ad82:	df02      	svc	2
}
    ad84:	e7e1      	b.n	ad4a <ticker_cb+0x56>
    ad86:	bf00      	nop
    ad88:	200059a0 	.word	0x200059a0
    ad8c:	20000784 	.word	0x20000784
    ad90:	0001efe0 	.word	0x0001efe0
    ad94:	0001ee00 	.word	0x0001ee00
    ad98:	0001e920 	.word	0x0001e920
    ad9c:	0001eccc 	.word	0x0001eccc

0000ada0 <ticker_stop_sync_expire_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
		  param == ull_disable_mark_get());
}

static void ticker_stop_sync_expire_op_cb(uint32_t status, void *param)
{
    ada0:	b510      	push	{r4, lr}
    ada2:	460c      	mov	r4, r1
	uint32_t retval;
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, sync_expire};

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ada4:	b940      	cbnz	r0, adb8 <ticker_stop_sync_expire_op_cb+0x18>

	mfy.param = param;
    ada6:	4b12      	ldr	r3, [pc, #72]	; (adf0 <ticker_stop_sync_expire_op_cb+0x50>)
    ada8:	609c      	str	r4, [r3, #8]

	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_ULL_HIGH,
    adaa:	2200      	movs	r2, #0
    adac:	2101      	movs	r1, #1
    adae:	2002      	movs	r0, #2
    adb0:	f7fc f8d0 	bl	6f54 <mayfly_enqueue>
				0, &mfy);
	LL_ASSERT(!retval);
    adb4:	b970      	cbnz	r0, add4 <ticker_stop_sync_expire_op_cb+0x34>
}
    adb6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    adb8:	f240 43be 	movw	r3, #1214	; 0x4be
    adbc:	4a0d      	ldr	r2, [pc, #52]	; (adf4 <ticker_stop_sync_expire_op_cb+0x54>)
    adbe:	490e      	ldr	r1, [pc, #56]	; (adf8 <ticker_stop_sync_expire_op_cb+0x58>)
    adc0:	480e      	ldr	r0, [pc, #56]	; (adfc <ticker_stop_sync_expire_op_cb+0x5c>)
    adc2:	f00e fd04 	bl	197ce <assert_print>
    adc6:	4040      	eors	r0, r0
    adc8:	f380 8811 	msr	BASEPRI, r0
    adcc:	f04f 0003 	mov.w	r0, #3
    add0:	df02      	svc	2
    add2:	e7e8      	b.n	ada6 <ticker_stop_sync_expire_op_cb+0x6>
	LL_ASSERT(!retval);
    add4:	f240 43c4 	movw	r3, #1220	; 0x4c4
    add8:	4a06      	ldr	r2, [pc, #24]	; (adf4 <ticker_stop_sync_expire_op_cb+0x54>)
    adda:	4909      	ldr	r1, [pc, #36]	; (ae00 <ticker_stop_sync_expire_op_cb+0x60>)
    addc:	4807      	ldr	r0, [pc, #28]	; (adfc <ticker_stop_sync_expire_op_cb+0x5c>)
    adde:	f00e fcf6 	bl	197ce <assert_print>
    ade2:	4040      	eors	r0, r0
    ade4:	f380 8811 	msr	BASEPRI, r0
    ade8:	f04f 0003 	mov.w	r0, #3
    adec:	df02      	svc	2
}
    adee:	e7e2      	b.n	adb6 <ticker_stop_sync_expire_op_cb+0x16>
    adf0:	20000764 	.word	0x20000764
    adf4:	0001efe0 	.word	0x0001efe0
    adf8:	0001f020 	.word	0x0001f020
    adfc:	0001e920 	.word	0x0001e920
    ae00:	0001ecf4 	.word	0x0001ecf4

0000ae04 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ae04:	b900      	cbnz	r0, ae08 <ticker_update_op_cb+0x4>
    ae06:	4770      	bx	lr
{
    ae08:	b510      	push	{r4, lr}
    ae0a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ae0c:	f7fe fce4 	bl	97d8 <ull_disable_mark_get>
    ae10:	4284      	cmp	r4, r0
    ae12:	d00c      	beq.n	ae2e <ticker_update_op_cb+0x2a>
    ae14:	f240 43b4 	movw	r3, #1204	; 0x4b4
    ae18:	4a05      	ldr	r2, [pc, #20]	; (ae30 <ticker_update_op_cb+0x2c>)
    ae1a:	4906      	ldr	r1, [pc, #24]	; (ae34 <ticker_update_op_cb+0x30>)
    ae1c:	4806      	ldr	r0, [pc, #24]	; (ae38 <ticker_update_op_cb+0x34>)
    ae1e:	f00e fcd6 	bl	197ce <assert_print>
    ae22:	4040      	eors	r0, r0
    ae24:	f380 8811 	msr	BASEPRI, r0
    ae28:	f04f 0003 	mov.w	r0, #3
    ae2c:	df02      	svc	2
}
    ae2e:	bd10      	pop	{r4, pc}
    ae30:	0001efe0 	.word	0x0001efe0
    ae34:	0001f02c 	.word	0x0001f02c
    ae38:	0001e920 	.word	0x0001e920

0000ae3c <ticker_stop_sync_lost_op_cb>:
	ll_rx_put(rx->hdr.link, rx);
	ll_rx_sched();
}

static void ticker_stop_sync_lost_op_cb(uint32_t status, void *param)
{
    ae3c:	b510      	push	{r4, lr}
    ae3e:	460c      	mov	r4, r1
	static struct mayfly mfy = {0, 0, &link, NULL, sync_lost};

	/* When in race between terminate requested in thread context and
	 * sync lost scenario, do not generate the sync lost node rx from here
	 */
	if (status != TICKER_STATUS_SUCCESS) {
    ae40:	b940      	cbnz	r0, ae54 <ticker_stop_sync_lost_op_cb+0x18>
		LL_ASSERT(param == ull_disable_mark_get());

		return;
	}

	mfy.param = param;
    ae42:	4b14      	ldr	r3, [pc, #80]	; (ae94 <ticker_stop_sync_lost_op_cb+0x58>)
    ae44:	6099      	str	r1, [r3, #8]

	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_ULL_HIGH,
    ae46:	2200      	movs	r2, #0
    ae48:	2101      	movs	r1, #1
    ae4a:	2002      	movs	r0, #2
    ae4c:	f7fc f882 	bl	6f54 <mayfly_enqueue>
				0, &mfy);
	LL_ASSERT(!retval);
    ae50:	b990      	cbnz	r0, ae78 <ticker_stop_sync_lost_op_cb+0x3c>
}
    ae52:	bd10      	pop	{r4, pc}
		LL_ASSERT(param == ull_disable_mark_get());
    ae54:	f7fe fcc0 	bl	97d8 <ull_disable_mark_get>
    ae58:	4284      	cmp	r4, r0
    ae5a:	d0fa      	beq.n	ae52 <ticker_stop_sync_lost_op_cb+0x16>
    ae5c:	f240 43e9 	movw	r3, #1257	; 0x4e9
    ae60:	4a0d      	ldr	r2, [pc, #52]	; (ae98 <ticker_stop_sync_lost_op_cb+0x5c>)
    ae62:	490e      	ldr	r1, [pc, #56]	; (ae9c <ticker_stop_sync_lost_op_cb+0x60>)
    ae64:	480e      	ldr	r0, [pc, #56]	; (aea0 <ticker_stop_sync_lost_op_cb+0x64>)
    ae66:	f00e fcb2 	bl	197ce <assert_print>
    ae6a:	4040      	eors	r0, r0
    ae6c:	f380 8811 	msr	BASEPRI, r0
    ae70:	f04f 0003 	mov.w	r0, #3
    ae74:	df02      	svc	2
		return;
    ae76:	e7ec      	b.n	ae52 <ticker_stop_sync_lost_op_cb+0x16>
	LL_ASSERT(!retval);
    ae78:	f240 43f2 	movw	r3, #1266	; 0x4f2
    ae7c:	4a06      	ldr	r2, [pc, #24]	; (ae98 <ticker_stop_sync_lost_op_cb+0x5c>)
    ae7e:	4909      	ldr	r1, [pc, #36]	; (aea4 <ticker_stop_sync_lost_op_cb+0x68>)
    ae80:	4807      	ldr	r0, [pc, #28]	; (aea0 <ticker_stop_sync_lost_op_cb+0x64>)
    ae82:	f00e fca4 	bl	197ce <assert_print>
    ae86:	4040      	eors	r0, r0
    ae88:	f380 8811 	msr	BASEPRI, r0
    ae8c:	f04f 0003 	mov.w	r0, #3
    ae90:	df02      	svc	2
    ae92:	e7de      	b.n	ae52 <ticker_stop_sync_lost_op_cb+0x16>
    ae94:	20000774 	.word	0x20000774
    ae98:	0001efe0 	.word	0x0001efe0
    ae9c:	0001f05c 	.word	0x0001f05c
    aea0:	0001e920 	.word	0x0001e920
    aea4:	0001ecf4 	.word	0x0001ecf4

0000aea8 <ticker_update_op_status_give>:
}
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_SYNC */

#if defined(CONFIG_BT_CTLR_DF_SCAN_CTE_RX)
static void ticker_update_op_status_give(uint32_t status, void *param)
{
    aea8:	b508      	push	{r3, lr}
	*((uint32_t volatile *)param) = status;
    aeaa:	6008      	str	r0, [r1, #0]
	z_impl_k_sem_give(sem);
    aeac:	4801      	ldr	r0, [pc, #4]	; (aeb4 <ticker_update_op_status_give+0xc>)
    aeae:	f008 f82d 	bl	12f0c <z_impl_k_sem_give>

	k_sem_give(&sem_ticker_cb);
}
    aeb2:	bd08      	pop	{r3, pc}
    aeb4:	200059b0 	.word	0x200059b0

0000aeb8 <ll_sync_create>:
{
    aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aebc:	b083      	sub	sp, #12
    aebe:	4606      	mov	r6, r0
    aec0:	4688      	mov	r8, r1
    aec2:	9201      	str	r2, [sp, #4]
    aec4:	461f      	mov	r7, r3
	scan = ull_scan_set_get(SCAN_HANDLE_1M);
    aec6:	2000      	movs	r0, #0
    aec8:	f7ff f9aa 	bl	a220 <ull_scan_set_get>
	if (!scan || scan->periodic.sync) {
    aecc:	2800      	cmp	r0, #0
    aece:	f000 80b4 	beq.w	b03a <ll_sync_create+0x182>
    aed2:	4605      	mov	r5, r0
    aed4:	6d03      	ldr	r3, [r0, #80]	; 0x50
    aed6:	b11b      	cbz	r3, aee0 <ll_sync_create+0x28>
		return BT_HCI_ERR_CMD_DISALLOWED;
    aed8:	200c      	movs	r0, #12
}
    aeda:	b003      	add	sp, #12
    aedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	link_sync_estab = ll_rx_link_alloc();
    aee0:	f7fe f9b0 	bl	9244 <ll_rx_link_alloc>
	if (!link_sync_estab) {
    aee4:	4682      	mov	sl, r0
    aee6:	2800      	cmp	r0, #0
    aee8:	f000 80a9 	beq.w	b03e <ll_sync_create+0x186>
	link_sync_lost = ll_rx_link_alloc();
    aeec:	f7fe f9aa 	bl	9244 <ll_rx_link_alloc>
	if (!link_sync_lost) {
    aef0:	4683      	mov	fp, r0
    aef2:	2800      	cmp	r0, #0
    aef4:	f000 8089 	beq.w	b00a <ll_sync_create+0x152>
	node_rx = ll_rx_alloc();
    aef8:	f7fe fa76 	bl	93e8 <ll_rx_alloc>
	if (!node_rx) {
    aefc:	4681      	mov	r9, r0
    aefe:	2800      	cmp	r0, #0
    af00:	f000 8088 	beq.w	b014 <ll_sync_create+0x15c>
	return mem_acquire(&sync_free);
    af04:	484f      	ldr	r0, [pc, #316]	; (b044 <ll_sync_create+0x18c>)
    af06:	f00f f905 	bl	1a114 <mem_acquire>
	if (!sync) {
    af0a:	4604      	mov	r4, r0
    af0c:	2800      	cmp	r0, #0
    af0e:	f000 8089 	beq.w	b024 <ll_sync_create+0x16c>
	scan->periodic.cancelled = 0U;
    af12:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    af16:	f36f 0382 	bfc	r3, #2, #1
    af1a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	scan->periodic.state = LL_SYNC_STATE_IDLE;
    af1e:	b2db      	uxtb	r3, r3
    af20:	f36f 03c4 	bfc	r3, #3, #2
    af24:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	scan->periodic.filter_policy =
    af28:	b2db      	uxtb	r3, r3
    af2a:	f366 0341 	bfi	r3, r6, #1, #1
    af2e:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	if (!scan->periodic.filter_policy) {
    af32:	b2db      	uxtb	r3, r3
    af34:	f013 0f02 	tst.w	r3, #2
    af38:	d10e      	bne.n	af58 <ll_sync_create+0xa0>
		scan->periodic.sid = sid;
    af3a:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		scan->periodic.adv_addr_type = adv_addr_type;
    af3e:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    af42:	9a01      	ldr	r2, [sp, #4]
    af44:	f362 0300 	bfi	r3, r2, #0, #1
    af48:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
    af4c:	683b      	ldr	r3, [r7, #0]
    af4e:	f8c5 304a 	str.w	r3, [r5, #74]	; 0x4a
    af52:	88bb      	ldrh	r3, [r7, #4]
    af54:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
	node_rx->link = link_sync_estab;
    af58:	f8c9 a000 	str.w	sl, [r9]
	sync->node_rx_sync_estab = node_rx;
    af5c:	f8c4 90b4 	str.w	r9, [r4, #180]	; 0xb4
	sync->node_rx_lost.hdr.link = link_sync_lost;
    af60:	f8c4 b090 	str.w	fp, [r4, #144]	; 0x90
		!(options & BT_HCI_LE_PER_ADV_CREATE_SYNC_FP_REPORTS_DISABLED);
    af64:	0873      	lsrs	r3, r6, #1
    af66:	f083 0301 	eor.w	r3, r3, #1
    af6a:	f003 0301 	and.w	r3, r3, #1
	sync->rx_enable =
    af6e:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
    af72:	f363 0241 	bfi	r2, r3, #1, #1
    af76:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
		       1U : 0U;
    af7a:	f3c6 0680 	ubfx	r6, r6, #2, #1
	sync->nodups = (options &
    af7e:	b2d2      	uxtb	r2, r2
    af80:	f366 0282 	bfi	r2, r6, #2, #1
    af84:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
	sync->skip = skip;
    af88:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    af8c:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
	sync->is_stop = 0U;
    af90:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
    af94:	f36f 02c3 	bfc	r2, #3, #1
    af98:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
	sync->timeout = sync_timeout;
    af9c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    afa0:	f8a4 207e 	strh.w	r2, [r4, #126]	; 0x7e
	sync->timeout_reload = 0U;
    afa4:	2600      	movs	r6, #0
    afa6:	f8a4 6080 	strh.w	r6, [r4, #128]	; 0x80
	sync->timeout_expire = 0U;
    afaa:	f8a4 6082 	strh.w	r6, [r4, #130]	; 0x82
	lll_sync->lll_aux = NULL;
    afae:	65a6      	str	r6, [r4, #88]	; 0x58
	lll_sync->is_rx_enabled = sync->rx_enable;
    afb0:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    afb4:	f363 0241 	bfi	r2, r3, #1, #1
    afb8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	lll_sync->skip_prepare = 0U;
    afbc:	8566      	strh	r6, [r4, #42]	; 0x2a
	lll_sync->skip_event = 0U;
    afbe:	85a6      	strh	r6, [r4, #44]	; 0x2c
	lll_sync->window_widening_prepare_us = 0U;
    afc0:	64e6      	str	r6, [r4, #76]	; 0x4c
	lll_sync->window_widening_event_us = 0U;
    afc2:	6526      	str	r6, [r4, #80]	; 0x50
	lll_sync->cte_type = sync_cte_type;
    afc4:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    afc8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    afcc:	f362 03c7 	bfi	r3, r2, #3, #5
    afd0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	lll_sync->filter_policy = scan->periodic.filter_policy;
    afd4:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    afd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
    afdc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    afe0:	f363 0200 	bfi	r2, r3, #0, #1
    afe4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	ull_df_sync_cfg_init(&lll_sync->df_cfg);
    afe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    afec:	f011 f882 	bl	1c0f4 <ull_df_sync_cfg_init>
	hdr->ref = 0U;
    aff0:	7026      	strb	r6, [r4, #0]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    aff2:	61a6      	str	r6, [r4, #24]
    aff4:	6166      	str	r6, [r4, #20]
    aff6:	61e4      	str	r4, [r4, #28]
	scan->periodic.sync = sync;
    aff8:	652c      	str	r4, [r5, #80]	; 0x50
	scan->lll.is_sync = 1U;
    affa:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
    affe:	f043 0320 	orr.w	r3, r3, #32
    b002:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	return 0;
    b006:	4630      	mov	r0, r6
    b008:	e767      	b.n	aeda <ll_sync_create+0x22>
		ll_rx_link_release(link_sync_estab);
    b00a:	4650      	mov	r0, sl
    b00c:	f7fe f922 	bl	9254 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b010:	2007      	movs	r0, #7
    b012:	e762      	b.n	aeda <ll_sync_create+0x22>
		ll_rx_link_release(link_sync_lost);
    b014:	4658      	mov	r0, fp
    b016:	f7fe f91d 	bl	9254 <ll_rx_link_release>
		ll_rx_link_release(link_sync_estab);
    b01a:	4650      	mov	r0, sl
    b01c:	f7fe f91a 	bl	9254 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b020:	2007      	movs	r0, #7
    b022:	e75a      	b.n	aeda <ll_sync_create+0x22>
		ll_rx_release(node_rx);
    b024:	4648      	mov	r0, r9
    b026:	f7fe f9e7 	bl	93f8 <ll_rx_release>
		ll_rx_link_release(link_sync_lost);
    b02a:	4658      	mov	r0, fp
    b02c:	f7fe f912 	bl	9254 <ll_rx_link_release>
		ll_rx_link_release(link_sync_estab);
    b030:	4650      	mov	r0, sl
    b032:	f7fe f90f 	bl	9254 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b036:	2007      	movs	r0, #7
    b038:	e74f      	b.n	aeda <ll_sync_create+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b03a:	200c      	movs	r0, #12
    b03c:	e74d      	b.n	aeda <ll_sync_create+0x22>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    b03e:	2007      	movs	r0, #7
    b040:	e74b      	b.n	aeda <ll_sync_create+0x22>
    b042:	bf00      	nop
    b044:	200059c8 	.word	0x200059c8

0000b048 <ull_sync_set_get>:
	if (handle >= CONFIG_BT_PER_ADV_SYNC_MAX) {
    b048:	4603      	mov	r3, r0
    b04a:	b920      	cbnz	r0, b056 <ull_sync_set_get+0xe>
	return &ll_sync_pool[handle];
    b04c:	4803      	ldr	r0, [pc, #12]	; (b05c <ull_sync_set_get+0x14>)
    b04e:	22bc      	movs	r2, #188	; 0xbc
    b050:	fb02 0003 	mla	r0, r2, r3, r0
    b054:	4770      	bx	lr
		return NULL;
    b056:	2000      	movs	r0, #0
}
    b058:	4770      	bx	lr
    b05a:	bf00      	nop
    b05c:	200058e4 	.word	0x200058e4

0000b060 <ull_sync_is_valid_get>:
	if (((uint8_t *)sync < (uint8_t *)ll_sync_pool) ||
    b060:	4b04      	ldr	r3, [pc, #16]	; (b074 <ull_sync_is_valid_get+0x14>)
    b062:	4298      	cmp	r0, r3
    b064:	d301      	bcc.n	b06a <ull_sync_is_valid_get+0xa>
    b066:	d802      	bhi.n	b06e <ull_sync_is_valid_get+0xe>
    b068:	4770      	bx	lr
		return NULL;
    b06a:	2000      	movs	r0, #0
    b06c:	4770      	bx	lr
    b06e:	2000      	movs	r0, #0
}
    b070:	4770      	bx	lr
    b072:	bf00      	nop
    b074:	200058e4 	.word	0x200058e4

0000b078 <ull_sync_handle_get>:
{
    b078:	b508      	push	{r3, lr}
	return mem_index_get(sync, ll_sync_pool, sizeof(struct ll_sync_set));
    b07a:	22bc      	movs	r2, #188	; 0xbc
    b07c:	4901      	ldr	r1, [pc, #4]	; (b084 <ull_sync_handle_get+0xc>)
    b07e:	f00f f86f 	bl	1a160 <mem_index_get>
}
    b082:	bd08      	pop	{r3, pc}
    b084:	200058e4 	.word	0x200058e4

0000b088 <sync_lost>:
{
    b088:	b538      	push	{r3, r4, r5, lr}
    b08a:	4604      	mov	r4, r0
	if (sync->lll_sync_prepare != lll_sync_prepare) {
    b08c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    b090:	4b0c      	ldr	r3, [pc, #48]	; (b0c4 <sync_lost+0x3c>)
    b092:	429a      	cmp	r2, r3
    b094:	d002      	beq.n	b09c <sync_lost+0x14>
		sync_expire(param);
    b096:	f010 fef2 	bl	1be7e <sync_expire>
}
    b09a:	bd38      	pop	{r3, r4, r5, pc}
	rx = (void *)&sync->node_rx_lost;
    b09c:	f100 0590 	add.w	r5, r0, #144	; 0x90
	rx->hdr.handle = ull_sync_handle_get(sync);
    b0a0:	f7ff ffea 	bl	b078 <ull_sync_handle_get>
    b0a4:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
	rx->hdr.type = NODE_RX_TYPE_SYNC_LOST;
    b0a8:	230e      	movs	r3, #14
    b0aa:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
	rx->hdr.rx_ftr.param = sync;
    b0ae:	f8c4 4098 	str.w	r4, [r4, #152]	; 0x98
	ll_rx_put(rx->hdr.link, rx);
    b0b2:	4629      	mov	r1, r5
    b0b4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b0b8:	f7fe fa96 	bl	95e8 <ll_rx_put>
	ll_rx_sched();
    b0bc:	f7fe fa9c 	bl	95f8 <ll_rx_sched>
    b0c0:	e7eb      	b.n	b09a <sync_lost+0x12>
    b0c2:	bf00      	nop
    b0c4:	0000f651 	.word	0x0000f651

0000b0c8 <sync_ticker_cleanup>:
{
    b0c8:	b530      	push	{r4, r5, lr}
    b0ca:	b083      	sub	sp, #12
    b0cc:	4604      	mov	r4, r0
    b0ce:	460d      	mov	r5, r1
	uint16_t sync_handle = ull_sync_handle_get(sync);
    b0d0:	f7ff ffd2 	bl	b078 <ull_sync_handle_get>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    b0d4:	1d02      	adds	r2, r0, #4
    b0d6:	9400      	str	r4, [sp, #0]
    b0d8:	462b      	mov	r3, r5
    b0da:	b2d2      	uxtb	r2, r2
    b0dc:	2101      	movs	r1, #1
    b0de:	2000      	movs	r0, #0
    b0e0:	f7fc f9ae 	bl	7440 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b0e4:	b108      	cbz	r0, b0ea <sync_ticker_cleanup+0x22>
    b0e6:	2802      	cmp	r0, #2
    b0e8:	d104      	bne.n	b0f4 <sync_ticker_cleanup+0x2c>
	sync->timeout_reload = 0U;
    b0ea:	2300      	movs	r3, #0
    b0ec:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
}
    b0f0:	b003      	add	sp, #12
    b0f2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    b0f4:	f240 437c 	movw	r3, #1148	; 0x47c
    b0f8:	4a05      	ldr	r2, [pc, #20]	; (b110 <sync_ticker_cleanup+0x48>)
    b0fa:	4906      	ldr	r1, [pc, #24]	; (b114 <sync_ticker_cleanup+0x4c>)
    b0fc:	4806      	ldr	r0, [pc, #24]	; (b118 <sync_ticker_cleanup+0x50>)
    b0fe:	f00e fb66 	bl	197ce <assert_print>
    b102:	4040      	eors	r0, r0
    b104:	f380 8811 	msr	BASEPRI, r0
    b108:	f04f 0003 	mov.w	r0, #3
    b10c:	df02      	svc	2
    b10e:	e7ec      	b.n	b0ea <sync_ticker_cleanup+0x22>
    b110:	0001efe0 	.word	0x0001efe0
    b114:	0001ee10 	.word	0x0001ee10
    b118:	0001e920 	.word	0x0001e920

0000b11c <ull_sync_release>:
{
    b11c:	b508      	push	{r3, lr}
	sync->data_len = 0U;
    b11e:	2200      	movs	r2, #0
    b120:	f8a0 20b8 	strh.w	r2, [r0, #184]	; 0xb8
	mem_release(sync, &sync_free);
    b124:	4901      	ldr	r1, [pc, #4]	; (b12c <ull_sync_release+0x10>)
    b126:	f00f f808 	bl	1a13a <mem_release>
}
    b12a:	bd08      	pop	{r3, pc}
    b12c:	200059c8 	.word	0x200059c8

0000b130 <ll_sync_terminate>:
{
    b130:	b538      	push	{r3, r4, r5, lr}
    b132:	4605      	mov	r5, r0
	sync = ull_sync_is_enabled_get(handle);
    b134:	f010 feb8 	bl	1bea8 <ull_sync_is_enabled_get>
	if (!sync) {
    b138:	2800      	cmp	r0, #0
    b13a:	d047      	beq.n	b1cc <ll_sync_terminate+0x9c>
    b13c:	4604      	mov	r4, r0
	sync->is_stop = 1U;
    b13e:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    b142:	f043 0308 	orr.w	r3, r3, #8
    b146:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_SYNC_BASE + handle,
    b14a:	1d28      	adds	r0, r5, #4
    b14c:	f104 021c 	add.w	r2, r4, #28
    b150:	4621      	mov	r1, r4
    b152:	b2c0      	uxtb	r0, r0
    b154:	f7fe fb86 	bl	9864 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
    b158:	4605      	mov	r5, r0
    b15a:	b110      	cbz	r0, b162 <ll_sync_terminate+0x32>
    b15c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    b160:	d126      	bne.n	b1b0 <ll_sync_terminate+0x80>
	if (err) {
    b162:	2d00      	cmp	r5, #0
    b164:	d134      	bne.n	b1d0 <ll_sync_terminate+0xa0>
	lll_aux = sync->lll.lll_aux;
    b166:	6da3      	ldr	r3, [r4, #88]	; 0x58
	if (lll_aux) {
    b168:	b1b3      	cbz	r3, b198 <ll_sync_terminate+0x68>
		aux = HDR_LLL2ULL(lll_aux);
    b16a:	681d      	ldr	r5, [r3, #0]
		err = ull_scan_aux_stop(aux);
    b16c:	4628      	mov	r0, r5
    b16e:	f7ff fd2d 	bl	abcc <ull_scan_aux_stop>
		if (err && (err != -EALREADY)) {
    b172:	b110      	cbz	r0, b17a <ll_sync_terminate+0x4a>
    b174:	f110 0f78 	cmn.w	r0, #120	; 0x78
    b178:	d12c      	bne.n	b1d4 <ll_sync_terminate+0xa4>
		LL_ASSERT(!aux->parent);
    b17a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b17c:	b163      	cbz	r3, b198 <ll_sync_terminate+0x68>
    b17e:	f240 1381 	movw	r3, #385	; 0x181
    b182:	4a15      	ldr	r2, [pc, #84]	; (b1d8 <ll_sync_terminate+0xa8>)
    b184:	4915      	ldr	r1, [pc, #84]	; (b1dc <ll_sync_terminate+0xac>)
    b186:	4816      	ldr	r0, [pc, #88]	; (b1e0 <ll_sync_terminate+0xb0>)
    b188:	f00e fb21 	bl	197ce <assert_print>
    b18c:	4040      	eors	r0, r0
    b18e:	f380 8811 	msr	BASEPRI, r0
    b192:	f04f 0003 	mov.w	r0, #3
    b196:	df02      	svc	2
	ll_rx_link_release(link_sync_lost);
    b198:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    b19c:	f7fe f85a 	bl	9254 <ll_rx_link_release>
	sync->timeout_reload = 0U;
    b1a0:	2500      	movs	r5, #0
    b1a2:	f8a4 5080 	strh.w	r5, [r4, #128]	; 0x80
	ull_sync_release(sync);
    b1a6:	4620      	mov	r0, r4
    b1a8:	f7ff ffb8 	bl	b11c <ull_sync_release>
	return 0;
    b1ac:	4628      	mov	r0, r5
}
    b1ae:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
    b1b0:	f240 1371 	movw	r3, #369	; 0x171
    b1b4:	4a08      	ldr	r2, [pc, #32]	; (b1d8 <ll_sync_terminate+0xa8>)
    b1b6:	490b      	ldr	r1, [pc, #44]	; (b1e4 <ll_sync_terminate+0xb4>)
    b1b8:	4809      	ldr	r0, [pc, #36]	; (b1e0 <ll_sync_terminate+0xb0>)
    b1ba:	f00e fb08 	bl	197ce <assert_print>
    b1be:	4040      	eors	r0, r0
    b1c0:	f380 8811 	msr	BASEPRI, r0
    b1c4:	f04f 0003 	mov.w	r0, #3
    b1c8:	df02      	svc	2
    b1ca:	e7ca      	b.n	b162 <ll_sync_terminate+0x32>
		return BT_HCI_ERR_UNKNOWN_ADV_IDENTIFIER;
    b1cc:	2042      	movs	r0, #66	; 0x42
    b1ce:	e7ee      	b.n	b1ae <ll_sync_terminate+0x7e>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b1d0:	200c      	movs	r0, #12
    b1d2:	e7ec      	b.n	b1ae <ll_sync_terminate+0x7e>
			return BT_HCI_ERR_CMD_DISALLOWED;
    b1d4:	200c      	movs	r0, #12
    b1d6:	e7ea      	b.n	b1ae <ll_sync_terminate+0x7e>
    b1d8:	0001efe0 	.word	0x0001efe0
    b1dc:	0001ede8 	.word	0x0001ede8
    b1e0:	0001e920 	.word	0x0001e920
    b1e4:	0001edd0 	.word	0x0001edd0

0000b1e8 <ull_sync_established_report>:
{
    b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1ec:	4680      	mov	r8, r0
    b1ee:	460c      	mov	r4, r1
	lll = ftr->param;
    b1f0:	688b      	ldr	r3, [r1, #8]
	sync = HDR_LLL2ULL(lll);
    b1f2:	681f      	ldr	r7, [r3, #0]
	sync_status = ftr->sync_status;
    b1f4:	7e8d      	ldrb	r5, [r1, #26]
    b1f6:	09ad      	lsrs	r5, r5, #6
	if (sync_status != SYNC_STAT_READY_OR_CONT_SCAN) {
    b1f8:	2d01      	cmp	r5, #1
    b1fa:	d10c      	bne.n	b216 <ull_sync_established_report+0x2e>
	if (sync_status != SYNC_STAT_TERM) {
    b1fc:	2d02      	cmp	r5, #2
    b1fe:	d023      	beq.n	b248 <ull_sync_established_report+0x60>
		sync->lll_sync_prepare = lll_sync_prepare;
    b200:	4b16      	ldr	r3, [pc, #88]	; (b25c <ull_sync_established_report+0x74>)
    b202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		rx->type = NODE_RX_TYPE_SYNC_REPORT;
    b206:	230d      	movs	r3, #13
    b208:	7123      	strb	r3, [r4, #4]
		ull_scan_aux_setup(link, rx);
    b20a:	4621      	mov	r1, r4
    b20c:	4640      	mov	r0, r8
    b20e:	f7f6 fbbf 	bl	1990 <ull_scan_aux_setup>
}
    b212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_establ = (void *)sync->node_rx_sync_estab;
    b216:	f8d7 60b4 	ldr.w	r6, [r7, #180]	; 0xb4
		rx_establ->hdr.type = NODE_RX_TYPE_SYNC;
    b21a:	230c      	movs	r3, #12
    b21c:	7133      	strb	r3, [r6, #4]
		rx_establ->hdr.handle = ull_sync_handle_get(sync);
    b21e:	4638      	mov	r0, r7
    b220:	f7ff ff2a 	bl	b078 <ull_sync_handle_get>
    b224:	80f0      	strh	r0, [r6, #6]
		se->status = (ftr->sync_status == SYNC_STAT_TERM) ?
    b226:	7ea3      	ldrb	r3, [r4, #26]
    b228:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b22c:	2b80      	cmp	r3, #128	; 0x80
    b22e:	d009      	beq.n	b244 <ull_sync_established_report+0x5c>
    b230:	2300      	movs	r3, #0
    b232:	f886 3020 	strb.w	r3, [r6, #32]
		ll_rx_put(rx_establ->hdr.link, rx_establ);
    b236:	4631      	mov	r1, r6
    b238:	6830      	ldr	r0, [r6, #0]
    b23a:	f7fe f9d5 	bl	95e8 <ll_rx_put>
		ll_rx_sched();
    b23e:	f7fe f9db 	bl	95f8 <ll_rx_sched>
    b242:	e7db      	b.n	b1fc <ull_sync_established_report+0x14>
		se->status = (ftr->sync_status == SYNC_STAT_TERM) ?
    b244:	231a      	movs	r3, #26
    b246:	e7f4      	b.n	b232 <ull_sync_established_report+0x4a>
		rx->type = NODE_RX_TYPE_RELEASE;
    b248:	2301      	movs	r3, #1
    b24a:	7123      	strb	r3, [r4, #4]
		ll_rx_put(link, rx);
    b24c:	4621      	mov	r1, r4
    b24e:	4640      	mov	r0, r8
    b250:	f7fe f9ca 	bl	95e8 <ll_rx_put>
		ll_rx_sched();
    b254:	f7fe f9d0 	bl	95f8 <ll_rx_sched>
}
    b258:	e7db      	b.n	b212 <ull_sync_established_report+0x2a>
    b25a:	bf00      	nop
    b25c:	0000f651 	.word	0x0000f651

0000b260 <ull_sync_done>:
{
    b260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b264:	b08a      	sub	sp, #40	; 0x28
	sync = CONTAINER_OF(done->param, struct ll_sync_set, ull);
    b266:	6a04      	ldr	r4, [r0, #32]
	if (unlikely(sync->is_stop || !sync->timeout_reload)) {
    b268:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    b26c:	f013 0f08 	tst.w	r3, #8
    b270:	d162      	bne.n	b338 <ull_sync_done+0xd8>
    b272:	4605      	mov	r5, r0
    b274:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
    b278:	b29b      	uxth	r3, r3
    b27a:	2b00      	cmp	r3, #0
    b27c:	d05c      	beq.n	b338 <ull_sync_done+0xd8>
	if (done->extra.sync_term) {
    b27e:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
    b282:	f013 0702 	ands.w	r7, r3, #2
    b286:	d153      	bne.n	b330 <ull_sync_done+0xd0>
		skip_event = lll->skip_event;
    b288:	f8b4 802c 	ldrh.w	r8, [r4, #44]	; 0x2c
		elapsed_event = skip_event + 1;
    b28c:	f108 0601 	add.w	r6, r8, #1
    b290:	b2b6      	uxth	r6, r6
		ticks_drift_plus = 0U;
    b292:	2300      	movs	r3, #0
    b294:	9308      	str	r3, [sp, #32]
		ticks_drift_minus = 0U;
    b296:	9309      	str	r3, [sp, #36]	; 0x24
		if (done->extra.trx_cnt) {
    b298:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    b29a:	2b00      	cmp	r3, #0
    b29c:	d14f      	bne.n	b33e <ull_sync_done+0xde>
		if (done->extra.crc_valid) {
    b29e:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
    b2a2:	f013 0f01 	tst.w	r3, #1
    b2a6:	d058      	beq.n	b35a <ull_sync_done+0xfa>
			sync->timeout_expire = 0U;
    b2a8:	2300      	movs	r3, #0
    b2aa:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		if (sync->timeout_expire) {
    b2ae:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
    b2b2:	b14b      	cbz	r3, b2c8 <ull_sync_done+0x68>
			if (sync->timeout_expire > elapsed_event) {
    b2b4:	42b3      	cmp	r3, r6
    b2b6:	d96f      	bls.n	b398 <ull_sync_done+0x138>
				sync->timeout_expire -= elapsed_event;
    b2b8:	1b9b      	subs	r3, r3, r6
    b2ba:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
				lll->skip_event = 0U;
    b2be:	2300      	movs	r3, #0
    b2c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
				if (skip_event) {
    b2c2:	f1b8 0f00 	cmp.w	r8, #0
    b2c6:	d16c      	bne.n	b3a2 <ull_sync_done+0x142>
		if ((force) || (skip_event != lll->skip_event)) {
    b2c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    b2ca:	4543      	cmp	r3, r8
    b2cc:	d06b      	beq.n	b3a6 <ull_sync_done+0x146>
			lazy = lll->skip_event + 1U;
    b2ce:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
    b2d0:	3501      	adds	r5, #1
    b2d2:	b2ad      	uxth	r5, r5
		if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
    b2d4:	9b08      	ldr	r3, [sp, #32]
    b2d6:	b91b      	cbnz	r3, b2e0 <ull_sync_done+0x80>
    b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2da:	b90b      	cbnz	r3, b2e0 <ull_sync_done+0x80>
    b2dc:	b905      	cbnz	r5, b2e0 <ull_sync_done+0x80>
    b2de:	b35f      	cbz	r7, b338 <ull_sync_done+0xd8>
			uint16_t sync_handle = ull_sync_handle_get(sync);
    b2e0:	4620      	mov	r0, r4
    b2e2:	f7ff fec9 	bl	b078 <ull_sync_handle_get>
				ticker_update(TICKER_INSTANCE_ID_CTLR,
    b2e6:	1d02      	adds	r2, r0, #4
    b2e8:	9406      	str	r4, [sp, #24]
    b2ea:	4b30      	ldr	r3, [pc, #192]	; (b3ac <ull_sync_done+0x14c>)
    b2ec:	9305      	str	r3, [sp, #20]
    b2ee:	9704      	str	r7, [sp, #16]
    b2f0:	9503      	str	r5, [sp, #12]
    b2f2:	2000      	movs	r0, #0
    b2f4:	9002      	str	r0, [sp, #8]
    b2f6:	9001      	str	r0, [sp, #4]
    b2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b2fa:	9300      	str	r3, [sp, #0]
    b2fc:	9b08      	ldr	r3, [sp, #32]
    b2fe:	b2d2      	uxtb	r2, r2
    b300:	2101      	movs	r1, #1
    b302:	f00f f98c 	bl	1a61e <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    b306:	b1b8      	cbz	r0, b338 <ull_sync_done+0xd8>
    b308:	2802      	cmp	r0, #2
    b30a:	d015      	beq.n	b338 <ull_sync_done+0xd8>
    b30c:	f7fe fa64 	bl	97d8 <ull_disable_mark_get>
    b310:	4284      	cmp	r4, r0
    b312:	d011      	beq.n	b338 <ull_sync_done+0xd8>
    b314:	f240 33e1 	movw	r3, #993	; 0x3e1
    b318:	4a25      	ldr	r2, [pc, #148]	; (b3b0 <ull_sync_done+0x150>)
    b31a:	4926      	ldr	r1, [pc, #152]	; (b3b4 <ull_sync_done+0x154>)
    b31c:	4826      	ldr	r0, [pc, #152]	; (b3b8 <ull_sync_done+0x158>)
    b31e:	f00e fa56 	bl	197ce <assert_print>
    b322:	4040      	eors	r0, r0
    b324:	f380 8811 	msr	BASEPRI, r0
    b328:	f04f 0003 	mov.w	r0, #3
    b32c:	df02      	svc	2
    b32e:	e003      	b.n	b338 <ull_sync_done+0xd8>
		sync_ticker_cleanup(sync, NULL);
    b330:	2100      	movs	r1, #0
    b332:	4620      	mov	r0, r4
    b334:	f7ff fec8 	bl	b0c8 <sync_ticker_cleanup>
}
    b338:	b00a      	add	sp, #40	; 0x28
    b33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_drift_ticks_get(done, &ticks_drift_plus, &ticks_drift_minus);
    b33e:	aa09      	add	r2, sp, #36	; 0x24
    b340:	a908      	add	r1, sp, #32
    b342:	f7f6 fa11 	bl	1768 <ull_drift_ticks_get>
			lll->skip_event = sync->skip;
    b346:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
    b34a:	85a3      	strh	r3, [r4, #44]	; 0x2c
			sync->sync_expire = 0U;
    b34c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    b350:	f36f 1306 	bfc	r3, #4, #3
    b354:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
    b358:	e7a1      	b.n	b29e <ull_sync_done+0x3e>
		else if (sync->sync_expire) {
    b35a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    b35e:	f013 0f70 	tst.w	r3, #112	; 0x70
    b362:	d010      	beq.n	b386 <ull_sync_done+0x126>
			if (sync->sync_expire > elapsed_event) {
    b364:	f3c3 1302 	ubfx	r3, r3, #4, #3
    b368:	42b3      	cmp	r3, r6
    b36a:	dd07      	ble.n	b37c <ull_sync_done+0x11c>
				sync->sync_expire -= elapsed_event;
    b36c:	1b9b      	subs	r3, r3, r6
    b36e:	f894 208e 	ldrb.w	r2, [r4, #142]	; 0x8e
    b372:	f363 1206 	bfi	r2, r3, #4, #3
    b376:	f884 208e 	strb.w	r2, [r4, #142]	; 0x8e
    b37a:	e798      	b.n	b2ae <ull_sync_done+0x4e>
				sync_ticker_cleanup(sync, ticker_stop_sync_expire_op_cb);
    b37c:	490f      	ldr	r1, [pc, #60]	; (b3bc <ull_sync_done+0x15c>)
    b37e:	4620      	mov	r0, r4
    b380:	f7ff fea2 	bl	b0c8 <sync_ticker_cleanup>
				return;
    b384:	e7d8      	b.n	b338 <ull_sync_done+0xd8>
		else if (!sync->timeout_expire) {
    b386:	f8b4 3082 	ldrh.w	r3, [r4, #130]	; 0x82
    b38a:	2b00      	cmp	r3, #0
    b38c:	d18f      	bne.n	b2ae <ull_sync_done+0x4e>
			sync->timeout_expire = sync->timeout_reload;
    b38e:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
    b392:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
    b396:	e78a      	b.n	b2ae <ull_sync_done+0x4e>
				sync_ticker_cleanup(sync, ticker_stop_sync_lost_op_cb);
    b398:	4909      	ldr	r1, [pc, #36]	; (b3c0 <ull_sync_done+0x160>)
    b39a:	4620      	mov	r0, r4
    b39c:	f7ff fe94 	bl	b0c8 <sync_ticker_cleanup>
				return;
    b3a0:	e7ca      	b.n	b338 <ull_sync_done+0xd8>
					force = 1U;
    b3a2:	2701      	movs	r7, #1
    b3a4:	e793      	b.n	b2ce <ull_sync_done+0x6e>
		lazy = 0U;
    b3a6:	2500      	movs	r5, #0
    b3a8:	e794      	b.n	b2d4 <ull_sync_done+0x74>
    b3aa:	bf00      	nop
    b3ac:	0000ae05 	.word	0x0000ae05
    b3b0:	0001efe0 	.word	0x0001efe0
    b3b4:	0001f07c 	.word	0x0001f07c
    b3b8:	0001e920 	.word	0x0001e920
    b3bc:	0000ada1 	.word	0x0000ada1
    b3c0:	0000ae3d 	.word	0x0000ae3d

0000b3c4 <ull_sync_chm_update>:
{
    b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3c6:	460c      	mov	r4, r1
    b3c8:	4615      	mov	r5, r2
	sync = ull_sync_set_get(sync_handle);
    b3ca:	f7ff fe3d 	bl	b048 <ull_sync_set_get>
	LL_ASSERT(sync);
    b3ce:	4606      	mov	r6, r0
    b3d0:	b130      	cbz	r0, b3e0 <ull_sync_chm_update+0x1c>
	if (lll->chm_last != lll->chm_first) {
    b3d2:	f896 103f 	ldrb.w	r1, [r6, #63]	; 0x3f
    b3d6:	f896 303e 	ldrb.w	r3, [r6, #62]	; 0x3e
    b3da:	4299      	cmp	r1, r3
    b3dc:	d019      	beq.n	b412 <ull_sync_chm_update+0x4e>
}
    b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(sync);
    b3e0:	f240 33f2 	movw	r3, #1010	; 0x3f2
    b3e4:	4a25      	ldr	r2, [pc, #148]	; (b47c <ull_sync_chm_update+0xb8>)
    b3e6:	4926      	ldr	r1, [pc, #152]	; (b480 <ull_sync_chm_update+0xbc>)
    b3e8:	4826      	ldr	r0, [pc, #152]	; (b484 <ull_sync_chm_update+0xc0>)
    b3ea:	f00e f9f0 	bl	197ce <assert_print>
    b3ee:	4040      	eors	r0, r0
    b3f0:	f380 8811 	msr	BASEPRI, r0
    b3f4:	f04f 0003 	mov.w	r0, #3
    b3f8:	df02      	svc	2
    b3fa:	e7ea      	b.n	b3d2 <ull_sync_chm_update+0xe>
		ad_len += 1U;
    b3fc:	3301      	adds	r3, #1
    b3fe:	b29b      	uxth	r3, r3
		if (ad_len < acad_len) {
    b400:	b2aa      	uxth	r2, r5
    b402:	429a      	cmp	r2, r3
    b404:	d9eb      	bls.n	b3de <ull_sync_chm_update+0x1a>
			acad_len -= ad_len;
    b406:	3001      	adds	r0, #1
    b408:	1a28      	subs	r0, r5, r0
		acad += ad_len;
    b40a:	441c      	add	r4, r3
	} while (acad_len);
    b40c:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    b410:	d006      	beq.n	b420 <ull_sync_chm_update+0x5c>
		ad_len = acad[PDU_ADV_DATA_HEADER_LEN_OFFSET];
    b412:	7820      	ldrb	r0, [r4, #0]
    b414:	b283      	uxth	r3, r0
		if (ad_len &&
    b416:	2b00      	cmp	r3, #0
    b418:	d0f0      	beq.n	b3fc <ull_sync_chm_update+0x38>
		    (acad[PDU_ADV_DATA_HEADER_TYPE_OFFSET] ==
    b41a:	7862      	ldrb	r2, [r4, #1]
		if (ad_len &&
    b41c:	2a28      	cmp	r2, #40	; 0x28
    b41e:	d1ed      	bne.n	b3fc <ull_sync_chm_update+0x38>
	if (ad_len != (sizeof(*chm_upd_ind) + 1U)) {
    b420:	2b08      	cmp	r3, #8
    b422:	d1dc      	bne.n	b3de <ull_sync_chm_update+0x1a>
	chm_last = lll->chm_last + 1U;
    b424:	3101      	adds	r1, #1
    b426:	b2cd      	uxtb	r5, r1
	if (chm_last == DOUBLE_BUFFER_SIZE) {
    b428:	2d02      	cmp	r5, #2
    b42a:	d025      	beq.n	b478 <ull_sync_chm_update+0xb4>
	(void)memcpy(lll->chm[chm_last].data_chan_map, chm_upd_ind->chm,
    b42c:	f106 031c 	add.w	r3, r6, #28
    b430:	006f      	lsls	r7, r5, #1
    b432:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    b436:	0052      	lsls	r2, r2, #1
    b438:	3210      	adds	r2, #16
    b43a:	4413      	add	r3, r2
    b43c:	1d98      	adds	r0, r3, #6
    b43e:	f8d4 2002 	ldr.w	r2, [r4, #2]
    b442:	f8c3 2006 	str.w	r2, [r3, #6]
    b446:	79a3      	ldrb	r3, [r4, #6]
    b448:	7103      	strb	r3, [r0, #4]
		util_ones_count_get(lll->chm[chm_last].data_chan_map,
    b44a:	2105      	movs	r1, #5
    b44c:	f00e fec4 	bl	1a1d8 <util_ones_count_get>
    b450:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	lll->chm[chm_last].data_chan_count =
    b454:	197b      	adds	r3, r7, r5
    b456:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    b45a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
    b45e:	f360 0205 	bfi	r2, r0, #0, #6
    b462:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	if (lll->chm[chm_last].data_chan_count < CHM_USED_COUNT_MIN) {
    b466:	2801      	cmp	r0, #1
    b468:	d9b9      	bls.n	b3de <ull_sync_chm_update+0x1a>
	lll->chm_instant = sys_le16_to_cpu(chm_upd_ind->instant);
    b46a:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    b46e:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
	lll->chm_last = chm_last;
    b472:	f886 503f 	strb.w	r5, [r6, #63]	; 0x3f
    b476:	e7b2      	b.n	b3de <ull_sync_chm_update+0x1a>
		chm_last = 0U;
    b478:	2500      	movs	r5, #0
    b47a:	e7d7      	b.n	b42c <ull_sync_chm_update+0x68>
    b47c:	0001efe0 	.word	0x0001efe0
    b480:	0001f0d8 	.word	0x0001f0d8
    b484:	0001e920 	.word	0x0001e920

0000b488 <ll_df_set_cl_iq_sampling_enable>:
					uint8_t sampling_enable,
					uint8_t slot_durations,
					uint8_t max_cte_count,
					uint8_t switch_pattern_len,
					uint8_t *ant_ids)
{
    b488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b48c:	b082      	sub	sp, #8
    b48e:	460d      	mov	r5, r1
    b490:	4690      	mov	r8, r2
    b492:	4699      	mov	r9, r3
    b494:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28

	/* After this call and before ull_sync_slot_update the function may not
	 * call any kernel API that may put the thread into wait state. It may
	 * cause race condition with RX thread and lead to use of released memory.
	 */
	sync = ull_sync_is_enabled_get(handle);
    b498:	f010 fd06 	bl	1bea8 <ull_sync_is_enabled_get>
	if (!sync) {
    b49c:	2800      	cmp	r0, #0
    b49e:	d070      	beq.n	b582 <ll_df_set_cl_iq_sampling_enable+0xfa>
    b4a0:	4606      	mov	r6, r0
	}

	lll = &sync->lll;

	/* CTE is not supported for CODED Phy */
	if (lll->phy == PHY_CODED) {
    b4a2:	f890 1027 	ldrb.w	r1, [r0, #39]	; 0x27
    b4a6:	f001 0107 	and.w	r1, r1, #7
    b4aa:	2904      	cmp	r1, #4
    b4ac:	d06b      	beq.n	b586 <ll_df_set_cl_iq_sampling_enable+0xfe>
 * are the one that are available after last buffer swap done by call
 * lll_df_sync_cfg_latest_get.
 */
static inline struct lll_df_sync_cfg *lll_df_sync_cfg_curr_get(struct lll_df_sync *df_cfg)
{
	return &df_cfg->cfg[df_cfg->first];
    b4ae:	f810 4f5c 	ldrb.w	r4, [r0, #92]!
    b4b2:	b2e4      	uxtb	r4, r4
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	cfg_prev = lll_df_sync_cfg_curr_get(&lll->df_cfg);
	cfg = lll_df_sync_cfg_alloc(&lll->df_cfg, &cfg_idx);
    b4b4:	f10d 0107 	add.w	r1, sp, #7
    b4b8:	f011 f9be 	bl	1c838 <lll_df_sync_cfg_alloc>
    b4bc:	4607      	mov	r7, r0

	if (!sampling_enable) {
    b4be:	b9f5      	cbnz	r5, b4fe <ll_df_set_cl_iq_sampling_enable+0x76>
		if (!cfg_prev->is_enabled) {
    b4c0:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    b4c4:	4434      	add	r4, r6
    b4c6:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
    b4ca:	f010 0001 	ands.w	r0, r0, #1
    b4ce:	d05b      	beq.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
			/* Disable already disabled CTE Rx */
			return BT_HCI_ERR_SUCCESS;
		}
		slot_minus_us = CTE_LEN_MAX_US;
		cfg->is_enabled = 0U;
    b4d0:	783b      	ldrb	r3, [r7, #0]
    b4d2:	f36f 0300 	bfc	r3, #0, #1
    b4d6:	703b      	strb	r3, [r7, #0]
	uint32_t slot_plus_us = 0;
    b4d8:	2100      	movs	r1, #0
		slot_minus_us = CTE_LEN_MAX_US;
    b4da:	22a0      	movs	r2, #160	; 0xa0
			 */
			slot_plus_us = BT_HCI_LE_CTE_LEN_MAX;
		}
	}

	lll_df_sync_cfg_enqueue(&lll->df_cfg, cfg_idx);
    b4dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	df_cfg->last = idx;
    b4e0:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d

	if (slot_plus_us || slot_minus_us) {
    b4e4:	b909      	cbnz	r1, b4ea <ll_df_set_cl_iq_sampling_enable+0x62>
    b4e6:	2a00      	cmp	r2, #0
    b4e8:	d059      	beq.n	b59e <ll_df_set_cl_iq_sampling_enable+0x116>
		 * The stop operation may preempt call to this functions.
		 * So update may be called after that. Accept this failure
		 * (-ENOENT) gracefully.
		 * Periodic sync lost event also disables the CTE sampling.
		 */
		err = ull_sync_slot_update(sync, slot_plus_us, slot_minus_us);
    b4ea:	4630      	mov	r0, r6
    b4ec:	f7f7 f838 	bl	2560 <ull_sync_slot_update>
		LL_ASSERT(err == 0 || err == -ENOENT);
    b4f0:	2800      	cmp	r0, #0
    b4f2:	d056      	beq.n	b5a2 <ll_df_set_cl_iq_sampling_enable+0x11a>
    b4f4:	f110 0f02 	cmn.w	r0, #2
    b4f8:	d134      	bne.n	b564 <ll_df_set_cl_iq_sampling_enable+0xdc>
	}

	return 0;
    b4fa:	2000      	movs	r0, #0
    b4fc:	e044      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
		if (!((IS_ENABLED(CONFIG_BT_CTLR_DF_ANT_SWITCH_1US) &&
    b4fe:	f108 33ff 	add.w	r3, r8, #4294967295
    b502:	b2db      	uxtb	r3, r3
    b504:	2b01      	cmp	r3, #1
    b506:	d842      	bhi.n	b58e <ll_df_set_cl_iq_sampling_enable+0x106>
		if (max_cte_count > BT_HCI_LE_SAMPLE_CTE_COUNT_MAX) {
    b508:	f1b9 0f10 	cmp.w	r9, #16
    b50c:	d841      	bhi.n	b592 <ll_df_set_cl_iq_sampling_enable+0x10a>
		if (switch_pattern_len < BT_HCI_LE_SWITCH_PATTERN_LEN_MIN ||
    b50e:	f1aa 0302 	sub.w	r3, sl, #2
    b512:	b2db      	uxtb	r3, r3
    b514:	2b0a      	cmp	r3, #10
    b516:	d83e      	bhi.n	b596 <ll_df_set_cl_iq_sampling_enable+0x10e>
		    switch_pattern_len > BT_CTLR_DF_MAX_ANT_SW_PATTERN_LEN ||
    b518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b51a:	2b00      	cmp	r3, #0
    b51c:	d03d      	beq.n	b59a <ll_df_set_cl_iq_sampling_enable+0x112>
		cfg->slot_durations = slot_durations;
    b51e:	7803      	ldrb	r3, [r0, #0]
    b520:	f368 0342 	bfi	r3, r8, #1, #2
    b524:	7003      	strb	r3, [r0, #0]
		cfg->max_cte_count = max_cte_count;
    b526:	b2db      	uxtb	r3, r3
    b528:	f369 03c7 	bfi	r3, r9, #3, #5
    b52c:	f800 3b03 	strb.w	r3, [r0], #3
    b530:	4652      	mov	r2, sl
    b532:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b534:	f7f5 fee2 	bl	12fc <memcpy>
		cfg->ant_sw_len = switch_pattern_len;
    b538:	78bb      	ldrb	r3, [r7, #2]
    b53a:	f36a 0306 	bfi	r3, sl, #0, #7
    b53e:	70bb      	strb	r3, [r7, #2]
		cfg->is_enabled = 1U;
    b540:	783b      	ldrb	r3, [r7, #0]
    b542:	f043 0301 	orr.w	r3, r3, #1
    b546:	703b      	strb	r3, [r7, #0]
		if (!cfg_prev->is_enabled) {
    b548:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    b54c:	4434      	add	r4, r6
    b54e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    b552:	f013 0f01 	tst.w	r3, #1
    b556:	d002      	beq.n	b55e <ll_df_set_cl_iq_sampling_enable+0xd6>
	uint32_t slot_plus_us = 0;
    b558:	2100      	movs	r1, #0
	uint32_t slot_minus_us = 0;
    b55a:	460a      	mov	r2, r1
    b55c:	e7be      	b.n	b4dc <ll_df_set_cl_iq_sampling_enable+0x54>
			slot_plus_us = BT_HCI_LE_CTE_LEN_MAX;
    b55e:	2114      	movs	r1, #20
	uint32_t slot_minus_us = 0;
    b560:	2200      	movs	r2, #0
    b562:	e7bb      	b.n	b4dc <ll_df_set_cl_iq_sampling_enable+0x54>
		LL_ASSERT(err == 0 || err == -ENOENT);
    b564:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
    b568:	4a0f      	ldr	r2, [pc, #60]	; (b5a8 <ll_df_set_cl_iq_sampling_enable+0x120>)
    b56a:	4910      	ldr	r1, [pc, #64]	; (b5ac <ll_df_set_cl_iq_sampling_enable+0x124>)
    b56c:	4810      	ldr	r0, [pc, #64]	; (b5b0 <ll_df_set_cl_iq_sampling_enable+0x128>)
    b56e:	f00e f92e 	bl	197ce <assert_print>
    b572:	4040      	eors	r0, r0
    b574:	f380 8811 	msr	BASEPRI, r0
    b578:	f04f 0003 	mov.w	r0, #3
    b57c:	df02      	svc	2
	return 0;
    b57e:	2000      	movs	r0, #0
    b580:	e002      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
		return BT_HCI_ERR_UNKNOWN_ADV_IDENTIFIER;
    b582:	2042      	movs	r0, #66	; 0x42
    b584:	e000      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
		return BT_HCI_ERR_CMD_DISALLOWED;
    b586:	200c      	movs	r0, #12
}
    b588:	b002      	add	sp, #8
    b58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    b58e:	2011      	movs	r0, #17
    b590:	e7fa      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
			return BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    b592:	2011      	movs	r0, #17
    b594:	e7f8      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
			return BT_HCI_ERR_UNSUPP_FEATURE_PARAM_VAL;
    b596:	2011      	movs	r0, #17
    b598:	e7f6      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
    b59a:	2011      	movs	r0, #17
    b59c:	e7f4      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
	return 0;
    b59e:	2000      	movs	r0, #0
    b5a0:	e7f2      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
    b5a2:	2000      	movs	r0, #0
    b5a4:	e7f0      	b.n	b588 <ll_df_set_cl_iq_sampling_enable+0x100>
    b5a6:	bf00      	nop
    b5a8:	0001f0e0 	.word	0x0001f0e0
    b5ac:	0001f120 	.word	0x0001f120
    b5b0:	0001e920 	.word	0x0001e920

0000b5b4 <ull_df_iq_report_alloc_peek>:

#if defined(CONFIG_BT_CTLR_DF_SCAN_CTE_RX) || defined(CONFIG_BT_CTLR_DF_CONN_CTE_RX) || \
	defined(CONFIG_BT_CTLR_DTM_HCI_DF_IQ_REPORT)
void *ull_df_iq_report_alloc_peek(uint8_t count)
{
	if (count > MFIFO_AVAIL_COUNT_GET(iq_report_free)) {
    b5b4:	490d      	ldr	r1, [pc, #52]	; (b5ec <ull_df_iq_report_alloc_peek+0x38>)
    b5b6:	788b      	ldrb	r3, [r1, #2]
    b5b8:	790a      	ldrb	r2, [r1, #4]
    b5ba:	7949      	ldrb	r1, [r1, #5]
	if (last >= first) {
    b5bc:	428a      	cmp	r2, r1
    b5be:	d80c      	bhi.n	b5da <ull_df_iq_report_alloc_peek+0x26>
		return last - first;
    b5c0:	1a8b      	subs	r3, r1, r2
    b5c2:	b2db      	uxtb	r3, r3
    b5c4:	4298      	cmp	r0, r3
    b5c6:	d80d      	bhi.n	b5e4 <ull_df_iq_report_alloc_peek+0x30>
		return NULL;
	}

	return MFIFO_DEQUEUE_PEEK(iq_report_free);
    b5c8:	4b08      	ldr	r3, [pc, #32]	; (b5ec <ull_df_iq_report_alloc_peek+0x38>)
    b5ca:	781b      	ldrb	r3, [r3, #0]
	if (first == last) {
    b5cc:	428a      	cmp	r2, r1
    b5ce:	d00b      	beq.n	b5e8 <ull_df_iq_report_alloc_peek+0x34>
	return *((void **)(fifo + first * size));
    b5d0:	fb03 f202 	mul.w	r2, r3, r2
    b5d4:	4b06      	ldr	r3, [pc, #24]	; (b5f0 <ull_df_iq_report_alloc_peek+0x3c>)
    b5d6:	5898      	ldr	r0, [r3, r2]
    b5d8:	4770      	bx	lr
		return count - first + last;
    b5da:	1a9b      	subs	r3, r3, r2
    b5dc:	fa51 f383 	uxtab	r3, r1, r3
    b5e0:	b2db      	uxtb	r3, r3
    b5e2:	e7ef      	b.n	b5c4 <ull_df_iq_report_alloc_peek+0x10>
		return NULL;
    b5e4:	2000      	movs	r0, #0
    b5e6:	4770      	bx	lr
		return NULL; /* Queue is empty */
    b5e8:	2000      	movs	r0, #0
}
    b5ea:	4770      	bx	lr
    b5ec:	20000794 	.word	0x20000794
    b5f0:	2000079c 	.word	0x2000079c

0000b5f4 <ull_df_iq_report_alloc>:
	return *(void **)MFIFO_DEQUEUE_ITER_GET(iq_report_free, idx);
}

void *ull_df_iq_report_alloc(void)
{
	return MFIFO_DEQUEUE(iq_report_free);
    b5f4:	4b0b      	ldr	r3, [pc, #44]	; (b624 <ull_df_iq_report_alloc+0x30>)
    b5f6:	781a      	ldrb	r2, [r3, #0]
    b5f8:	f893 c002 	ldrb.w	ip, [r3, #2]
    b5fc:	7959      	ldrb	r1, [r3, #5]
	uint8_t _first = *first; /* Copy read-index */
    b5fe:	791b      	ldrb	r3, [r3, #4]
	if (_first == last) {
    b600:	4299      	cmp	r1, r3
    b602:	d00c      	beq.n	b61e <ull_df_iq_report_alloc+0x2a>
	mem = *((void **)(fifo + _first * size));
    b604:	fb03 f202 	mul.w	r2, r3, r2
    b608:	4907      	ldr	r1, [pc, #28]	; (b628 <ull_df_iq_report_alloc+0x34>)
    b60a:	5888      	ldr	r0, [r1, r2]
	_first += 1U;
    b60c:	3301      	adds	r3, #1
    b60e:	b2db      	uxtb	r3, r3
	if (_first == count) {
    b610:	459c      	cmp	ip, r3
    b612:	d002      	beq.n	b61a <ull_df_iq_report_alloc+0x26>
	*first = _first; /* Write back read-index */
    b614:	4a03      	ldr	r2, [pc, #12]	; (b624 <ull_df_iq_report_alloc+0x30>)
    b616:	7113      	strb	r3, [r2, #4]
	return mem;
    b618:	4770      	bx	lr
		_first = 0U;
    b61a:	2300      	movs	r3, #0
    b61c:	e7fa      	b.n	b614 <ull_df_iq_report_alloc+0x20>
		return NULL;
    b61e:	2000      	movs	r0, #0
}
    b620:	4770      	bx	lr
    b622:	bf00      	nop
    b624:	20000794 	.word	0x20000794
    b628:	2000079c 	.word	0x2000079c

0000b62c <ull_df_iq_report_mem_release>:

void ull_df_iq_report_mem_release(struct node_rx_hdr *rx)
{
    b62c:	b508      	push	{r3, lr}
	mem_release(rx, &mem_iq_report.free);
    b62e:	4902      	ldr	r1, [pc, #8]	; (b638 <ull_df_iq_report_mem_release+0xc>)
    b630:	f00e fd83 	bl	1a13a <mem_release>
}
    b634:	bd08      	pop	{r3, pc}
    b636:	bf00      	nop
    b638:	200059cc 	.word	0x200059cc

0000b63c <ull_iq_report_link_inc_quota>:

void ull_iq_report_link_inc_quota(int8_t delta)
{
    b63c:	b510      	push	{r4, lr}
	LL_ASSERT(delta <= 0 || mem_link_iq_report_quota_pdu < IQ_REPORT_CNT);
    b63e:	1e04      	subs	r4, r0, #0
    b640:	dd03      	ble.n	b64a <ull_iq_report_link_inc_quota+0xe>
    b642:	4b0b      	ldr	r3, [pc, #44]	; (b670 <ull_iq_report_link_inc_quota+0x34>)
    b644:	781b      	ldrb	r3, [r3, #0]
    b646:	2b1f      	cmp	r3, #31
    b648:	d804      	bhi.n	b654 <ull_iq_report_link_inc_quota+0x18>
	mem_link_iq_report_quota_pdu += delta;
    b64a:	4b09      	ldr	r3, [pc, #36]	; (b670 <ull_iq_report_link_inc_quota+0x34>)
    b64c:	7818      	ldrb	r0, [r3, #0]
    b64e:	4420      	add	r0, r4
    b650:	7018      	strb	r0, [r3, #0]
}
    b652:	bd10      	pop	{r4, pc}
	LL_ASSERT(delta <= 0 || mem_link_iq_report_quota_pdu < IQ_REPORT_CNT);
    b654:	f44f 7305 	mov.w	r3, #532	; 0x214
    b658:	4a06      	ldr	r2, [pc, #24]	; (b674 <ull_iq_report_link_inc_quota+0x38>)
    b65a:	4907      	ldr	r1, [pc, #28]	; (b678 <ull_iq_report_link_inc_quota+0x3c>)
    b65c:	4807      	ldr	r0, [pc, #28]	; (b67c <ull_iq_report_link_inc_quota+0x40>)
    b65e:	f00e f8b6 	bl	197ce <assert_print>
    b662:	4040      	eors	r0, r0
    b664:	f380 8811 	msr	BASEPRI, r0
    b668:	f04f 0003 	mov.w	r0, #3
    b66c:	df02      	svc	2
    b66e:	e7ec      	b.n	b64a <ull_iq_report_link_inc_quota+0xe>
    b670:	20009295 	.word	0x20009295
    b674:	0001f0e0 	.word	0x0001f0e0
    b678:	0001f138 	.word	0x0001f138
    b67c:	0001e920 	.word	0x0001e920

0000b680 <ull_df_rx_iq_report_alloc>:

void ull_df_rx_iq_report_alloc(uint8_t max)
{
    b680:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx;

	if (max > mem_link_iq_report_quota_pdu) {
    b682:	4b1a      	ldr	r3, [pc, #104]	; (b6ec <ull_df_rx_iq_report_alloc+0x6c>)
    b684:	781b      	ldrb	r3, [r3, #0]
    b686:	4283      	cmp	r3, r0
    b688:	d321      	bcc.n	b6ce <ull_df_rx_iq_report_alloc+0x4e>
    b68a:	4603      	mov	r3, r0
    b68c:	e01f      	b.n	b6ce <ull_df_rx_iq_report_alloc+0x4e>
			return;
		}

		rx = mem_acquire(&mem_iq_report.free);
		if (!rx) {
			ll_rx_link_release(link);
    b68e:	4630      	mov	r0, r6
    b690:	f7fd fde0 	bl	9254 <ll_rx_link_release>

		MFIFO_BY_IDX_ENQUEUE(iq_report_free, idx, rx);

		ull_iq_report_link_inc_quota(-1);
	}
}
    b694:	bd70      	pop	{r4, r5, r6, pc}
	if (last == first) {
    b696:	42a2      	cmp	r2, r4
    b698:	d0fc      	beq.n	b694 <ull_df_rx_iq_report_alloc+0x14>
		link = ll_rx_link_alloc();
    b69a:	f7fd fdd3 	bl	9244 <ll_rx_link_alloc>
		if (!link) {
    b69e:	4606      	mov	r6, r0
    b6a0:	2800      	cmp	r0, #0
    b6a2:	d0f7      	beq.n	b694 <ull_df_rx_iq_report_alloc+0x14>
		rx = mem_acquire(&mem_iq_report.free);
    b6a4:	4812      	ldr	r0, [pc, #72]	; (b6f0 <ull_df_rx_iq_report_alloc+0x70>)
    b6a6:	f00e fd35 	bl	1a114 <mem_acquire>
		if (!rx) {
    b6aa:	4601      	mov	r1, r0
    b6ac:	2800      	cmp	r0, #0
    b6ae:	d0ee      	beq.n	b68e <ull_df_rx_iq_report_alloc+0xe>
		rx->link = link;
    b6b0:	6006      	str	r6, [r0, #0]
		MFIFO_BY_IDX_ENQUEUE(iq_report_free, idx, rx);
    b6b2:	4b10      	ldr	r3, [pc, #64]	; (b6f4 <ull_df_rx_iq_report_alloc+0x74>)
    b6b4:	781a      	ldrb	r2, [r3, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    b6b6:	7958      	ldrb	r0, [r3, #5]
    b6b8:	fb00 f202 	mul.w	r2, r0, r2
    b6bc:	f103 0008 	add.w	r0, r3, #8
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    b6c0:	5081      	str	r1, [r0, r2]
	*last = idx; /* Commit: Update write index */
    b6c2:	715c      	strb	r4, [r3, #5]
		ull_iq_report_link_inc_quota(-1);
    b6c4:	f04f 30ff 	mov.w	r0, #4294967295
    b6c8:	f7ff ffb8 	bl	b63c <ull_iq_report_link_inc_quota>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(iq_report_free, &idx)) {
    b6cc:	462b      	mov	r3, r5
    b6ce:	1e5d      	subs	r5, r3, #1
    b6d0:	b2ed      	uxtb	r5, r5
    b6d2:	2b00      	cmp	r3, #0
    b6d4:	d0de      	beq.n	b694 <ull_df_rx_iq_report_alloc+0x14>
    b6d6:	4b07      	ldr	r3, [pc, #28]	; (b6f4 <ull_df_rx_iq_report_alloc+0x74>)
    b6d8:	7899      	ldrb	r1, [r3, #2]
    b6da:	791a      	ldrb	r2, [r3, #4]
    b6dc:	795c      	ldrb	r4, [r3, #5]
	last = last + 1;
    b6de:	3401      	adds	r4, #1
    b6e0:	b2e4      	uxtb	r4, r4
	if (last == count) {
    b6e2:	42a1      	cmp	r1, r4
    b6e4:	d1d7      	bne.n	b696 <ull_df_rx_iq_report_alloc+0x16>
		last = 0U;
    b6e6:	2400      	movs	r4, #0
    b6e8:	e7d5      	b.n	b696 <ull_df_rx_iq_report_alloc+0x16>
    b6ea:	bf00      	nop
    b6ec:	20009295 	.word	0x20009295
    b6f0:	200059cc 	.word	0x200059cc
    b6f4:	20000794 	.word	0x20000794

0000b6f8 <init_reset>:
{
    b6f8:	b510      	push	{r4, lr}
	MFIFO_INIT(iq_report_free);
    b6fa:	4b09      	ldr	r3, [pc, #36]	; (b720 <init_reset+0x28>)
    b6fc:	2400      	movs	r4, #0
    b6fe:	715c      	strb	r4, [r3, #5]
    b700:	711c      	strb	r4, [r3, #4]
	mem_init(mem_iq_report.pool, (IQ_REPORT_RX_NODE_POOL_ELEMENT_SIZE),
    b702:	4b08      	ldr	r3, [pc, #32]	; (b724 <init_reset+0x2c>)
    b704:	2220      	movs	r2, #32
    b706:	f44f 71b8 	mov.w	r1, #368	; 0x170
    b70a:	1d18      	adds	r0, r3, #4
    b70c:	f00e fce1 	bl	1a0d2 <mem_init>
	mem_link_iq_report_quota_pdu = IQ_REPORT_CNT;
    b710:	4b05      	ldr	r3, [pc, #20]	; (b728 <init_reset+0x30>)
    b712:	2220      	movs	r2, #32
    b714:	701a      	strb	r2, [r3, #0]
	ull_df_rx_iq_report_alloc(UINT8_MAX);
    b716:	20ff      	movs	r0, #255	; 0xff
    b718:	f7ff ffb2 	bl	b680 <ull_df_rx_iq_report_alloc>
}
    b71c:	4620      	mov	r0, r4
    b71e:	bd10      	pop	{r4, pc}
    b720:	20000794 	.word	0x20000794
    b724:	200059cc 	.word	0x200059cc
    b728:	20009295 	.word	0x20009295

0000b72c <chan_rev_8>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    b72c:	eb00 2280 	add.w	r2, r0, r0, lsl #10
    b730:	4b07      	ldr	r3, [pc, #28]	; (b750 <chan_rev_8+0x24>)
    b732:	ea03 0342 	and.w	r3, r3, r2, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    b736:	4610      	mov	r0, r2
    b738:	4a06      	ldr	r2, [pc, #24]	; (b754 <chan_rev_8+0x28>)
    b73a:	ea02 1040 	and.w	r0, r2, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
    b73e:	4318      	orrs	r0, r3
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
    b740:	eb00 2300 	add.w	r3, r0, r0, lsl #8
    b744:	eb00 2003 	add.w	r0, r0, r3, lsl #8

	return b;
}
    b748:	f3c0 4007 	ubfx	r0, r0, #16, #8
    b74c:	4770      	bx	lr
    b74e:	bf00      	nop
    b750:	00022110 	.word	0x00022110
    b754:	00088440 	.word	0x00088440

0000b758 <lll_chan_sel_2>:
{
    b758:	b538      	push	{r3, r4, r5, lr}
    b75a:	4614      	mov	r4, r2
    b75c:	461d      	mov	r5, r3
	prn_e = chan_prn_e(counter, chan_id);
    b75e:	f010 fd45 	bl	1c1ec <chan_prn_e>
    b762:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
    b764:	4b11      	ldr	r3, [pc, #68]	; (b7ac <lll_chan_sel_2+0x54>)
    b766:	fba3 3c00 	umull	r3, ip, r3, r0
    b76a:	eba0 030c 	sub.w	r3, r0, ip
    b76e:	eb0c 0c53 	add.w	ip, ip, r3, lsr #1
    b772:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    b776:	eb0c 03cc 	add.w	r3, ip, ip, lsl #3
    b77a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
    b77e:	eba0 0c0c 	sub.w	ip, r0, ip
    b782:	fa5f f08c 	uxtb.w	r0, ip
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
    b786:	f3cc 03c4 	ubfx	r3, ip, #3, #5
    b78a:	5ce3      	ldrb	r3, [r4, r3]
    b78c:	f00c 0c07 	and.w	ip, ip, #7
    b790:	fa43 fc0c 	asr.w	ip, r3, ip
    b794:	f01c 0f01 	tst.w	ip, #1
    b798:	d106      	bne.n	b7a8 <lll_chan_sel_2+0x50>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
    b79a:	fb05 f101 	mul.w	r1, r5, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
    b79e:	f3c1 4107 	ubfx	r1, r1, #16, #8
    b7a2:	4620      	mov	r0, r4
    b7a4:	f010 fcdf 	bl	1c166 <chan_sel_remap>
}
    b7a8:	bd38      	pop	{r3, r4, r5, pc}
    b7aa:	bf00      	nop
    b7ac:	bacf914d 	.word	0xbacf914d

0000b7b0 <fal_clear>:
}
#endif /* CONFIG_BT_CTLR_SW_DEFERRED_PRIVACY */

static void fal_clear(void)
{
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
    b7b0:	2300      	movs	r3, #0
    b7b2:	e007      	b.n	b7c4 <fal_clear+0x14>
		uint8_t j = fal[i].rl_idx;

		if (j < ARRAY_SIZE(rl)) {
			rl[j].fal = 0U;
		}
		fal[i].taken = 0U;
    b7b4:	4a0c      	ldr	r2, [pc, #48]	; (b7e8 <fal_clear+0x38>)
    b7b6:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
    b7ba:	f36f 0100 	bfc	r1, #0, #1
    b7be:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
    b7c2:	3301      	adds	r3, #1
    b7c4:	2b07      	cmp	r3, #7
    b7c6:	dc0e      	bgt.n	b7e6 <fal_clear+0x36>
		uint8_t j = fal[i].rl_idx;
    b7c8:	4a07      	ldr	r2, [pc, #28]	; (b7e8 <fal_clear+0x38>)
    b7ca:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    b7ce:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
    b7d0:	2a07      	cmp	r2, #7
    b7d2:	d8ef      	bhi.n	b7b4 <fal_clear+0x4>
			rl[j].fal = 0U;
    b7d4:	4905      	ldr	r1, [pc, #20]	; (b7ec <fal_clear+0x3c>)
    b7d6:	202c      	movs	r0, #44	; 0x2c
    b7d8:	fb00 f202 	mul.w	r2, r0, r2
    b7dc:	5c88      	ldrb	r0, [r1, r2]
    b7de:	f36f 1045 	bfc	r0, #5, #1
    b7e2:	5488      	strb	r0, [r1, r2]
    b7e4:	e7e6      	b.n	b7b4 <fal_clear+0x4>
	}
}
    b7e6:	4770      	bx	lr
    b7e8:	200087d0 	.word	0x200087d0
    b7ec:	20008944 	.word	0x20008944

0000b7f0 <rl_clear>:
}
#endif /* CONFIG_BT_BROADCASTER */

static void rl_clear(void)
{
	for (uint8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    b7f0:	2300      	movs	r3, #0
    b7f2:	e009      	b.n	b808 <rl_clear+0x18>
		rl[i].taken = 0U;
    b7f4:	4907      	ldr	r1, [pc, #28]	; (b814 <rl_clear+0x24>)
    b7f6:	222c      	movs	r2, #44	; 0x2c
    b7f8:	fb03 f202 	mul.w	r2, r3, r2
    b7fc:	5c88      	ldrb	r0, [r1, r2]
    b7fe:	f36f 0000 	bfc	r0, #0, #1
    b802:	5488      	strb	r0, [r1, r2]
	for (uint8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    b804:	3301      	adds	r3, #1
    b806:	b2db      	uxtb	r3, r3
    b808:	2b07      	cmp	r3, #7
    b80a:	d9f3      	bls.n	b7f4 <rl_clear+0x4>
	}

	peer_irk_count = 0U;
    b80c:	4b02      	ldr	r3, [pc, #8]	; (b818 <rl_clear+0x28>)
    b80e:	2200      	movs	r2, #0
    b810:	701a      	strb	r2, [r3, #0]
}
    b812:	4770      	bx	lr
    b814:	20008944 	.word	0x20008944
    b818:	20009296 	.word	0x20009296

0000b81c <pal_clear>:
#endif /* CONFIG_BT_CTLR_FILTER_ACCEPT_LIST */

#if defined(CONFIG_BT_CTLR_SYNC_PERIODIC_ADV_LIST)
static void pal_clear(void)
{
	for (int i = 0; i < PAL_SIZE; i++) {
    b81c:	2300      	movs	r3, #0
    b81e:	e008      	b.n	b832 <pal_clear+0x16>
		if (j < ARRAY_SIZE(pal)) {
			rl[j].pal = 0U;
		}
#endif /* CONFIG_BT_CTLR_PRIVACY */

		pal[i].taken = 0U;
    b820:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    b824:	4a0c      	ldr	r2, [pc, #48]	; (b858 <pal_clear+0x3c>)
    b826:	440a      	add	r2, r1
    b828:	7991      	ldrb	r1, [r2, #6]
    b82a:	f36f 0100 	bfc	r1, #0, #1
    b82e:	7191      	strb	r1, [r2, #6]
	for (int i = 0; i < PAL_SIZE; i++) {
    b830:	3301      	adds	r3, #1
    b832:	2b07      	cmp	r3, #7
    b834:	dc0f      	bgt.n	b856 <pal_clear+0x3a>
		uint8_t j = pal[i].rl_idx;
    b836:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
    b83a:	4a07      	ldr	r2, [pc, #28]	; (b858 <pal_clear+0x3c>)
    b83c:	440a      	add	r2, r1
    b83e:	7a11      	ldrb	r1, [r2, #8]
		if (j < ARRAY_SIZE(pal)) {
    b840:	2907      	cmp	r1, #7
    b842:	d8ed      	bhi.n	b820 <pal_clear+0x4>
			rl[j].pal = 0U;
    b844:	4a05      	ldr	r2, [pc, #20]	; (b85c <pal_clear+0x40>)
    b846:	202c      	movs	r0, #44	; 0x2c
    b848:	fb00 2201 	mla	r2, r0, r1, r2
    b84c:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    b84e:	f36f 0108 	bfc	r1, #0, #9
    b852:	8511      	strh	r1, [r2, #40]	; 0x28
    b854:	e7e4      	b.n	b820 <pal_clear+0x4>
	}
}
    b856:	4770      	bx	lr
    b858:	20008874 	.word	0x20008874
    b85c:	20008944 	.word	0x20008944

0000b860 <fal_find>:
{
    b860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b862:	4606      	mov	r6, r0
    b864:	460f      	mov	r7, r1
	if (free_idx) {
    b866:	4615      	mov	r5, r2
    b868:	b10a      	cbz	r2, b86e <fal_find+0xe>
		*free_idx = FILTER_IDX_NONE;
    b86a:	23ff      	movs	r3, #255	; 0xff
    b86c:	7013      	strb	r3, [r2, #0]
{
    b86e:	2400      	movs	r4, #0
    b870:	e00b      	b.n	b88a <fal_find+0x2a>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    b872:	4816      	ldr	r0, [pc, #88]	; (b8cc <fal_find+0x6c>)
    b874:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    b878:	2206      	movs	r2, #6
    b87a:	4639      	mov	r1, r7
    b87c:	3002      	adds	r0, #2
    b87e:	f009 f885 	bl	1498c <memcmp>
    b882:	b998      	cbnz	r0, b8ac <fal_find+0x4c>
			return i;
    b884:	b2e0      	uxtb	r0, r4
    b886:	e01f      	b.n	b8c8 <fal_find+0x68>
	for (i = 0; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
    b888:	3401      	adds	r4, #1
    b88a:	2c07      	cmp	r4, #7
    b88c:	dc1b      	bgt.n	b8c6 <fal_find+0x66>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
    b88e:	4b0f      	ldr	r3, [pc, #60]	; (b8cc <fal_find+0x6c>)
    b890:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    b894:	f013 0f01 	tst.w	r3, #1
    b898:	d008      	beq.n	b8ac <fal_find+0x4c>
    b89a:	4b0c      	ldr	r3, [pc, #48]	; (b8cc <fal_find+0x6c>)
    b89c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    b8a0:	f3c3 0340 	ubfx	r3, r3, #1, #1
    b8a4:	f006 0201 	and.w	r2, r6, #1
    b8a8:	4293      	cmp	r3, r2
    b8aa:	d0e2      	beq.n	b872 <fal_find+0x12>
		} else if (free_idx && !fal[i].taken &&
    b8ac:	2d00      	cmp	r5, #0
    b8ae:	d0eb      	beq.n	b888 <fal_find+0x28>
    b8b0:	4b06      	ldr	r3, [pc, #24]	; (b8cc <fal_find+0x6c>)
    b8b2:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    b8b6:	f013 0f01 	tst.w	r3, #1
    b8ba:	d1e5      	bne.n	b888 <fal_find+0x28>
			   (*free_idx == FILTER_IDX_NONE)) {
    b8bc:	782b      	ldrb	r3, [r5, #0]
		} else if (free_idx && !fal[i].taken &&
    b8be:	2bff      	cmp	r3, #255	; 0xff
    b8c0:	d1e2      	bne.n	b888 <fal_find+0x28>
			*free_idx = i;
    b8c2:	702c      	strb	r4, [r5, #0]
    b8c4:	e7e0      	b.n	b888 <fal_find+0x28>
	return FILTER_IDX_NONE;
    b8c6:	20ff      	movs	r0, #255	; 0xff
}
    b8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b8ca:	bf00      	nop
    b8cc:	200087d0 	.word	0x200087d0

0000b8d0 <fal_remove>:
{
    b8d0:	b508      	push	{r3, lr}
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
    b8d2:	4601      	mov	r1, r0
    b8d4:	f811 0b01 	ldrb.w	r0, [r1], #1
    b8d8:	2200      	movs	r2, #0
    b8da:	f7ff ffc1 	bl	b860 <fal_find>
	if (i < ARRAY_SIZE(fal)) {
    b8de:	2807      	cmp	r0, #7
    b8e0:	d901      	bls.n	b8e6 <fal_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    b8e2:	2002      	movs	r0, #2
}
    b8e4:	bd08      	pop	{r3, pc}
		uint8_t j = fal[i].rl_idx;
    b8e6:	4b0b      	ldr	r3, [pc, #44]	; (b914 <fal_remove+0x44>)
    b8e8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    b8ec:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
    b8ee:	2b07      	cmp	r3, #7
    b8f0:	d807      	bhi.n	b902 <fal_remove+0x32>
			rl[j].fal = 0U;
    b8f2:	4a09      	ldr	r2, [pc, #36]	; (b918 <fal_remove+0x48>)
    b8f4:	212c      	movs	r1, #44	; 0x2c
    b8f6:	fb01 f303 	mul.w	r3, r1, r3
    b8fa:	5cd1      	ldrb	r1, [r2, r3]
    b8fc:	f36f 1145 	bfc	r1, #5, #1
    b900:	54d1      	strb	r1, [r2, r3]
		fal[i].taken = 0U;
    b902:	4b04      	ldr	r3, [pc, #16]	; (b914 <fal_remove+0x44>)
    b904:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
    b908:	f36f 0200 	bfc	r2, #0, #1
    b90c:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
    b910:	2000      	movs	r0, #0
    b912:	e7e7      	b.n	b8e4 <fal_remove+0x14>
    b914:	200087d0 	.word	0x200087d0
    b918:	20008944 	.word	0x20008944

0000b91c <pal_addr_find>:

#if defined(CONFIG_BT_CTLR_PRIVACY)
static uint8_t pal_addr_find(const uint8_t addr_type, const uint8_t *const addr)
{
    b91c:	b570      	push	{r4, r5, r6, lr}
    b91e:	4605      	mov	r5, r0
    b920:	460e      	mov	r6, r1
	for (int i = 0; i < PAL_SIZE; i++) {
    b922:	2400      	movs	r4, #0
    b924:	e000      	b.n	b928 <pal_addr_find+0xc>
    b926:	3401      	adds	r4, #1
    b928:	2c07      	cmp	r4, #7
    b92a:	dc1c      	bgt.n	b966 <pal_addr_find+0x4a>
		if (PAL_ADDR_MATCH(addr_type, addr)) {
    b92c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    b930:	4b0e      	ldr	r3, [pc, #56]	; (b96c <pal_addr_find+0x50>)
    b932:	4413      	add	r3, r2
    b934:	799b      	ldrb	r3, [r3, #6]
    b936:	f013 0f01 	tst.w	r3, #1
    b93a:	d0f4      	beq.n	b926 <pal_addr_find+0xa>
    b93c:	4b0b      	ldr	r3, [pc, #44]	; (b96c <pal_addr_find+0x50>)
    b93e:	4413      	add	r3, r2
    b940:	799b      	ldrb	r3, [r3, #6]
    b942:	f3c3 0340 	ubfx	r3, r3, #1, #1
    b946:	f005 0201 	and.w	r2, r5, #1
    b94a:	4293      	cmp	r3, r2
    b94c:	d1eb      	bne.n	b926 <pal_addr_find+0xa>
    b94e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    b952:	2206      	movs	r2, #6
    b954:	4631      	mov	r1, r6
    b956:	4805      	ldr	r0, [pc, #20]	; (b96c <pal_addr_find+0x50>)
    b958:	4418      	add	r0, r3
    b95a:	f009 f817 	bl	1498c <memcmp>
    b95e:	2800      	cmp	r0, #0
    b960:	d1e1      	bne.n	b926 <pal_addr_find+0xa>
			return i;
    b962:	b2e0      	uxtb	r0, r4
    b964:	e000      	b.n	b968 <pal_addr_find+0x4c>
		}
	}

	return FILTER_IDX_NONE;
    b966:	20ff      	movs	r0, #255	; 0xff
}
    b968:	bd70      	pop	{r4, r5, r6, pc}
    b96a:	bf00      	nop
    b96c:	20008874 	.word	0x20008874

0000b970 <pal_find>:
#endif /* CONFIG_BT_CTLR_PRIVACY */

static uint8_t pal_find(const uint8_t addr_type, const uint8_t *const addr,
			const uint8_t sid, uint8_t *const free_idx)
{
    b970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b974:	4606      	mov	r6, r0
    b976:	460f      	mov	r7, r1
    b978:	4690      	mov	r8, r2
	int i;

	if (free_idx) {
    b97a:	461d      	mov	r5, r3
    b97c:	b10b      	cbz	r3, b982 <pal_find+0x12>
		*free_idx = FILTER_IDX_NONE;
    b97e:	23ff      	movs	r3, #255	; 0xff
    b980:	702b      	strb	r3, [r5, #0]
{
    b982:	2400      	movs	r4, #0
    b984:	e012      	b.n	b9ac <pal_find+0x3c>
	}

	for (i = 0; i < PAL_SIZE; i++) {
		if (PAL_MATCH(addr_type, addr, sid)) {
    b986:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    b98a:	2206      	movs	r2, #6
    b98c:	4639      	mov	r1, r7
    b98e:	481a      	ldr	r0, [pc, #104]	; (b9f8 <pal_find+0x88>)
    b990:	4418      	add	r0, r3
    b992:	f008 fffb 	bl	1498c <memcmp>
    b996:	b9e0      	cbnz	r0, b9d2 <pal_find+0x62>
    b998:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    b99c:	4b16      	ldr	r3, [pc, #88]	; (b9f8 <pal_find+0x88>)
    b99e:	4413      	add	r3, r2
    b9a0:	79db      	ldrb	r3, [r3, #7]
    b9a2:	4543      	cmp	r3, r8
    b9a4:	d115      	bne.n	b9d2 <pal_find+0x62>
			return i;
    b9a6:	b2e0      	uxtb	r0, r4
    b9a8:	e023      	b.n	b9f2 <pal_find+0x82>
	for (i = 0; i < PAL_SIZE; i++) {
    b9aa:	3401      	adds	r4, #1
    b9ac:	2c07      	cmp	r4, #7
    b9ae:	dc1f      	bgt.n	b9f0 <pal_find+0x80>
		if (PAL_MATCH(addr_type, addr, sid)) {
    b9b0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    b9b4:	4b10      	ldr	r3, [pc, #64]	; (b9f8 <pal_find+0x88>)
    b9b6:	4413      	add	r3, r2
    b9b8:	799b      	ldrb	r3, [r3, #6]
    b9ba:	f013 0f01 	tst.w	r3, #1
    b9be:	d008      	beq.n	b9d2 <pal_find+0x62>
    b9c0:	4b0d      	ldr	r3, [pc, #52]	; (b9f8 <pal_find+0x88>)
    b9c2:	4413      	add	r3, r2
    b9c4:	799b      	ldrb	r3, [r3, #6]
    b9c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    b9ca:	f006 0201 	and.w	r2, r6, #1
    b9ce:	4293      	cmp	r3, r2
    b9d0:	d0d9      	beq.n	b986 <pal_find+0x16>
		} else if (free_idx && !pal[i].taken &&
    b9d2:	2d00      	cmp	r5, #0
    b9d4:	d0e9      	beq.n	b9aa <pal_find+0x3a>
    b9d6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    b9da:	4b07      	ldr	r3, [pc, #28]	; (b9f8 <pal_find+0x88>)
    b9dc:	4413      	add	r3, r2
    b9de:	799b      	ldrb	r3, [r3, #6]
    b9e0:	f013 0f01 	tst.w	r3, #1
    b9e4:	d1e1      	bne.n	b9aa <pal_find+0x3a>
			   (*free_idx == FILTER_IDX_NONE)) {
    b9e6:	782b      	ldrb	r3, [r5, #0]
		} else if (free_idx && !pal[i].taken &&
    b9e8:	2bff      	cmp	r3, #255	; 0xff
    b9ea:	d1de      	bne.n	b9aa <pal_find+0x3a>
			*free_idx = i;
    b9ec:	702c      	strb	r4, [r5, #0]
    b9ee:	e7dc      	b.n	b9aa <pal_find+0x3a>
		}
	}

	return FILTER_IDX_NONE;
    b9f0:	20ff      	movs	r0, #255	; 0xff
}
    b9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9f6:	bf00      	nop
    b9f8:	20008874 	.word	0x20008874

0000b9fc <pal_remove>:

	return 0;
}

static uint32_t pal_remove(const bt_addr_le_t *const id_addr, const uint8_t sid)
{
    b9fc:	b508      	push	{r3, lr}
    b9fe:	460a      	mov	r2, r1
	/* find the device and mark it as empty */
	uint8_t i = pal_find(id_addr->type, id_addr->a.val, sid, NULL);
    ba00:	4601      	mov	r1, r0
    ba02:	f811 0b01 	ldrb.w	r0, [r1], #1
    ba06:	2300      	movs	r3, #0
    ba08:	f7ff ffb2 	bl	b970 <pal_find>

	if (i < PAL_SIZE) {
    ba0c:	2807      	cmp	r0, #7
    ba0e:	d901      	bls.n	ba14 <pal_remove+0x18>
		pal[i].taken = 0U;

		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_ADV_IDENTIFIER;
    ba10:	2042      	movs	r0, #66	; 0x42
}
    ba12:	bd08      	pop	{r3, pc}
		uint8_t j = pal[i].rl_idx;
    ba14:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    ba18:	4b0b      	ldr	r3, [pc, #44]	; (ba48 <pal_remove+0x4c>)
    ba1a:	4413      	add	r3, r2
    ba1c:	7a1a      	ldrb	r2, [r3, #8]
		if (j < ARRAY_SIZE(rl)) {
    ba1e:	2a07      	cmp	r2, #7
    ba20:	d807      	bhi.n	ba32 <pal_remove+0x36>
			rl[j].pal = 0U;
    ba22:	4b0a      	ldr	r3, [pc, #40]	; (ba4c <pal_remove+0x50>)
    ba24:	212c      	movs	r1, #44	; 0x2c
    ba26:	fb01 3302 	mla	r3, r1, r2, r3
    ba2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    ba2c:	f36f 0208 	bfc	r2, #0, #9
    ba30:	851a      	strh	r2, [r3, #40]	; 0x28
		pal[i].taken = 0U;
    ba32:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    ba36:	4b04      	ldr	r3, [pc, #16]	; (ba48 <pal_remove+0x4c>)
    ba38:	4418      	add	r0, r3
    ba3a:	7983      	ldrb	r3, [r0, #6]
    ba3c:	f36f 0300 	bfc	r3, #0, #1
    ba40:	7183      	strb	r3, [r0, #6]
		return 0;
    ba42:	2000      	movs	r0, #0
    ba44:	e7e5      	b.n	ba12 <pal_remove+0x16>
    ba46:	bf00      	nop
    ba48:	20008874 	.word	0x20008874
    ba4c:	20008944 	.word	0x20008944

0000ba50 <fal_update>:
{
    ba50:	b510      	push	{r4, lr}
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
    ba52:	2400      	movs	r4, #0
    ba54:	e00c      	b.n	ba70 <fal_update+0x20>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
    ba56:	4b18      	ldr	r3, [pc, #96]	; (bab8 <fal_update+0x68>)
    ba58:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      fal[i].id_addr.val);
    ba5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
    ba60:	3302      	adds	r3, #2
    ba62:	f3c2 0240 	ubfx	r2, r2, #1, #1
    ba66:	4815      	ldr	r0, [pc, #84]	; (babc <fal_update+0x6c>)
    ba68:	f010 fbfd 	bl	1c266 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_FAL_SIZE; i++) {
    ba6c:	3401      	adds	r4, #1
    ba6e:	b2e4      	uxtb	r4, r4
    ba70:	2c07      	cmp	r4, #7
    ba72:	d820      	bhi.n	bab6 <fal_update+0x66>
		if (!fal[i].taken) {
    ba74:	4621      	mov	r1, r4
    ba76:	4b10      	ldr	r3, [pc, #64]	; (bab8 <fal_update+0x68>)
    ba78:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    ba7c:	f013 0f01 	tst.w	r3, #1
    ba80:	d0f4      	beq.n	ba6c <fal_update+0x1c>
		j = fal[i].rl_idx;
    ba82:	4b0d      	ldr	r3, [pc, #52]	; (bab8 <fal_update+0x68>)
    ba84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    ba88:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    ba8a:	4a0d      	ldr	r2, [pc, #52]	; (bac0 <fal_update+0x70>)
    ba8c:	7812      	ldrb	r2, [r2, #0]
    ba8e:	2a00      	cmp	r2, #0
    ba90:	d0e1      	beq.n	ba56 <fal_update+0x6>
    ba92:	2b07      	cmp	r3, #7
    ba94:	d8df      	bhi.n	ba56 <fal_update+0x6>
    ba96:	222c      	movs	r2, #44	; 0x2c
    ba98:	fb03 f202 	mul.w	r2, r3, r2
    ba9c:	4809      	ldr	r0, [pc, #36]	; (bac4 <fal_update+0x74>)
    ba9e:	5c82      	ldrb	r2, [r0, r2]
    baa0:	f012 0f04 	tst.w	r2, #4
    baa4:	d0d7      	beq.n	ba56 <fal_update+0x6>
		    rl[j].dev) {
    baa6:	222c      	movs	r2, #44	; 0x2c
    baa8:	fb02 f303 	mul.w	r3, r2, r3
    baac:	5cc3      	ldrb	r3, [r0, r3]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
    baae:	f013 0f10 	tst.w	r3, #16
    bab2:	d0db      	beq.n	ba6c <fal_update+0x1c>
    bab4:	e7cf      	b.n	ba56 <fal_update+0x6>
}
    bab6:	bd10      	pop	{r4, pc}
    bab8:	200087d0 	.word	0x200087d0
    babc:	20008810 	.word	0x20008810
    bac0:	20009297 	.word	0x20009297
    bac4:	20008944 	.word	0x20008944

0000bac8 <rl_update>:
{
    bac8:	b510      	push	{r4, lr}
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    baca:	2400      	movs	r4, #0
    bacc:	e001      	b.n	bad2 <rl_update+0xa>
    bace:	3401      	adds	r4, #1
    bad0:	b2e4      	uxtb	r4, r4
    bad2:	2c07      	cmp	r4, #7
    bad4:	d815      	bhi.n	bb02 <rl_update+0x3a>
		if (rl[i].taken) {
    bad6:	232c      	movs	r3, #44	; 0x2c
    bad8:	fb04 f303 	mul.w	r3, r4, r3
    badc:	4a09      	ldr	r2, [pc, #36]	; (bb04 <rl_update+0x3c>)
    bade:	5cd3      	ldrb	r3, [r2, r3]
    bae0:	f013 0f01 	tst.w	r3, #1
    bae4:	d0f3      	beq.n	bace <rl_update+0x6>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
    bae6:	4611      	mov	r1, r2
    bae8:	222c      	movs	r2, #44	; 0x2c
    baea:	fb04 f202 	mul.w	r2, r4, r2
    baee:	188b      	adds	r3, r1, r2
    baf0:	5c8a      	ldrb	r2, [r1, r2]
    baf2:	3301      	adds	r3, #1
    baf4:	f3c2 1280 	ubfx	r2, r2, #6, #1
    baf8:	4621      	mov	r1, r4
    bafa:	4803      	ldr	r0, [pc, #12]	; (bb08 <rl_update+0x40>)
    bafc:	f010 fbb3 	bl	1c266 <filter_insert>
    bb00:	e7e5      	b.n	bace <rl_update+0x6>
}
    bb02:	bd10      	pop	{r4, pc}
    bb04:	20008944 	.word	0x20008944
    bb08:	20008aa4 	.word	0x20008aa4

0000bb0c <rl_access_check>:
{
    bb0c:	b508      	push	{r3, lr}
	if (check_ar) {
    bb0e:	b110      	cbz	r0, bb16 <rl_access_check+0xa>
		if (!rl_enable) {
    bb10:	4b07      	ldr	r3, [pc, #28]	; (bb30 <rl_access_check+0x24>)
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	b143      	cbz	r3, bb28 <rl_access_check+0x1c>
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
    bb16:	2000      	movs	r0, #0
    bb18:	f010 f977 	bl	1be0a <ull_scan_is_enabled>
		? 0 : 1;
    bb1c:	f030 0301 	bics.w	r3, r0, #1
    bb20:	bf0c      	ite	eq
    bb22:	2001      	moveq	r0, #1
    bb24:	2000      	movne	r0, #0
}
    bb26:	bd08      	pop	{r3, pc}
			return -1;
    bb28:	f04f 30ff 	mov.w	r0, #4294967295
    bb2c:	e7fb      	b.n	bb26 <rl_access_check+0x1a>
    bb2e:	bf00      	nop
    bb30:	20009297 	.word	0x20009297

0000bb34 <rpa_refresh_stop>:
{
    bb34:	b508      	push	{r3, lr}
	k_work_cancel_delayable(&rpa_work);
    bb36:	4802      	ldr	r0, [pc, #8]	; (bb40 <rpa_refresh_stop+0xc>)
    bb38:	f012 f981 	bl	1de3e <k_work_cancel_delayable>
}
    bb3c:	bd08      	pop	{r3, pc}
    bb3e:	bf00      	nop
    bb40:	20001248 	.word	0x20001248

0000bb44 <rpa_refresh_start>:
{
    bb44:	b508      	push	{r3, lr}
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
    bb46:	4b0a      	ldr	r3, [pc, #40]	; (bb70 <rpa_refresh_start+0x2c>)
    bb48:	6818      	ldr	r0, [r3, #0]
			return ((t * to_hz + off) / from_hz);
    bb4a:	0c41      	lsrs	r1, r0, #17
    bb4c:	03c0      	lsls	r0, r0, #15
    bb4e:	f240 33e7 	movw	r3, #999	; 0x3e7
    bb52:	18c0      	adds	r0, r0, r3
    bb54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bb58:	f04f 0300 	mov.w	r3, #0
    bb5c:	f141 0100 	adc.w	r1, r1, #0
    bb60:	f7f5 fb2a 	bl	11b8 <__aeabi_uldivmod>
    bb64:	4602      	mov	r2, r0
    bb66:	460b      	mov	r3, r1
    bb68:	4802      	ldr	r0, [pc, #8]	; (bb74 <rpa_refresh_start+0x30>)
    bb6a:	f007 fba1 	bl	132b0 <k_work_schedule>
}
    bb6e:	bd08      	pop	{r3, pc}
    bb70:	20008ad8 	.word	0x20008ad8
    bb74:	20001248 	.word	0x20001248

0000bb78 <ll_rl_id_addr_get>:
{
    bb78:	b570      	push	{r4, r5, r6, lr}
    bb7a:	4604      	mov	r4, r0
    bb7c:	460e      	mov	r6, r1
    bb7e:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    bb80:	2807      	cmp	r0, #7
    bb82:	d817      	bhi.n	bbb4 <ll_rl_id_addr_get+0x3c>
	LL_ASSERT(rl[rl_idx].taken);
    bb84:	232c      	movs	r3, #44	; 0x2c
    bb86:	fb04 f303 	mul.w	r3, r4, r3
    bb8a:	4a18      	ldr	r2, [pc, #96]	; (bbec <ll_rl_id_addr_get+0x74>)
    bb8c:	5cd3      	ldrb	r3, [r2, r3]
    bb8e:	f013 0f01 	tst.w	r3, #1
    bb92:	d01d      	beq.n	bbd0 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
    bb94:	4b15      	ldr	r3, [pc, #84]	; (bbec <ll_rl_id_addr_get+0x74>)
    bb96:	202c      	movs	r0, #44	; 0x2c
    bb98:	fb00 f404 	mul.w	r4, r0, r4
    bb9c:	191a      	adds	r2, r3, r4
    bb9e:	5d1b      	ldrb	r3, [r3, r4]
    bba0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    bba4:	7033      	strb	r3, [r6, #0]
    bba6:	f8d2 3001 	ldr.w	r3, [r2, #1]
    bbaa:	602b      	str	r3, [r5, #0]
    bbac:	f8b2 3005 	ldrh.w	r3, [r2, #5]
    bbb0:	80ab      	strh	r3, [r5, #4]
}
    bbb2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
    bbb4:	f44f 7389 	mov.w	r3, #274	; 0x112
    bbb8:	4a0d      	ldr	r2, [pc, #52]	; (bbf0 <ll_rl_id_addr_get+0x78>)
    bbba:	490e      	ldr	r1, [pc, #56]	; (bbf4 <ll_rl_id_addr_get+0x7c>)
    bbbc:	480e      	ldr	r0, [pc, #56]	; (bbf8 <ll_rl_id_addr_get+0x80>)
    bbbe:	f00d fe06 	bl	197ce <assert_print>
    bbc2:	4040      	eors	r0, r0
    bbc4:	f380 8811 	msr	BASEPRI, r0
    bbc8:	f04f 0003 	mov.w	r0, #3
    bbcc:	df02      	svc	2
    bbce:	e7d9      	b.n	bb84 <ll_rl_id_addr_get+0xc>
	LL_ASSERT(rl[rl_idx].taken);
    bbd0:	f240 1313 	movw	r3, #275	; 0x113
    bbd4:	4a06      	ldr	r2, [pc, #24]	; (bbf0 <ll_rl_id_addr_get+0x78>)
    bbd6:	4909      	ldr	r1, [pc, #36]	; (bbfc <ll_rl_id_addr_get+0x84>)
    bbd8:	4807      	ldr	r0, [pc, #28]	; (bbf8 <ll_rl_id_addr_get+0x80>)
    bbda:	f00d fdf8 	bl	197ce <assert_print>
    bbde:	4040      	eors	r0, r0
    bbe0:	f380 8811 	msr	BASEPRI, r0
    bbe4:	f04f 0003 	mov.w	r0, #3
    bbe8:	df02      	svc	2
    bbea:	e7d3      	b.n	bb94 <ll_rl_id_addr_get+0x1c>
    bbec:	20008944 	.word	0x20008944
    bbf0:	0001f180 	.word	0x0001f180
    bbf4:	0001f1c4 	.word	0x0001f1c4
    bbf8:	0001e920 	.word	0x0001e920
    bbfc:	0001f1d0 	.word	0x0001f1d0

0000bc00 <ll_rl_enable>:
{
    bc00:	b510      	push	{r4, lr}
    bc02:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
    bc04:	2000      	movs	r0, #0
    bc06:	f7ff ff81 	bl	bb0c <rl_access_check>
    bc0a:	b170      	cbz	r0, bc2a <ll_rl_enable+0x2a>
	switch (enable) {
    bc0c:	b11c      	cbz	r4, bc16 <ll_rl_enable+0x16>
    bc0e:	2c01      	cmp	r4, #1
    bc10:	d006      	beq.n	bc20 <ll_rl_enable+0x20>
    bc12:	2012      	movs	r0, #18
}
    bc14:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
    bc16:	4b06      	ldr	r3, [pc, #24]	; (bc30 <ll_rl_enable+0x30>)
    bc18:	2200      	movs	r2, #0
    bc1a:	701a      	strb	r2, [r3, #0]
	return 0;
    bc1c:	4620      	mov	r0, r4
		break;
    bc1e:	e7f9      	b.n	bc14 <ll_rl_enable+0x14>
		rl_enable = 1U;
    bc20:	4b03      	ldr	r3, [pc, #12]	; (bc30 <ll_rl_enable+0x30>)
    bc22:	2201      	movs	r2, #1
    bc24:	701a      	strb	r2, [r3, #0]
	return 0;
    bc26:	2000      	movs	r0, #0
		break;
    bc28:	e7f4      	b.n	bc14 <ll_rl_enable+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
    bc2a:	200c      	movs	r0, #12
    bc2c:	e7f2      	b.n	bc14 <ll_rl_enable+0x14>
    bc2e:	bf00      	nop
    bc30:	20009297 	.word	0x20009297

0000bc34 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
    bc34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    bc38:	fb03 f000 	mul.w	r0, r3, r0
    bc3c:	4b01      	ldr	r3, [pc, #4]	; (bc44 <ll_rl_timeout_set+0x10>)
    bc3e:	6018      	str	r0, [r3, #0]
}
    bc40:	4770      	bx	lr
    bc42:	bf00      	nop
    bc44:	20008ad8 	.word	0x20008ad8

0000bc48 <ull_filter_ull_pal_addr_match>:
{
    bc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc4a:	4606      	mov	r6, r0
    bc4c:	460f      	mov	r7, r1
	for (int i = 0; i < PAL_SIZE; i++) {
    bc4e:	2400      	movs	r4, #0
    bc50:	e000      	b.n	bc54 <ull_filter_ull_pal_addr_match+0xc>
    bc52:	3401      	adds	r4, #1
    bc54:	2c07      	cmp	r4, #7
    bc56:	dc1b      	bgt.n	bc90 <ull_filter_ull_pal_addr_match+0x48>
		if (PAL_ADDR_MATCH(addr_type, addr)) {
    bc58:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    bc5c:	4b0e      	ldr	r3, [pc, #56]	; (bc98 <ull_filter_ull_pal_addr_match+0x50>)
    bc5e:	4413      	add	r3, r2
    bc60:	799b      	ldrb	r3, [r3, #6]
    bc62:	f013 0501 	ands.w	r5, r3, #1
    bc66:	d0f4      	beq.n	bc52 <ull_filter_ull_pal_addr_match+0xa>
    bc68:	4b0b      	ldr	r3, [pc, #44]	; (bc98 <ull_filter_ull_pal_addr_match+0x50>)
    bc6a:	4413      	add	r3, r2
    bc6c:	799b      	ldrb	r3, [r3, #6]
    bc6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    bc72:	f006 0201 	and.w	r2, r6, #1
    bc76:	4293      	cmp	r3, r2
    bc78:	d1eb      	bne.n	bc52 <ull_filter_ull_pal_addr_match+0xa>
    bc7a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    bc7e:	2206      	movs	r2, #6
    bc80:	4639      	mov	r1, r7
    bc82:	4805      	ldr	r0, [pc, #20]	; (bc98 <ull_filter_ull_pal_addr_match+0x50>)
    bc84:	4418      	add	r0, r3
    bc86:	f008 fe81 	bl	1498c <memcmp>
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d1e1      	bne.n	bc52 <ull_filter_ull_pal_addr_match+0xa>
    bc8e:	e000      	b.n	bc92 <ull_filter_ull_pal_addr_match+0x4a>
	return false;
    bc90:	2500      	movs	r5, #0
}
    bc92:	4628      	mov	r0, r5
    bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc96:	bf00      	nop
    bc98:	20008874 	.word	0x20008874

0000bc9c <ull_filter_ull_pal_match>:
{
    bc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bca0:	4606      	mov	r6, r0
    bca2:	460f      	mov	r7, r1
    bca4:	4690      	mov	r8, r2
	for (int i = 0; i < PAL_SIZE; i++) {
    bca6:	2400      	movs	r4, #0
    bca8:	e000      	b.n	bcac <ull_filter_ull_pal_match+0x10>
    bcaa:	3401      	adds	r4, #1
    bcac:	2c07      	cmp	r4, #7
    bcae:	dc22      	bgt.n	bcf6 <ull_filter_ull_pal_match+0x5a>
		if (PAL_MATCH(addr_type, addr, sid)) {
    bcb0:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    bcb4:	4b12      	ldr	r3, [pc, #72]	; (bd00 <ull_filter_ull_pal_match+0x64>)
    bcb6:	4413      	add	r3, r2
    bcb8:	799b      	ldrb	r3, [r3, #6]
    bcba:	f013 0501 	ands.w	r5, r3, #1
    bcbe:	d0f4      	beq.n	bcaa <ull_filter_ull_pal_match+0xe>
    bcc0:	4b0f      	ldr	r3, [pc, #60]	; (bd00 <ull_filter_ull_pal_match+0x64>)
    bcc2:	4413      	add	r3, r2
    bcc4:	799b      	ldrb	r3, [r3, #6]
    bcc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    bcca:	f006 0201 	and.w	r2, r6, #1
    bcce:	4293      	cmp	r3, r2
    bcd0:	d1eb      	bne.n	bcaa <ull_filter_ull_pal_match+0xe>
    bcd2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    bcd6:	2206      	movs	r2, #6
    bcd8:	4639      	mov	r1, r7
    bcda:	4809      	ldr	r0, [pc, #36]	; (bd00 <ull_filter_ull_pal_match+0x64>)
    bcdc:	4418      	add	r0, r3
    bcde:	f008 fe55 	bl	1498c <memcmp>
    bce2:	2800      	cmp	r0, #0
    bce4:	d1e1      	bne.n	bcaa <ull_filter_ull_pal_match+0xe>
    bce6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    bcea:	4b05      	ldr	r3, [pc, #20]	; (bd00 <ull_filter_ull_pal_match+0x64>)
    bcec:	4413      	add	r3, r2
    bcee:	79db      	ldrb	r3, [r3, #7]
    bcf0:	4543      	cmp	r3, r8
    bcf2:	d1da      	bne.n	bcaa <ull_filter_ull_pal_match+0xe>
    bcf4:	e000      	b.n	bcf8 <ull_filter_ull_pal_match+0x5c>
	return false;
    bcf6:	2500      	movs	r5, #0
}
    bcf8:	4628      	mov	r0, r5
    bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcfe:	bf00      	nop
    bd00:	20008874 	.word	0x20008874

0000bd04 <ull_filter_ull_pal_listed>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    bd04:	2807      	cmp	r0, #7
    bd06:	d834      	bhi.n	bd72 <ull_filter_ull_pal_listed+0x6e>
{
    bd08:	b570      	push	{r4, r5, r6, lr}
    bd0a:	4604      	mov	r4, r0
    bd0c:	460e      	mov	r6, r1
    bd0e:	4615      	mov	r5, r2
	LL_ASSERT(rl[rl_idx].taken);
    bd10:	232c      	movs	r3, #44	; 0x2c
    bd12:	fb00 f303 	mul.w	r3, r0, r3
    bd16:	4a18      	ldr	r2, [pc, #96]	; (bd78 <ull_filter_ull_pal_listed+0x74>)
    bd18:	5cd3      	ldrb	r3, [r2, r3]
    bd1a:	f013 0f01 	tst.w	r3, #1
    bd1e:	d009      	beq.n	bd34 <ull_filter_ull_pal_listed+0x30>
	if (rl[rl_idx].pal) {
    bd20:	4815      	ldr	r0, [pc, #84]	; (bd78 <ull_filter_ull_pal_listed+0x74>)
    bd22:	232c      	movs	r3, #44	; 0x2c
    bd24:	fb03 0404 	mla	r4, r3, r4, r0
    bd28:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    bd2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    bd2e:	b97b      	cbnz	r3, bd50 <ull_filter_ull_pal_listed+0x4c>
	return false;
    bd30:	2000      	movs	r0, #0
}
    bd32:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
    bd34:	f240 235b 	movw	r3, #603	; 0x25b
    bd38:	4a10      	ldr	r2, [pc, #64]	; (bd7c <ull_filter_ull_pal_listed+0x78>)
    bd3a:	4911      	ldr	r1, [pc, #68]	; (bd80 <ull_filter_ull_pal_listed+0x7c>)
    bd3c:	4811      	ldr	r0, [pc, #68]	; (bd84 <ull_filter_ull_pal_listed+0x80>)
    bd3e:	f00d fd46 	bl	197ce <assert_print>
    bd42:	4040      	eors	r0, r0
    bd44:	f380 8811 	msr	BASEPRI, r0
    bd48:	f04f 0003 	mov.w	r0, #3
    bd4c:	df02      	svc	2
    bd4e:	e7e7      	b.n	bd20 <ull_filter_ull_pal_listed+0x1c>
		uint8_t pal_idx = rl[rl_idx].pal - 1;
    bd50:	b2db      	uxtb	r3, r3
    bd52:	3b01      	subs	r3, #1
    bd54:	b2db      	uxtb	r3, r3
		*addr_type = pal[pal_idx].id_addr_type;
    bd56:	480c      	ldr	r0, [pc, #48]	; (bd88 <ull_filter_ull_pal_listed+0x84>)
    bd58:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    bd5c:	18c1      	adds	r1, r0, r3
    bd5e:	798a      	ldrb	r2, [r1, #6]
    bd60:	f3c2 0240 	ubfx	r2, r2, #1, #1
    bd64:	7032      	strb	r2, [r6, #0]
    bd66:	58c3      	ldr	r3, [r0, r3]
    bd68:	602b      	str	r3, [r5, #0]
    bd6a:	888b      	ldrh	r3, [r1, #4]
    bd6c:	80ab      	strh	r3, [r5, #4]
		return true;
    bd6e:	2001      	movs	r0, #1
    bd70:	e7df      	b.n	bd32 <ull_filter_ull_pal_listed+0x2e>
		return false;
    bd72:	2000      	movs	r0, #0
}
    bd74:	4770      	bx	lr
    bd76:	bf00      	nop
    bd78:	20008944 	.word	0x20008944
    bd7c:	0001f180 	.word	0x0001f180
    bd80:	0001f1d0 	.word	0x0001f1d0
    bd84:	0001e920 	.word	0x0001e920
    bd88:	20008874 	.word	0x20008874

0000bd8c <ull_filter_reset>:
{
    bd8c:	b510      	push	{r4, lr}
    bd8e:	4604      	mov	r4, r0
	pal_clear();
    bd90:	f7ff fd44 	bl	b81c <pal_clear>
	fal_clear();
    bd94:	f7ff fd0c 	bl	b7b0 <fal_clear>
	rl_enable = 0U;
    bd98:	4b0c      	ldr	r3, [pc, #48]	; (bdcc <ull_filter_reset+0x40>)
    bd9a:	2200      	movs	r2, #0
    bd9c:	701a      	strb	r2, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
    bd9e:	4b0c      	ldr	r3, [pc, #48]	; (bdd0 <ull_filter_reset+0x44>)
    bda0:	4a0c      	ldr	r2, [pc, #48]	; (bdd4 <ull_filter_reset+0x48>)
    bda2:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
    bda4:	4b0c      	ldr	r3, [pc, #48]	; (bdd8 <ull_filter_reset+0x4c>)
    bda6:	f04f 30ff 	mov.w	r0, #4294967295
    bdaa:	f04f 31ff 	mov.w	r1, #4294967295
    bdae:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
    bdb2:	f7ff fd1d 	bl	b7f0 <rl_clear>
	if (init) {
    bdb6:	b124      	cbz	r4, bdc2 <ull_filter_reset+0x36>
		k_work_init_delayable(&rpa_work, rpa_timeout);
    bdb8:	4908      	ldr	r1, [pc, #32]	; (bddc <ull_filter_reset+0x50>)
    bdba:	4809      	ldr	r0, [pc, #36]	; (bde0 <ull_filter_reset+0x54>)
    bdbc:	f012 f819 	bl	1ddf2 <k_work_init_delayable>
}
    bdc0:	bd10      	pop	{r4, pc}
		k_work_cancel_delayable(&rpa_work);
    bdc2:	4807      	ldr	r0, [pc, #28]	; (bde0 <ull_filter_reset+0x54>)
    bdc4:	f012 f83b 	bl	1de3e <k_work_cancel_delayable>
}
    bdc8:	e7fa      	b.n	bdc0 <ull_filter_reset+0x34>
    bdca:	bf00      	nop
    bdcc:	20009297 	.word	0x20009297
    bdd0:	20008ad8 	.word	0x20008ad8
    bdd4:	000dbba0 	.word	0x000dbba0
    bdd8:	20001240 	.word	0x20001240
    bddc:	0000bfdd 	.word	0x0000bfdd
    bde0:	20001248 	.word	0x20001248

0000bde4 <ull_filter_lll_get>:
	if (filter) {
    bde4:	b908      	cbnz	r0, bdea <ull_filter_lll_get+0x6>
	return &rl_filter;
    bde6:	4802      	ldr	r0, [pc, #8]	; (bdf0 <ull_filter_lll_get+0xc>)
    bde8:	4770      	bx	lr
		return &fal_filter;
    bdea:	4802      	ldr	r0, [pc, #8]	; (bdf4 <ull_filter_lll_get+0x10>)
}
    bdec:	4770      	bx	lr
    bdee:	bf00      	nop
    bdf0:	20008aa4 	.word	0x20008aa4
    bdf4:	20008810 	.word	0x20008810

0000bdf8 <ull_filter_scan_update>:
{
    bdf8:	b510      	push	{r4, lr}
    bdfa:	4604      	mov	r4, r0
	filter_clear(&fal_filter);
    bdfc:	4809      	ldr	r0, [pc, #36]	; (be24 <ull_filter_scan_update+0x2c>)
    bdfe:	f010 fa07 	bl	1c210 <filter_clear>
	if ((scan_fp & 0x1) &&
    be02:	f014 0f01 	tst.w	r4, #1
    be06:	d106      	bne.n	be16 <ull_filter_scan_update+0x1e>
	filter_clear(&rl_filter);
    be08:	4807      	ldr	r0, [pc, #28]	; (be28 <ull_filter_scan_update+0x30>)
    be0a:	f010 fa01 	bl	1c210 <filter_clear>
	if (rl_enable &&
    be0e:	4b07      	ldr	r3, [pc, #28]	; (be2c <ull_filter_scan_update+0x34>)
    be10:	781b      	ldrb	r3, [r3, #0]
    be12:	b91b      	cbnz	r3, be1c <ull_filter_scan_update+0x24>
}
    be14:	bd10      	pop	{r4, pc}
		fal_update();
    be16:	f7ff fe1b 	bl	ba50 <fal_update>
    be1a:	e7f5      	b.n	be08 <ull_filter_scan_update+0x10>
		rl_update();
    be1c:	f7ff fe54 	bl	bac8 <rl_update>
}
    be20:	e7f8      	b.n	be14 <ull_filter_scan_update+0x1c>
    be22:	bf00      	nop
    be24:	20008810 	.word	0x20008810
    be28:	20008aa4 	.word	0x20008aa4
    be2c:	20009297 	.word	0x20009297

0000be30 <ull_filter_rpa_update>:
{
    be30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be34:	b084      	sub	sp, #16
    be36:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
    be38:	f012 f9f8 	bl	1e22c <z_impl_k_uptime_ticks>
    be3c:	014a      	lsls	r2, r1, #5
    be3e:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    be42:	0143      	lsls	r3, r0, #5
    be44:	1a1b      	subs	r3, r3, r0
    be46:	eb62 0201 	sbc.w	r2, r2, r1
    be4a:	0096      	lsls	r6, r2, #2
    be4c:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
    be50:	009b      	lsls	r3, r3, #2
    be52:	181b      	adds	r3, r3, r0
    be54:	eb46 0601 	adc.w	r6, r6, r1
    be58:	00f6      	lsls	r6, r6, #3
    be5a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
    be5e:	f3c3 3310 	ubfx	r3, r3, #12, #17
    be62:	ea4f 38d6 	mov.w	r8, r6, lsr #15
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    be66:	ea43 4646 	orr.w	r6, r3, r6, lsl #17
	bool all = timeout || (rpa_last_ms == -1) ||
    be6a:	b99c      	cbnz	r4, be94 <ull_filter_rpa_update+0x64>
    be6c:	4a53      	ldr	r2, [pc, #332]	; (bfbc <ull_filter_rpa_update+0x18c>)
    be6e:	6813      	ldr	r3, [r2, #0]
    be70:	6852      	ldr	r2, [r2, #4]
    be72:	f1b2 3fff 	cmp.w	r2, #4294967295
    be76:	bf08      	it	eq
    be78:	f1b3 3fff 	cmpeq.w	r3, #4294967295
    be7c:	d00d      	beq.n	be9a <ull_filter_rpa_update+0x6a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
    be7e:	1af3      	subs	r3, r6, r3
    be80:	eb68 0202 	sbc.w	r2, r8, r2
    be84:	494e      	ldr	r1, [pc, #312]	; (bfc0 <ull_filter_rpa_update+0x190>)
    be86:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
    be88:	428b      	cmp	r3, r1
    be8a:	f172 0300 	sbcs.w	r3, r2, #0
    be8e:	db06      	blt.n	be9e <ull_filter_rpa_update+0x6e>
    be90:	2701      	movs	r7, #1
    be92:	e000      	b.n	be96 <ull_filter_rpa_update+0x66>
    be94:	2701      	movs	r7, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    be96:	2400      	movs	r4, #0
    be98:	e01d      	b.n	bed6 <ull_filter_rpa_update+0xa6>
	bool all = timeout || (rpa_last_ms == -1) ||
    be9a:	2701      	movs	r7, #1
    be9c:	e7fb      	b.n	be96 <ull_filter_rpa_update+0x66>
    be9e:	2700      	movs	r7, #0
    bea0:	e7f9      	b.n	be96 <ull_filter_rpa_update+0x66>
			if (rl[i].pirk) {
    bea2:	232c      	movs	r3, #44	; 0x2c
    bea4:	fb05 f303 	mul.w	r3, r5, r3
    bea8:	4a46      	ldr	r2, [pc, #280]	; (bfc4 <ull_filter_rpa_update+0x194>)
    beaa:	5cd3      	ldrb	r3, [r2, r3]
    beac:	f013 0f04 	tst.w	r3, #4
    beb0:	d126      	bne.n	bf00 <ull_filter_rpa_update+0xd0>
			if (rl[i].lirk) {
    beb2:	232c      	movs	r3, #44	; 0x2c
    beb4:	fb05 f303 	mul.w	r3, r5, r3
    beb8:	4a42      	ldr	r2, [pc, #264]	; (bfc4 <ull_filter_rpa_update+0x194>)
    beba:	5cd3      	ldrb	r3, [r2, r3]
    bebc:	f013 0f08 	tst.w	r3, #8
    bec0:	d14b      	bne.n	bf5a <ull_filter_rpa_update+0x12a>
			rl[i].rpas_ready = 1U;
    bec2:	4a40      	ldr	r2, [pc, #256]	; (bfc4 <ull_filter_rpa_update+0x194>)
    bec4:	232c      	movs	r3, #44	; 0x2c
    bec6:	fb03 f505 	mul.w	r5, r3, r5
    beca:	5d53      	ldrb	r3, [r2, r5]
    becc:	f043 0302 	orr.w	r3, r3, #2
    bed0:	5553      	strb	r3, [r2, r5]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    bed2:	3401      	adds	r4, #1
    bed4:	b2e4      	uxtb	r4, r4
    bed6:	2c07      	cmp	r4, #7
    bed8:	d868      	bhi.n	bfac <ull_filter_rpa_update+0x17c>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
    beda:	4625      	mov	r5, r4
    bedc:	232c      	movs	r3, #44	; 0x2c
    bede:	fb04 f303 	mul.w	r3, r4, r3
    bee2:	4a38      	ldr	r2, [pc, #224]	; (bfc4 <ull_filter_rpa_update+0x194>)
    bee4:	5cd3      	ldrb	r3, [r2, r3]
    bee6:	f013 0f01 	tst.w	r3, #1
    beea:	d0f2      	beq.n	bed2 <ull_filter_rpa_update+0xa2>
    beec:	2f00      	cmp	r7, #0
    beee:	d1d8      	bne.n	bea2 <ull_filter_rpa_update+0x72>
    bef0:	232c      	movs	r3, #44	; 0x2c
    bef2:	fb04 f303 	mul.w	r3, r4, r3
    bef6:	5cd3      	ldrb	r3, [r2, r3]
    bef8:	f013 0f02 	tst.w	r3, #2
    befc:	d1e9      	bne.n	bed2 <ull_filter_rpa_update+0xa2>
    befe:	e7d0      	b.n	bea2 <ull_filter_rpa_update+0x72>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
    bf00:	4613      	mov	r3, r2
    bf02:	222c      	movs	r2, #44	; 0x2c
    bf04:	fb02 3305 	mla	r3, r2, r5, r3
    bf08:	7dda      	ldrb	r2, [r3, #23]
    bf0a:	4b2f      	ldr	r3, [pc, #188]	; (bfc8 <ull_filter_rpa_update+0x198>)
    bf0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
    bf10:	330f      	adds	r3, #15
	uint8_t *pdst = (uint8_t *)dst;
    bf12:	466a      	mov	r2, sp

	for (; length > 0; length--) {
    bf14:	2110      	movs	r1, #16
    bf16:	e004      	b.n	bf22 <ull_filter_rpa_update+0xf2>
		*pdst++ = *psrc--;
    bf18:	f813 0901 	ldrb.w	r0, [r3], #-1
    bf1c:	f802 0b01 	strb.w	r0, [r2], #1
	for (; length > 0; length--) {
    bf20:	3901      	subs	r1, #1
    bf22:	2900      	cmp	r1, #0
    bf24:	d1f8      	bne.n	bf18 <ull_filter_rpa_update+0xe8>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
    bf26:	212c      	movs	r1, #44	; 0x2c
    bf28:	fb05 f101 	mul.w	r1, r5, r1
    bf2c:	3118      	adds	r1, #24
    bf2e:	4b25      	ldr	r3, [pc, #148]	; (bfc4 <ull_filter_rpa_update+0x194>)
    bf30:	4419      	add	r1, r3
    bf32:	3106      	adds	r1, #6
    bf34:	4668      	mov	r0, sp
    bf36:	f00d fd8e 	bl	19a56 <bt_rpa_create>
				LL_ASSERT(!err);
    bf3a:	2800      	cmp	r0, #0
    bf3c:	d0b9      	beq.n	beb2 <ull_filter_rpa_update+0x82>
    bf3e:	f240 23eb 	movw	r3, #747	; 0x2eb
    bf42:	4a22      	ldr	r2, [pc, #136]	; (bfcc <ull_filter_rpa_update+0x19c>)
    bf44:	4922      	ldr	r1, [pc, #136]	; (bfd0 <ull_filter_rpa_update+0x1a0>)
    bf46:	4823      	ldr	r0, [pc, #140]	; (bfd4 <ull_filter_rpa_update+0x1a4>)
    bf48:	f00d fc41 	bl	197ce <assert_print>
    bf4c:	4040      	eors	r0, r0
    bf4e:	f380 8811 	msr	BASEPRI, r0
    bf52:	f04f 0003 	mov.w	r0, #3
    bf56:	df02      	svc	2
    bf58:	e7ab      	b.n	beb2 <ull_filter_rpa_update+0x82>
				err = bt_rpa_create(rl[i].local_irk, &rpa);
    bf5a:	232c      	movs	r3, #44	; 0x2c
    bf5c:	fb03 2005 	mla	r0, r3, r5, r2
    bf60:	4669      	mov	r1, sp
    bf62:	3007      	adds	r0, #7
    bf64:	f00d fd77 	bl	19a56 <bt_rpa_create>
				LL_ASSERT(!err);
    bf68:	b990      	cbnz	r0, bf90 <ull_filter_rpa_update+0x160>
				rl[i].local_rpa = &rpa;
    bf6a:	4b16      	ldr	r3, [pc, #88]	; (bfc4 <ull_filter_rpa_update+0x194>)
    bf6c:	222c      	movs	r2, #44	; 0x2c
    bf6e:	fb02 3305 	mla	r3, r2, r5, r3
    bf72:	f8c3 d024 	str.w	sp, [r3, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
    bf76:	4918      	ldr	r1, [pc, #96]	; (bfd8 <ull_filter_rpa_update+0x1a8>)
    bf78:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
    bf7c:	eb01 024c 	add.w	r2, r1, ip, lsl #1
    bf80:	9800      	ldr	r0, [sp, #0]
    bf82:	f841 001c 	str.w	r0, [r1, ip, lsl #1]
    bf86:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    bf8a:	8091      	strh	r1, [r2, #4]
				rl[i].local_rpa = &local_rpas[i];
    bf8c:	625a      	str	r2, [r3, #36]	; 0x24
    bf8e:	e798      	b.n	bec2 <ull_filter_rpa_update+0x92>
				LL_ASSERT(!err);
    bf90:	f44f 733e 	mov.w	r3, #760	; 0x2f8
    bf94:	4a0d      	ldr	r2, [pc, #52]	; (bfcc <ull_filter_rpa_update+0x19c>)
    bf96:	490e      	ldr	r1, [pc, #56]	; (bfd0 <ull_filter_rpa_update+0x1a0>)
    bf98:	480e      	ldr	r0, [pc, #56]	; (bfd4 <ull_filter_rpa_update+0x1a4>)
    bf9a:	f00d fc18 	bl	197ce <assert_print>
    bf9e:	4040      	eors	r0, r0
    bfa0:	f380 8811 	msr	BASEPRI, r0
    bfa4:	f04f 0003 	mov.w	r0, #3
    bfa8:	df02      	svc	2
    bfaa:	e7de      	b.n	bf6a <ull_filter_rpa_update+0x13a>
	if (all) {
    bfac:	b11f      	cbz	r7, bfb6 <ull_filter_rpa_update+0x186>
		rpa_last_ms = now;
    bfae:	4b03      	ldr	r3, [pc, #12]	; (bfbc <ull_filter_rpa_update+0x18c>)
    bfb0:	601e      	str	r6, [r3, #0]
    bfb2:	f8c3 8004 	str.w	r8, [r3, #4]
}
    bfb6:	b004      	add	sp, #16
    bfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bfbc:	20001240 	.word	0x20001240
    bfc0:	20008ad8 	.word	0x20008ad8
    bfc4:	20008944 	.word	0x20008944
    bfc8:	200088c4 	.word	0x200088c4
    bfcc:	0001f180 	.word	0x0001f180
    bfd0:	0001ec64 	.word	0x0001ec64
    bfd4:	0001e920 	.word	0x0001e920
    bfd8:	20008844 	.word	0x20008844

0000bfdc <rpa_timeout>:
{
    bfdc:	b508      	push	{r3, lr}
	ull_filter_rpa_update(true);
    bfde:	2001      	movs	r0, #1
    bfe0:	f7ff ff26 	bl	be30 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
    bfe4:	4b0a      	ldr	r3, [pc, #40]	; (c010 <rpa_timeout+0x34>)
    bfe6:	6818      	ldr	r0, [r3, #0]
    bfe8:	0c41      	lsrs	r1, r0, #17
    bfea:	03c0      	lsls	r0, r0, #15
    bfec:	f240 33e7 	movw	r3, #999	; 0x3e7
    bff0:	18c0      	adds	r0, r0, r3
    bff2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    bff6:	f04f 0300 	mov.w	r3, #0
    bffa:	f141 0100 	adc.w	r1, r1, #0
    bffe:	f7f5 f8db 	bl	11b8 <__aeabi_uldivmod>
    c002:	4602      	mov	r2, r0
    c004:	460b      	mov	r3, r1
    c006:	4803      	ldr	r0, [pc, #12]	; (c014 <rpa_timeout+0x38>)
    c008:	f007 f952 	bl	132b0 <k_work_schedule>
}
    c00c:	bd08      	pop	{r3, pc}
    c00e:	bf00      	nop
    c010:	20008ad8 	.word	0x20008ad8
    c014:	20001248 	.word	0x20001248

0000c018 <ull_filter_rl_find>:
{
    c018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c01c:	4607      	mov	r7, r0
    c01e:	4688      	mov	r8, r1
	if (free_idx) {
    c020:	4616      	mov	r6, r2
    c022:	b10a      	cbz	r2, c028 <ull_filter_rl_find+0x10>
		*free_idx = FILTER_IDX_NONE;
    c024:	23ff      	movs	r3, #255	; 0xff
    c026:	7013      	strb	r3, [r2, #0]
{
    c028:	2400      	movs	r4, #0
    c02a:	e00c      	b.n	c046 <ull_filter_rl_find+0x2e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    c02c:	481a      	ldr	r0, [pc, #104]	; (c098 <ull_filter_rl_find+0x80>)
    c02e:	232c      	movs	r3, #44	; 0x2c
    c030:	fb03 0004 	mla	r0, r3, r4, r0
    c034:	2206      	movs	r2, #6
    c036:	4641      	mov	r1, r8
    c038:	3001      	adds	r0, #1
    c03a:	f008 fca7 	bl	1498c <memcmp>
    c03e:	b9b8      	cbnz	r0, c070 <ull_filter_rl_find+0x58>
    c040:	e026      	b.n	c090 <ull_filter_rl_find+0x78>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    c042:	3401      	adds	r4, #1
    c044:	b2e4      	uxtb	r4, r4
    c046:	2c07      	cmp	r4, #7
    c048:	d821      	bhi.n	c08e <ull_filter_rl_find+0x76>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
    c04a:	4625      	mov	r5, r4
    c04c:	232c      	movs	r3, #44	; 0x2c
    c04e:	fb04 f303 	mul.w	r3, r4, r3
    c052:	4a11      	ldr	r2, [pc, #68]	; (c098 <ull_filter_rl_find+0x80>)
    c054:	5cd3      	ldrb	r3, [r2, r3]
    c056:	f013 0f01 	tst.w	r3, #1
    c05a:	d009      	beq.n	c070 <ull_filter_rl_find+0x58>
    c05c:	232c      	movs	r3, #44	; 0x2c
    c05e:	fb04 f303 	mul.w	r3, r4, r3
    c062:	5cd3      	ldrb	r3, [r2, r3]
    c064:	f3c3 1380 	ubfx	r3, r3, #6, #1
    c068:	f007 0201 	and.w	r2, r7, #1
    c06c:	4293      	cmp	r3, r2
    c06e:	d0dd      	beq.n	c02c <ull_filter_rl_find+0x14>
		} else if (free_idx && !rl[i].taken &&
    c070:	2e00      	cmp	r6, #0
    c072:	d0e6      	beq.n	c042 <ull_filter_rl_find+0x2a>
    c074:	232c      	movs	r3, #44	; 0x2c
    c076:	fb03 f505 	mul.w	r5, r3, r5
    c07a:	4b07      	ldr	r3, [pc, #28]	; (c098 <ull_filter_rl_find+0x80>)
    c07c:	5d5b      	ldrb	r3, [r3, r5]
    c07e:	f013 0f01 	tst.w	r3, #1
    c082:	d1de      	bne.n	c042 <ull_filter_rl_find+0x2a>
			   (*free_idx == FILTER_IDX_NONE)) {
    c084:	7833      	ldrb	r3, [r6, #0]
		} else if (free_idx && !rl[i].taken &&
    c086:	2bff      	cmp	r3, #255	; 0xff
    c088:	d1db      	bne.n	c042 <ull_filter_rl_find+0x2a>
			*free_idx = i;
    c08a:	7034      	strb	r4, [r6, #0]
    c08c:	e7d9      	b.n	c042 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
    c08e:	24ff      	movs	r4, #255	; 0xff
}
    c090:	4620      	mov	r0, r4
    c092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c096:	bf00      	nop
    c098:	20008944 	.word	0x20008944

0000c09c <fal_add>:
{
    c09c:	b570      	push	{r4, r5, r6, lr}
    c09e:	b082      	sub	sp, #8
    c0a0:	4604      	mov	r4, r0
	i = fal_find(id_addr->type, id_addr->a.val, &j);
    c0a2:	4605      	mov	r5, r0
    c0a4:	f815 0b01 	ldrb.w	r0, [r5], #1
    c0a8:	f10d 0207 	add.w	r2, sp, #7
    c0ac:	4629      	mov	r1, r5
    c0ae:	f7ff fbd7 	bl	b860 <fal_find>
	if (i < ARRAY_SIZE(fal)) {
    c0b2:	2807      	cmp	r0, #7
    c0b4:	d93a      	bls.n	c12c <fal_add+0x90>
	} else if (j >= ARRAY_SIZE(fal)) {
    c0b6:	f89d 6007 	ldrb.w	r6, [sp, #7]
    c0ba:	2e07      	cmp	r6, #7
    c0bc:	d838      	bhi.n	c130 <fal_add+0x94>
	fal[i].id_addr_type = id_addr->type & 0x1;
    c0be:	4622      	mov	r2, r4
    c0c0:	f812 0b01 	ldrb.w	r0, [r2], #1
    c0c4:	4b1b      	ldr	r3, [pc, #108]	; (c134 <fal_add+0x98>)
    c0c6:	f813 1036 	ldrb.w	r1, [r3, r6, lsl #3]
    c0ca:	f360 0141 	bfi	r1, r0, #1, #1
    c0ce:	f803 1036 	strb.w	r1, [r3, r6, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
    c0d2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    c0d6:	f8d4 1001 	ldr.w	r1, [r4, #1]
    c0da:	f8c3 1002 	str.w	r1, [r3, #2]
    c0de:	8892      	ldrh	r2, [r2, #4]
    c0e0:	80da      	strh	r2, [r3, #6]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c0e2:	2200      	movs	r2, #0
    c0e4:	4629      	mov	r1, r5
    c0e6:	7820      	ldrb	r0, [r4, #0]
    c0e8:	f7ff ff96 	bl	c018 <ull_filter_rl_find>
    c0ec:	f88d 0007 	strb.w	r0, [sp, #7]
	if (j < ARRAY_SIZE(rl)) {
    c0f0:	2807      	cmp	r0, #7
    c0f2:	d815      	bhi.n	c120 <fal_add+0x84>
		fal[i].rl_idx = j;
    c0f4:	4b0f      	ldr	r3, [pc, #60]	; (c134 <fal_add+0x98>)
    c0f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    c0fa:	7058      	strb	r0, [r3, #1]
		rl[j].fal = 1U;
    c0fc:	4a0e      	ldr	r2, [pc, #56]	; (c138 <fal_add+0x9c>)
    c0fe:	232c      	movs	r3, #44	; 0x2c
    c100:	fb03 f000 	mul.w	r0, r3, r0
    c104:	5c13      	ldrb	r3, [r2, r0]
    c106:	f043 0320 	orr.w	r3, r3, #32
    c10a:	5413      	strb	r3, [r2, r0]
	fal[i].taken = 1U;
    c10c:	4a09      	ldr	r2, [pc, #36]	; (c134 <fal_add+0x98>)
    c10e:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
    c112:	f043 0301 	orr.w	r3, r3, #1
    c116:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
    c11a:	2000      	movs	r0, #0
}
    c11c:	b002      	add	sp, #8
    c11e:	bd70      	pop	{r4, r5, r6, pc}
		fal[i].rl_idx = FILTER_IDX_NONE;
    c120:	4b04      	ldr	r3, [pc, #16]	; (c134 <fal_add+0x98>)
    c122:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    c126:	22ff      	movs	r2, #255	; 0xff
    c128:	705a      	strb	r2, [r3, #1]
    c12a:	e7ef      	b.n	c10c <fal_add+0x70>
		return 0;
    c12c:	2000      	movs	r0, #0
    c12e:	e7f5      	b.n	c11c <fal_add+0x80>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    c130:	2007      	movs	r0, #7
    c132:	e7f3      	b.n	c11c <fal_add+0x80>
    c134:	200087d0 	.word	0x200087d0
    c138:	20008944 	.word	0x20008944

0000c13c <ll_rl_add>:
{
    c13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c140:	b082      	sub	sp, #8
    c142:	4605      	mov	r5, r0
    c144:	460c      	mov	r4, r1
    c146:	4617      	mov	r7, r2
	if (!rl_access_check(false)) {
    c148:	2000      	movs	r0, #0
    c14a:	f7ff fcdf 	bl	bb0c <rl_access_check>
    c14e:	2800      	cmp	r0, #0
    c150:	f000 80c9 	beq.w	c2e6 <ll_rl_add+0x1aa>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
    c154:	46a8      	mov	r8, r5
    c156:	f818 0b01 	ldrb.w	r0, [r8], #1
    c15a:	f10d 0207 	add.w	r2, sp, #7
    c15e:	4641      	mov	r1, r8
    c160:	f7ff ff5a 	bl	c018 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    c164:	2807      	cmp	r0, #7
    c166:	f240 80c2 	bls.w	c2ee <ll_rl_add+0x1b2>
	} else if (j >= ARRAY_SIZE(rl)) {
    c16a:	f89d 6007 	ldrb.w	r6, [sp, #7]
    c16e:	2e07      	cmp	r6, #7
    c170:	f200 80bf 	bhi.w	c2f2 <ll_rl_add+0x1b6>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
    c174:	f8df a180 	ldr.w	sl, [pc, #384]	; c2f8 <ll_rl_add+0x1bc>
    c178:	f04f 092c 	mov.w	r9, #44	; 0x2c
    c17c:	fb09 f906 	mul.w	r9, r9, r6
    c180:	eb0a 0309 	add.w	r3, sl, r9
    c184:	f8d5 2001 	ldr.w	r2, [r5, #1]
    c188:	f8c3 2001 	str.w	r2, [r3, #1]
    c18c:	f8b5 2005 	ldrh.w	r2, [r5, #5]
    c190:	f8a3 2005 	strh.w	r2, [r3, #5]
	rl[i].id_addr_type = id_addr->type & 0x1;
    c194:	782a      	ldrb	r2, [r5, #0]
    c196:	f81a 3009 	ldrb.w	r3, [sl, r9]
    c19a:	f362 1386 	bfi	r3, r2, #6, #1
    c19e:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
    c1a2:	2110      	movs	r1, #16
    c1a4:	4620      	mov	r0, r4
    c1a6:	f00d ffec 	bl	1a182 <mem_nz>
    c1aa:	f81a 3009 	ldrb.w	r3, [sl, r9]
    c1ae:	f360 0382 	bfi	r3, r0, #2, #1
    c1b2:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
    c1b6:	2110      	movs	r1, #16
    c1b8:	4638      	mov	r0, r7
    c1ba:	f00d ffe2 	bl	1a182 <mem_nz>
    c1be:	f81a 3009 	ldrb.w	r3, [sl, r9]
    c1c2:	f360 03c3 	bfi	r3, r0, #3, #1
    c1c6:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
    c1ca:	b2db      	uxtb	r3, r3
    c1cc:	f013 0f04 	tst.w	r3, #4
    c1d0:	d017      	beq.n	c202 <ll_rl_add+0xc6>
		rl[i].pirk_idx = peer_irk_count;
    c1d2:	494a      	ldr	r1, [pc, #296]	; (c2fc <ll_rl_add+0x1c0>)
    c1d4:	780a      	ldrb	r2, [r1, #0]
    c1d6:	202c      	movs	r0, #44	; 0x2c
    c1d8:	fb00 a306 	mla	r3, r0, r6, sl
    c1dc:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
    c1de:	4b48      	ldr	r3, [pc, #288]	; (c300 <ll_rl_add+0x1c4>)
    c1e0:	549e      	strb	r6, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
    c1e2:	1c53      	adds	r3, r2, #1
    c1e4:	700b      	strb	r3, [r1, #0]
    c1e6:	4b47      	ldr	r3, [pc, #284]	; (c304 <ll_rl_add+0x1c8>)
    c1e8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	psrc += length - 1;
    c1ec:	f104 010f 	add.w	r1, r4, #15
	for (; length > 0; length--) {
    c1f0:	2210      	movs	r2, #16
    c1f2:	e004      	b.n	c1fe <ll_rl_add+0xc2>
		*pdst++ = *psrc--;
    c1f4:	f811 0901 	ldrb.w	r0, [r1], #-1
    c1f8:	f803 0b01 	strb.w	r0, [r3], #1
	for (; length > 0; length--) {
    c1fc:	3a01      	subs	r2, #1
    c1fe:	2a00      	cmp	r2, #0
    c200:	d1f8      	bne.n	c1f4 <ll_rl_add+0xb8>
	if (rl[i].lirk) {
    c202:	232c      	movs	r3, #44	; 0x2c
    c204:	fb06 f303 	mul.w	r3, r6, r3
    c208:	4a3b      	ldr	r2, [pc, #236]	; (c2f8 <ll_rl_add+0x1bc>)
    c20a:	5cd3      	ldrb	r3, [r2, r3]
    c20c:	f013 0f08 	tst.w	r3, #8
    c210:	d011      	beq.n	c236 <ll_rl_add+0xfa>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
    c212:	4613      	mov	r3, r2
    c214:	222c      	movs	r2, #44	; 0x2c
    c216:	fb02 3306 	mla	r3, r2, r6, r3
    c21a:	683c      	ldr	r4, [r7, #0]
    c21c:	6878      	ldr	r0, [r7, #4]
    c21e:	68b9      	ldr	r1, [r7, #8]
    c220:	68fa      	ldr	r2, [r7, #12]
    c222:	f8c3 4007 	str.w	r4, [r3, #7]
    c226:	f8c3 000b 	str.w	r0, [r3, #11]
    c22a:	f8c3 100f 	str.w	r1, [r3, #15]
    c22e:	f8c3 2013 	str.w	r2, [r3, #19]
		rl[i].local_rpa = NULL;
    c232:	2200      	movs	r2, #0
    c234:	625a      	str	r2, [r3, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
    c236:	4930      	ldr	r1, [pc, #192]	; (c2f8 <ll_rl_add+0x1bc>)
    c238:	232c      	movs	r3, #44	; 0x2c
    c23a:	fb06 f303 	mul.w	r3, r6, r3
    c23e:	f103 0018 	add.w	r0, r3, #24
    c242:	180c      	adds	r4, r1, r0
__ssp_bos_icheck3(memset, void *, int)
    c244:	2200      	movs	r2, #0
    c246:	500a      	str	r2, [r1, r0]
    c248:	80a2      	strh	r2, [r4, #4]
	rl[i].rpas_ready = 0U;
    c24a:	5cc8      	ldrb	r0, [r1, r3]
    c24c:	f362 0041 	bfi	r0, r2, #1, #1
    c250:	54c8      	strb	r0, [r1, r3]
	rl[i].dev = 0U;
    c252:	b2c0      	uxtb	r0, r0
    c254:	f362 1004 	bfi	r0, r2, #4, #1
    c258:	54c8      	strb	r0, [r1, r3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
    c25a:	4641      	mov	r1, r8
    c25c:	7828      	ldrb	r0, [r5, #0]
    c25e:	f7ff faff 	bl	b860 <fal_find>
    c262:	f88d 0007 	strb.w	r0, [sp, #7]
	if (j < ARRAY_SIZE(fal)) {
    c266:	2807      	cmp	r0, #7
    c268:	d82b      	bhi.n	c2c2 <ll_rl_add+0x186>
		fal[j].rl_idx = i;
    c26a:	4b27      	ldr	r3, [pc, #156]	; (c308 <ll_rl_add+0x1cc>)
    c26c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c270:	7046      	strb	r6, [r0, #1]
		rl[i].fal = 1U;
    c272:	4921      	ldr	r1, [pc, #132]	; (c2f8 <ll_rl_add+0x1bc>)
    c274:	232c      	movs	r3, #44	; 0x2c
    c276:	fb06 f303 	mul.w	r3, r6, r3
    c27a:	5cca      	ldrb	r2, [r1, r3]
    c27c:	f042 0220 	orr.w	r2, r2, #32
    c280:	54ca      	strb	r2, [r1, r3]
	j = pal_addr_find(id_addr->type, id_addr->a.val);
    c282:	4641      	mov	r1, r8
    c284:	7828      	ldrb	r0, [r5, #0]
    c286:	f7ff fb49 	bl	b91c <pal_addr_find>
    c28a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (j < ARRAY_SIZE(pal)) {
    c28e:	2807      	cmp	r0, #7
    c290:	d820      	bhi.n	c2d4 <ll_rl_add+0x198>
		pal[j].rl_idx = i;
    c292:	eb00 02c0 	add.w	r2, r0, r0, lsl #3
    c296:	4b1d      	ldr	r3, [pc, #116]	; (c30c <ll_rl_add+0x1d0>)
    c298:	4413      	add	r3, r2
    c29a:	721e      	strb	r6, [r3, #8]
		rl[i].pal = j + 1U;
    c29c:	3001      	adds	r0, #1
    c29e:	4b16      	ldr	r3, [pc, #88]	; (c2f8 <ll_rl_add+0x1bc>)
    c2a0:	222c      	movs	r2, #44	; 0x2c
    c2a2:	fb02 3306 	mla	r3, r2, r6, r3
    c2a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    c2a8:	f360 0208 	bfi	r2, r0, #0, #9
    c2ac:	851a      	strh	r2, [r3, #40]	; 0x28
	rl[i].taken = 1U;
    c2ae:	4a12      	ldr	r2, [pc, #72]	; (c2f8 <ll_rl_add+0x1bc>)
    c2b0:	232c      	movs	r3, #44	; 0x2c
    c2b2:	fb03 f606 	mul.w	r6, r3, r6
    c2b6:	5d93      	ldrb	r3, [r2, r6]
    c2b8:	f043 0301 	orr.w	r3, r3, #1
    c2bc:	5593      	strb	r3, [r2, r6]
	return 0;
    c2be:	2000      	movs	r0, #0
    c2c0:	e012      	b.n	c2e8 <ll_rl_add+0x1ac>
		rl[i].fal = 0U;
    c2c2:	4a0d      	ldr	r2, [pc, #52]	; (c2f8 <ll_rl_add+0x1bc>)
    c2c4:	232c      	movs	r3, #44	; 0x2c
    c2c6:	fb06 f303 	mul.w	r3, r6, r3
    c2ca:	5cd1      	ldrb	r1, [r2, r3]
    c2cc:	f36f 1145 	bfc	r1, #5, #1
    c2d0:	54d1      	strb	r1, [r2, r3]
    c2d2:	e7d6      	b.n	c282 <ll_rl_add+0x146>
		rl[i].pal = 0U;
    c2d4:	4b08      	ldr	r3, [pc, #32]	; (c2f8 <ll_rl_add+0x1bc>)
    c2d6:	222c      	movs	r2, #44	; 0x2c
    c2d8:	fb02 3306 	mla	r3, r2, r6, r3
    c2dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    c2de:	f36f 0208 	bfc	r2, #0, #9
    c2e2:	851a      	strh	r2, [r3, #40]	; 0x28
    c2e4:	e7e3      	b.n	c2ae <ll_rl_add+0x172>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c2e6:	200c      	movs	r0, #12
}
    c2e8:	b002      	add	sp, #8
    c2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_INVALID_PARAM;
    c2ee:	2012      	movs	r0, #18
    c2f0:	e7fa      	b.n	c2e8 <ll_rl_add+0x1ac>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    c2f2:	2007      	movs	r0, #7
    c2f4:	e7f8      	b.n	c2e8 <ll_rl_add+0x1ac>
    c2f6:	bf00      	nop
    c2f8:	20008944 	.word	0x20008944
    c2fc:	20009296 	.word	0x20009296
    c300:	200088bc 	.word	0x200088bc
    c304:	200088c4 	.word	0x200088c4
    c308:	200087d0 	.word	0x200087d0
    c30c:	20008874 	.word	0x20008874

0000c310 <ll_rl_remove>:
{
    c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c314:	4605      	mov	r5, r0
	if (!rl_access_check(false)) {
    c316:	2000      	movs	r0, #0
    c318:	f7ff fbf8 	bl	bb0c <rl_access_check>
    c31c:	2800      	cmp	r0, #0
    c31e:	d07f      	beq.n	c420 <ll_rl_remove+0x110>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c320:	462e      	mov	r6, r5
    c322:	f816 0b01 	ldrb.w	r0, [r6], #1
    c326:	2200      	movs	r2, #0
    c328:	4631      	mov	r1, r6
    c32a:	f7ff fe75 	bl	c018 <ull_filter_rl_find>
    c32e:	4604      	mov	r4, r0
	if (i < ARRAY_SIZE(rl)) {
    c330:	2807      	cmp	r0, #7
    c332:	d901      	bls.n	c338 <ll_rl_remove+0x28>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c334:	2002      	movs	r0, #2
    c336:	e074      	b.n	c422 <ll_rl_remove+0x112>
		if (rl[i].pirk) {
    c338:	232c      	movs	r3, #44	; 0x2c
    c33a:	fb00 f303 	mul.w	r3, r0, r3
    c33e:	4a3a      	ldr	r2, [pc, #232]	; (c428 <ll_rl_remove+0x118>)
    c340:	5cd3      	ldrb	r3, [r2, r3]
    c342:	f013 0f04 	tst.w	r3, #4
    c346:	d049      	beq.n	c3dc <ll_rl_remove+0xcc>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
    c348:	4613      	mov	r3, r2
    c34a:	222c      	movs	r2, #44	; 0x2c
    c34c:	fb02 3300 	mla	r3, r2, r0, r3
    c350:	7dd8      	ldrb	r0, [r3, #23]
    c352:	4b36      	ldr	r3, [pc, #216]	; (c42c <ll_rl_remove+0x11c>)
    c354:	781b      	ldrb	r3, [r3, #0]
    c356:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
    c358:	f013 0cff 	ands.w	ip, r3, #255	; 0xff
    c35c:	d03b      	beq.n	c3d6 <ll_rl_remove+0xc6>
    c35e:	4560      	cmp	r0, ip
    c360:	d039      	beq.n	c3d6 <ll_rl_remove+0xc6>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
    c362:	4b33      	ldr	r3, [pc, #204]	; (c430 <ll_rl_remove+0x120>)
    c364:	0101      	lsls	r1, r0, #4
    c366:	eb03 1200 	add.w	r2, r3, r0, lsl #4
    c36a:	ea4f 170c 	mov.w	r7, ip, lsl #4
    c36e:	eb03 1e0c 	add.w	lr, r3, ip, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    c372:	f853 a007 	ldr.w	sl, [r3, r7]
    c376:	f8de 9004 	ldr.w	r9, [lr, #4]
    c37a:	f8de 8008 	ldr.w	r8, [lr, #8]
    c37e:	f8de 700c 	ldr.w	r7, [lr, #12]
    c382:	f843 a001 	str.w	sl, [r3, r1]
    c386:	f8c2 9004 	str.w	r9, [r2, #4]
    c38a:	f8c2 8008 	str.w	r8, [r2, #8]
    c38e:	60d7      	str	r7, [r2, #12]
				for (k = 0U;
    c390:	2300      	movs	r3, #0
    c392:	e001      	b.n	c398 <ll_rl_remove+0x88>
				     k++) {
    c394:	3301      	adds	r3, #1
    c396:	b2db      	uxtb	r3, r3
				for (k = 0U;
    c398:	2b07      	cmp	r3, #7
    c39a:	d81c      	bhi.n	c3d6 <ll_rl_remove+0xc6>
					if (rl[k].taken && rl[k].pirk &&
    c39c:	222c      	movs	r2, #44	; 0x2c
    c39e:	fb03 f202 	mul.w	r2, r3, r2
    c3a2:	4921      	ldr	r1, [pc, #132]	; (c428 <ll_rl_remove+0x118>)
    c3a4:	5c8a      	ldrb	r2, [r1, r2]
    c3a6:	f012 0f01 	tst.w	r2, #1
    c3aa:	d0f3      	beq.n	c394 <ll_rl_remove+0x84>
    c3ac:	222c      	movs	r2, #44	; 0x2c
    c3ae:	fb03 f202 	mul.w	r2, r3, r2
    c3b2:	5c8a      	ldrb	r2, [r1, r2]
    c3b4:	f012 0f04 	tst.w	r2, #4
    c3b8:	d0ec      	beq.n	c394 <ll_rl_remove+0x84>
					    rl[k].pirk_idx == pj) {
    c3ba:	460a      	mov	r2, r1
    c3bc:	212c      	movs	r1, #44	; 0x2c
    c3be:	fb01 2203 	mla	r2, r1, r3, r2
    c3c2:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
    c3c4:	4562      	cmp	r2, ip
    c3c6:	d1e5      	bne.n	c394 <ll_rl_remove+0x84>
						rl[k].pirk_idx = pi;
    c3c8:	4a17      	ldr	r2, [pc, #92]	; (c428 <ll_rl_remove+0x118>)
    c3ca:	fb01 2e03 	mla	lr, r1, r3, r2
    c3ce:	f88e 0017 	strb.w	r0, [lr, #23]
						peer_irk_rl_ids[pi] = k;
    c3d2:	4a18      	ldr	r2, [pc, #96]	; (c434 <ll_rl_remove+0x124>)
    c3d4:	5413      	strb	r3, [r2, r0]
			peer_irk_count--;
    c3d6:	4b15      	ldr	r3, [pc, #84]	; (c42c <ll_rl_remove+0x11c>)
    c3d8:	f883 c000 	strb.w	ip, [r3]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
    c3dc:	2200      	movs	r2, #0
    c3de:	4631      	mov	r1, r6
    c3e0:	7828      	ldrb	r0, [r5, #0]
    c3e2:	f7ff fa3d 	bl	b860 <fal_find>
		if (j < ARRAY_SIZE(fal)) {
    c3e6:	2807      	cmp	r0, #7
    c3e8:	d804      	bhi.n	c3f4 <ll_rl_remove+0xe4>
			fal[j].rl_idx = FILTER_IDX_NONE;
    c3ea:	4b13      	ldr	r3, [pc, #76]	; (c438 <ll_rl_remove+0x128>)
    c3ec:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c3f0:	23ff      	movs	r3, #255	; 0xff
    c3f2:	7043      	strb	r3, [r0, #1]
		j = pal_addr_find(id_addr->type, id_addr->a.val);
    c3f4:	4631      	mov	r1, r6
    c3f6:	7828      	ldrb	r0, [r5, #0]
    c3f8:	f7ff fa90 	bl	b91c <pal_addr_find>
		if (j < ARRAY_SIZE(pal)) {
    c3fc:	2807      	cmp	r0, #7
    c3fe:	d805      	bhi.n	c40c <ll_rl_remove+0xfc>
			pal[j].rl_idx = FILTER_IDX_NONE;
    c400:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c404:	4b0d      	ldr	r3, [pc, #52]	; (c43c <ll_rl_remove+0x12c>)
    c406:	4418      	add	r0, r3
    c408:	23ff      	movs	r3, #255	; 0xff
    c40a:	7203      	strb	r3, [r0, #8]
		rl[i].taken = 0U;
    c40c:	4b06      	ldr	r3, [pc, #24]	; (c428 <ll_rl_remove+0x118>)
    c40e:	202c      	movs	r0, #44	; 0x2c
    c410:	fb00 f404 	mul.w	r4, r0, r4
    c414:	5d1a      	ldrb	r2, [r3, r4]
    c416:	f36f 0200 	bfc	r2, #0, #1
    c41a:	551a      	strb	r2, [r3, r4]
		return 0;
    c41c:	2000      	movs	r0, #0
    c41e:	e000      	b.n	c422 <ll_rl_remove+0x112>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c420:	200c      	movs	r0, #12
}
    c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c426:	bf00      	nop
    c428:	20008944 	.word	0x20008944
    c42c:	20009296 	.word	0x20009296
    c430:	200088c4 	.word	0x200088c4
    c434:	200088bc 	.word	0x200088bc
    c438:	200087d0 	.word	0x200087d0
    c43c:	20008874 	.word	0x20008874

0000c440 <ll_rl_crpa_set>:
{
    c440:	b510      	push	{r4, lr}
    c442:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
    c444:	795b      	ldrb	r3, [r3, #5]
    c446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c44a:	2b40      	cmp	r3, #64	; 0x40
    c44c:	d000      	beq.n	c450 <ll_rl_crpa_set+0x10>
}
    c44e:	bd10      	pop	{r4, pc}
		if (id_addr) {
    c450:	b119      	cbz	r1, c45a <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr,
    c452:	2200      	movs	r2, #0
    c454:	f7ff fde0 	bl	c018 <ull_filter_rl_find>
    c458:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
    c45a:	2a07      	cmp	r2, #7
    c45c:	d8f7      	bhi.n	c44e <ll_rl_crpa_set+0xe>
    c45e:	232c      	movs	r3, #44	; 0x2c
    c460:	fb02 f303 	mul.w	r3, r2, r3
    c464:	4907      	ldr	r1, [pc, #28]	; (c484 <ll_rl_crpa_set+0x44>)
    c466:	5ccb      	ldrb	r3, [r1, r3]
    c468:	f013 0f01 	tst.w	r3, #1
    c46c:	d0ef      	beq.n	c44e <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
    c46e:	460b      	mov	r3, r1
    c470:	202c      	movs	r0, #44	; 0x2c
    c472:	fb00 f202 	mul.w	r2, r0, r2
    c476:	3218      	adds	r2, #24
    c478:	4411      	add	r1, r2
    c47a:	6820      	ldr	r0, [r4, #0]
    c47c:	5098      	str	r0, [r3, r2]
    c47e:	88a3      	ldrh	r3, [r4, #4]
    c480:	808b      	strh	r3, [r1, #4]
}
    c482:	e7e4      	b.n	c44e <ll_rl_crpa_set+0xe>
    c484:	20008944 	.word	0x20008944

0000c488 <ll_rl_crpa_get>:
{
    c488:	b538      	push	{r3, r4, r5, lr}
    c48a:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c48c:	4601      	mov	r1, r0
    c48e:	f811 0b01 	ldrb.w	r0, [r1], #1
    c492:	2200      	movs	r2, #0
    c494:	f7ff fdc0 	bl	c018 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
    c498:	2807      	cmp	r0, #7
    c49a:	d901      	bls.n	c4a0 <ll_rl_crpa_get+0x18>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c49c:	2002      	movs	r0, #2
}
    c49e:	bd38      	pop	{r3, r4, r5, pc}
    c4a0:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
    c4a2:	232c      	movs	r3, #44	; 0x2c
    c4a4:	fb00 f303 	mul.w	r3, r0, r3
    c4a8:	3318      	adds	r3, #24
    c4aa:	2106      	movs	r1, #6
    c4ac:	4809      	ldr	r0, [pc, #36]	; (c4d4 <ll_rl_crpa_get+0x4c>)
    c4ae:	4418      	add	r0, r3
    c4b0:	f00d fe67 	bl	1a182 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
    c4b4:	b908      	cbnz	r0, c4ba <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c4b6:	2002      	movs	r0, #2
    c4b8:	e7f1      	b.n	c49e <ll_rl_crpa_get+0x16>
		bt_addr_copy(crpa, &rl[i].curr_rpa);
    c4ba:	4b06      	ldr	r3, [pc, #24]	; (c4d4 <ll_rl_crpa_get+0x4c>)
    c4bc:	202c      	movs	r0, #44	; 0x2c
    c4be:	fb00 f404 	mul.w	r4, r0, r4
    c4c2:	3418      	adds	r4, #24
    c4c4:	191a      	adds	r2, r3, r4
    c4c6:	591b      	ldr	r3, [r3, r4]
    c4c8:	602b      	str	r3, [r5, #0]
    c4ca:	8893      	ldrh	r3, [r2, #4]
    c4cc:	80ab      	strh	r3, [r5, #4]
		return 0;
    c4ce:	2000      	movs	r0, #0
    c4d0:	e7e5      	b.n	c49e <ll_rl_crpa_get+0x16>
    c4d2:	bf00      	nop
    c4d4:	20008944 	.word	0x20008944

0000c4d8 <ll_rl_lrpa_get>:
{
    c4d8:	b510      	push	{r4, lr}
    c4da:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c4dc:	4601      	mov	r1, r0
    c4de:	f811 0b01 	ldrb.w	r0, [r1], #1
    c4e2:	2200      	movs	r2, #0
    c4e4:	f7ff fd98 	bl	c018 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    c4e8:	2807      	cmp	r0, #7
    c4ea:	d901      	bls.n	c4f0 <ll_rl_lrpa_get+0x18>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c4ec:	2002      	movs	r0, #2
}
    c4ee:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
    c4f0:	4b05      	ldr	r3, [pc, #20]	; (c508 <ll_rl_lrpa_get+0x30>)
    c4f2:	222c      	movs	r2, #44	; 0x2c
    c4f4:	fb02 3000 	mla	r0, r2, r0, r3
    c4f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c4fa:	681a      	ldr	r2, [r3, #0]
    c4fc:	6022      	str	r2, [r4, #0]
    c4fe:	889b      	ldrh	r3, [r3, #4]
    c500:	80a3      	strh	r3, [r4, #4]
		return 0;
    c502:	2000      	movs	r0, #0
    c504:	e7f3      	b.n	c4ee <ll_rl_lrpa_get+0x16>
    c506:	bf00      	nop
    c508:	20008944 	.word	0x20008944

0000c50c <ll_priv_mode_set>:
{
    c50c:	b538      	push	{r3, r4, r5, lr}
    c50e:	4605      	mov	r5, r0
    c510:	460c      	mov	r4, r1
	if (!rl_access_check(false)) {
    c512:	2000      	movs	r0, #0
    c514:	f7ff fafa 	bl	bb0c <rl_access_check>
    c518:	b300      	cbz	r0, c55c <ll_priv_mode_set+0x50>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c51a:	4629      	mov	r1, r5
    c51c:	f811 0b01 	ldrb.w	r0, [r1], #1
    c520:	2200      	movs	r2, #0
    c522:	f7ff fd79 	bl	c018 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
    c526:	2807      	cmp	r0, #7
    c528:	d81a      	bhi.n	c560 <ll_priv_mode_set+0x54>
		switch (mode) {
    c52a:	b11c      	cbz	r4, c534 <ll_priv_mode_set+0x28>
    c52c:	2c01      	cmp	r4, #1
    c52e:	d00b      	beq.n	c548 <ll_priv_mode_set+0x3c>
    c530:	2012      	movs	r0, #18
    c532:	e014      	b.n	c55e <ll_priv_mode_set+0x52>
			rl[i].dev = 0U;
    c534:	4b0b      	ldr	r3, [pc, #44]	; (c564 <ll_priv_mode_set+0x58>)
    c536:	222c      	movs	r2, #44	; 0x2c
    c538:	fb02 f000 	mul.w	r0, r2, r0
    c53c:	5c1a      	ldrb	r2, [r3, r0]
    c53e:	f36f 1204 	bfc	r2, #4, #1
    c542:	541a      	strb	r2, [r3, r0]
	return 0;
    c544:	4620      	mov	r0, r4
			break;
    c546:	e00a      	b.n	c55e <ll_priv_mode_set+0x52>
			rl[i].dev = 1U;
    c548:	4a06      	ldr	r2, [pc, #24]	; (c564 <ll_priv_mode_set+0x58>)
    c54a:	232c      	movs	r3, #44	; 0x2c
    c54c:	fb03 f000 	mul.w	r0, r3, r0
    c550:	5c13      	ldrb	r3, [r2, r0]
    c552:	f043 0310 	orr.w	r3, r3, #16
    c556:	5413      	strb	r3, [r2, r0]
	return 0;
    c558:	2000      	movs	r0, #0
			break;
    c55a:	e000      	b.n	c55e <ll_priv_mode_set+0x52>
		return BT_HCI_ERR_CMD_DISALLOWED;
    c55c:	200c      	movs	r0, #12
}
    c55e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
    c560:	2002      	movs	r0, #2
    c562:	e7fc      	b.n	c55e <ll_priv_mode_set+0x52>
    c564:	20008944 	.word	0x20008944

0000c568 <pal_add>:
{
    c568:	b5f0      	push	{r4, r5, r6, r7, lr}
    c56a:	b083      	sub	sp, #12
    c56c:	4605      	mov	r5, r0
    c56e:	460f      	mov	r7, r1
	i = pal_find(id_addr->type, id_addr->a.val, sid, &j);
    c570:	4606      	mov	r6, r0
    c572:	f816 0b01 	ldrb.w	r0, [r6], #1
    c576:	f10d 0307 	add.w	r3, sp, #7
    c57a:	460a      	mov	r2, r1
    c57c:	4631      	mov	r1, r6
    c57e:	f7ff f9f7 	bl	b970 <pal_find>
	if (i < PAL_SIZE) {
    c582:	2807      	cmp	r0, #7
    c584:	d940      	bls.n	c608 <pal_add+0xa0>
	} else if (j >= PAL_SIZE) {
    c586:	f89d 4007 	ldrb.w	r4, [sp, #7]
    c58a:	2c07      	cmp	r4, #7
    c58c:	d83e      	bhi.n	c60c <pal_add+0xa4>
	pal[i].id_addr_type = id_addr->type & 0x1;
    c58e:	462a      	mov	r2, r5
    c590:	f812 eb01 	ldrb.w	lr, [r2], #1
    c594:	481e      	ldr	r0, [pc, #120]	; (c610 <pal_add+0xa8>)
    c596:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
    c59a:	1843      	adds	r3, r0, r1
    c59c:	f893 c006 	ldrb.w	ip, [r3, #6]
    c5a0:	f36e 0c41 	bfi	ip, lr, #1, #1
    c5a4:	f883 c006 	strb.w	ip, [r3, #6]
    c5a8:	f8d5 c001 	ldr.w	ip, [r5, #1]
    c5ac:	f840 c001 	str.w	ip, [r0, r1]
    c5b0:	8892      	ldrh	r2, [r2, #4]
    c5b2:	809a      	strh	r2, [r3, #4]
	pal[i].sid = sid;
    c5b4:	71df      	strb	r7, [r3, #7]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
    c5b6:	2200      	movs	r2, #0
    c5b8:	4631      	mov	r1, r6
    c5ba:	7828      	ldrb	r0, [r5, #0]
    c5bc:	f7ff fd2c 	bl	c018 <ull_filter_rl_find>
    c5c0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (j < ARRAY_SIZE(rl)) {
    c5c4:	2807      	cmp	r0, #7
    c5c6:	d818      	bhi.n	c5fa <pal_add+0x92>
		pal[i].rl_idx = j;
    c5c8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c5cc:	4b10      	ldr	r3, [pc, #64]	; (c610 <pal_add+0xa8>)
    c5ce:	4413      	add	r3, r2
    c5d0:	7218      	strb	r0, [r3, #8]
		rl[j].pal = i + 1U;
    c5d2:	1c62      	adds	r2, r4, #1
    c5d4:	4b0f      	ldr	r3, [pc, #60]	; (c614 <pal_add+0xac>)
    c5d6:	212c      	movs	r1, #44	; 0x2c
    c5d8:	fb01 3000 	mla	r0, r1, r0, r3
    c5dc:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    c5de:	f362 0108 	bfi	r1, r2, #0, #9
    c5e2:	8501      	strh	r1, [r0, #40]	; 0x28
	pal[i].taken = 1U;
    c5e4:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c5e8:	4b09      	ldr	r3, [pc, #36]	; (c610 <pal_add+0xa8>)
    c5ea:	441c      	add	r4, r3
    c5ec:	79a3      	ldrb	r3, [r4, #6]
    c5ee:	f043 0301 	orr.w	r3, r3, #1
    c5f2:	71a3      	strb	r3, [r4, #6]
	return 0;
    c5f4:	2000      	movs	r0, #0
}
    c5f6:	b003      	add	sp, #12
    c5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pal[i].rl_idx = FILTER_IDX_NONE;
    c5fa:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c5fe:	4b04      	ldr	r3, [pc, #16]	; (c610 <pal_add+0xa8>)
    c600:	4413      	add	r3, r2
    c602:	22ff      	movs	r2, #255	; 0xff
    c604:	721a      	strb	r2, [r3, #8]
    c606:	e7ed      	b.n	c5e4 <pal_add+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
    c608:	2012      	movs	r0, #18
    c60a:	e7f4      	b.n	c5f6 <pal_add+0x8e>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    c60c:	2007      	movs	r0, #7
    c60e:	e7f2      	b.n	c5f6 <pal_add+0x8e>
    c610:	20008874 	.word	0x20008874
    c614:	20008944 	.word	0x20008944

0000c618 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    c618:	2807      	cmp	r0, #7
    c61a:	d814      	bhi.n	c646 <ull_filter_lll_lrpa_get+0x2e>
    c61c:	232c      	movs	r3, #44	; 0x2c
    c61e:	fb00 f303 	mul.w	r3, r0, r3
    c622:	4a0c      	ldr	r2, [pc, #48]	; (c654 <ull_filter_lll_lrpa_get+0x3c>)
    c624:	5cd3      	ldrb	r3, [r2, r3]
    c626:	f013 0f08 	tst.w	r3, #8
    c62a:	d00e      	beq.n	c64a <ull_filter_lll_lrpa_get+0x32>
	    !rl[rl_idx].rpas_ready) {
    c62c:	232c      	movs	r3, #44	; 0x2c
    c62e:	fb00 f303 	mul.w	r3, r0, r3
    c632:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
    c634:	f013 0f02 	tst.w	r3, #2
    c638:	d009      	beq.n	c64e <ull_filter_lll_lrpa_get+0x36>
	return rl[rl_idx].local_rpa;
    c63a:	4613      	mov	r3, r2
    c63c:	222c      	movs	r2, #44	; 0x2c
    c63e:	fb02 3000 	mla	r0, r2, r0, r3
    c642:	6a40      	ldr	r0, [r0, #36]	; 0x24
    c644:	4770      	bx	lr
		return NULL;
    c646:	2000      	movs	r0, #0
    c648:	4770      	bx	lr
    c64a:	2000      	movs	r0, #0
    c64c:	4770      	bx	lr
    c64e:	2000      	movs	r0, #0
}
    c650:	4770      	bx	lr
    c652:	bf00      	nop
    c654:	20008944 	.word	0x20008944

0000c658 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
    c658:	4b02      	ldr	r3, [pc, #8]	; (c664 <ull_filter_lll_irks_get+0xc>)
    c65a:	781b      	ldrb	r3, [r3, #0]
    c65c:	7003      	strb	r3, [r0, #0]
}
    c65e:	4802      	ldr	r0, [pc, #8]	; (c668 <ull_filter_lll_irks_get+0x10>)
    c660:	4770      	bx	lr
    c662:	bf00      	nop
    c664:	20009296 	.word	0x20009296
    c668:	200088c4 	.word	0x200088c4

0000c66c <ull_filter_lll_rl_idx>:
{
    c66c:	b510      	push	{r4, lr}
    c66e:	460c      	mov	r4, r1
	if (filter) {
    c670:	b340      	cbz	r0, c6c4 <ull_filter_lll_rl_idx+0x58>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
    c672:	2907      	cmp	r1, #7
    c674:	d80a      	bhi.n	c68c <ull_filter_lll_rl_idx+0x20>
		LL_ASSERT(fal[devmatch_id].taken);
    c676:	4b28      	ldr	r3, [pc, #160]	; (c718 <ull_filter_lll_rl_idx+0xac>)
    c678:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
    c67c:	f013 0f01 	tst.w	r3, #1
    c680:	d012      	beq.n	c6a8 <ull_filter_lll_rl_idx+0x3c>
		i = fal[devmatch_id].rl_idx;
    c682:	4925      	ldr	r1, [pc, #148]	; (c718 <ull_filter_lll_rl_idx+0xac>)
    c684:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    c688:	7860      	ldrb	r0, [r4, #1]
}
    c68a:	bd10      	pop	{r4, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
    c68c:	f44f 7358 	mov.w	r3, #864	; 0x360
    c690:	4a22      	ldr	r2, [pc, #136]	; (c71c <ull_filter_lll_rl_idx+0xb0>)
    c692:	4923      	ldr	r1, [pc, #140]	; (c720 <ull_filter_lll_rl_idx+0xb4>)
    c694:	4823      	ldr	r0, [pc, #140]	; (c724 <ull_filter_lll_rl_idx+0xb8>)
    c696:	f00d f89a 	bl	197ce <assert_print>
    c69a:	4040      	eors	r0, r0
    c69c:	f380 8811 	msr	BASEPRI, r0
    c6a0:	f04f 0003 	mov.w	r0, #3
    c6a4:	df02      	svc	2
    c6a6:	e7e6      	b.n	c676 <ull_filter_lll_rl_idx+0xa>
		LL_ASSERT(fal[devmatch_id].taken);
    c6a8:	f240 3361 	movw	r3, #865	; 0x361
    c6ac:	4a1b      	ldr	r2, [pc, #108]	; (c71c <ull_filter_lll_rl_idx+0xb0>)
    c6ae:	491e      	ldr	r1, [pc, #120]	; (c728 <ull_filter_lll_rl_idx+0xbc>)
    c6b0:	481c      	ldr	r0, [pc, #112]	; (c724 <ull_filter_lll_rl_idx+0xb8>)
    c6b2:	f00d f88c 	bl	197ce <assert_print>
    c6b6:	4040      	eors	r0, r0
    c6b8:	f380 8811 	msr	BASEPRI, r0
    c6bc:	f04f 0003 	mov.w	r0, #3
    c6c0:	df02      	svc	2
    c6c2:	e7de      	b.n	c682 <ull_filter_lll_rl_idx+0x16>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    c6c4:	2907      	cmp	r1, #7
    c6c6:	d809      	bhi.n	c6dc <ull_filter_lll_rl_idx+0x70>
		LL_ASSERT(rl[i].taken);
    c6c8:	232c      	movs	r3, #44	; 0x2c
    c6ca:	fb04 f303 	mul.w	r3, r4, r3
    c6ce:	4a17      	ldr	r2, [pc, #92]	; (c72c <ull_filter_lll_rl_idx+0xc0>)
    c6d0:	5cd3      	ldrb	r3, [r2, r3]
    c6d2:	f013 0f01 	tst.w	r3, #1
    c6d6:	d00f      	beq.n	c6f8 <ull_filter_lll_rl_idx+0x8c>
		i = devmatch_id;
    c6d8:	4620      	mov	r0, r4
    c6da:	e7d6      	b.n	c68a <ull_filter_lll_rl_idx+0x1e>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
    c6dc:	f44f 7359 	mov.w	r3, #868	; 0x364
    c6e0:	4a0e      	ldr	r2, [pc, #56]	; (c71c <ull_filter_lll_rl_idx+0xb0>)
    c6e2:	4913      	ldr	r1, [pc, #76]	; (c730 <ull_filter_lll_rl_idx+0xc4>)
    c6e4:	480f      	ldr	r0, [pc, #60]	; (c724 <ull_filter_lll_rl_idx+0xb8>)
    c6e6:	f00d f872 	bl	197ce <assert_print>
    c6ea:	4040      	eors	r0, r0
    c6ec:	f380 8811 	msr	BASEPRI, r0
    c6f0:	f04f 0003 	mov.w	r0, #3
    c6f4:	df02      	svc	2
    c6f6:	e7e7      	b.n	c6c8 <ull_filter_lll_rl_idx+0x5c>
		LL_ASSERT(rl[i].taken);
    c6f8:	f240 3366 	movw	r3, #870	; 0x366
    c6fc:	4a07      	ldr	r2, [pc, #28]	; (c71c <ull_filter_lll_rl_idx+0xb0>)
    c6fe:	490d      	ldr	r1, [pc, #52]	; (c734 <ull_filter_lll_rl_idx+0xc8>)
    c700:	4808      	ldr	r0, [pc, #32]	; (c724 <ull_filter_lll_rl_idx+0xb8>)
    c702:	f00d f864 	bl	197ce <assert_print>
    c706:	4040      	eors	r0, r0
    c708:	f380 8811 	msr	BASEPRI, r0
    c70c:	f04f 0003 	mov.w	r0, #3
    c710:	df02      	svc	2
		i = devmatch_id;
    c712:	4620      	mov	r0, r4
    c714:	e7b9      	b.n	c68a <ull_filter_lll_rl_idx+0x1e>
    c716:	bf00      	nop
    c718:	200087d0 	.word	0x200087d0
    c71c:	0001f180 	.word	0x0001f180
    c720:	0001f1e4 	.word	0x0001f1e4
    c724:	0001e920 	.word	0x0001e920
    c728:	0001f290 	.word	0x0001f290
    c72c:	20008944 	.word	0x20008944
    c730:	0001f2a8 	.word	0x0001f2a8
    c734:	0001f350 	.word	0x0001f350

0000c738 <ull_filter_lll_rl_irk_idx>:
{
    c738:	b510      	push	{r4, lr}
    c73a:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
    c73c:	4b1d      	ldr	r3, [pc, #116]	; (c7b4 <ull_filter_lll_rl_irk_idx+0x7c>)
    c73e:	781b      	ldrb	r3, [r3, #0]
    c740:	4283      	cmp	r3, r0
    c742:	d90d      	bls.n	c760 <ull_filter_lll_rl_irk_idx+0x28>
	i = peer_irk_rl_ids[irkmatch_id];
    c744:	4b1c      	ldr	r3, [pc, #112]	; (c7b8 <ull_filter_lll_rl_irk_idx+0x80>)
    c746:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    c748:	2c07      	cmp	r4, #7
    c74a:	d817      	bhi.n	c77c <ull_filter_lll_rl_irk_idx+0x44>
	LL_ASSERT(rl[i].taken);
    c74c:	232c      	movs	r3, #44	; 0x2c
    c74e:	fb04 f303 	mul.w	r3, r4, r3
    c752:	4a1a      	ldr	r2, [pc, #104]	; (c7bc <ull_filter_lll_rl_irk_idx+0x84>)
    c754:	5cd3      	ldrb	r3, [r2, r3]
    c756:	f013 0f01 	tst.w	r3, #1
    c75a:	d01d      	beq.n	c798 <ull_filter_lll_rl_irk_idx+0x60>
}
    c75c:	4620      	mov	r0, r4
    c75e:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
    c760:	f44f 735c 	mov.w	r3, #880	; 0x370
    c764:	4a16      	ldr	r2, [pc, #88]	; (c7c0 <ull_filter_lll_rl_irk_idx+0x88>)
    c766:	4917      	ldr	r1, [pc, #92]	; (c7c4 <ull_filter_lll_rl_irk_idx+0x8c>)
    c768:	4817      	ldr	r0, [pc, #92]	; (c7c8 <ull_filter_lll_rl_irk_idx+0x90>)
    c76a:	f00d f830 	bl	197ce <assert_print>
    c76e:	4040      	eors	r0, r0
    c770:	f380 8811 	msr	BASEPRI, r0
    c774:	f04f 0003 	mov.w	r0, #3
    c778:	df02      	svc	2
    c77a:	e7e3      	b.n	c744 <ull_filter_lll_rl_irk_idx+0xc>
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
    c77c:	f240 3372 	movw	r3, #882	; 0x372
    c780:	4a0f      	ldr	r2, [pc, #60]	; (c7c0 <ull_filter_lll_rl_irk_idx+0x88>)
    c782:	4912      	ldr	r1, [pc, #72]	; (c7cc <ull_filter_lll_rl_irk_idx+0x94>)
    c784:	4810      	ldr	r0, [pc, #64]	; (c7c8 <ull_filter_lll_rl_irk_idx+0x90>)
    c786:	f00d f822 	bl	197ce <assert_print>
    c78a:	4040      	eors	r0, r0
    c78c:	f380 8811 	msr	BASEPRI, r0
    c790:	f04f 0003 	mov.w	r0, #3
    c794:	df02      	svc	2
    c796:	e7d9      	b.n	c74c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
    c798:	f240 3373 	movw	r3, #883	; 0x373
    c79c:	4a08      	ldr	r2, [pc, #32]	; (c7c0 <ull_filter_lll_rl_irk_idx+0x88>)
    c79e:	490c      	ldr	r1, [pc, #48]	; (c7d0 <ull_filter_lll_rl_irk_idx+0x98>)
    c7a0:	4809      	ldr	r0, [pc, #36]	; (c7c8 <ull_filter_lll_rl_irk_idx+0x90>)
    c7a2:	f00d f814 	bl	197ce <assert_print>
    c7a6:	4040      	eors	r0, r0
    c7a8:	f380 8811 	msr	BASEPRI, r0
    c7ac:	f04f 0003 	mov.w	r0, #3
    c7b0:	df02      	svc	2
    c7b2:	e7d3      	b.n	c75c <ull_filter_lll_rl_irk_idx+0x24>
    c7b4:	20009296 	.word	0x20009296
    c7b8:	200088bc 	.word	0x200088bc
    c7bc:	20008944 	.word	0x20008944
    c7c0:	0001f180 	.word	0x0001f180
    c7c4:	0001f35c 	.word	0x0001f35c
    c7c8:	0001e920 	.word	0x0001e920
    c7cc:	0001f37c 	.word	0x0001f37c
    c7d0:	0001f350 	.word	0x0001f350

0000c7d4 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
    c7d4:	2807      	cmp	r0, #7
    c7d6:	d81f      	bhi.n	c818 <ull_filter_lll_irk_in_fal+0x44>
{
    c7d8:	b510      	push	{r4, lr}
    c7da:	4604      	mov	r4, r0
	LL_ASSERT(rl[rl_idx].taken);
    c7dc:	232c      	movs	r3, #44	; 0x2c
    c7de:	fb00 f303 	mul.w	r3, r0, r3
    c7e2:	4a0e      	ldr	r2, [pc, #56]	; (c81c <ull_filter_lll_irk_in_fal+0x48>)
    c7e4:	5cd3      	ldrb	r3, [r2, r3]
    c7e6:	f013 0f01 	tst.w	r3, #1
    c7ea:	d007      	beq.n	c7fc <ull_filter_lll_irk_in_fal+0x28>
	return rl[rl_idx].fal;
    c7ec:	202c      	movs	r0, #44	; 0x2c
    c7ee:	fb00 f404 	mul.w	r4, r0, r4
    c7f2:	4b0a      	ldr	r3, [pc, #40]	; (c81c <ull_filter_lll_irk_in_fal+0x48>)
    c7f4:	5d18      	ldrb	r0, [r3, r4]
    c7f6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
    c7fa:	bd10      	pop	{r4, pc}
	LL_ASSERT(rl[rl_idx].taken);
    c7fc:	f240 337e 	movw	r3, #894	; 0x37e
    c800:	4a07      	ldr	r2, [pc, #28]	; (c820 <ull_filter_lll_irk_in_fal+0x4c>)
    c802:	4908      	ldr	r1, [pc, #32]	; (c824 <ull_filter_lll_irk_in_fal+0x50>)
    c804:	4808      	ldr	r0, [pc, #32]	; (c828 <ull_filter_lll_irk_in_fal+0x54>)
    c806:	f00c ffe2 	bl	197ce <assert_print>
    c80a:	4040      	eors	r0, r0
    c80c:	f380 8811 	msr	BASEPRI, r0
    c810:	f04f 0003 	mov.w	r0, #3
    c814:	df02      	svc	2
    c816:	e7e9      	b.n	c7ec <ull_filter_lll_irk_in_fal+0x18>
		return false;
    c818:	2000      	movs	r0, #0
}
    c81a:	4770      	bx	lr
    c81c:	20008944 	.word	0x20008944
    c820:	0001f180 	.word	0x0001f180
    c824:	0001f1d0 	.word	0x0001f1d0
    c828:	0001e920 	.word	0x0001e920

0000c82c <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    c82c:	4b1c      	ldr	r3, [pc, #112]	; (c8a0 <ull_filter_lll_rl_idx_allowed+0x74>)
    c82e:	781b      	ldrb	r3, [r3, #0]
    c830:	b37b      	cbz	r3, c892 <ull_filter_lll_rl_idx_allowed+0x66>
{
    c832:	b510      	push	{r4, lr}
    c834:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
    c836:	2907      	cmp	r1, #7
    c838:	d82d      	bhi.n	c896 <ull_filter_lll_rl_idx_allowed+0x6a>
    c83a:	bb70      	cbnz	r0, c89a <ull_filter_lll_rl_idx_allowed+0x6e>
	LL_ASSERT(rl[rl_idx].taken);
    c83c:	232c      	movs	r3, #44	; 0x2c
    c83e:	fb01 f303 	mul.w	r3, r1, r3
    c842:	4a18      	ldr	r2, [pc, #96]	; (c8a4 <ull_filter_lll_rl_idx_allowed+0x78>)
    c844:	5cd3      	ldrb	r3, [r2, r3]
    c846:	f013 0f01 	tst.w	r3, #1
    c84a:	d010      	beq.n	c86e <ull_filter_lll_rl_idx_allowed+0x42>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    c84c:	232c      	movs	r3, #44	; 0x2c
    c84e:	fb04 f303 	mul.w	r3, r4, r3
    c852:	4a14      	ldr	r2, [pc, #80]	; (c8a4 <ull_filter_lll_rl_idx_allowed+0x78>)
    c854:	5cd3      	ldrb	r3, [r2, r3]
    c856:	f013 0f04 	tst.w	r3, #4
    c85a:	d016      	beq.n	c88a <ull_filter_lll_rl_idx_allowed+0x5e>
    c85c:	212c      	movs	r1, #44	; 0x2c
    c85e:	fb01 f404 	mul.w	r4, r1, r4
    c862:	5d13      	ldrb	r3, [r2, r4]
    c864:	f013 0f10 	tst.w	r3, #16
    c868:	d011      	beq.n	c88e <ull_filter_lll_rl_idx_allowed+0x62>
    c86a:	2001      	movs	r0, #1
    c86c:	e014      	b.n	c898 <ull_filter_lll_rl_idx_allowed+0x6c>
	LL_ASSERT(rl[rl_idx].taken);
    c86e:	f240 3397 	movw	r3, #919	; 0x397
    c872:	4a0d      	ldr	r2, [pc, #52]	; (c8a8 <ull_filter_lll_rl_idx_allowed+0x7c>)
    c874:	490d      	ldr	r1, [pc, #52]	; (c8ac <ull_filter_lll_rl_idx_allowed+0x80>)
    c876:	480e      	ldr	r0, [pc, #56]	; (c8b0 <ull_filter_lll_rl_idx_allowed+0x84>)
    c878:	f00c ffa9 	bl	197ce <assert_print>
    c87c:	4040      	eors	r0, r0
    c87e:	f380 8811 	msr	BASEPRI, r0
    c882:	f04f 0003 	mov.w	r0, #3
    c886:	df02      	svc	2
    c888:	e7e0      	b.n	c84c <ull_filter_lll_rl_idx_allowed+0x20>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
    c88a:	2001      	movs	r0, #1
    c88c:	e004      	b.n	c898 <ull_filter_lll_rl_idx_allowed+0x6c>
    c88e:	2000      	movs	r0, #0
    c890:	e002      	b.n	c898 <ull_filter_lll_rl_idx_allowed+0x6c>
		return true;
    c892:	2001      	movs	r0, #1
}
    c894:	4770      	bx	lr
		return true;
    c896:	2001      	movs	r0, #1
}
    c898:	bd10      	pop	{r4, pc}
		return true;
    c89a:	2001      	movs	r0, #1
    c89c:	e7fc      	b.n	c898 <ull_filter_lll_rl_idx_allowed+0x6c>
    c89e:	bf00      	nop
    c8a0:	20009297 	.word	0x20009297
    c8a4:	20008944 	.word	0x20008944
    c8a8:	0001f180 	.word	0x0001f180
    c8ac:	0001f1d0 	.word	0x0001f1d0
    c8b0:	0001e920 	.word	0x0001e920

0000c8b4 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
    c8b4:	7813      	ldrb	r3, [r2, #0]
    c8b6:	2bff      	cmp	r3, #255	; 0xff
    c8b8:	d14d      	bne.n	c956 <ull_filter_lll_rl_addr_allowed+0xa2>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    c8ba:	2300      	movs	r3, #0
    c8bc:	2b07      	cmp	r3, #7
    c8be:	d84c      	bhi.n	c95a <ull_filter_lll_rl_addr_allowed+0xa6>
{
    c8c0:	b570      	push	{r4, r5, r6, lr}
    c8c2:	e006      	b.n	c8d2 <ull_filter_lll_rl_addr_allowed+0x1e>
			if (j == BDADDR_SIZE) {
    c8c4:	f1bc 0f06 	cmp.w	ip, #6
    c8c8:	d02c      	beq.n	c924 <ull_filter_lll_rl_addr_allowed+0x70>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
    c8ca:	3301      	adds	r3, #1
    c8cc:	b2db      	uxtb	r3, r3
    c8ce:	2b07      	cmp	r3, #7
    c8d0:	d83f      	bhi.n	c952 <ull_filter_lll_rl_addr_allowed+0x9e>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
    c8d2:	469e      	mov	lr, r3
    c8d4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    c8d8:	fb0c fc03 	mul.w	ip, ip, r3
    c8dc:	4c20      	ldr	r4, [pc, #128]	; (c960 <ull_filter_lll_rl_addr_allowed+0xac>)
    c8de:	f814 c00c 	ldrb.w	ip, [r4, ip]
    c8e2:	f01c 0f01 	tst.w	ip, #1
    c8e6:	d0f0      	beq.n	c8ca <ull_filter_lll_rl_addr_allowed+0x16>
    c8e8:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    c8ec:	fb0c fc03 	mul.w	ip, ip, r3
    c8f0:	f814 c00c 	ldrb.w	ip, [r4, ip]
    c8f4:	f3cc 1c80 	ubfx	ip, ip, #6, #1
    c8f8:	4584      	cmp	ip, r0
    c8fa:	d1e6      	bne.n	c8ca <ull_filter_lll_rl_addr_allowed+0x16>
			uint8_t *addr = rl[i].id_addr.val;
    c8fc:	252c      	movs	r5, #44	; 0x2c
    c8fe:	fb05 4403 	mla	r4, r5, r3, r4
    c902:	3401      	adds	r4, #1
			for (j = 0U; j < BDADDR_SIZE; j++) {
    c904:	f04f 0c00 	mov.w	ip, #0
    c908:	f1bc 0f05 	cmp.w	ip, #5
    c90c:	d8da      	bhi.n	c8c4 <ull_filter_lll_rl_addr_allowed+0x10>
				if (addr[j] != id_addr[j]) {
    c90e:	f814 600c 	ldrb.w	r6, [r4, ip]
    c912:	f811 500c 	ldrb.w	r5, [r1, ip]
    c916:	42ae      	cmp	r6, r5
    c918:	d1d4      	bne.n	c8c4 <ull_filter_lll_rl_addr_allowed+0x10>
			for (j = 0U; j < BDADDR_SIZE; j++) {
    c91a:	f10c 0c01 	add.w	ip, ip, #1
    c91e:	fa5f fc8c 	uxtb.w	ip, ip
    c922:	e7f1      	b.n	c908 <ull_filter_lll_rl_addr_allowed+0x54>
				*rl_idx = i;
    c924:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
    c926:	232c      	movs	r3, #44	; 0x2c
    c928:	fb03 f30e 	mul.w	r3, r3, lr
    c92c:	4a0c      	ldr	r2, [pc, #48]	; (c960 <ull_filter_lll_rl_addr_allowed+0xac>)
    c92e:	5cd3      	ldrb	r3, [r2, r3]
    c930:	f013 0f04 	tst.w	r3, #4
    c934:	d009      	beq.n	c94a <ull_filter_lll_rl_addr_allowed+0x96>
    c936:	232c      	movs	r3, #44	; 0x2c
    c938:	fb03 fe0e 	mul.w	lr, r3, lr
    c93c:	f812 300e 	ldrb.w	r3, [r2, lr]
    c940:	f013 0f10 	tst.w	r3, #16
    c944:	d003      	beq.n	c94e <ull_filter_lll_rl_addr_allowed+0x9a>
    c946:	2001      	movs	r0, #1
    c948:	e004      	b.n	c954 <ull_filter_lll_rl_addr_allowed+0xa0>
    c94a:	2001      	movs	r0, #1
    c94c:	e002      	b.n	c954 <ull_filter_lll_rl_addr_allowed+0xa0>
    c94e:	2000      	movs	r0, #0
    c950:	e000      	b.n	c954 <ull_filter_lll_rl_addr_allowed+0xa0>
	return true;
    c952:	2001      	movs	r0, #1
}
    c954:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    c956:	2001      	movs	r0, #1
    c958:	4770      	bx	lr
	return true;
    c95a:	2001      	movs	r0, #1
}
    c95c:	4770      	bx	lr
    c95e:	bf00      	nop
    c960:	20008944 	.word	0x20008944

0000c964 <ull_filter_lll_rl_addr_resolve>:
{
    c964:	4603      	mov	r3, r0
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    c966:	4813      	ldr	r0, [pc, #76]	; (c9b4 <ull_filter_lll_rl_addr_resolve+0x50>)
    c968:	7800      	ldrb	r0, [r0, #0]
    c96a:	b1e0      	cbz	r0, c9a6 <ull_filter_lll_rl_addr_resolve+0x42>
    c96c:	2a07      	cmp	r2, #7
    c96e:	d81c      	bhi.n	c9aa <ull_filter_lll_rl_addr_resolve+0x46>
{
    c970:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
    c972:	202c      	movs	r0, #44	; 0x2c
    c974:	fb02 f000 	mul.w	r0, r2, r0
    c978:	4c0f      	ldr	r4, [pc, #60]	; (c9b8 <ull_filter_lll_rl_addr_resolve+0x54>)
    c97a:	f814 c000 	ldrb.w	ip, [r4, r0]
    c97e:	f3cc 00c0 	ubfx	r0, ip, #3, #1
    c982:	f01c 0f08 	tst.w	ip, #8
    c986:	d013      	beq.n	c9b0 <ull_filter_lll_rl_addr_resolve+0x4c>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
    c988:	b18b      	cbz	r3, c9ae <ull_filter_lll_rl_addr_resolve+0x4a>
    c98a:	794b      	ldrb	r3, [r1, #5]
    c98c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c990:	2b40      	cmp	r3, #64	; 0x40
    c992:	d001      	beq.n	c998 <ull_filter_lll_rl_addr_resolve+0x34>
	return false;
    c994:	2000      	movs	r0, #0
    c996:	e00b      	b.n	c9b0 <ull_filter_lll_rl_addr_resolve+0x4c>
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
    c998:	232c      	movs	r3, #44	; 0x2c
    c99a:	fb03 4002 	mla	r0, r3, r2, r4
    c99e:	3007      	adds	r0, #7
    c9a0:	f00d f845 	bl	19a2e <bt_rpa_irk_matches>
    c9a4:	e004      	b.n	c9b0 <ull_filter_lll_rl_addr_resolve+0x4c>
		return false;
    c9a6:	2000      	movs	r0, #0
    c9a8:	4770      	bx	lr
    c9aa:	2000      	movs	r0, #0
}
    c9ac:	4770      	bx	lr
	return false;
    c9ae:	2000      	movs	r0, #0
}
    c9b0:	bd10      	pop	{r4, pc}
    c9b2:	bf00      	nop
    c9b4:	20009297 	.word	0x20009297
    c9b8:	20008944 	.word	0x20008944

0000c9bc <ull_filter_lll_rl_enabled>:
	return rl_enable;
    c9bc:	4b02      	ldr	r3, [pc, #8]	; (c9c8 <ull_filter_lll_rl_enabled+0xc>)
    c9be:	7818      	ldrb	r0, [r3, #0]
}
    c9c0:	3800      	subs	r0, #0
    c9c2:	bf18      	it	ne
    c9c4:	2001      	movne	r0, #1
    c9c6:	4770      	bx	lr
    c9c8:	20009297 	.word	0x20009297

0000c9cc <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
    c9cc:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
    c9ce:	4b09      	ldr	r3, [pc, #36]	; (c9f4 <rtc0_nrf5_isr+0x28>)
    c9d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    c9d4:	b933      	cbnz	r3, c9e4 <rtc0_nrf5_isr+0x18>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
    c9d6:	2001      	movs	r0, #1
    c9d8:	f7fa fb1e 	bl	7018 <mayfly_run>

#if !defined(CONFIG_BT_CTLR_LOW_LAT) && \
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	lll_prof_enter_ull_low();

	mayfly_run(TICKER_USER_ID_ULL_LOW);
    c9dc:	2002      	movs	r0, #2
    c9de:	f7fa fb1b 	bl	7018 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
    c9e2:	bd08      	pop	{r3, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
    c9e4:	2000      	movs	r0, #0
    c9e6:	4b03      	ldr	r3, [pc, #12]	; (c9f4 <rtc0_nrf5_isr+0x28>)
    c9e8:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
    c9ec:	f7fa fc38 	bl	7260 <ticker_trigger>
    c9f0:	e7f1      	b.n	c9d6 <rtc0_nrf5_isr+0xa>
    c9f2:	bf00      	nop
    c9f4:	4000b000 	.word	0x4000b000

0000c9f8 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
    c9f8:	b508      	push	{r3, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
    c9fa:	4b0f      	ldr	r3, [pc, #60]	; (ca38 <ticker_stop_op_cb+0x40>)
    c9fc:	781b      	ldrb	r3, [r3, #0]
    c9fe:	b2db      	uxtb	r3, r3
    ca00:	4a0e      	ldr	r2, [pc, #56]	; (ca3c <ticker_stop_op_cb+0x44>)
    ca02:	7812      	ldrb	r2, [r2, #0]
    ca04:	4293      	cmp	r3, r2
    ca06:	d008      	beq.n	ca1a <ticker_stop_op_cb+0x22>
	preempt_stop_ack++;
    ca08:	4a0c      	ldr	r2, [pc, #48]	; (ca3c <ticker_stop_op_cb+0x44>)
    ca0a:	7813      	ldrb	r3, [r2, #0]
    ca0c:	3301      	adds	r3, #1
    ca0e:	7013      	strb	r3, [r2, #0]

	preempt_req = preempt_ack;
    ca10:	4b0b      	ldr	r3, [pc, #44]	; (ca40 <ticker_stop_op_cb+0x48>)
    ca12:	781a      	ldrb	r2, [r3, #0]
    ca14:	4b0b      	ldr	r3, [pc, #44]	; (ca44 <ticker_stop_op_cb+0x4c>)
    ca16:	701a      	strb	r2, [r3, #0]
}
    ca18:	bd08      	pop	{r3, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
    ca1a:	f240 3302 	movw	r3, #770	; 0x302
    ca1e:	4a0a      	ldr	r2, [pc, #40]	; (ca48 <ticker_stop_op_cb+0x50>)
    ca20:	490a      	ldr	r1, [pc, #40]	; (ca4c <ticker_stop_op_cb+0x54>)
    ca22:	480b      	ldr	r0, [pc, #44]	; (ca50 <ticker_stop_op_cb+0x58>)
    ca24:	f00c fed3 	bl	197ce <assert_print>
    ca28:	4040      	eors	r0, r0
    ca2a:	f380 8811 	msr	BASEPRI, r0
    ca2e:	f04f 0003 	mov.w	r0, #3
    ca32:	df02      	svc	2
    ca34:	e7e8      	b.n	ca08 <ticker_stop_op_cb+0x10>
    ca36:	bf00      	nop
    ca38:	2000929d 	.word	0x2000929d
    ca3c:	2000929c 	.word	0x2000929c
    ca40:	20009298 	.word	0x20009298
    ca44:	20009299 	.word	0x20009299
    ca48:	0001f384 	.word	0x0001f384
    ca4c:	0001f3cc 	.word	0x0001f3cc
    ca50:	0001e920 	.word	0x0001e920

0000ca54 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
    ca54:	b508      	push	{r3, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ca56:	b9b0      	cbnz	r0, ca86 <ticker_start_op_cb+0x32>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
    ca58:	4b20      	ldr	r3, [pc, #128]	; (cadc <ticker_start_op_cb+0x88>)
    ca5a:	781b      	ldrb	r3, [r3, #0]
    ca5c:	b2db      	uxtb	r3, r3
    ca5e:	4a20      	ldr	r2, [pc, #128]	; (cae0 <ticker_start_op_cb+0x8c>)
    ca60:	7812      	ldrb	r2, [r2, #0]
    ca62:	4293      	cmp	r3, r2
    ca64:	d01d      	beq.n	caa2 <ticker_start_op_cb+0x4e>
	preempt_start_ack++;
    ca66:	4a1e      	ldr	r2, [pc, #120]	; (cae0 <ticker_start_op_cb+0x8c>)
    ca68:	7813      	ldrb	r3, [r2, #0]
    ca6a:	3301      	adds	r3, #1
    ca6c:	7013      	strb	r3, [r2, #0]

	LL_ASSERT(preempt_req == preempt_ack);
    ca6e:	4b1d      	ldr	r3, [pc, #116]	; (cae4 <ticker_start_op_cb+0x90>)
    ca70:	781a      	ldrb	r2, [r3, #0]
    ca72:	4b1d      	ldr	r3, [pc, #116]	; (cae8 <ticker_start_op_cb+0x94>)
    ca74:	781b      	ldrb	r3, [r3, #0]
    ca76:	b2db      	uxtb	r3, r3
    ca78:	429a      	cmp	r2, r3
    ca7a:	d120      	bne.n	cabe <ticker_start_op_cb+0x6a>
	preempt_req++;
    ca7c:	4a19      	ldr	r2, [pc, #100]	; (cae4 <ticker_start_op_cb+0x90>)
    ca7e:	7813      	ldrb	r3, [r2, #0]
    ca80:	3301      	adds	r3, #1
    ca82:	7013      	strb	r3, [r2, #0]
}
    ca84:	bd08      	pop	{r3, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ca86:	f240 330b 	movw	r3, #779	; 0x30b
    ca8a:	4a18      	ldr	r2, [pc, #96]	; (caec <ticker_start_op_cb+0x98>)
    ca8c:	4918      	ldr	r1, [pc, #96]	; (caf0 <ticker_start_op_cb+0x9c>)
    ca8e:	4819      	ldr	r0, [pc, #100]	; (caf4 <ticker_start_op_cb+0xa0>)
    ca90:	f00c fe9d 	bl	197ce <assert_print>
    ca94:	4040      	eors	r0, r0
    ca96:	f380 8811 	msr	BASEPRI, r0
    ca9a:	f04f 0003 	mov.w	r0, #3
    ca9e:	df02      	svc	2
    caa0:	e7da      	b.n	ca58 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
    caa2:	f240 330d 	movw	r3, #781	; 0x30d
    caa6:	4a11      	ldr	r2, [pc, #68]	; (caec <ticker_start_op_cb+0x98>)
    caa8:	4913      	ldr	r1, [pc, #76]	; (caf8 <ticker_start_op_cb+0xa4>)
    caaa:	4812      	ldr	r0, [pc, #72]	; (caf4 <ticker_start_op_cb+0xa0>)
    caac:	f00c fe8f 	bl	197ce <assert_print>
    cab0:	4040      	eors	r0, r0
    cab2:	f380 8811 	msr	BASEPRI, r0
    cab6:	f04f 0003 	mov.w	r0, #3
    caba:	df02      	svc	2
    cabc:	e7d3      	b.n	ca66 <ticker_start_op_cb+0x12>
	LL_ASSERT(preempt_req == preempt_ack);
    cabe:	f44f 7344 	mov.w	r3, #784	; 0x310
    cac2:	4a0a      	ldr	r2, [pc, #40]	; (caec <ticker_start_op_cb+0x98>)
    cac4:	490d      	ldr	r1, [pc, #52]	; (cafc <ticker_start_op_cb+0xa8>)
    cac6:	480b      	ldr	r0, [pc, #44]	; (caf4 <ticker_start_op_cb+0xa0>)
    cac8:	f00c fe81 	bl	197ce <assert_print>
    cacc:	4040      	eors	r0, r0
    cace:	f380 8811 	msr	BASEPRI, r0
    cad2:	f04f 0003 	mov.w	r0, #3
    cad6:	df02      	svc	2
    cad8:	e7d0      	b.n	ca7c <ticker_start_op_cb+0x28>
    cada:	bf00      	nop
    cadc:	2000929b 	.word	0x2000929b
    cae0:	2000929a 	.word	0x2000929a
    cae4:	20009299 	.word	0x20009299
    cae8:	20009298 	.word	0x20009298
    caec:	0001f384 	.word	0x0001f384
    caf0:	0001f020 	.word	0x0001f020
    caf4:	0001e920 	.word	0x0001e920
    caf8:	0001f3f4 	.word	0x0001f3f4
    cafc:	0001f41c 	.word	0x0001f41c

0000cb00 <resume_enqueue>:
{
    cb00:	b510      	push	{r4, lr}
    cb02:	b086      	sub	sp, #24
    cb04:	4603      	mov	r3, r0
	struct lll_prepare_param prepare_param = {0};
    cb06:	2200      	movs	r2, #0
    cb08:	9202      	str	r2, [sp, #8]
    cb0a:	9203      	str	r2, [sp, #12]
    cb0c:	9204      	str	r2, [sp, #16]
    cb0e:	9205      	str	r2, [sp, #20]
	prepare_param.param = event.curr.param;
    cb10:	4c06      	ldr	r4, [pc, #24]	; (cb2c <resume_enqueue+0x2c>)
    cb12:	6821      	ldr	r1, [r4, #0]
    cb14:	9105      	str	r1, [sp, #20]
	event.curr.param = NULL;
    cb16:	6022      	str	r2, [r4, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
    cb18:	2201      	movs	r2, #1
    cb1a:	9200      	str	r2, [sp, #0]
    cb1c:	aa02      	add	r2, sp, #8
    cb1e:	68a1      	ldr	r1, [r4, #8]
    cb20:	6860      	ldr	r0, [r4, #4]
    cb22:	f7fc ff3d 	bl	99a0 <ull_prepare_enqueue>
}
    cb26:	b006      	add	sp, #24
    cb28:	bd10      	pop	{r4, pc}
    cb2a:	bf00      	nop
    cb2c:	20008ae0 	.word	0x20008ae0

0000cb30 <preempt_ticker_stop>:

	return ret;
}

static uint32_t preempt_ticker_stop(void)
{
    cb30:	b510      	push	{r4, lr}
    cb32:	b082      	sub	sp, #8
	uint32_t ret;

	/* Do not request to stop preempt timeout if already requested or
	 * has expired
	 */
	if ((preempt_stop_req != preempt_stop_ack) ||
    cb34:	4b18      	ldr	r3, [pc, #96]	; (cb98 <preempt_ticker_stop+0x68>)
    cb36:	781b      	ldrb	r3, [r3, #0]
    cb38:	b2db      	uxtb	r3, r3
    cb3a:	4a18      	ldr	r2, [pc, #96]	; (cb9c <preempt_ticker_stop+0x6c>)
    cb3c:	7812      	ldrb	r2, [r2, #0]
    cb3e:	4293      	cmp	r3, r2
    cb40:	d124      	bne.n	cb8c <preempt_ticker_stop+0x5c>
	    (preempt_req == preempt_ack)) {
    cb42:	4b17      	ldr	r3, [pc, #92]	; (cba0 <preempt_ticker_stop+0x70>)
    cb44:	781a      	ldrb	r2, [r3, #0]
    cb46:	4b17      	ldr	r3, [pc, #92]	; (cba4 <preempt_ticker_stop+0x74>)
    cb48:	781b      	ldrb	r3, [r3, #0]
    cb4a:	b2db      	uxtb	r3, r3
	if ((preempt_stop_req != preempt_stop_ack) ||
    cb4c:	429a      	cmp	r2, r3
    cb4e:	d021      	beq.n	cb94 <preempt_ticker_stop+0x64>
		return TICKER_STATUS_SUCCESS;
	}

	preempt_stop_req++;
    cb50:	4a11      	ldr	r2, [pc, #68]	; (cb98 <preempt_ticker_stop+0x68>)
    cb52:	7813      	ldrb	r3, [r2, #0]
    cb54:	3301      	adds	r3, #1
    cb56:	b2db      	uxtb	r3, r3
    cb58:	7013      	strb	r3, [r2, #0]

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    cb5a:	2000      	movs	r0, #0
    cb5c:	9000      	str	r0, [sp, #0]
    cb5e:	4b12      	ldr	r3, [pc, #72]	; (cba8 <preempt_ticker_stop+0x78>)
    cb60:	4602      	mov	r2, r0
    cb62:	4601      	mov	r1, r0
    cb64:	f7fa fc6c 	bl	7440 <ticker_stop>
			  TICKER_USER_ID_LLL,
			  TICKER_ID_LLL_PREEMPT,
			  ticker_stop_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cb68:	4604      	mov	r4, r0
    cb6a:	b180      	cbz	r0, cb8e <preempt_ticker_stop+0x5e>
    cb6c:	2802      	cmp	r0, #2
    cb6e:	d00e      	beq.n	cb8e <preempt_ticker_stop+0x5e>
    cb70:	f240 3363 	movw	r3, #867	; 0x363
    cb74:	4a0d      	ldr	r2, [pc, #52]	; (cbac <preempt_ticker_stop+0x7c>)
    cb76:	490e      	ldr	r1, [pc, #56]	; (cbb0 <preempt_ticker_stop+0x80>)
    cb78:	480e      	ldr	r0, [pc, #56]	; (cbb4 <preempt_ticker_stop+0x84>)
    cb7a:	f00c fe28 	bl	197ce <assert_print>
    cb7e:	4040      	eors	r0, r0
    cb80:	f380 8811 	msr	BASEPRI, r0
    cb84:	f04f 0003 	mov.w	r0, #3
    cb88:	df02      	svc	2
    cb8a:	e000      	b.n	cb8e <preempt_ticker_stop+0x5e>
		return TICKER_STATUS_SUCCESS;
    cb8c:	2400      	movs	r4, #0
		  (ret == TICKER_STATUS_BUSY));

	return ret;
}
    cb8e:	4620      	mov	r0, r4
    cb90:	b002      	add	sp, #8
    cb92:	bd10      	pop	{r4, pc}
		return TICKER_STATUS_SUCCESS;
    cb94:	2400      	movs	r4, #0
    cb96:	e7fa      	b.n	cb8e <preempt_ticker_stop+0x5e>
    cb98:	2000929d 	.word	0x2000929d
    cb9c:	2000929c 	.word	0x2000929c
    cba0:	20009299 	.word	0x20009299
    cba4:	20009298 	.word	0x20009298
    cba8:	0000c9f9 	.word	0x0000c9f9
    cbac:	0001f384 	.word	0x0001f384
    cbb0:	0001ee10 	.word	0x0001ee10
    cbb4:	0001e920 	.word	0x0001e920

0000cbb8 <preempt_ticker_start>:
{
    cbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbbc:	b08a      	sub	sp, #40	; 0x28
    cbbe:	4604      	mov	r4, r0
    cbc0:	460d      	mov	r5, r1
	ull = HDR_LLL2ULL(p->param);
    cbc2:	68cb      	ldr	r3, [r1, #12]
    cbc4:	681b      	ldr	r3, [r3, #0]
	preempt_anchor = p->ticks_at_expire;
    cbc6:	f8d1 8000 	ldr.w	r8, [r1]
	preempt_to = MAX(ull->ticks_active_to_start,
    cbca:	6899      	ldr	r1, [r3, #8]
    cbcc:	685a      	ldr	r2, [r3, #4]
		     ull->ticks_preempt_to_start;
    cbce:	68de      	ldr	r6, [r3, #12]
	preempt_to = MAX(ull->ticks_active_to_start,
    cbd0:	4291      	cmp	r1, r2
    cbd2:	bf2c      	ite	cs
    cbd4:	ebc6 0601 	rsbcs	r6, r6, r1
    cbd8:	ebc6 0602 	rsbcc	r6, r6, r2
	ticks_at_preempt_new = preempt_anchor + preempt_to;
    cbdc:	eb08 0706 	add.w	r7, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
    cbe0:	4b22      	ldr	r3, [pc, #136]	; (cc6c <preempt_ticker_start+0xb4>)
    cbe2:	781b      	ldrb	r3, [r3, #0]
    cbe4:	b2db      	uxtb	r3, r3
    cbe6:	4a22      	ldr	r2, [pc, #136]	; (cc70 <preempt_ticker_start+0xb8>)
    cbe8:	7812      	ldrb	r2, [r2, #0]
    cbea:	4293      	cmp	r3, r2
    cbec:	d032      	beq.n	cc54 <preempt_ticker_start+0x9c>
		diff = ticks_at_preempt_new - ticks_at_preempt;
    cbee:	4b21      	ldr	r3, [pc, #132]	; (cc74 <preempt_ticker_start+0xbc>)
    cbf0:	681b      	ldr	r3, [r3, #0]
    cbf2:	1afb      	subs	r3, r7, r3
		if (!prev || prev->is_aborted ||
    cbf4:	2c00      	cmp	r4, #0
    cbf6:	d035      	beq.n	cc64 <preempt_ticker_start+0xac>
    cbf8:	7f22      	ldrb	r2, [r4, #28]
    cbfa:	f012 0f02 	tst.w	r2, #2
    cbfe:	d133      	bne.n	cc68 <preempt_ticker_start+0xb0>
    cc00:	f413 0000 	ands.w	r0, r3, #8388608	; 0x800000
    cc04:	d023      	beq.n	cc4e <preempt_ticker_start+0x96>
		preempt_ticker_stop();
    cc06:	f7ff ff93 	bl	cb30 <preempt_ticker_stop>
		ticks_at_preempt = ticks_at_preempt_new;
    cc0a:	4b1a      	ldr	r3, [pc, #104]	; (cc74 <preempt_ticker_start+0xbc>)
    cc0c:	601f      	str	r7, [r3, #0]
		prev->is_aborted = 1U;
    cc0e:	7f23      	ldrb	r3, [r4, #28]
    cc10:	f043 0302 	orr.w	r3, r3, #2
    cc14:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
    cc16:	69a3      	ldr	r3, [r4, #24]
    cc18:	68e1      	ldr	r1, [r4, #12]
    cc1a:	4620      	mov	r0, r4
    cc1c:	4798      	blx	r3
	preempt_start_req++;
    cc1e:	4a13      	ldr	r2, [pc, #76]	; (cc6c <preempt_ticker_start+0xb4>)
    cc20:	7813      	ldrb	r3, [r2, #0]
    cc22:	3301      	adds	r3, #1
    cc24:	b2db      	uxtb	r3, r3
    cc26:	7013      	strb	r3, [r2, #0]
	ticks_at_preempt = ticks_at_preempt_new;
    cc28:	4b12      	ldr	r3, [pc, #72]	; (cc74 <preempt_ticker_start+0xbc>)
    cc2a:	601f      	str	r7, [r3, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    cc2c:	9508      	str	r5, [sp, #32]
    cc2e:	4b12      	ldr	r3, [pc, #72]	; (cc78 <preempt_ticker_start+0xc0>)
    cc30:	9307      	str	r3, [sp, #28]
    cc32:	9506      	str	r5, [sp, #24]
    cc34:	4b11      	ldr	r3, [pc, #68]	; (cc7c <preempt_ticker_start+0xc4>)
    cc36:	9305      	str	r3, [sp, #20]
    cc38:	2000      	movs	r0, #0
    cc3a:	9004      	str	r0, [sp, #16]
    cc3c:	9003      	str	r0, [sp, #12]
    cc3e:	9002      	str	r0, [sp, #8]
    cc40:	9001      	str	r0, [sp, #4]
    cc42:	9600      	str	r6, [sp, #0]
    cc44:	4643      	mov	r3, r8
    cc46:	4602      	mov	r2, r0
    cc48:	4601      	mov	r1, r0
    cc4a:	f00d fccd 	bl	1a5e8 <ticker_start>
}
    cc4e:	b00a      	add	sp, #40	; 0x28
    cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    (preempt_req != preempt_ack)) {
    cc54:	4b0a      	ldr	r3, [pc, #40]	; (cc80 <preempt_ticker_start+0xc8>)
    cc56:	781a      	ldrb	r2, [r3, #0]
    cc58:	4b0a      	ldr	r3, [pc, #40]	; (cc84 <preempt_ticker_start+0xcc>)
    cc5a:	781b      	ldrb	r3, [r3, #0]
    cc5c:	b2db      	uxtb	r3, r3
	if ((preempt_start_req != preempt_start_ack) ||
    cc5e:	429a      	cmp	r2, r3
    cc60:	d1c5      	bne.n	cbee <preempt_ticker_start+0x36>
    cc62:	e7dc      	b.n	cc1e <preempt_ticker_start+0x66>
			return TICKER_STATUS_SUCCESS;
    cc64:	2000      	movs	r0, #0
    cc66:	e7f2      	b.n	cc4e <preempt_ticker_start+0x96>
    cc68:	2000      	movs	r0, #0
    cc6a:	e7f0      	b.n	cc4e <preempt_ticker_start+0x96>
    cc6c:	2000929b 	.word	0x2000929b
    cc70:	2000929a 	.word	0x2000929a
    cc74:	20008af4 	.word	0x20008af4
    cc78:	0000ca55 	.word	0x0000ca55
    cc7c:	0000cdd5 	.word	0x0000cdd5
    cc80:	20009299 	.word	0x20009299
    cc84:	20009298 	.word	0x20009298

0000cc88 <preempt>:
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
    cc88:	4b4c      	ldr	r3, [pc, #304]	; (cdbc <preempt+0x134>)
    cc8a:	689b      	ldr	r3, [r3, #8]
    cc8c:	2b00      	cmp	r3, #0
    cc8e:	f000 8093 	beq.w	cdb8 <preempt+0x130>
{
    cc92:	b530      	push	{r4, r5, lr}
    cc94:	b083      	sub	sp, #12
    cc96:	4605      	mov	r5, r0
	if (!event.curr.abort_cb || !event.curr.param) {
    cc98:	4b48      	ldr	r3, [pc, #288]	; (cdbc <preempt+0x134>)
    cc9a:	681b      	ldr	r3, [r3, #0]
    cc9c:	b143      	cbz	r3, ccb0 <preempt+0x28>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
    cc9e:	23ff      	movs	r3, #255	; 0xff
    cca0:	f88d 3003 	strb.w	r3, [sp, #3]
	next = ull_prepare_dequeue_iter(&idx);
    cca4:	f10d 0003 	add.w	r0, sp, #3
    cca8:	f7fc fec2 	bl	9a30 <ull_prepare_dequeue_iter>
	if (!next) {
    ccac:	4604      	mov	r4, r0
    ccae:	b930      	cbnz	r0, ccbe <preempt+0x36>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
    ccb0:	b003      	add	sp, #12
    ccb2:	bd30      	pop	{r4, r5, pc}
		next = ull_prepare_dequeue_iter(&idx);
    ccb4:	f10d 0003 	add.w	r0, sp, #3
    ccb8:	f7fc feba 	bl	9a30 <ull_prepare_dequeue_iter>
    ccbc:	4604      	mov	r4, r0
	while (next && (next->is_aborted || next->is_resume)) {
    ccbe:	b11c      	cbz	r4, ccc8 <preempt+0x40>
    ccc0:	7f23      	ldrb	r3, [r4, #28]
    ccc2:	f013 0f03 	tst.w	r3, #3
    ccc6:	d1f5      	bne.n	ccb4 <preempt+0x2c>
	if (!next) {
    ccc8:	2c00      	cmp	r4, #0
    ccca:	d0f1      	beq.n	ccb0 <preempt+0x28>
	if (next != param) {
    cccc:	42ac      	cmp	r4, r5
    ccce:	d121      	bne.n	cd14 <preempt+0x8c>
	err = event.curr.is_abort_cb(next->prepare_param.param,
    ccd0:	4b3a      	ldr	r3, [pc, #232]	; (cdbc <preempt+0x134>)
    ccd2:	685d      	ldr	r5, [r3, #4]
    ccd4:	aa01      	add	r2, sp, #4
    ccd6:	6819      	ldr	r1, [r3, #0]
    ccd8:	68e0      	ldr	r0, [r4, #12]
    ccda:	47a8      	blx	r5
	if (!err) {
    ccdc:	4605      	mov	r5, r0
    ccde:	2800      	cmp	r0, #0
    cce0:	d02e      	beq.n	cd40 <preempt+0xb8>
	event.curr.abort_cb(NULL, event.curr.param);
    cce2:	4b36      	ldr	r3, [pc, #216]	; (cdbc <preempt+0x134>)
    cce4:	689a      	ldr	r2, [r3, #8]
    cce6:	6819      	ldr	r1, [r3, #0]
    cce8:	2000      	movs	r0, #0
    ccea:	4790      	blx	r2
	if (err == -EAGAIN) {
    ccec:	f115 0f0b 	cmn.w	r5, #11
    ccf0:	d02f      	beq.n	cd52 <preempt+0xca>
		LL_ASSERT(err == -ECANCELED);
    ccf2:	f115 0f8c 	cmn.w	r5, #140	; 0x8c
    ccf6:	d0db      	beq.n	ccb0 <preempt+0x28>
    ccf8:	f240 33d1 	movw	r3, #977	; 0x3d1
    ccfc:	4a30      	ldr	r2, [pc, #192]	; (cdc0 <preempt+0x138>)
    ccfe:	4931      	ldr	r1, [pc, #196]	; (cdc4 <preempt+0x13c>)
    cd00:	4831      	ldr	r0, [pc, #196]	; (cdc8 <preempt+0x140>)
    cd02:	f00c fd64 	bl	197ce <assert_print>
    cd06:	4040      	eors	r0, r0
    cd08:	f380 8811 	msr	BASEPRI, r0
    cd0c:	f04f 0003 	mov.w	r0, #3
    cd10:	df02      	svc	2
    cd12:	e7cd      	b.n	ccb0 <preempt+0x28>
		ret = preempt_ticker_start(NULL, next);
    cd14:	4621      	mov	r1, r4
    cd16:	2000      	movs	r0, #0
    cd18:	f7ff ff4e 	bl	cbb8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    cd1c:	2800      	cmp	r0, #0
    cd1e:	d0c7      	beq.n	ccb0 <preempt+0x28>
    cd20:	2802      	cmp	r0, #2
    cd22:	d0c5      	beq.n	ccb0 <preempt+0x28>
    cd24:	f240 339d 	movw	r3, #925	; 0x39d
    cd28:	4a25      	ldr	r2, [pc, #148]	; (cdc0 <preempt+0x138>)
    cd2a:	4928      	ldr	r1, [pc, #160]	; (cdcc <preempt+0x144>)
    cd2c:	4826      	ldr	r0, [pc, #152]	; (cdc8 <preempt+0x140>)
    cd2e:	f00c fd4e 	bl	197ce <assert_print>
    cd32:	4040      	eors	r0, r0
    cd34:	f380 8811 	msr	BASEPRI, r0
    cd38:	f04f 0003 	mov.w	r0, #3
    cd3c:	df02      	svc	2
		return;
    cd3e:	e7b7      	b.n	ccb0 <preempt+0x28>
		next->is_aborted = 1;
    cd40:	7f23      	ldrb	r3, [r4, #28]
    cd42:	f043 0302 	orr.w	r3, r3, #2
    cd46:	7723      	strb	r3, [r4, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
    cd48:	69a3      	ldr	r3, [r4, #24]
    cd4a:	68e1      	ldr	r1, [r4, #12]
    cd4c:	4620      	mov	r0, r4
    cd4e:	4798      	blx	r3
		return;
    cd50:	e7ae      	b.n	ccb0 <preempt+0x28>
		iter_idx = UINT8_MAX;
    cd52:	23ff      	movs	r3, #255	; 0xff
    cd54:	f88d 3002 	strb.w	r3, [sp, #2]
		iter = ull_prepare_dequeue_iter(&iter_idx);
    cd58:	f10d 0002 	add.w	r0, sp, #2
    cd5c:	f7fc fe68 	bl	9a30 <ull_prepare_dequeue_iter>
		while (iter) {
    cd60:	e003      	b.n	cd6a <preempt+0xe2>
			iter = ull_prepare_dequeue_iter(&iter_idx);
    cd62:	f10d 0002 	add.w	r0, sp, #2
    cd66:	f7fc fe63 	bl	9a30 <ull_prepare_dequeue_iter>
		while (iter) {
    cd6a:	b190      	cbz	r0, cd92 <preempt+0x10a>
			if (!iter->is_aborted &&
    cd6c:	7f03      	ldrb	r3, [r0, #28]
    cd6e:	f013 0f02 	tst.w	r3, #2
    cd72:	d1f6      	bne.n	cd62 <preempt+0xda>
			    event.curr.param == iter->prepare_param.param) {
    cd74:	4b11      	ldr	r3, [pc, #68]	; (cdbc <preempt+0x134>)
    cd76:	681b      	ldr	r3, [r3, #0]
    cd78:	68c1      	ldr	r1, [r0, #12]
			if (!iter->is_aborted &&
    cd7a:	428b      	cmp	r3, r1
    cd7c:	d1f1      	bne.n	cd62 <preempt+0xda>
				iter->is_aborted = 1;
    cd7e:	7f03      	ldrb	r3, [r0, #28]
    cd80:	f043 0302 	orr.w	r3, r3, #2
    cd84:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
    cd86:	6983      	ldr	r3, [r0, #24]
    cd88:	4798      	blx	r3
				iter_idx = UINT8_MAX;
    cd8a:	23ff      	movs	r3, #255	; 0xff
    cd8c:	f88d 3002 	strb.w	r3, [sp, #2]
    cd90:	e7e7      	b.n	cd62 <preempt+0xda>
		iter = resume_enqueue(resume_cb);
    cd92:	9801      	ldr	r0, [sp, #4]
    cd94:	f7ff feb4 	bl	cb00 <resume_enqueue>
		LL_ASSERT(iter);
    cd98:	2800      	cmp	r0, #0
    cd9a:	d189      	bne.n	ccb0 <preempt+0x28>
    cd9c:	f240 33cf 	movw	r3, #975	; 0x3cf
    cda0:	4a07      	ldr	r2, [pc, #28]	; (cdc0 <preempt+0x138>)
    cda2:	490b      	ldr	r1, [pc, #44]	; (cdd0 <preempt+0x148>)
    cda4:	4808      	ldr	r0, [pc, #32]	; (cdc8 <preempt+0x140>)
    cda6:	f00c fd12 	bl	197ce <assert_print>
    cdaa:	4040      	eors	r0, r0
    cdac:	f380 8811 	msr	BASEPRI, r0
    cdb0:	f04f 0003 	mov.w	r0, #3
    cdb4:	df02      	svc	2
    cdb6:	e77b      	b.n	ccb0 <preempt+0x28>
    cdb8:	4770      	bx	lr
    cdba:	bf00      	nop
    cdbc:	20008ae0 	.word	0x20008ae0
    cdc0:	0001f384 	.word	0x0001f384
    cdc4:	0001f440 	.word	0x0001f440
    cdc8:	0001e920 	.word	0x0001e920
    cdcc:	0001ee10 	.word	0x0001ee10
    cdd0:	0001f438 	.word	0x0001f438

0000cdd4 <preempt_ticker_cb>:
{
    cdd4:	b508      	push	{r3, lr}
	LL_ASSERT(preempt_ack != preempt_req);
    cdd6:	4b19      	ldr	r3, [pc, #100]	; (ce3c <preempt_ticker_cb+0x68>)
    cdd8:	781b      	ldrb	r3, [r3, #0]
    cdda:	b2db      	uxtb	r3, r3
    cddc:	4a18      	ldr	r2, [pc, #96]	; (ce40 <preempt_ticker_cb+0x6c>)
    cdde:	7812      	ldrb	r2, [r2, #0]
    cde0:	4293      	cmp	r3, r2
    cde2:	d00e      	beq.n	ce02 <preempt_ticker_cb+0x2e>
	preempt_ack++;
    cde4:	4a15      	ldr	r2, [pc, #84]	; (ce3c <preempt_ticker_cb+0x68>)
    cde6:	7813      	ldrb	r3, [r2, #0]
    cde8:	3301      	adds	r3, #1
    cdea:	b2db      	uxtb	r3, r3
    cdec:	7013      	strb	r3, [r2, #0]
	mfy.param = param;
    cdee:	4b15      	ldr	r3, [pc, #84]	; (ce44 <preempt_ticker_cb+0x70>)
    cdf0:	9a03      	ldr	r2, [sp, #12]
    cdf2:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
    cdf4:	2200      	movs	r2, #0
    cdf6:	4611      	mov	r1, r2
    cdf8:	2001      	movs	r0, #1
    cdfa:	f7fa f8ab 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    cdfe:	b970      	cbnz	r0, ce1e <preempt_ticker_cb+0x4a>
}
    ce00:	bd08      	pop	{r3, pc}
	LL_ASSERT(preempt_ack != preempt_req);
    ce02:	f240 3371 	movw	r3, #881	; 0x371
    ce06:	4a10      	ldr	r2, [pc, #64]	; (ce48 <preempt_ticker_cb+0x74>)
    ce08:	4910      	ldr	r1, [pc, #64]	; (ce4c <preempt_ticker_cb+0x78>)
    ce0a:	4811      	ldr	r0, [pc, #68]	; (ce50 <preempt_ticker_cb+0x7c>)
    ce0c:	f00c fcdf 	bl	197ce <assert_print>
    ce10:	4040      	eors	r0, r0
    ce12:	f380 8811 	msr	BASEPRI, r0
    ce16:	f04f 0003 	mov.w	r0, #3
    ce1a:	df02      	svc	2
    ce1c:	e7e2      	b.n	cde4 <preempt_ticker_cb+0x10>
	LL_ASSERT(!ret);
    ce1e:	f240 3377 	movw	r3, #887	; 0x377
    ce22:	4a09      	ldr	r2, [pc, #36]	; (ce48 <preempt_ticker_cb+0x74>)
    ce24:	490b      	ldr	r1, [pc, #44]	; (ce54 <preempt_ticker_cb+0x80>)
    ce26:	480a      	ldr	r0, [pc, #40]	; (ce50 <preempt_ticker_cb+0x7c>)
    ce28:	f00c fcd1 	bl	197ce <assert_print>
    ce2c:	4040      	eors	r0, r0
    ce2e:	f380 8811 	msr	BASEPRI, r0
    ce32:	f04f 0003 	mov.w	r0, #3
    ce36:	df02      	svc	2
}
    ce38:	e7e2      	b.n	ce00 <preempt_ticker_cb+0x2c>
    ce3a:	bf00      	nop
    ce3c:	20009298 	.word	0x20009298
    ce40:	20009299 	.word	0x20009299
    ce44:	20000820 	.word	0x20000820
    ce48:	0001f384 	.word	0x0001f384
    ce4c:	0001f44c 	.word	0x0001f44c
    ce50:	0001e920 	.word	0x0001e920
    ce54:	0001eccc 	.word	0x0001eccc

0000ce58 <lll_init>:
{
    ce58:	b510      	push	{r4, lr}
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    ce5a:	4818      	ldr	r0, [pc, #96]	; (cebc <lll_init+0x64>)
    ce5c:	f005 fd08 	bl	12870 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
    ce60:	4b17      	ldr	r3, [pc, #92]	; (cec0 <lll_init+0x68>)
    ce62:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
    ce64:	b338      	cbz	r0, ceb6 <lll_init+0x5e>
	event.curr.abort_cb = NULL;
    ce66:	4b17      	ldr	r3, [pc, #92]	; (cec4 <lll_init+0x6c>)
    ce68:	2200      	movs	r2, #0
    ce6a:	609a      	str	r2, [r3, #8]
	err = lll_clock_init();
    ce6c:	f000 fa04 	bl	d278 <lll_clock_init>
	if (err < 0) {
    ce70:	1e04      	subs	r4, r0, #0
    ce72:	db03      	blt.n	ce7c <lll_init+0x24>
	err = init_reset();
    ce74:	f00f fa86 	bl	1c384 <init_reset>
	if (err) {
    ce78:	4604      	mov	r4, r0
    ce7a:	b108      	cbz	r0, ce80 <lll_init+0x28>
}
    ce7c:	4620      	mov	r0, r4
    ce7e:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
    ce80:	2200      	movs	r2, #0
    ce82:	4611      	mov	r1, r2
    ce84:	2001      	movs	r0, #1
    ce86:	f7f7 fd6f 	bl	4968 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
    ce8a:	2200      	movs	r2, #0
    ce8c:	2101      	movs	r1, #1
    ce8e:	200b      	movs	r0, #11
    ce90:	f7f7 fd6a 	bl	4968 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
    ce94:	2200      	movs	r2, #0
    ce96:	4611      	mov	r1, r2
    ce98:	2018      	movs	r0, #24
    ce9a:	f7f7 fd65 	bl	4968 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    ce9e:	2001      	movs	r0, #1
    cea0:	f7f7 fd32 	bl	4908 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
    cea4:	200b      	movs	r0, #11
    cea6:	f7f7 fd2f 	bl	4908 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
    ceaa:	2018      	movs	r0, #24
    ceac:	f7f7 fd2c 	bl	4908 <arch_irq_enable>
	radio_setup();
    ceb0:	f00f fd27 	bl	1c902 <radio_setup>
	return 0;
    ceb4:	e7e2      	b.n	ce7c <lll_init+0x24>
		return -ENODEV;
    ceb6:	f06f 0412 	mvn.w	r4, #18
    ceba:	e7df      	b.n	ce7c <lll_init+0x24>
    cebc:	0001f468 	.word	0x0001f468
    cec0:	20008adc 	.word	0x20008adc
    cec4:	20008ae0 	.word	0x20008ae0

0000cec8 <lll_csrand_get>:
{
    cec8:	b510      	push	{r4, lr}
    ceca:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
    cecc:	4a03      	ldr	r2, [pc, #12]	; (cedc <lll_csrand_get+0x14>)
    cece:	6810      	ldr	r0, [r2, #0]
    ced0:	b28a      	uxth	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
    ced2:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
    ced4:	680c      	ldr	r4, [r1, #0]
    ced6:	4619      	mov	r1, r3
    ced8:	47a0      	blx	r4
}
    ceda:	bd10      	pop	{r4, pc}
    cedc:	20008adc 	.word	0x20008adc

0000cee0 <lll_disable>:
{
    cee0:	b510      	push	{r4, lr}
    cee2:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
    cee4:	4604      	mov	r4, r0
    cee6:	b158      	cbz	r0, cf00 <lll_disable+0x20>
    cee8:	4b1f      	ldr	r3, [pc, #124]	; (cf68 <lll_disable+0x88>)
    ceea:	681b      	ldr	r3, [r3, #0]
    ceec:	4283      	cmp	r3, r0
    ceee:	d007      	beq.n	cf00 <lll_disable+0x20>
		idx = UINT8_MAX;
    cef0:	23ff      	movs	r3, #255	; 0xff
    cef2:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
    cef6:	f10d 0007 	add.w	r0, sp, #7
    cefa:	f7fc fd99 	bl	9a30 <ull_prepare_dequeue_iter>
		while (next) {
    cefe:	e025      	b.n	cf4c <lll_disable+0x6c>
		if (event.curr.abort_cb && event.curr.param) {
    cf00:	4b19      	ldr	r3, [pc, #100]	; (cf68 <lll_disable+0x88>)
    cf02:	689b      	ldr	r3, [r3, #8]
    cf04:	b12b      	cbz	r3, cf12 <lll_disable+0x32>
    cf06:	4a18      	ldr	r2, [pc, #96]	; (cf68 <lll_disable+0x88>)
    cf08:	6811      	ldr	r1, [r2, #0]
    cf0a:	b111      	cbz	r1, cf12 <lll_disable+0x32>
			event.curr.abort_cb(NULL, event.curr.param);
    cf0c:	2000      	movs	r0, #0
    cf0e:	4798      	blx	r3
    cf10:	e7ee      	b.n	cef0 <lll_disable+0x10>
			LL_ASSERT(!param);
    cf12:	2c00      	cmp	r4, #0
    cf14:	d0ec      	beq.n	cef0 <lll_disable+0x10>
    cf16:	23fd      	movs	r3, #253	; 0xfd
    cf18:	4a14      	ldr	r2, [pc, #80]	; (cf6c <lll_disable+0x8c>)
    cf1a:	4915      	ldr	r1, [pc, #84]	; (cf70 <lll_disable+0x90>)
    cf1c:	4815      	ldr	r0, [pc, #84]	; (cf74 <lll_disable+0x94>)
    cf1e:	f00c fc56 	bl	197ce <assert_print>
    cf22:	4040      	eors	r0, r0
    cf24:	f380 8811 	msr	BASEPRI, r0
    cf28:	f04f 0003 	mov.w	r0, #3
    cf2c:	df02      	svc	2
    cf2e:	e7df      	b.n	cef0 <lll_disable+0x10>
				next->is_aborted = 1;
    cf30:	7f03      	ldrb	r3, [r0, #28]
    cf32:	f043 0302 	orr.w	r3, r3, #2
    cf36:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
    cf38:	6983      	ldr	r3, [r0, #24]
    cf3a:	68c1      	ldr	r1, [r0, #12]
    cf3c:	4798      	blx	r3
				idx = UINT8_MAX;
    cf3e:	23ff      	movs	r3, #255	; 0xff
    cf40:	f88d 3007 	strb.w	r3, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
    cf44:	f10d 0007 	add.w	r0, sp, #7
    cf48:	f7fc fd72 	bl	9a30 <ull_prepare_dequeue_iter>
		while (next) {
    cf4c:	b148      	cbz	r0, cf62 <lll_disable+0x82>
			if (!next->is_aborted &&
    cf4e:	7f03      	ldrb	r3, [r0, #28]
    cf50:	f013 0f02 	tst.w	r3, #2
    cf54:	d1f6      	bne.n	cf44 <lll_disable+0x64>
    cf56:	2c00      	cmp	r4, #0
    cf58:	d0ea      	beq.n	cf30 <lll_disable+0x50>
			    (!param || (param == next->prepare_param.param))) {
    cf5a:	68c3      	ldr	r3, [r0, #12]
    cf5c:	42a3      	cmp	r3, r4
    cf5e:	d1f1      	bne.n	cf44 <lll_disable+0x64>
    cf60:	e7e6      	b.n	cf30 <lll_disable+0x50>
}
    cf62:	b002      	add	sp, #8
    cf64:	bd10      	pop	{r4, pc}
    cf66:	bf00      	nop
    cf68:	20008ae0 	.word	0x20008ae0
    cf6c:	0001f384 	.word	0x0001f384
    cf70:	0001f46c 	.word	0x0001f46c
    cf74:	0001e920 	.word	0x0001e920

0000cf78 <lll_done>:
{
    cf78:	b510      	push	{r4, lr}
    cf7a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
    cf7c:	f7fc fd48 	bl	9a10 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
    cf80:	b104      	cbz	r4, cf84 <lll_done+0xc>
    cf82:	b158      	cbz	r0, cf9c <lll_done+0x24>
	if (!param) {
    cf84:	b1c4      	cbz	r4, cfb8 <lll_done+0x40>
		ull = HDR_LLL2ULL(param);
    cf86:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
    cf88:	2000      	movs	r0, #0
    cf8a:	f7fc fd73 	bl	9a74 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
    cf8e:	4620      	mov	r0, r4
    cf90:	f7fc fdce 	bl	9b30 <ull_event_done>
	LL_ASSERT(evdone);
    cf94:	2800      	cmp	r0, #0
    cf96:	d029      	beq.n	cfec <lll_done+0x74>
}
    cf98:	2000      	movs	r0, #0
    cf9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
    cf9c:	f240 1337 	movw	r3, #311	; 0x137
    cfa0:	4a19      	ldr	r2, [pc, #100]	; (d008 <lll_done+0x90>)
    cfa2:	491a      	ldr	r1, [pc, #104]	; (d00c <lll_done+0x94>)
    cfa4:	481a      	ldr	r0, [pc, #104]	; (d010 <lll_done+0x98>)
    cfa6:	f00c fc12 	bl	197ce <assert_print>
    cfaa:	4040      	eors	r0, r0
    cfac:	f380 8811 	msr	BASEPRI, r0
    cfb0:	f04f 0003 	mov.w	r0, #3
    cfb4:	df02      	svc	2
    cfb6:	e7e5      	b.n	cf84 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
    cfb8:	4b16      	ldr	r3, [pc, #88]	; (d014 <lll_done+0x9c>)
    cfba:	689b      	ldr	r3, [r3, #8]
    cfbc:	b143      	cbz	r3, cfd0 <lll_done+0x58>
		event.curr.abort_cb = NULL;
    cfbe:	4b15      	ldr	r3, [pc, #84]	; (d014 <lll_done+0x9c>)
    cfc0:	2200      	movs	r2, #0
    cfc2:	609a      	str	r2, [r3, #8]
		param = event.curr.param;
    cfc4:	681c      	ldr	r4, [r3, #0]
		event.curr.param = NULL;
    cfc6:	601a      	str	r2, [r3, #0]
		if (param) {
    cfc8:	2c00      	cmp	r4, #0
    cfca:	d0dd      	beq.n	cf88 <lll_done+0x10>
			ull = HDR_LLL2ULL(param);
    cfcc:	6824      	ldr	r4, [r4, #0]
    cfce:	e7db      	b.n	cf88 <lll_done+0x10>
		LL_ASSERT(event.curr.abort_cb);
    cfd0:	f240 133d 	movw	r3, #317	; 0x13d
    cfd4:	4a0c      	ldr	r2, [pc, #48]	; (d008 <lll_done+0x90>)
    cfd6:	4910      	ldr	r1, [pc, #64]	; (d018 <lll_done+0xa0>)
    cfd8:	480d      	ldr	r0, [pc, #52]	; (d010 <lll_done+0x98>)
    cfda:	f00c fbf8 	bl	197ce <assert_print>
    cfde:	4040      	eors	r0, r0
    cfe0:	f380 8811 	msr	BASEPRI, r0
    cfe4:	f04f 0003 	mov.w	r0, #3
    cfe8:	df02      	svc	2
    cfea:	e7e8      	b.n	cfbe <lll_done+0x46>
	LL_ASSERT(evdone);
    cfec:	f240 136d 	movw	r3, #365	; 0x16d
    cff0:	4a05      	ldr	r2, [pc, #20]	; (d008 <lll_done+0x90>)
    cff2:	490a      	ldr	r1, [pc, #40]	; (d01c <lll_done+0xa4>)
    cff4:	4806      	ldr	r0, [pc, #24]	; (d010 <lll_done+0x98>)
    cff6:	f00c fbea 	bl	197ce <assert_print>
    cffa:	4040      	eors	r0, r0
    cffc:	f380 8811 	msr	BASEPRI, r0
    d000:	f04f 0003 	mov.w	r0, #3
    d004:	df02      	svc	2
    d006:	e7c7      	b.n	cf98 <lll_done+0x20>
    d008:	0001f384 	.word	0x0001f384
    d00c:	0001f474 	.word	0x0001f474
    d010:	0001e920 	.word	0x0001e920
    d014:	20008ae0 	.word	0x20008ae0
    d018:	0001f484 	.word	0x0001f484
    d01c:	0001f498 	.word	0x0001f498

0000d020 <lll_is_done>:
	*is_resume = (param != event.curr.param);
    d020:	4a05      	ldr	r2, [pc, #20]	; (d038 <lll_is_done+0x18>)
    d022:	6813      	ldr	r3, [r2, #0]
    d024:	1a1b      	subs	r3, r3, r0
    d026:	bf18      	it	ne
    d028:	2301      	movne	r3, #1
    d02a:	700b      	strb	r3, [r1, #0]
	return !event.curr.abort_cb;
    d02c:	6890      	ldr	r0, [r2, #8]
}
    d02e:	fab0 f080 	clz	r0, r0
    d032:	0940      	lsrs	r0, r0, #5
    d034:	4770      	bx	lr
    d036:	bf00      	nop
    d038:	20008ae0 	.word	0x20008ae0

0000d03c <lll_chan_set>:
{
    d03c:	b510      	push	{r4, lr}
    d03e:	4604      	mov	r4, r0
	switch (chan) {
    d040:	2826      	cmp	r0, #38	; 0x26
    d042:	d013      	beq.n	d06c <lll_chan_set+0x30>
    d044:	2827      	cmp	r0, #39	; 0x27
    d046:	d015      	beq.n	d074 <lll_chan_set+0x38>
    d048:	2825      	cmp	r0, #37	; 0x25
    d04a:	d008      	beq.n	d05e <lll_chan_set+0x22>
		if (chan < 11) {
    d04c:	280a      	cmp	r0, #10
    d04e:	d915      	bls.n	d07c <lll_chan_set+0x40>
		} else if (chan < 40) {
    d050:	2827      	cmp	r0, #39	; 0x27
    d052:	d818      	bhi.n	d086 <lll_chan_set+0x4a>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
    d054:	3003      	adds	r0, #3
    d056:	0040      	lsls	r0, r0, #1
    d058:	f002 fdde 	bl	fc18 <radio_freq_chan_set>
    d05c:	e002      	b.n	d064 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
    d05e:	2002      	movs	r0, #2
    d060:	f002 fdda 	bl	fc18 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
    d064:	4620      	mov	r0, r4
    d066:	f002 fddd 	bl	fc24 <radio_whiten_iv_set>
}
    d06a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
    d06c:	201a      	movs	r0, #26
    d06e:	f002 fdd3 	bl	fc18 <radio_freq_chan_set>
		break;
    d072:	e7f7      	b.n	d064 <lll_chan_set+0x28>
		radio_freq_chan_set(80);
    d074:	2050      	movs	r0, #80	; 0x50
    d076:	f002 fdcf 	bl	fc18 <radio_freq_chan_set>
		break;
    d07a:	e7f3      	b.n	d064 <lll_chan_set+0x28>
			radio_freq_chan_set(4 + (chan * 2U));
    d07c:	3002      	adds	r0, #2
    d07e:	0040      	lsls	r0, r0, #1
    d080:	f002 fdca 	bl	fc18 <radio_freq_chan_set>
    d084:	e7ee      	b.n	d064 <lll_chan_set+0x28>
			LL_ASSERT(0);
    d086:	f240 13df 	movw	r3, #479	; 0x1df
    d08a:	4a06      	ldr	r2, [pc, #24]	; (d0a4 <lll_chan_set+0x68>)
    d08c:	4906      	ldr	r1, [pc, #24]	; (d0a8 <lll_chan_set+0x6c>)
    d08e:	4807      	ldr	r0, [pc, #28]	; (d0ac <lll_chan_set+0x70>)
    d090:	f00c fb9d 	bl	197ce <assert_print>
    d094:	4040      	eors	r0, r0
    d096:	f380 8811 	msr	BASEPRI, r0
    d09a:	f04f 0003 	mov.w	r0, #3
    d09e:	df02      	svc	2
    d0a0:	e7e0      	b.n	d064 <lll_chan_set+0x28>
    d0a2:	bf00      	nop
    d0a4:	0001f384 	.word	0x0001f384
    d0a8:	0001ead8 	.word	0x0001ead8
    d0ac:	0001e920 	.word	0x0001e920

0000d0b0 <lll_isr_cleanup>:
{
    d0b0:	b508      	push	{r3, lr}
    d0b2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
    d0b4:	4811      	ldr	r0, [pc, #68]	; (d0fc <lll_isr_cleanup+0x4c>)
    d0b6:	f002 fd5f 	bl	fb78 <radio_isr_set>
	if (!radio_is_idle()) {
    d0ba:	f002 fe6f 	bl	fd9c <radio_is_idle>
    d0be:	b158      	cbz	r0, d0d8 <lll_isr_cleanup+0x28>
	radio_tmr_stop();
    d0c0:	f003 f8fe 	bl	102c0 <radio_tmr_stop>
	radio_stop();
    d0c4:	f00f fc3f 	bl	1c946 <radio_stop>
	err = lll_hfclock_off();
    d0c8:	f000 f8fc 	bl	d2c4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
    d0cc:	2800      	cmp	r0, #0
    d0ce:	db06      	blt.n	d0de <lll_isr_cleanup+0x2e>
	lll_done(NULL);
    d0d0:	2000      	movs	r0, #0
    d0d2:	f7ff ff51 	bl	cf78 <lll_done>
}
    d0d6:	bd08      	pop	{r3, pc}
		radio_disable();
    d0d8:	f002 fe12 	bl	fd00 <radio_disable>
    d0dc:	e7f0      	b.n	d0c0 <lll_isr_cleanup+0x10>
	LL_ASSERT(err >= 0);
    d0de:	f240 2343 	movw	r3, #579	; 0x243
    d0e2:	4a07      	ldr	r2, [pc, #28]	; (d100 <lll_isr_cleanup+0x50>)
    d0e4:	4907      	ldr	r1, [pc, #28]	; (d104 <lll_isr_cleanup+0x54>)
    d0e6:	4808      	ldr	r0, [pc, #32]	; (d108 <lll_isr_cleanup+0x58>)
    d0e8:	f00c fb71 	bl	197ce <assert_print>
    d0ec:	4040      	eors	r0, r0
    d0ee:	f380 8811 	msr	BASEPRI, r0
    d0f2:	f04f 0003 	mov.w	r0, #3
    d0f6:	df02      	svc	2
    d0f8:	e7ea      	b.n	d0d0 <lll_isr_cleanup+0x20>
    d0fa:	bf00      	nop
    d0fc:	0001c3b1 	.word	0x0001c3b1
    d100:	0001f384 	.word	0x0001f384
    d104:	0001f4a0 	.word	0x0001f4a0
    d108:	0001e920 	.word	0x0001e920

0000d10c <lll_prepare_resolve>:
{
    d10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d110:	b085      	sub	sp, #20
    d112:	4680      	mov	r8, r0
    d114:	460f      	mov	r7, r1
    d116:	4616      	mov	r6, r2
    d118:	461d      	mov	r5, r3
    d11a:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
    d11e:	23ff      	movs	r3, #255	; 0xff
    d120:	f88d 300f 	strb.w	r3, [sp, #15]
	p = ull_prepare_dequeue_iter(&idx);
    d124:	f10d 000f 	add.w	r0, sp, #15
    d128:	f7fc fc82 	bl	9a30 <ull_prepare_dequeue_iter>
    d12c:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
    d12e:	e004      	b.n	d13a <lll_prepare_resolve+0x2e>
		p = ull_prepare_dequeue_iter(&idx);
    d130:	f10d 000f 	add.w	r0, sp, #15
    d134:	f7fc fc7c 	bl	9a30 <ull_prepare_dequeue_iter>
    d138:	4604      	mov	r4, r0
	while (p && (p->is_aborted || p->is_resume)) {
    d13a:	b124      	cbz	r4, d146 <lll_prepare_resolve+0x3a>
    d13c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d140:	f01c 0f03 	tst.w	ip, #3
    d144:	d1f4      	bne.n	d130 <lll_prepare_resolve+0x24>
	    event.curr.abort_cb ||
    d146:	4b46      	ldr	r3, [pc, #280]	; (d260 <lll_prepare_resolve+0x154>)
    d148:	689b      	ldr	r3, [r3, #8]
	if ((!is_dequeue && !is_done_sync()) ||
    d14a:	b19b      	cbz	r3, d174 <lll_prepare_resolve+0x68>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
    d14c:	f8cd 9000 	str.w	r9, [sp]
    d150:	4633      	mov	r3, r6
    d152:	462a      	mov	r2, r5
    d154:	4639      	mov	r1, r7
    d156:	4640      	mov	r0, r8
    d158:	f7fc fc22 	bl	99a0 <ull_prepare_enqueue>
		LL_ASSERT(next);
    d15c:	4605      	mov	r5, r0
    d15e:	2800      	cmp	r0, #0
    d160:	d04a      	beq.n	d1f8 <lll_prepare_resolve+0xec>
		if (is_resume) {
    d162:	f1b9 0f00 	cmp.w	r9, #0
    d166:	d055      	beq.n	d214 <lll_prepare_resolve+0x108>
			return -EINPROGRESS;
    d168:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
    d16c:	4620      	mov	r0, r4
    d16e:	b005      	add	sp, #20
    d170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    event.curr.abort_cb ||
    d174:	b114      	cbz	r4, d17c <lll_prepare_resolve+0x70>
	    (p && is_resume)) {
    d176:	f1b9 0f00 	cmp.w	r9, #0
    d17a:	d1e7      	bne.n	d14c <lll_prepare_resolve+0x40>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
    d17c:	b174      	cbz	r4, d19c <lll_prepare_resolve+0x90>
    d17e:	42ac      	cmp	r4, r5
    d180:	d00c      	beq.n	d19c <lll_prepare_resolve+0x90>
    d182:	f240 23bf 	movw	r3, #703	; 0x2bf
    d186:	4a37      	ldr	r2, [pc, #220]	; (d264 <lll_prepare_resolve+0x158>)
    d188:	4937      	ldr	r1, [pc, #220]	; (d268 <lll_prepare_resolve+0x15c>)
    d18a:	4838      	ldr	r0, [pc, #224]	; (d26c <lll_prepare_resolve+0x160>)
    d18c:	f00c fb1f 	bl	197ce <assert_print>
    d190:	4040      	eors	r0, r0
    d192:	f380 8811 	msr	BASEPRI, r0
    d196:	f04f 0003 	mov.w	r0, #3
    d19a:	df02      	svc	2
	event.curr.param = prepare_param->param;
    d19c:	68ea      	ldr	r2, [r5, #12]
    d19e:	4b30      	ldr	r3, [pc, #192]	; (d260 <lll_prepare_resolve+0x154>)
    d1a0:	601a      	str	r2, [r3, #0]
	event.curr.is_abort_cb = is_abort_cb;
    d1a2:	f8c3 8004 	str.w	r8, [r3, #4]
	event.curr.abort_cb = abort_cb;
    d1a6:	609f      	str	r7, [r3, #8]
	err = prepare_cb(prepare_param);
    d1a8:	4628      	mov	r0, r5
    d1aa:	47b0      	blx	r6
    d1ac:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
    d1ae:	f7ff fcbf 	bl	cb30 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d1b2:	b108      	cbz	r0, d1b8 <lll_prepare_resolve+0xac>
    d1b4:	2802      	cmp	r0, #2
    d1b6:	d145      	bne.n	d244 <lll_prepare_resolve+0x138>
		p = ull_prepare_dequeue_iter(&idx);
    d1b8:	f10d 000f 	add.w	r0, sp, #15
    d1bc:	f7fc fc38 	bl	9a30 <ull_prepare_dequeue_iter>
		if (!p) {
    d1c0:	4601      	mov	r1, r0
    d1c2:	2800      	cmp	r0, #0
    d1c4:	d0d2      	beq.n	d16c <lll_prepare_resolve+0x60>
	} while (p->is_aborted || p->is_resume);
    d1c6:	7f03      	ldrb	r3, [r0, #28]
    d1c8:	f013 0f03 	tst.w	r3, #3
    d1cc:	d1f4      	bne.n	d1b8 <lll_prepare_resolve+0xac>
	ret = preempt_ticker_start(NULL, p);
    d1ce:	2000      	movs	r0, #0
    d1d0:	f7ff fcf2 	bl	cbb8 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d1d4:	2800      	cmp	r0, #0
    d1d6:	d0c9      	beq.n	d16c <lll_prepare_resolve+0x60>
    d1d8:	2802      	cmp	r0, #2
    d1da:	d0c7      	beq.n	d16c <lll_prepare_resolve+0x60>
    d1dc:	f240 23d9 	movw	r3, #729	; 0x2d9
    d1e0:	4a20      	ldr	r2, [pc, #128]	; (d264 <lll_prepare_resolve+0x158>)
    d1e2:	4923      	ldr	r1, [pc, #140]	; (d270 <lll_prepare_resolve+0x164>)
    d1e4:	4821      	ldr	r0, [pc, #132]	; (d26c <lll_prepare_resolve+0x160>)
    d1e6:	f00c faf2 	bl	197ce <assert_print>
    d1ea:	4040      	eors	r0, r0
    d1ec:	f380 8811 	msr	BASEPRI, r0
    d1f0:	f04f 0003 	mov.w	r0, #3
    d1f4:	df02      	svc	2
    d1f6:	e7b9      	b.n	d16c <lll_prepare_resolve+0x60>
		LL_ASSERT(next);
    d1f8:	f240 238e 	movw	r3, #654	; 0x28e
    d1fc:	4a19      	ldr	r2, [pc, #100]	; (d264 <lll_prepare_resolve+0x158>)
    d1fe:	491d      	ldr	r1, [pc, #116]	; (d274 <lll_prepare_resolve+0x168>)
    d200:	481a      	ldr	r0, [pc, #104]	; (d26c <lll_prepare_resolve+0x160>)
    d202:	f00c fae4 	bl	197ce <assert_print>
    d206:	4040      	eors	r0, r0
    d208:	f380 8811 	msr	BASEPRI, r0
    d20c:	f04f 0003 	mov.w	r0, #3
    d210:	df02      	svc	2
    d212:	e7a6      	b.n	d162 <lll_prepare_resolve+0x56>
		ret  = preempt_ticker_start(p, next);
    d214:	4629      	mov	r1, r5
    d216:	4620      	mov	r0, r4
    d218:	f7ff fcce 	bl	cbb8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d21c:	b108      	cbz	r0, d222 <lll_prepare_resolve+0x116>
    d21e:	2802      	cmp	r0, #2
    d220:	d102      	bne.n	d228 <lll_prepare_resolve+0x11c>
		return -EINPROGRESS;
    d222:	f06f 0476 	mvn.w	r4, #118	; 0x76
    d226:	e7a1      	b.n	d16c <lll_prepare_resolve+0x60>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d228:	f240 2399 	movw	r3, #665	; 0x299
    d22c:	4a0d      	ldr	r2, [pc, #52]	; (d264 <lll_prepare_resolve+0x158>)
    d22e:	4910      	ldr	r1, [pc, #64]	; (d270 <lll_prepare_resolve+0x164>)
    d230:	480e      	ldr	r0, [pc, #56]	; (d26c <lll_prepare_resolve+0x160>)
    d232:	f00c facc 	bl	197ce <assert_print>
    d236:	4040      	eors	r0, r0
    d238:	f380 8811 	msr	BASEPRI, r0
    d23c:	f04f 0003 	mov.w	r0, #3
    d240:	df02      	svc	2
    d242:	e7ee      	b.n	d222 <lll_prepare_resolve+0x116>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d244:	f44f 7333 	mov.w	r3, #716	; 0x2cc
    d248:	4a06      	ldr	r2, [pc, #24]	; (d264 <lll_prepare_resolve+0x158>)
    d24a:	4909      	ldr	r1, [pc, #36]	; (d270 <lll_prepare_resolve+0x164>)
    d24c:	4807      	ldr	r0, [pc, #28]	; (d26c <lll_prepare_resolve+0x160>)
    d24e:	f00c fabe 	bl	197ce <assert_print>
    d252:	4040      	eors	r0, r0
    d254:	f380 8811 	msr	BASEPRI, r0
    d258:	f04f 0003 	mov.w	r0, #3
    d25c:	df02      	svc	2
    d25e:	e7ab      	b.n	d1b8 <lll_prepare_resolve+0xac>
    d260:	20008ae0 	.word	0x20008ae0
    d264:	0001f384 	.word	0x0001f384
    d268:	0001f4b4 	.word	0x0001f4b4
    d26c:	0001e920 	.word	0x0001e920
    d270:	0001ee10 	.word	0x0001ee10
    d274:	0001f4ac 	.word	0x0001f4ac

0000d278 <lll_clock_init>:

	return k_sem_take(&state.sem, K_MSEC(timeout));
}

int lll_clock_init(void)
{
    d278:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
    d27a:	2001      	movs	r0, #1
    d27c:	f003 fc32 	bl	10ae4 <z_nrf_clock_control_get_onoff>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    d280:	4904      	ldr	r1, [pc, #16]	; (d294 <lll_clock_init+0x1c>)
    d282:	2300      	movs	r3, #0
    d284:	604b      	str	r3, [r1, #4]
    d286:	608b      	str	r3, [r1, #8]
    d288:	60cb      	str	r3, [r1, #12]
    d28a:	2301      	movs	r3, #1
    d28c:	608b      	str	r3, [r1, #8]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
    d28e:	f00c f81c 	bl	192ca <onoff_request>
}
    d292:	bd08      	pop	{r3, pc}
    d294:	20008afc 	.word	0x20008afc

0000d298 <lll_hfclock_on>:

	return 0;
}

int lll_hfclock_on(void)
{
    d298:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d29a:	4b09      	ldr	r3, [pc, #36]	; (d2c0 <lll_hfclock_on+0x28>)
    d29c:	f3bf 8f5b 	dmb	ish
    d2a0:	e853 2f00 	ldrex	r2, [r3]
    d2a4:	1c51      	adds	r1, r2, #1
    d2a6:	e843 1000 	strex	r0, r1, [r3]
    d2aa:	2800      	cmp	r0, #0
    d2ac:	d1f8      	bne.n	d2a0 <lll_hfclock_on+0x8>
    d2ae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
    d2b2:	2a00      	cmp	r2, #0
    d2b4:	dd01      	ble.n	d2ba <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
    d2b6:	2000      	movs	r0, #0
    d2b8:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
    d2ba:	f003 fc1b 	bl	10af4 <z_nrf_clock_bt_ctlr_hf_request>
	return 0;
    d2be:	e7fa      	b.n	d2b6 <lll_hfclock_on+0x1e>
    d2c0:	20008af8 	.word	0x20008af8

0000d2c4 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
    d2c4:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
    d2c6:	4b0d      	ldr	r3, [pc, #52]	; (d2fc <lll_hfclock_off+0x38>)
    d2c8:	681b      	ldr	r3, [r3, #0]
    d2ca:	2b00      	cmp	r3, #0
    d2cc:	dd13      	ble.n	d2f6 <lll_hfclock_off+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    d2ce:	4b0b      	ldr	r3, [pc, #44]	; (d2fc <lll_hfclock_off+0x38>)
    d2d0:	f3bf 8f5b 	dmb	ish
    d2d4:	e853 2f00 	ldrex	r2, [r3]
    d2d8:	1e51      	subs	r1, r2, #1
    d2da:	e843 1000 	strex	r0, r1, [r3]
    d2de:	2800      	cmp	r0, #0
    d2e0:	d1f8      	bne.n	d2d4 <lll_hfclock_off+0x10>
    d2e2:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
    d2e6:	2a01      	cmp	r2, #1
    d2e8:	dd01      	ble.n	d2ee <lll_hfclock_off+0x2a>
		return 0;
    d2ea:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
    d2ec:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
    d2ee:	f003 fc19 	bl	10b24 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
    d2f2:	2000      	movs	r0, #0
    d2f4:	e7fa      	b.n	d2ec <lll_hfclock_off+0x28>
		return -EALREADY;
    d2f6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d2fa:	e7f7      	b.n	d2ec <lll_hfclock_off+0x28>
    d2fc:	20008af8 	.word	0x20008af8

0000d300 <lll_clock_ppm_get>:
}

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
}
    d300:	4b01      	ldr	r3, [pc, #4]	; (d308 <lll_clock_ppm_get+0x8>)
    d302:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    d306:	4770      	bx	lr
    d308:	0001f4e0 	.word	0x0001f4e0

0000d30c <ticker_op_start_cb>:

static void ticker_op_start_cb(uint32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d30c:	b900      	cbnz	r0, d310 <ticker_op_start_cb+0x4>
    d30e:	4770      	bx	lr
{
    d310:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    d312:	f240 2393 	movw	r3, #659	; 0x293
    d316:	4a06      	ldr	r2, [pc, #24]	; (d330 <ticker_op_start_cb+0x24>)
    d318:	4906      	ldr	r1, [pc, #24]	; (d334 <ticker_op_start_cb+0x28>)
    d31a:	4807      	ldr	r0, [pc, #28]	; (d338 <ticker_op_start_cb+0x2c>)
    d31c:	f00c fa57 	bl	197ce <assert_print>
    d320:	4040      	eors	r0, r0
    d322:	f380 8811 	msr	BASEPRI, r0
    d326:	f04f 0003 	mov.w	r0, #3
    d32a:	df02      	svc	2
}
    d32c:	bd08      	pop	{r3, pc}
    d32e:	bf00      	nop
    d330:	0001f4f0 	.word	0x0001f4f0
    d334:	0001f020 	.word	0x0001f020
    d338:	0001e920 	.word	0x0001e920

0000d33c <common_prepare_cb>:
{
    d33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d340:	b08c      	sub	sp, #48	; 0x30
    d342:	4605      	mov	r5, r0
    d344:	460f      	mov	r7, r1
	lll = p->param;
    d346:	68c4      	ldr	r4, [r0, #12]
	lll->state = 0U;
    d348:	7923      	ldrb	r3, [r4, #4]
    d34a:	f36f 0300 	bfc	r3, #0, #1
    d34e:	7123      	strb	r3, [r4, #4]
	radio_reset();
    d350:	f002 fc30 	bl	fbb4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    d354:	2000      	movs	r0, #0
    d356:	f002 fc59 	bl	fc0c <radio_tx_power_set>
	radio_phy_set(lll->phy, PHY_FLAGS_S8);
    d35a:	7c20      	ldrb	r0, [r4, #16]
    d35c:	2101      	movs	r1, #1
    d35e:	f000 0007 	and.w	r0, r0, #7
    d362:	f002 fc3f 	bl	fbe4 <radio_phy_set>
			    RADIO_PKT_CONF_PHY(lll->phy));
    d366:	7c22      	ldrb	r2, [r4, #16]
    d368:	f002 0207 	and.w	r2, r2, #7
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
    d36c:	0052      	lsls	r2, r2, #1
    d36e:	2125      	movs	r1, #37	; 0x25
    d370:	2008      	movs	r0, #8
    d372:	f002 fc81 	bl	fc78 <radio_pkt_configure>
	lll->is_adv_ind = 0U;
    d376:	7c23      	ldrb	r3, [r4, #16]
    d378:	f36f 03c3 	bfc	r3, #3, #1
    d37c:	7423      	strb	r3, [r4, #16]
	lll->is_aux_sched = 0U;
    d37e:	b2db      	uxtb	r3, r3
    d380:	f36f 1304 	bfc	r3, #4, #1
    d384:	7423      	strb	r3, [r4, #16]
	node_rx = ull_pdu_rx_alloc_peek(1);
    d386:	2001      	movs	r0, #1
    d388:	f7fc faaa 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    d38c:	4606      	mov	r6, r0
    d38e:	2800      	cmp	r0, #0
    d390:	d055      	beq.n	d43e <common_prepare_cb+0x102>
	radio_pkt_rx_set(node_rx->pdu);
    d392:	f106 0020 	add.w	r0, r6, #32
    d396:	f002 fca1 	bl	fcdc <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    d39a:	4b60      	ldr	r3, [pc, #384]	; (d51c <common_prepare_cb+0x1e0>)
    d39c:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
    d39e:	a80b      	add	r0, sp, #44	; 0x2c
    d3a0:	f002 fc52 	bl	fc48 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    d3a4:	495e      	ldr	r1, [pc, #376]	; (d520 <common_prepare_cb+0x1e4>)
    d3a6:	f240 605b 	movw	r0, #1627	; 0x65b
    d3aa:	f002 fd01 	bl	fdb0 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
    d3ae:	7920      	ldrb	r0, [r4, #4]
    d3b0:	f3c0 0041 	ubfx	r0, r0, #1, #2
    d3b4:	3025      	adds	r0, #37	; 0x25
    d3b6:	f7ff fe41 	bl	d03c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
    d3ba:	4621      	mov	r1, r4
    d3bc:	4859      	ldr	r0, [pc, #356]	; (d524 <common_prepare_cb+0x1e8>)
    d3be:	f002 fbdb 	bl	fb78 <radio_isr_set>
	} else if (lll->type ||
    d3c2:	7923      	ldrb	r3, [r4, #4]
    d3c4:	f013 0f20 	tst.w	r3, #32
    d3c8:	d047      	beq.n	d45a <common_prepare_cb+0x11e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    d3ca:	2096      	movs	r0, #150	; 0x96
    d3cc:	f002 fea0 	bl	10110 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    d3d0:	2300      	movs	r3, #0
    d3d2:	461a      	mov	r2, r3
    d3d4:	4619      	mov	r1, r3
    d3d6:	4618      	mov	r0, r3
    d3d8:	f002 fdce 	bl	ff78 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
    d3dc:	f7ff faee 	bl	c9bc <ull_filter_lll_rl_enabled>
    d3e0:	2800      	cmp	r0, #0
    d3e2:	d13d      	bne.n	d460 <common_prepare_cb+0x124>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
    d3e4:	7923      	ldrb	r3, [r4, #4]
    d3e6:	f013 0f18 	tst.w	r3, #24
    d3ea:	d153      	bne.n	d494 <common_prepare_cb+0x158>
	ticks_at_event = p->ticks_at_expire;
    d3ec:	682e      	ldr	r6, [r5, #0]
	ull = HDR_LLL2ULL(lll);
    d3ee:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event += lll_event_offset_get(ull);
    d3f2:	4640      	mov	r0, r8
    d3f4:	f00e ffe6 	bl	1c3c4 <lll_event_offset_get>
    d3f8:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
    d3fa:	686a      	ldr	r2, [r5, #4]
    d3fc:	f106 0109 	add.w	r1, r6, #9
    d400:	2000      	movs	r0, #0
    d402:	f002 fe91 	bl	10128 <radio_tmr_start>
	radio_tmr_end_capture();
    d406:	f002 ffab 	bl	10360 <radio_tmr_end_capture>
	radio_rssi_measure();
    d40a:	f002 fddb 	bl	ffc4 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
    d40e:	4620      	mov	r0, r4
    d410:	f00e fbfd 	bl	1bc0e <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
    d414:	3002      	adds	r0, #2
    d416:	4632      	mov	r2, r6
    d418:	b2c1      	uxtb	r1, r0
    d41a:	4640      	mov	r0, r8
    d41c:	f00e ffe0 	bl	1c3e0 <lll_preempt_calc>
    d420:	2800      	cmp	r0, #0
    d422:	d140      	bne.n	d4a6 <common_prepare_cb+0x16a>
		if (!is_resume && lll->ticks_window) {
    d424:	b917      	cbnz	r7, d42c <common_prepare_cb+0xf0>
    d426:	69e3      	ldr	r3, [r4, #28]
    d428:	2b00      	cmp	r3, #0
    d42a:	d143      	bne.n	d4b4 <common_prepare_cb+0x178>
		ret = lll_prepare_done(lll);
    d42c:	4620      	mov	r0, r4
    d42e:	f00e ffc7 	bl	1c3c0 <lll_prepare_done>
		LL_ASSERT(!ret);
    d432:	2800      	cmp	r0, #0
    d434:	d163      	bne.n	d4fe <common_prepare_cb+0x1c2>
}
    d436:	2000      	movs	r0, #0
    d438:	b00c      	add	sp, #48	; 0x30
    d43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_rx);
    d43e:	f44f 73c7 	mov.w	r3, #398	; 0x18e
    d442:	4a39      	ldr	r2, [pc, #228]	; (d528 <common_prepare_cb+0x1ec>)
    d444:	4939      	ldr	r1, [pc, #228]	; (d52c <common_prepare_cb+0x1f0>)
    d446:	483a      	ldr	r0, [pc, #232]	; (d530 <common_prepare_cb+0x1f4>)
    d448:	f00c f9c1 	bl	197ce <assert_print>
    d44c:	4040      	eors	r0, r0
    d44e:	f380 8811 	msr	BASEPRI, r0
    d452:	f04f 0003 	mov.w	r0, #3
    d456:	df02      	svc	2
    d458:	e79b      	b.n	d392 <common_prepare_cb+0x56>
		radio_switch_complete_and_disable();
    d45a:	f002 fda3 	bl	ffa4 <radio_switch_complete_and_disable>
    d45e:	e7bd      	b.n	d3dc <common_prepare_cb+0xa0>
			ull_filter_lll_get((lll->filter_policy &
    d460:	7920      	ldrb	r0, [r4, #4]
    d462:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d466:	f7fe fcbd 	bl	bde4 <ull_filter_lll_get>
    d46a:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    d46c:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
    d470:	f7ff f8f2 	bl	c658 <ull_filter_lll_irks_get>
    d474:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
    d476:	1cb2      	adds	r2, r6, #2
    d478:	7871      	ldrb	r1, [r6, #1]
    d47a:	7830      	ldrb	r0, [r6, #0]
    d47c:	f002 fdc4 	bl	10008 <radio_filter_configure>
		radio_ar_configure(count, irks, (lll->phy << 2));
    d480:	7c22      	ldrb	r2, [r4, #16]
    d482:	f002 0207 	and.w	r2, r2, #7
    d486:	0092      	lsls	r2, r2, #2
    d488:	4641      	mov	r1, r8
    d48a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    d48e:	f002 ff75 	bl	1037c <radio_ar_configure>
    d492:	e7ab      	b.n	d3ec <common_prepare_cb+0xb0>
		struct lll_filter *fal = ull_filter_lll_get(true);
    d494:	2001      	movs	r0, #1
    d496:	f7fe fca5 	bl	bde4 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
    d49a:	1c82      	adds	r2, r0, #2
    d49c:	7841      	ldrb	r1, [r0, #1]
    d49e:	7800      	ldrb	r0, [r0, #0]
    d4a0:	f002 fdb2 	bl	10008 <radio_filter_configure>
    d4a4:	e7a2      	b.n	d3ec <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
    d4a6:	4621      	mov	r1, r4
    d4a8:	4822      	ldr	r0, [pc, #136]	; (d534 <common_prepare_cb+0x1f8>)
    d4aa:	f002 fb65 	bl	fb78 <radio_isr_set>
		radio_disable();
    d4ae:	f002 fc27 	bl	fd00 <radio_disable>
    d4b2:	e7c0      	b.n	d436 <common_prepare_cb+0xfa>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    d4b4:	f240 12fb 	movw	r2, #507	; 0x1fb
    d4b8:	9208      	str	r2, [sp, #32]
    d4ba:	4a1f      	ldr	r2, [pc, #124]	; (d538 <common_prepare_cb+0x1fc>)
    d4bc:	9207      	str	r2, [sp, #28]
    d4be:	9406      	str	r4, [sp, #24]
    d4c0:	4a1e      	ldr	r2, [pc, #120]	; (d53c <common_prepare_cb+0x200>)
    d4c2:	9205      	str	r2, [sp, #20]
    d4c4:	2000      	movs	r0, #0
    d4c6:	9004      	str	r0, [sp, #16]
    d4c8:	9003      	str	r0, [sp, #12]
    d4ca:	9002      	str	r0, [sp, #8]
    d4cc:	9001      	str	r0, [sp, #4]
    d4ce:	9300      	str	r3, [sp, #0]
    d4d0:	4633      	mov	r3, r6
    d4d2:	2201      	movs	r2, #1
    d4d4:	4601      	mov	r1, r0
    d4d6:	f00d f887 	bl	1a5e8 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    d4da:	2800      	cmp	r0, #0
    d4dc:	d0a6      	beq.n	d42c <common_prepare_cb+0xf0>
    d4de:	2802      	cmp	r0, #2
    d4e0:	d0a4      	beq.n	d42c <common_prepare_cb+0xf0>
    d4e2:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    d4e6:	4a10      	ldr	r2, [pc, #64]	; (d528 <common_prepare_cb+0x1ec>)
    d4e8:	4915      	ldr	r1, [pc, #84]	; (d540 <common_prepare_cb+0x204>)
    d4ea:	4811      	ldr	r0, [pc, #68]	; (d530 <common_prepare_cb+0x1f4>)
    d4ec:	f00c f96f 	bl	197ce <assert_print>
    d4f0:	4040      	eors	r0, r0
    d4f2:	f380 8811 	msr	BASEPRI, r0
    d4f6:	f04f 0003 	mov.w	r0, #3
    d4fa:	df02      	svc	2
    d4fc:	e796      	b.n	d42c <common_prepare_cb+0xf0>
		LL_ASSERT(!ret);
    d4fe:	f240 2315 	movw	r3, #533	; 0x215
    d502:	4a09      	ldr	r2, [pc, #36]	; (d528 <common_prepare_cb+0x1ec>)
    d504:	490f      	ldr	r1, [pc, #60]	; (d544 <common_prepare_cb+0x208>)
    d506:	480a      	ldr	r0, [pc, #40]	; (d530 <common_prepare_cb+0x1f4>)
    d508:	f00c f961 	bl	197ce <assert_print>
    d50c:	4040      	eors	r0, r0
    d50e:	f380 8811 	msr	BASEPRI, r0
    d512:	f04f 0003 	mov.w	r0, #3
    d516:	df02      	svc	2
    d518:	e78d      	b.n	d436 <common_prepare_cb+0xfa>
    d51a:	bf00      	nop
    d51c:	8e89bed6 	.word	0x8e89bed6
    d520:	00555555 	.word	0x00555555
    d524:	0000dd5d 	.word	0x0000dd5d
    d528:	0001f4f0 	.word	0x0001f4f0
    d52c:	0001f53c 	.word	0x0001f53c
    d530:	0001e920 	.word	0x0001e920
    d534:	0000d639 	.word	0x0000d639
    d538:	0000d30d 	.word	0x0000d30d
    d53c:	0000d549 	.word	0x0000d549
    d540:	0001ee10 	.word	0x0001ee10
    d544:	0001eccc 	.word	0x0001eccc

0000d548 <ticker_stop_cb>:
{
    d548:	b508      	push	{r3, lr}
	mfy.param = param;
    d54a:	4b0c      	ldr	r3, [pc, #48]	; (d57c <ticker_stop_cb+0x34>)
    d54c:	9a03      	ldr	r2, [sp, #12]
    d54e:	609a      	str	r2, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
    d550:	2200      	movs	r2, #0
    d552:	4611      	mov	r1, r2
    d554:	2001      	movs	r0, #1
    d556:	f7f9 fcfd 	bl	6f54 <mayfly_enqueue>
	LL_ASSERT(!ret);
    d55a:	b900      	cbnz	r0, d55e <ticker_stop_cb+0x16>
}
    d55c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
    d55e:	f44f 7323 	mov.w	r3, #652	; 0x28c
    d562:	4a07      	ldr	r2, [pc, #28]	; (d580 <ticker_stop_cb+0x38>)
    d564:	4907      	ldr	r1, [pc, #28]	; (d584 <ticker_stop_cb+0x3c>)
    d566:	4808      	ldr	r0, [pc, #32]	; (d588 <ticker_stop_cb+0x40>)
    d568:	f00c f931 	bl	197ce <assert_print>
    d56c:	4040      	eors	r0, r0
    d56e:	f380 8811 	msr	BASEPRI, r0
    d572:	f04f 0003 	mov.w	r0, #3
    d576:	df02      	svc	2
}
    d578:	e7f0      	b.n	d55c <ticker_stop_cb+0x14>
    d57a:	bf00      	nop
    d57c:	20000830 	.word	0x20000830
    d580:	0001f4f0 	.word	0x0001f4f0
    d584:	0001eccc 	.word	0x0001eccc
    d588:	0001e920 	.word	0x0001e920

0000d58c <isr_common_done>:

	radio_isr_set(isr_rx, param);
}

static void isr_common_done(void *param)
{
    d58c:	b530      	push	{r4, r5, lr}
    d58e:	b083      	sub	sp, #12
    d590:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	/* Clear radio status and events */
	lll_isr_status_reset();
    d592:	f00e ff47 	bl	1c424 <lll_isr_status_reset>

	/* Reset scanning state */
	lll = param;
	lll->state = 0U;
    d596:	7923      	ldrb	r3, [r4, #4]
    d598:	f36f 0300 	bfc	r3, #0, #1
    d59c:	7123      	strb	r3, [r4, #4]

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	lll->is_adv_ind = 0U;
    d59e:	7c23      	ldrb	r3, [r4, #16]
    d5a0:	f36f 03c3 	bfc	r3, #3, #1
    d5a4:	7423      	strb	r3, [r4, #16]
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	/* setup tIFS switching */
	if (0) {
		/* TODO: Add Rx-Rx switch usecase improvement in the future */
	} else if (lll->type ||
    d5a6:	7923      	ldrb	r3, [r4, #4]
    d5a8:	f013 0f20 	tst.w	r3, #32
    d5ac:	d01c      	beq.n	d5e8 <isr_common_done+0x5c>
#if defined(CONFIG_BT_CENTRAL)
		   lll->conn) {
#else /* !CONFIG_BT_CENTRAL */
		   0) {
#endif /* !CONFIG_BT_CENTRAL */
		radio_tmr_tifs_set(EVENT_IFS_US);
    d5ae:	2096      	movs	r0, #150	; 0x96
    d5b0:	f002 fdae 	bl	10110 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    d5b4:	2300      	movs	r3, #0
    d5b6:	461a      	mov	r2, r3
    d5b8:	4619      	mov	r1, r3
    d5ba:	4618      	mov	r0, r3
    d5bc:	f002 fcdc 	bl	ff78 <radio_switch_complete_and_tx>
	} else {
		radio_switch_complete_and_disable();
	}

	node_rx = ull_pdu_rx_alloc_peek(1);
    d5c0:	2001      	movs	r0, #1
    d5c2:	f7fc f98d 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    d5c6:	4605      	mov	r5, r0
    d5c8:	b188      	cbz	r0, d5ee <isr_common_done+0x62>
	radio_pkt_rx_set(node_rx->pdu);
    d5ca:	f105 0020 	add.w	r0, r5, #32
    d5ce:	f002 fb85 	bl	fcdc <radio_pkt_rx_set>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_enabled()) {
    d5d2:	f7ff f9f3 	bl	c9bc <ull_filter_lll_rl_enabled>
    d5d6:	b9c0      	cbnz	r0, d60a <isr_common_done+0x7e>
		radio_ar_configure(count, irks, 0);
#endif
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	radio_rssi_measure();
    d5d8:	f002 fcf4 	bl	ffc4 <radio_rssi_measure>

	radio_isr_set(isr_rx, param);
    d5dc:	4621      	mov	r1, r4
    d5de:	4812      	ldr	r0, [pc, #72]	; (d628 <isr_common_done+0x9c>)
    d5e0:	f002 faca 	bl	fb78 <radio_isr_set>
}
    d5e4:	b003      	add	sp, #12
    d5e6:	bd30      	pop	{r4, r5, pc}
		radio_switch_complete_and_disable();
    d5e8:	f002 fcdc 	bl	ffa4 <radio_switch_complete_and_disable>
    d5ec:	e7e8      	b.n	d5c0 <isr_common_done+0x34>
	LL_ASSERT(node_rx);
    d5ee:	f240 3356 	movw	r3, #854	; 0x356
    d5f2:	4a0e      	ldr	r2, [pc, #56]	; (d62c <isr_common_done+0xa0>)
    d5f4:	490e      	ldr	r1, [pc, #56]	; (d630 <isr_common_done+0xa4>)
    d5f6:	480f      	ldr	r0, [pc, #60]	; (d634 <isr_common_done+0xa8>)
    d5f8:	f00c f8e9 	bl	197ce <assert_print>
    d5fc:	4040      	eors	r0, r0
    d5fe:	f380 8811 	msr	BASEPRI, r0
    d602:	f04f 0003 	mov.w	r0, #3
    d606:	df02      	svc	2
    d608:	e7df      	b.n	d5ca <isr_common_done+0x3e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    d60a:	f10d 0007 	add.w	r0, sp, #7
    d60e:	f7ff f823 	bl	c658 <ull_filter_lll_irks_get>
    d612:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, (lll->phy << 2));
    d614:	7c22      	ldrb	r2, [r4, #16]
    d616:	f002 0207 	and.w	r2, r2, #7
    d61a:	0092      	lsls	r2, r2, #2
    d61c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d620:	f002 feac 	bl	1037c <radio_ar_configure>
    d624:	e7d8      	b.n	d5d8 <isr_common_done+0x4c>
    d626:	bf00      	nop
    d628:	0000dd5d 	.word	0x0000dd5d
    d62c:	0001f4f0 	.word	0x0001f4f0
    d630:	0001f53c 	.word	0x0001f53c
    d634:	0001e920 	.word	0x0001e920

0000d638 <isr_abort>:
}

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
static void isr_abort(void *param)
{
    d638:	b510      	push	{r4, lr}
    d63a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
    d63c:	f00e fef2 	bl	1c424 <lll_isr_status_reset>

	/* Disable Rx filters when aborting scan prepare */
	radio_filter_disable();
    d640:	f002 fd16 	bl	10070 <radio_filter_disable>
	struct event_done_extra *extra;

	/* Generate Scan done events so that duration and max expiry is
	 * detected in ULL.
	 */
	extra = ull_done_extra_type_set(EVENT_DONE_EXTRA_TYPE_SCAN);
    d644:	2001      	movs	r0, #1
    d646:	f00e fa4e 	bl	1bae6 <ull_done_extra_type_set>
	LL_ASSERT(extra);
    d64a:	b118      	cbz	r0, d654 <isr_abort+0x1c>
#endif  /* CONFIG_BT_CTLR_ADV_EXT */

	lll_isr_cleanup(param);
    d64c:	4620      	mov	r0, r4
    d64e:	f7ff fd2f 	bl	d0b0 <lll_isr_cleanup>
}
    d652:	bd10      	pop	{r4, pc}
	LL_ASSERT(extra);
    d654:	f240 33de 	movw	r3, #990	; 0x3de
    d658:	4a05      	ldr	r2, [pc, #20]	; (d670 <isr_abort+0x38>)
    d65a:	4906      	ldr	r1, [pc, #24]	; (d674 <isr_abort+0x3c>)
    d65c:	4806      	ldr	r0, [pc, #24]	; (d678 <isr_abort+0x40>)
    d65e:	f00c f8b6 	bl	197ce <assert_print>
    d662:	4040      	eors	r0, r0
    d664:	f380 8811 	msr	BASEPRI, r0
    d668:	f04f 0003 	mov.w	r0, #3
    d66c:	df02      	svc	2
    d66e:	e7ed      	b.n	d64c <isr_abort+0x14>
    d670:	0001f4f0 	.word	0x0001f4f0
    d674:	0001f544 	.word	0x0001f544
    d678:	0001e920 	.word	0x0001e920

0000d67c <isr_tx>:
{
    d67c:	b530      	push	{r4, r5, lr}
    d67e:	b083      	sub	sp, #12
    d680:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
    d682:	f00e fec1 	bl	1c408 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
    d686:	f002 fc8d 	bl	ffa4 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
    d68a:	2001      	movs	r0, #1
    d68c:	f7fc f928 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    d690:	4604      	mov	r4, r0
    d692:	b318      	cbz	r0, d6dc <isr_tx+0x60>
	radio_pkt_rx_set(node_rx->pdu);
    d694:	f104 0020 	add.w	r0, r4, #32
    d698:	f002 fb20 	bl	fcdc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
    d69c:	f002 fb52 	bl	fd44 <radio_is_ready>
    d6a0:	bb50      	cbnz	r0, d6f8 <isr_tx+0x7c>
	if (ull_filter_lll_rl_enabled()) {
    d6a2:	f7ff f98b 	bl	c9bc <ull_filter_lll_rl_enabled>
    d6a6:	2800      	cmp	r0, #0
    d6a8:	d134      	bne.n	d714 <isr_tx+0x98>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
    d6aa:	f00f f959 	bl	1c960 <radio_tmr_tifs_base_get>
    d6ae:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	hcto += radio_rx_chain_delay_get(0, 0);
    d6b2:	2100      	movs	r1, #0
    d6b4:	4608      	mov	r0, r1
    d6b6:	f00f f94b 	bl	1c950 <radio_rx_chain_delay_get>
    d6ba:	4404      	add	r4, r0
	hcto += addr_us_get(0);
    d6bc:	3428      	adds	r4, #40	; 0x28
	hcto -= radio_tx_chain_delay_get(0, 0);
    d6be:	2100      	movs	r1, #0
    d6c0:	4608      	mov	r0, r1
    d6c2:	f00f f941 	bl	1c948 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    d6c6:	1a20      	subs	r0, r4, r0
    d6c8:	f002 fe06 	bl	102d8 <radio_tmr_hcto_configure>
	radio_rssi_measure();
    d6cc:	f002 fc7a 	bl	ffc4 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
    d6d0:	4629      	mov	r1, r5
    d6d2:	4817      	ldr	r0, [pc, #92]	; (d730 <isr_tx+0xb4>)
    d6d4:	f002 fa50 	bl	fb78 <radio_isr_set>
}
    d6d8:	b003      	add	sp, #12
    d6da:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(node_rx);
    d6dc:	f44f 7344 	mov.w	r3, #784	; 0x310
    d6e0:	4a14      	ldr	r2, [pc, #80]	; (d734 <isr_tx+0xb8>)
    d6e2:	4915      	ldr	r1, [pc, #84]	; (d738 <isr_tx+0xbc>)
    d6e4:	4815      	ldr	r0, [pc, #84]	; (d73c <isr_tx+0xc0>)
    d6e6:	f00c f872 	bl	197ce <assert_print>
    d6ea:	4040      	eors	r0, r0
    d6ec:	f380 8811 	msr	BASEPRI, r0
    d6f0:	f04f 0003 	mov.w	r0, #3
    d6f4:	df02      	svc	2
    d6f6:	e7cd      	b.n	d694 <isr_tx+0x18>
	LL_ASSERT(!radio_is_ready());
    d6f8:	f44f 7345 	mov.w	r3, #788	; 0x314
    d6fc:	4a0d      	ldr	r2, [pc, #52]	; (d734 <isr_tx+0xb8>)
    d6fe:	4910      	ldr	r1, [pc, #64]	; (d740 <isr_tx+0xc4>)
    d700:	480e      	ldr	r0, [pc, #56]	; (d73c <isr_tx+0xc0>)
    d702:	f00c f864 	bl	197ce <assert_print>
    d706:	4040      	eors	r0, r0
    d708:	f380 8811 	msr	BASEPRI, r0
    d70c:	f04f 0003 	mov.w	r0, #3
    d710:	df02      	svc	2
    d712:	e7c6      	b.n	d6a2 <isr_tx+0x26>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    d714:	f10d 0007 	add.w	r0, sp, #7
    d718:	f7fe ff9e 	bl	c658 <ull_filter_lll_irks_get>
    d71c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, (lll->phy << 2));
    d71e:	7c2a      	ldrb	r2, [r5, #16]
    d720:	f002 0207 	and.w	r2, r2, #7
    d724:	0092      	lsls	r2, r2, #2
    d726:	f89d 0007 	ldrb.w	r0, [sp, #7]
    d72a:	f002 fe27 	bl	1037c <radio_ar_configure>
    d72e:	e7bc      	b.n	d6aa <isr_tx+0x2e>
    d730:	0000dd5d 	.word	0x0000dd5d
    d734:	0001f4f0 	.word	0x0001f4f0
    d738:	0001f53c 	.word	0x0001f53c
    d73c:	0001e920 	.word	0x0001e920
    d740:	0001f54c 	.word	0x0001f54c

0000d744 <isr_rx_scan_report>:

static int isr_rx_scan_report(struct lll_scan *lll, uint8_t devmatch_ok,
			      uint8_t irkmatch_ok, uint8_t rl_idx,
			      uint8_t rssi_ready, uint8_t phy_flags_rx,
			      bool dir_report)
{
    d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d748:	b085      	sub	sp, #20
    d74a:	4606      	mov	r6, r0
    d74c:	460f      	mov	r7, r1
    d74e:	4690      	mov	r8, r2
    d750:	461d      	mov	r5, r3
    d752:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    d756:	f89d a03c 	ldrb.w	sl, [sp, #60]	; 0x3c
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    d75a:	2003      	movs	r0, #3
    d75c:	f7fc f8c0 	bl	98e0 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    d760:	2800      	cmp	r0, #0
    d762:	f000 809a 	beq.w	d89a <isr_rx_scan_report+0x156>
    d766:	4604      	mov	r4, r0
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    d768:	f7fc f8da 	bl	9920 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    d76c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d770:	80e3      	strh	r3, [r4, #6]
		   _radio.advertiser.is_mesh) {
		node_rx->hdr.type = NODE_RX_TYPE_MESH_REPORT;
#endif /* CONFIG_BT_HCI_MESH_EXT */

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	} else if (lll->phy) {
    d772:	7c33      	ldrb	r3, [r6, #16]
    d774:	f013 0f07 	tst.w	r3, #7
    d778:	d05d      	beq.n	d836 <isr_rx_scan_report+0xf2>
		struct pdu_adv *pdu_adv_rx;

		switch (lll->phy) {
    d77a:	f003 0307 	and.w	r3, r3, #7
    d77e:	2b01      	cmp	r3, #1
    d780:	d00f      	beq.n	d7a2 <isr_rx_scan_report+0x5e>
    d782:	2b04      	cmp	r3, #4
    d784:	d01b      	beq.n	d7be <isr_rx_scan_report+0x7a>
		case PHY_CODED:
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
			break;

		default:
			LL_ASSERT(0);
    d786:	f240 53ed 	movw	r3, #1517	; 0x5ed
    d78a:	4a45      	ldr	r2, [pc, #276]	; (d8a0 <isr_rx_scan_report+0x15c>)
    d78c:	4945      	ldr	r1, [pc, #276]	; (d8a4 <isr_rx_scan_report+0x160>)
    d78e:	4846      	ldr	r0, [pc, #280]	; (d8a8 <isr_rx_scan_report+0x164>)
    d790:	f00c f81d 	bl	197ce <assert_print>
    d794:	4040      	eors	r0, r0
    d796:	f380 8811 	msr	BASEPRI, r0
    d79a:	f04f 0003 	mov.w	r0, #3
    d79e:	df02      	svc	2
			break;
    d7a0:	e001      	b.n	d7a6 <isr_rx_scan_report+0x62>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_1M_REPORT;
    d7a2:	2306      	movs	r3, #6
    d7a4:	7123      	strb	r3, [r4, #4]
		}

		pdu_adv_rx = (void *)node_rx->pdu;
    d7a6:	f104 0b20 	add.w	fp, r4, #32
		switch (pdu_adv_rx->type) {
    d7aa:	f894 3020 	ldrb.w	r3, [r4, #32]
    d7ae:	f003 030f 	and.w	r3, r3, #15
    d7b2:	2b04      	cmp	r3, #4
    d7b4:	d006      	beq.n	d7c4 <isr_rx_scan_report+0x80>
    d7b6:	2b07      	cmp	r3, #7
    d7b8:	d011      	beq.n	d7de <isr_rx_scan_report+0x9a>
    d7ba:	2600      	movs	r6, #0
    d7bc:	e03e      	b.n	d83c <isr_rx_scan_report+0xf8>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_CODED_REPORT;
    d7be:	2308      	movs	r3, #8
    d7c0:	7123      	strb	r3, [r4, #4]
			break;
    d7c2:	e7f0      	b.n	d7a6 <isr_rx_scan_report+0x62>
		case PDU_ADV_TYPE_SCAN_RSP:
			if (lll->is_adv_ind) {
    d7c4:	7c33      	ldrb	r3, [r6, #16]
    d7c6:	f013 0f08 	tst.w	r3, #8
    d7ca:	d05c      	beq.n	d886 <isr_rx_scan_report+0x142>
				pdu_adv_rx->type =
    d7cc:	f894 3020 	ldrb.w	r3, [r4, #32]
    d7d0:	2205      	movs	r2, #5
    d7d2:	f362 0303 	bfi	r3, r2, #0, #4
    d7d6:	f884 3020 	strb.w	r3, [r4, #32]
	int err = 0;
    d7da:	2600      	movs	r6, #0
    d7dc:	e02e      	b.n	d83c <isr_rx_scan_report+0xf8>
		case PDU_ADV_TYPE_EXT_IND:
			{
				struct node_rx_ftr *ftr;

				ftr = &(node_rx->hdr.rx_ftr);
				ftr->param = lll;
    d7de:	60a6      	str	r6, [r4, #8]
				ftr->ticks_anchor = radio_tmr_start_get();
    d7e0:	f002 fd68 	bl	102b4 <radio_tmr_start_get>
    d7e4:	6120      	str	r0, [r4, #16]
				ftr->radio_end_us =
					radio_tmr_end_get() -
    d7e6:	f002 fdc3 	bl	10370 <radio_tmr_end_get>
    d7ea:	9003      	str	r0, [sp, #12]
					radio_rx_chain_delay_get(lll->phy,
    d7ec:	7c30      	ldrb	r0, [r6, #16]
    d7ee:	4651      	mov	r1, sl
    d7f0:	f000 0007 	and.w	r0, r0, #7
    d7f4:	f00f f8ac 	bl	1c950 <radio_rx_chain_delay_get>
					radio_tmr_end_get() -
    d7f8:	9b03      	ldr	r3, [sp, #12]
    d7fa:	1a18      	subs	r0, r3, r0
				ftr->radio_end_us =
    d7fc:	6160      	str	r0, [r4, #20]
								 phy_flags_rx);
				ftr->phy_flags = phy_flags_rx;
    d7fe:	7ea3      	ldrb	r3, [r4, #26]
    d800:	f36a 0382 	bfi	r3, sl, #2, #1
    d804:	76a3      	strb	r3, [r4, #26]
				ftr->aux_lll_sched =
					lll_scan_aux_setup(pdu_adv_rx, lll->phy,
    d806:	7c31      	ldrb	r1, [r6, #16]
    d808:	9600      	str	r6, [sp, #0]
    d80a:	4b28      	ldr	r3, [pc, #160]	; (d8ac <isr_rx_scan_report+0x168>)
    d80c:	4652      	mov	r2, sl
    d80e:	f001 0107 	and.w	r1, r1, #7
    d812:	4658      	mov	r0, fp
    d814:	f000 fe98 	bl	e548 <lll_scan_aux_setup>
				ftr->aux_lll_sched =
    d818:	7ee3      	ldrb	r3, [r4, #27]
    d81a:	f360 03c3 	bfi	r3, r0, #3, #1
    d81e:	76e3      	strb	r3, [r4, #27]
							   phy_flags_rx,
							   lll_scan_aux_isr_aux_setup,
							   lll);
				if (ftr->aux_lll_sched) {
    d820:	b2db      	uxtb	r3, r3
    d822:	f013 0f08 	tst.w	r3, #8
    d826:	d030      	beq.n	d88a <isr_rx_scan_report+0x146>
					lll->is_aux_sched = 1U;
    d828:	7c33      	ldrb	r3, [r6, #16]
    d82a:	f043 0310 	orr.w	r3, r3, #16
    d82e:	7433      	strb	r3, [r6, #16]
					err = -EBUSY;
    d830:	f06f 060f 	mvn.w	r6, #15
    d834:	e002      	b.n	d83c <isr_rx_scan_report+0xf8>
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    d836:	2305      	movs	r3, #5
    d838:	7123      	strb	r3, [r4, #4]
	int err = 0;
    d83a:	2600      	movs	r6, #0
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    d83c:	f1b9 0f00 	cmp.w	r9, #0
    d840:	d125      	bne.n	d88e <isr_rx_scan_report+0x14a>
    d842:	207f      	movs	r0, #127	; 0x7f
    d844:	7620      	strb	r0, [r4, #24]
						  BT_HCI_LE_RSSI_NOT_AVAILABLE;
#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* save the resolving list index. */
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    d846:	f1b8 0f00 	cmp.w	r8, #0
    d84a:	d024      	beq.n	d896 <isr_rx_scan_report+0x152>
    d84c:	462b      	mov	r3, r5
    d84e:	7663      	strb	r3, [r4, #25]

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	node_rx->hdr.rx_ftr.direct_resolved = (rl_idx != FILTER_IDX_NONE);
    d850:	3dff      	subs	r5, #255	; 0xff
    d852:	bf18      	it	ne
    d854:	2501      	movne	r5, #1
    d856:	7ea3      	ldrb	r3, [r4, #26]
    d858:	f365 1345 	bfi	r3, r5, #5, #1
    d85c:	76a3      	strb	r3, [r4, #26]
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    d85e:	b2db      	uxtb	r3, r3
    d860:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    d864:	f362 0341 	bfi	r3, r2, #1, #1
    d868:	76a3      	strb	r3, [r4, #26]
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

#if defined(CONFIG_BT_CTLR_SYNC_PERIODIC) && \
	defined(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST)
	node_rx->hdr.rx_ftr.devmatch = devmatch_ok;
    d86a:	7ee3      	ldrb	r3, [r4, #27]
    d86c:	f367 0341 	bfi	r3, r7, #1, #1
    d870:	76e3      	strb	r3, [r4, #27]
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    d872:	4621      	mov	r1, r4
    d874:	6820      	ldr	r0, [r4, #0]
    d876:	f7fc f86f 	bl	9958 <ull_rx_put>
	ull_rx_sched();
    d87a:	f7fc f875 	bl	9968 <ull_rx_sched>

	return err;
}
    d87e:	4630      	mov	r0, r6
    d880:	b005      	add	sp, #20
    d882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int err = 0;
    d886:	2600      	movs	r6, #0
    d888:	e7d8      	b.n	d83c <isr_rx_scan_report+0xf8>
    d88a:	2600      	movs	r6, #0
    d88c:	e7d6      	b.n	d83c <isr_rx_scan_report+0xf8>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    d88e:	f002 fba3 	bl	ffd8 <radio_rssi_get>
    d892:	b2c0      	uxtb	r0, r0
    d894:	e7d6      	b.n	d844 <isr_rx_scan_report+0x100>
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    d896:	23ff      	movs	r3, #255	; 0xff
    d898:	e7d9      	b.n	d84e <isr_rx_scan_report+0x10a>
		return -ENOBUFS;
    d89a:	f06f 0668 	mvn.w	r6, #104	; 0x68
    d89e:	e7ee      	b.n	d87e <isr_rx_scan_report+0x13a>
    d8a0:	0001f4f0 	.word	0x0001f4f0
    d8a4:	0001ead8 	.word	0x0001ead8
    d8a8:	0001e920 	.word	0x0001e920
    d8ac:	0000e34d 	.word	0x0000e34d

0000d8b0 <abort_cb>:
{
    d8b0:	b510      	push	{r4, lr}
    d8b2:	460c      	mov	r4, r1
	if (!prepare_param) {
    d8b4:	b138      	cbz	r0, d8c6 <abort_cb+0x16>
	err = lll_hfclock_off();
    d8b6:	f7ff fd05 	bl	d2c4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
    d8ba:	2800      	cmp	r0, #0
    d8bc:	db09      	blt.n	d8d2 <abort_cb+0x22>
	lll_done(param);
    d8be:	4620      	mov	r0, r4
    d8c0:	f7ff fb5a 	bl	cf78 <lll_done>
}
    d8c4:	bd10      	pop	{r4, pc}
			radio_isr_set(isr_done_cleanup, param);
    d8c6:	480a      	ldr	r0, [pc, #40]	; (d8f0 <abort_cb+0x40>)
    d8c8:	f002 f956 	bl	fb78 <radio_isr_set>
			radio_disable();
    d8cc:	f002 fa18 	bl	fd00 <radio_disable>
		return;
    d8d0:	e7f8      	b.n	d8c4 <abort_cb+0x14>
	LL_ASSERT(err >= 0);
    d8d2:	f44f 731f 	mov.w	r3, #636	; 0x27c
    d8d6:	4a07      	ldr	r2, [pc, #28]	; (d8f4 <abort_cb+0x44>)
    d8d8:	4907      	ldr	r1, [pc, #28]	; (d8f8 <abort_cb+0x48>)
    d8da:	4808      	ldr	r0, [pc, #32]	; (d8fc <abort_cb+0x4c>)
    d8dc:	f00b ff77 	bl	197ce <assert_print>
    d8e0:	4040      	eors	r0, r0
    d8e2:	f380 8811 	msr	BASEPRI, r0
    d8e6:	f04f 0003 	mov.w	r0, #3
    d8ea:	df02      	svc	2
    d8ec:	e7e7      	b.n	d8be <abort_cb+0xe>
    d8ee:	bf00      	nop
    d8f0:	0000d901 	.word	0x0000d901
    d8f4:	0001f4f0 	.word	0x0001f4f0
    d8f8:	0001f4a0 	.word	0x0001f4a0
    d8fc:	0001e920 	.word	0x0001e920

0000d900 <isr_done_cleanup>:
{
    d900:	b530      	push	{r4, r5, lr}
    d902:	b085      	sub	sp, #20
    d904:	4604      	mov	r4, r0
	lll_isr_status_reset();
    d906:	f00e fd8d 	bl	1c424 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
    d90a:	f10d 010f 	add.w	r1, sp, #15
    d90e:	4620      	mov	r0, r4
    d910:	f7ff fb86 	bl	d020 <lll_is_done>
    d914:	b108      	cbz	r0, d91a <isr_done_cleanup+0x1a>
}
    d916:	b005      	add	sp, #20
    d918:	bd30      	pop	{r4, r5, pc}
	radio_filter_disable();
    d91a:	f002 fba9 	bl	10070 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
    d91e:	7922      	ldrb	r2, [r4, #4]
    d920:	f3c2 0341 	ubfx	r3, r2, #1, #2
    d924:	3301      	adds	r3, #1
    d926:	f003 0303 	and.w	r3, r3, #3
    d92a:	f363 0242 	bfi	r2, r3, #1, #2
    d92e:	7122      	strb	r2, [r4, #4]
    d930:	2b03      	cmp	r3, #3
    d932:	d013      	beq.n	d95c <isr_done_cleanup+0x5c>
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
    d934:	2000      	movs	r0, #0
    d936:	9000      	str	r0, [sp, #0]
    d938:	4603      	mov	r3, r0
    d93a:	2201      	movs	r2, #1
    d93c:	4601      	mov	r1, r0
    d93e:	f7f9 fd7f 	bl	7440 <ticker_stop>
	if (!is_resume) {
    d942:	f89d 300f 	ldrb.w	r3, [sp, #15]
    d946:	b173      	cbz	r3, d966 <isr_done_cleanup+0x66>
	if (unlikely(lll->duration_reload && !lll->duration_expire)) {
    d948:	89a3      	ldrh	r3, [r4, #12]
    d94a:	b9fb      	cbnz	r3, d98c <isr_done_cleanup+0x8c>
	if (lll->is_aux_sched) {
    d94c:	7c23      	ldrb	r3, [r4, #16]
    d94e:	f013 0f10 	tst.w	r3, #16
    d952:	d123      	bne.n	d99c <isr_done_cleanup+0x9c>
	lll_isr_cleanup(param);
    d954:	4620      	mov	r0, r4
    d956:	f7ff fbab 	bl	d0b0 <lll_isr_cleanup>
    d95a:	e7dc      	b.n	d916 <isr_done_cleanup+0x16>
		lll->chan = 0U;
    d95c:	b2d3      	uxtb	r3, r2
    d95e:	f36f 0342 	bfc	r3, #1, #2
    d962:	7123      	strb	r3, [r4, #4]
    d964:	e7e6      	b.n	d934 <isr_done_cleanup+0x34>
		extra = ull_done_extra_type_set(EVENT_DONE_EXTRA_TYPE_SCAN);
    d966:	2001      	movs	r0, #1
    d968:	f00e f8bd 	bl	1bae6 <ull_done_extra_type_set>
		LL_ASSERT(extra);
    d96c:	2800      	cmp	r0, #0
    d96e:	d1eb      	bne.n	d948 <isr_done_cleanup+0x48>
    d970:	f240 432d 	movw	r3, #1069	; 0x42d
    d974:	4a19      	ldr	r2, [pc, #100]	; (d9dc <isr_done_cleanup+0xdc>)
    d976:	491a      	ldr	r1, [pc, #104]	; (d9e0 <isr_done_cleanup+0xe0>)
    d978:	481a      	ldr	r0, [pc, #104]	; (d9e4 <isr_done_cleanup+0xe4>)
    d97a:	f00b ff28 	bl	197ce <assert_print>
    d97e:	4040      	eors	r0, r0
    d980:	f380 8811 	msr	BASEPRI, r0
    d984:	f04f 0003 	mov.w	r0, #3
    d988:	df02      	svc	2
    d98a:	e7dd      	b.n	d948 <isr_done_cleanup+0x48>
	if (unlikely(lll->duration_reload && !lll->duration_expire)) {
    d98c:	89e3      	ldrh	r3, [r4, #14]
    d98e:	2b00      	cmp	r3, #0
    d990:	d1dc      	bne.n	d94c <isr_done_cleanup+0x4c>
		lll->is_stop = 1U;
    d992:	7923      	ldrb	r3, [r4, #4]
    d994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    d998:	7123      	strb	r3, [r4, #4]
    d99a:	e7d7      	b.n	d94c <isr_done_cleanup+0x4c>
		lll->is_aux_sched = 0U;
    d99c:	7c23      	ldrb	r3, [r4, #16]
    d99e:	f36f 1304 	bfc	r3, #4, #1
    d9a2:	7423      	strb	r3, [r4, #16]
		node_rx = ull_pdu_rx_alloc();
    d9a4:	f7fb ffbc 	bl	9920 <ull_pdu_rx_alloc>
		LL_ASSERT(node_rx);
    d9a8:	4605      	mov	r5, r0
    d9aa:	b148      	cbz	r0, d9c0 <isr_done_cleanup+0xc0>
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_RELEASE;
    d9ac:	230a      	movs	r3, #10
    d9ae:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.rx_ftr.param = lll;
    d9b0:	60ac      	str	r4, [r5, #8]
		ull_rx_put(node_rx->hdr.link, node_rx);
    d9b2:	4629      	mov	r1, r5
    d9b4:	6828      	ldr	r0, [r5, #0]
    d9b6:	f7fb ffcf 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    d9ba:	f7fb ffd5 	bl	9968 <ull_rx_sched>
    d9be:	e7c9      	b.n	d954 <isr_done_cleanup+0x54>
		LL_ASSERT(node_rx);
    d9c0:	f240 433d 	movw	r3, #1085	; 0x43d
    d9c4:	4a05      	ldr	r2, [pc, #20]	; (d9dc <isr_done_cleanup+0xdc>)
    d9c6:	4908      	ldr	r1, [pc, #32]	; (d9e8 <isr_done_cleanup+0xe8>)
    d9c8:	4806      	ldr	r0, [pc, #24]	; (d9e4 <isr_done_cleanup+0xe4>)
    d9ca:	f00b ff00 	bl	197ce <assert_print>
    d9ce:	4040      	eors	r0, r0
    d9d0:	f380 8811 	msr	BASEPRI, r0
    d9d4:	f04f 0003 	mov.w	r0, #3
    d9d8:	df02      	svc	2
    d9da:	e7e7      	b.n	d9ac <isr_done_cleanup+0xac>
    d9dc:	0001f4f0 	.word	0x0001f4f0
    d9e0:	0001f544 	.word	0x0001f544
    d9e4:	0001e920 	.word	0x0001e920
    d9e8:	0001f53c 	.word	0x0001f53c

0000d9ec <is_abort_cb>:
{
    d9ec:	b508      	push	{r3, lr}
	if (next != curr) {
    d9ee:	4281      	cmp	r1, r0
    d9f0:	d003      	beq.n	d9fa <is_abort_cb+0xe>
		if (unlikely(!lll->duration_reload || lll->duration_expire))
    d9f2:	898b      	ldrh	r3, [r1, #12]
    d9f4:	b16b      	cbz	r3, da12 <is_abort_cb+0x26>
    d9f6:	89cb      	ldrh	r3, [r1, #14]
    d9f8:	b95b      	cbnz	r3, da12 <is_abort_cb+0x26>
	} else if (unlikely(lll->duration_reload && !lll->duration_expire)) {
    d9fa:	898b      	ldrh	r3, [r1, #12]
    d9fc:	bb2b      	cbnz	r3, da4a <is_abort_cb+0x5e>
	} else if (lll->state || lll->is_aux_sched) {
    d9fe:	790b      	ldrb	r3, [r1, #4]
    da00:	f013 0f01 	tst.w	r3, #1
    da04:	d12f      	bne.n	da66 <is_abort_cb+0x7a>
    da06:	7c0b      	ldrb	r3, [r1, #16]
    da08:	f013 0f10 	tst.w	r3, #16
    da0c:	d024      	beq.n	da58 <is_abort_cb+0x6c>
		return 0;
    da0e:	2000      	movs	r0, #0
    da10:	e02a      	b.n	da68 <is_abort_cb+0x7c>
			if (!lll->ticks_window) {
    da12:	69cb      	ldr	r3, [r1, #28]
    da14:	b113      	cbz	r3, da1c <is_abort_cb+0x30>
			return -ECANCELED;
    da16:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    da1a:	e025      	b.n	da68 <is_abort_cb+0x7c>
				*resume_cb = resume_prepare_cb;
    da1c:	4b13      	ldr	r3, [pc, #76]	; (da6c <is_abort_cb+0x80>)
    da1e:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
    da20:	f7ff fc3a 	bl	d298 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
    da24:	2800      	cmp	r0, #0
    da26:	db02      	blt.n	da2e <is_abort_cb+0x42>
				return -EAGAIN;
    da28:	f06f 000a 	mvn.w	r0, #10
    da2c:	e01c      	b.n	da68 <is_abort_cb+0x7c>
				LL_ASSERT(err >= 0);
    da2e:	f240 2333 	movw	r3, #563	; 0x233
    da32:	4a0f      	ldr	r2, [pc, #60]	; (da70 <is_abort_cb+0x84>)
    da34:	490f      	ldr	r1, [pc, #60]	; (da74 <is_abort_cb+0x88>)
    da36:	4810      	ldr	r0, [pc, #64]	; (da78 <is_abort_cb+0x8c>)
    da38:	f00b fec9 	bl	197ce <assert_print>
    da3c:	4040      	eors	r0, r0
    da3e:	f380 8811 	msr	BASEPRI, r0
    da42:	f04f 0003 	mov.w	r0, #3
    da46:	df02      	svc	2
    da48:	e7ee      	b.n	da28 <is_abort_cb+0x3c>
	} else if (unlikely(lll->duration_reload && !lll->duration_expire)) {
    da4a:	89cb      	ldrh	r3, [r1, #14]
    da4c:	2b00      	cmp	r3, #0
    da4e:	d1d6      	bne.n	d9fe <is_abort_cb+0x12>
		radio_isr_set(isr_done_cleanup, lll);
    da50:	480a      	ldr	r0, [pc, #40]	; (da7c <is_abort_cb+0x90>)
    da52:	f002 f891 	bl	fb78 <radio_isr_set>
    da56:	e002      	b.n	da5e <is_abort_cb+0x72>
		radio_isr_set(isr_window, lll);
    da58:	4809      	ldr	r0, [pc, #36]	; (da80 <is_abort_cb+0x94>)
    da5a:	f002 f88d 	bl	fb78 <radio_isr_set>
	radio_disable();
    da5e:	f002 f94f 	bl	fd00 <radio_disable>
	return 0;
    da62:	2000      	movs	r0, #0
    da64:	e000      	b.n	da68 <is_abort_cb+0x7c>
		return 0;
    da66:	2000      	movs	r0, #0
}
    da68:	bd08      	pop	{r3, pc}
    da6a:	bf00      	nop
    da6c:	0001c525 	.word	0x0001c525
    da70:	0001f4f0 	.word	0x0001f4f0
    da74:	0001f4a0 	.word	0x0001f4a0
    da78:	0001e920 	.word	0x0001e920
    da7c:	0000d901 	.word	0x0000d901
    da80:	0001c4e5 	.word	0x0001c4e5

0000da84 <lll_scan_prepare>:
{
    da84:	b510      	push	{r4, lr}
    da86:	b082      	sub	sp, #8
    da88:	4604      	mov	r4, r0
	err = lll_hfclock_on();
    da8a:	f7ff fc05 	bl	d298 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
    da8e:	2800      	cmp	r0, #0
    da90:	db0c      	blt.n	daac <lll_scan_prepare+0x28>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
    da92:	9400      	str	r4, [sp, #0]
    da94:	2300      	movs	r3, #0
    da96:	4a12      	ldr	r2, [pc, #72]	; (dae0 <lll_scan_prepare+0x5c>)
    da98:	4912      	ldr	r1, [pc, #72]	; (dae4 <lll_scan_prepare+0x60>)
    da9a:	4813      	ldr	r0, [pc, #76]	; (dae8 <lll_scan_prepare+0x64>)
    da9c:	f00e f87e 	bl	1bb9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    daa0:	b110      	cbz	r0, daa8 <lll_scan_prepare+0x24>
    daa2:	f110 0f77 	cmn.w	r0, #119	; 0x77
    daa6:	d10e      	bne.n	dac6 <lll_scan_prepare+0x42>
}
    daa8:	b002      	add	sp, #8
    daaa:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
    daac:	2389      	movs	r3, #137	; 0x89
    daae:	4a0f      	ldr	r2, [pc, #60]	; (daec <lll_scan_prepare+0x68>)
    dab0:	490f      	ldr	r1, [pc, #60]	; (daf0 <lll_scan_prepare+0x6c>)
    dab2:	4810      	ldr	r0, [pc, #64]	; (daf4 <lll_scan_prepare+0x70>)
    dab4:	f00b fe8b 	bl	197ce <assert_print>
    dab8:	4040      	eors	r0, r0
    daba:	f380 8811 	msr	BASEPRI, r0
    dabe:	f04f 0003 	mov.w	r0, #3
    dac2:	df02      	svc	2
    dac4:	e7e5      	b.n	da92 <lll_scan_prepare+0xe>
	LL_ASSERT(!err || err == -EINPROGRESS);
    dac6:	238c      	movs	r3, #140	; 0x8c
    dac8:	4a08      	ldr	r2, [pc, #32]	; (daec <lll_scan_prepare+0x68>)
    daca:	490b      	ldr	r1, [pc, #44]	; (daf8 <lll_scan_prepare+0x74>)
    dacc:	4809      	ldr	r0, [pc, #36]	; (daf4 <lll_scan_prepare+0x70>)
    dace:	f00b fe7e 	bl	197ce <assert_print>
    dad2:	4040      	eors	r0, r0
    dad4:	f380 8811 	msr	BASEPRI, r0
    dad8:	f04f 0003 	mov.w	r0, #3
    dadc:	df02      	svc	2
}
    dade:	e7e3      	b.n	daa8 <lll_scan_prepare+0x24>
    dae0:	0001c445 	.word	0x0001c445
    dae4:	0000d8b1 	.word	0x0000d8b1
    dae8:	0000d9ed 	.word	0x0000d9ed
    daec:	0001f4f0 	.word	0x0001f4f0
    daf0:	0001f4a0 	.word	0x0001f4a0
    daf4:	0001e920 	.word	0x0001e920
    daf8:	0001f560 	.word	0x0001f560

0000dafc <lll_scan_isr_resume>:
{
    dafc:	b510      	push	{r4, lr}
    dafe:	4604      	mov	r4, r0
	lll_isr_status_reset();
    db00:	f00e fc90 	bl	1c424 <lll_isr_status_reset>
	p.param = param;
    db04:	4802      	ldr	r0, [pc, #8]	; (db10 <lll_scan_isr_resume+0x14>)
    db06:	60c4      	str	r4, [r0, #12]
	resume_prepare_cb(&p);
    db08:	f00e fd0c 	bl	1c524 <resume_prepare_cb>
}
    db0c:	bd10      	pop	{r4, pc}
    db0e:	bf00      	nop
    db10:	20008b14 	.word	0x20008b14

0000db14 <isr_rx_pdu>:
{
    db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db18:	b086      	sub	sp, #24
    db1a:	4605      	mov	r5, r0
    db1c:	460c      	mov	r4, r1
    db1e:	4616      	mov	r6, r2
    db20:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    db24:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
    db28:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    db2c:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
	bool dir_report = false;
    db30:	2300      	movs	r3, #0
    db32:	f88d 3017 	strb.w	r3, [sp, #23]
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    db36:	780b      	ldrb	r3, [r1, #0]
    db38:	f013 030f 	ands.w	r3, r3, #15
    db3c:	d04c      	beq.n	dbd8 <isr_rx_pdu+0xc4>
    db3e:	2b06      	cmp	r3, #6
    db40:	d04a      	beq.n	dbd8 <isr_rx_pdu+0xc4>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    db42:	b11b      	cbz	r3, db4c <isr_rx_pdu+0x38>
    db44:	2b02      	cmp	r3, #2
    db46:	d001      	beq.n	db4c <isr_rx_pdu+0x38>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
    db48:	2b06      	cmp	r3, #6
    db4a:	d102      	bne.n	db52 <isr_rx_pdu+0x3e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    db4c:	7862      	ldrb	r2, [r4, #1]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    db4e:	2a25      	cmp	r2, #37	; 0x25
    db50:	d925      	bls.n	db9e <isr_rx_pdu+0x8a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    db52:	2b01      	cmp	r3, #1
    db54:	f000 80c0 	beq.w	dcd8 <isr_rx_pdu+0x1c4>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    db58:	7823      	ldrb	r3, [r4, #0]
    db5a:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    db5e:	2b07      	cmp	r3, #7
    db60:	f000 80ce 	beq.w	dd00 <isr_rx_pdu+0x1ec>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    db64:	7823      	ldrb	r3, [r4, #0]
    db66:	f003 030f 	and.w	r3, r3, #15
						       &dir_report)) ||
    db6a:	2b04      	cmp	r3, #4
    db6c:	f040 80e7 	bne.w	dd3e <isr_rx_pdu+0x22a>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    db70:	7863      	ldrb	r3, [r4, #1]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    db72:	2b25      	cmp	r3, #37	; 0x25
    db74:	f200 80e3 	bhi.w	dd3e <isr_rx_pdu+0x22a>
		   (lll->state != 0U) &&
    db78:	792b      	ldrb	r3, [r5, #4]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    db7a:	f013 0f01 	tst.w	r3, #1
    db7e:	f000 80de 	beq.w	dd3e <isr_rx_pdu+0x22a>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    db82:	f002 f92b 	bl	fddc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    db86:	7802      	ldrb	r2, [r0, #0]
    db88:	7823      	ldrb	r3, [r4, #0]
    db8a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    db8e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    db92:	f000 80c8 	beq.w	dd26 <isr_rx_pdu+0x212>
    db96:	2300      	movs	r3, #0
		   (lll->state != 0U) &&
    db98:	2b00      	cmp	r3, #0
    db9a:	f000 80d0 	beq.w	dd3e <isr_rx_pdu+0x22a>
		 (pdu_adv_rx->len != 0) &&
    db9e:	7863      	ldrb	r3, [r4, #1]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    dba0:	2b00      	cmp	r3, #0
    dba2:	f000 80cc 	beq.w	dd3e <isr_rx_pdu+0x22a>
		err = isr_rx_scan_report(lll, devmatch_ok, irkmatch_ok, rl_idx,
    dba6:	f89d 3017 	ldrb.w	r3, [sp, #23]
    dbaa:	9302      	str	r3, [sp, #8]
    dbac:	f8cd a004 	str.w	sl, [sp, #4]
    dbb0:	f8cd 9000 	str.w	r9, [sp]
    dbb4:	463b      	mov	r3, r7
    dbb6:	4642      	mov	r2, r8
    dbb8:	4631      	mov	r1, r6
    dbba:	4628      	mov	r0, r5
    dbbc:	f7ff fdc2 	bl	d744 <isr_rx_scan_report>
		if (err) {
    dbc0:	4606      	mov	r6, r0
    dbc2:	2800      	cmp	r0, #0
    dbc4:	f000 80be 	beq.w	dd44 <isr_rx_pdu+0x230>
			if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
    dbc8:	f110 0f10 	cmn.w	r0, #16
    dbcc:	f000 80b5 	beq.w	dd3a <isr_rx_pdu+0x226>
}
    dbd0:	4630      	mov	r0, r6
    dbd2:	b006      	add	sp, #24
    dbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    dbd8:	7862      	ldrb	r2, [r4, #1]
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    dbda:	2a25      	cmp	r2, #37	; 0x25
    dbdc:	d8b1      	bhi.n	db42 <isr_rx_pdu+0x2e>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    dbde:	792a      	ldrb	r2, [r5, #4]
		   lll->type &&
    dbe0:	f012 0f20 	tst.w	r2, #32
    dbe4:	d0ad      	beq.n	db42 <isr_rx_pdu+0x2e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    dbe6:	2096      	movs	r0, #150	; 0x96
    dbe8:	f002 fa92 	bl	10110 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    dbec:	2000      	movs	r0, #0
    dbee:	f002 f9ad 	bl	ff4c <radio_switch_complete_and_rx>
		err = isr_rx_scan_report(lll, devmatch_ok, irkmatch_ok, rl_idx,
    dbf2:	2300      	movs	r3, #0
    dbf4:	9302      	str	r3, [sp, #8]
    dbf6:	f8cd a004 	str.w	sl, [sp, #4]
    dbfa:	f8cd 9000 	str.w	r9, [sp]
    dbfe:	463b      	mov	r3, r7
    dc00:	4642      	mov	r2, r8
    dc02:	4631      	mov	r1, r6
    dc04:	4628      	mov	r0, r5
    dc06:	f7ff fd9d 	bl	d744 <isr_rx_scan_report>
		if (err) {
    dc0a:	4606      	mov	r6, r0
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d1df      	bne.n	dbd0 <isr_rx_pdu+0xbc>
		pdu_tx = (void *)radio_pkt_scratch_get();
    dc10:	f002 f8e4 	bl	fddc <radio_pkt_scratch_get>
    dc14:	4680      	mov	r8, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    dc16:	7803      	ldrb	r3, [r0, #0]
    dc18:	2203      	movs	r2, #3
    dc1a:	f362 0303 	bfi	r3, r2, #0, #4
    dc1e:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    dc20:	7823      	ldrb	r3, [r4, #0]
    dc22:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc26:	7802      	ldrb	r2, [r0, #0]
    dc28:	f363 12c7 	bfi	r2, r3, #7, #1
    dc2c:	7002      	strb	r2, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    dc2e:	230c      	movs	r3, #12
    dc30:	7043      	strb	r3, [r0, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    dc32:	4638      	mov	r0, r7
    dc34:	f7fe fcf0 	bl	c618 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    dc38:	7c2b      	ldrb	r3, [r5, #16]
    dc3a:	f013 0f40 	tst.w	r3, #64	; 0x40
    dc3e:	d00d      	beq.n	dc5c <isr_rx_pdu+0x148>
    dc40:	b160      	cbz	r0, dc5c <isr_rx_pdu+0x148>
			pdu_tx->tx_addr = 1;
    dc42:	f898 2000 	ldrb.w	r2, [r8]
    dc46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    dc4a:	4643      	mov	r3, r8
    dc4c:	f803 2b02 	strb.w	r2, [r3], #2
    dc50:	6802      	ldr	r2, [r0, #0]
    dc52:	f8c8 2002 	str.w	r2, [r8, #2]
    dc56:	8882      	ldrh	r2, [r0, #4]
    dc58:	809a      	strh	r2, [r3, #4]
    dc5a:	e00f      	b.n	dc7c <isr_rx_pdu+0x168>
			pdu_tx->tx_addr = lll->init_addr_type;
    dc5c:	792b      	ldrb	r3, [r5, #4]
    dc5e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dc62:	f898 2000 	ldrb.w	r2, [r8]
    dc66:	f363 1286 	bfi	r2, r3, #6, #1
    dc6a:	4643      	mov	r3, r8
    dc6c:	f803 2b02 	strb.w	r2, [r3], #2
    dc70:	f8d5 2012 	ldr.w	r2, [r5, #18]
    dc74:	f8c8 2002 	str.w	r2, [r8, #2]
    dc78:	8aea      	ldrh	r2, [r5, #22]
    dc7a:	809a      	strh	r2, [r3, #4]
    dc7c:	f8d4 3002 	ldr.w	r3, [r4, #2]
    dc80:	f8c8 3008 	str.w	r3, [r8, #8]
    dc84:	88e3      	ldrh	r3, [r4, #6]
    dc86:	f8a8 300c 	strh.w	r3, [r8, #12]
		radio_pkt_tx_set(pdu_tx);
    dc8a:	4640      	mov	r0, r8
    dc8c:	f002 f82c 	bl	fce8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    dc90:	f002 f858 	bl	fd44 <radio_is_ready>
    dc94:	b990      	cbnz	r0, dcbc <isr_rx_pdu+0x1a8>
		radio_tmr_end_capture();
    dc96:	f002 fb63 	bl	10360 <radio_tmr_end_capture>
		lll->state = 1U;
    dc9a:	792b      	ldrb	r3, [r5, #4]
    dc9c:	f043 0301 	orr.w	r3, r3, #1
    dca0:	712b      	strb	r3, [r5, #4]
		if (pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) {
    dca2:	7823      	ldrb	r3, [r4, #0]
    dca4:	f013 0f0f 	tst.w	r3, #15
    dca8:	d103      	bne.n	dcb2 <isr_rx_pdu+0x19e>
			lll->is_adv_ind = 1U;
    dcaa:	7c2b      	ldrb	r3, [r5, #16]
    dcac:	f043 0308 	orr.w	r3, r3, #8
    dcb0:	742b      	strb	r3, [r5, #16]
		radio_isr_set(isr_tx, lll);
    dcb2:	4629      	mov	r1, r5
    dcb4:	4825      	ldr	r0, [pc, #148]	; (dd4c <isr_rx_pdu+0x238>)
    dcb6:	f001 ff5f 	bl	fb78 <radio_isr_set>
		return 0;
    dcba:	e789      	b.n	dbd0 <isr_rx_pdu+0xbc>
		LL_ASSERT(!radio_is_ready());
    dcbc:	f240 5324 	movw	r3, #1316	; 0x524
    dcc0:	4a23      	ldr	r2, [pc, #140]	; (dd50 <isr_rx_pdu+0x23c>)
    dcc2:	4924      	ldr	r1, [pc, #144]	; (dd54 <isr_rx_pdu+0x240>)
    dcc4:	4824      	ldr	r0, [pc, #144]	; (dd58 <isr_rx_pdu+0x244>)
    dcc6:	f00b fd82 	bl	197ce <assert_print>
    dcca:	4040      	eors	r0, r0
    dccc:	f380 8811 	msr	BASEPRI, r0
    dcd0:	f04f 0003 	mov.w	r0, #3
    dcd4:	df02      	svc	2
    dcd6:	e7de      	b.n	dc96 <isr_rx_pdu+0x182>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    dcd8:	7863      	ldrb	r3, [r4, #1]
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    dcda:	2b0c      	cmp	r3, #12
    dcdc:	f47f af3c 	bne.w	db58 <isr_rx_pdu+0x44>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    dce0:	4623      	mov	r3, r4
    dce2:	f813 2b08 	ldrb.w	r2, [r3], #8
    dce6:	f10d 0117 	add.w	r1, sp, #23
    dcea:	9101      	str	r1, [sp, #4]
    dcec:	9700      	str	r7, [sp, #0]
    dcee:	09d2      	lsrs	r2, r2, #7
    dcf0:	2100      	movs	r1, #0
    dcf2:	4628      	mov	r0, r5
    dcf4:	f00e fbb3 	bl	1c45e <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    dcf8:	2800      	cmp	r0, #0
    dcfa:	f47f af50 	bne.w	db9e <isr_rx_pdu+0x8a>
    dcfe:	e72b      	b.n	db58 <isr_rx_pdu+0x44>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
    dd00:	7c2b      	ldrb	r3, [r5, #16]
    dd02:	f013 0f07 	tst.w	r3, #7
    dd06:	f43f af2d 	beq.w	db64 <isr_rx_pdu+0x50>
		   lll->phy && lll_scan_ext_tgta_check(lll, true, false,
    dd0a:	f10d 0317 	add.w	r3, sp, #23
    dd0e:	9301      	str	r3, [sp, #4]
    dd10:	9700      	str	r7, [sp, #0]
    dd12:	4623      	mov	r3, r4
    dd14:	2200      	movs	r2, #0
    dd16:	2101      	movs	r1, #1
    dd18:	4628      	mov	r0, r5
    dd1a:	f00e fc59 	bl	1c5d0 <lll_scan_ext_tgta_check>
    dd1e:	2800      	cmp	r0, #0
    dd20:	f47f af3d 	bne.w	db9e <isr_rx_pdu+0x8a>
    dd24:	e71e      	b.n	db64 <isr_rx_pdu+0x50>
		(memcmp(&sreq->scan_req.adv_addr[0],
    dd26:	2206      	movs	r2, #6
    dd28:	1ca1      	adds	r1, r4, #2
    dd2a:	3008      	adds	r0, #8
    dd2c:	f006 fe2e 	bl	1498c <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    dd30:	b908      	cbnz	r0, dd36 <isr_rx_pdu+0x222>
    dd32:	2301      	movs	r3, #1
    dd34:	e730      	b.n	db98 <isr_rx_pdu+0x84>
    dd36:	2300      	movs	r3, #0
    dd38:	e72e      	b.n	db98 <isr_rx_pdu+0x84>
				return 0;
    dd3a:	2600      	movs	r6, #0
    dd3c:	e748      	b.n	dbd0 <isr_rx_pdu+0xbc>
		return -EINVAL;
    dd3e:	f06f 0615 	mvn.w	r6, #21
    dd42:	e745      	b.n	dbd0 <isr_rx_pdu+0xbc>
	return -ECANCELED;
    dd44:	f06f 068b 	mvn.w	r6, #139	; 0x8b
    dd48:	e742      	b.n	dbd0 <isr_rx_pdu+0xbc>
    dd4a:	bf00      	nop
    dd4c:	0000d67d 	.word	0x0000d67d
    dd50:	0001f4f0 	.word	0x0001f4f0
    dd54:	0001f54c 	.word	0x0001f54c
    dd58:	0001e920 	.word	0x0001e920

0000dd5c <isr_rx>:
{
    dd5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd60:	b089      	sub	sp, #36	; 0x24
    dd62:	4605      	mov	r5, r0
	trx_done = radio_is_done();
    dd64:	f001 fff8 	bl	fd58 <radio_is_done>
	if (trx_done) {
    dd68:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    dd6c:	d119      	bne.n	dda2 <isr_rx+0x46>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
    dd6e:	2300      	movs	r3, #0
    dd70:	f88d 301d 	strb.w	r3, [sp, #29]
    dd74:	f88d 301f 	strb.w	r3, [sp, #31]
		devmatch_id = irkmatch_id = 0xFF;
    dd78:	23ff      	movs	r3, #255	; 0xff
    dd7a:	f88d 301c 	strb.w	r3, [sp, #28]
    dd7e:	f88d 301e 	strb.w	r3, [sp, #30]
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
    dd82:	4626      	mov	r6, r4
    dd84:	4627      	mov	r7, r4
			phy_flags_rx = 0U;
    dd86:	46a0      	mov	r8, r4
	lll_isr_status_reset();
    dd88:	f00e fb4c 	bl	1c424 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    dd8c:	b104      	cbz	r4, dd90 <isr_rx+0x34>
    dd8e:	bb16      	cbnz	r6, ddd6 <isr_rx+0x7a>
	radio_isr_set(isr_done, lll);
    dd90:	4629      	mov	r1, r5
    dd92:	484a      	ldr	r0, [pc, #296]	; (debc <isr_rx+0x160>)
    dd94:	f001 fef0 	bl	fb78 <radio_isr_set>
	radio_disable();
    dd98:	f001 ffb2 	bl	fd00 <radio_disable>
}
    dd9c:	b009      	add	sp, #36	; 0x24
    dd9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
    dda2:	f002 f811 	bl	fdc8 <radio_crc_is_valid>
    dda6:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    dda8:	f002 f974 	bl	10094 <radio_filter_has_match>
    ddac:	f88d 001f 	strb.w	r0, [sp, #31]
		devmatch_id = radio_filter_match_get();
    ddb0:	f002 f97a 	bl	100a8 <radio_filter_match_get>
    ddb4:	f88d 001e 	strb.w	r0, [sp, #30]
		irkmatch_ok = radio_ar_has_match();
    ddb8:	f002 fb32 	bl	10420 <radio_ar_has_match>
    ddbc:	f88d 001d 	strb.w	r0, [sp, #29]
		irkmatch_id = radio_ar_match_get();
    ddc0:	f002 fb18 	bl	103f4 <radio_ar_match_get>
    ddc4:	f88d 001c 	strb.w	r0, [sp, #28]
		rssi_ready = radio_rssi_is_ready();
    ddc8:	f002 f914 	bl	fff4 <radio_rssi_is_ready>
    ddcc:	b2c7      	uxtb	r7, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    ddce:	f00e fdc5 	bl	1c95c <radio_phy_flags_rx_get>
    ddd2:	4680      	mov	r8, r0
    ddd4:	e7d8      	b.n	dd88 <isr_rx+0x2c>
	node_rx = ull_pdu_rx_alloc_peek(1);
    ddd6:	2001      	movs	r0, #1
    ddd8:	f7fb fd82 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    dddc:	4604      	mov	r4, r0
    ddde:	2800      	cmp	r0, #0
    dde0:	d03d      	beq.n	de5e <isr_rx+0x102>
	pdu = (void *)node_rx->pdu;
    dde2:	f104 0620 	add.w	r6, r4, #32
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
    dde6:	f894 3020 	ldrb.w	r3, [r4, #32]
    ddea:	f003 030f 	and.w	r3, r3, #15
    ddee:	2b07      	cmp	r3, #7
    ddf0:	d043      	beq.n	de7a <isr_rx+0x11e>
		has_adva = true;
    ddf2:	f04f 0901 	mov.w	r9, #1
	rl_idx = devmatch_ok ?
    ddf6:	f89d 301f 	ldrb.w	r3, [sp, #31]
    ddfa:	2b00      	cmp	r3, #0
    ddfc:	d14c      	bne.n	de98 <isr_rx+0x13c>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    ddfe:	f89d 301d 	ldrb.w	r3, [sp, #29]
	rl_idx = devmatch_ok ?
    de02:	2b00      	cmp	r3, #0
    de04:	d151      	bne.n	deaa <isr_rx+0x14e>
    de06:	24ff      	movs	r4, #255	; 0xff
	if (has_adva) {
    de08:	f1b9 0f00 	cmp.w	r9, #0
    de0c:	d012      	beq.n	de34 <isr_rx+0xd8>
		allow = lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok,
    de0e:	4623      	mov	r3, r4
    de10:	f89d 201f 	ldrb.w	r2, [sp, #31]
    de14:	f89d 101d 	ldrb.w	r1, [sp, #29]
    de18:	4628      	mov	r0, r5
    de1a:	f00e fb9f 	bl	1c55c <lll_scan_isr_rx_check>
		} else if (allow || lll->is_sync) {
    de1e:	4603      	mov	r3, r0
    de20:	b918      	cbnz	r0, de2a <isr_rx+0xce>
    de22:	7c2a      	ldrb	r2, [r5, #16]
    de24:	f012 0f20 	tst.w	r2, #32
    de28:	d0b2      	beq.n	dd90 <isr_rx+0x34>
			devmatch_ok = allow ? 1U : 0U;
    de2a:	2b00      	cmp	r3, #0
    de2c:	d043      	beq.n	deb6 <isr_rx+0x15a>
    de2e:	2301      	movs	r3, #1
    de30:	f88d 301f 	strb.w	r3, [sp, #31]
	err = isr_rx_pdu(lll, pdu, devmatch_ok, devmatch_id, irkmatch_ok,
    de34:	f8cd 8010 	str.w	r8, [sp, #16]
    de38:	9703      	str	r7, [sp, #12]
    de3a:	9402      	str	r4, [sp, #8]
    de3c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    de40:	9301      	str	r3, [sp, #4]
    de42:	f89d 301d 	ldrb.w	r3, [sp, #29]
    de46:	9300      	str	r3, [sp, #0]
    de48:	f89d 301e 	ldrb.w	r3, [sp, #30]
    de4c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    de50:	4631      	mov	r1, r6
    de52:	4628      	mov	r0, r5
    de54:	f7ff fe5e 	bl	db14 <isr_rx_pdu>
	if (!err) {
    de58:	2800      	cmp	r0, #0
    de5a:	d199      	bne.n	dd90 <isr_rx+0x34>
    de5c:	e79e      	b.n	dd9c <isr_rx+0x40>
	LL_ASSERT(node_rx);
    de5e:	f240 23c6 	movw	r3, #710	; 0x2c6
    de62:	4a17      	ldr	r2, [pc, #92]	; (dec0 <isr_rx+0x164>)
    de64:	4917      	ldr	r1, [pc, #92]	; (dec4 <isr_rx+0x168>)
    de66:	4818      	ldr	r0, [pc, #96]	; (dec8 <isr_rx+0x16c>)
    de68:	f00b fcb1 	bl	197ce <assert_print>
    de6c:	4040      	eors	r0, r0
    de6e:	f380 8811 	msr	BASEPRI, r0
    de72:	f04f 0003 	mov.w	r0, #3
    de76:	df02      	svc	2
    de78:	e7b3      	b.n	dde2 <isr_rx+0x86>
		has_adva = lll_scan_aux_addr_match_get(lll, pdu,
    de7a:	ab07      	add	r3, sp, #28
    de7c:	9301      	str	r3, [sp, #4]
    de7e:	f10d 031d 	add.w	r3, sp, #29
    de82:	9300      	str	r3, [sp, #0]
    de84:	f10d 031e 	add.w	r3, sp, #30
    de88:	f10d 021f 	add.w	r2, sp, #31
    de8c:	4631      	mov	r1, r6
    de8e:	4628      	mov	r0, r5
    de90:	f00e fbe4 	bl	1c65c <lll_scan_aux_addr_match_get>
    de94:	4681      	mov	r9, r0
    de96:	e7ae      	b.n	ddf6 <isr_rx+0x9a>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    de98:	7928      	ldrb	r0, [r5, #4]
    de9a:	f89d 101e 	ldrb.w	r1, [sp, #30]
    de9e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    dea2:	f7fe fbe3 	bl	c66c <ull_filter_lll_rl_idx>
    dea6:	4604      	mov	r4, r0
    dea8:	e7ae      	b.n	de08 <isr_rx+0xac>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    deaa:	f89d 001c 	ldrb.w	r0, [sp, #28]
    deae:	f7fe fc43 	bl	c738 <ull_filter_lll_rl_irk_idx>
    deb2:	4604      	mov	r4, r0
    deb4:	e7a8      	b.n	de08 <isr_rx+0xac>
			devmatch_ok = allow ? 1U : 0U;
    deb6:	2300      	movs	r3, #0
    deb8:	e7ba      	b.n	de30 <isr_rx+0xd4>
    deba:	bf00      	nop
    debc:	0001c44f 	.word	0x0001c44f
    dec0:	0001f4f0 	.word	0x0001f4f0
    dec4:	0001f53c 	.word	0x0001f53c
    dec8:	0001e920 	.word	0x0001e920

0000decc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
    decc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dece:	b085      	sub	sp, #20
    ded0:	4605      	mov	r5, r0
	uint32_t hcto;
	uint32_t aa;

	DEBUG_RADIO_START_O(1);

	lll_aux = p->param;
    ded2:	68c4      	ldr	r4, [r0, #12]
	lll = ull_scan_aux_lll_parent_get(lll_aux, &is_lll_scan);
    ded4:	f10d 010f 	add.w	r1, sp, #15
    ded8:	4620      	mov	r0, r4
    deda:	f7fc fd4d 	bl	a978 <ull_scan_aux_lll_parent_get>
    dede:	4606      	mov	r6, r0

	/* Check if this aux scan is for periodic advertising train */
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && !is_lll_scan) {
    dee0:	f89d 300f 	ldrb.w	r3, [sp, #15]
    dee4:	2b00      	cmp	r3, #0
    dee6:	d052      	beq.n	df8e <prepare_cb+0xc2>
		return 0;
	}
#endif /* CONFIG_BT_CENTRAL */

	/* Initialize scanning state */
	lll_aux->state = 0U;
    dee8:	7923      	ldrb	r3, [r4, #4]
    deea:	f36f 1386 	bfc	r3, #6, #1
    deee:	7123      	strb	r3, [r4, #4]

	/* Reset Tx/rx count */
	trx_cnt = 0U;
    def0:	2700      	movs	r7, #0
    def2:	4b67      	ldr	r3, [pc, #412]	; (e090 <prepare_cb+0x1c4>)
    def4:	801f      	strh	r7, [r3, #0]

	/* Start setting up Radio h/w */
	radio_reset();
    def6:	f001 fe5d 	bl	fbb4 <radio_reset>

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
    defa:	4638      	mov	r0, r7
    defc:	f001 fe86 	bl	fc0c <radio_tx_power_set>
#endif

	radio_phy_set(lll_aux->phy, PHY_FLAGS_S8);
    df00:	7960      	ldrb	r0, [r4, #5]
    df02:	2101      	movs	r1, #1
    df04:	f000 0007 	and.w	r0, r0, #7
    df08:	f001 fe6c 	bl	fbe4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
			    RADIO_PKT_CONF_PHY(lll_aux->phy));
    df0c:	7962      	ldrb	r2, [r4, #5]
    df0e:	f002 0207 	and.w	r2, r2, #7
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
    df12:	0052      	lsls	r2, r2, #1
    df14:	21ff      	movs	r1, #255	; 0xff
    df16:	2008      	movs	r0, #8
    df18:	f001 feae 	bl	fc78 <radio_pkt_configure>

	node_rx = ull_pdu_rx_alloc_peek(1);
    df1c:	2001      	movs	r0, #1
    df1e:	f7fb fcdf 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    df22:	4607      	mov	r7, r0
    df24:	2800      	cmp	r0, #0
    df26:	d072      	beq.n	e00e <prepare_cb+0x142>

	radio_pkt_rx_set(node_rx->pdu);
    df28:	f107 0020 	add.w	r0, r7, #32
    df2c:	f001 fed6 	bl	fcdc <radio_pkt_rx_set>

	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
    df30:	4b58      	ldr	r3, [pc, #352]	; (e094 <prepare_cb+0x1c8>)
    df32:	9302      	str	r3, [sp, #8]
	radio_aa_set((uint8_t *)&aa);
    df34:	a802      	add	r0, sp, #8
    df36:	f001 fe87 	bl	fc48 <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    df3a:	4957      	ldr	r1, [pc, #348]	; (e098 <prepare_cb+0x1cc>)
    df3c:	f240 605b 	movw	r0, #1627	; 0x65b
    df40:	f001 ff36 	bl	fdb0 <radio_crc_configure>
				PDU_AC_CRC_IV);

	lll_chan_set(lll_aux->chan);
    df44:	7920      	ldrb	r0, [r4, #4]
    df46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    df4a:	f7ff f877 	bl	d03c <lll_chan_set>

	radio_isr_set(isr_rx_ull_schedule, lll_aux);
    df4e:	4621      	mov	r1, r4
    df50:	4852      	ldr	r0, [pc, #328]	; (e09c <prepare_cb+0x1d0>)
    df52:	f001 fe11 	bl	fb78 <radio_isr_set>

	/* setup tIFS switching */
	radio_tmr_tifs_set(EVENT_IFS_US);
    df56:	2096      	movs	r0, #150	; 0x96
    df58:	f002 f8da 	bl	10110 <radio_tmr_tifs_set>
	/* TODO: for passive scanning use complete_and_disable */
	radio_switch_complete_and_tx(lll_aux->phy, 0, lll_aux->phy, 1);
    df5c:	7962      	ldrb	r2, [r4, #5]
    df5e:	f002 0007 	and.w	r0, r2, #7
    df62:	2301      	movs	r3, #1
    df64:	4602      	mov	r2, r0
    df66:	2100      	movs	r1, #0
    df68:	f002 f806 	bl	ff78 <radio_switch_complete_and_tx>

	/* TODO: skip filtering if AdvA was already found in previous PDU */

	if (0) {
#if defined(CONFIG_BT_CTLR_PRIVACY)
	} else if (ull_filter_lll_rl_enabled()) {
    df6c:	f7fe fd26 	bl	c9bc <ull_filter_lll_rl_enabled>
    df70:	2800      	cmp	r0, #0
    df72:	d15a      	bne.n	e02a <prepare_cb+0x15e>
				       filter->addr_type_bitmask,
				       (uint8_t *) filter->bdaddr);

		radio_ar_configure(count, irks, (lll_aux->phy << 2) | BIT(1));
#endif /* CONFIG_BT_CTLR_PRIVACY */
	} else if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) &&
    df74:	7933      	ldrb	r3, [r6, #4]
    df76:	f013 0f18 	tst.w	r3, #24
    df7a:	d00b      	beq.n	df94 <prepare_cb+0xc8>
		   lll->filter_policy) {
		/* Setup Radio Filter */
		struct lll_filter *fal = ull_filter_lll_get(true);
    df7c:	2001      	movs	r0, #1
    df7e:	f7fd ff31 	bl	bde4 <ull_filter_lll_get>

		radio_filter_configure(fal->enable_bitmask,
    df82:	1c82      	adds	r2, r0, #2
    df84:	7841      	ldrb	r1, [r0, #1]
    df86:	7800      	ldrb	r0, [r0, #0]
    df88:	f002 f83e 	bl	10008 <radio_filter_configure>
    df8c:	e002      	b.n	df94 <prepare_cb+0xc8>
		lll_sync_aux_prepare_cb((void *)lll, lll_aux);
    df8e:	4621      	mov	r1, r4
    df90:	f001 fb8a 	bl	f6a8 <lll_sync_aux_prepare_cb>
				       (uint8_t *)fal->bdaddr);
	}

sync_aux_prepare_done:
	/* Calculate event timings, coarse and fine */
	ticks_at_event = p->ticks_at_expire;
    df94:	682e      	ldr	r6, [r5, #0]
	ull = HDR_LLL2ULL(lll_aux);
    df96:	6827      	ldr	r7, [r4, #0]
	ticks_at_event += lll_event_offset_get(ull);
    df98:	4638      	mov	r0, r7
    df9a:	f00e fa13 	bl	1c3c4 <lll_event_offset_get>
    df9e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
    dfa0:	686a      	ldr	r2, [r5, #4]
    dfa2:	f106 0109 	add.w	r1, r6, #9
    dfa6:	2000      	movs	r0, #0
    dfa8:	f002 f8be 	bl	10128 <radio_tmr_start>

	hcto = remainder_us + lll_aux->window_size_us;
    dfac:	68a5      	ldr	r5, [r4, #8]
    dfae:	4405      	add	r5, r0
	hcto += radio_rx_ready_delay_get(lll_aux->phy, PHY_FLAGS_S8);
    dfb0:	7960      	ldrb	r0, [r4, #5]
    dfb2:	2101      	movs	r1, #1
    dfb4:	f000 0007 	and.w	r0, r0, #7
    dfb8:	f00e fcc8 	bl	1c94c <radio_rx_ready_delay_get>
    dfbc:	4405      	add	r5, r0
	hcto += addr_us_get(lll_aux->phy);
    dfbe:	7960      	ldrb	r0, [r4, #5]
    dfc0:	f000 0007 	and.w	r0, r0, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
    dfc4:	2802      	cmp	r0, #2
    dfc6:	d04c      	beq.n	e062 <prepare_cb+0x196>
    dfc8:	2804      	cmp	r0, #4
    dfca:	d14c      	bne.n	e066 <prepare_cb+0x19a>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
    dfcc:	f44f 73bc 	mov.w	r3, #376	; 0x178
    dfd0:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll_aux->phy, PHY_FLAGS_S8);
    dfd2:	2101      	movs	r1, #1
    dfd4:	f00e fcbc 	bl	1c950 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    dfd8:	4428      	add	r0, r5
    dfda:	f002 f97d 	bl	102d8 <radio_tmr_hcto_configure>

	/* capture end of Rx-ed PDU, extended scan to schedule auxiliary
	 * channel chaining, create connection or to create periodic sync.
	 */
	radio_tmr_end_capture();
    dfde:	f002 f9bf 	bl	10360 <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
    dfe2:	f001 ffef 	bl	ffc4 <radio_rssi_measure>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_AUX_BASE +
				   ull_scan_aux_lll_handle_get(lll_aux)),
    dfe6:	4620      	mov	r0, r4
    dfe8:	f7fc fcbc 	bl	a964 <ull_scan_aux_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_AUX_BASE +
    dfec:	1cc1      	adds	r1, r0, #3
    dfee:	4632      	mov	r2, r6
    dff0:	b2c9      	uxtb	r1, r1
    dff2:	4638      	mov	r0, r7
    dff4:	f00e f9f4 	bl	1c3e0 <lll_preempt_calc>
    dff8:	2800      	cmp	r0, #0
    dffa:	d036      	beq.n	e06a <prepare_cb+0x19e>
				   ticks_at_event)) {
		radio_isr_set(isr_done, lll_aux);
    dffc:	4621      	mov	r1, r4
    dffe:	4828      	ldr	r0, [pc, #160]	; (e0a0 <prepare_cb+0x1d4>)
    e000:	f001 fdba 	bl	fb78 <radio_isr_set>
		radio_disable();
    e004:	f001 fe7c 	bl	fd00 <radio_disable>
	}

	DEBUG_RADIO_START_O(1);

	return 0;
}
    e008:	2000      	movs	r0, #0
    e00a:	b005      	add	sp, #20
    e00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(node_rx);
    e00e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
    e012:	4a24      	ldr	r2, [pc, #144]	; (e0a4 <prepare_cb+0x1d8>)
    e014:	4924      	ldr	r1, [pc, #144]	; (e0a8 <prepare_cb+0x1dc>)
    e016:	4825      	ldr	r0, [pc, #148]	; (e0ac <prepare_cb+0x1e0>)
    e018:	f00b fbd9 	bl	197ce <assert_print>
    e01c:	4040      	eors	r0, r0
    e01e:	f380 8811 	msr	BASEPRI, r0
    e022:	f04f 0003 	mov.w	r0, #3
    e026:	df02      	svc	2
    e028:	e77e      	b.n	df28 <prepare_cb+0x5c>
			ull_filter_lll_get((lll->filter_policy &
    e02a:	7930      	ldrb	r0, [r6, #4]
    e02c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e030:	f7fd fed8 	bl	bde4 <ull_filter_lll_get>
    e034:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    e036:	f10d 0007 	add.w	r0, sp, #7
    e03a:	f7fe fb0d 	bl	c658 <ull_filter_lll_irks_get>
    e03e:	4607      	mov	r7, r0
		radio_filter_configure(filter->enable_bitmask,
    e040:	1cb2      	adds	r2, r6, #2
    e042:	7871      	ldrb	r1, [r6, #1]
    e044:	7830      	ldrb	r0, [r6, #0]
    e046:	f001 ffdf 	bl	10008 <radio_filter_configure>
		radio_ar_configure(count, irks, (lll_aux->phy << 2) | BIT(1));
    e04a:	7962      	ldrb	r2, [r4, #5]
    e04c:	f002 0207 	and.w	r2, r2, #7
    e050:	0092      	lsls	r2, r2, #2
    e052:	f042 0202 	orr.w	r2, r2, #2
    e056:	4639      	mov	r1, r7
    e058:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e05c:	f002 f98e 	bl	1037c <radio_ar_configure>
    e060:	e798      	b.n	df94 <prepare_cb+0xc8>
		return 24;
    e062:	2318      	movs	r3, #24
    e064:	e7b4      	b.n	dfd0 <prepare_cb+0x104>
	switch (phy) {
    e066:	2328      	movs	r3, #40	; 0x28
    e068:	e7b2      	b.n	dfd0 <prepare_cb+0x104>
		ret = lll_prepare_done(lll_aux);
    e06a:	4620      	mov	r0, r4
    e06c:	f00e f9a8 	bl	1c3c0 <lll_prepare_done>
		LL_ASSERT(!ret);
    e070:	2800      	cmp	r0, #0
    e072:	d0c9      	beq.n	e008 <prepare_cb+0x13c>
    e074:	f44f 7315 	mov.w	r3, #596	; 0x254
    e078:	4a0a      	ldr	r2, [pc, #40]	; (e0a4 <prepare_cb+0x1d8>)
    e07a:	490d      	ldr	r1, [pc, #52]	; (e0b0 <prepare_cb+0x1e4>)
    e07c:	480b      	ldr	r0, [pc, #44]	; (e0ac <prepare_cb+0x1e0>)
    e07e:	f00b fba6 	bl	197ce <assert_print>
    e082:	4040      	eors	r0, r0
    e084:	f380 8811 	msr	BASEPRI, r0
    e088:	f04f 0003 	mov.w	r0, #3
    e08c:	df02      	svc	2
    e08e:	e7bb      	b.n	e008 <prepare_cb+0x13c>
    e090:	2000928e 	.word	0x2000928e
    e094:	8e89bed6 	.word	0x8e89bed6
    e098:	00555555 	.word	0x00555555
    e09c:	0001c703 	.word	0x0001c703
    e0a0:	0000e0b5 	.word	0x0000e0b5
    e0a4:	0001f574 	.word	0x0001f574
    e0a8:	0001f53c 	.word	0x0001f53c
    e0ac:	0001e920 	.word	0x0001e920
    e0b0:	0001eccc 	.word	0x0001eccc

0000e0b4 <isr_done>:

	lll_done(param);
}

static void isr_done(void *param)
{
    e0b4:	b570      	push	{r4, r5, r6, lr}
    e0b6:	b082      	sub	sp, #8
    e0b8:	4604      	mov	r4, r0
	struct lll_sync *lll;
	uint8_t is_lll_scan;

	lll_isr_status_reset();
    e0ba:	f00e f9b3 	bl	1c424 <lll_isr_status_reset>

	if (param) {
    e0be:	b14c      	cbz	r4, e0d4 <isr_done+0x20>
		lll = ull_scan_aux_lll_parent_get(param, &is_lll_scan);
    e0c0:	f10d 0107 	add.w	r1, sp, #7
    e0c4:	4620      	mov	r0, r4
    e0c6:	f7fc fc57 	bl	a978 <ull_scan_aux_lll_parent_get>
	} else {
		lll = NULL;
	}

	/* Check if this aux scan is for periodic advertising train */
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && lll && !is_lll_scan) {
    e0ca:	4606      	mov	r6, r0
    e0cc:	b110      	cbz	r0, e0d4 <isr_done+0x20>
    e0ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    e0d2:	b13b      	cbz	r3, e0e4 <isr_done+0x30>
		node_rx->hdr.rx_ftr.aux_failed = 1U;

		ull_rx_put(node_rx->hdr.link, node_rx);
		ull_rx_sched();

	} else if (!trx_cnt) {
    e0d4:	4b1d      	ldr	r3, [pc, #116]	; (e14c <isr_done+0x98>)
    e0d6:	881b      	ldrh	r3, [r3, #0]
    e0d8:	b323      	cbz	r3, e124 <isr_done+0x70>

		e = ull_done_extra_type_set(EVENT_DONE_EXTRA_TYPE_SCAN_AUX);
		LL_ASSERT(e);
	}

	lll_isr_cleanup(param);
    e0da:	4620      	mov	r0, r4
    e0dc:	f7fe ffe8 	bl	d0b0 <lll_isr_cleanup>
}
    e0e0:	b002      	add	sp, #8
    e0e2:	bd70      	pop	{r4, r5, r6, pc}
		node_rx = ull_pdu_rx_alloc();
    e0e4:	f7fb fc1c 	bl	9920 <ull_pdu_rx_alloc>
		LL_ASSERT(node_rx);
    e0e8:	4605      	mov	r5, r0
    e0ea:	b168      	cbz	r0, e108 <isr_done+0x54>
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_RELEASE;
    e0ec:	230a      	movs	r3, #10
    e0ee:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.rx_ftr.param = lll;
    e0f0:	60ae      	str	r6, [r5, #8]
		node_rx->hdr.rx_ftr.aux_failed = 1U;
    e0f2:	7eeb      	ldrb	r3, [r5, #27]
    e0f4:	f043 0310 	orr.w	r3, r3, #16
    e0f8:	76eb      	strb	r3, [r5, #27]
		ull_rx_put(node_rx->hdr.link, node_rx);
    e0fa:	4629      	mov	r1, r5
    e0fc:	6828      	ldr	r0, [r5, #0]
    e0fe:	f7fb fc2b 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    e102:	f7fb fc31 	bl	9968 <ull_rx_sched>
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC) && lll && !is_lll_scan) {
    e106:	e7e8      	b.n	e0da <isr_done+0x26>
		LL_ASSERT(node_rx);
    e108:	f240 23a3 	movw	r3, #675	; 0x2a3
    e10c:	4a10      	ldr	r2, [pc, #64]	; (e150 <isr_done+0x9c>)
    e10e:	4911      	ldr	r1, [pc, #68]	; (e154 <isr_done+0xa0>)
    e110:	4811      	ldr	r0, [pc, #68]	; (e158 <isr_done+0xa4>)
    e112:	f00b fb5c 	bl	197ce <assert_print>
    e116:	4040      	eors	r0, r0
    e118:	f380 8811 	msr	BASEPRI, r0
    e11c:	f04f 0003 	mov.w	r0, #3
    e120:	df02      	svc	2
    e122:	e7e3      	b.n	e0ec <isr_done+0x38>
		e = ull_done_extra_type_set(EVENT_DONE_EXTRA_TYPE_SCAN_AUX);
    e124:	2002      	movs	r0, #2
    e126:	f00d fcde 	bl	1bae6 <ull_done_extra_type_set>
		LL_ASSERT(e);
    e12a:	2800      	cmp	r0, #0
    e12c:	d1d5      	bne.n	e0da <isr_done+0x26>
    e12e:	f240 23b1 	movw	r3, #689	; 0x2b1
    e132:	4a07      	ldr	r2, [pc, #28]	; (e150 <isr_done+0x9c>)
    e134:	4909      	ldr	r1, [pc, #36]	; (e15c <isr_done+0xa8>)
    e136:	4808      	ldr	r0, [pc, #32]	; (e158 <isr_done+0xa4>)
    e138:	f00b fb49 	bl	197ce <assert_print>
    e13c:	4040      	eors	r0, r0
    e13e:	f380 8811 	msr	BASEPRI, r0
    e142:	f04f 0003 	mov.w	r0, #3
    e146:	df02      	svc	2
    e148:	e7c7      	b.n	e0da <isr_done+0x26>
    e14a:	bf00      	nop
    e14c:	2000928e 	.word	0x2000928e
    e150:	0001f574 	.word	0x0001f574
    e154:	0001f53c 	.word	0x0001f53c
    e158:	0001e920 	.word	0x0001e920
    e15c:	0001f5c4 	.word	0x0001f5c4

0000e160 <isr_tx>:
	return -EINVAL;
}

static void isr_tx(struct lll_scan_aux *lll_aux, void *pdu_rx,
		   void (*isr)(void *), void *param)
{
    e160:	b5f0      	push	{r4, r5, r6, r7, lr}
    e162:	b083      	sub	sp, #12
    e164:	4607      	mov	r7, r0
    e166:	460c      	mov	r4, r1
    e168:	4615      	mov	r5, r2
    e16a:	461e      	mov	r6, r3
	uint32_t hcto;

	/* Clear radio tx status and events */
	lll_isr_tx_status_reset();
    e16c:	f00e f94c 	bl	1c408 <lll_isr_tx_status_reset>

	/* complete the reception and disable radio  */
	radio_switch_complete_and_disable();
    e170:	f001 ff18 	bl	ffa4 <radio_switch_complete_and_disable>

	radio_pkt_rx_set(pdu_rx);
    e174:	4620      	mov	r0, r4
    e176:	f001 fdb1 	bl	fcdc <radio_pkt_rx_set>

	/* assert if radio packet ptr is not set and radio started rx */
	LL_ASSERT(!radio_is_ready());
    e17a:	f001 fde3 	bl	fd44 <radio_is_ready>
    e17e:	bb38      	cbnz	r0, e1d0 <isr_tx+0x70>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	if (ull_filter_lll_rl_enabled()) {
    e180:	f7fe fc1c 	bl	c9bc <ull_filter_lll_rl_enabled>
    e184:	bb90      	cbnz	r0, e1ec <isr_tx+0x8c>
		radio_ar_configure(count, irks, (lll_aux->phy << 2) | BIT(1));
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	/* +/- 2us active clock jitter, +1 us hcto compensation */
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US +
    e186:	f00e fbeb 	bl	1c960 <radio_tmr_tifs_base_get>
    e18a:	f100 04a3 	add.w	r4, r0, #163	; 0xa3
	       (EVENT_CLOCK_JITTER_US << 1U) + RANGE_DELAY_US + 1U;
	hcto += radio_rx_chain_delay_get(lll_aux->phy, PHY_FLAGS_S8);
    e18e:	7978      	ldrb	r0, [r7, #5]
    e190:	2101      	movs	r1, #1
    e192:	f000 0007 	and.w	r0, r0, #7
    e196:	f00e fbdb 	bl	1c950 <radio_rx_chain_delay_get>
    e19a:	4404      	add	r4, r0
	hcto += addr_us_get(lll_aux->phy);
    e19c:	7978      	ldrb	r0, [r7, #5]
    e19e:	f000 0007 	and.w	r0, r0, #7
    e1a2:	2802      	cmp	r0, #2
    e1a4:	d032      	beq.n	e20c <isr_tx+0xac>
    e1a6:	2804      	cmp	r0, #4
    e1a8:	d132      	bne.n	e210 <isr_tx+0xb0>
		return 376;
    e1aa:	f44f 73bc 	mov.w	r3, #376	; 0x178
    e1ae:	441c      	add	r4, r3
	hcto -= radio_tx_chain_delay_get(lll_aux->phy, PHY_FLAGS_S8);
    e1b0:	2101      	movs	r1, #1
    e1b2:	f00e fbc9 	bl	1c948 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    e1b6:	1a20      	subs	r0, r4, r0
    e1b8:	f002 f88e 	bl	102d8 <radio_tmr_hcto_configure>

	/* capture end of Rx-ed PDU, extended scan to schedule auxiliary
	 * channel chaining.
	 */
	radio_tmr_end_capture();
    e1bc:	f002 f8d0 	bl	10360 <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
    e1c0:	f001 ff00 	bl	ffc4 <radio_rssi_measure>
				 radio_tx_chain_delay_get(lll_aux->phy,
							  PHY_FLAGS_S8) -
				 HAL_RADIO_GPIO_LNA_OFFSET);
#endif /* HAL_RADIO_GPIO_HAVE_LNA_PIN */

	radio_isr_set(isr, param);
    e1c4:	4631      	mov	r1, r6
    e1c6:	4628      	mov	r0, r5
    e1c8:	f001 fcd6 	bl	fb78 <radio_isr_set>
		/* NOTE: as scratch packet is used to receive, it is safe to
		 * generate profile event using rx nodes.
		 */
		lll_prof_send();
	}
}
    e1cc:	b003      	add	sp, #12
    e1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LL_ASSERT(!radio_is_ready());
    e1d0:	f240 532f 	movw	r3, #1327	; 0x52f
    e1d4:	4a0f      	ldr	r2, [pc, #60]	; (e214 <isr_tx+0xb4>)
    e1d6:	4910      	ldr	r1, [pc, #64]	; (e218 <isr_tx+0xb8>)
    e1d8:	4810      	ldr	r0, [pc, #64]	; (e21c <isr_tx+0xbc>)
    e1da:	f00b faf8 	bl	197ce <assert_print>
    e1de:	4040      	eors	r0, r0
    e1e0:	f380 8811 	msr	BASEPRI, r0
    e1e4:	f04f 0003 	mov.w	r0, #3
    e1e8:	df02      	svc	2
    e1ea:	e7c9      	b.n	e180 <isr_tx+0x20>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    e1ec:	f10d 0007 	add.w	r0, sp, #7
    e1f0:	f7fe fa32 	bl	c658 <ull_filter_lll_irks_get>
    e1f4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, (lll_aux->phy << 2) | BIT(1));
    e1f6:	797a      	ldrb	r2, [r7, #5]
    e1f8:	f002 0207 	and.w	r2, r2, #7
    e1fc:	0092      	lsls	r2, r2, #2
    e1fe:	f042 0202 	orr.w	r2, r2, #2
    e202:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e206:	f002 f8b9 	bl	1037c <radio_ar_configure>
    e20a:	e7bc      	b.n	e186 <isr_tx+0x26>
		return 24;
    e20c:	2318      	movs	r3, #24
    e20e:	e7ce      	b.n	e1ae <isr_tx+0x4e>
	switch (phy) {
    e210:	2328      	movs	r3, #40	; 0x28
    e212:	e7cc      	b.n	e1ae <isr_tx+0x4e>
    e214:	0001f574 	.word	0x0001f574
    e218:	0001f54c 	.word	0x0001f54c
    e21c:	0001e920 	.word	0x0001e920

0000e220 <isr_tx_scan_req_lll_schedule>:

	isr_tx(param, node_rx->pdu, isr_rx_ull_schedule, param);
}

static void isr_tx_scan_req_lll_schedule(void *param)
{
    e220:	b570      	push	{r4, r5, r6, lr}
    e222:	4604      	mov	r4, r0
	struct node_rx_pdu *node_rx_adv = param;
	struct node_rx_pdu *node_rx;
	struct lll_scan *lll;

	lll = node_rx_adv->hdr.rx_ftr.param;
    e224:	6885      	ldr	r5, [r0, #8]

	node_rx = ull_pdu_rx_alloc_peek(1);
    e226:	2001      	movs	r0, #1
    e228:	f7fb fb5a 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    e22c:	4606      	mov	r6, r0
    e22e:	b138      	cbz	r0, e240 <isr_tx_scan_req_lll_schedule+0x20>

	isr_tx(lll->lll_aux, node_rx->pdu, isr_rx_lll_schedule, param);
    e230:	4623      	mov	r3, r4
    e232:	4a0a      	ldr	r2, [pc, #40]	; (e25c <isr_tx_scan_req_lll_schedule+0x3c>)
    e234:	f106 0120 	add.w	r1, r6, #32
    e238:	68a8      	ldr	r0, [r5, #8]
    e23a:	f7ff ff91 	bl	e160 <isr_tx>
}
    e23e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_rx);
    e240:	f240 5376 	movw	r3, #1398	; 0x576
    e244:	4a06      	ldr	r2, [pc, #24]	; (e260 <isr_tx_scan_req_lll_schedule+0x40>)
    e246:	4907      	ldr	r1, [pc, #28]	; (e264 <isr_tx_scan_req_lll_schedule+0x44>)
    e248:	4807      	ldr	r0, [pc, #28]	; (e268 <isr_tx_scan_req_lll_schedule+0x48>)
    e24a:	f00b fac0 	bl	197ce <assert_print>
    e24e:	4040      	eors	r0, r0
    e250:	f380 8811 	msr	BASEPRI, r0
    e254:	f04f 0003 	mov.w	r0, #3
    e258:	df02      	svc	2
    e25a:	e7e9      	b.n	e230 <isr_tx_scan_req_lll_schedule+0x10>
    e25c:	0001c71b 	.word	0x0001c71b
    e260:	0001f574 	.word	0x0001f574
    e264:	0001f53c 	.word	0x0001f53c
    e268:	0001e920 	.word	0x0001e920

0000e26c <isr_tx_scan_req_ull_schedule>:
{
    e26c:	b538      	push	{r3, r4, r5, lr}
    e26e:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
    e270:	2001      	movs	r0, #1
    e272:	f7fb fb35 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    e276:	4605      	mov	r5, r0
    e278:	b138      	cbz	r0, e28a <isr_tx_scan_req_ull_schedule+0x1e>
	isr_tx(param, node_rx->pdu, isr_rx_ull_schedule, param);
    e27a:	4623      	mov	r3, r4
    e27c:	4a0a      	ldr	r2, [pc, #40]	; (e2a8 <isr_tx_scan_req_ull_schedule+0x3c>)
    e27e:	f105 0120 	add.w	r1, r5, #32
    e282:	4620      	mov	r0, r4
    e284:	f7ff ff6c 	bl	e160 <isr_tx>
}
    e288:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_rx);
    e28a:	f44f 63ad 	mov.w	r3, #1384	; 0x568
    e28e:	4a07      	ldr	r2, [pc, #28]	; (e2ac <isr_tx_scan_req_ull_schedule+0x40>)
    e290:	4907      	ldr	r1, [pc, #28]	; (e2b0 <isr_tx_scan_req_ull_schedule+0x44>)
    e292:	4808      	ldr	r0, [pc, #32]	; (e2b4 <isr_tx_scan_req_ull_schedule+0x48>)
    e294:	f00b fa9b 	bl	197ce <assert_print>
    e298:	4040      	eors	r0, r0
    e29a:	f380 8811 	msr	BASEPRI, r0
    e29e:	f04f 0003 	mov.w	r0, #3
    e2a2:	df02      	svc	2
    e2a4:	e7e9      	b.n	e27a <isr_tx_scan_req_ull_schedule+0xe>
    e2a6:	bf00      	nop
    e2a8:	0001c703 	.word	0x0001c703
    e2ac:	0001f574 	.word	0x0001f574
    e2b0:	0001f53c 	.word	0x0001f53c
    e2b4:	0001e920 	.word	0x0001e920

0000e2b8 <abort_cb>:
{
    e2b8:	b510      	push	{r4, lr}
    e2ba:	460c      	mov	r4, r1
	if (!prepare_param) {
    e2bc:	b138      	cbz	r0, e2ce <abort_cb+0x16>
	err = lll_hfclock_off();
    e2be:	f7ff f801 	bl	d2c4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
    e2c2:	2800      	cmp	r0, #0
    e2c4:	db09      	blt.n	e2da <abort_cb+0x22>
	lll_done(param);
    e2c6:	4620      	mov	r0, r4
    e2c8:	f7fe fe56 	bl	cf78 <lll_done>
}
    e2cc:	bd10      	pop	{r4, pc}
		radio_isr_set(isr_done, param);
    e2ce:	480a      	ldr	r0, [pc, #40]	; (e2f8 <abort_cb+0x40>)
    e2d0:	f001 fc52 	bl	fb78 <radio_isr_set>
		radio_disable();
    e2d4:	f001 fd14 	bl	fd00 <radio_disable>
		return;
    e2d8:	e7f8      	b.n	e2cc <abort_cb+0x14>
	LL_ASSERT(err >= 0);
    e2da:	f240 2389 	movw	r3, #649	; 0x289
    e2de:	4a07      	ldr	r2, [pc, #28]	; (e2fc <abort_cb+0x44>)
    e2e0:	4907      	ldr	r1, [pc, #28]	; (e300 <abort_cb+0x48>)
    e2e2:	4808      	ldr	r0, [pc, #32]	; (e304 <abort_cb+0x4c>)
    e2e4:	f00b fa73 	bl	197ce <assert_print>
    e2e8:	4040      	eors	r0, r0
    e2ea:	f380 8811 	msr	BASEPRI, r0
    e2ee:	f04f 0003 	mov.w	r0, #3
    e2f2:	df02      	svc	2
    e2f4:	e7e7      	b.n	e2c6 <abort_cb+0xe>
    e2f6:	bf00      	nop
    e2f8:	0000e0b5 	.word	0x0000e0b5
    e2fc:	0001f574 	.word	0x0001f574
    e300:	0001f4a0 	.word	0x0001f4a0
    e304:	0001e920 	.word	0x0001e920

0000e308 <is_abort_cb>:
{
    e308:	b510      	push	{r4, lr}
    e30a:	4604      	mov	r4, r0
	LL_ASSERT(next != curr);
    e30c:	4288      	cmp	r0, r1
    e30e:	d005      	beq.n	e31c <is_abort_cb+0x14>
	lll = ull_scan_lll_is_valid_get(next);
    e310:	4620      	mov	r0, r4
    e312:	f00d fc81 	bl	1bc18 <ull_scan_lll_is_valid_get>
	if (lll) {
    e316:	b178      	cbz	r0, e338 <is_abort_cb+0x30>
		return 0;
    e318:	2000      	movs	r0, #0
}
    e31a:	bd10      	pop	{r4, pc}
	LL_ASSERT(next != curr);
    e31c:	f44f 731a 	mov.w	r3, #616	; 0x268
    e320:	4a07      	ldr	r2, [pc, #28]	; (e340 <is_abort_cb+0x38>)
    e322:	4908      	ldr	r1, [pc, #32]	; (e344 <is_abort_cb+0x3c>)
    e324:	4808      	ldr	r0, [pc, #32]	; (e348 <is_abort_cb+0x40>)
    e326:	f00b fa52 	bl	197ce <assert_print>
    e32a:	4040      	eors	r0, r0
    e32c:	f380 8811 	msr	BASEPRI, r0
    e330:	f04f 0003 	mov.w	r0, #3
    e334:	df02      	svc	2
    e336:	e7eb      	b.n	e310 <is_abort_cb+0x8>
	return -ECANCELED;
    e338:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    e33c:	e7ed      	b.n	e31a <is_abort_cb+0x12>
    e33e:	bf00      	nop
    e340:	0001f574 	.word	0x0001f574
    e344:	0001f5c8 	.word	0x0001f5c8
    e348:	0001e920 	.word	0x0001e920

0000e34c <lll_scan_aux_isr_aux_setup>:
{
    e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e350:	b083      	sub	sp, #12
    e352:	4606      	mov	r6, r0
	lll_isr_status_reset();
    e354:	f00e f866 	bl	1c424 <lll_isr_status_reset>
	aux_ptr = ftr->aux_ptr;
    e358:	f8d6 800c 	ldr.w	r8, [r6, #12]
	phy_aux = BIT(aux_ptr->phy);
    e35c:	f898 5002 	ldrb.w	r5, [r8, #2]
    e360:	096b      	lsrs	r3, r5, #5
    e362:	2501      	movs	r5, #1
    e364:	409d      	lsls	r5, r3
    e366:	b2ed      	uxtb	r5, r5
	ftr->aux_phy = phy_aux;
    e368:	7335      	strb	r5, [r6, #12]
	lll = ftr->param;
    e36a:	f8d6 a008 	ldr.w	sl, [r6, #8]
	if (aux_ptr->offs_units) {
    e36e:	f898 3000 	ldrb.w	r3, [r8]
    e372:	f998 2000 	ldrsb.w	r2, [r8]
    e376:	2a00      	cmp	r2, #0
    e378:	db6c      	blt.n	e454 <lll_scan_aux_isr_aux_setup+0x108>
		window_size_us = OFFS_UNIT_30_US;
    e37a:	f04f 091e 	mov.w	r9, #30
	aux_offset_us = (uint32_t)aux_ptr->offs * window_size_us;
    e37e:	f898 7001 	ldrb.w	r7, [r8, #1]
    e382:	f898 4002 	ldrb.w	r4, [r8, #2]
    e386:	f004 041f 	and.w	r4, r4, #31
    e38a:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
    e38e:	fb09 f707 	mul.w	r7, r9, r7
	if (aux_ptr->ca) {
    e392:	f013 0f40 	tst.w	r3, #64	; 0x40
    e396:	d060      	beq.n	e45a <lll_scan_aux_isr_aux_setup+0x10e>
		window_widening_us = SCA_DRIFT_50_PPM_US(aux_offset_us);
    e398:	2432      	movs	r4, #50	; 0x32
    e39a:	fb07 f404 	mul.w	r4, r7, r4
    e39e:	4b49      	ldr	r3, [pc, #292]	; (e4c4 <lll_scan_aux_isr_aux_setup+0x178>)
    e3a0:	fba3 3404 	umull	r3, r4, r3, r4
    e3a4:	0ca4      	lsrs	r4, r4, #18
	trx_cnt = 0U;
    e3a6:	f04f 0b00 	mov.w	fp, #0
    e3aa:	4b47      	ldr	r3, [pc, #284]	; (e4c8 <lll_scan_aux_isr_aux_setup+0x17c>)
    e3ac:	f8a3 b000 	strh.w	fp, [r3]
	radio_phy_set(phy_aux, PHY_FLAGS_S8);
    e3b0:	2101      	movs	r1, #1
    e3b2:	4628      	mov	r0, r5
    e3b4:	f001 fc16 	bl	fbe4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
    e3b8:	006a      	lsls	r2, r5, #1
    e3ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    e3be:	21ff      	movs	r1, #255	; 0xff
    e3c0:	2008      	movs	r0, #8
    e3c2:	f001 fc59 	bl	fc78 <radio_pkt_configure>
	lll_chan_set(aux_ptr->chan_idx);
    e3c6:	f898 0000 	ldrb.w	r0, [r8]
    e3ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e3ce:	f7fe fe35 	bl	d03c <lll_chan_set>
	radio_pkt_rx_set(node_rx->pdu);
    e3d2:	f106 0020 	add.w	r0, r6, #32
    e3d6:	f001 fc81 	bl	fcdc <radio_pkt_rx_set>
	radio_isr_set(isr_rx_lll_schedule, node_rx);
    e3da:	4631      	mov	r1, r6
    e3dc:	483b      	ldr	r0, [pc, #236]	; (e4cc <lll_scan_aux_isr_aux_setup+0x180>)
    e3de:	f001 fbcb 	bl	fb78 <radio_isr_set>
	radio_tmr_tifs_set(EVENT_IFS_US);
    e3e2:	2096      	movs	r0, #150	; 0x96
    e3e4:	f001 fe94 	bl	10110 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_aux, 0, phy_aux, 1);
    e3e8:	2301      	movs	r3, #1
    e3ea:	462a      	mov	r2, r5
    e3ec:	4659      	mov	r1, fp
    e3ee:	4628      	mov	r0, r5
    e3f0:	f001 fdc2 	bl	ff78 <radio_switch_complete_and_tx>
	} else if (ull_filter_lll_rl_enabled()) {
    e3f4:	f7fe fae2 	bl	c9bc <ull_filter_lll_rl_enabled>
    e3f8:	bbc0      	cbnz	r0, e46c <lll_scan_aux_isr_aux_setup+0x120>
	} else if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
    e3fa:	f89a 3004 	ldrb.w	r3, [sl, #4]
    e3fe:	f013 0f18 	tst.w	r3, #24
    e402:	d151      	bne.n	e4a8 <lll_scan_aux_isr_aux_setup+0x15c>
	aux_start_us = ftr->radio_end_us + aux_offset_us;
    e404:	6971      	ldr	r1, [r6, #20]
    e406:	eb01 0807 	add.w	r8, r1, r7
	aux_start_us -= lll_radio_rx_ready_delay_get(phy_aux, PHY_FLAGS_S8);
    e40a:	2101      	movs	r1, #1
    e40c:	4628      	mov	r0, r5
    e40e:	f00d fff7 	bl	1c400 <lll_radio_rx_ready_delay_get>
    e412:	eba8 0100 	sub.w	r1, r8, r0
	aux_start_us -= window_widening_us;
    e416:	1b09      	subs	r1, r1, r4
	radio_tmr_start_us(0, aux_start_us);
    e418:	3910      	subs	r1, #16
    e41a:	2000      	movs	r0, #0
    e41c:	f001 ff02 	bl	10224 <radio_tmr_start_us>
	hcto = ftr->radio_end_us + aux_offset_us;
    e420:	6973      	ldr	r3, [r6, #20]
    e422:	441f      	add	r7, r3
	hcto += window_size_us;
    e424:	44b9      	add	r9, r7
	hcto += window_widening_us;
    e426:	444c      	add	r4, r9
	hcto += EVENT_JITTER_US;
    e428:	3410      	adds	r4, #16
	hcto += radio_rx_chain_delay_get(phy_aux, PHY_FLAGS_S8);
    e42a:	2101      	movs	r1, #1
    e42c:	4628      	mov	r0, r5
    e42e:	f00e fa8f 	bl	1c950 <radio_rx_chain_delay_get>
    e432:	4404      	add	r4, r0
    e434:	2d02      	cmp	r5, #2
    e436:	d040      	beq.n	e4ba <lll_scan_aux_isr_aux_setup+0x16e>
    e438:	2d04      	cmp	r5, #4
    e43a:	d140      	bne.n	e4be <lll_scan_aux_isr_aux_setup+0x172>
		return 376;
    e43c:	f44f 70bc 	mov.w	r0, #376	; 0x178
	radio_tmr_hcto_configure(hcto);
    e440:	4420      	add	r0, r4
    e442:	f001 ff49 	bl	102d8 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    e446:	f001 ff8b 	bl	10360 <radio_tmr_end_capture>
	radio_rssi_measure();
    e44a:	f001 fdbb 	bl	ffc4 <radio_rssi_measure>
}
    e44e:	b003      	add	sp, #12
    e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		window_size_us = OFFS_UNIT_300_US;
    e454:	f44f 7996 	mov.w	r9, #300	; 0x12c
    e458:	e791      	b.n	e37e <lll_scan_aux_isr_aux_setup+0x32>
		window_widening_us = SCA_DRIFT_500_PPM_US(aux_offset_us);
    e45a:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
    e45e:	fb07 f404 	mul.w	r4, r7, r4
    e462:	4b18      	ldr	r3, [pc, #96]	; (e4c4 <lll_scan_aux_isr_aux_setup+0x178>)
    e464:	fba3 3404 	umull	r3, r4, r3, r4
    e468:	0ca4      	lsrs	r4, r4, #18
    e46a:	e79c      	b.n	e3a6 <lll_scan_aux_isr_aux_setup+0x5a>
			ull_filter_lll_get((lll->filter_policy &
    e46c:	f89a 0004 	ldrb.w	r0, [sl, #4]
    e470:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    e474:	f7fd fcb6 	bl	bde4 <ull_filter_lll_get>
    e478:	4680      	mov	r8, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
    e47a:	f10d 0007 	add.w	r0, sp, #7
    e47e:	f7fe f8eb 	bl	c658 <ull_filter_lll_irks_get>
    e482:	4682      	mov	sl, r0
		radio_filter_configure(fal->enable_bitmask,
    e484:	f108 0202 	add.w	r2, r8, #2
    e488:	f898 1001 	ldrb.w	r1, [r8, #1]
    e48c:	f898 0000 	ldrb.w	r0, [r8]
    e490:	f001 fdba 	bl	10008 <radio_filter_configure>
		radio_ar_configure(count, irks, (phy_aux << 2) | BIT(1));
    e494:	00aa      	lsls	r2, r5, #2
    e496:	b2d2      	uxtb	r2, r2
    e498:	f042 0202 	orr.w	r2, r2, #2
    e49c:	4651      	mov	r1, sl
    e49e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    e4a2:	f001 ff6b 	bl	1037c <radio_ar_configure>
    e4a6:	e7ad      	b.n	e404 <lll_scan_aux_isr_aux_setup+0xb8>
		const struct lll_filter *fal = ull_filter_lll_get(true);
    e4a8:	2001      	movs	r0, #1
    e4aa:	f7fd fc9b 	bl	bde4 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
    e4ae:	1c82      	adds	r2, r0, #2
    e4b0:	7841      	ldrb	r1, [r0, #1]
    e4b2:	7800      	ldrb	r0, [r0, #0]
    e4b4:	f001 fda8 	bl	10008 <radio_filter_configure>
    e4b8:	e7a4      	b.n	e404 <lll_scan_aux_isr_aux_setup+0xb8>
		return 24;
    e4ba:	2018      	movs	r0, #24
    e4bc:	e7c0      	b.n	e440 <lll_scan_aux_isr_aux_setup+0xf4>
	switch (phy) {
    e4be:	2028      	movs	r0, #40	; 0x28
    e4c0:	e7be      	b.n	e440 <lll_scan_aux_isr_aux_setup+0xf4>
    e4c2:	bf00      	nop
    e4c4:	431bde83 	.word	0x431bde83
    e4c8:	2000928e 	.word	0x2000928e
    e4cc:	0001c71b 	.word	0x0001c71b

0000e4d0 <lll_scan_aux_prepare>:
{
    e4d0:	b510      	push	{r4, lr}
    e4d2:	b082      	sub	sp, #8
    e4d4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
    e4d6:	f7fe fedf 	bl	d298 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
    e4da:	2800      	cmp	r0, #0
    e4dc:	db0c      	blt.n	e4f8 <lll_scan_aux_prepare+0x28>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
    e4de:	9400      	str	r4, [sp, #0]
    e4e0:	2300      	movs	r3, #0
    e4e2:	4a12      	ldr	r2, [pc, #72]	; (e52c <lll_scan_aux_prepare+0x5c>)
    e4e4:	4912      	ldr	r1, [pc, #72]	; (e530 <lll_scan_aux_prepare+0x60>)
    e4e6:	4813      	ldr	r0, [pc, #76]	; (e534 <lll_scan_aux_prepare+0x64>)
    e4e8:	f00d fb58 	bl	1bb9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    e4ec:	b110      	cbz	r0, e4f4 <lll_scan_aux_prepare+0x24>
    e4ee:	f110 0f77 	cmn.w	r0, #119	; 0x77
    e4f2:	d10e      	bne.n	e512 <lll_scan_aux_prepare+0x42>
}
    e4f4:	b002      	add	sp, #8
    e4f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
    e4f8:	2370      	movs	r3, #112	; 0x70
    e4fa:	4a0f      	ldr	r2, [pc, #60]	; (e538 <lll_scan_aux_prepare+0x68>)
    e4fc:	490f      	ldr	r1, [pc, #60]	; (e53c <lll_scan_aux_prepare+0x6c>)
    e4fe:	4810      	ldr	r0, [pc, #64]	; (e540 <lll_scan_aux_prepare+0x70>)
    e500:	f00b f965 	bl	197ce <assert_print>
    e504:	4040      	eors	r0, r0
    e506:	f380 8811 	msr	BASEPRI, r0
    e50a:	f04f 0003 	mov.w	r0, #3
    e50e:	df02      	svc	2
    e510:	e7e5      	b.n	e4de <lll_scan_aux_prepare+0xe>
	LL_ASSERT(!err || err == -EINPROGRESS);
    e512:	2373      	movs	r3, #115	; 0x73
    e514:	4a08      	ldr	r2, [pc, #32]	; (e538 <lll_scan_aux_prepare+0x68>)
    e516:	490b      	ldr	r1, [pc, #44]	; (e544 <lll_scan_aux_prepare+0x74>)
    e518:	4809      	ldr	r0, [pc, #36]	; (e540 <lll_scan_aux_prepare+0x70>)
    e51a:	f00b f958 	bl	197ce <assert_print>
    e51e:	4040      	eors	r0, r0
    e520:	f380 8811 	msr	BASEPRI, r0
    e524:	f04f 0003 	mov.w	r0, #3
    e528:	df02      	svc	2
}
    e52a:	e7e3      	b.n	e4f4 <lll_scan_aux_prepare+0x24>
    e52c:	0000decd 	.word	0x0000decd
    e530:	0000e2b9 	.word	0x0000e2b9
    e534:	0000e309 	.word	0x0000e309
    e538:	0001f574 	.word	0x0001f574
    e53c:	0001f4a0 	.word	0x0001f4a0
    e540:	0001e920 	.word	0x0001e920
    e544:	0001f560 	.word	0x0001f560

0000e548 <lll_scan_aux_setup>:
{
    e548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e54c:	b085      	sub	sp, #20
    e54e:	4604      	mov	r4, r0
    e550:	460e      	mov	r6, r1
    e552:	9200      	str	r2, [sp, #0]
    e554:	9301      	str	r3, [sp, #4]
	LL_ASSERT(pdu->type == PDU_ADV_TYPE_EXT_IND);
    e556:	7803      	ldrb	r3, [r0, #0]
    e558:	f003 030f 	and.w	r3, r3, #15
    e55c:	2b07      	cmp	r3, #7
    e55e:	d119      	bne.n	e594 <lll_scan_aux_setup+0x4c>
	if (!pdu->len || !pri_com_hdr->ext_hdr_len) {
    e560:	7860      	ldrb	r0, [r4, #1]
    e562:	2800      	cmp	r0, #0
    e564:	f000 80b8 	beq.w	e6d8 <lll_scan_aux_setup+0x190>
    e568:	78a3      	ldrb	r3, [r4, #2]
    e56a:	f013 033f 	ands.w	r3, r3, #63	; 0x3f
    e56e:	f000 80b2 	beq.w	e6d6 <lll_scan_aux_setup+0x18e>
	pri_dptr = pri_hdr->data;
    e572:	1d27      	adds	r7, r4, #4
	if (pri_hdr->adv_addr) {
    e574:	78e3      	ldrb	r3, [r4, #3]
    e576:	f013 0f01 	tst.w	r3, #1
    e57a:	d001      	beq.n	e580 <lll_scan_aux_setup+0x38>
		pri_dptr += BDADDR_SIZE;
    e57c:	f104 070a 	add.w	r7, r4, #10
	if (pri_hdr->tgt_addr) {
    e580:	f013 0f02 	tst.w	r3, #2
    e584:	d000      	beq.n	e588 <lll_scan_aux_setup+0x40>
		pri_dptr += BDADDR_SIZE;
    e586:	3706      	adds	r7, #6
	if (pri_hdr->cte_info) {
    e588:	f013 0f04 	tst.w	r3, #4
    e58c:	d00f      	beq.n	e5ae <lll_scan_aux_setup+0x66>
		cte_info = (void *)pri_dptr;
    e58e:	9702      	str	r7, [sp, #8]
		pri_dptr += sizeof(struct pdu_cte_info);
    e590:	3701      	adds	r7, #1
    e592:	e00e      	b.n	e5b2 <lll_scan_aux_setup+0x6a>
	LL_ASSERT(pdu->type == PDU_ADV_TYPE_EXT_IND);
    e594:	2387      	movs	r3, #135	; 0x87
    e596:	4a55      	ldr	r2, [pc, #340]	; (e6ec <lll_scan_aux_setup+0x1a4>)
    e598:	4955      	ldr	r1, [pc, #340]	; (e6f0 <lll_scan_aux_setup+0x1a8>)
    e59a:	4856      	ldr	r0, [pc, #344]	; (e6f4 <lll_scan_aux_setup+0x1ac>)
    e59c:	f00b f917 	bl	197ce <assert_print>
    e5a0:	4040      	eors	r0, r0
    e5a2:	f380 8811 	msr	BASEPRI, r0
    e5a6:	f04f 0003 	mov.w	r0, #3
    e5aa:	df02      	svc	2
    e5ac:	e7d8      	b.n	e560 <lll_scan_aux_setup+0x18>
		cte_info = NULL;
    e5ae:	2200      	movs	r2, #0
    e5b0:	9202      	str	r2, [sp, #8]
	if (pri_hdr->adi) {
    e5b2:	f013 0f08 	tst.w	r3, #8
    e5b6:	d000      	beq.n	e5ba <lll_scan_aux_setup+0x72>
		pri_dptr += sizeof(struct pdu_adv_adi);
    e5b8:	3702      	adds	r7, #2
	if (unlikely(!pri_hdr->aux_ptr || !aux_ptr->offs ||
    e5ba:	f013 0f10 	tst.w	r3, #16
    e5be:	f000 808e 	beq.w	e6de <lll_scan_aux_setup+0x196>
    e5c2:	f897 8001 	ldrb.w	r8, [r7, #1]
    e5c6:	78bb      	ldrb	r3, [r7, #2]
    e5c8:	f003 031f 	and.w	r3, r3, #31
    e5cc:	ea58 2803 	orrs.w	r8, r8, r3, lsl #8
    e5d0:	f000 8087 	beq.w	e6e2 <lll_scan_aux_setup+0x19a>
    e5d4:	78ba      	ldrb	r2, [r7, #2]
    e5d6:	0951      	lsrs	r1, r2, #5
    e5d8:	2a5f      	cmp	r2, #95	; 0x5f
    e5da:	f200 8084 	bhi.w	e6e6 <lll_scan_aux_setup+0x19e>
	if (aux_ptr->offs_units) {
    e5de:	783b      	ldrb	r3, [r7, #0]
    e5e0:	f997 2000 	ldrsb.w	r2, [r7]
    e5e4:	2a00      	cmp	r2, #0
    e5e6:	db39      	blt.n	e65c <lll_scan_aux_setup+0x114>
		window_size_us = OFFS_UNIT_30_US;
    e5e8:	221e      	movs	r2, #30
	aux_offset_us = (uint32_t)aux_ptr->offs * window_size_us;
    e5ea:	fb02 f808 	mul.w	r8, r2, r8
	if (aux_ptr->ca) {
    e5ee:	f013 0f40 	tst.w	r3, #64	; 0x40
    e5f2:	d036      	beq.n	e662 <lll_scan_aux_setup+0x11a>
		window_widening_us = SCA_DRIFT_50_PPM_US(aux_offset_us);
    e5f4:	2332      	movs	r3, #50	; 0x32
    e5f6:	fb03 f308 	mul.w	r3, r3, r8
    e5fa:	4a3f      	ldr	r2, [pc, #252]	; (e6f8 <lll_scan_aux_setup+0x1b0>)
    e5fc:	fba2 2303 	umull	r2, r3, r2, r3
    e600:	ea4f 4a93 	mov.w	sl, r3, lsr #18
	phy = BIT(aux_ptr->phy);
    e604:	2301      	movs	r3, #1
    e606:	408b      	lsls	r3, r1
    e608:	b2db      	uxtb	r3, r3
    e60a:	9303      	str	r3, [sp, #12]
	overhead_us = PDU_AC_US(pdu->len, pdu_phy, pdu_phy_flags_rx);
    e60c:	f006 0903 	and.w	r9, r6, #3
    e610:	f109 0906 	add.w	r9, r9, #6
    e614:	eb09 0500 	add.w	r5, r9, r0
    e618:	3503      	adds	r5, #3
    e61a:	00ed      	lsls	r5, r5, #3
    e61c:	f3c6 0b40 	ubfx	fp, r6, #1, #1
    e620:	fa25 f50b 	lsr.w	r5, r5, fp
	if (cte_info && radio_df_iq_samples_amount_get()) {
    e624:	9b02      	ldr	r3, [sp, #8]
    e626:	b143      	cbz	r3, e63a <lll_scan_aux_setup+0xf2>
    e628:	f001 fa0c 	bl	fa44 <radio_df_iq_samples_amount_get>
    e62c:	b128      	cbz	r0, e63a <lll_scan_aux_setup+0xf2>
		overhead_us += cte_info->time << 3;
    e62e:	9b02      	ldr	r3, [sp, #8]
    e630:	781b      	ldrb	r3, [r3, #0]
    e632:	f003 031f 	and.w	r3, r3, #31
    e636:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
	overhead_us += radio_rx_chain_delay_get(pdu_phy, pdu_phy_flags_rx);
    e63a:	9900      	ldr	r1, [sp, #0]
    e63c:	4630      	mov	r0, r6
    e63e:	f00e f987 	bl	1c950 <radio_rx_chain_delay_get>
    e642:	4405      	add	r5, r0
	overhead_us += lll_radio_rx_ready_delay_get(phy, PHY_FLAGS_S8);
    e644:	2101      	movs	r1, #1
    e646:	9803      	ldr	r0, [sp, #12]
    e648:	f00d feda 	bl	1c400 <lll_radio_rx_ready_delay_get>
    e64c:	4405      	add	r5, r0
	overhead_us += window_widening_us;
    e64e:	4455      	add	r5, sl
	overhead_us += EVENT_OVERHEAD_END_US + EVENT_OVERHEAD_START_US;
    e650:	f205 2577 	addw	r5, r5, #631	; 0x277
	if (aux_offset_us > overhead_us) {
    e654:	45a8      	cmp	r8, r5
    e656:	d90e      	bls.n	e676 <lll_scan_aux_setup+0x12e>
		return 0;
    e658:	2000      	movs	r0, #0
    e65a:	e03d      	b.n	e6d8 <lll_scan_aux_setup+0x190>
		window_size_us = OFFS_UNIT_300_US;
    e65c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    e660:	e7c3      	b.n	e5ea <lll_scan_aux_setup+0xa2>
		window_widening_us = SCA_DRIFT_500_PPM_US(aux_offset_us);
    e662:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    e666:	fb02 f208 	mul.w	r2, r2, r8
    e66a:	4b23      	ldr	r3, [pc, #140]	; (e6f8 <lll_scan_aux_setup+0x1b0>)
    e66c:	fba3 3202 	umull	r3, r2, r3, r2
    e670:	ea4f 4a92 	mov.w	sl, r2, lsr #18
    e674:	e7c6      	b.n	e604 <lll_scan_aux_setup+0xbc>
	node_rx = ull_pdu_rx_alloc_peek(1);
    e676:	2001      	movs	r0, #1
    e678:	f7fb f932 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    e67c:	4605      	mov	r5, r0
    e67e:	b1e8      	cbz	r0, e6bc <lll_scan_aux_setup+0x174>
	ftr->param = param;
    e680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e682:	60ab      	str	r3, [r5, #8]
	ftr->aux_ptr = aux_ptr;
    e684:	60ef      	str	r7, [r5, #12]
	ftr->radio_end_us = radio_tmr_end_get() -
    e686:	f001 fe73 	bl	10370 <radio_tmr_end_get>
    e68a:	4607      	mov	r7, r0
			    radio_rx_chain_delay_get(pdu_phy,
    e68c:	9900      	ldr	r1, [sp, #0]
    e68e:	4630      	mov	r0, r6
    e690:	f00e f95e 	bl	1c950 <radio_rx_chain_delay_get>
	ftr->radio_end_us = radio_tmr_end_get() -
    e694:	1a3f      	subs	r7, r7, r0
			    PDU_AC_US(pdu->len, pdu_phy, pdu_phy_flags_rx);
    e696:	7863      	ldrb	r3, [r4, #1]
    e698:	4499      	add	r9, r3
    e69a:	f109 0903 	add.w	r9, r9, #3
    e69e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    e6a2:	fa29 fb0b 	lsr.w	fp, r9, fp
						     pdu_phy_flags_rx) -
    e6a6:	eba7 070b 	sub.w	r7, r7, fp
	ftr->radio_end_us = radio_tmr_end_get() -
    e6aa:	616f      	str	r7, [r5, #20]
	radio_isr_set(setup_cb, node_rx);
    e6ac:	4629      	mov	r1, r5
    e6ae:	9801      	ldr	r0, [sp, #4]
    e6b0:	f001 fa62 	bl	fb78 <radio_isr_set>
	radio_disable();
    e6b4:	f001 fb24 	bl	fd00 <radio_disable>
	return 1;
    e6b8:	2001      	movs	r0, #1
    e6ba:	e00d      	b.n	e6d8 <lll_scan_aux_setup+0x190>
	LL_ASSERT(node_rx);
    e6bc:	23e4      	movs	r3, #228	; 0xe4
    e6be:	4a0b      	ldr	r2, [pc, #44]	; (e6ec <lll_scan_aux_setup+0x1a4>)
    e6c0:	490e      	ldr	r1, [pc, #56]	; (e6fc <lll_scan_aux_setup+0x1b4>)
    e6c2:	480c      	ldr	r0, [pc, #48]	; (e6f4 <lll_scan_aux_setup+0x1ac>)
    e6c4:	f00b f883 	bl	197ce <assert_print>
    e6c8:	4040      	eors	r0, r0
    e6ca:	f380 8811 	msr	BASEPRI, r0
    e6ce:	f04f 0003 	mov.w	r0, #3
    e6d2:	df02      	svc	2
    e6d4:	e7d4      	b.n	e680 <lll_scan_aux_setup+0x138>
		return 0U;
    e6d6:	4618      	mov	r0, r3
}
    e6d8:	b005      	add	sp, #20
    e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
    e6de:	2000      	movs	r0, #0
    e6e0:	e7fa      	b.n	e6d8 <lll_scan_aux_setup+0x190>
    e6e2:	2000      	movs	r0, #0
    e6e4:	e7f8      	b.n	e6d8 <lll_scan_aux_setup+0x190>
    e6e6:	2000      	movs	r0, #0
    e6e8:	e7f6      	b.n	e6d8 <lll_scan_aux_setup+0x190>
    e6ea:	bf00      	nop
    e6ec:	0001f574 	.word	0x0001f574
    e6f0:	0001f5d8 	.word	0x0001f5d8
    e6f4:	0001e920 	.word	0x0001e920
    e6f8:	431bde83 	.word	0x431bde83
    e6fc:	0001f53c 	.word	0x0001f53c

0000e700 <isr_rx_pdu>:
{
    e700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e704:	b089      	sub	sp, #36	; 0x24
    e706:	460d      	mov	r5, r1
    e708:	4614      	mov	r4, r2
    e70a:	9303      	str	r3, [sp, #12]
    e70c:	f89d b048 	ldrb.w	fp, [sp, #72]	; 0x48
    e710:	f89d 904c 	ldrb.w	r9, [sp, #76]	; 0x4c
    e714:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
    e718:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
    e71c:	9304      	str	r3, [sp, #16]
    e71e:	f89d a060 	ldrb.w	sl, [sp, #96]	; 0x60
    e722:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
    e726:	9305      	str	r3, [sp, #20]
	bool dir_report = false;
    e728:	2300      	movs	r3, #0
    e72a:	f88d 301f 	strb.w	r3, [sp, #31]
	} else if (lll && lll->type &&
    e72e:	4606      	mov	r6, r0
    e730:	b190      	cbz	r0, e758 <isr_rx_pdu+0x58>
    e732:	7903      	ldrb	r3, [r0, #4]
    e734:	f013 0f20 	tst.w	r3, #32
    e738:	d00e      	beq.n	e758 <isr_rx_pdu+0x58>
    e73a:	b119      	cbz	r1, e744 <isr_rx_pdu+0x44>
		   ((lll_aux && !lll_aux->state) ||
    e73c:	790b      	ldrb	r3, [r1, #4]
    e73e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e742:	d005      	beq.n	e750 <isr_rx_pdu+0x50>
		    (lll->lll_aux && !lll->lll_aux->state)) &&
    e744:	68b3      	ldr	r3, [r6, #8]
		   ((lll_aux && !lll_aux->state) ||
    e746:	b13b      	cbz	r3, e758 <isr_rx_pdu+0x58>
		    (lll->lll_aux && !lll->lll_aux->state)) &&
    e748:	791b      	ldrb	r3, [r3, #4]
    e74a:	f013 0f40 	tst.w	r3, #64	; 0x40
    e74e:	d103      	bne.n	e758 <isr_rx_pdu+0x58>
		   (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN) &&
    e750:	9b03      	ldr	r3, [sp, #12]
    e752:	789b      	ldrb	r3, [r3, #2]
		    (lll->lll_aux && !lll->lll_aux->state)) &&
    e754:	09db      	lsrs	r3, r3, #7
    e756:	d172      	bne.n	e83e <isr_rx_pdu+0x13e>
	} else if ((lll_aux && lll_aux->is_chain_sched) ||
    e758:	b11d      	cbz	r5, e762 <isr_rx_pdu+0x62>
    e75a:	f995 3004 	ldrsb.w	r3, [r5, #4]
    e75e:	2b00      	cmp	r3, #0
    e760:	db13      	blt.n	e78a <isr_rx_pdu+0x8a>
		   (lll->lll_aux && lll->lll_aux->is_chain_sched) ||
    e762:	68b3      	ldr	r3, [r6, #8]
	} else if ((lll_aux && lll_aux->is_chain_sched) ||
    e764:	b11b      	cbz	r3, e76e <isr_rx_pdu+0x6e>
		   (lll->lll_aux && lll->lll_aux->is_chain_sched) ||
    e766:	f993 3004 	ldrsb.w	r3, [r3, #4]
    e76a:	2b00      	cmp	r3, #0
    e76c:	db0d      	blt.n	e78a <isr_rx_pdu+0x8a>
		   lll_scan_ext_tgta_check(lll, false, false, pdu, rl_idx,
    e76e:	f10d 031f 	add.w	r3, sp, #31
    e772:	9301      	str	r3, [sp, #4]
    e774:	f8cd a000 	str.w	sl, [sp]
    e778:	9b03      	ldr	r3, [sp, #12]
    e77a:	2200      	movs	r2, #0
    e77c:	4611      	mov	r1, r2
    e77e:	4630      	mov	r0, r6
    e780:	f00d ff26 	bl	1c5d0 <lll_scan_ext_tgta_check>
		   (lll->lll_aux && lll->lll_aux->is_chain_sched) ||
    e784:	2800      	cmp	r0, #0
    e786:	f000 813c 	beq.w	ea02 <isr_rx_pdu+0x302>
		if (lll_aux) {
    e78a:	2d00      	cmp	r5, #0
    e78c:	f000 8115 	beq.w	e9ba <isr_rx_pdu+0x2ba>
			ftr->param = lll_aux;
    e790:	60a5      	str	r5, [r4, #8]
			ftr->scan_rsp = lll_aux->state;
    e792:	792b      	ldrb	r3, [r5, #4]
    e794:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e798:	7ea2      	ldrb	r2, [r4, #26]
    e79a:	f363 1204 	bfi	r2, r3, #4, #1
    e79e:	76a2      	strb	r2, [r4, #26]
			lll_aux->is_chain_sched = 1U;
    e7a0:	792b      	ldrb	r3, [r5, #4]
    e7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e7a6:	712b      	strb	r3, [r5, #4]
		(void)ull_pdu_rx_alloc();
    e7a8:	f7fb f8ba 	bl	9920 <ull_pdu_rx_alloc>
		ftr->ticks_anchor = radio_tmr_start_get();
    e7ac:	f001 fd82 	bl	102b4 <radio_tmr_start_get>
    e7b0:	6120      	str	r0, [r4, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
    e7b2:	f001 fddd 	bl	10370 <radio_tmr_end_get>
    e7b6:	4607      	mov	r7, r0
				    radio_rx_chain_delay_get(phy_aux,
    e7b8:	4649      	mov	r1, r9
    e7ba:	4658      	mov	r0, fp
    e7bc:	f00e f8c8 	bl	1c950 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
    e7c0:	1a3f      	subs	r7, r7, r0
    e7c2:	6167      	str	r7, [r4, #20]
		ftr->phy_flags = phy_aux_flags_rx;
    e7c4:	7ea3      	ldrb	r3, [r4, #26]
    e7c6:	f369 0382 	bfi	r3, r9, #2, #1
    e7ca:	76a3      	strb	r3, [r4, #26]
		ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    e7cc:	9b05      	ldr	r3, [sp, #20]
    e7ce:	2b00      	cmp	r3, #0
    e7d0:	f040 8104 	bne.w	e9dc <isr_rx_pdu+0x2dc>
    e7d4:	207f      	movs	r0, #127	; 0x7f
    e7d6:	7620      	strb	r0, [r4, #24]
		ftr->scan_req = 0U;
    e7d8:	7ea3      	ldrb	r3, [r4, #26]
    e7da:	f36f 03c3 	bfc	r3, #3, #1
    e7de:	76a3      	strb	r3, [r4, #26]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    e7e0:	9b04      	ldr	r3, [sp, #16]
    e7e2:	b90b      	cbnz	r3, e7e8 <isr_rx_pdu+0xe8>
    e7e4:	f04f 0aff 	mov.w	sl, #255	; 0xff
    e7e8:	f884 a019 	strb.w	sl, [r4, #25]
		ftr->direct = dir_report;
    e7ec:	7ea3      	ldrb	r3, [r4, #26]
    e7ee:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e7f2:	f362 0341 	bfi	r3, r2, #1, #1
    e7f6:	76a3      	strb	r3, [r4, #26]
		ftr->devmatch = devmatch_ok;
    e7f8:	7ee3      	ldrb	r3, [r4, #27]
    e7fa:	f368 0341 	bfi	r3, r8, #1, #1
    e7fe:	76e3      	strb	r3, [r4, #27]
		ftr->aux_lll_sched = lll_scan_aux_setup(pdu, phy_aux,
    e800:	9600      	str	r6, [sp, #0]
    e802:	4b83      	ldr	r3, [pc, #524]	; (ea10 <isr_rx_pdu+0x310>)
    e804:	464a      	mov	r2, r9
    e806:	4659      	mov	r1, fp
    e808:	9803      	ldr	r0, [sp, #12]
    e80a:	f7ff fe9d 	bl	e548 <lll_scan_aux_setup>
    e80e:	7ee3      	ldrb	r3, [r4, #27]
    e810:	f360 03c3 	bfi	r3, r0, #3, #1
    e814:	76e3      	strb	r3, [r4, #27]
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_REPORT;
    e816:	2309      	movs	r3, #9
    e818:	7123      	strb	r3, [r4, #4]
		ull_rx_put(node_rx->hdr.link, node_rx);
    e81a:	4621      	mov	r1, r4
    e81c:	6820      	ldr	r0, [r4, #0]
    e81e:	f7fb f89b 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    e822:	f7fb f8a1 	bl	9968 <ull_rx_sched>
		if (ftr->aux_lll_sched) {
    e826:	7ee3      	ldrb	r3, [r4, #27]
    e828:	f013 0f08 	tst.w	r3, #8
    e82c:	f000 80df 	beq.w	e9ee <isr_rx_pdu+0x2ee>
			if (!lll_aux) {
    e830:	2d00      	cmp	r5, #0
    e832:	f000 80d7 	beq.w	e9e4 <isr_rx_pdu+0x2e4>
			return 0;
    e836:	2000      	movs	r0, #0
}
    e838:	b009      	add	sp, #36	; 0x24
    e83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   lll_scan_ext_tgta_check(lll, false, false, pdu, rl_idx,
    e83e:	f10d 031f 	add.w	r3, sp, #31
    e842:	9301      	str	r3, [sp, #4]
    e844:	f8cd a000 	str.w	sl, [sp]
    e848:	9b03      	ldr	r3, [sp, #12]
    e84a:	2200      	movs	r2, #0
    e84c:	4611      	mov	r1, r2
    e84e:	4630      	mov	r0, r6
    e850:	f00d febe 	bl	1c5d0 <lll_scan_ext_tgta_check>
		   (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN) &&
    e854:	2800      	cmp	r0, #0
    e856:	f43f af7f 	beq.w	e758 <isr_rx_pdu+0x58>
		rx = ull_pdu_rx_alloc_peek(4);
    e85a:	2004      	movs	r0, #4
    e85c:	f7fb f840 	bl	98e0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    e860:	2800      	cmp	r0, #0
    e862:	f000 80cb 	beq.w	e9fc <isr_rx_pdu+0x2fc>
		radio_tmr_tifs_set(EVENT_IFS_US);
    e866:	2096      	movs	r0, #150	; 0x96
    e868:	f001 fc52 	bl	10110 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(phy_aux);
    e86c:	4658      	mov	r0, fp
    e86e:	f001 fb6d 	bl	ff4c <radio_switch_complete_and_rx>
		pdu_tx = (void *)radio_pkt_scratch_get();
    e872:	f001 fab3 	bl	fddc <radio_pkt_scratch_get>
    e876:	4607      	mov	r7, r0
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    e878:	7803      	ldrb	r3, [r0, #0]
    e87a:	2203      	movs	r2, #3
    e87c:	f362 0303 	bfi	r3, r2, #0, #4
    e880:	7003      	strb	r3, [r0, #0]
		pdu_tx->rx_addr = pdu->tx_addr;
    e882:	9b03      	ldr	r3, [sp, #12]
    e884:	781b      	ldrb	r3, [r3, #0]
    e886:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e88a:	7802      	ldrb	r2, [r0, #0]
    e88c:	f363 12c7 	bfi	r2, r3, #7, #1
    e890:	7002      	strb	r2, [r0, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    e892:	230c      	movs	r3, #12
    e894:	7043      	strb	r3, [r0, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    e896:	4650      	mov	r0, sl
    e898:	f7fd febe 	bl	c618 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    e89c:	7c33      	ldrb	r3, [r6, #16]
    e89e:	f013 0f40 	tst.w	r3, #64	; 0x40
    e8a2:	d00c      	beq.n	e8be <isr_rx_pdu+0x1be>
    e8a4:	b158      	cbz	r0, e8be <isr_rx_pdu+0x1be>
			pdu_tx->tx_addr = 1;
    e8a6:	783a      	ldrb	r2, [r7, #0]
    e8a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    e8ac:	463b      	mov	r3, r7
    e8ae:	f803 2b02 	strb.w	r2, [r3], #2
    e8b2:	6802      	ldr	r2, [r0, #0]
    e8b4:	f8c7 2002 	str.w	r2, [r7, #2]
    e8b8:	8882      	ldrh	r2, [r0, #4]
    e8ba:	809a      	strh	r2, [r3, #4]
    e8bc:	e00e      	b.n	e8dc <isr_rx_pdu+0x1dc>
			pdu_tx->tx_addr = lll->init_addr_type;
    e8be:	7933      	ldrb	r3, [r6, #4]
    e8c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8c4:	783a      	ldrb	r2, [r7, #0]
    e8c6:	f363 1286 	bfi	r2, r3, #6, #1
    e8ca:	463b      	mov	r3, r7
    e8cc:	f803 2b02 	strb.w	r2, [r3], #2
    e8d0:	f8d6 2012 	ldr.w	r2, [r6, #18]
    e8d4:	f8c7 2002 	str.w	r2, [r7, #2]
    e8d8:	8af2      	ldrh	r2, [r6, #22]
    e8da:	809a      	strh	r2, [r3, #4]
    e8dc:	9a03      	ldr	r2, [sp, #12]
    e8de:	6853      	ldr	r3, [r2, #4]
    e8e0:	60bb      	str	r3, [r7, #8]
    e8e2:	8913      	ldrh	r3, [r2, #8]
    e8e4:	81bb      	strh	r3, [r7, #12]
		radio_pkt_tx_set(pdu_tx);
    e8e6:	4638      	mov	r0, r7
    e8e8:	f001 f9fe 	bl	fce8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    e8ec:	f001 fa2a 	bl	fd44 <radio_is_ready>
    e8f0:	2800      	cmp	r0, #0
    e8f2:	d145      	bne.n	e980 <isr_rx_pdu+0x280>
		radio_tmr_end_capture();
    e8f4:	f001 fd34 	bl	10360 <radio_tmr_end_capture>
		(void)ull_pdu_rx_alloc();
    e8f8:	f7fb f812 	bl	9920 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_REPORT;
    e8fc:	2309      	movs	r3, #9
    e8fe:	7123      	strb	r3, [r4, #4]
		if (lll_aux) {
    e900:	2d00      	cmp	r5, #0
    e902:	d04b      	beq.n	e99c <isr_rx_pdu+0x29c>
			ftr->param = lll_aux;
    e904:	60a5      	str	r5, [r4, #8]
			radio_isr_set(isr_tx_scan_req_ull_schedule,
    e906:	4629      	mov	r1, r5
    e908:	4842      	ldr	r0, [pc, #264]	; (ea14 <isr_rx_pdu+0x314>)
    e90a:	f001 f935 	bl	fb78 <radio_isr_set>
			lll_aux->state = 1U;
    e90e:	792b      	ldrb	r3, [r5, #4]
    e910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e914:	712b      	strb	r3, [r5, #4]
		ftr->ticks_anchor = radio_tmr_start_get();
    e916:	f001 fccd 	bl	102b4 <radio_tmr_start_get>
    e91a:	6120      	str	r0, [r4, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
    e91c:	f001 fd28 	bl	10370 <radio_tmr_end_get>
    e920:	4605      	mov	r5, r0
				    radio_rx_chain_delay_get(phy_aux,
    e922:	4649      	mov	r1, r9
    e924:	4658      	mov	r0, fp
    e926:	f00e f813 	bl	1c950 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
    e92a:	1a2d      	subs	r5, r5, r0
    e92c:	6165      	str	r5, [r4, #20]
		ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    e92e:	9b05      	ldr	r3, [sp, #20]
    e930:	2b00      	cmp	r3, #0
    e932:	d13e      	bne.n	e9b2 <isr_rx_pdu+0x2b2>
    e934:	237f      	movs	r3, #127	; 0x7f
    e936:	7623      	strb	r3, [r4, #24]
		ftr->scan_req = 1U;
    e938:	7ea3      	ldrb	r3, [r4, #26]
    e93a:	f043 0308 	orr.w	r3, r3, #8
    e93e:	76a3      	strb	r3, [r4, #26]
		ftr->scan_rsp = 0U;
    e940:	b2db      	uxtb	r3, r3
    e942:	f36f 1304 	bfc	r3, #4, #1
    e946:	76a3      	strb	r3, [r4, #26]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    e948:	9b04      	ldr	r3, [sp, #16]
    e94a:	b90b      	cbnz	r3, e950 <isr_rx_pdu+0x250>
    e94c:	f04f 0aff 	mov.w	sl, #255	; 0xff
    e950:	f884 a019 	strb.w	sl, [r4, #25]
		ftr->direct = dir_report;
    e954:	7ea3      	ldrb	r3, [r4, #26]
    e956:	f89d 201f 	ldrb.w	r2, [sp, #31]
    e95a:	f362 0341 	bfi	r3, r2, #1, #1
    e95e:	76a3      	strb	r3, [r4, #26]
		ftr->devmatch = devmatch_ok;
    e960:	7ee3      	ldrb	r3, [r4, #27]
    e962:	f368 0341 	bfi	r3, r8, #1, #1
    e966:	76e3      	strb	r3, [r4, #27]
		ftr->aux_lll_sched = 0U;
    e968:	b2db      	uxtb	r3, r3
    e96a:	f36f 03c3 	bfc	r3, #3, #1
    e96e:	76e3      	strb	r3, [r4, #27]
		ull_rx_put(node_rx->hdr.link, node_rx);
    e970:	4621      	mov	r1, r4
    e972:	6820      	ldr	r0, [r4, #0]
    e974:	f7fa fff0 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    e978:	f7fa fff6 	bl	9968 <ull_rx_sched>
		return 0;
    e97c:	2000      	movs	r0, #0
    e97e:	e75b      	b.n	e838 <isr_rx_pdu+0x138>
		LL_ASSERT(!radio_is_ready());
    e980:	f240 4377 	movw	r3, #1143	; 0x477
    e984:	4a24      	ldr	r2, [pc, #144]	; (ea18 <isr_rx_pdu+0x318>)
    e986:	4925      	ldr	r1, [pc, #148]	; (ea1c <isr_rx_pdu+0x31c>)
    e988:	4825      	ldr	r0, [pc, #148]	; (ea20 <isr_rx_pdu+0x320>)
    e98a:	f00a ff20 	bl	197ce <assert_print>
    e98e:	4040      	eors	r0, r0
    e990:	f380 8811 	msr	BASEPRI, r0
    e994:	f04f 0003 	mov.w	r0, #3
    e998:	df02      	svc	2
    e99a:	e7ab      	b.n	e8f4 <isr_rx_pdu+0x1f4>
			ftr->param = lll;
    e99c:	60a6      	str	r6, [r4, #8]
			radio_isr_set(isr_tx_scan_req_lll_schedule,
    e99e:	4621      	mov	r1, r4
    e9a0:	4820      	ldr	r0, [pc, #128]	; (ea24 <isr_rx_pdu+0x324>)
    e9a2:	f001 f8e9 	bl	fb78 <radio_isr_set>
			lll->lll_aux->state = 1U;
    e9a6:	68b2      	ldr	r2, [r6, #8]
    e9a8:	7913      	ldrb	r3, [r2, #4]
    e9aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e9ae:	7113      	strb	r3, [r2, #4]
    e9b0:	e7b1      	b.n	e916 <isr_rx_pdu+0x216>
		ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    e9b2:	f001 fb11 	bl	ffd8 <radio_rssi_get>
    e9b6:	b2c3      	uxtb	r3, r0
    e9b8:	e7bd      	b.n	e936 <isr_rx_pdu+0x236>
		} else if (lll->lll_aux) {
    e9ba:	68b3      	ldr	r3, [r6, #8]
    e9bc:	b323      	cbz	r3, ea08 <isr_rx_pdu+0x308>
			ftr->param = lll;
    e9be:	60a6      	str	r6, [r4, #8]
			ftr->scan_rsp = lll->lll_aux->state;
    e9c0:	68b3      	ldr	r3, [r6, #8]
    e9c2:	791b      	ldrb	r3, [r3, #4]
    e9c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e9c8:	7ea2      	ldrb	r2, [r4, #26]
    e9ca:	f363 1204 	bfi	r2, r3, #4, #1
    e9ce:	76a2      	strb	r2, [r4, #26]
			lll->lll_aux->is_chain_sched = 1U;
    e9d0:	68b2      	ldr	r2, [r6, #8]
    e9d2:	7913      	ldrb	r3, [r2, #4]
    e9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    e9d8:	7113      	strb	r3, [r2, #4]
    e9da:	e6e5      	b.n	e7a8 <isr_rx_pdu+0xa8>
		ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    e9dc:	f001 fafc 	bl	ffd8 <radio_rssi_get>
    e9e0:	b2c0      	uxtb	r0, r0
    e9e2:	e6f8      	b.n	e7d6 <isr_rx_pdu+0xd6>
				lll->is_aux_sched = 1U;
    e9e4:	7c33      	ldrb	r3, [r6, #16]
    e9e6:	f043 0310 	orr.w	r3, r3, #16
    e9ea:	7433      	strb	r3, [r6, #16]
    e9ec:	e723      	b.n	e836 <isr_rx_pdu+0x136>
		trx_cnt++;
    e9ee:	4a0e      	ldr	r2, [pc, #56]	; (ea28 <isr_rx_pdu+0x328>)
    e9f0:	8813      	ldrh	r3, [r2, #0]
    e9f2:	3301      	adds	r3, #1
    e9f4:	8013      	strh	r3, [r2, #0]
		return -ECANCELED;
    e9f6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    e9fa:	e71d      	b.n	e838 <isr_rx_pdu+0x138>
			return -ENOBUFS;
    e9fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ea00:	e71a      	b.n	e838 <isr_rx_pdu+0x138>
	return -EINVAL;
    ea02:	f06f 0015 	mvn.w	r0, #21
    ea06:	e717      	b.n	e838 <isr_rx_pdu+0x138>
			return -ECHILD;
    ea08:	f06f 0009 	mvn.w	r0, #9
    ea0c:	e714      	b.n	e838 <isr_rx_pdu+0x138>
    ea0e:	bf00      	nop
    ea10:	0000e34d 	.word	0x0000e34d
    ea14:	0000e26d 	.word	0x0000e26d
    ea18:	0001f574 	.word	0x0001f574
    ea1c:	0001f54c 	.word	0x0001f54c
    ea20:	0001e920 	.word	0x0001e920
    ea24:	0000e221 	.word	0x0000e221
    ea28:	2000928e 	.word	0x2000928e

0000ea2c <isr_rx>:
{
    ea2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea30:	b08d      	sub	sp, #52	; 0x34
    ea32:	4604      	mov	r4, r0
    ea34:	460d      	mov	r5, r1
    ea36:	9209      	str	r2, [sp, #36]	; 0x24
	trx_done = radio_is_done();
    ea38:	f001 f98e 	bl	fd58 <radio_is_done>
	if (trx_done) {
    ea3c:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    ea40:	d117      	bne.n	ea72 <isr_rx+0x46>
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
    ea42:	2300      	movs	r3, #0
    ea44:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    ea48:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
		devmatch_id = irkmatch_id = 0xFF;
    ea4c:	23ff      	movs	r3, #255	; 0xff
    ea4e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ea52:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready =
    ea56:	46b2      	mov	sl, r6
    ea58:	46b0      	mov	r8, r6
			phy_aux_flags_rx = 0U;
    ea5a:	4637      	mov	r7, r6
	lll_isr_rx_status_reset();
    ea5c:	f00d fcda 	bl	1c414 <lll_isr_rx_status_reset>
	if (!trx_done || !crc_ok) {
    ea60:	2e00      	cmp	r6, #0
    ea62:	f000 808b 	beq.w	eb7c <isr_rx+0x150>
    ea66:	f1ba 0f00 	cmp.w	sl, #0
    ea6a:	d11e      	bne.n	eaaa <isr_rx+0x7e>
		err = -EINVAL;
    ea6c:	f06f 0315 	mvn.w	r3, #21
    ea70:	e086      	b.n	eb80 <isr_rx+0x154>
		crc_ok = radio_crc_is_valid();
    ea72:	f001 f9a9 	bl	fdc8 <radio_crc_is_valid>
    ea76:	fa5f fa80 	uxtb.w	sl, r0
		devmatch_ok = radio_filter_has_match();
    ea7a:	f001 fb0b 	bl	10094 <radio_filter_has_match>
    ea7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
		devmatch_id = radio_filter_match_get();
    ea82:	f001 fb11 	bl	100a8 <radio_filter_match_get>
    ea86:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
		irkmatch_ok = radio_ar_has_match();
    ea8a:	f001 fcc9 	bl	10420 <radio_ar_has_match>
    ea8e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
		irkmatch_id = radio_ar_match_get();
    ea92:	f001 fcaf 	bl	103f4 <radio_ar_match_get>
    ea96:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
		rssi_ready = radio_rssi_is_ready();
    ea9a:	f001 faab 	bl	fff4 <radio_rssi_is_ready>
    ea9e:	fa5f f880 	uxtb.w	r8, r0
		phy_aux_flags_rx = radio_phy_flags_rx_get();
    eaa2:	f00d ff5b 	bl	1c95c <radio_phy_flags_rx_get>
    eaa6:	4607      	mov	r7, r0
    eaa8:	e7d8      	b.n	ea5c <isr_rx+0x30>
	node_rx = ull_pdu_rx_alloc_peek(3);
    eaaa:	2003      	movs	r0, #3
    eaac:	f7fa ff18 	bl	98e0 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    eab0:	4681      	mov	r9, r0
    eab2:	2800      	cmp	r0, #0
    eab4:	d06e      	beq.n	eb94 <isr_rx+0x168>
	pdu = (void *)node_rx->pdu;
    eab6:	f100 0a20 	add.w	sl, r0, #32
	if ((pdu->type != PDU_ADV_TYPE_EXT_IND) || !pdu->len) {
    eaba:	f890 3020 	ldrb.w	r3, [r0, #32]
    eabe:	f003 030f 	and.w	r3, r3, #15
    eac2:	2b07      	cmp	r3, #7
    eac4:	d169      	bne.n	eb9a <isr_rx+0x16e>
    eac6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    eaca:	b913      	cbnz	r3, ead2 <isr_rx+0xa6>
		err = -EINVAL;
    eacc:	f06f 0315 	mvn.w	r3, #21
    ead0:	e056      	b.n	eb80 <isr_rx+0x154>
	has_adva = lll_scan_aux_addr_match_get(lll, pdu, &devmatch_ok,
    ead2:	ab0b      	add	r3, sp, #44	; 0x2c
    ead4:	9301      	str	r3, [sp, #4]
    ead6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    eada:	9300      	str	r3, [sp, #0]
    eadc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    eae0:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    eae4:	4651      	mov	r1, sl
    eae6:	4620      	mov	r0, r4
    eae8:	f00d fdb8 	bl	1c65c <lll_scan_aux_addr_match_get>
    eaec:	4606      	mov	r6, r0
	rl_idx = devmatch_ok ?
    eaee:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    eaf2:	bb93      	cbnz	r3, eb5a <isr_rx+0x12e>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    eaf4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
	rl_idx = devmatch_ok ?
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d137      	bne.n	eb6c <isr_rx+0x140>
    eafc:	f04f 0bff 	mov.w	fp, #255	; 0xff
	if (has_adva) {
    eb00:	b18e      	cbz	r6, eb26 <isr_rx+0xfa>
		allow = lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok,
    eb02:	465b      	mov	r3, fp
    eb04:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
    eb08:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    eb0c:	4620      	mov	r0, r4
    eb0e:	f00d fd25 	bl	1c55c <lll_scan_isr_rx_check>
		} else if (allow || lll->is_sync) {
    eb12:	4603      	mov	r3, r0
    eb14:	b918      	cbnz	r0, eb1e <isr_rx+0xf2>
    eb16:	7c22      	ldrb	r2, [r4, #16]
    eb18:	f012 0f20 	tst.w	r2, #32
    eb1c:	d040      	beq.n	eba0 <isr_rx+0x174>
			devmatch_ok = allow ? 1U : 0U;
    eb1e:	b35b      	cbz	r3, eb78 <isr_rx+0x14c>
    eb20:	2301      	movs	r3, #1
    eb22:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
	err = isr_rx_pdu(lll, lll_aux, node_rx, pdu, phy_aux, phy_aux_flags_rx,
    eb26:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    eb2a:	f8cd 801c 	str.w	r8, [sp, #28]
    eb2e:	f8cd b018 	str.w	fp, [sp, #24]
    eb32:	9305      	str	r3, [sp, #20]
    eb34:	9304      	str	r3, [sp, #16]
    eb36:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    eb3a:	9303      	str	r3, [sp, #12]
    eb3c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    eb40:	9302      	str	r3, [sp, #8]
    eb42:	9701      	str	r7, [sp, #4]
    eb44:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eb46:	9300      	str	r3, [sp, #0]
    eb48:	4653      	mov	r3, sl
    eb4a:	464a      	mov	r2, r9
    eb4c:	4629      	mov	r1, r5
    eb4e:	4620      	mov	r0, r4
    eb50:	f7ff fdd6 	bl	e700 <isr_rx_pdu>
	if (!err) {
    eb54:	4603      	mov	r3, r0
    eb56:	b998      	cbnz	r0, eb80 <isr_rx+0x154>
    eb58:	e019      	b.n	eb8e <isr_rx+0x162>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    eb5a:	7920      	ldrb	r0, [r4, #4]
    eb5c:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    eb60:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    eb64:	f7fd fd82 	bl	c66c <ull_filter_lll_rl_idx>
    eb68:	4683      	mov	fp, r0
    eb6a:	e7c9      	b.n	eb00 <isr_rx+0xd4>
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    eb6c:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    eb70:	f7fd fde2 	bl	c738 <ull_filter_lll_rl_irk_idx>
    eb74:	4683      	mov	fp, r0
    eb76:	e7c3      	b.n	eb00 <isr_rx+0xd4>
			devmatch_ok = allow ? 1U : 0U;
    eb78:	2300      	movs	r3, #0
    eb7a:	e7d2      	b.n	eb22 <isr_rx+0xf6>
		err = -EINVAL;
    eb7c:	f06f 0315 	mvn.w	r3, #21
	if (lll_aux) {
    eb80:	b18d      	cbz	r5, eba6 <isr_rx+0x17a>
		radio_isr_set(isr_done, NULL);
    eb82:	2100      	movs	r1, #0
    eb84:	4822      	ldr	r0, [pc, #136]	; (ec10 <isr_rx+0x1e4>)
    eb86:	f000 fff7 	bl	fb78 <radio_isr_set>
	radio_disable();
    eb8a:	f001 f8b9 	bl	fd00 <radio_disable>
}
    eb8e:	b00d      	add	sp, #52	; 0x34
    eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOBUFS;
    eb94:	f06f 0368 	mvn.w	r3, #104	; 0x68
    eb98:	e7f2      	b.n	eb80 <isr_rx+0x154>
		err = -EINVAL;
    eb9a:	f06f 0315 	mvn.w	r3, #21
    eb9e:	e7ef      	b.n	eb80 <isr_rx+0x154>
			err = -EINVAL;
    eba0:	f06f 0315 	mvn.w	r3, #21
    eba4:	e7ec      	b.n	eb80 <isr_rx+0x154>
		if (lll->is_aux_sched && err != -ECANCELED) {
    eba6:	7c22      	ldrb	r2, [r4, #16]
    eba8:	f012 0f10 	tst.w	r2, #16
    ebac:	d002      	beq.n	ebb4 <isr_rx+0x188>
    ebae:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    ebb2:	d10c      	bne.n	ebce <isr_rx+0x1a2>
		if (lll->is_aux_sched) {
    ebb4:	7c23      	ldrb	r3, [r4, #16]
    ebb6:	f013 0f10 	tst.w	r3, #16
    ebba:	d024      	beq.n	ec06 <isr_rx+0x1da>
			lll->is_aux_sched = 0U;
    ebbc:	7c23      	ldrb	r3, [r4, #16]
    ebbe:	f36f 1304 	bfc	r3, #4, #1
    ebc2:	7423      	strb	r3, [r4, #16]
			radio_isr_set(lll_scan_isr_resume, lll);
    ebc4:	4621      	mov	r1, r4
    ebc6:	4813      	ldr	r0, [pc, #76]	; (ec14 <isr_rx+0x1e8>)
    ebc8:	f000 ffd6 	bl	fb78 <radio_isr_set>
    ebcc:	e7dd      	b.n	eb8a <isr_rx+0x15e>
			node_rx = ull_pdu_rx_alloc();
    ebce:	f7fa fea7 	bl	9920 <ull_pdu_rx_alloc>
			LL_ASSERT(node_rx);
    ebd2:	4605      	mov	r5, r0
    ebd4:	b148      	cbz	r0, ebea <isr_rx+0x1be>
			node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_RELEASE;
    ebd6:	230a      	movs	r3, #10
    ebd8:	712b      	strb	r3, [r5, #4]
			node_rx->hdr.rx_ftr.param = lll;
    ebda:	60ac      	str	r4, [r5, #8]
			ull_rx_put(node_rx->hdr.link, node_rx);
    ebdc:	4629      	mov	r1, r5
    ebde:	6828      	ldr	r0, [r5, #0]
    ebe0:	f7fa feba 	bl	9958 <ull_rx_put>
			ull_rx_sched();
    ebe4:	f7fa fec0 	bl	9968 <ull_rx_sched>
    ebe8:	e7e4      	b.n	ebb4 <isr_rx+0x188>
			LL_ASSERT(node_rx);
    ebea:	f240 334d 	movw	r3, #845	; 0x34d
    ebee:	4a0a      	ldr	r2, [pc, #40]	; (ec18 <isr_rx+0x1ec>)
    ebf0:	490a      	ldr	r1, [pc, #40]	; (ec1c <isr_rx+0x1f0>)
    ebf2:	480b      	ldr	r0, [pc, #44]	; (ec20 <isr_rx+0x1f4>)
    ebf4:	f00a fdeb 	bl	197ce <assert_print>
    ebf8:	4040      	eors	r0, r0
    ebfa:	f380 8811 	msr	BASEPRI, r0
    ebfe:	f04f 0003 	mov.w	r0, #3
    ec02:	df02      	svc	2
    ec04:	e7e7      	b.n	ebd6 <isr_rx+0x1aa>
			radio_isr_set(isr_done, NULL);
    ec06:	2100      	movs	r1, #0
    ec08:	4801      	ldr	r0, [pc, #4]	; (ec10 <isr_rx+0x1e4>)
    ec0a:	f000 ffb5 	bl	fb78 <radio_isr_set>
    ec0e:	e7bc      	b.n	eb8a <isr_rx+0x15e>
    ec10:	0000e0b5 	.word	0x0000e0b5
    ec14:	0000dafd 	.word	0x0000dafd
    ec18:	0001f574 	.word	0x0001f574
    ec1c:	0001f53c 	.word	0x0001f53c
    ec20:	0001e920 	.word	0x0001e920

0000ec24 <isr_aux_setup>:

	lll_done(param);
}

static void isr_aux_setup(void *param)
{
    ec24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec28:	b082      	sub	sp, #8
    ec2a:	4606      	mov	r6, r0
	uint32_t aux_start_us;
	struct lll_sync *lll;
	uint8_t phy_aux;
	uint32_t hcto;

	lll_isr_status_reset();
    ec2c:	f00d fbfa 	bl	1c424 <lll_isr_status_reset>

	node_rx = param;
	ftr = &node_rx->hdr.rx_ftr;
	aux_ptr = ftr->aux_ptr;
    ec30:	f8d6 800c 	ldr.w	r8, [r6, #12]
	phy_aux = BIT(aux_ptr->phy);
    ec34:	f898 5002 	ldrb.w	r5, [r8, #2]
    ec38:	096b      	lsrs	r3, r5, #5
    ec3a:	2501      	movs	r5, #1
    ec3c:	409d      	lsls	r5, r3
    ec3e:	b2ed      	uxtb	r5, r5
	ftr->aux_phy = phy_aux;
    ec40:	7335      	strb	r5, [r6, #12]

	lll = ftr->param;
    ec42:	f8d6 a008 	ldr.w	sl, [r6, #8]

	/* Determine the window size */
	if (aux_ptr->offs_units) {
    ec46:	f898 3000 	ldrb.w	r3, [r8]
    ec4a:	f998 2000 	ldrsb.w	r2, [r8]
    ec4e:	2a00      	cmp	r2, #0
    ec50:	db69      	blt.n	ed26 <isr_aux_setup+0x102>
		window_size_us = OFFS_UNIT_300_US;
	} else {
		window_size_us = OFFS_UNIT_30_US;
    ec52:	f04f 091e 	mov.w	r9, #30
	}

	/* Calculate the aux offset from start of the scan window */
	aux_offset_us = (uint32_t) aux_ptr->offs * window_size_us;
    ec56:	f898 7001 	ldrb.w	r7, [r8, #1]
    ec5a:	f898 4002 	ldrb.w	r4, [r8, #2]
    ec5e:	f004 041f 	and.w	r4, r4, #31
    ec62:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
    ec66:	fb09 f707 	mul.w	r7, r9, r7

	/* Calculate the window widening that needs to be deducted */
	if (aux_ptr->ca) {
    ec6a:	f013 0f40 	tst.w	r3, #64	; 0x40
    ec6e:	d05d      	beq.n	ed2c <isr_aux_setup+0x108>
		window_widening_us = SCA_DRIFT_50_PPM_US(aux_offset_us);
    ec70:	2432      	movs	r4, #50	; 0x32
    ec72:	fb07 f404 	mul.w	r4, r7, r4
    ec76:	4b3f      	ldr	r3, [pc, #252]	; (ed74 <isr_aux_setup+0x150>)
    ec78:	fba3 3404 	umull	r3, r4, r3, r4
    ec7c:	0ca4      	lsrs	r4, r4, #18
	} else {
		window_widening_us = SCA_DRIFT_500_PPM_US(aux_offset_us);
	}

	/* Setup radio for auxiliary PDU scan */
	radio_phy_set(phy_aux, PHY_FLAGS_S8);
    ec7e:	2101      	movs	r1, #1
    ec80:	4628      	mov	r0, r5
    ec82:	f000 ffaf 	bl	fbe4 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
    ec86:	006a      	lsls	r2, r5, #1
    ec88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    ec8c:	21ff      	movs	r1, #255	; 0xff
    ec8e:	2008      	movs	r0, #8
    ec90:	f000 fff2 	bl	fc78 <radio_pkt_configure>
			    RADIO_PKT_CONF_PHY(phy_aux));

	lll_chan_set(aux_ptr->chan_idx);
    ec94:	f898 0000 	ldrb.w	r0, [r8]
    ec98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    ec9c:	f7fe f9ce 	bl	d03c <lll_chan_set>

	radio_pkt_rx_set(node_rx->pdu);
    eca0:	f106 0020 	add.w	r0, r6, #32
    eca4:	f001 f81a 	bl	fcdc <radio_pkt_rx_set>

	radio_isr_set(isr_rx_aux_chain, lll);
    eca8:	4651      	mov	r1, sl
    ecaa:	4833      	ldr	r0, [pc, #204]	; (ed78 <isr_aux_setup+0x154>)
    ecac:	f000 ff64 	bl	fb78 <radio_isr_set>

#if defined(CONFIG_BT_CTLR_DF_SCAN_CTE_RX)
	struct lll_df_sync_cfg *cfg;

	cfg = lll_df_sync_cfg_latest_get(&lll->df_cfg, NULL);
    ecb0:	2100      	movs	r1, #0
    ecb2:	f10a 0040 	add.w	r0, sl, #64	; 0x40
    ecb6:	f00d fdde 	bl	1c876 <lll_df_sync_cfg_latest_get>
    ecba:	4682      	mov	sl, r0

	if (cfg->is_enabled && is_max_cte_reached(cfg->max_cte_count, cfg->cte_count)) {
    ecbc:	7803      	ldrb	r3, [r0, #0]
    ecbe:	f013 0f01 	tst.w	r3, #1
    ecc2:	d006      	beq.n	ecd2 <isr_aux_setup+0xae>
    ecc4:	7841      	ldrb	r1, [r0, #1]
    ecc6:	f001 011f 	and.w	r1, r1, #31
    ecca:	08d8      	lsrs	r0, r3, #3
    eccc:	f00d fd37 	bl	1c73e <is_max_cte_reached>
    ecd0:	bba8      	cbnz	r0, ed3e <isr_aux_setup+0x11a>
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
					  aux_ptr->chan_idx, CTE_INFO_IN_PAYLOAD, aux_ptr->phy);
	}
#endif /* CONFIG_BT_CTLR_DF_SCAN_CTE_RX */
	radio_switch_complete_and_disable();
    ecd2:	f001 f967 	bl	ffa4 <radio_switch_complete_and_disable>

	/* Setup radio rx on micro second offset. Note that radio_end_us stores
	 * PDU start time in this case.
	 */
	aux_start_us = ftr->radio_end_us + aux_offset_us;
    ecd6:	6971      	ldr	r1, [r6, #20]
    ecd8:	eb01 0807 	add.w	r8, r1, r7
	aux_start_us -= lll_radio_rx_ready_delay_get(phy_aux, PHY_FLAGS_S8);
    ecdc:	2101      	movs	r1, #1
    ecde:	4628      	mov	r0, r5
    ece0:	f00d fb8e 	bl	1c400 <lll_radio_rx_ready_delay_get>
    ece4:	eba8 0100 	sub.w	r1, r8, r0
	aux_start_us -= window_widening_us;
    ece8:	1b09      	subs	r1, r1, r4
	aux_start_us -= EVENT_JITTER_US;
	radio_tmr_start_us(0, aux_start_us);
    ecea:	3910      	subs	r1, #16
    ecec:	2000      	movs	r0, #0
    ecee:	f001 fa99 	bl	10224 <radio_tmr_start_us>

	/* Setup header complete timeout */
	hcto = ftr->radio_end_us + aux_offset_us;
    ecf2:	6973      	ldr	r3, [r6, #20]
    ecf4:	441f      	add	r7, r3
	hcto += window_size_us;
    ecf6:	44b9      	add	r9, r7
	hcto += window_widening_us;
    ecf8:	444c      	add	r4, r9
	hcto += EVENT_JITTER_US;
    ecfa:	3410      	adds	r4, #16
	hcto += radio_rx_chain_delay_get(phy_aux, PHY_FLAGS_S8);
    ecfc:	2101      	movs	r1, #1
    ecfe:	4628      	mov	r0, r5
    ed00:	f00d fe26 	bl	1c950 <radio_rx_chain_delay_get>
    ed04:	4404      	add	r4, r0
    ed06:	2d02      	cmp	r5, #2
    ed08:	d030      	beq.n	ed6c <isr_aux_setup+0x148>
    ed0a:	2d04      	cmp	r5, #4
    ed0c:	d130      	bne.n	ed70 <isr_aux_setup+0x14c>
		return 376;
    ed0e:	f44f 70bc 	mov.w	r0, #376	; 0x178
	hcto += addr_us_get(phy_aux);
	radio_tmr_hcto_configure(hcto);
    ed12:	4420      	add	r0, r4
    ed14:	f001 fae0 	bl	102d8 <radio_tmr_hcto_configure>

	/* capture end of Rx-ed PDU, extended scan to schedule auxiliary
	 * channel chaining, create connection or to create periodic sync.
	 */
	radio_tmr_end_capture();
    ed18:	f001 fb22 	bl	10360 <radio_tmr_end_capture>

	/* scanner always measures RSSI */
	radio_rssi_measure();
    ed1c:	f001 f952 	bl	ffc4 <radio_rssi_measure>
	radio_gpio_pa_lna_enable(aux_start_us +
				 radio_rx_ready_delay_get(phy_aux,
							  PHY_FLAGS_S8) -
				 HAL_RADIO_GPIO_LNA_OFFSET);
#endif /* HAL_RADIO_GPIO_HAVE_LNA_PIN */
}
    ed20:	b002      	add	sp, #8
    ed22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		window_size_us = OFFS_UNIT_300_US;
    ed26:	f44f 7996 	mov.w	r9, #300	; 0x12c
    ed2a:	e794      	b.n	ec56 <isr_aux_setup+0x32>
		window_widening_us = SCA_DRIFT_500_PPM_US(aux_offset_us);
    ed2c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
    ed30:	fb07 f404 	mul.w	r4, r7, r4
    ed34:	4b0f      	ldr	r3, [pc, #60]	; (ed74 <isr_aux_setup+0x150>)
    ed36:	fba3 3404 	umull	r3, r4, r3, r4
    ed3a:	0ca4      	lsrs	r4, r4, #18
    ed3c:	e79f      	b.n	ec7e <isr_aux_setup+0x5a>
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    ed3e:	f89a 0000 	ldrb.w	r0, [sl]
    ed42:	f89a 1002 	ldrb.w	r1, [sl, #2]
					  aux_ptr->chan_idx, CTE_INFO_IN_PAYLOAD, aux_ptr->phy);
    ed46:	f898 3000 	ldrb.w	r3, [r8]
    ed4a:	f898 2002 	ldrb.w	r2, [r8, #2]
    ed4e:	0952      	lsrs	r2, r2, #5
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    ed50:	9201      	str	r2, [sp, #4]
    ed52:	2200      	movs	r2, #0
    ed54:	9200      	str	r2, [sp, #0]
    ed56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ed5a:	f10a 0203 	add.w	r2, sl, #3
    ed5e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    ed62:	f3c0 0041 	ubfx	r0, r0, #1, #2
    ed66:	f000 fd8d 	bl	f884 <lll_df_conf_cte_rx_enable>
    ed6a:	e7b2      	b.n	ecd2 <isr_aux_setup+0xae>
		return 24;
    ed6c:	2018      	movs	r0, #24
    ed6e:	e7d0      	b.n	ed12 <isr_aux_setup+0xee>
	switch (phy) {
    ed70:	2028      	movs	r0, #40	; 0x28
    ed72:	e7ce      	b.n	ed12 <isr_aux_setup+0xee>
    ed74:	431bde83 	.word	0x431bde83
    ed78:	0000f491 	.word	0x0000f491

0000ed7c <isr_rx_done_cleanup>:
		lll_isr_cleanup(lll_aux);
	}
}

static void isr_rx_done_cleanup(struct lll_sync *lll, uint8_t crc_ok, bool sync_term)
{
    ed7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed7e:	4605      	mov	r5, r0
    ed80:	460f      	mov	r7, r1
    ed82:	4616      	mov	r6, r2
	struct event_done_extra *e;

	/* Calculate and place the drift information in done event */
	e = ull_event_done_extra_get();
    ed84:	f7fa fec0 	bl	9b08 <ull_event_done_extra_get>
	LL_ASSERT(e);
    ed88:	4604      	mov	r4, r0
    ed8a:	b338      	cbz	r0, eddc <isr_rx_done_cleanup+0x60>

	e->type = EVENT_DONE_EXTRA_TYPE_SYNC;
    ed8c:	2303      	movs	r3, #3
    ed8e:	7023      	strb	r3, [r4, #0]
	e->trx_cnt = trx_cnt;
    ed90:	4b1b      	ldr	r3, [pc, #108]	; (ee00 <isr_rx_done_cleanup+0x84>)
    ed92:	781b      	ldrb	r3, [r3, #0]
    ed94:	80a3      	strh	r3, [r4, #4]
	e->crc_valid = crc_ok;
    ed96:	79a2      	ldrb	r2, [r4, #6]
    ed98:	f367 0200 	bfi	r2, r7, #0, #1
    ed9c:	71a2      	strb	r2, [r4, #6]
#if defined(CONFIG_BT_CTLR_SYNC_PERIODIC_CTE_TYPE_FILTERING) && \
	defined(CONFIG_BT_CTLR_CTEINLINE_SUPPORT)
	e->sync_term = sync_term;
    ed9e:	b2d2      	uxtb	r2, r2
    eda0:	f366 0241 	bfi	r2, r6, #1, #1
    eda4:	71a2      	strb	r2, [r4, #6]
#endif /* CONFIG_BT_CTLR_SYNC_PERIODIC_CTE_TYPE_FILTERING && CONFIG_BT_CTLR_CTEINLINE_SUPPORT */
	if (trx_cnt) {
    eda6:	b1ab      	cbz	r3, edd4 <isr_rx_done_cleanup+0x58>
		e->drift.preamble_to_addr_us = addr_us_get(lll->phy);
    eda8:	7aeb      	ldrb	r3, [r5, #11]
    edaa:	f003 0307 	and.w	r3, r3, #7
    edae:	2b02      	cmp	r3, #2
    edb0:	d022      	beq.n	edf8 <isr_rx_done_cleanup+0x7c>
    edb2:	2b04      	cmp	r3, #4
    edb4:	d122      	bne.n	edfc <isr_rx_done_cleanup+0x80>
		return 376;
    edb6:	f44f 73bc 	mov.w	r3, #376	; 0x178
    edba:	6123      	str	r3, [r4, #16]
		e->drift.start_to_address_actual_us =
			radio_tmr_aa_restore() - radio_tmr_ready_restore();
    edbc:	f001 fab8 	bl	10330 <radio_tmr_aa_restore>
    edc0:	4606      	mov	r6, r0
    edc2:	f001 fac7 	bl	10354 <radio_tmr_ready_restore>
    edc6:	1a36      	subs	r6, r6, r0
		e->drift.start_to_address_actual_us =
    edc8:	60a6      	str	r6, [r4, #8]
		e->drift.window_widening_event_us = lll->window_widening_event_us;
    edca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    edcc:	60e3      	str	r3, [r4, #12]

		/* Reset window widening, as anchor point sync-ed */
		lll->window_widening_event_us = 0U;
    edce:	2300      	movs	r3, #0
    edd0:	636b      	str	r3, [r5, #52]	; 0x34
		lll->window_size_event_us = 0U;
    edd2:	63ab      	str	r3, [r5, #56]	; 0x38
	}

	lll_isr_cleanup(lll);
    edd4:	4628      	mov	r0, r5
    edd6:	f7fe f96b 	bl	d0b0 <lll_isr_cleanup>
}
    edda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(e);
    eddc:	f240 33d6 	movw	r3, #982	; 0x3d6
    ede0:	4a08      	ldr	r2, [pc, #32]	; (ee04 <isr_rx_done_cleanup+0x88>)
    ede2:	4909      	ldr	r1, [pc, #36]	; (ee08 <isr_rx_done_cleanup+0x8c>)
    ede4:	4809      	ldr	r0, [pc, #36]	; (ee0c <isr_rx_done_cleanup+0x90>)
    ede6:	f00a fcf2 	bl	197ce <assert_print>
    edea:	4040      	eors	r0, r0
    edec:	f380 8811 	msr	BASEPRI, r0
    edf0:	f04f 0003 	mov.w	r0, #3
    edf4:	df02      	svc	2
    edf6:	e7c9      	b.n	ed8c <isr_rx_done_cleanup+0x10>
		return 24;
    edf8:	2318      	movs	r3, #24
    edfa:	e7de      	b.n	edba <isr_rx_done_cleanup+0x3e>
	switch (phy) {
    edfc:	2328      	movs	r3, #40	; 0x28
    edfe:	e7dc      	b.n	edba <isr_rx_done_cleanup+0x3e>
    ee00:	2000929e 	.word	0x2000929e
    ee04:	0001f5fc 	.word	0x0001f5fc
    ee08:	0001f5c4 	.word	0x0001f5c4
    ee0c:	0001e920 	.word	0x0001e920

0000ee10 <isr_done>:

static void isr_done(void *param)
{
    ee10:	b538      	push	{r3, r4, r5, lr}
    ee12:	4604      	mov	r4, r0
	struct lll_sync *lll;

	lll_isr_status_reset();
    ee14:	f00d fb06 	bl	1c424 <lll_isr_status_reset>
	 * sync event is using LLL scheduling.
	 */
	lll = param;

	/* LLL scheduling used for chain PDU reception is aborted/preempted */
	if (lll->is_aux_sched) {
    ee18:	7b23      	ldrb	r3, [r4, #12]
    ee1a:	f013 0f04 	tst.w	r3, #4
    ee1e:	d108      	bne.n	ee32 <isr_done+0x22>

		ull_rx_put(node_rx->hdr.link, node_rx);
		ull_rx_sched();
	}

	isr_rx_done_cleanup(param, ((trx_cnt) ? 1U : 0U), false);
    ee20:	4b16      	ldr	r3, [pc, #88]	; (ee7c <isr_done+0x6c>)
    ee22:	7819      	ldrb	r1, [r3, #0]
    ee24:	b101      	cbz	r1, ee28 <isr_done+0x18>
    ee26:	2101      	movs	r1, #1
    ee28:	2200      	movs	r2, #0
    ee2a:	4620      	mov	r0, r4
    ee2c:	f7ff ffa6 	bl	ed7c <isr_rx_done_cleanup>
}
    ee30:	bd38      	pop	{r3, r4, r5, pc}
		lll->is_aux_sched = 0U;
    ee32:	7b23      	ldrb	r3, [r4, #12]
    ee34:	f36f 0382 	bfc	r3, #2, #1
    ee38:	7323      	strb	r3, [r4, #12]
		node_rx = ull_pdu_rx_alloc();
    ee3a:	f7fa fd71 	bl	9920 <ull_pdu_rx_alloc>
		LL_ASSERT(node_rx);
    ee3e:	4605      	mov	r5, r0
    ee40:	b168      	cbz	r0, ee5e <isr_done+0x4e>
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_RELEASE;
    ee42:	230a      	movs	r3, #10
    ee44:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.rx_ftr.param = lll;
    ee46:	60ac      	str	r4, [r5, #8]
		node_rx->hdr.rx_ftr.aux_failed = 1U;
    ee48:	7eeb      	ldrb	r3, [r5, #27]
    ee4a:	f043 0310 	orr.w	r3, r3, #16
    ee4e:	76eb      	strb	r3, [r5, #27]
		ull_rx_put(node_rx->hdr.link, node_rx);
    ee50:	4629      	mov	r1, r5
    ee52:	6828      	ldr	r0, [r5, #0]
    ee54:	f7fa fd80 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    ee58:	f7fa fd86 	bl	9968 <ull_rx_sched>
    ee5c:	e7e0      	b.n	ee20 <isr_done+0x10>
		LL_ASSERT(node_rx);
    ee5e:	f240 4302 	movw	r3, #1026	; 0x402
    ee62:	4a07      	ldr	r2, [pc, #28]	; (ee80 <isr_done+0x70>)
    ee64:	4907      	ldr	r1, [pc, #28]	; (ee84 <isr_done+0x74>)
    ee66:	4808      	ldr	r0, [pc, #32]	; (ee88 <isr_done+0x78>)
    ee68:	f00a fcb1 	bl	197ce <assert_print>
    ee6c:	4040      	eors	r0, r0
    ee6e:	f380 8811 	msr	BASEPRI, r0
    ee72:	f04f 0003 	mov.w	r0, #3
    ee76:	df02      	svc	2
    ee78:	e7e3      	b.n	ee42 <isr_done+0x32>
    ee7a:	bf00      	nop
    ee7c:	2000929e 	.word	0x2000929e
    ee80:	0001f5fc 	.word	0x0001f5fc
    ee84:	0001f53c 	.word	0x0001f53c
    ee88:	0001e920 	.word	0x0001e920

0000ee8c <prepare_cb_common>:
{
    ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ee8e:	4605      	mov	r5, r0
    ee90:	460e      	mov	r6, r1
	lll = p->param;
    ee92:	68c4      	ldr	r4, [r0, #12]
	lll->window_widening_event_us += lll->window_widening_prepare_us;
    ee94:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee96:	6b62      	ldr	r2, [r4, #52]	; 0x34
    ee98:	4413      	add	r3, r2
    ee9a:	6363      	str	r3, [r4, #52]	; 0x34
	lll->window_widening_prepare_us = 0;
    ee9c:	2200      	movs	r2, #0
    ee9e:	6322      	str	r2, [r4, #48]	; 0x30
	if (lll->window_widening_event_us > lll->window_widening_max_us) {
    eea0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    eea2:	4293      	cmp	r3, r2
    eea4:	d900      	bls.n	eea8 <prepare_cb_common+0x1c>
		lll->window_widening_event_us =	lll->window_widening_max_us;
    eea6:	6362      	str	r2, [r4, #52]	; 0x34
	lll->is_aux_sched = 0U;
    eea8:	7b23      	ldrb	r3, [r4, #12]
    eeaa:	f36f 0382 	bfc	r3, #2, #1
    eeae:	7323      	strb	r3, [r4, #12]
	trx_cnt = 0U;
    eeb0:	4b4a      	ldr	r3, [pc, #296]	; (efdc <prepare_cb_common+0x150>)
    eeb2:	2200      	movs	r2, #0
    eeb4:	701a      	strb	r2, [r3, #0]
	radio_reset();
    eeb6:	f000 fe7d 	bl	fbb4 <radio_reset>
	radio_phy_set(lll->phy, PHY_FLAGS_S8);
    eeba:	7ae0      	ldrb	r0, [r4, #11]
    eebc:	2101      	movs	r1, #1
    eebe:	f000 0007 	and.w	r0, r0, #7
    eec2:	f000 fe8f 	bl	fbe4 <radio_phy_set>
			    RADIO_PKT_CONF_PHY(lll->phy));
    eec6:	7ae2      	ldrb	r2, [r4, #11]
    eec8:	f002 0207 	and.w	r2, r2, #7
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
    eecc:	0052      	lsls	r2, r2, #1
    eece:	21ff      	movs	r1, #255	; 0xff
    eed0:	2008      	movs	r0, #8
    eed2:	f000 fed1 	bl	fc78 <radio_pkt_configure>
	radio_aa_set(lll->access_addr);
    eed6:	1d20      	adds	r0, r4, #4
    eed8:	f000 feb6 	bl	fc48 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    eedc:	7aa1      	ldrb	r1, [r4, #10]
	return ((uint16_t)src[1] << 8) | src[0];
    eede:	7a62      	ldrb	r2, [r4, #9]
    eee0:	7a23      	ldrb	r3, [r4, #8]
    eee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    eee6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    eeea:	f240 605b 	movw	r0, #1627	; 0x65b
    eeee:	f000 ff5f 	bl	fdb0 <radio_crc_configure>
	lll_chan_set(chan_idx);
    eef2:	4630      	mov	r0, r6
    eef4:	f7fe f8a2 	bl	d03c <lll_chan_set>
	node_rx = ull_pdu_rx_alloc_peek(1);
    eef8:	2001      	movs	r0, #1
    eefa:	f7fa fcf1 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    eefe:	4606      	mov	r6, r0
    ef00:	2800      	cmp	r0, #0
    ef02:	d040      	beq.n	ef86 <prepare_cb_common+0xfa>
	radio_pkt_rx_set(node_rx->pdu);
    ef04:	f106 0020 	add.w	r0, r6, #32
    ef08:	f000 fee8 	bl	fcdc <radio_pkt_rx_set>
	ticks_at_event = p->ticks_at_expire;
    ef0c:	682e      	ldr	r6, [r5, #0]
	ull = HDR_LLL2ULL(lll);
    ef0e:	6827      	ldr	r7, [r4, #0]
	ticks_at_event += lll_event_offset_get(ull);
    ef10:	4638      	mov	r0, r7
    ef12:	f00d fa57 	bl	1c3c4 <lll_event_offset_get>
    ef16:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
    ef18:	686a      	ldr	r2, [r5, #4]
    ef1a:	f106 0109 	add.w	r1, r6, #9
    ef1e:	2000      	movs	r0, #0
    ef20:	f001 f902 	bl	10128 <radio_tmr_start>
    ef24:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
    ef26:	f001 f9e3 	bl	102f0 <radio_tmr_aa_capture>
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US + lll->window_widening_event_us)
    ef2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    ef2c:	3330      	adds	r3, #48	; 0x30
	hcto = remainder_us +
    ef2e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
	       lll->window_size_event_us;
    ef32:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	hcto = remainder_us +
    ef34:	4405      	add	r5, r0
	hcto += radio_rx_ready_delay_get(lll->phy, PHY_FLAGS_S8);
    ef36:	7ae0      	ldrb	r0, [r4, #11]
    ef38:	2101      	movs	r1, #1
    ef3a:	f000 0007 	and.w	r0, r0, #7
    ef3e:	f00d fd05 	bl	1c94c <radio_rx_ready_delay_get>
    ef42:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy);
    ef44:	7ae0      	ldrb	r0, [r4, #11]
    ef46:	f000 0007 	and.w	r0, r0, #7
    ef4a:	2802      	cmp	r0, #2
    ef4c:	d029      	beq.n	efa2 <prepare_cb_common+0x116>
    ef4e:	2804      	cmp	r0, #4
    ef50:	d129      	bne.n	efa6 <prepare_cb_common+0x11a>
		return 376;
    ef52:	f44f 73bc 	mov.w	r3, #376	; 0x178
    ef56:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy, PHY_FLAGS_S8);
    ef58:	2101      	movs	r1, #1
    ef5a:	f00d fcf9 	bl	1c950 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
    ef5e:	4428      	add	r0, r5
    ef60:	f001 f9ba 	bl	102d8 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
    ef64:	f001 f9fc 	bl	10360 <radio_tmr_end_capture>
				   ull_sync_lll_handle_get(lll)),
    ef68:	4620      	mov	r0, r4
    ef6a:	f00c ffc2 	bl	1bef2 <ull_sync_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_SYNC_BASE +
    ef6e:	1d01      	adds	r1, r0, #4
    ef70:	4632      	mov	r2, r6
    ef72:	b2c9      	uxtb	r1, r1
    ef74:	4638      	mov	r0, r7
    ef76:	f00d fa33 	bl	1c3e0 <lll_preempt_calc>
    ef7a:	b9b0      	cbnz	r0, efaa <prepare_cb_common+0x11e>
		ret = lll_prepare_done(lll);
    ef7c:	4620      	mov	r0, r4
    ef7e:	f00d fa1f 	bl	1c3c0 <lll_prepare_done>
		LL_ASSERT(!ret);
    ef82:	b9d8      	cbnz	r0, efbc <prepare_cb_common+0x130>
}
    ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_rx);
    ef86:	f240 1391 	movw	r3, #401	; 0x191
    ef8a:	4a15      	ldr	r2, [pc, #84]	; (efe0 <prepare_cb_common+0x154>)
    ef8c:	4915      	ldr	r1, [pc, #84]	; (efe4 <prepare_cb_common+0x158>)
    ef8e:	4816      	ldr	r0, [pc, #88]	; (efe8 <prepare_cb_common+0x15c>)
    ef90:	f00a fc1d 	bl	197ce <assert_print>
    ef94:	4040      	eors	r0, r0
    ef96:	f380 8811 	msr	BASEPRI, r0
    ef9a:	f04f 0003 	mov.w	r0, #3
    ef9e:	df02      	svc	2
    efa0:	e7b0      	b.n	ef04 <prepare_cb_common+0x78>
		return 24;
    efa2:	2318      	movs	r3, #24
    efa4:	e7d7      	b.n	ef56 <prepare_cb_common+0xca>
	switch (phy) {
    efa6:	2328      	movs	r3, #40	; 0x28
    efa8:	e7d5      	b.n	ef56 <prepare_cb_common+0xca>
		radio_isr_set(isr_done, lll);
    efaa:	4621      	mov	r1, r4
    efac:	480f      	ldr	r0, [pc, #60]	; (efec <prepare_cb_common+0x160>)
    efae:	f000 fde3 	bl	fb78 <radio_isr_set>
		radio_disable();
    efb2:	f000 fea5 	bl	fd00 <radio_disable>
		return -ECANCELED;
    efb6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    efba:	e7e3      	b.n	ef84 <prepare_cb_common+0xf8>
		LL_ASSERT(!ret);
    efbc:	f240 13c5 	movw	r3, #453	; 0x1c5
    efc0:	4a07      	ldr	r2, [pc, #28]	; (efe0 <prepare_cb_common+0x154>)
    efc2:	490b      	ldr	r1, [pc, #44]	; (eff0 <prepare_cb_common+0x164>)
    efc4:	4808      	ldr	r0, [pc, #32]	; (efe8 <prepare_cb_common+0x15c>)
    efc6:	f00a fc02 	bl	197ce <assert_print>
    efca:	4040      	eors	r0, r0
    efcc:	f380 8811 	msr	BASEPRI, r0
    efd0:	f04f 0003 	mov.w	r0, #3
    efd4:	df02      	svc	2
	return 0;
    efd6:	2000      	movs	r0, #0
    efd8:	e7d4      	b.n	ef84 <prepare_cb_common+0xf8>
    efda:	bf00      	nop
    efdc:	2000929e 	.word	0x2000929e
    efe0:	0001f5fc 	.word	0x0001f5fc
    efe4:	0001f53c 	.word	0x0001f53c
    efe8:	0001e920 	.word	0x0001e920
    efec:	0000ee11 	.word	0x0000ee11
    eff0:	0001eccc 	.word	0x0001eccc

0000eff4 <create_prepare_cb>:
{
    eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
    eff6:	b083      	sub	sp, #12
    eff8:	4606      	mov	r6, r0
	lll = p->param;
    effa:	68c5      	ldr	r5, [r0, #12]
	lll->skip_event = lll->skip_prepare + p->lazy;
    effc:	89eb      	ldrh	r3, [r5, #14]
    effe:	8902      	ldrh	r2, [r0, #8]
    f000:	4413      	add	r3, r2
    f002:	b29b      	uxth	r3, r3
    f004:	822b      	strh	r3, [r5, #16]
	event_counter = lll->event_counter + lll->skip_event;
    f006:	8a6c      	ldrh	r4, [r5, #18]
    f008:	4423      	add	r3, r4
    f00a:	b29c      	uxth	r4, r3
	lll->skip_prepare = 0;
    f00c:	2300      	movs	r3, #0
    f00e:	81eb      	strh	r3, [r5, #14]
	chan_idx = data_channel_calc(lll);
    f010:	4628      	mov	r0, r5
    f012:	f00d fb9d 	bl	1c750 <data_channel_calc>
    f016:	4607      	mov	r7, r0
	lll->event_counter = (event_counter + 1);
    f018:	3401      	adds	r4, #1
    f01a:	826c      	strh	r4, [r5, #18]
	err = prepare_cb_common(p, chan_idx);
    f01c:	4601      	mov	r1, r0
    f01e:	4630      	mov	r0, r6
    f020:	f7ff ff34 	bl	ee8c <prepare_cb_common>
	if (err) {
    f024:	b110      	cbz	r0, f02c <create_prepare_cb+0x38>
}
    f026:	2000      	movs	r0, #0
    f028:	b003      	add	sp, #12
    f02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cfg = lll_df_sync_cfg_latest_get(&lll->df_cfg, NULL);
    f02c:	2100      	movs	r1, #0
    f02e:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f032:	f00d fc20 	bl	1c876 <lll_df_sync_cfg_latest_get>
    f036:	4604      	mov	r4, r0
	} else if (cfg->is_enabled) {
    f038:	7803      	ldrb	r3, [r0, #0]
    f03a:	f013 0f01 	tst.w	r3, #1
    f03e:	d01c      	beq.n	f07a <create_prepare_cb+0x86>
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f040:	4618      	mov	r0, r3
    f042:	78a1      	ldrb	r1, [r4, #2]
					  chan_idx, CTE_INFO_IN_PAYLOAD, lll->phy);
    f044:	7aeb      	ldrb	r3, [r5, #11]
    f046:	f003 0307 	and.w	r3, r3, #7
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f04a:	9301      	str	r3, [sp, #4]
    f04c:	2600      	movs	r6, #0
    f04e:	9600      	str	r6, [sp, #0]
    f050:	463b      	mov	r3, r7
    f052:	1ce2      	adds	r2, r4, #3
    f054:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f058:	f3c0 0041 	ubfx	r0, r0, #1, #2
    f05c:	f000 fc12 	bl	f884 <lll_df_conf_cte_rx_enable>
		cfg->cte_count = 0;
    f060:	7863      	ldrb	r3, [r4, #1]
    f062:	f366 0304 	bfi	r3, r6, #0, #5
    f066:	7063      	strb	r3, [r4, #1]
	radio_switch_complete_and_disable();
    f068:	f000 ff9c 	bl	ffa4 <radio_switch_complete_and_disable>
	radio_rssi_measure();
    f06c:	f000 ffaa 	bl	ffc4 <radio_rssi_measure>
	radio_isr_set(isr_rx_adv_sync_estab, lll);
    f070:	4629      	mov	r1, r5
    f072:	4804      	ldr	r0, [pc, #16]	; (f084 <create_prepare_cb+0x90>)
    f074:	f000 fd80 	bl	fb78 <radio_isr_set>
	return 0;
    f078:	e7d5      	b.n	f026 <create_prepare_cb+0x32>
		radio_df_cte_inline_set_enabled(false);
    f07a:	2000      	movs	r0, #0
    f07c:	f001 fa2e 	bl	104dc <radio_df_cte_inline_set_enabled>
    f080:	e7f2      	b.n	f068 <create_prepare_cb+0x74>
    f082:	bf00      	nop
    f084:	0000f7b1 	.word	0x0000f7b1

0000f088 <prepare_cb>:
{
    f088:	b5f0      	push	{r4, r5, r6, r7, lr}
    f08a:	b083      	sub	sp, #12
    f08c:	4606      	mov	r6, r0
	lll = p->param;
    f08e:	68c5      	ldr	r5, [r0, #12]
	lll->skip_event = lll->skip_prepare + p->lazy;
    f090:	89eb      	ldrh	r3, [r5, #14]
    f092:	8902      	ldrh	r2, [r0, #8]
    f094:	4413      	add	r3, r2
    f096:	b29b      	uxth	r3, r3
    f098:	822b      	strh	r3, [r5, #16]
	event_counter = lll->event_counter + lll->skip_event;
    f09a:	8a6c      	ldrh	r4, [r5, #18]
    f09c:	4423      	add	r3, r4
    f09e:	b29c      	uxth	r4, r3
	lll->skip_prepare = 0;
    f0a0:	2300      	movs	r3, #0
    f0a2:	81eb      	strh	r3, [r5, #14]
	chan_idx = data_channel_calc(lll);
    f0a4:	4628      	mov	r0, r5
    f0a6:	f00d fb53 	bl	1c750 <data_channel_calc>
    f0aa:	4607      	mov	r7, r0
	lll->event_counter = (event_counter + 1);
    f0ac:	3401      	adds	r4, #1
    f0ae:	826c      	strh	r4, [r5, #18]
	err = prepare_cb_common(p, chan_idx);
    f0b0:	4601      	mov	r1, r0
    f0b2:	4630      	mov	r0, r6
    f0b4:	f7ff feea 	bl	ee8c <prepare_cb_common>
	if (err) {
    f0b8:	b110      	cbz	r0, f0c0 <prepare_cb+0x38>
}
    f0ba:	2000      	movs	r0, #0
    f0bc:	b003      	add	sp, #12
    f0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cfg = lll_df_sync_cfg_latest_get(&lll->df_cfg, NULL);
    f0c0:	2100      	movs	r1, #0
    f0c2:	f105 0040 	add.w	r0, r5, #64	; 0x40
    f0c6:	f00d fbd6 	bl	1c876 <lll_df_sync_cfg_latest_get>
    f0ca:	4604      	mov	r4, r0
	if (cfg->is_enabled) {
    f0cc:	7803      	ldrb	r3, [r0, #0]
    f0ce:	f013 0f01 	tst.w	r3, #1
    f0d2:	d108      	bne.n	f0e6 <prepare_cb+0x5e>
	radio_switch_complete_and_disable();
    f0d4:	f000 ff66 	bl	ffa4 <radio_switch_complete_and_disable>
	radio_rssi_measure();
    f0d8:	f000 ff74 	bl	ffc4 <radio_rssi_measure>
	radio_isr_set(isr_rx_adv_sync, lll);
    f0dc:	4629      	mov	r1, r5
    f0de:	480c      	ldr	r0, [pc, #48]	; (f110 <prepare_cb+0x88>)
    f0e0:	f000 fd4a 	bl	fb78 <radio_isr_set>
	return 0;
    f0e4:	e7e9      	b.n	f0ba <prepare_cb+0x32>
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f0e6:	4618      	mov	r0, r3
    f0e8:	78a1      	ldrb	r1, [r4, #2]
					  chan_idx, CTE_INFO_IN_PAYLOAD, lll->phy);
    f0ea:	7aeb      	ldrb	r3, [r5, #11]
    f0ec:	f003 0307 	and.w	r3, r3, #7
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f0f0:	9301      	str	r3, [sp, #4]
    f0f2:	2600      	movs	r6, #0
    f0f4:	9600      	str	r6, [sp, #0]
    f0f6:	463b      	mov	r3, r7
    f0f8:	1ce2      	adds	r2, r4, #3
    f0fa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f0fe:	f3c0 0041 	ubfx	r0, r0, #1, #2
    f102:	f000 fbbf 	bl	f884 <lll_df_conf_cte_rx_enable>
		cfg->cte_count = 0;
    f106:	7863      	ldrb	r3, [r4, #1]
    f108:	f366 0304 	bfi	r3, r6, #0, #5
    f10c:	7063      	strb	r3, [r4, #1]
    f10e:	e7e1      	b.n	f0d4 <prepare_cb+0x4c>
    f110:	0000f571 	.word	0x0000f571

0000f114 <abort_cb>:
{
    f114:	b538      	push	{r3, r4, r5, lr}
    f116:	460d      	mov	r5, r1
	if (!prepare_param) {
    f118:	b170      	cbz	r0, f138 <abort_cb+0x24>
    f11a:	4604      	mov	r4, r0
	err = lll_hfclock_off();
    f11c:	f7fe f8d2 	bl	d2c4 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
    f120:	2800      	cmp	r0, #0
    f122:	db0f      	blt.n	f144 <abort_cb+0x30>
	lll = prepare_param->param;
    f124:	68e2      	ldr	r2, [r4, #12]
	lll->skip_prepare += (prepare_param->lazy + 1);
    f126:	8923      	ldrh	r3, [r4, #8]
    f128:	89d1      	ldrh	r1, [r2, #14]
    f12a:	440b      	add	r3, r1
    f12c:	3301      	adds	r3, #1
    f12e:	81d3      	strh	r3, [r2, #14]
	lll_done(param);
    f130:	4628      	mov	r0, r5
    f132:	f7fd ff21 	bl	cf78 <lll_done>
}
    f136:	bd38      	pop	{r3, r4, r5, pc}
		radio_isr_set(isr_done, param);
    f138:	4809      	ldr	r0, [pc, #36]	; (f160 <abort_cb+0x4c>)
    f13a:	f000 fd1d 	bl	fb78 <radio_isr_set>
		radio_disable();
    f13e:	f000 fddf 	bl	fd00 <radio_disable>
		return;
    f142:	e7f8      	b.n	f136 <abort_cb+0x22>
	LL_ASSERT(err >= 0);
    f144:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    f148:	4a06      	ldr	r2, [pc, #24]	; (f164 <abort_cb+0x50>)
    f14a:	4907      	ldr	r1, [pc, #28]	; (f168 <abort_cb+0x54>)
    f14c:	4807      	ldr	r0, [pc, #28]	; (f16c <abort_cb+0x58>)
    f14e:	f00a fb3e 	bl	197ce <assert_print>
    f152:	4040      	eors	r0, r0
    f154:	f380 8811 	msr	BASEPRI, r0
    f158:	f04f 0003 	mov.w	r0, #3
    f15c:	df02      	svc	2
    f15e:	e7e1      	b.n	f124 <abort_cb+0x10>
    f160:	0000ee11 	.word	0x0000ee11
    f164:	0001f5fc 	.word	0x0001f5fc
    f168:	0001f4a0 	.word	0x0001f4a0
    f16c:	0001e920 	.word	0x0001e920

0000f170 <prepare>:
{
    f170:	b510      	push	{r4, lr}
    f172:	4604      	mov	r4, r0
	err = lll_hfclock_on();
    f174:	f7fe f890 	bl	d298 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
    f178:	2800      	cmp	r0, #0
    f17a:	db0c      	blt.n	f196 <prepare+0x26>
	lll = p->param;
    f17c:	68e2      	ldr	r2, [r4, #12]
	lll->window_widening_prepare_us += lll->window_widening_periodic_us *
    f17e:	6a93      	ldr	r3, [r2, #40]	; 0x28
					   (p->lazy + 1);
    f180:	8921      	ldrh	r1, [r4, #8]
	lll->window_widening_prepare_us += lll->window_widening_periodic_us *
    f182:	fb01 3303 	mla	r3, r1, r3, r3
    f186:	6b11      	ldr	r1, [r2, #48]	; 0x30
    f188:	440b      	add	r3, r1
    f18a:	6313      	str	r3, [r2, #48]	; 0x30
	if (lll->window_widening_prepare_us > lll->window_widening_max_us) {
    f18c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    f18e:	428b      	cmp	r3, r1
    f190:	d900      	bls.n	f194 <prepare+0x24>
		lll->window_widening_prepare_us = lll->window_widening_max_us;
    f192:	6311      	str	r1, [r2, #48]	; 0x30
}
    f194:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
    f196:	237e      	movs	r3, #126	; 0x7e
    f198:	4a05      	ldr	r2, [pc, #20]	; (f1b0 <prepare+0x40>)
    f19a:	4906      	ldr	r1, [pc, #24]	; (f1b4 <prepare+0x44>)
    f19c:	4806      	ldr	r0, [pc, #24]	; (f1b8 <prepare+0x48>)
    f19e:	f00a fb16 	bl	197ce <assert_print>
    f1a2:	4040      	eors	r0, r0
    f1a4:	f380 8811 	msr	BASEPRI, r0
    f1a8:	f04f 0003 	mov.w	r0, #3
    f1ac:	df02      	svc	2
    f1ae:	e7e5      	b.n	f17c <prepare+0xc>
    f1b0:	0001f5fc 	.word	0x0001f5fc
    f1b4:	0001f4a0 	.word	0x0001f4a0
    f1b8:	0001e920 	.word	0x0001e920

0000f1bc <isr_rx>:
{
    f1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1c0:	b084      	sub	sp, #16
    f1c2:	4604      	mov	r4, r0
    f1c4:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    f1c8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	if (crc_ok) {
    f1cc:	b93a      	cbnz	r2, f1de <isr_rx+0x22>
		if (cte_ready) {
    f1ce:	2f00      	cmp	r7, #0
    f1d0:	f040 80e3 	bne.w	f39a <isr_rx+0x1de>
		err = 0;
    f1d4:	2600      	movs	r6, #0
}
    f1d6:	4630      	mov	r0, r6
    f1d8:	b004      	add	sp, #16
    f1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f1de:	4688      	mov	r8, r1
    f1e0:	461e      	mov	r6, r3
		node_rx = ull_pdu_rx_alloc_peek(4);
    f1e2:	2004      	movs	r0, #4
    f1e4:	f7fa fb7c 	bl	98e0 <ull_pdu_rx_alloc_peek>
		if (node_rx) {
    f1e8:	4605      	mov	r5, r0
    f1ea:	2800      	cmp	r0, #0
    f1ec:	d063      	beq.n	f2b6 <isr_rx+0xfa>
			ull_pdu_rx_alloc();
    f1ee:	f7fa fb97 	bl	9920 <ull_pdu_rx_alloc>
			node_rx->hdr.type = node_type;
    f1f2:	f885 8004 	strb.w	r8, [r5, #4]
			ftr->param = lll;
    f1f6:	60ac      	str	r4, [r5, #8]
			ftr->aux_failed = 0U;
    f1f8:	7eeb      	ldrb	r3, [r5, #27]
    f1fa:	f36f 1304 	bfc	r3, #4, #1
    f1fe:	76eb      	strb	r3, [r5, #27]
			ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    f200:	f1b9 0f00 	cmp.w	r9, #0
    f204:	d140      	bne.n	f288 <isr_rx+0xcc>
    f206:	207f      	movs	r0, #127	; 0x7f
    f208:	7628      	strb	r0, [r5, #24]
			ftr->ticks_anchor = radio_tmr_start_get();
    f20a:	f001 f853 	bl	102b4 <radio_tmr_start_get>
    f20e:	6128      	str	r0, [r5, #16]
			ftr->radio_end_us = radio_tmr_end_get() -
    f210:	f001 f8ae 	bl	10370 <radio_tmr_end_get>
    f214:	4682      	mov	sl, r0
					    radio_rx_chain_delay_get(lll->phy,
    f216:	7ae0      	ldrb	r0, [r4, #11]
    f218:	4631      	mov	r1, r6
    f21a:	f000 0007 	and.w	r0, r0, #7
    f21e:	f00d fb97 	bl	1c950 <radio_rx_chain_delay_get>
			ftr->radio_end_us = radio_tmr_end_get() -
    f222:	ebaa 0000 	sub.w	r0, sl, r0
    f226:	6168      	str	r0, [r5, #20]
			ftr->phy_flags = phy_flags_rx;
    f228:	7eab      	ldrb	r3, [r5, #26]
    f22a:	f366 0382 	bfi	r3, r6, #2, #1
    f22e:	76ab      	strb	r3, [r5, #26]
			ftr->sync_status = status;
    f230:	b2db      	uxtb	r3, r3
    f232:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    f236:	f362 1387 	bfi	r3, r2, #6, #2
    f23a:	76ab      	strb	r3, [r5, #26]
			ftr->sync_rx_enabled = lll->is_rx_enabled;
    f23c:	7b23      	ldrb	r3, [r4, #12]
    f23e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    f242:	7eea      	ldrb	r2, [r5, #27]
    f244:	f363 0200 	bfi	r2, r3, #0, #1
    f248:	76ea      	strb	r2, [r5, #27]
			if (node_type != NODE_RX_TYPE_EXT_AUX_REPORT) {
    f24a:	f1b8 0f09 	cmp.w	r8, #9
    f24e:	d11f      	bne.n	f290 <isr_rx+0xd4>
			ftr->aux_lll_sched = lll_scan_aux_setup(pdu, lll->phy,
    f250:	7ae1      	ldrb	r1, [r4, #11]
    f252:	9400      	str	r4, [sp, #0]
    f254:	4b8a      	ldr	r3, [pc, #552]	; (f480 <isr_rx+0x2c4>)
    f256:	4632      	mov	r2, r6
    f258:	f001 0107 	and.w	r1, r1, #7
    f25c:	f105 0020 	add.w	r0, r5, #32
    f260:	f7ff f972 	bl	e548 <lll_scan_aux_setup>
    f264:	7eeb      	ldrb	r3, [r5, #27]
    f266:	f360 03c3 	bfi	r3, r0, #3, #1
    f26a:	76eb      	strb	r3, [r5, #27]
			if (ftr->aux_lll_sched) {
    f26c:	b2db      	uxtb	r3, r3
    f26e:	f013 0f08 	tst.w	r3, #8
    f272:	d011      	beq.n	f298 <isr_rx+0xdc>
				if (node_type != NODE_RX_TYPE_EXT_AUX_REPORT) {
    f274:	f1b8 0f09 	cmp.w	r8, #9
    f278:	d01a      	beq.n	f2b0 <isr_rx+0xf4>
					lll->is_aux_sched = 1U;
    f27a:	7b23      	ldrb	r3, [r4, #12]
    f27c:	f043 0304 	orr.w	r3, r3, #4
    f280:	7323      	strb	r3, [r4, #12]
				err = -EBUSY;
    f282:	f06f 060f 	mvn.w	r6, #15
    f286:	e008      	b.n	f29a <isr_rx+0xde>
			ftr->rssi = (rssi_ready) ? radio_rssi_get() :
    f288:	f000 fea6 	bl	ffd8 <radio_rssi_get>
    f28c:	b2c0      	uxtb	r0, r0
    f28e:	e7bb      	b.n	f208 <isr_rx+0x4c>
				ftr->extra = ull_pdu_rx_alloc();
    f290:	f7fa fb46 	bl	9920 <ull_pdu_rx_alloc>
    f294:	60e8      	str	r0, [r5, #12]
    f296:	e7db      	b.n	f250 <isr_rx+0x94>
				err = 0;
    f298:	2600      	movs	r6, #0
			ull_rx_put(node_rx->hdr.link, node_rx);
    f29a:	4629      	mov	r1, r5
    f29c:	6828      	ldr	r0, [r5, #0]
    f29e:	f7fa fb5b 	bl	9958 <ull_rx_put>
			sched = true;
    f2a2:	2301      	movs	r3, #1
		if (cte_ready) {
    f2a4:	b98f      	cbnz	r7, f2ca <isr_rx+0x10e>
	if (sched) {
    f2a6:	2b00      	cmp	r3, #0
    f2a8:	d095      	beq.n	f1d6 <isr_rx+0x1a>
		ull_rx_sched();
    f2aa:	f7fa fb5d 	bl	9968 <ull_rx_sched>
    f2ae:	e792      	b.n	f1d6 <isr_rx+0x1a>
				err = -EBUSY;
    f2b0:	f06f 060f 	mvn.w	r6, #15
    f2b4:	e7f1      	b.n	f29a <isr_rx+0xde>
		} else if (node_type == NODE_RX_TYPE_EXT_AUX_REPORT) {
    f2b6:	f1b8 0f09 	cmp.w	r8, #9
    f2ba:	d002      	beq.n	f2c2 <isr_rx+0x106>
			err = 0;
    f2bc:	2600      	movs	r6, #0
	bool sched = false;
    f2be:	4633      	mov	r3, r6
    f2c0:	e7f0      	b.n	f2a4 <isr_rx+0xe8>
			err = -ENOMEM;
    f2c2:	f06f 060b 	mvn.w	r6, #11
	bool sched = false;
    f2c6:	2300      	movs	r3, #0
    f2c8:	e7ec      	b.n	f2a4 <isr_rx+0xe8>
	return &df_cfg->cfg[df_cfg->first];
    f2ca:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    f2ce:	b2dd      	uxtb	r5, r3
	uint8_t cte_info;
	uint8_t ant;

	cfg = lll_df_sync_cfg_curr_get(&lll->df_cfg);

	if (cfg->is_enabled) {
    f2d0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    f2d4:	4423      	add	r3, r4
    f2d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    f2da:	f013 0f01 	tst.w	r3, #1
    f2de:	d0e4      	beq.n	f2aa <isr_rx+0xee>
		if (is_max_cte_reached(cfg->max_cte_count, cfg->cte_count)) {
    f2e0:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    f2e4:	4423      	add	r3, r4
    f2e6:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
    f2ea:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
    f2ee:	f001 011f 	and.w	r1, r1, #31
    f2f2:	08c0      	lsrs	r0, r0, #3
    f2f4:	f00d fa23 	bl	1c73e <is_max_cte_reached>
    f2f8:	2800      	cmp	r0, #0
    f2fa:	d0d6      	beq.n	f2aa <isr_rx+0xee>
			cte_info = radio_df_cte_status_get();
    f2fc:	f000 fba8 	bl	fa50 <radio_df_cte_status_get>
    f300:	f88d 000f 	strb.w	r0, [sp, #15]
			ant = radio_df_pdu_antenna_switch_pattern_get();
    f304:	f00d fad5 	bl	1c8b2 <radio_df_pdu_antenna_switch_pattern_get>
    f308:	4680      	mov	r8, r0
			iq_report = ull_df_iq_report_alloc();
    f30a:	f7fc f973 	bl	b5f4 <ull_df_iq_report_alloc>
			LL_ASSERT(iq_report);
    f30e:	4607      	mov	r7, r0
    f310:	b388      	cbz	r0, f376 <isr_rx+0x1ba>

			iq_report->hdr.type = NODE_RX_TYPE_SYNC_IQ_SAMPLE_REPORT;
    f312:	2326      	movs	r3, #38	; 0x26
    f314:	713b      	strb	r3, [r7, #4]
			iq_report->sample_count = radio_df_iq_samples_amount_get();
    f316:	f000 fb95 	bl	fa44 <radio_df_iq_samples_amount_get>
    f31a:	f887 0020 	strb.w	r0, [r7, #32]
			iq_report->packet_status = packet_status;
    f31e:	2300      	movs	r3, #0
    f320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			iq_report->rssi_ant_id = ant;
    f324:	f887 8024 	strb.w	r8, [r7, #36]	; 0x24
			iq_report->cte_info = *(struct pdu_cte_info *)&cte_info;
    f328:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f32c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			iq_report->local_slot_durations = cfg->slot_durations;
    f330:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
    f334:	4423      	add	r3, r4
    f336:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    f33a:	f3c3 0341 	ubfx	r3, r3, #1, #2
    f33e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			/* Event counter is updated to next value during event preparation, hence
			 * it has to be subtracted to store actual event counter value.
			 */
			iq_report->event_counter = lll->event_counter - 1;
    f342:	8a63      	ldrh	r3, [r4, #18]
    f344:	3b01      	subs	r3, #1
    f346:	84fb      	strh	r3, [r7, #38]	; 0x26

			ftr = &iq_report->hdr.rx_ftr;
			ftr->param = lll;
    f348:	60bc      	str	r4, [r7, #8]
			ftr->rssi =
    f34a:	f1b9 0f00 	cmp.w	r9, #0
    f34e:	d120      	bne.n	f392 <isr_rx+0x1d6>
    f350:	207f      	movs	r0, #127	; 0x7f
    f352:	7638      	strb	r0, [r7, #24]
				((rssi_ready) ? radio_rssi_get() : BT_HCI_LE_RSSI_NOT_AVAILABLE);

			cfg->cte_count += 1U;
    f354:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
    f358:	442c      	add	r4, r5
    f35a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    f35e:	f3c3 0204 	ubfx	r2, r3, #0, #5
    f362:	3201      	adds	r2, #1
    f364:	f362 0304 	bfi	r3, r2, #0, #5
    f368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

			ull_rx_put(iq_report->hdr.link, iq_report);
    f36c:	4639      	mov	r1, r7
    f36e:	6838      	ldr	r0, [r7, #0]
    f370:	f7fa faf2 	bl	9958 <ull_rx_put>

			return 0;
    f374:	e799      	b.n	f2aa <isr_rx+0xee>
			LL_ASSERT(iq_report);
    f376:	f240 4321 	movw	r3, #1057	; 0x421
    f37a:	4a42      	ldr	r2, [pc, #264]	; (f484 <isr_rx+0x2c8>)
    f37c:	4942      	ldr	r1, [pc, #264]	; (f488 <isr_rx+0x2cc>)
    f37e:	4843      	ldr	r0, [pc, #268]	; (f48c <isr_rx+0x2d0>)
    f380:	f00a fa25 	bl	197ce <assert_print>
    f384:	4040      	eors	r0, r0
    f386:	f380 8811 	msr	BASEPRI, r0
    f38a:	f04f 0003 	mov.w	r0, #3
    f38e:	df02      	svc	2
    f390:	e7bf      	b.n	f312 <isr_rx+0x156>
				((rssi_ready) ? radio_rssi_get() : BT_HCI_LE_RSSI_NOT_AVAILABLE);
    f392:	f000 fe21 	bl	ffd8 <radio_rssi_get>
			ftr->rssi =
    f396:	b2c0      	uxtb	r0, r0
    f398:	e7db      	b.n	f352 <isr_rx+0x196>
    f39a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    f39e:	b2de      	uxtb	r6, r3
	if (cfg->is_enabled) {
    f3a0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    f3a4:	4403      	add	r3, r0
    f3a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    f3aa:	f013 0f01 	tst.w	r3, #1
    f3ae:	d061      	beq.n	f474 <isr_rx+0x2b8>
		if (is_max_cte_reached(cfg->max_cte_count, cfg->cte_count)) {
    f3b0:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
    f3b4:	4403      	add	r3, r0
    f3b6:	f893 0042 	ldrb.w	r0, [r3, #66]	; 0x42
    f3ba:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
    f3be:	f001 011f 	and.w	r1, r1, #31
    f3c2:	08c0      	lsrs	r0, r0, #3
    f3c4:	f00d f9bb 	bl	1c73e <is_max_cte_reached>
    f3c8:	2800      	cmp	r0, #0
    f3ca:	d056      	beq.n	f47a <isr_rx+0x2be>
			cte_info = radio_df_cte_status_get();
    f3cc:	f000 fb40 	bl	fa50 <radio_df_cte_status_get>
    f3d0:	f88d 000f 	strb.w	r0, [sp, #15]
			ant = radio_df_pdu_antenna_switch_pattern_get();
    f3d4:	f00d fa6d 	bl	1c8b2 <radio_df_pdu_antenna_switch_pattern_get>
    f3d8:	4607      	mov	r7, r0
			iq_report = ull_df_iq_report_alloc();
    f3da:	f7fc f90b 	bl	b5f4 <ull_df_iq_report_alloc>
			LL_ASSERT(iq_report);
    f3de:	4605      	mov	r5, r0
    f3e0:	b3b0      	cbz	r0, f450 <isr_rx+0x294>
			iq_report->hdr.type = NODE_RX_TYPE_SYNC_IQ_SAMPLE_REPORT;
    f3e2:	2326      	movs	r3, #38	; 0x26
    f3e4:	712b      	strb	r3, [r5, #4]
			iq_report->sample_count = radio_df_iq_samples_amount_get();
    f3e6:	f000 fb2d 	bl	fa44 <radio_df_iq_samples_amount_get>
    f3ea:	f885 0020 	strb.w	r0, [r5, #32]
			iq_report->packet_status = packet_status;
    f3ee:	2301      	movs	r3, #1
    f3f0:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
			iq_report->rssi_ant_id = ant;
    f3f4:	f885 7024 	strb.w	r7, [r5, #36]	; 0x24
			iq_report->cte_info = *(struct pdu_cte_info *)&cte_info;
    f3f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
    f3fc:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
			iq_report->local_slot_durations = cfg->slot_durations;
    f400:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
    f404:	4423      	add	r3, r4
    f406:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
    f40a:	f3c3 0341 	ubfx	r3, r3, #1, #2
    f40e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
			iq_report->event_counter = lll->event_counter - 1;
    f412:	8a63      	ldrh	r3, [r4, #18]
    f414:	3b01      	subs	r3, #1
    f416:	84eb      	strh	r3, [r5, #38]	; 0x26
			ftr->param = lll;
    f418:	60ac      	str	r4, [r5, #8]
			ftr->rssi =
    f41a:	f1b9 0f00 	cmp.w	r9, #0
    f41e:	d125      	bne.n	f46c <isr_rx+0x2b0>
    f420:	207f      	movs	r0, #127	; 0x7f
    f422:	7628      	strb	r0, [r5, #24]
			cfg->cte_count += 1U;
    f424:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
    f428:	4434      	add	r4, r6
    f42a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    f42e:	f3c3 0204 	ubfx	r2, r3, #0, #5
    f432:	3201      	adds	r2, #1
    f434:	f362 0304 	bfi	r3, r2, #0, #5
    f438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			ull_rx_put(iq_report->hdr.link, iq_report);
    f43c:	4629      	mov	r1, r5
    f43e:	6828      	ldr	r0, [r5, #0]
    f440:	f7fa fa8a 	bl	9958 <ull_rx_put>
			return 0;
    f444:	2600      	movs	r6, #0
			if (!err) {
    f446:	2e00      	cmp	r6, #0
    f448:	f43f af2f 	beq.w	f2aa <isr_rx+0xee>
		err = 0;
    f44c:	2600      	movs	r6, #0
    f44e:	e6c2      	b.n	f1d6 <isr_rx+0x1a>
			LL_ASSERT(iq_report);
    f450:	f240 4321 	movw	r3, #1057	; 0x421
    f454:	4a0b      	ldr	r2, [pc, #44]	; (f484 <isr_rx+0x2c8>)
    f456:	490c      	ldr	r1, [pc, #48]	; (f488 <isr_rx+0x2cc>)
    f458:	480c      	ldr	r0, [pc, #48]	; (f48c <isr_rx+0x2d0>)
    f45a:	f00a f9b8 	bl	197ce <assert_print>
    f45e:	4040      	eors	r0, r0
    f460:	f380 8811 	msr	BASEPRI, r0
    f464:	f04f 0003 	mov.w	r0, #3
    f468:	df02      	svc	2
    f46a:	e7ba      	b.n	f3e2 <isr_rx+0x226>
				((rssi_ready) ? radio_rssi_get() : BT_HCI_LE_RSSI_NOT_AVAILABLE);
    f46c:	f000 fdb4 	bl	ffd8 <radio_rssi_get>
			ftr->rssi =
    f470:	b2c0      	uxtb	r0, r0
    f472:	e7d6      	b.n	f422 <isr_rx+0x266>
		}
	}

	return -ENODATA;
    f474:	f06f 063c 	mvn.w	r6, #60	; 0x3c
    f478:	e7e5      	b.n	f446 <isr_rx+0x28a>
    f47a:	f06f 063c 	mvn.w	r6, #60	; 0x3c
    f47e:	e7e2      	b.n	f446 <isr_rx+0x28a>
    f480:	0000ec25 	.word	0x0000ec25
    f484:	0001f5fc 	.word	0x0001f5fc
    f488:	0001f648 	.word	0x0001f648
    f48c:	0001e920 	.word	0x0001e920

0000f490 <isr_rx_aux_chain>:
{
    f490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f494:	b084      	sub	sp, #16
    f496:	4604      	mov	r4, r0
	lll_aux = lll->lll_aux;
    f498:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
	if (!lll_aux) {
    f49a:	b387      	cbz	r7, f4fe <isr_rx_aux_chain+0x6e>
	trx_done = radio_is_done();
    f49c:	f000 fc5c 	bl	fd58 <radio_is_done>
	if (trx_done) {
    f4a0:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
    f4a4:	d12e      	bne.n	f504 <isr_rx_aux_chain+0x74>
		crc_ok = phy_flags_rx = rssi_ready = cte_ready = 0U;
    f4a6:	462e      	mov	r6, r5
    f4a8:	46a9      	mov	r9, r5
    f4aa:	46aa      	mov	sl, r5
    f4ac:	46a8      	mov	r8, r5
	lll_isr_rx_status_reset();
    f4ae:	f00c ffb1 	bl	1c414 <lll_isr_rx_status_reset>
	if (!trx_done) {
    f4b2:	bbad      	cbnz	r5, f520 <isr_rx_aux_chain+0x90>
		err = 0;
    f4b4:	2000      	movs	r0, #0
	if (!crc_ok || err) {
    f4b6:	b106      	cbz	r6, f4ba <isr_rx_aux_chain+0x2a>
    f4b8:	b188      	cbz	r0, f4de <isr_rx_aux_chain+0x4e>
		node_rx = ull_pdu_rx_alloc();
    f4ba:	f7fa fa31 	bl	9920 <ull_pdu_rx_alloc>
		LL_ASSERT(node_rx);
    f4be:	4605      	mov	r5, r0
    f4c0:	2800      	cmp	r0, #0
    f4c2:	d03d      	beq.n	f540 <isr_rx_aux_chain+0xb0>
		node_rx->hdr.type = NODE_RX_TYPE_EXT_AUX_RELEASE;
    f4c4:	230a      	movs	r3, #10
    f4c6:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.rx_ftr.param = lll;
    f4c8:	60ac      	str	r4, [r5, #8]
		node_rx->hdr.rx_ftr.aux_failed = 1U;
    f4ca:	7eeb      	ldrb	r3, [r5, #27]
    f4cc:	f043 0310 	orr.w	r3, r3, #16
    f4d0:	76eb      	strb	r3, [r5, #27]
		ull_rx_put(node_rx->hdr.link, node_rx);
    f4d2:	4629      	mov	r1, r5
    f4d4:	6828      	ldr	r0, [r5, #0]
    f4d6:	f7fa fa3f 	bl	9958 <ull_rx_put>
		ull_rx_sched();
    f4da:	f7fa fa45 	bl	9968 <ull_rx_sched>
	if (lll->is_aux_sched) {
    f4de:	7b23      	ldrb	r3, [r4, #12]
    f4e0:	f013 0f04 	tst.w	r3, #4
    f4e4:	d03a      	beq.n	f55c <isr_rx_aux_chain+0xcc>
		lll->is_aux_sched = 0U;
    f4e6:	7b23      	ldrb	r3, [r4, #12]
    f4e8:	f36f 0382 	bfc	r3, #2, #1
    f4ec:	7323      	strb	r3, [r4, #12]
		isr_rx_done_cleanup(lll, 1U, false);
    f4ee:	2200      	movs	r2, #0
    f4f0:	2101      	movs	r1, #1
    f4f2:	4620      	mov	r0, r4
    f4f4:	f7ff fc42 	bl	ed7c <isr_rx_done_cleanup>
}
    f4f8:	b004      	add	sp, #16
    f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		lll_isr_status_reset();
    f4fe:	f00c ff91 	bl	1c424 <lll_isr_status_reset>
	if (!crc_ok || err) {
    f502:	e7da      	b.n	f4ba <isr_rx_aux_chain+0x2a>
		crc_ok = radio_crc_is_valid();
    f504:	f000 fc60 	bl	fdc8 <radio_crc_is_valid>
    f508:	b2c6      	uxtb	r6, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    f50a:	f00d fa27 	bl	1c95c <radio_phy_flags_rx_get>
    f50e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
    f510:	f000 fd70 	bl	fff4 <radio_rssi_is_ready>
    f514:	fa5f fa80 	uxtb.w	sl, r0
			cte_ready = radio_df_cte_ready();
    f518:	f000 faa2 	bl	fa60 <radio_df_cte_ready>
    f51c:	4681      	mov	r9, r0
    f51e:	e7c6      	b.n	f4ae <isr_rx_aux_chain+0x1e>
	err = isr_rx(lll, NODE_RX_TYPE_EXT_AUX_REPORT, crc_ok, phy_flags_rx,
    f520:	2301      	movs	r3, #1
    f522:	9302      	str	r3, [sp, #8]
    f524:	f8cd a004 	str.w	sl, [sp, #4]
    f528:	f8cd 9000 	str.w	r9, [sp]
    f52c:	4643      	mov	r3, r8
    f52e:	4632      	mov	r2, r6
    f530:	2109      	movs	r1, #9
    f532:	4620      	mov	r0, r4
    f534:	f7ff fe42 	bl	f1bc <isr_rx>
	if (err == -EBUSY) {
    f538:	f110 0f10 	cmn.w	r0, #16
    f53c:	d1bb      	bne.n	f4b6 <isr_rx_aux_chain+0x26>
    f53e:	e7db      	b.n	f4f8 <isr_rx_aux_chain+0x68>
		LL_ASSERT(node_rx);
    f540:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    f544:	4a07      	ldr	r2, [pc, #28]	; (f564 <isr_rx_aux_chain+0xd4>)
    f546:	4908      	ldr	r1, [pc, #32]	; (f568 <isr_rx_aux_chain+0xd8>)
    f548:	4808      	ldr	r0, [pc, #32]	; (f56c <isr_rx_aux_chain+0xdc>)
    f54a:	f00a f940 	bl	197ce <assert_print>
    f54e:	4040      	eors	r0, r0
    f550:	f380 8811 	msr	BASEPRI, r0
    f554:	f04f 0003 	mov.w	r0, #3
    f558:	df02      	svc	2
    f55a:	e7b3      	b.n	f4c4 <isr_rx_aux_chain+0x34>
		lll_isr_cleanup(lll_aux);
    f55c:	4638      	mov	r0, r7
    f55e:	f7fd fda7 	bl	d0b0 <lll_isr_cleanup>
    f562:	e7c9      	b.n	f4f8 <isr_rx_aux_chain+0x68>
    f564:	0001f5fc 	.word	0x0001f5fc
    f568:	0001f53c 	.word	0x0001f53c
    f56c:	0001e920 	.word	0x0001e920

0000f570 <isr_rx_adv_sync>:
{
    f570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f574:	b085      	sub	sp, #20
    f576:	4605      	mov	r5, r0
	trx_done = radio_is_done();
    f578:	f000 fbee 	bl	fd58 <radio_is_done>
	if (trx_done) {
    f57c:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    f580:	d10e      	bne.n	f5a0 <isr_rx_adv_sync+0x30>
		crc_ok = phy_flags_rx = rssi_ready = cte_ready = 0U;
    f582:	4626      	mov	r6, r4
    f584:	46a0      	mov	r8, r4
    f586:	46a1      	mov	r9, r4
    f588:	4627      	mov	r7, r4
	lll_isr_rx_status_reset();
    f58a:	f00c ff43 	bl	1c414 <lll_isr_rx_status_reset>
	if (!trx_done) {
    f58e:	b9c4      	cbnz	r4, f5c2 <isr_rx_adv_sync+0x52>
	isr_rx_done_cleanup(lll, crc_ok, false);
    f590:	2200      	movs	r2, #0
    f592:	4631      	mov	r1, r6
    f594:	4628      	mov	r0, r5
    f596:	f7ff fbf1 	bl	ed7c <isr_rx_done_cleanup>
}
    f59a:	b005      	add	sp, #20
    f59c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
    f5a0:	f000 fc12 	bl	fdc8 <radio_crc_is_valid>
    f5a4:	b2c6      	uxtb	r6, r0
		rssi_ready = radio_rssi_is_ready();
    f5a6:	f000 fd25 	bl	fff4 <radio_rssi_is_ready>
    f5aa:	fa5f f980 	uxtb.w	r9, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    f5ae:	f00d f9d5 	bl	1c95c <radio_phy_flags_rx_get>
    f5b2:	4607      	mov	r7, r0
		trx_cnt = 1U;
    f5b4:	4b0f      	ldr	r3, [pc, #60]	; (f5f4 <isr_rx_adv_sync+0x84>)
    f5b6:	2201      	movs	r2, #1
    f5b8:	701a      	strb	r2, [r3, #0]
			cte_ready = radio_df_cte_ready();
    f5ba:	f000 fa51 	bl	fa60 <radio_df_cte_ready>
    f5be:	4680      	mov	r8, r0
    f5c0:	e7e3      	b.n	f58a <isr_rx_adv_sync+0x1a>
	radio_tmr_aa_save(radio_tmr_aa_get());
    f5c2:	f000 fea9 	bl	10318 <radio_tmr_aa_get>
    f5c6:	f000 fead 	bl	10324 <radio_tmr_aa_save>
	radio_tmr_ready_save(radio_tmr_ready_get());
    f5ca:	f000 feb7 	bl	1033c <radio_tmr_ready_get>
    f5ce:	f000 febb 	bl	10348 <radio_tmr_ready_save>
	err = isr_rx(lll, NODE_RX_TYPE_SYNC_REPORT, crc_ok, phy_flags_rx,
    f5d2:	2301      	movs	r3, #1
    f5d4:	9302      	str	r3, [sp, #8]
    f5d6:	f8cd 9004 	str.w	r9, [sp, #4]
    f5da:	f8cd 8000 	str.w	r8, [sp]
    f5de:	463b      	mov	r3, r7
    f5e0:	4632      	mov	r2, r6
    f5e2:	210d      	movs	r1, #13
    f5e4:	4628      	mov	r0, r5
    f5e6:	f7ff fde9 	bl	f1bc <isr_rx>
	if (err == -EBUSY) {
    f5ea:	f110 0f10 	cmn.w	r0, #16
    f5ee:	d1cf      	bne.n	f590 <isr_rx_adv_sync+0x20>
    f5f0:	e7d3      	b.n	f59a <isr_rx_adv_sync+0x2a>
    f5f2:	bf00      	nop
    f5f4:	2000929e 	.word	0x2000929e

0000f5f8 <lll_sync_create_prepare>:
{
    f5f8:	b510      	push	{r4, lr}
    f5fa:	b082      	sub	sp, #8
    f5fc:	4604      	mov	r4, r0
	prepare(param);
    f5fe:	f7ff fdb7 	bl	f170 <prepare>
	err = lll_prepare(is_abort_cb, abort_cb, create_prepare_cb, 0, param);
    f602:	9400      	str	r4, [sp, #0]
    f604:	2300      	movs	r3, #0
    f606:	4a0c      	ldr	r2, [pc, #48]	; (f638 <lll_sync_create_prepare+0x40>)
    f608:	490c      	ldr	r1, [pc, #48]	; (f63c <lll_sync_create_prepare+0x44>)
    f60a:	480d      	ldr	r0, [pc, #52]	; (f640 <lll_sync_create_prepare+0x48>)
    f60c:	f00c fac6 	bl	1bb9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    f610:	b110      	cbz	r0, f618 <lll_sync_create_prepare+0x20>
    f612:	f110 0f77 	cmn.w	r0, #119	; 0x77
    f616:	d101      	bne.n	f61c <lll_sync_create_prepare+0x24>
}
    f618:	b002      	add	sp, #8
    f61a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
    f61c:	2368      	movs	r3, #104	; 0x68
    f61e:	4a09      	ldr	r2, [pc, #36]	; (f644 <lll_sync_create_prepare+0x4c>)
    f620:	4909      	ldr	r1, [pc, #36]	; (f648 <lll_sync_create_prepare+0x50>)
    f622:	480a      	ldr	r0, [pc, #40]	; (f64c <lll_sync_create_prepare+0x54>)
    f624:	f00a f8d3 	bl	197ce <assert_print>
    f628:	4040      	eors	r0, r0
    f62a:	f380 8811 	msr	BASEPRI, r0
    f62e:	f04f 0003 	mov.w	r0, #3
    f632:	df02      	svc	2
}
    f634:	e7f0      	b.n	f618 <lll_sync_create_prepare+0x20>
    f636:	bf00      	nop
    f638:	0000eff5 	.word	0x0000eff5
    f63c:	0000f115 	.word	0x0000f115
    f640:	0001c7a7 	.word	0x0001c7a7
    f644:	0001f5fc 	.word	0x0001f5fc
    f648:	0001f560 	.word	0x0001f560
    f64c:	0001e920 	.word	0x0001e920

0000f650 <lll_sync_prepare>:
{
    f650:	b510      	push	{r4, lr}
    f652:	b082      	sub	sp, #8
    f654:	4604      	mov	r4, r0
	prepare(param);
    f656:	f7ff fd8b 	bl	f170 <prepare>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
    f65a:	9400      	str	r4, [sp, #0]
    f65c:	2300      	movs	r3, #0
    f65e:	4a0c      	ldr	r2, [pc, #48]	; (f690 <lll_sync_prepare+0x40>)
    f660:	490c      	ldr	r1, [pc, #48]	; (f694 <lll_sync_prepare+0x44>)
    f662:	480d      	ldr	r0, [pc, #52]	; (f698 <lll_sync_prepare+0x48>)
    f664:	f00c fa9a 	bl	1bb9c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
    f668:	b110      	cbz	r0, f670 <lll_sync_prepare+0x20>
    f66a:	f110 0f77 	cmn.w	r0, #119	; 0x77
    f66e:	d101      	bne.n	f674 <lll_sync_prepare+0x24>
}
    f670:	b002      	add	sp, #8
    f672:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
    f674:	2373      	movs	r3, #115	; 0x73
    f676:	4a09      	ldr	r2, [pc, #36]	; (f69c <lll_sync_prepare+0x4c>)
    f678:	4909      	ldr	r1, [pc, #36]	; (f6a0 <lll_sync_prepare+0x50>)
    f67a:	480a      	ldr	r0, [pc, #40]	; (f6a4 <lll_sync_prepare+0x54>)
    f67c:	f00a f8a7 	bl	197ce <assert_print>
    f680:	4040      	eors	r0, r0
    f682:	f380 8811 	msr	BASEPRI, r0
    f686:	f04f 0003 	mov.w	r0, #3
    f68a:	df02      	svc	2
}
    f68c:	e7f0      	b.n	f670 <lll_sync_prepare+0x20>
    f68e:	bf00      	nop
    f690:	0000f089 	.word	0x0000f089
    f694:	0000f115 	.word	0x0000f115
    f698:	0001c7a7 	.word	0x0001c7a7
    f69c:	0001f5fc 	.word	0x0001f5fc
    f6a0:	0001f560 	.word	0x0001f560
    f6a4:	0001e920 	.word	0x0001e920

0000f6a8 <lll_sync_aux_prepare_cb>:
{
    f6a8:	b570      	push	{r4, r5, r6, lr}
    f6aa:	b082      	sub	sp, #8
    f6ac:	4604      	mov	r4, r0
    f6ae:	460d      	mov	r5, r1
	trx_cnt = 0U;
    f6b0:	4b32      	ldr	r3, [pc, #200]	; (f77c <lll_sync_aux_prepare_cb+0xd4>)
    f6b2:	2200      	movs	r2, #0
    f6b4:	701a      	strb	r2, [r3, #0]
	radio_reset();
    f6b6:	f000 fa7d 	bl	fbb4 <radio_reset>
	radio_phy_set(lll_aux->phy, PHY_FLAGS_S8);
    f6ba:	7968      	ldrb	r0, [r5, #5]
    f6bc:	2101      	movs	r1, #1
    f6be:	f000 0007 	and.w	r0, r0, #7
    f6c2:	f000 fa8f 	bl	fbe4 <radio_phy_set>
			    RADIO_PKT_CONF_PHY(lll_aux->phy));
    f6c6:	796a      	ldrb	r2, [r5, #5]
    f6c8:	f002 0207 	and.w	r2, r2, #7
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, LL_EXT_OCTETS_RX_MAX,
    f6cc:	0052      	lsls	r2, r2, #1
    f6ce:	21ff      	movs	r1, #255	; 0xff
    f6d0:	2008      	movs	r0, #8
    f6d2:	f000 fad1 	bl	fc78 <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
    f6d6:	2001      	movs	r0, #1
    f6d8:	f7fa f902 	bl	98e0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    f6dc:	4606      	mov	r6, r0
    f6de:	b340      	cbz	r0, f732 <lll_sync_aux_prepare_cb+0x8a>
	radio_pkt_rx_set(node_rx->pdu);
    f6e0:	f106 0020 	add.w	r0, r6, #32
    f6e4:	f000 fafa 	bl	fcdc <radio_pkt_rx_set>
	radio_aa_set(lll->access_addr);
    f6e8:	1d20      	adds	r0, r4, #4
    f6ea:	f000 faad 	bl	fc48 <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
    f6ee:	7aa1      	ldrb	r1, [r4, #10]
	return ((uint16_t)src[1] << 8) | src[0];
    f6f0:	7a62      	ldrb	r2, [r4, #9]
    f6f2:	7a23      	ldrb	r3, [r4, #8]
    f6f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
    f6f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    f6fc:	f240 605b 	movw	r0, #1627	; 0x65b
    f700:	f000 fb56 	bl	fdb0 <radio_crc_configure>
	lll_chan_set(lll_aux->chan);
    f704:	7928      	ldrb	r0, [r5, #4]
    f706:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    f70a:	f7fd fc97 	bl	d03c <lll_chan_set>
	radio_isr_set(isr_rx_aux_chain, lll);
    f70e:	4621      	mov	r1, r4
    f710:	481b      	ldr	r0, [pc, #108]	; (f780 <lll_sync_aux_prepare_cb+0xd8>)
    f712:	f000 fa31 	bl	fb78 <radio_isr_set>
	cfg = lll_df_sync_cfg_latest_get(&lll->df_cfg, NULL);
    f716:	2100      	movs	r1, #0
    f718:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f71c:	f00d f8ab 	bl	1c876 <lll_df_sync_cfg_latest_get>
    f720:	4604      	mov	r4, r0
	if (cfg->is_enabled) {
    f722:	7803      	ldrb	r3, [r0, #0]
    f724:	f013 0f01 	tst.w	r3, #1
    f728:	d110      	bne.n	f74c <lll_sync_aux_prepare_cb+0xa4>
	radio_switch_complete_and_disable();
    f72a:	f000 fc3b 	bl	ffa4 <radio_switch_complete_and_disable>
}
    f72e:	b002      	add	sp, #8
    f730:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_rx);
    f732:	239c      	movs	r3, #156	; 0x9c
    f734:	4a13      	ldr	r2, [pc, #76]	; (f784 <lll_sync_aux_prepare_cb+0xdc>)
    f736:	4914      	ldr	r1, [pc, #80]	; (f788 <lll_sync_aux_prepare_cb+0xe0>)
    f738:	4814      	ldr	r0, [pc, #80]	; (f78c <lll_sync_aux_prepare_cb+0xe4>)
    f73a:	f00a f848 	bl	197ce <assert_print>
    f73e:	4040      	eors	r0, r0
    f740:	f380 8811 	msr	BASEPRI, r0
    f744:	f04f 0003 	mov.w	r0, #3
    f748:	df02      	svc	2
    f74a:	e7c9      	b.n	f6e0 <lll_sync_aux_prepare_cb+0x38>
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f74c:	4618      	mov	r0, r3
    f74e:	78a1      	ldrb	r1, [r4, #2]
					  lll_aux->chan, CTE_INFO_IN_PAYLOAD, lll_aux->phy);
    f750:	792b      	ldrb	r3, [r5, #4]
    f752:	796a      	ldrb	r2, [r5, #5]
    f754:	f002 0207 	and.w	r2, r2, #7
		lll_df_conf_cte_rx_enable(cfg->slot_durations, cfg->ant_sw_len, cfg->ant_ids,
    f758:	9201      	str	r2, [sp, #4]
    f75a:	2500      	movs	r5, #0
    f75c:	9500      	str	r5, [sp, #0]
    f75e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    f762:	1ce2      	adds	r2, r4, #3
    f764:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f768:	f3c0 0041 	ubfx	r0, r0, #1, #2
    f76c:	f000 f88a 	bl	f884 <lll_df_conf_cte_rx_enable>
		cfg->cte_count = 0;
    f770:	7863      	ldrb	r3, [r4, #1]
    f772:	f365 0304 	bfi	r3, r5, #0, #5
    f776:	7063      	strb	r3, [r4, #1]
    f778:	e7d7      	b.n	f72a <lll_sync_aux_prepare_cb+0x82>
    f77a:	bf00      	nop
    f77c:	2000929e 	.word	0x2000929e
    f780:	0000f491 	.word	0x0000f491
    f784:	0001f5fc 	.word	0x0001f5fc
    f788:	0001f53c 	.word	0x0001f53c
    f78c:	0001e920 	.word	0x0001e920

0000f790 <sync_filtrate_by_cte_type>:
	return lll_chan_sel_2(lll->event_counter + lll->skip_event, lll->data_chan_id,
			      data_chan_map, data_chan_count);
}

static enum sync_status sync_filtrate_by_cte_type(uint8_t cte_type_mask, uint8_t filter_policy)
{
    f790:	b508      	push	{r3, lr}
}

#if defined(RADIO_CTESTATUS_CTETIME_Msk)
NRF_STATIC_INLINE uint32_t nrf_radio_cte_time_get(NRF_RADIO_Type const * p_reg)
{
    return ((p_reg->CTESTATUS & RADIO_CTESTATUS_CTETIME_Msk) >> RADIO_CTESTATUS_CTETIME_Pos);
    f792:	4b06      	ldr	r3, [pc, #24]	; (f7ac <sync_filtrate_by_cte_type+0x1c>)
    f794:	f8d3 244c 	ldr.w	r2, [r3, #1100]	; 0x44c
}

NRF_STATIC_INLINE uint32_t nrf_radio_cte_type_get(NRF_RADIO_Type const * p_reg)
{
    return ((p_reg->CTESTATUS & RADIO_CTESTATUS_CTETYPE_Msk) >> RADIO_CTESTATUS_CTETYPE_Pos);
    f798:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
	uint8_t rx_cte_type;

	rx_cte_time = nrf_radio_cte_time_get(NRF_RADIO);
	rx_cte_type = nrf_radio_cte_type_get(NRF_RADIO);

	return lll_sync_cte_is_allowed(cte_type_mask, filter_policy, rx_cte_time, rx_cte_type);
    f79c:	f3c3 1381 	ubfx	r3, r3, #6, #2
    f7a0:	f002 021f 	and.w	r2, r2, #31
    f7a4:	f00d f810 	bl	1c7c8 <lll_sync_cte_is_allowed>

#endif /* CONFIG_BT_CTLR_SYNC_PERIODIC_CTE_TYPE_FILTERING && CONFIG_BT_CTLR_CTEINLINE_SUPPORT */
	return SYNC_STAT_ALLOWED;
}
    f7a8:	bd08      	pop	{r3, pc}
    f7aa:	bf00      	nop
    f7ac:	40001000 	.word	0x40001000

0000f7b0 <isr_rx_adv_sync_estab>:
{
    f7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f7b4:	b084      	sub	sp, #16
    f7b6:	4606      	mov	r6, r0
	trx_done = radio_is_done();
    f7b8:	f000 face 	bl	fd58 <radio_is_done>
	if (trx_done) {
    f7bc:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
    f7c0:	d112      	bne.n	f7e8 <isr_rx_adv_sync_estab+0x38>
		crc_ok = phy_flags_rx = rssi_ready = cte_ready = 0U;
    f7c2:	4627      	mov	r7, r4
    f7c4:	46a1      	mov	r9, r4
    f7c6:	46a2      	mov	sl, r4
    f7c8:	46a0      	mov	r8, r4
		sync_ok = SYNC_STAT_ALLOWED;
    f7ca:	4625      	mov	r5, r4
	lll_isr_rx_status_reset();
    f7cc:	f00c fe22 	bl	1c414 <lll_isr_rx_status_reset>
	if (!trx_done) {
    f7d0:	bb1c      	cbnz	r4, f81a <isr_rx_adv_sync_estab+0x6a>
	isr_rx_done_cleanup(lll, crc_ok, sync_ok == SYNC_STAT_TERM);
    f7d2:	2d02      	cmp	r5, #2
    f7d4:	bf14      	ite	ne
    f7d6:	2200      	movne	r2, #0
    f7d8:	2201      	moveq	r2, #1
    f7da:	4639      	mov	r1, r7
    f7dc:	4630      	mov	r0, r6
    f7de:	f7ff facd 	bl	ed7c <isr_rx_done_cleanup>
}
    f7e2:	b004      	add	sp, #16
    f7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		crc_ok = radio_crc_is_valid();
    f7e8:	f000 faee 	bl	fdc8 <radio_crc_is_valid>
    f7ec:	b2c7      	uxtb	r7, r0
		rssi_ready = radio_rssi_is_ready();
    f7ee:	f000 fc01 	bl	fff4 <radio_rssi_is_ready>
    f7f2:	fa5f fa80 	uxtb.w	sl, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    f7f6:	f00d f8b1 	bl	1c95c <radio_phy_flags_rx_get>
    f7fa:	4680      	mov	r8, r0
		sync_ok = sync_filtrate_by_cte_type(lll->cte_type, lll->filter_policy);
    f7fc:	7af0      	ldrb	r0, [r6, #11]
    f7fe:	7b31      	ldrb	r1, [r6, #12]
    f800:	f001 0101 	and.w	r1, r1, #1
    f804:	08c0      	lsrs	r0, r0, #3
    f806:	f7ff ffc3 	bl	f790 <sync_filtrate_by_cte_type>
    f80a:	4605      	mov	r5, r0
		trx_cnt = 1U;
    f80c:	4b1c      	ldr	r3, [pc, #112]	; (f880 <isr_rx_adv_sync_estab+0xd0>)
    f80e:	2201      	movs	r2, #1
    f810:	701a      	strb	r2, [r3, #0]
			cte_ready = radio_df_cte_ready();
    f812:	f000 f925 	bl	fa60 <radio_df_cte_ready>
    f816:	4681      	mov	r9, r0
    f818:	e7d8      	b.n	f7cc <isr_rx_adv_sync_estab+0x1c>
	radio_tmr_aa_save(radio_tmr_aa_get());
    f81a:	f000 fd7d 	bl	10318 <radio_tmr_aa_get>
    f81e:	f000 fd81 	bl	10324 <radio_tmr_aa_save>
	radio_tmr_ready_save(radio_tmr_ready_get());
    f822:	f000 fd8b 	bl	1033c <radio_tmr_ready_get>
    f826:	f000 fd8f 	bl	10348 <radio_tmr_ready_save>
	if (sync_ok == SYNC_STAT_ALLOWED) {
    f82a:	b1c5      	cbz	r5, f85e <isr_rx_adv_sync_estab+0xae>
	} else if (sync_ok == SYNC_STAT_TERM) {
    f82c:	2d02      	cmp	r5, #2
    f82e:	d1d0      	bne.n	f7d2 <isr_rx_adv_sync_estab+0x22>
		node_rx = ull_pdu_rx_alloc_peek(3);
    f830:	2003      	movs	r0, #3
    f832:	f7fa f855 	bl	98e0 <ull_pdu_rx_alloc_peek>
		if (node_rx) {
    f836:	4604      	mov	r4, r0
    f838:	2800      	cmp	r0, #0
    f83a:	d0ca      	beq.n	f7d2 <isr_rx_adv_sync_estab+0x22>
			ull_pdu_rx_alloc();
    f83c:	f7fa f870 	bl	9920 <ull_pdu_rx_alloc>
			node_rx->hdr.type = NODE_RX_TYPE_SYNC;
    f840:	230c      	movs	r3, #12
    f842:	7123      	strb	r3, [r4, #4]
			ftr->param = lll;
    f844:	60a6      	str	r6, [r4, #8]
			ftr->sync_status = SYNC_STAT_TERM;
    f846:	7ea3      	ldrb	r3, [r4, #26]
    f848:	2202      	movs	r2, #2
    f84a:	f362 1387 	bfi	r3, r2, #6, #2
    f84e:	76a3      	strb	r3, [r4, #26]
			ull_rx_put(node_rx->hdr.link, node_rx);
    f850:	4621      	mov	r1, r4
    f852:	6820      	ldr	r0, [r4, #0]
    f854:	f7fa f880 	bl	9958 <ull_rx_put>
			ull_rx_sched();
    f858:	f7fa f886 	bl	9968 <ull_rx_sched>
    f85c:	e7b9      	b.n	f7d2 <isr_rx_adv_sync_estab+0x22>
		err = isr_rx(lll, NODE_RX_TYPE_SYNC, crc_ok, phy_flags_rx,
    f85e:	2300      	movs	r3, #0
    f860:	9302      	str	r3, [sp, #8]
    f862:	f8cd a004 	str.w	sl, [sp, #4]
    f866:	f8cd 9000 	str.w	r9, [sp]
    f86a:	4643      	mov	r3, r8
    f86c:	463a      	mov	r2, r7
    f86e:	210c      	movs	r1, #12
    f870:	4630      	mov	r0, r6
    f872:	f7ff fca3 	bl	f1bc <isr_rx>
		if (err == -EBUSY) {
    f876:	f110 0f10 	cmn.w	r0, #16
    f87a:	d1aa      	bne.n	f7d2 <isr_rx_adv_sync_estab+0x22>
    f87c:	e7b1      	b.n	f7e2 <isr_rx_adv_sync_estab+0x32>
    f87e:	bf00      	nop
    f880:	2000929e 	.word	0x2000929e

0000f884 <lll_df_conf_cte_rx_enable>:
 *
 * In case of AoA mode ant_num and ant_ids parameters are not used.
 */
void lll_df_conf_cte_rx_enable(uint8_t slot_duration, uint8_t ant_num, const uint8_t *ant_ids,
			       uint8_t chan_idx, bool cte_info_in_s1, uint8_t phy)
{
    f884:	b570      	push	{r4, r5, r6, lr}
    f886:	460e      	mov	r6, r1
    f888:	4615      	mov	r5, r2
    f88a:	461c      	mov	r4, r3
    f88c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    f890:	f89d 1014 	ldrb.w	r1, [sp, #20]
	struct node_rx_iq_report *node_rx;

	/* ToDo change to appropriate HCI constant */
#if defined(CONFIG_BT_CTLR_DF_ANT_SWITCH_1US)
	if (slot_duration == 0x1) {
    f894:	2801      	cmp	r0, #1
    f896:	d017      	beq.n	f8c8 <lll_df_conf_cte_rx_enable+0x44>
		radio_df_cte_rx_2us_switching(cte_info_in_s1, phy);
	} else
#endif /* CONFIG_BT_CTLR_DF_ANT_SWITCH_1US */
	{
		radio_df_cte_rx_4us_switching(cte_info_in_s1, phy);
    f898:	4618      	mov	r0, r3
    f89a:	f000 f8a9 	bl	f9f0 <radio_df_cte_rx_4us_switching>
	}

#if defined(CONFIG_BT_CTLR_DF_ANT_SWITCH_RX)
	radio_df_ant_switching_pin_sel_cfg();
    f89e:	f000 f83f 	bl	f920 <radio_df_ant_switching_pin_sel_cfg>
	radio_df_ant_switch_pattern_clear();
    f8a2:	f000 f8bf 	bl	fa24 <radio_df_ant_switch_pattern_clear>
	radio_df_ant_switch_pattern_set(ant_ids, ant_num);
    f8a6:	4631      	mov	r1, r6
    f8a8:	4628      	mov	r0, r5
    f8aa:	f000 f825 	bl	f8f8 <radio_df_ant_switch_pattern_set>
#endif /* CONFIG_BT_CTLR_DF_ANT_SWITCH_RX */

	node_rx = ull_df_iq_report_alloc_peek(1);
    f8ae:	2001      	movs	r0, #1
    f8b0:	f7fb fe80 	bl	b5b4 <ull_df_iq_report_alloc_peek>
	LL_ASSERT(node_rx);
    f8b4:	4605      	mov	r5, r0
    f8b6:	b158      	cbz	r0, f8d0 <lll_df_conf_cte_rx_enable+0x4c>

	radio_df_iq_data_packet_set(node_rx->pdu, IQ_SAMPLE_TOTAL_CNT);
    f8b8:	2152      	movs	r1, #82	; 0x52
    f8ba:	f105 0028 	add.w	r0, r5, #40	; 0x28
    f8be:	f000 f8b9 	bl	fa34 <radio_df_iq_data_packet_set>
	node_rx->chan_idx = chan_idx;
    f8c2:	f885 4025 	strb.w	r4, [r5, #37]	; 0x25
}
    f8c6:	bd70      	pop	{r4, r5, r6, pc}
		radio_df_cte_rx_2us_switching(cte_info_in_s1, phy);
    f8c8:	4618      	mov	r0, r3
    f8ca:	f000 f877 	bl	f9bc <radio_df_cte_rx_2us_switching>
    f8ce:	e7e6      	b.n	f89e <lll_df_conf_cte_rx_enable+0x1a>
	LL_ASSERT(node_rx);
    f8d0:	23f7      	movs	r3, #247	; 0xf7
    f8d2:	4a06      	ldr	r2, [pc, #24]	; (f8ec <lll_df_conf_cte_rx_enable+0x68>)
    f8d4:	4906      	ldr	r1, [pc, #24]	; (f8f0 <lll_df_conf_cte_rx_enable+0x6c>)
    f8d6:	4807      	ldr	r0, [pc, #28]	; (f8f4 <lll_df_conf_cte_rx_enable+0x70>)
    f8d8:	f009 ff79 	bl	197ce <assert_print>
    f8dc:	4040      	eors	r0, r0
    f8de:	f380 8811 	msr	BASEPRI, r0
    f8e2:	f04f 0003 	mov.w	r0, #3
    f8e6:	df02      	svc	2
    f8e8:	e7e6      	b.n	f8b8 <lll_df_conf_cte_rx_enable+0x34>
    f8ea:	bf00      	nop
    f8ec:	0001f654 	.word	0x0001f654
    f8f0:	0001f53c 	.word	0x0001f53c
    f8f4:	0001e920 	.word	0x0001e920

0000f8f8 <radio_df_ant_switch_pattern_set>:
	 * - SWITCHPATTERN[2] and following for switch-sampling slots.
	 * Due to that in SWITCHPATTER[0] there is stored a pattern provided by
	 * DTS property dfe_pdu_antenna. This limits number of supported antenna
	 * switch patterns by one.
	 */
	NRF_RADIO->SWITCHPATTERN = PDU_ANTENNA;
    f8f8:	2300      	movs	r3, #0
    f8fa:	4a08      	ldr	r2, [pc, #32]	; (f91c <radio_df_ant_switch_pattern_set+0x24>)
    f8fc:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
	for (uint8_t idx = 0; idx < len; ++idx) {
    f900:	428b      	cmp	r3, r1
    f902:	d20a      	bcs.n	f91a <radio_df_ant_switch_pattern_set+0x22>
{
    f904:	b410      	push	{r4}
		NRF_RADIO->SWITCHPATTERN = patterns[idx];
    f906:	5cc4      	ldrb	r4, [r0, r3]
    f908:	4a04      	ldr	r2, [pc, #16]	; (f91c <radio_df_ant_switch_pattern_set+0x24>)
    f90a:	f8c2 4928 	str.w	r4, [r2, #2344]	; 0x928
	for (uint8_t idx = 0; idx < len; ++idx) {
    f90e:	3301      	adds	r3, #1
    f910:	b2db      	uxtb	r3, r3
    f912:	428b      	cmp	r3, r1
    f914:	d3f7      	bcc.n	f906 <radio_df_ant_switch_pattern_set+0xe>
	}
}
    f916:	bc10      	pop	{r4}
    f918:	4770      	bx	lr
    f91a:	4770      	bx	lr
    f91c:	40001000 	.word	0x40001000

0000f920 <radio_df_ant_switching_pin_sel_cfg>:
 */
void radio_df_ant_switching_pin_sel_cfg(void)
{
	uint8_t pin_sel;

	for (uint8_t idx = 0; idx < MAX_DFE_GPIO; ++idx) {
    f920:	2300      	movs	r3, #0
    f922:	e008      	b.n	f936 <radio_df_ant_switching_pin_sel_cfg+0x16>
#if defined(RADIO_SWITCHPATTERN_SWITCHPATTERN_Msk)
NRF_STATIC_INLINE void nrf_radio_dfe_pattern_pin_set(NRF_RADIO_Type * p_reg,
                                                     uint32_t         pin,
                                                     uint8_t          pos)
{
    p_reg->PSEL.DFEGPIO[pos] = pin;
    f924:	f503 7213 	add.w	r2, r3, #588	; 0x24c
    f928:	490a      	ldr	r1, [pc, #40]	; (f954 <radio_df_ant_switching_pin_sel_cfg+0x34>)
    f92a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    f92e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
    f932:	3301      	adds	r3, #1
    f934:	b2db      	uxtb	r3, r3
    f936:	2b07      	cmp	r3, #7
    f938:	d80a      	bhi.n	f950 <radio_df_ant_switching_pin_sel_cfg+0x30>
		pin_sel = ant_cfg.dfe_gpio[idx];
    f93a:	4a07      	ldr	r2, [pc, #28]	; (f958 <radio_df_ant_switching_pin_sel_cfg+0x38>)
    f93c:	441a      	add	r2, r3
    f93e:	7852      	ldrb	r2, [r2, #1]

		if (pin_sel != DFE_PSEL_NOT_SET) {
    f940:	2aff      	cmp	r2, #255	; 0xff
    f942:	d0ef      	beq.n	f924 <radio_df_ant_switching_pin_sel_cfg+0x4>
    f944:	f503 7113 	add.w	r1, r3, #588	; 0x24c
    f948:	4802      	ldr	r0, [pc, #8]	; (f954 <radio_df_ant_switching_pin_sel_cfg+0x34>)
    f94a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
    f94e:	e7f0      	b.n	f932 <radio_df_ant_switching_pin_sel_cfg+0x12>
			nrf_radio_dfe_pattern_pin_set(NRF_RADIO,
						      DFE_GPIO_PIN_DISCONNECT,
						      idx);
		}
	}
}
    f950:	4770      	bx	lr
    f952:	bf00      	nop
    f954:	40001000 	.word	0x40001000
    f958:	0001f6a0 	.word	0x0001f6a0

0000f95c <radio_df_ant_switching_gpios_cfg>:
 */
void radio_df_ant_switching_gpios_cfg(void)
{
	uint8_t pin_sel;

	for (uint8_t idx = 0; idx < MAX_DFE_GPIO; ++idx) {
    f95c:	2300      	movs	r3, #0
    f95e:	e01e      	b.n	f99e <radio_df_ant_switching_gpios_cfg+0x42>
        /* FALLTHROUGH */
        case 0: return NRF_P0;
#endif
#if defined(P1_FEATURE_PINS_PRESENT)
        /* FALLTHROUGH */
        case 1: return NRF_P1;
    f960:	4914      	ldr	r1, [pc, #80]	; (f9b4 <radio_df_ant_switching_gpios_cfg+0x58>)
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
    f962:	f500 72e0 	add.w	r2, r0, #448	; 0x1c0
    f966:	2403      	movs	r4, #3
    f968:	f841 4022 	str.w	r4, [r1, r2, lsl #2]

NRF_STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    f96c:	2201      	movs	r2, #1
    f96e:	4082      	lsls	r2, r0
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    f970:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    f974:	3301      	adds	r3, #1
    f976:	b2db      	uxtb	r3, r3
    f978:	2b07      	cmp	r3, #7
    f97a:	d80c      	bhi.n	f996 <radio_df_ant_switching_gpios_cfg+0x3a>
		pin_sel = ant_cfg.dfe_gpio[idx];
    f97c:	4a0e      	ldr	r2, [pc, #56]	; (f9b8 <radio_df_ant_switching_gpios_cfg+0x5c>)
    f97e:	441a      	add	r2, r3
    f980:	7852      	ldrb	r2, [r2, #1]
		if (pin_sel != DFE_PSEL_NOT_SET) {
    f982:	2aff      	cmp	r2, #255	; 0xff
    f984:	d0f6      	beq.n	f974 <radio_df_ant_switching_gpios_cfg+0x18>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    f986:	f002 001f 	and.w	r0, r2, #31

    return pin_number >> 5;
    f98a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    f98c:	2a01      	cmp	r2, #1
    f98e:	d0e7      	beq.n	f960 <radio_df_ant_switching_gpios_cfg+0x4>
        case 0: return NRF_P0;
    f990:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    f994:	e7e5      	b.n	f962 <radio_df_ant_switching_gpios_cfg+0x6>
			} else {
				nrf_gpio_pin_clear(pin_sel);
			}
		}
	}
}
    f996:	bc10      	pop	{r4}
    f998:	4770      	bx	lr
	for (uint8_t idx = 0; idx < MAX_DFE_GPIO; ++idx) {
    f99a:	3301      	adds	r3, #1
    f99c:	b2db      	uxtb	r3, r3
    f99e:	2b07      	cmp	r3, #7
    f9a0:	d806      	bhi.n	f9b0 <radio_df_ant_switching_gpios_cfg+0x54>
		pin_sel = ant_cfg.dfe_gpio[idx];
    f9a2:	4a05      	ldr	r2, [pc, #20]	; (f9b8 <radio_df_ant_switching_gpios_cfg+0x5c>)
    f9a4:	441a      	add	r2, r3
    f9a6:	7852      	ldrb	r2, [r2, #1]
		if (pin_sel != DFE_PSEL_NOT_SET) {
    f9a8:	2aff      	cmp	r2, #255	; 0xff
    f9aa:	d0f6      	beq.n	f99a <radio_df_ant_switching_gpios_cfg+0x3e>
{
    f9ac:	b410      	push	{r4}
    f9ae:	e7ea      	b.n	f986 <radio_df_ant_switching_gpios_cfg+0x2a>
    f9b0:	4770      	bx	lr
    f9b2:	bf00      	nop
    f9b4:	50000300 	.word	0x50000300
    f9b8:	0001f6a0 	.word	0x0001f6a0

0000f9bc <radio_df_cte_rx_2us_switching>:
	radio_df_ctrl_set(cte_len, RADIO_DFECTRL1_TSWITCHSPACING_4us,
			  RADIO_DFECTRL1_TSAMPLESPACING_2us, PHY_LEGACY);
}

void radio_df_cte_rx_2us_switching(bool cte_info_in_s1, uint8_t phy)
{
    f9bc:	b508      	push	{r3, lr}
	NRF_RADIO->DFECTRL1 = conf;
    f9be:	4b0a      	ldr	r3, [pc, #40]	; (f9e8 <radio_df_cte_rx_2us_switching+0x2c>)
    f9c0:	4a0a      	ldr	r2, [pc, #40]	; (f9ec <radio_df_cte_rx_2us_switching+0x30>)
    f9c2:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	switch (phy) {
    f9c6:	2901      	cmp	r1, #1
    f9c8:	d009      	beq.n	f9de <radio_df_cte_rx_2us_switching+0x22>
    f9ca:	2902      	cmp	r1, #2
    f9cc:	d109      	bne.n	f9e2 <radio_df_cte_rx_2us_switching+0x26>
			sample_offset = CONFIG_BT_CTLR_DF_SAMPLE_OFFSET_PHY_2M_SAMPLING_1US;
    f9ce:	230f      	movs	r3, #15
	conf = ((((uint32_t)sample_offset << RADIO_DFECTRL2_TSAMPLEOFFSET_Pos) &
    f9d0:	041b      	lsls	r3, r3, #16
	NRF_RADIO->DFECTRL2 = conf;
    f9d2:	4a05      	ldr	r2, [pc, #20]	; (f9e8 <radio_df_cte_rx_2us_switching+0x2c>)
    f9d4:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
	 * spacing for slot and samples is the same.
	 * CTE duration is used only when CTEINLINE config is disabled.
	 */
	radio_df_ctrl_set(0, RADIO_DFECTRL1_TSWITCHSPACING_2us,
			  RADIO_DFECTRL1_TSAMPLESPACING_2us, phy);
	radio_df_cte_inline_set_enabled(cte_info_in_s1);
    f9d8:	f000 fd80 	bl	104dc <radio_df_cte_inline_set_enabled>
}
    f9dc:	bd08      	pop	{r3, pc}
			sample_offset = CONFIG_BT_CTLR_DF_SAMPLE_OFFSET_PHY_1M_SAMPLING_1US;
    f9de:	2301      	movs	r3, #1
    f9e0:	e7f6      	b.n	f9d0 <radio_df_cte_rx_2us_switching+0x14>
	switch (phy) {
    f9e2:	2300      	movs	r3, #0
    f9e4:	e7f4      	b.n	f9d0 <radio_df_cte_rx_2us_switching+0x14>
    f9e6:	bf00      	nop
    f9e8:	40001000 	.word	0x40001000
    f9ec:	00023280 	.word	0x00023280

0000f9f0 <radio_df_cte_rx_4us_switching>:

void radio_df_cte_rx_4us_switching(bool cte_info_in_s1, uint8_t phy)
{
    f9f0:	b508      	push	{r3, lr}
	NRF_RADIO->DFECTRL1 = conf;
    f9f2:	4b0a      	ldr	r3, [pc, #40]	; (fa1c <radio_df_cte_rx_4us_switching+0x2c>)
    f9f4:	4a0a      	ldr	r2, [pc, #40]	; (fa20 <radio_df_cte_rx_4us_switching+0x30>)
    f9f6:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
	switch (phy) {
    f9fa:	2901      	cmp	r1, #1
    f9fc:	d009      	beq.n	fa12 <radio_df_cte_rx_4us_switching+0x22>
    f9fe:	2902      	cmp	r1, #2
    fa00:	d109      	bne.n	fa16 <radio_df_cte_rx_4us_switching+0x26>
			sample_offset = CONFIG_BT_CTLR_DF_SAMPLE_OFFSET_PHY_2M_SAMPLING_2US;
    fa02:	2314      	movs	r3, #20
	conf = ((((uint32_t)sample_offset << RADIO_DFECTRL2_TSAMPLEOFFSET_Pos) &
    fa04:	041b      	lsls	r3, r3, #16
	NRF_RADIO->DFECTRL2 = conf;
    fa06:	4a05      	ldr	r2, [pc, #20]	; (fa1c <radio_df_cte_rx_4us_switching+0x2c>)
    fa08:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
	 * spacing for slot and samples is the same.
	 * CTE duration is used only when CTEINLINE config is disabled.
	 */
	radio_df_ctrl_set(0, RADIO_DFECTRL1_TSWITCHSPACING_4us,
			  RADIO_DFECTRL1_TSAMPLESPACING_4us, phy);
	radio_df_cte_inline_set_enabled(cte_info_in_s1);
    fa0c:	f000 fd66 	bl	104dc <radio_df_cte_inline_set_enabled>
}
    fa10:	bd08      	pop	{r3, pc}
			sample_offset = CONFIG_BT_CTLR_DF_SAMPLE_OFFSET_PHY_1M_SAMPLING_2US;
    fa12:	2306      	movs	r3, #6
    fa14:	e7f6      	b.n	fa04 <radio_df_cte_rx_4us_switching+0x14>
	switch (phy) {
    fa16:	2300      	movs	r3, #0
    fa18:	e7f4      	b.n	fa04 <radio_df_cte_rx_4us_switching+0x14>
    fa1a:	bf00      	nop
    fa1c:	40001000 	.word	0x40001000
    fa20:	00013180 	.word	0x00013180

0000fa24 <radio_df_ant_switch_pattern_clear>:

void radio_df_ant_switch_pattern_clear(void)
{
	NRF_RADIO->CLEARPATTERN = RADIO_CLEARPATTERN_CLEARPATTERN_Clear;
    fa24:	4b02      	ldr	r3, [pc, #8]	; (fa30 <radio_df_ant_switch_pattern_clear+0xc>)
    fa26:	2201      	movs	r2, #1
    fa28:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
}
    fa2c:	4770      	bx	lr
    fa2e:	bf00      	nop
    fa30:	40001000 	.word	0x40001000

0000fa34 <radio_df_iq_data_packet_set>:
#if defined(RADIO_DFEPACKET_PTR_PTR_Msk)
NRF_STATIC_INLINE void nrf_radio_dfe_buffer_set(NRF_RADIO_Type * p_reg,
                                                uint32_t *       p_buffer,
                                                size_t           length)
{
    p_reg->DFEPACKET.PTR    = (uint32_t)p_buffer;
    fa34:	4b02      	ldr	r3, [pc, #8]	; (fa40 <radio_df_iq_data_packet_set+0xc>)
    fa36:	f8c3 0950 	str.w	r0, [r3, #2384]	; 0x950
    p_reg->DFEPACKET.MAXCNT = length;
    fa3a:	f8c3 1954 	str.w	r1, [r3, #2388]	; 0x954
}

void radio_df_iq_data_packet_set(uint8_t *buffer, size_t len)
{
	nrf_radio_dfe_buffer_set(NRF_RADIO, (uint32_t *)buffer, len);
}
    fa3e:	4770      	bx	lr
    fa40:	40001000 	.word	0x40001000

0000fa44 <radio_df_iq_samples_amount_get>:
}

NRF_STATIC_INLINE uint32_t nrf_radio_dfe_amount_get(NRF_RADIO_Type const * p_reg)
{
    return p_reg->DFEPACKET.AMOUNT;
    fa44:	4b01      	ldr	r3, [pc, #4]	; (fa4c <radio_df_iq_samples_amount_get+0x8>)
    fa46:	f8d3 0958 	ldr.w	r0, [r3, #2392]	; 0x958

uint32_t radio_df_iq_samples_amount_get(void)
{
	return nrf_radio_dfe_amount_get(NRF_RADIO);
}
    fa4a:	4770      	bx	lr
    fa4c:	40001000 	.word	0x40001000

0000fa50 <radio_df_cte_status_get>:

uint8_t radio_df_cte_status_get(void)
{
	return NRF_RADIO->CTESTATUS;
    fa50:	4b02      	ldr	r3, [pc, #8]	; (fa5c <radio_df_cte_status_get+0xc>)
    fa52:	f8d3 044c 	ldr.w	r0, [r3, #1100]	; 0x44c
}
    fa56:	b2c0      	uxtb	r0, r0
    fa58:	4770      	bx	lr
    fa5a:	bf00      	nop
    fa5c:	40001000 	.word	0x40001000

0000fa60 <radio_df_cte_ready>:

bool radio_df_cte_ready(void)
{
	return (NRF_RADIO->EVENTS_CTEPRESENT != 0);
    fa60:	4b03      	ldr	r3, [pc, #12]	; (fa70 <radio_df_cte_ready+0x10>)
    fa62:	f8d3 0170 	ldr.w	r0, [r3, #368]	; 0x170
}
    fa66:	3800      	subs	r0, #0
    fa68:	bf18      	it	ne
    fa6a:	2001      	movne	r0, #1
    fa6c:	4770      	bx	lr
    fa6e:	bf00      	nop
    fa70:	40001000 	.word	0x40001000

0000fa74 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    fa74:	4b05      	ldr	r3, [pc, #20]	; (fa8c <cntr_init+0x18>)
    fa76:	2200      	movs	r2, #0
    fa78:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    fa7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    fa80:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
    fa84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
    fa88:	4770      	bx	lr
    fa8a:	bf00      	nop
    fa8c:	4000b000 	.word	0x4000b000

0000fa90 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
    fa90:	4a05      	ldr	r2, [pc, #20]	; (faa8 <cntr_start+0x18>)
    fa92:	7813      	ldrb	r3, [r2, #0]
    fa94:	1c59      	adds	r1, r3, #1
    fa96:	7011      	strb	r1, [r2, #0]
    fa98:	b923      	cbnz	r3, faa4 <cntr_start+0x14>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    fa9a:	4b04      	ldr	r3, [pc, #16]	; (faac <cntr_start+0x1c>)
    fa9c:	2201      	movs	r2, #1
    fa9e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
    faa0:	2000      	movs	r0, #0
    faa2:	4770      	bx	lr
		return 1;
    faa4:	2001      	movs	r0, #1
}
    faa6:	4770      	bx	lr
    faa8:	2000929f 	.word	0x2000929f
    faac:	4000b000 	.word	0x4000b000

0000fab0 <cntr_stop>:

uint32_t cntr_stop(void)
{
    fab0:	b508      	push	{r3, lr}
	LL_ASSERT(_refcount);
    fab2:	4b0e      	ldr	r3, [pc, #56]	; (faec <cntr_stop+0x3c>)
    fab4:	781b      	ldrb	r3, [r3, #0]
    fab6:	b153      	cbz	r3, face <cntr_stop+0x1e>

	if (--_refcount) {
    fab8:	4a0c      	ldr	r2, [pc, #48]	; (faec <cntr_stop+0x3c>)
    faba:	7813      	ldrb	r3, [r2, #0]
    fabc:	3b01      	subs	r3, #1
    fabe:	b2db      	uxtb	r3, r3
    fac0:	7013      	strb	r3, [r2, #0]
    fac2:	b98b      	cbnz	r3, fae8 <cntr_stop+0x38>
    fac4:	4b0a      	ldr	r3, [pc, #40]	; (faf0 <cntr_stop+0x40>)
    fac6:	2201      	movs	r2, #1
    fac8:	605a      	str	r2, [r3, #4]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
    faca:	2000      	movs	r0, #0
}
    facc:	bd08      	pop	{r3, pc}
	LL_ASSERT(_refcount);
    face:	232d      	movs	r3, #45	; 0x2d
    fad0:	4a08      	ldr	r2, [pc, #32]	; (faf4 <cntr_stop+0x44>)
    fad2:	4909      	ldr	r1, [pc, #36]	; (faf8 <cntr_stop+0x48>)
    fad4:	4809      	ldr	r0, [pc, #36]	; (fafc <cntr_stop+0x4c>)
    fad6:	f009 fe7a 	bl	197ce <assert_print>
    fada:	4040      	eors	r0, r0
    fadc:	f380 8811 	msr	BASEPRI, r0
    fae0:	f04f 0003 	mov.w	r0, #3
    fae4:	df02      	svc	2
    fae6:	e7e7      	b.n	fab8 <cntr_stop+0x8>
		return 1;
    fae8:	2001      	movs	r0, #1
    faea:	e7ef      	b.n	facc <cntr_stop+0x1c>
    faec:	2000929f 	.word	0x2000929f
    faf0:	4000b000 	.word	0x4000b000
    faf4:	0001f6ac 	.word	0x0001f6ac
    faf8:	0001f6f8 	.word	0x0001f6f8
    fafc:	0001e920 	.word	0x0001e920

0000fb00 <cntr_cnt_get>:
     return p_reg->COUNTER;
    fb00:	4b01      	ldr	r3, [pc, #4]	; (fb08 <cntr_cnt_get+0x8>)
    fb02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
    fb06:	4770      	bx	lr
    fb08:	4000b000 	.word	0x4000b000

0000fb0c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
    fb0c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    fb10:	4b01      	ldr	r3, [pc, #4]	; (fb18 <cntr_cmp_set+0xc>)
    fb12:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
    fb16:	4770      	bx	lr
    fb18:	4000b000 	.word	0x4000b000

0000fb1c <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    fb1c:	e009      	b.n	fb32 <do_ecb+0x16>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fb1e:	4b15      	ldr	r3, [pc, #84]	; (fb74 <do_ecb+0x58>)
    fb20:	2201      	movs	r2, #1
    fb22:	605a      	str	r2, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    fb24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fb28:	b91b      	cbnz	r3, fb32 <do_ecb+0x16>
    fb2a:	4b12      	ldr	r3, [pc, #72]	; (fb74 <do_ecb+0x58>)
    fb2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fb30:	b9d3      	cbnz	r3, fb68 <do_ecb+0x4c>
    fb32:	4b10      	ldr	r3, [pc, #64]	; (fb74 <do_ecb+0x58>)
    fb34:	2201      	movs	r2, #1
    fb36:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
    fb38:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    fb3c:	2100      	movs	r1, #0
    fb3e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    fb42:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    fb46:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fb48:	4b0a      	ldr	r3, [pc, #40]	; (fb74 <do_ecb+0x58>)
    fb4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fb4e:	2b00      	cmp	r3, #0
    fb50:	d1e5      	bne.n	fb1e <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fb52:	4b08      	ldr	r3, [pc, #32]	; (fb74 <do_ecb+0x58>)
    fb54:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    fb58:	2b00      	cmp	r3, #0
    fb5a:	d1e0      	bne.n	fb1e <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    fb5c:	4b05      	ldr	r3, [pc, #20]	; (fb74 <do_ecb+0x58>)
    fb5e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    fb62:	2b00      	cmp	r3, #0
    fb64:	d1f0      	bne.n	fb48 <do_ecb+0x2c>
    fb66:	e7da      	b.n	fb1e <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    fb68:	4b02      	ldr	r3, [pc, #8]	; (fb74 <do_ecb+0x58>)
    fb6a:	2200      	movs	r2, #0
    fb6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    fb70:	4770      	bx	lr
    fb72:	bf00      	nop
    fb74:	4000e000 	.word	0x4000e000

0000fb78 <radio_isr_set>:
		isr_cb(isr_cb_param);
	}
}

void radio_isr_set(radio_isr_cb_t cb, void *param)
{
    fb78:	b538      	push	{r3, r4, r5, lr}
    fb7a:	4604      	mov	r4, r0
    fb7c:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
    fb7e:	2001      	movs	r0, #1
    fb80:	f7f4 fed0 	bl	4924 <arch_irq_disable>

	isr_cb_param = param;
    fb84:	4b07      	ldr	r3, [pc, #28]	; (fba4 <radio_isr_set+0x2c>)
    fb86:	601d      	str	r5, [r3, #0]
	isr_cb = cb;
    fb88:	4b07      	ldr	r3, [pc, #28]	; (fba8 <radio_isr_set+0x30>)
    fb8a:	601c      	str	r4, [r3, #0]
    p_reg->INTENSET = mask;
    fb8c:	4b07      	ldr	r3, [pc, #28]	; (fbac <radio_isr_set+0x34>)
    fb8e:	2210      	movs	r2, #16
    fb90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    fb94:	4b06      	ldr	r3, [pc, #24]	; (fbb0 <radio_isr_set+0x38>)
    fb96:	2202      	movs	r2, #2
    fb98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    fb9c:	2001      	movs	r0, #1
    fb9e:	f7f4 feb3 	bl	4908 <arch_irq_enable>
}
    fba2:	bd38      	pop	{r3, r4, r5, pc}
    fba4:	20008c30 	.word	0x20008c30
    fba8:	20008c2c 	.word	0x20008c2c
    fbac:	40001000 	.word	0x40001000
    fbb0:	e000e100 	.word	0xe000e100

0000fbb4 <radio_reset>:

	hal_radio_ram_prio_setup();
}

void radio_reset(void)
{
    fbb4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    fbb6:	2001      	movs	r0, #1
    fbb8:	f7f4 feb4 	bl	4924 <arch_irq_disable>
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
    fbbc:	4b08      	ldr	r3, [pc, #32]	; (fbe0 <radio_reset+0x2c>)
    fbbe:	2200      	movs	r2, #0
    fbc0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    fbc4:	2201      	movs	r2, #1
    fbc6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
    fbca:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    fbce:	f44f 5290 	mov.w	r2, #4608	; 0x1200
    fbd2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
    fbd6:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    fbda:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
	hal_palna_ppi_setup();
#endif
#if defined(HAL_RADIO_FEM_IS_NRF21540)
	hal_fem_ppi_setup();
#endif
}
    fbde:	bd08      	pop	{r3, pc}
    fbe0:	40001000 	.word	0x40001000

0000fbe4 <radio_phy_set>:

static inline uint32_t hal_radio_phy_mode_get(uint8_t phy, uint8_t flags)
{
	uint32_t mode;

	switch (phy) {
    fbe4:	2802      	cmp	r0, #2
    fbe6:	d00c      	beq.n	fc02 <radio_phy_set+0x1e>
	case BIT(0):
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    fbe8:	2203      	movs	r2, #3
{
	uint32_t mode;

	mode = hal_radio_phy_mode_get(phy, flags);

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    fbea:	f002 020f 	and.w	r2, r2, #15
    fbee:	4b06      	ldr	r3, [pc, #24]	; (fc08 <radio_phy_set+0x24>)
    fbf0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510

#if defined(CONFIG_BT_CTLR_RADIO_ENABLE_FAST)
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
    fbf4:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
    fbf8:	f042 0201 	orr.w	r2, r2, #1
    fbfc:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
				RADIO_MODECNF0_RU_Pos) &
			       RADIO_MODECNF0_RU_Msk;
#endif /* CONFIG_BT_CTLR_RADIO_ENABLE_FAST */
}
    fc00:	4770      	bx	lr
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    fc02:	2204      	movs	r2, #4
    fc04:	e7f1      	b.n	fbea <radio_phy_set+0x6>
    fc06:	bf00      	nop
    fc08:	40001000 	.word	0x40001000

0000fc0c <radio_tx_power_set>:
	hal_radio_tx_power_high_voltage_set(power);

#else /* !CONFIG_SOC_SERIES_NRF53X */

	/* NOTE: valid value range is passed by Kconfig define. */
	NRF_RADIO->TXPOWER = (uint32_t)power;
    fc0c:	4b01      	ldr	r3, [pc, #4]	; (fc14 <radio_tx_power_set+0x8>)
    fc0e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c

#endif /* !CONFIG_SOC_SERIES_NRF53X */
}
    fc12:	4770      	bx	lr
    fc14:	40001000 	.word	0x40001000

0000fc18 <radio_freq_chan_set>:
	return (int8_t)hal_radio_tx_power_floor(power);
}

void radio_freq_chan_set(uint32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    fc18:	4b01      	ldr	r3, [pc, #4]	; (fc20 <radio_freq_chan_set+0x8>)
    fc1a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    fc1e:	4770      	bx	lr
    fc20:	40001000 	.word	0x40001000

0000fc24 <radio_whiten_iv_set>:

void radio_whiten_iv_set(uint32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    fc24:	4b07      	ldr	r3, [pc, #28]	; (fc44 <radio_whiten_iv_set+0x20>)
    fc26:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    fc2a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fc2e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    fc32:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    fc36:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fc3a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    fc3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
			    RADIO_PCNF1_WHITEEN_Msk;
}
    fc42:	4770      	bx	lr
    fc44:	40001000 	.word	0x40001000

0000fc48 <radio_aa_set>:

void radio_aa_set(uint8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    fc48:	4a0a      	ldr	r2, [pc, #40]	; (fc74 <radio_aa_set+0x2c>)
    fc4a:	2300      	movs	r3, #0
    fc4c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    fc50:	2301      	movs	r3, #1
    fc52:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    fc56:	78c3      	ldrb	r3, [r0, #3]
    fc58:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    fc5c:	7881      	ldrb	r1, [r0, #2]
    fc5e:	7843      	ldrb	r3, [r0, #1]
    fc60:	041b      	lsls	r3, r3, #16
    fc62:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    fc66:	7801      	ldrb	r1, [r0, #0]
    fc68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    fc6c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
    fc70:	4770      	bx	lr
    fc72:	bf00      	nop
    fc74:	40001000 	.word	0x40001000

0000fc78 <radio_pkt_configure>:

void radio_pkt_configure(uint8_t bits_len, uint8_t max_len, uint8_t flags)
{
	const uint8_t pdu_type = RADIO_PKT_CONF_PDU_TYPE_GET(flags); /* Adv or Data channel */
    fc78:	f002 0301 	and.w	r3, r2, #1
	}
#elif defined(CONFIG_SOC_COMPATIBLE_NRF52X) || \
	defined(CONFIG_SOC_SERIES_NRF53X)
	extra = 0U;

	phy = RADIO_PKT_CONF_PHY_GET(flags);
    fc7c:	f3c2 0c42 	ubfx	ip, r2, #1, #3
	switch (phy) {
    fc80:	f1bc 0f02 	cmp.w	ip, #2
    fc84:	d023      	beq.n	fcce <radio_pkt_configure+0x56>
	case PHY_1M:
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    fc86:	f04f 0c00 	mov.w	ip, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
    fc8a:	b13b      	cbz	r3, fc9c <radio_pkt_configure+0x24>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    fc8c:	f44c 1c80 	orr.w	ip, ip, #1048576	; 0x100000
			  RADIO_PCNF0_S1INCL_Pos) & RADIO_PCNF0_S1INCL_Msk;
#if defined(CONFIG_BT_CTLR_DF)
		if (RADIO_PKT_CONF_CTE_GET(flags) == RADIO_PKT_CONF_CTE_ENABLED) {
    fc90:	f3c2 1300 	ubfx	r3, r2, #4, #1
    fc94:	f012 0f10 	tst.w	r2, #16
    fc98:	d000      	beq.n	fc9c <radio_pkt_configure+0x24>
			bits_s1 = 8U;
    fc9a:	2308      	movs	r3, #8
	}
#endif /* CONFIG_SOC_COMPATIBLE_NRF52X */

	NRF_RADIO->PCNF0 =
		(((1UL) << RADIO_PCNF0_S0LEN_Pos) & RADIO_PCNF0_S0LEN_Msk) |
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
    fc9c:	f000 000f 	and.w	r0, r0, #15
    fca0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
    fca4:	ea40 000c 	orr.w	r0, r0, ip
    fca8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
    fcac:	4b09      	ldr	r3, [pc, #36]	; (fcd4 <radio_pkt_configure+0x5c>)
    fcae:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    fcb2:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
    fcb6:	4a08      	ldr	r2, [pc, #32]	; (fcd8 <radio_pkt_configure+0x60>)
    fcb8:	4002      	ands	r2, r0
    fcba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |=
    fcbe:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    fcc2:	4311      	orrs	r1, r2
    fcc4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    fcc8:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
		((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) & RADIO_PCNF1_MAXLEN_Msk) |
		(((0UL) << RADIO_PCNF1_STATLEN_Pos) & RADIO_PCNF1_STATLEN_Msk) |
		(((3UL) << RADIO_PCNF1_BALEN_Pos) & RADIO_PCNF1_BALEN_Msk) |
		(((RADIO_PCNF1_ENDIAN_Little) << RADIO_PCNF1_ENDIAN_Pos) & RADIO_PCNF1_ENDIAN_Msk);
}
    fccc:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    fcce:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
    fcd2:	e7da      	b.n	fc8a <radio_pkt_configure+0x12>
    fcd4:	40001000 	.word	0x40001000
    fcd8:	fef80000 	.word	0xfef80000

0000fcdc <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
    fcdc:	4b01      	ldr	r3, [pc, #4]	; (fce4 <radio_pkt_rx_set+0x8>)
    fcde:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    fce2:	4770      	bx	lr
    fce4:	40001000 	.word	0x40001000

0000fce8 <radio_pkt_tx_set>:

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (uint32_t)tx_packet;
    fce8:	4b01      	ldr	r3, [pc, #4]	; (fcf0 <radio_pkt_tx_set+0x8>)
    fcea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
    fcee:	4770      	bx	lr
    fcf0:	40001000 	.word	0x40001000

0000fcf4 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    fcf4:	4b01      	ldr	r3, [pc, #4]	; (fcfc <radio_rx_enable+0x8>)
    fcf6:	2201      	movs	r2, #1
    fcf8:	605a      	str	r2, [r3, #4]
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_RXEN);
}
    fcfa:	4770      	bx	lr
    fcfc:	40001000 	.word	0x40001000

0000fd00 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    fd00:	4a07      	ldr	r2, [pc, #28]	; (fd20 <radio_disable+0x20>)
    fd02:	f44f 6310 	mov.w	r3, #2304	; 0x900
    fd06:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    fd0a:	2301      	movs	r3, #1
    fd0c:	6053      	str	r3, [r2, #4]
    fd0e:	60d3      	str	r3, [r2, #12]
{
#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_cleanup();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    fd10:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
    fd14:	2100      	movs	r1, #0
    fd16:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    fd1a:	6113      	str	r3, [r2, #16]
	nrf_radio_task_trigger(NRF_RADIO, NRF_RADIO_TASK_DISABLE);
}
    fd1c:	4770      	bx	lr
    fd1e:	bf00      	nop
    fd20:	4001f000 	.word	0x4001f000

0000fd24 <radio_status_reset>:
	/* NOTE: Only EVENTS_* registers read (checked) by software needs reset
	 *       between Radio IRQs. In PPI use, irrespective of stored EVENT_*
	 *       register value, PPI task will be triggered. Hence, other
	 *       EVENT_* registers are not reset to save code and CPU time.
	 */
	NRF_RADIO->EVENTS_READY = 0;
    fd24:	4b06      	ldr	r3, [pc, #24]	; (fd40 <radio_status_reset+0x1c>)
    fd26:	2200      	movs	r2, #0
    fd28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
    fd2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#if defined(CONFIG_BT_CTLR_DF_SUPPORT) && !defined(CONFIG_ZTEST)
	/* Clear it only for SoCs supporting DF extension */
	NRF_RADIO->EVENTS_PHYEND = 0;
    fd30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	NRF_RADIO->EVENTS_CTEPRESENT = 0;
    fd34:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif /* CONFIG_BT_CTLR_DF_SUPPORT && !CONFIG_ZTEST */
	NRF_RADIO->EVENTS_DISABLED = 0;
    fd38:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_RADIO->EVENTS_RATEBOOST = 0;
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
}
    fd3c:	4770      	bx	lr
    fd3e:	bf00      	nop
    fd40:	40001000 	.word	0x40001000

0000fd44 <radio_is_ready>:

uint32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    fd44:	4b03      	ldr	r3, [pc, #12]	; (fd54 <radio_is_ready+0x10>)
    fd46:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    fd4a:	3800      	subs	r0, #0
    fd4c:	bf18      	it	ne
    fd4e:	2001      	movne	r0, #1
    fd50:	4770      	bx	lr
    fd52:	bf00      	nop
    fd54:	40001000 	.word	0x40001000

0000fd58 <radio_is_done>:
}

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
uint32_t radio_is_done(void)
{
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
    fd58:	4b03      	ldr	r3, [pc, #12]	; (fd68 <radio_is_done+0x10>)
    fd5a:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
}
    fd5e:	3800      	subs	r0, #0
    fd60:	bf18      	it	ne
    fd62:	2001      	movne	r0, #1
    fd64:	4770      	bx	lr
    fd66:	bf00      	nop
    fd68:	40001000 	.word	0x40001000

0000fd6c <radio_has_disabled>:
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
    fd6c:	4b03      	ldr	r3, [pc, #12]	; (fd7c <radio_has_disabled+0x10>)
    fd6e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    fd72:	3800      	subs	r0, #0
    fd74:	bf18      	it	ne
    fd76:	2001      	movne	r0, #1
    fd78:	4770      	bx	lr
    fd7a:	bf00      	nop
    fd7c:	40001000 	.word	0x40001000

0000fd80 <isr_radio>:
{
    fd80:	b508      	push	{r3, lr}
	if (radio_has_disabled()) {
    fd82:	f7ff fff3 	bl	fd6c <radio_has_disabled>
    fd86:	b120      	cbz	r0, fd92 <isr_radio+0x12>
		isr_cb(isr_cb_param);
    fd88:	4b02      	ldr	r3, [pc, #8]	; (fd94 <isr_radio+0x14>)
    fd8a:	681b      	ldr	r3, [r3, #0]
    fd8c:	4a02      	ldr	r2, [pc, #8]	; (fd98 <isr_radio+0x18>)
    fd8e:	6810      	ldr	r0, [r2, #0]
    fd90:	4798      	blx	r3
}
    fd92:	bd08      	pop	{r3, pc}
    fd94:	20008c2c 	.word	0x20008c2c
    fd98:	20008c30 	.word	0x20008c30

0000fd9c <radio_is_idle>:

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    fd9c:	4b03      	ldr	r3, [pc, #12]	; (fdac <radio_is_idle+0x10>)
    fd9e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    fda2:	fab0 f080 	clz	r0, r0
    fda6:	0940      	lsrs	r0, r0, #5
    fda8:	4770      	bx	lr
    fdaa:	bf00      	nop
    fdac:	40001000 	.word	0x40001000

0000fdb0 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
    fdb0:	4b04      	ldr	r3, [pc, #16]	; (fdc4 <radio_crc_configure+0x14>)
    fdb2:	f240 1203 	movw	r2, #259	; 0x103
    fdb6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    fdba:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    fdbe:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
    fdc2:	4770      	bx	lr
    fdc4:	40001000 	.word	0x40001000

0000fdc8 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    fdc8:	4b03      	ldr	r3, [pc, #12]	; (fdd8 <radio_crc_is_valid+0x10>)
    fdca:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fdce:	3800      	subs	r0, #0
    fdd0:	bf18      	it	ne
    fdd2:	2001      	movne	r0, #1
    fdd4:	4770      	bx	lr
    fdd6:	bf00      	nop
    fdd8:	40001000 	.word	0x40001000

0000fddc <radio_pkt_scratch_get>:
}

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    fddc:	4800      	ldr	r0, [pc, #0]	; (fde0 <radio_pkt_scratch_get+0x4>)
    fdde:	4770      	bx	lr
    fde0:	20008b28 	.word	0x20008b28

0000fde4 <sw_switch>:
 *                         direction to next direction.
 */
void sw_switch(uint8_t dir_curr, uint8_t dir_next, uint8_t phy_curr, uint8_t flags_curr,
	       uint8_t phy_next, uint8_t flags_next,
	       enum radio_end_evt_delay_state end_evt_delay_en)
{
    fde4:	b5f0      	push	{r4, r5, r6, r7, lr}
    fde6:	f89d 7014 	ldrb.w	r7, [sp, #20]
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
    fdea:	4b50      	ldr	r3, [pc, #320]	; (ff2c <sw_switch+0x148>)
    fdec:	781b      	ldrb	r3, [r3, #0]
    fdee:	f103 0c0c 	add.w	ip, r3, #12
    fdf2:	fa5f fc8c 	uxtb.w	ip, ip
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
    fdf6:	00dc      	lsls	r4, r3, #3
    fdf8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    fdfc:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].EEP = eep;
    fe00:	4d4b      	ldr	r5, [pc, #300]	; (ff30 <sw_switch+0x14c>)
    fe02:	4e4c      	ldr	r6, [pc, #304]	; (ff34 <sw_switch+0x150>)
    fe04:	f8c5 6568 	str.w	r6, [r5, #1384]	; 0x568
    p_reg->CH[(uint32_t) channel].TEP = tep;
    fe08:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
    fe0c:	4c4a      	ldr	r4, [pc, #296]	; (ff38 <sw_switch+0x154>)
    fe0e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
    fe12:	f10c 0ea2 	add.w	lr, ip, #162	; 0xa2
    fe16:	f845 403e 	str.w	r4, [r5, lr, lsl #3]

	/* NOTE: As constants are passed to dir_curr and dir_next, the
	 *       compiler should optimize out the redundant code path
	 *       during the optimization.
	 */
	if (dir_next == SW_SWITCH_TX) {
    fe1a:	2901      	cmp	r1, #1
    fe1c:	d028      	beq.n	fe70 <sw_switch+0x8c>
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	} else {
		/* RX */

		/* Calculate delay with respect to current and next PHY. */
		if (dir_curr) {
    fe1e:	2800      	cmp	r0, #0
    fe20:	d062      	beq.n	fee8 <sw_switch+0x104>
    p_reg->CH[(uint32_t) channel].TEP = tep;
    fe22:	f10c 0ca2 	add.w	ip, ip, #162	; 0xa2
    fe26:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    fe2a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    fe2e:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
    fe32:	4a42      	ldr	r2, [pc, #264]	; (ff3c <sw_switch+0x158>)
    fe34:	f8cc 2004 	str.w	r2, [ip, #4]
			delay = HAL_RADIO_NS2US_CEIL(
    fe38:	222d      	movs	r2, #45	; 0x2d
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay < SW_SWITCH_TIMER->CC[cc]) {
    fe3a:	f503 71a8 	add.w	r1, r3, #336	; 0x150
    fe3e:	4840      	ldr	r0, [pc, #256]	; (ff40 <sw_switch+0x15c>)
    fe40:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    fe44:	4291      	cmp	r1, r2
    fe46:	d96a      	bls.n	ff1e <sw_switch+0x13a>
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
				 (SW_SWITCH_TIMER->CC[cc] - delay));
    fe48:	f503 74a8 	add.w	r4, r3, #336	; 0x150
    fe4c:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
    fe50:	1a8a      	subs	r2, r1, r2

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    fe52:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
    p_reg->CHENSET = mask;
    fe56:	4a36      	ldr	r2, [pc, #216]	; (ff30 <sw_switch+0x14c>)
    fe58:	f44f 6110 	mov.w	r1, #2304	; 0x900
    fe5c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	 */
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X */
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
    fe60:	3301      	adds	r3, #1
    fe62:	b2db      	uxtb	r3, r3
    fe64:	4a31      	ldr	r2, [pc, #196]	; (ff2c <sw_switch+0x148>)
    fe66:	7013      	strb	r3, [r2, #0]
	sw_tifs_toggle &= 1U;
    fe68:	f003 0301 	and.w	r3, r3, #1
    fe6c:	7013      	strb	r3, [r2, #0]
}
    fe6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dir_curr == SW_SWITCH_TX) {
    fe70:	2801      	cmp	r0, #1
    fe72:	d01a      	beq.n	feaa <sw_switch+0xc6>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
    fe74:	2f02      	cmp	r7, #2
    fe76:	d031      	beq.n	fedc <sw_switch+0xf8>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52833_TXEN_TXIDLE_TX_1M_NS;
    fe78:	f649 71c4 	movw	r1, #40900	; 0x9fc4
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
    fe7c:	2a02      	cmp	r2, #2
    fe7e:	d030      	beq.n	fee2 <sw_switch+0xfe>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_1M_NS;
    fe80:	f242 42b8 	movw	r2, #9400	; 0x24b8
			delay = HAL_RADIO_NS2US_ROUND(
    fe84:	440a      	add	r2, r1
    fe86:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    fe8a:	492e      	ldr	r1, [pc, #184]	; (ff44 <sw_switch+0x160>)
    fe8c:	fba1 1202 	umull	r1, r2, r1, r2
    fe90:	0992      	lsrs	r2, r2, #6
    p_reg->CH[(uint32_t) channel].TEP = tep;
    fe92:	f10c 0ca2 	add.w	ip, ip, #162	; 0xa2
    fe96:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    fe9a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    fe9e:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
    fea2:	4929      	ldr	r1, [pc, #164]	; (ff48 <sw_switch+0x164>)
    fea4:	f8cc 1004 	str.w	r1, [ip, #4]
}
    fea8:	e7c7      	b.n	fe3a <sw_switch+0x56>
	switch (phy) {
    feaa:	2f02      	cmp	r7, #2
    feac:	d013      	beq.n	fed6 <sw_switch+0xf2>
		return HAL_RADIO_NRF52833_TXEN_TXIDLE_TX_1M_NS;
    feae:	f649 72c4 	movw	r2, #40900	; 0x9fc4
			delay = HAL_RADIO_NS2US_ROUND(
    feb2:	f202 424c 	addw	r2, r2, #1100	; 0x44c
    feb6:	4923      	ldr	r1, [pc, #140]	; (ff44 <sw_switch+0x160>)
    feb8:	fba1 1202 	umull	r1, r2, r1, r2
    febc:	0992      	lsrs	r2, r2, #6
    febe:	f10c 0ca2 	add.w	ip, ip, #162	; 0xa2
    fec2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    fec6:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    feca:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
    fece:	491e      	ldr	r1, [pc, #120]	; (ff48 <sw_switch+0x164>)
    fed0:	f8cc 1004 	str.w	r1, [ip, #4]
}
    fed4:	e7b1      	b.n	fe3a <sw_switch+0x56>
		return HAL_RADIO_NRF52833_TXEN_TXIDLE_TX_2M_NS;
    fed6:	f649 4240 	movw	r2, #40000	; 0x9c40
    feda:	e7ea      	b.n	feb2 <sw_switch+0xce>
    fedc:	f649 4140 	movw	r1, #40000	; 0x9c40
    fee0:	e7cc      	b.n	fe7c <sw_switch+0x98>
	case BIT(1):
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_2M_NS;
    fee2:	f241 3288 	movw	r2, #5000	; 0x1388
    fee6:	e7cd      	b.n	fe84 <sw_switch+0xa0>
	switch (phy) {
    fee8:	2a02      	cmp	r2, #2
    feea:	d015      	beq.n	ff18 <sw_switch+0x134>
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_1M_NS;
    feec:	f242 42b8 	movw	r2, #9400	; 0x24b8
			delay = HAL_RADIO_NS2US_CEIL(
    fef0:	f502 4221 	add.w	r2, r2, #41216	; 0xa100
    fef4:	3253      	adds	r2, #83	; 0x53
    fef6:	4913      	ldr	r1, [pc, #76]	; (ff44 <sw_switch+0x160>)
    fef8:	fba1 1202 	umull	r1, r2, r1, r2
    fefc:	0992      	lsrs	r2, r2, #6
    fefe:	3204      	adds	r2, #4
    ff00:	f10c 0ca2 	add.w	ip, ip, #162	; 0xa2
    ff04:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ff08:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
    ff0c:	f50c 3cf8 	add.w	ip, ip, #126976	; 0x1f000
    ff10:	490a      	ldr	r1, [pc, #40]	; (ff3c <sw_switch+0x158>)
    ff12:	f8cc 1004 	str.w	r1, [ip, #4]
}
    ff16:	e790      	b.n	fe3a <sw_switch+0x56>
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_2M_NS;
    ff18:	f241 3288 	movw	r2, #5000	; 0x1388
    ff1c:	e7e8      	b.n	fef0 <sw_switch+0x10c>
    ff1e:	f503 72a8 	add.w	r2, r3, #336	; 0x150
    ff22:	4907      	ldr	r1, [pc, #28]	; (ff40 <sw_switch+0x15c>)
    ff24:	2001      	movs	r0, #1
    ff26:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
}
    ff2a:	e794      	b.n	fe56 <sw_switch+0x72>
    ff2c:	200092a0 	.word	0x200092a0
    ff30:	4001f000 	.word	0x4001f000
    ff34:	4000116c 	.word	0x4000116c
    ff38:	40009140 	.word	0x40009140
    ff3c:	40001004 	.word	0x40001004
    ff40:	40009000 	.word	0x40009000
    ff44:	10624dd3 	.word	0x10624dd3
    ff48:	40001000 	.word	0x40001000

0000ff4c <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(uint8_t phy_rx)
{
    ff4c:	b500      	push	{lr}
    ff4e:	b085      	sub	sp, #20
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
    ff50:	4b07      	ldr	r3, [pc, #28]	; (ff70 <radio_switch_complete_and_rx+0x24>)
    ff52:	4a08      	ldr	r2, [pc, #32]	; (ff74 <radio_switch_complete_and_rx+0x28>)
    ff54:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* NOTE: As Tx chain delays are negligible constant values (~1 us)
	 *	 across nRF5x radios, sw_switch assumes the 1M chain delay for
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
    ff58:	2100      	movs	r1, #0
    ff5a:	9102      	str	r1, [sp, #8]
    ff5c:	9101      	str	r1, [sp, #4]
    ff5e:	9000      	str	r0, [sp, #0]
    ff60:	460b      	mov	r3, r1
    ff62:	460a      	mov	r2, r1
    ff64:	2001      	movs	r0, #1
    ff66:	f7ff ff3d 	bl	fde4 <sw_switch>
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    ff6a:	b005      	add	sp, #20
    ff6c:	f85d fb04 	ldr.w	pc, [sp], #4
    ff70:	40001000 	.word	0x40001000
    ff74:	00100001 	.word	0x00100001

0000ff78 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
    ff78:	b510      	push	{r4, lr}
    ff7a:	b084      	sub	sp, #16
    ff7c:	4684      	mov	ip, r0
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
    ff7e:	4807      	ldr	r0, [pc, #28]	; (ff9c <radio_switch_complete_and_tx+0x24>)
    ff80:	4c07      	ldr	r4, [pc, #28]	; (ffa0 <radio_switch_complete_and_tx+0x28>)
    ff82:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
    ff86:	2000      	movs	r0, #0
    ff88:	9002      	str	r0, [sp, #8]
    ff8a:	9301      	str	r3, [sp, #4]
    ff8c:	9200      	str	r2, [sp, #0]
    ff8e:	460b      	mov	r3, r1
    ff90:	4662      	mov	r2, ip
    ff92:	2101      	movs	r1, #1
    ff94:	f7ff ff26 	bl	fde4 <sw_switch>
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    ff98:	b004      	add	sp, #16
    ff9a:	bd10      	pop	{r4, pc}
    ff9c:	40001000 	.word	0x40001000
    ffa0:	00100001 	.word	0x00100001

0000ffa4 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
    ffa4:	4b05      	ldr	r3, [pc, #20]	; (ffbc <radio_switch_complete_and_disable+0x18>)
    ffa6:	4a06      	ldr	r2, [pc, #24]	; (ffc0 <radio_switch_complete_and_disable+0x1c>)
    ffa8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->CHENCLR = mask;
    ffac:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
    ffb0:	f44f 6210 	mov.w	r2, #2304	; 0x900
    ffb4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
    ffb8:	4770      	bx	lr
    ffba:	bf00      	nop
    ffbc:	40001000 	.word	0x40001000
    ffc0:	00100001 	.word	0x00100001

0000ffc4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    ffc4:	4a03      	ldr	r2, [pc, #12]	; (ffd4 <radio_rssi_measure+0x10>)
    ffc6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    ffca:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    ffce:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
    ffd2:	4770      	bx	lr
    ffd4:	40001000 	.word	0x40001000

0000ffd8 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    ffd8:	4b01      	ldr	r3, [pc, #4]	; (ffe0 <radio_rssi_get+0x8>)
    ffda:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    ffde:	4770      	bx	lr
    ffe0:	40001000 	.word	0x40001000

0000ffe4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    ffe4:	4b02      	ldr	r3, [pc, #8]	; (fff0 <radio_rssi_status_reset+0xc>)
    ffe6:	2200      	movs	r2, #0
    ffe8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
    ffec:	4770      	bx	lr
    ffee:	bf00      	nop
    fff0:	40001000 	.word	0x40001000

0000fff4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    fff4:	4b03      	ldr	r3, [pc, #12]	; (10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>)
    fff6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    fffa:	3800      	subs	r0, #0
    fffc:	bf18      	it	ne
    fffe:	2001      	movne	r0, #1
   10000:	4770      	bx	lr
   10002:	bf00      	nop
   10004:	40001000 	.word	0x40001000

00010008 <radio_filter_configure>:
void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
	uint8_t index;

	for (index = 0U; index < 8; index++) {
   10008:	f04f 0c00 	mov.w	ip, #0
   1000c:	f1bc 0f07 	cmp.w	ip, #7
   10010:	d826      	bhi.n	10060 <radio_filter_configure+0x58>
{
   10012:	b510      	push	{r4, lr}
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   10014:	78d4      	ldrb	r4, [r2, #3]
			((uint32_t)bdaddr[2] << 16) |
   10016:	7893      	ldrb	r3, [r2, #2]
   10018:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1001a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
			((uint32_t)bdaddr[1] << 8) |
   1001e:	7854      	ldrb	r4, [r2, #1]
			((uint32_t)bdaddr[2] << 16) |
   10020:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
			bdaddr[0];
   10024:	7814      	ldrb	r4, [r2, #0]
			((uint32_t)bdaddr[1] << 8) |
   10026:	4323      	orrs	r3, r4
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   10028:	4c10      	ldr	r4, [pc, #64]	; (1006c <radio_filter_configure+0x64>)
   1002a:	f50c 7ec0 	add.w	lr, ip, #384	; 0x180
   1002e:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   10032:	f892 e005 	ldrb.w	lr, [r2, #5]
   10036:	7913      	ldrb	r3, [r2, #4]
   10038:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   1003c:	f50c 7ec4 	add.w	lr, ip, #392	; 0x188
   10040:	f844 302e 	str.w	r3, [r4, lr, lsl #2]
		bdaddr += 6;
   10044:	3206      	adds	r2, #6
	for (index = 0U; index < 8; index++) {
   10046:	f10c 0c01 	add.w	ip, ip, #1
   1004a:	fa5f fc8c 	uxtb.w	ip, ip
   1004e:	f1bc 0f07 	cmp.w	ip, #7
   10052:	d9df      	bls.n	10014 <radio_filter_configure+0xc>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   10054:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   10058:	4b04      	ldr	r3, [pc, #16]	; (1006c <radio_filter_configure+0x64>)
   1005a:	f8c3 1640 	str.w	r1, [r3, #1600]	; 0x640
}
   1005e:	bd10      	pop	{r4, pc}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   10060:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
   10064:	4b01      	ldr	r3, [pc, #4]	; (1006c <radio_filter_configure+0x64>)
   10066:	f8c3 1640 	str.w	r1, [r3, #1600]	; 0x640
   1006a:	4770      	bx	lr
   1006c:	40001000 	.word	0x40001000

00010070 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   10070:	4a03      	ldr	r2, [pc, #12]	; (10080 <radio_filter_disable+0x10>)
   10072:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   10076:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1007a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1007e:	4770      	bx	lr
   10080:	40001000 	.word	0x40001000

00010084 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   10084:	4b02      	ldr	r3, [pc, #8]	; (10090 <radio_filter_status_reset+0xc>)
   10086:	2200      	movs	r2, #0
   10088:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1008c:	4770      	bx	lr
   1008e:	bf00      	nop
   10090:	40001000 	.word	0x40001000

00010094 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   10094:	4b03      	ldr	r3, [pc, #12]	; (100a4 <radio_filter_has_match+0x10>)
   10096:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1009a:	3800      	subs	r0, #0
   1009c:	bf18      	it	ne
   1009e:	2001      	movne	r0, #1
   100a0:	4770      	bx	lr
   100a2:	bf00      	nop
   100a4:	40001000 	.word	0x40001000

000100a8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   100a8:	4b01      	ldr	r3, [pc, #4]	; (100b0 <radio_filter_match_get+0x8>)
   100aa:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   100ae:	4770      	bx	lr
   100b0:	40001000 	.word	0x40001000

000100b4 <radio_bc_configure>:
    p_reg->BCC = radio_bcc;
   100b4:	4b04      	ldr	r3, [pc, #16]	; (100c8 <radio_bc_configure+0x14>)
   100b6:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560

void radio_bc_configure(uint32_t n)
{
	nrf_radio_bcc_set(NRF_RADIO, n);
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   100ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   100be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   100c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
   100c6:	4770      	bx	lr
   100c8:	40001000 	.word	0x40001000

000100cc <radio_bc_status_reset>:

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
   100cc:	4b02      	ldr	r3, [pc, #8]	; (100d8 <radio_bc_status_reset+0xc>)
   100ce:	2200      	movs	r2, #0
   100d0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
   100d4:	4770      	bx	lr
   100d6:	bf00      	nop
   100d8:	40001000 	.word	0x40001000

000100dc <radio_bc_has_match>:

uint32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   100dc:	4b03      	ldr	r3, [pc, #12]	; (100ec <radio_bc_has_match+0x10>)
   100de:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
   100e2:	3800      	subs	r0, #0
   100e4:	bf18      	it	ne
   100e6:	2001      	movne	r0, #1
   100e8:	4770      	bx	lr
   100ea:	bf00      	nop
   100ec:	40001000 	.word	0x40001000

000100f0 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   100f0:	4b05      	ldr	r3, [pc, #20]	; (10108 <radio_tmr_status_reset+0x18>)
   100f2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   100f6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
   100fa:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   100fe:	4a03      	ldr	r2, [pc, #12]	; (1010c <radio_tmr_status_reset+0x1c>)
   10100:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   10104:	4770      	bx	lr
   10106:	bf00      	nop
   10108:	4000b000 	.word	0x4000b000
   1010c:	0e7000c0 	.word	0x0e7000c0

00010110 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   10110:	4b03      	ldr	r3, [pc, #12]	; (10120 <radio_tmr_tifs_set+0x10>)
   10112:	781b      	ldrb	r3, [r3, #0]
    p_reg->CC[cc_channel] = cc_value;
   10114:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   10118:	4a02      	ldr	r2, [pc, #8]	; (10124 <radio_tmr_tifs_set+0x14>)
   1011a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1011e:	4770      	bx	lr
   10120:	200092a0 	.word	0x200092a0
   10124:	40009000 	.word	0x40009000

00010128 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   10128:	b430      	push	{r4, r5}
   1012a:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1012c:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   10130:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   10134:	4834      	ldr	r0, [pc, #208]	; (10208 <radio_tmr_start+0xe0>)
   10136:	4283      	cmp	r3, r0
   10138:	d906      	bls.n	10148 <radio_tmr_start+0x20>
		ticks_start--;
   1013a:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1013c:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   10140:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   10144:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
   10148:	4830      	ldr	r0, [pc, #192]	; (1020c <radio_tmr_start+0xe4>)
   1014a:	fba0 3202 	umull	r3, r2, r0, r2
   1014e:	0c90      	lsrs	r0, r2, #18
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10150:	4b2f      	ldr	r3, [pc, #188]	; (10210 <radio_tmr_start+0xe8>)
   10152:	2201      	movs	r2, #1
   10154:	60da      	str	r2, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   10156:	2200      	movs	r2, #0
   10158:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	EVENT_TIMER->PRESCALER = 4;
   1015c:	2204      	movs	r2, #4
   1015e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   10162:	2202      	movs	r2, #2
   10164:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    p_reg->CC[cc_channel] = cc_value;
   10168:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CC[ch] = cc_val;
   1016c:	4a29      	ldr	r2, [pc, #164]	; (10214 <radio_tmr_start+0xec>)
   1016e:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   10172:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   10176:	f8c2 1344 	str.w	r1, [r2, #836]	; 0x344
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1017a:	f502 32a0 	add.w	r2, r2, #81920	; 0x14000
   1017e:	4926      	ldr	r1, [pc, #152]	; (10218 <radio_tmr_start+0xf0>)
   10180:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   10184:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   10188:	2340      	movs	r3, #64	; 0x40
   1018a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1018e:	b3ac      	cbz	r4, 101fc <radio_tmr_start+0xd4>
   10190:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->CHENCLR = mask;
   10194:	4b21      	ldr	r3, [pc, #132]	; (1021c <radio_tmr_start+0xf4>)
   10196:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1019a:	b394      	cbz	r4, 10202 <radio_tmr_start+0xda>
   1019c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   101a0:	4b1e      	ldr	r3, [pc, #120]	; (1021c <radio_tmr_start+0xf4>)
   101a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   101a6:	4a1e      	ldr	r2, [pc, #120]	; (10220 <radio_tmr_start+0xf8>)
   101a8:	2101      	movs	r1, #1
   101aa:	60d1      	str	r1, [r2, #12]
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   101ac:	2400      	movs	r4, #0
   101ae:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   101b2:	2504      	movs	r5, #4
   101b4:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   101b8:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   101bc:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   101be:	f5a2 42fd 	sub.w	r2, r2, #32384	; 0x7e80
   101c2:	3a14      	subs	r2, #20
   101c4:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   101c8:	f502 42fd 	add.w	r2, r2, #32384	; 0x7e80
   101cc:	3220      	adds	r2, #32
   101ce:	f8c3 2554 	str.w	r2, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   101d2:	f502 729a 	add.w	r2, r2, #308	; 0x134
   101d6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   101da:	f502 32af 	add.w	r2, r2, #89600	; 0x15e00
   101de:	32c4      	adds	r2, #196	; 0xc4
   101e0:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   101e4:	f5a2 32af 	sub.w	r2, r2, #89600	; 0x15e00
   101e8:	3ac0      	subs	r2, #192	; 0xc0
   101ea:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   101ee:	f502 32af 	add.w	r2, r2, #89600	; 0x15e00
   101f2:	32c8      	adds	r2, #200	; 0xc8
   101f4:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   101f8:	bc30      	pop	{r4, r5}
   101fa:	4770      	bx	lr
	nrf_ppi_channels_disable(
   101fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   10200:	e7c8      	b.n	10194 <radio_tmr_start+0x6c>
	nrf_ppi_channels_enable(
   10202:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10206:	e7cb      	b.n	101a0 <radio_tmr_start+0x78>
   10208:	7ff0bdbf 	.word	0x7ff0bdbf
   1020c:	431bde83 	.word	0x431bde83
   10210:	40008000 	.word	0x40008000
   10214:	4000b000 	.word	0x4000b000
   10218:	4000b148 	.word	0x4000b148
   1021c:	4001f000 	.word	0x4001f000
   10220:	40009000 	.word	0x40009000

00010224 <radio_tmr_start_us>:
    p_reg->CC[cc_channel] = cc_value;
   10224:	4b0b      	ldr	r3, [pc, #44]	; (10254 <radio_tmr_start_us+0x30>)
   10226:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
	nrf_ppi_channels_disable(
   1022a:	4603      	mov	r3, r0
   1022c:	b158      	cbz	r0, 10246 <radio_tmr_start_us+0x22>
   1022e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    p_reg->CHENCLR = mask;
   10232:	4a09      	ldr	r2, [pc, #36]	; (10258 <radio_tmr_start_us+0x34>)
   10234:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   10238:	b143      	cbz	r3, 1024c <radio_tmr_start_us+0x28>
   1023a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1023e:	4b06      	ldr	r3, [pc, #24]	; (10258 <radio_tmr_start_us+0x34>)
   10240:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 *        radio event but when the radio event is done.
	 */
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   10244:	4770      	bx	lr
	nrf_ppi_channels_disable(
   10246:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1024a:	e7f2      	b.n	10232 <radio_tmr_start_us+0xe>
	nrf_ppi_channels_enable(
   1024c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   10250:	e7f5      	b.n	1023e <radio_tmr_start_us+0x1a>
   10252:	bf00      	nop
   10254:	40008000 	.word	0x40008000
   10258:	4001f000 	.word	0x4001f000

0001025c <radio_tmr_start_now>:
	nrf_ppi_channels_disable(
   1025c:	4603      	mov	r3, r0
   1025e:	b1f0      	cbz	r0, 1029e <radio_tmr_start_now+0x42>
   10260:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    p_reg->CHENCLR = mask;
   10264:	4a11      	ldr	r2, [pc, #68]	; (102ac <radio_tmr_start_now+0x50>)
   10266:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1026a:	b1db      	cbz	r3, 102a4 <radio_tmr_start_now+0x48>
   1026c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   10270:	4b0e      	ldr	r3, [pc, #56]	; (102ac <radio_tmr_start_now+0x50>)
   10272:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10276:	f5a3 33b8 	sub.w	r3, r3, #94208	; 0x17000
   1027a:	2201      	movs	r2, #1
   1027c:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	/* Capture the current time */
	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);
	now = EVENT_TIMER->CC[1];
   1027e:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
	start = now;
   10282:	4613      	mov	r3, r2

	/* Setup PPI while determining the latency in doing so */
	do {
		/* Set start to be, now plus the determined latency */
		start = (now << 1) - start;
   10284:	ebc3 0342 	rsb	r3, r3, r2, lsl #1

		/* Setup compare event with min. 1 us offset */
		nrf_timer_cc_set(EVENT_TIMER, 0, start + 1);
   10288:	1c58      	adds	r0, r3, #1
    p_reg->CC[cc_channel] = cc_value;
   1028a:	4a09      	ldr	r2, [pc, #36]	; (102b0 <radio_tmr_start_now+0x54>)
   1028c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10290:	2101      	movs	r1, #1
   10292:	6451      	str	r1, [r2, #68]	; 0x44

		/* Capture the current time */
		nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CAPTURE1);

		now = EVENT_TIMER->CC[1];
   10294:	f8d2 2544 	ldr.w	r2, [r2, #1348]	; 0x544
	} while (now > start);
   10298:	4293      	cmp	r3, r2
   1029a:	d3f3      	bcc.n	10284 <radio_tmr_start_now+0x28>

	return start + 1;
}
   1029c:	4770      	bx	lr
	nrf_ppi_channels_disable(
   1029e:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   102a2:	e7df      	b.n	10264 <radio_tmr_start_now+0x8>
	nrf_ppi_channels_enable(
   102a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   102a8:	e7e2      	b.n	10270 <radio_tmr_start_now+0x14>
   102aa:	bf00      	nop
   102ac:	4001f000 	.word	0x4001f000
   102b0:	40008000 	.word	0x40008000

000102b4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   102b4:	4b01      	ldr	r3, [pc, #4]	; (102bc <radio_tmr_start_get+0x8>)
   102b6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   102ba:	4770      	bx	lr
   102bc:	4000b000 	.word	0x4000b000

000102c0 <radio_tmr_stop>:
   102c0:	4a04      	ldr	r2, [pc, #16]	; (102d4 <radio_tmr_stop+0x14>)
   102c2:	2301      	movs	r3, #1
   102c4:	6053      	str	r3, [r2, #4]
   102c6:	6113      	str	r3, [r2, #16]
   102c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   102cc:	6053      	str	r3, [r2, #4]
   102ce:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   102d0:	4770      	bx	lr
   102d2:	bf00      	nop
   102d4:	40008000 	.word	0x40008000

000102d8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   102d8:	4b04      	ldr	r3, [pc, #16]	; (102ec <radio_tmr_hcto_configure+0x14>)
   102da:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
   102de:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
   102e2:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   102e6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   102ea:	4770      	bx	lr
   102ec:	40008000 	.word	0x40008000

000102f0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   102f0:	4b06      	ldr	r3, [pc, #24]	; (1030c <radio_tmr_aa_capture+0x1c>)
   102f2:	4a07      	ldr	r2, [pc, #28]	; (10310 <radio_tmr_aa_capture+0x20>)
   102f4:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   102f8:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
   102fc:	3240      	adds	r2, #64	; 0x40
   102fe:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   10302:	4a04      	ldr	r2, [pc, #16]	; (10314 <radio_tmr_aa_capture+0x24>)
   10304:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   10308:	4770      	bx	lr
   1030a:	bf00      	nop
   1030c:	4001f000 	.word	0x4001f000
   10310:	40001100 	.word	0x40001100
   10314:	04000080 	.word	0x04000080

00010318 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   10318:	4b01      	ldr	r3, [pc, #4]	; (10320 <radio_tmr_aa_get+0x8>)
   1031a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1031e:	4770      	bx	lr
   10320:	40008000 	.word	0x40008000

00010324 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   10324:	4b01      	ldr	r3, [pc, #4]	; (1032c <radio_tmr_aa_save+0x8>)
   10326:	6018      	str	r0, [r3, #0]
}
   10328:	4770      	bx	lr
   1032a:	bf00      	nop
   1032c:	20008c34 	.word	0x20008c34

00010330 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
   10330:	4b01      	ldr	r3, [pc, #4]	; (10338 <radio_tmr_aa_restore+0x8>)
   10332:	6818      	ldr	r0, [r3, #0]
   10334:	4770      	bx	lr
   10336:	bf00      	nop
   10338:	20008c34 	.word	0x20008c34

0001033c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1033c:	4b01      	ldr	r3, [pc, #4]	; (10344 <radio_tmr_ready_get+0x8>)
   1033e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   10342:	4770      	bx	lr
   10344:	40008000 	.word	0x40008000

00010348 <radio_tmr_ready_save>:

static uint32_t radio_tmr_ready;

void radio_tmr_ready_save(uint32_t ready)
{
	radio_tmr_ready = ready;
   10348:	4b01      	ldr	r3, [pc, #4]	; (10350 <radio_tmr_ready_save+0x8>)
   1034a:	6018      	str	r0, [r3, #0]
}
   1034c:	4770      	bx	lr
   1034e:	bf00      	nop
   10350:	20008c38 	.word	0x20008c38

00010354 <radio_tmr_ready_restore>:

uint32_t radio_tmr_ready_restore(void)
{
	return radio_tmr_ready;
}
   10354:	4b01      	ldr	r3, [pc, #4]	; (1035c <radio_tmr_ready_restore+0x8>)
   10356:	6818      	ldr	r0, [r3, #0]
   10358:	4770      	bx	lr
   1035a:	bf00      	nop
   1035c:	20008c38 	.word	0x20008c38

00010360 <radio_tmr_end_capture>:
   10360:	4b02      	ldr	r3, [pc, #8]	; (1036c <radio_tmr_end_capture+0xc>)
   10362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   10366:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1036a:	4770      	bx	lr
   1036c:	4001f000 	.word	0x4001f000

00010370 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   10370:	4b01      	ldr	r3, [pc, #4]	; (10378 <radio_tmr_end_get+0x8>)
   10372:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   10376:	4770      	bx	lr
   10378:	40008000 	.word	0x40008000

0001037c <radio_ar_configure>:
}

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk, uint8_t flags)
{
   1037c:	b538      	push	{r3, r4, r5, lr}
   1037e:	4604      	mov	r4, r0
	 */

	phy = flags >> 2;

	/* Check if extended PDU or non-1M and not legacy PDU */
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
   10380:	f012 0f02 	tst.w	r2, #2
   10384:	d105      	bne.n	10392 <radio_ar_configure+0x16>
   10386:	0893      	lsrs	r3, r2, #2
   10388:	f012 0f01 	tst.w	r2, #1
   1038c:	d124      	bne.n	103d8 <radio_ar_configure+0x5c>
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
   1038e:	2b01      	cmp	r3, #1
   10390:	d922      	bls.n	103d8 <radio_ar_configure+0x5c>
		addrptr = NRF_RADIO->PACKETPTR + 1;
   10392:	4b14      	ldr	r3, [pc, #80]	; (103e4 <radio_ar_configure+0x68>)
   10394:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   10398:	3201      	adds	r2, #1
		bcc = 80;
   1039a:	2050      	movs	r0, #80	; 0x50
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1039c:	4b12      	ldr	r3, [pc, #72]	; (103e8 <radio_ar_configure+0x6c>)
   1039e:	2503      	movs	r5, #3
   103a0:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
   103a4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   103a8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   103ac:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   103b0:	4a0e      	ldr	r2, [pc, #56]	; (103ec <radio_ar_configure+0x70>)
   103b2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
   103b6:	2200      	movs	r2, #0
   103b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   103bc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   103c0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	radio_bc_configure(bcc);
   103c4:	f7ff fe76 	bl	100b4 <radio_bc_configure>
	radio_bc_status_reset();
   103c8:	f7ff fe80 	bl	100cc <radio_bc_status_reset>
   103cc:	4b08      	ldr	r3, [pc, #32]	; (103f0 <radio_ar_configure+0x74>)
   103ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   103d2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   103d6:	bd38      	pop	{r3, r4, r5, pc}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   103d8:	4b02      	ldr	r3, [pc, #8]	; (103e4 <radio_ar_configure+0x68>)
   103da:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   103de:	3a01      	subs	r2, #1
		bcc = 64;
   103e0:	2040      	movs	r0, #64	; 0x40
   103e2:	e7db      	b.n	1039c <radio_ar_configure+0x20>
   103e4:	40001000 	.word	0x40001000
   103e8:	4000f000 	.word	0x4000f000
   103ec:	20008b24 	.word	0x20008b24
   103f0:	4001f000 	.word	0x4001f000

000103f4 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   103f4:	4b01      	ldr	r3, [pc, #4]	; (103fc <radio_ar_match_get+0x8>)
   103f6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   103fa:	4770      	bx	lr
   103fc:	4000f000 	.word	0x4000f000

00010400 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   10400:	b508      	push	{r3, lr}
	radio_bc_status_reset();
   10402:	f7ff fe63 	bl	100cc <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   10406:	4b05      	ldr	r3, [pc, #20]	; (1041c <radio_ar_status_reset+0x1c>)
   10408:	2200      	movs	r2, #0
   1040a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->CHENCLR = mask;
   1040e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   10412:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   10416:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1041a:	bd08      	pop	{r3, pc}
   1041c:	4000f000 	.word	0x4000f000

00010420 <radio_ar_has_match>:

uint32_t radio_ar_has_match(void)
{
   10420:	b508      	push	{r3, lr}
	if (!radio_bc_has_match()) {
   10422:	f7ff fe5b 	bl	100dc <radio_bc_has_match>
   10426:	4603      	mov	r3, r0
   10428:	b1e8      	cbz	r0, 10466 <radio_ar_has_match+0x46>
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)aar_event);
}

NRF_STATIC_INLINE void nrf_aar_int_enable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1042a:	4b11      	ldr	r3, [pc, #68]	; (10470 <radio_ar_has_match+0x50>)
   1042c:	2201      	movs	r2, #1
   1042e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10432:	e002      	b.n	1043a <radio_ar_has_match+0x1a>
	}

	nrf_aar_int_enable(NRF_AAR, AAR_INTENSET_END_Msk);

	while (NRF_AAR->EVENTS_END == 0U) {
		__WFE();
   10434:	bf20      	wfe
		__SEV();
   10436:	bf40      	sev
		__WFE();
   10438:	bf20      	wfe
	while (NRF_AAR->EVENTS_END == 0U) {
   1043a:	4b0d      	ldr	r3, [pc, #52]	; (10470 <radio_ar_has_match+0x50>)
   1043c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   10440:	2b00      	cmp	r3, #0
   10442:	d0f7      	beq.n	10434 <radio_ar_has_match+0x14>
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_aar_int_disable(NRF_AAR_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   10444:	4b0a      	ldr	r3, [pc, #40]	; (10470 <radio_ar_has_match+0x50>)
   10446:	2201      	movs	r2, #1
   10448:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   1044c:	4a09      	ldr	r2, [pc, #36]	; (10474 <radio_ar_has_match+0x54>)
   1044e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   10452:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

	nrf_aar_int_disable(NRF_AAR, AAR_INTENCLR_END_Msk);

	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_AAR));

	if (NRF_AAR->EVENTS_RESOLVED && !NRF_AAR->EVENTS_NOTRESOLVED) {
   10456:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   1045a:	b123      	cbz	r3, 10466 <radio_ar_has_match+0x46>
   1045c:	4b04      	ldr	r3, [pc, #16]	; (10470 <radio_ar_has_match+0x50>)
   1045e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   10462:	b113      	cbz	r3, 1046a <radio_ar_has_match+0x4a>
		return 1U;
	}

	return 0U;
   10464:	2300      	movs	r3, #0
}
   10466:	4618      	mov	r0, r3
   10468:	bd08      	pop	{r3, pc}
		return 1U;
   1046a:	2301      	movs	r3, #1
   1046c:	e7fb      	b.n	10466 <radio_ar_has_match+0x46>
   1046e:	bf00      	nop
   10470:	4000f000 	.word	0x4000f000
   10474:	e000e100 	.word	0xe000e100

00010478 <radio_ar_resolve>:

void radio_ar_resolve(const uint8_t *addr)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   10478:	4b16      	ldr	r3, [pc, #88]	; (104d4 <radio_ar_resolve+0x5c>)
   1047a:	2203      	movs	r2, #3
   1047c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	NRF_AAR->ADDRPTR = (uint32_t)addr - 3;
   10480:	3803      	subs	r0, #3
   10482:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   10486:	2200      	movs	r2, #0
   10488:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1048c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   10490:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   10494:	4a10      	ldr	r2, [pc, #64]	; (104d8 <radio_ar_resolve+0x60>)
   10496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1049a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    p_reg->INTENSET = mask;
   1049e:	2201      	movs	r2, #1
   104a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}

NRF_STATIC_INLINE void nrf_aar_task_trigger(NRF_AAR_Type * p_reg, nrf_aar_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
   104a4:	601a      	str	r2, [r3, #0]
}
   104a6:	e002      	b.n	104ae <radio_ar_resolve+0x36>
	nrf_aar_int_enable(NRF_AAR, AAR_INTENSET_END_Msk);

	nrf_aar_task_trigger(NRF_AAR, NRF_AAR_TASK_START);

	while (NRF_AAR->EVENTS_END == 0) {
		__WFE();
   104a8:	bf20      	wfe
		__SEV();
   104aa:	bf40      	sev
		__WFE();
   104ac:	bf20      	wfe
	while (NRF_AAR->EVENTS_END == 0) {
   104ae:	4b09      	ldr	r3, [pc, #36]	; (104d4 <radio_ar_resolve+0x5c>)
   104b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   104b4:	2b00      	cmp	r3, #0
   104b6:	d0f7      	beq.n	104a8 <radio_ar_resolve+0x30>
    p_reg->INTENCLR = mask;
   104b8:	4b06      	ldr	r3, [pc, #24]	; (104d4 <radio_ar_resolve+0x5c>)
   104ba:	2201      	movs	r2, #1
   104bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   104c0:	4a05      	ldr	r2, [pc, #20]	; (104d8 <radio_ar_resolve+0x60>)
   104c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   104c6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180

	nrf_aar_int_disable(NRF_AAR, AAR_INTENCLR_END_Msk);

	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_AAR));

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   104ca:	2200      	movs	r2, #0
   104cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

}
   104d0:	4770      	bx	lr
   104d2:	bf00      	nop
   104d4:	4000f000 	.word	0x4000f000
   104d8:	e000e100 	.word	0xe000e100

000104dc <radio_df_cte_inline_set_enabled>:
 *
 * @param[in] cte_info_in_s1    Informs where to expect CTEInfo field in PDU:
 *                              in S1 for data pdu, not in S1 for adv. PDU
 */
void radio_df_cte_inline_set_enabled(bool cte_info_in_s1)
{
   104dc:	b082      	sub	sp, #8
	const nrf_radio_cteinline_conf_t inline_conf = {
   104de:	2301      	movs	r3, #1
   104e0:	f88d 3000 	strb.w	r3, [sp]
   104e4:	f88d 0001 	strb.w	r0, [sp, #1]
   104e8:	f88d 3002 	strb.w	r3, [sp, #2]
   104ec:	2200      	movs	r2, #0
   104ee:	f88d 2003 	strb.w	r2, [sp, #3]
   104f2:	2202      	movs	r2, #2
   104f4:	f88d 2004 	strb.w	r2, [sp, #4]
   104f8:	f88d 3005 	strb.w	r3, [sp, #5]
   104fc:	b358      	cbz	r0, 10556 <radio_df_cte_inline_set_enabled+0x7a>
   104fe:	2320      	movs	r3, #32
   10500:	f88d 3006 	strb.w	r3, [sp, #6]
   10504:	f88d 3007 	strb.w	r3, [sp, #7]
    p_reg->CTEINLINECONF = (((p_config->enable ?
   10508:	f89d 3000 	ldrb.w	r3, [sp]
                                  RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled) <<
   1050c:	b32b      	cbz	r3, 1055a <radio_df_cte_inline_set_enabled+0x7e>
   1050e:	2301      	movs	r3, #1
                            ((p_config->info_in_s1 ?
   10510:	f89d 2001 	ldrb.w	r2, [sp, #1]
                                  RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1) <<
   10514:	b31a      	cbz	r2, 1055e <radio_df_cte_inline_set_enabled+0x82>
   10516:	2208      	movs	r2, #8
                                  RADIO_CTEINLINECONF_CTEINLINECTRLEN_Pos ) |
   10518:	4313      	orrs	r3, r2
                            ((p_config->err_handling ?
   1051a:	f89d 2002 	ldrb.w	r2, [sp, #2]
                                  RADIO_CTEINLINECONF_CTEERRORHANDLING_No) <<
   1051e:	b302      	cbz	r2, 10562 <radio_df_cte_inline_set_enabled+0x86>
   10520:	2210      	movs	r2, #16
                                  RADIO_CTEINLINECONF_CTEINFOINS1_Pos ) |
   10522:	4313      	orrs	r3, r2
                            ((uint32_t)p_config->time_range <<
   10524:	f89d 2003 	ldrb.w	r2, [sp, #3]
                                  RADIO_CTEINLINECONF_CTEERRORHANDLING_Pos ) |
   10528:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
                            ((uint32_t)p_config->rx1us <<
   1052c:	f89d 2004 	ldrb.w	r2, [sp, #4]
                                 RADIO_CTEINLINECONF_CTETIMEVALIDRANGE_Pos) |
   10530:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                            ((uint32_t)p_config->rx2us <<
   10534:	f89d 2005 	ldrb.w	r2, [sp, #5]
                                 RADIO_CTEINLINECONF_CTEINLINERXMODE1US_Pos) |
   10538:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                            ((uint32_t)p_config->s0_pattern << RADIO_CTEINLINECONF_S0CONF_Pos) |
   1053c:	f89d 2006 	ldrb.w	r2, [sp, #6]
                                 RADIO_CTEINLINECONF_CTEINLINERXMODE2US_Pos) |
   10540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                            ((uint32_t)p_config->s0_mask << RADIO_CTEINLINECONF_S0MASK_Pos));
   10544:	f89d 2007 	ldrb.w	r2, [sp, #7]
                            ((uint32_t)p_config->s0_pattern << RADIO_CTEINLINECONF_S0CONF_Pos) |
   10548:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    p_reg->CTEINLINECONF = (((p_config->enable ?
   1054c:	4a06      	ldr	r2, [pc, #24]	; (10568 <radio_df_cte_inline_set_enabled+0x8c>)
   1054e:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
		.s0_mask = (cte_info_in_s1 ? DF_S0_MASK_CP_BIT_IN_DATA_CHANNEL_PDU :
							DF_S0_ALLOW_ALL_PER_ADV_PDU)
	};

	nrf_radio_cteinline_configure(NRF_RADIO, &inline_conf);
}
   10552:	b002      	add	sp, #8
   10554:	4770      	bx	lr
	const nrf_radio_cteinline_conf_t inline_conf = {
   10556:	2300      	movs	r3, #0
   10558:	e7d2      	b.n	10500 <radio_df_cte_inline_set_enabled+0x24>
                                  RADIO_CTEINLINECONF_CTEINLINECTRLEN_Disabled) <<
   1055a:	2300      	movs	r3, #0
   1055c:	e7d8      	b.n	10510 <radio_df_cte_inline_set_enabled+0x34>
                                  RADIO_CTEINLINECONF_CTEINFOINS1_NotInS1) <<
   1055e:	2200      	movs	r2, #0
   10560:	e7da      	b.n	10518 <radio_df_cte_inline_set_enabled+0x3c>
                                  RADIO_CTEINLINECONF_CTEERRORHANDLING_No) <<
   10562:	2200      	movs	r2, #0
   10564:	e7dd      	b.n	10522 <radio_df_cte_inline_set_enabled+0x46>
   10566:	bf00      	nop
   10568:	40001000 	.word	0x40001000

0001056c <mayfly_enable_cb>:
#define MAYFLY_CALL_ID_LLL    TICKER_USER_ID_LLL
#define MAYFLY_CALL_ID_WORKER TICKER_USER_ID_ULL_HIGH
#define MAYFLY_CALL_ID_JOB    TICKER_USER_ID_ULL_LOW

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   1056c:	b510      	push	{r4, lr}
   1056e:	4614      	mov	r4, r2
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   10570:	2902      	cmp	r1, #2
   10572:	d104      	bne.n	1057e <mayfly_enable_cb+0x12>

	if (enable) {
   10574:	b184      	cbz	r4, 10598 <mayfly_enable_cb+0x2c>
		irq_enable(HAL_SWI_JOB_IRQ);
   10576:	200b      	movs	r0, #11
   10578:	f7f4 f9c6 	bl	4908 <arch_irq_enable>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1057c:	bd10      	pop	{r4, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1057e:	231e      	movs	r3, #30
   10580:	4a07      	ldr	r2, [pc, #28]	; (105a0 <mayfly_enable_cb+0x34>)
   10582:	4908      	ldr	r1, [pc, #32]	; (105a4 <mayfly_enable_cb+0x38>)
   10584:	4808      	ldr	r0, [pc, #32]	; (105a8 <mayfly_enable_cb+0x3c>)
   10586:	f009 f922 	bl	197ce <assert_print>
   1058a:	4040      	eors	r0, r0
   1058c:	f380 8811 	msr	BASEPRI, r0
   10590:	f04f 0003 	mov.w	r0, #3
   10594:	df02      	svc	2
   10596:	e7ed      	b.n	10574 <mayfly_enable_cb+0x8>
		irq_disable(HAL_SWI_JOB_IRQ);
   10598:	200b      	movs	r0, #11
   1059a:	f7f4 f9c3 	bl	4924 <arch_irq_disable>
}
   1059e:	e7ed      	b.n	1057c <mayfly_enable_cb+0x10>
   105a0:	0001f704 	.word	0x0001f704
   105a4:	0001f754 	.word	0x0001f754
   105a8:	0001e920 	.word	0x0001e920

000105ac <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
   105ac:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   105ae:	2901      	cmp	r1, #1
   105b0:	d014      	beq.n	105dc <mayfly_is_enabled+0x30>
   105b2:	2902      	cmp	r1, #2
   105b4:	d016      	beq.n	105e4 <mayfly_is_enabled+0x38>
   105b6:	b169      	cbz	r1, 105d4 <mayfly_is_enabled+0x28>

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   105b8:	2336      	movs	r3, #54	; 0x36
   105ba:	4a0c      	ldr	r2, [pc, #48]	; (105ec <mayfly_is_enabled+0x40>)
   105bc:	490c      	ldr	r1, [pc, #48]	; (105f0 <mayfly_is_enabled+0x44>)
   105be:	480d      	ldr	r0, [pc, #52]	; (105f4 <mayfly_is_enabled+0x48>)
   105c0:	f009 f905 	bl	197ce <assert_print>
   105c4:	4040      	eors	r0, r0
   105c6:	f380 8811 	msr	BASEPRI, r0
   105ca:	f04f 0003 	mov.w	r0, #3
   105ce:	df02      	svc	2
		break;
	}

	return 0;
   105d0:	2000      	movs	r0, #0
   105d2:	e002      	b.n	105da <mayfly_is_enabled+0x2e>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   105d4:	2018      	movs	r0, #24
   105d6:	f7f4 f9b9 	bl	494c <arch_irq_is_enabled>
}
   105da:	bd08      	pop	{r3, pc}
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   105dc:	200b      	movs	r0, #11
   105de:	f7f4 f9b5 	bl	494c <arch_irq_is_enabled>
   105e2:	e7fa      	b.n	105da <mayfly_is_enabled+0x2e>
		return irq_is_enabled(HAL_SWI_JOB_IRQ);
   105e4:	200b      	movs	r0, #11
   105e6:	f7f4 f9b1 	bl	494c <arch_irq_is_enabled>
   105ea:	e7f6      	b.n	105da <mayfly_is_enabled+0x2e>
   105ec:	0001f704 	.word	0x0001f704
   105f0:	0001ead8 	.word	0x0001ead8
   105f4:	0001e920 	.word	0x0001e920

000105f8 <mayfly_pend>:
#endif
	       0;
}

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
   105f8:	b508      	push	{r3, lr}
	(void)caller_id;

	switch (callee_id) {
   105fa:	2901      	cmp	r1, #1
   105fc:	d015      	beq.n	1062a <mayfly_pend+0x32>
   105fe:	2902      	cmp	r1, #2
   10600:	d019      	beq.n	10636 <mayfly_pend+0x3e>
   10602:	b161      	cbz	r1, 1061e <mayfly_pend+0x26>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   10604:	2367      	movs	r3, #103	; 0x67
   10606:	4a0f      	ldr	r2, [pc, #60]	; (10644 <mayfly_pend+0x4c>)
   10608:	490f      	ldr	r1, [pc, #60]	; (10648 <mayfly_pend+0x50>)
   1060a:	4810      	ldr	r0, [pc, #64]	; (1064c <mayfly_pend+0x54>)
   1060c:	f009 f8df 	bl	197ce <assert_print>
   10610:	4040      	eors	r0, r0
   10612:	f380 8811 	msr	BASEPRI, r0
   10616:	f04f 0003 	mov.w	r0, #3
   1061a:	df02      	svc	2
		break;
	}
}
   1061c:	e004      	b.n	10628 <mayfly_pend+0x30>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1061e:	4b0c      	ldr	r3, [pc, #48]	; (10650 <mayfly_pend+0x58>)
   10620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   10624:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   10628:	bd08      	pop	{r3, pc}
   1062a:	4b09      	ldr	r3, [pc, #36]	; (10650 <mayfly_pend+0x58>)
   1062c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10630:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}

static inline void hal_swi_worker_pend(void)
{
	NVIC_SetPendingIRQ(HAL_SWI_WORKER_IRQ);
}
   10634:	e7f8      	b.n	10628 <mayfly_pend+0x30>
   10636:	4b06      	ldr	r3, [pc, #24]	; (10650 <mayfly_pend+0x58>)
   10638:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1063c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

static inline void hal_swi_job_pend(void)
{
	NVIC_SetPendingIRQ(HAL_SWI_JOB_IRQ);
}
   10640:	e7f2      	b.n	10628 <mayfly_pend+0x30>
   10642:	bf00      	nop
   10644:	0001f704 	.word	0x0001f704
   10648:	0001ead8 	.word	0x0001ead8
   1064c:	0001e920 	.word	0x0001e920
   10650:	e000e100 	.word	0xe000e100

00010654 <hal_ticker_instance0_caller_id_get>:
	TICKER_CALL_ID_JOB,
	TICKER_CALL_ID_PROGRAM
};

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
   10654:	b510      	push	{r4, lr}
   10656:	4604      	mov	r4, r0
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   10658:	2803      	cmp	r0, #3
   1065a:	d804      	bhi.n	10666 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1065c:	4b0f      	ldr	r3, [pc, #60]	; (1069c <hal_ticker_instance0_caller_id_get+0x48>)
   1065e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   10660:	b174      	cbz	r4, 10680 <hal_ticker_instance0_caller_id_get+0x2c>

	return caller_id;
}
   10662:	4620      	mov	r0, r4
   10664:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   10666:	232b      	movs	r3, #43	; 0x2b
   10668:	4a0d      	ldr	r2, [pc, #52]	; (106a0 <hal_ticker_instance0_caller_id_get+0x4c>)
   1066a:	490e      	ldr	r1, [pc, #56]	; (106a4 <hal_ticker_instance0_caller_id_get+0x50>)
   1066c:	480e      	ldr	r0, [pc, #56]	; (106a8 <hal_ticker_instance0_caller_id_get+0x54>)
   1066e:	f009 f8ae 	bl	197ce <assert_print>
   10672:	4040      	eors	r0, r0
   10674:	f380 8811 	msr	BASEPRI, r0
   10678:	f04f 0003 	mov.w	r0, #3
   1067c:	df02      	svc	2
   1067e:	e7ed      	b.n	1065c <hal_ticker_instance0_caller_id_get+0x8>
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   10680:	232e      	movs	r3, #46	; 0x2e
   10682:	4a07      	ldr	r2, [pc, #28]	; (106a0 <hal_ticker_instance0_caller_id_get+0x4c>)
   10684:	4909      	ldr	r1, [pc, #36]	; (106ac <hal_ticker_instance0_caller_id_get+0x58>)
   10686:	4808      	ldr	r0, [pc, #32]	; (106a8 <hal_ticker_instance0_caller_id_get+0x54>)
   10688:	f009 f8a1 	bl	197ce <assert_print>
   1068c:	4040      	eors	r0, r0
   1068e:	f380 8811 	msr	BASEPRI, r0
   10692:	f04f 0003 	mov.w	r0, #3
   10696:	df02      	svc	2
   10698:	e7e3      	b.n	10662 <hal_ticker_instance0_caller_id_get+0xe>
   1069a:	bf00      	nop
   1069c:	0001f7e4 	.word	0x0001f7e4
   106a0:	0001f764 	.word	0x0001f764
   106a4:	0001f7b4 	.word	0x0001f7b4
   106a8:	0001e920 	.word	0x0001e920
   106ac:	0001f7d4 	.word	0x0001f7d4

000106b0 <hal_ticker_instance0_sched>:

void hal_ticker_instance0_sched(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
				void *instance)
{
   106b0:	b508      	push	{r3, lr}
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   106b2:	3801      	subs	r0, #1
   106b4:	2804      	cmp	r0, #4
   106b6:	f200 8082 	bhi.w	107be <hal_ticker_instance0_sched+0x10e>
   106ba:	e8df f000 	tbb	[pc, r0]
   106be:	1a03      	.short	0x1a03
   106c0:	4831      	.short	0x4831
   106c2:	69          	.byte	0x69
   106c3:	00          	.byte	0x00
	case TICKER_CALL_ID_ISR:
		switch (callee_id) {
   106c4:	2904      	cmp	r1, #4
   106c6:	d00c      	beq.n	106e2 <hal_ticker_instance0_sched+0x32>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   106c8:	234e      	movs	r3, #78	; 0x4e
   106ca:	4a43      	ldr	r2, [pc, #268]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   106cc:	4943      	ldr	r1, [pc, #268]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   106ce:	4844      	ldr	r0, [pc, #272]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   106d0:	f009 f87d 	bl	197ce <assert_print>
   106d4:	4040      	eors	r0, r0
   106d6:	f380 8811 	msr	BASEPRI, r0
   106da:	f04f 0003 	mov.w	r0, #3
   106de:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   106e0:	bd08      	pop	{r3, pc}
			m.param = instance;
   106e2:	4940      	ldr	r1, [pc, #256]	; (107e4 <hal_ticker_instance0_sched+0x134>)
   106e4:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   106e6:	460b      	mov	r3, r1
   106e8:	2102      	movs	r1, #2
   106ea:	2000      	movs	r0, #0
   106ec:	f7f6 fc32 	bl	6f54 <mayfly_enqueue>
		break;
   106f0:	e7f6      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
		switch (callee_id) {
   106f2:	2903      	cmp	r1, #3
   106f4:	d00c      	beq.n	10710 <hal_ticker_instance0_sched+0x60>
			LL_ASSERT(0);
   106f6:	2365      	movs	r3, #101	; 0x65
   106f8:	4a37      	ldr	r2, [pc, #220]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   106fa:	4938      	ldr	r1, [pc, #224]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   106fc:	4838      	ldr	r0, [pc, #224]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   106fe:	f009 f866 	bl	197ce <assert_print>
   10702:	4040      	eors	r0, r0
   10704:	f380 8811 	msr	BASEPRI, r0
   10708:	f04f 0003 	mov.w	r0, #3
   1070c:	df02      	svc	2
			break;
   1070e:	e7e7      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
			m.param = instance;
   10710:	4935      	ldr	r1, [pc, #212]	; (107e8 <hal_ticker_instance0_sched+0x138>)
   10712:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   10714:	460b      	mov	r3, r1
   10716:	2101      	movs	r1, #1
   10718:	4608      	mov	r0, r1
   1071a:	f7f6 fc1b 	bl	6f54 <mayfly_enqueue>
		break;
   1071e:	e7df      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
		switch (callee_id) {
   10720:	2904      	cmp	r1, #4
   10722:	d00c      	beq.n	1073e <hal_ticker_instance0_sched+0x8e>
			LL_ASSERT(0);
   10724:	237c      	movs	r3, #124	; 0x7c
   10726:	4a2c      	ldr	r2, [pc, #176]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   10728:	492c      	ldr	r1, [pc, #176]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   1072a:	482d      	ldr	r0, [pc, #180]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   1072c:	f009 f84f 	bl	197ce <assert_print>
   10730:	4040      	eors	r0, r0
   10732:	f380 8811 	msr	BASEPRI, r0
   10736:	f04f 0003 	mov.w	r0, #3
   1073a:	df02      	svc	2
			break;
   1073c:	e7d0      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
			m.param = instance;
   1073e:	492b      	ldr	r1, [pc, #172]	; (107ec <hal_ticker_instance0_sched+0x13c>)
   10740:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   10742:	460b      	mov	r3, r1
   10744:	2102      	movs	r1, #2
   10746:	2001      	movs	r0, #1
   10748:	f7f6 fc04 	bl	6f54 <mayfly_enqueue>
		break;
   1074c:	e7c8      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
		switch (callee_id) {
   1074e:	2903      	cmp	r1, #3
   10750:	d00e      	beq.n	10770 <hal_ticker_instance0_sched+0xc0>
   10752:	2904      	cmp	r1, #4
   10754:	d014      	beq.n	10780 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   10756:	23a2      	movs	r3, #162	; 0xa2
   10758:	4a1f      	ldr	r2, [pc, #124]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   1075a:	4920      	ldr	r1, [pc, #128]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   1075c:	4820      	ldr	r0, [pc, #128]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   1075e:	f009 f836 	bl	197ce <assert_print>
   10762:	4040      	eors	r0, r0
   10764:	f380 8811 	msr	BASEPRI, r0
   10768:	f04f 0003 	mov.w	r0, #3
   1076c:	df02      	svc	2
			break;
   1076e:	e7b7      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
			m.param = instance;
   10770:	491f      	ldr	r1, [pc, #124]	; (107f0 <hal_ticker_instance0_sched+0x140>)
   10772:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10774:	460b      	mov	r3, r1
   10776:	2101      	movs	r1, #1
   10778:	2002      	movs	r0, #2
   1077a:	f7f6 fbeb 	bl	6f54 <mayfly_enqueue>
		break;
   1077e:	e7af      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
			m.param = instance;
   10780:	491c      	ldr	r1, [pc, #112]	; (107f4 <hal_ticker_instance0_sched+0x144>)
   10782:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   10784:	460b      	mov	r3, r1
   10786:	2102      	movs	r1, #2
   10788:	4608      	mov	r0, r1
   1078a:	f7f6 fbe3 	bl	6f54 <mayfly_enqueue>
		break;
   1078e:	e7a7      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
		switch (callee_id) {
   10790:	2904      	cmp	r1, #4
   10792:	d00c      	beq.n	107ae <hal_ticker_instance0_sched+0xfe>
			LL_ASSERT(0);
   10794:	23ba      	movs	r3, #186	; 0xba
   10796:	4a10      	ldr	r2, [pc, #64]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   10798:	4910      	ldr	r1, [pc, #64]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   1079a:	4811      	ldr	r0, [pc, #68]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   1079c:	f009 f817 	bl	197ce <assert_print>
   107a0:	4040      	eors	r0, r0
   107a2:	f380 8811 	msr	BASEPRI, r0
   107a6:	f04f 0003 	mov.w	r0, #3
   107aa:	df02      	svc	2
			break;
   107ac:	e798      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
			m.param = instance;
   107ae:	4912      	ldr	r1, [pc, #72]	; (107f8 <hal_ticker_instance0_sched+0x148>)
   107b0:	608b      	str	r3, [r1, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   107b2:	460b      	mov	r3, r1
   107b4:	2102      	movs	r1, #2
   107b6:	2003      	movs	r0, #3
   107b8:	f7f6 fbcc 	bl	6f54 <mayfly_enqueue>
		break;
   107bc:	e790      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
		LL_ASSERT(0);
   107be:	23c0      	movs	r3, #192	; 0xc0
   107c0:	4a05      	ldr	r2, [pc, #20]	; (107d8 <hal_ticker_instance0_sched+0x128>)
   107c2:	4906      	ldr	r1, [pc, #24]	; (107dc <hal_ticker_instance0_sched+0x12c>)
   107c4:	4806      	ldr	r0, [pc, #24]	; (107e0 <hal_ticker_instance0_sched+0x130>)
   107c6:	f009 f802 	bl	197ce <assert_print>
   107ca:	4040      	eors	r0, r0
   107cc:	f380 8811 	msr	BASEPRI, r0
   107d0:	f04f 0003 	mov.w	r0, #3
   107d4:	df02      	svc	2
}
   107d6:	e783      	b.n	106e0 <hal_ticker_instance0_sched+0x30>
   107d8:	0001f764 	.word	0x0001f764
   107dc:	0001ead8 	.word	0x0001ead8
   107e0:	0001e920 	.word	0x0001e920
   107e4:	20000850 	.word	0x20000850
   107e8:	20000840 	.word	0x20000840
   107ec:	20000890 	.word	0x20000890
   107f0:	20000880 	.word	0x20000880
   107f4:	20000870 	.word	0x20000870
   107f8:	20000860 	.word	0x20000860

000107fc <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   107fc:	4b03      	ldr	r3, [pc, #12]	; (1080c <pool_id+0x10>)
   107fe:	1ac0      	subs	r0, r0, r3
   10800:	1080      	asrs	r0, r0, #2
}
   10802:	4b03      	ldr	r3, [pc, #12]	; (10810 <pool_id+0x14>)
   10804:	fb03 f000 	mul.w	r0, r3, r0
   10808:	4770      	bx	lr
   1080a:	bf00      	nop
   1080c:	20000f88 	.word	0x20000f88
   10810:	ba2e8ba3 	.word	0xba2e8ba3

00010814 <net_buf_pool_get>:
}
   10814:	222c      	movs	r2, #44	; 0x2c
   10816:	4b02      	ldr	r3, [pc, #8]	; (10820 <net_buf_pool_get+0xc>)
   10818:	fb02 3000 	mla	r0, r2, r0, r3
   1081c:	4770      	bx	lr
   1081e:	bf00      	nop
   10820:	20000f88 	.word	0x20000f88

00010824 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   10824:	4800      	ldr	r0, [pc, #0]	; (10828 <get_hf_flags+0x4>)
   10826:	4770      	bx	lr
   10828:	20008cbc 	.word	0x20008cbc

0001082c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1082c:	4b03      	ldr	r3, [pc, #12]	; (1083c <get_subsys+0x10>)
   1082e:	1ac0      	subs	r0, r0, r3
   10830:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   10832:	4b03      	ldr	r3, [pc, #12]	; (10840 <get_subsys+0x14>)
   10834:	fb03 f000 	mul.w	r0, r3, r0
   10838:	4770      	bx	lr
   1083a:	bf00      	nop
   1083c:	20008c7c 	.word	0x20008c7c
   10840:	b6db6db7 	.word	0xb6db6db7

00010844 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10844:	b538      	push	{r3, r4, r5, lr}
   10846:	4605      	mov	r5, r0
   10848:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1084a:	f7ff ffef 	bl	1082c <get_subsys>
   1084e:	4601      	mov	r1, r0
   10850:	2240      	movs	r2, #64	; 0x40
   10852:	4803      	ldr	r0, [pc, #12]	; (10860 <onoff_stop+0x1c>)
   10854:	f00c fb6a 	bl	1cf2c <stop>
   10858:	4601      	mov	r1, r0
	notify(mgr, res);
   1085a:	4628      	mov	r0, r5
   1085c:	47a0      	blx	r4
}
   1085e:	bd38      	pop	{r3, r4, r5, pc}
   10860:	0001e458 	.word	0x0001e458

00010864 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   10864:	b530      	push	{r4, r5, lr}
   10866:	b083      	sub	sp, #12
   10868:	4605      	mov	r5, r0
   1086a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1086c:	f7ff ffde 	bl	1082c <get_subsys>
   10870:	4601      	mov	r1, r0
   10872:	2340      	movs	r3, #64	; 0x40
   10874:	9300      	str	r3, [sp, #0]
   10876:	4623      	mov	r3, r4
   10878:	4a05      	ldr	r2, [pc, #20]	; (10890 <onoff_start+0x2c>)
   1087a:	4806      	ldr	r0, [pc, #24]	; (10894 <onoff_start+0x30>)
   1087c:	f00c fb70 	bl	1cf60 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   10880:	1e01      	subs	r1, r0, #0
   10882:	db01      	blt.n	10888 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   10884:	b003      	add	sp, #12
   10886:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   10888:	4628      	mov	r0, r5
   1088a:	47a0      	blx	r4
}
   1088c:	e7fa      	b.n	10884 <onoff_start+0x20>
   1088e:	bf00      	nop
   10890:	0001cfa9 	.word	0x0001cfa9
   10894:	0001e458 	.word	0x0001e458

00010898 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   10898:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1089a:	b110      	cbz	r0, 108a2 <clock_event_handler+0xa>
   1089c:	2801      	cmp	r0, #1
   1089e:	d00d      	beq.n	108bc <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   108a0:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   108a2:	2100      	movs	r1, #0
   108a4:	4808      	ldr	r0, [pc, #32]	; (108c8 <clock_event_handler+0x30>)
   108a6:	f00c facc 	bl	1ce42 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   108aa:	6883      	ldr	r3, [r0, #8]
   108ac:	f013 0f07 	tst.w	r3, #7
   108b0:	d1f6      	bne.n	108a0 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   108b2:	2100      	movs	r1, #0
   108b4:	4804      	ldr	r0, [pc, #16]	; (108c8 <clock_event_handler+0x30>)
   108b6:	f00c fb27 	bl	1cf08 <clkstarted_handle>
   108ba:	e7f1      	b.n	108a0 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   108bc:	2101      	movs	r1, #1
   108be:	4802      	ldr	r0, [pc, #8]	; (108c8 <clock_event_handler+0x30>)
   108c0:	f00c fb22 	bl	1cf08 <clkstarted_handle>
}
   108c4:	e7ec      	b.n	108a0 <clock_event_handler+0x8>
   108c6:	bf00      	nop
   108c8:	0001e458 	.word	0x0001e458

000108cc <generic_hfclk_start>:
{
   108cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   108ce:	f04f 0320 	mov.w	r3, #32
   108d2:	f3ef 8411 	mrs	r4, BASEPRI
   108d6:	f383 8812 	msr	BASEPRI_MAX, r3
   108da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   108de:	4a13      	ldr	r2, [pc, #76]	; (1092c <generic_hfclk_start+0x60>)
   108e0:	6813      	ldr	r3, [r2, #0]
   108e2:	f043 0302 	orr.w	r3, r3, #2
   108e6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   108e8:	f013 0f01 	tst.w	r3, #1
   108ec:	d108      	bne.n	10900 <generic_hfclk_start+0x34>
	bool already_started = false;
   108ee:	2300      	movs	r3, #0
	__asm__ volatile(
   108f0:	f384 8811 	msr	BASEPRI, r4
   108f4:	f3bf 8f6f 	isb	sy
	if (already_started) {
   108f8:	b99b      	cbnz	r3, 10922 <generic_hfclk_start+0x56>
	hfclk_start();
   108fa:	f00c fb5d 	bl	1cfb8 <hfclk_start>
}
   108fe:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   10900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10904:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   10908:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1090c:	f012 0f01 	tst.w	r2, #1
   10910:	d101      	bne.n	10916 <generic_hfclk_start+0x4a>
	bool already_started = false;
   10912:	2300      	movs	r3, #0
   10914:	e7ec      	b.n	108f0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   10916:	f7ff ff85 	bl	10824 <get_hf_flags>
   1091a:	f00c fae2 	bl	1cee2 <set_on_state>
			already_started = true;
   1091e:	2301      	movs	r3, #1
   10920:	e7e6      	b.n	108f0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   10922:	2100      	movs	r1, #0
   10924:	4802      	ldr	r0, [pc, #8]	; (10930 <generic_hfclk_start+0x64>)
   10926:	f00c faef 	bl	1cf08 <clkstarted_handle>
		return;
   1092a:	e7e8      	b.n	108fe <generic_hfclk_start+0x32>
   1092c:	20008ccc 	.word	0x20008ccc
   10930:	0001e458 	.word	0x0001e458

00010934 <generic_hfclk_stop>:
{
   10934:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10936:	4b0a      	ldr	r3, [pc, #40]	; (10960 <generic_hfclk_stop+0x2c>)
   10938:	f3bf 8f5b 	dmb	ish
   1093c:	e853 2f00 	ldrex	r2, [r3]
   10940:	f022 0102 	bic.w	r1, r2, #2
   10944:	e843 1000 	strex	r0, r1, [r3]
   10948:	2800      	cmp	r0, #0
   1094a:	d1f7      	bne.n	1093c <generic_hfclk_stop+0x8>
   1094c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   10950:	f012 0f01 	tst.w	r2, #1
   10954:	d000      	beq.n	10958 <generic_hfclk_stop+0x24>
}
   10956:	bd08      	pop	{r3, pc}
	hfclk_stop();
   10958:	f00c fb38 	bl	1cfcc <hfclk_stop>
   1095c:	e7fb      	b.n	10956 <generic_hfclk_stop+0x22>
   1095e:	bf00      	nop
   10960:	20008ccc 	.word	0x20008ccc

00010964 <api_blocking_start>:
{
   10964:	b500      	push	{lr}
   10966:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   10968:	f8cd d000 	str.w	sp, [sp]
   1096c:	f8cd d004 	str.w	sp, [sp, #4]
   10970:	2300      	movs	r3, #0
   10972:	9302      	str	r3, [sp, #8]
   10974:	2301      	movs	r3, #1
   10976:	9303      	str	r3, [sp, #12]
   10978:	ab04      	add	r3, sp, #16
   1097a:	9304      	str	r3, [sp, #16]
   1097c:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1097e:	466b      	mov	r3, sp
   10980:	4a06      	ldr	r2, [pc, #24]	; (1099c <api_blocking_start+0x38>)
   10982:	f00c fb09 	bl	1cf98 <api_start>
	if (err < 0) {
   10986:	2800      	cmp	r0, #0
   10988:	db05      	blt.n	10996 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1098a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1098e:	2300      	movs	r3, #0
   10990:	4668      	mov	r0, sp
   10992:	f002 fae3 	bl	12f5c <z_impl_k_sem_take>
}
   10996:	b007      	add	sp, #28
   10998:	f85d fb04 	ldr.w	pc, [sp], #4
   1099c:	0001cfe1 	.word	0x0001cfe1

000109a0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   109a0:	b570      	push	{r4, r5, r6, lr}
   109a2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   109a4:	2200      	movs	r2, #0
   109a6:	2101      	movs	r1, #1
   109a8:	4610      	mov	r0, r2
   109aa:	f7f3 ffdd 	bl	4968 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   109ae:	4811      	ldr	r0, [pc, #68]	; (109f4 <clk_init+0x54>)
   109b0:	f001 f9ba 	bl	11d28 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   109b4:	4b10      	ldr	r3, [pc, #64]	; (109f8 <clk_init+0x58>)
   109b6:	4298      	cmp	r0, r3
   109b8:	d119      	bne.n	109ee <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   109ba:	f00c ff09 	bl	1d7d0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   109be:	2400      	movs	r4, #0
   109c0:	2c01      	cmp	r4, #1
   109c2:	d812      	bhi.n	109ea <clk_init+0x4a>
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   109c4:	4621      	mov	r1, r4
   109c6:	4630      	mov	r0, r6
   109c8:	f00c fa3b 	bl	1ce42 <get_sub_data>
   109cc:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   109ce:	4621      	mov	r1, r4
   109d0:	4630      	mov	r0, r6
   109d2:	f00c fa41 	bl	1ce58 <get_onoff_manager>
   109d6:	4909      	ldr	r1, [pc, #36]	; (109fc <clk_init+0x5c>)
   109d8:	f008 fc5a 	bl	19290 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   109dc:	2800      	cmp	r0, #0
   109de:	db05      	blt.n	109ec <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   109e0:	2301      	movs	r3, #1
   109e2:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   109e4:	441c      	add	r4, r3
   109e6:	b2e4      	uxtb	r4, r4
   109e8:	e7ea      	b.n	109c0 <clk_init+0x20>
	}

	return 0;
   109ea:	2000      	movs	r0, #0
}
   109ec:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   109ee:	f06f 0004 	mvn.w	r0, #4
   109f2:	e7fb      	b.n	109ec <clk_init+0x4c>
   109f4:	00010899 	.word	0x00010899
   109f8:	0bad0000 	.word	0x0bad0000
   109fc:	0001f824 	.word	0x0001f824

00010a00 <lfclk_spinwait>:
{
   10a00:	b570      	push	{r4, r5, r6, lr}
   10a02:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   10a04:	2801      	cmp	r0, #1
   10a06:	d107      	bne.n	10a18 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   10a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10a0c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   10a10:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   10a14:	2b01      	cmp	r3, #1
   10a16:	d05a      	beq.n	10ace <lfclk_spinwait+0xce>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10a18:	f00d f812 	bl	1da40 <k_is_in_isr>
   10a1c:	b928      	cbnz	r0, 10a2a <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   10a1e:	4b2f      	ldr	r3, [pc, #188]	; (10adc <lfclk_spinwait+0xdc>)
   10a20:	781b      	ldrb	r3, [r3, #0]
   10a22:	2b00      	cmp	r3, #0
   10a24:	d043      	beq.n	10aae <lfclk_spinwait+0xae>
   10a26:	2300      	movs	r3, #0
   10a28:	e000      	b.n	10a2c <lfclk_spinwait+0x2c>
   10a2a:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   10a2c:	461c      	mov	r4, r3
   10a2e:	2b00      	cmp	r3, #0
   10a30:	d03f      	beq.n	10ab2 <lfclk_spinwait+0xb2>
	__asm__ volatile(
   10a32:	f04f 0320 	mov.w	r3, #32
   10a36:	f3ef 8611 	mrs	r6, BASEPRI
   10a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   10a3e:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   10a42:	b924      	cbnz	r4, 10a4e <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   10a44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10a48:	2202      	movs	r2, #2
   10a4a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   10a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10a52:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   10a56:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   10a5a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   10a5e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   10a62:	d12d      	bne.n	10ac0 <lfclk_spinwait+0xc0>
    return false;
   10a64:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   10a66:	b11a      	cbz	r2, 10a70 <lfclk_spinwait+0x70>
   10a68:	2b01      	cmp	r3, #1
   10a6a:	d02b      	beq.n	10ac4 <lfclk_spinwait+0xc4>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   10a6c:	2d01      	cmp	r5, #1
   10a6e:	d029      	beq.n	10ac4 <lfclk_spinwait+0xc4>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   10a70:	b30c      	cbz	r4, 10ab6 <lfclk_spinwait+0xb6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   10a72:	4630      	mov	r0, r6
   10a74:	f7f3 ff3e 	bl	48f4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   10a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10a7c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   10a80:	2b00      	cmp	r3, #0
   10a82:	d1e4      	bne.n	10a4e <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   10a84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10a88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   10a8c:	2b00      	cmp	r3, #0
   10a8e:	d0de      	beq.n	10a4e <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   10a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10a94:	2200      	movs	r2, #0
   10a96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   10a9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   10a9e:	2201      	movs	r2, #1
   10aa0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   10aa4:	490e      	ldr	r1, [pc, #56]	; (10ae0 <lfclk_spinwait+0xe0>)
   10aa6:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   10aaa:	609a      	str	r2, [r3, #8]
}
   10aac:	e7cf      	b.n	10a4e <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10aae:	2301      	movs	r3, #1
   10ab0:	e7bc      	b.n	10a2c <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   10ab2:	2600      	movs	r6, #0
   10ab4:	e7c5      	b.n	10a42 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   10ab6:	2021      	movs	r0, #33	; 0x21
   10ab8:	2100      	movs	r1, #0
   10aba:	f002 ffaf 	bl	13a1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   10abe:	e7db      	b.n	10a78 <lfclk_spinwait+0x78>
                return true;
   10ac0:	2201      	movs	r2, #1
   10ac2:	e7d0      	b.n	10a66 <lfclk_spinwait+0x66>
	if (isr_mode) {
   10ac4:	b124      	cbz	r4, 10ad0 <lfclk_spinwait+0xd0>
	__asm__ volatile(
   10ac6:	f386 8811 	msr	BASEPRI, r6
   10aca:	f3bf 8f6f 	isb	sy
}
   10ace:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   10ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   10ad4:	2202      	movs	r2, #2
   10ad6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   10ada:	e7f8      	b.n	10ace <lfclk_spinwait+0xce>
   10adc:	200092a1 	.word	0x200092a1
   10ae0:	e000e100 	.word	0xe000e100

00010ae4 <z_nrf_clock_control_get_onoff>:
{
   10ae4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   10ae6:	b2c1      	uxtb	r1, r0
   10ae8:	4801      	ldr	r0, [pc, #4]	; (10af0 <z_nrf_clock_control_get_onoff+0xc>)
   10aea:	f00c f9b5 	bl	1ce58 <get_onoff_manager>
}
   10aee:	bd08      	pop	{r3, pc}
   10af0:	0001e458 	.word	0x0001e458

00010af4 <z_nrf_clock_bt_ctlr_hf_request>:
{
   10af4:	b508      	push	{r3, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   10af6:	4b0a      	ldr	r3, [pc, #40]	; (10b20 <z_nrf_clock_bt_ctlr_hf_request+0x2c>)
   10af8:	f3bf 8f5b 	dmb	ish
   10afc:	e853 2f00 	ldrex	r2, [r3]
   10b00:	f042 0101 	orr.w	r1, r2, #1
   10b04:	e843 1000 	strex	r0, r1, [r3]
   10b08:	2800      	cmp	r0, #0
   10b0a:	d1f7      	bne.n	10afc <z_nrf_clock_bt_ctlr_hf_request+0x8>
   10b0c:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   10b10:	f012 0f02 	tst.w	r2, #2
   10b14:	d000      	beq.n	10b18 <z_nrf_clock_bt_ctlr_hf_request+0x24>
}
   10b16:	bd08      	pop	{r3, pc}
	hfclk_start();
   10b18:	f00c fa4e 	bl	1cfb8 <hfclk_start>
   10b1c:	e7fb      	b.n	10b16 <z_nrf_clock_bt_ctlr_hf_request+0x22>
   10b1e:	bf00      	nop
   10b20:	20008ccc 	.word	0x20008ccc

00010b24 <z_nrf_clock_bt_ctlr_hf_release>:
{
   10b24:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   10b26:	4b0a      	ldr	r3, [pc, #40]	; (10b50 <z_nrf_clock_bt_ctlr_hf_release+0x2c>)
   10b28:	f3bf 8f5b 	dmb	ish
   10b2c:	e853 2f00 	ldrex	r2, [r3]
   10b30:	f022 0101 	bic.w	r1, r2, #1
   10b34:	e843 1000 	strex	r0, r1, [r3]
   10b38:	2800      	cmp	r0, #0
   10b3a:	d1f7      	bne.n	10b2c <z_nrf_clock_bt_ctlr_hf_release+0x8>
   10b3c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   10b40:	f012 0f02 	tst.w	r2, #2
   10b44:	d000      	beq.n	10b48 <z_nrf_clock_bt_ctlr_hf_release+0x24>
}
   10b46:	bd08      	pop	{r3, pc}
	hfclk_stop();
   10b48:	f00c fa40 	bl	1cfcc <hfclk_stop>
   10b4c:	e7fb      	b.n	10b46 <z_nrf_clock_bt_ctlr_hf_release+0x22>
   10b4e:	bf00      	nop
   10b50:	20008ccc 	.word	0x20008ccc

00010b54 <z_nrf_clock_control_lf_on>:
{
   10b54:	b510      	push	{r4, lr}
   10b56:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   10b58:	4b10      	ldr	r3, [pc, #64]	; (10b9c <z_nrf_clock_control_lf_on+0x48>)
   10b5a:	2101      	movs	r1, #1
   10b5c:	f3bf 8f5b 	dmb	ish
   10b60:	e853 2f00 	ldrex	r2, [r3]
   10b64:	e843 1000 	strex	r0, r1, [r3]
   10b68:	2800      	cmp	r0, #0
   10b6a:	d1f9      	bne.n	10b60 <z_nrf_clock_control_lf_on+0xc>
   10b6c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   10b70:	b11a      	cbz	r2, 10b7a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   10b72:	1e63      	subs	r3, r4, #1
   10b74:	2b01      	cmp	r3, #1
   10b76:	d90d      	bls.n	10b94 <z_nrf_clock_control_lf_on+0x40>
}
   10b78:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   10b7a:	4809      	ldr	r0, [pc, #36]	; (10ba0 <z_nrf_clock_control_lf_on+0x4c>)
   10b7c:	f00c f96c 	bl	1ce58 <get_onoff_manager>
   10b80:	4908      	ldr	r1, [pc, #32]	; (10ba4 <z_nrf_clock_control_lf_on+0x50>)
   10b82:	2300      	movs	r3, #0
   10b84:	604b      	str	r3, [r1, #4]
   10b86:	608b      	str	r3, [r1, #8]
   10b88:	60cb      	str	r3, [r1, #12]
   10b8a:	2301      	movs	r3, #1
   10b8c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   10b8e:	f008 fb9c 	bl	192ca <onoff_request>
   10b92:	e7ee      	b.n	10b72 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   10b94:	4620      	mov	r0, r4
   10b96:	f7ff ff33 	bl	10a00 <lfclk_spinwait>
		break;
   10b9a:	e7ed      	b.n	10b78 <z_nrf_clock_control_lf_on+0x24>
   10b9c:	20008cd0 	.word	0x20008cd0
   10ba0:	0001e458 	.word	0x0001e458
   10ba4:	20008c6c 	.word	0x20008c6c

00010ba8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   10ba8:	b510      	push	{r4, lr}
   10baa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   10bac:	280a      	cmp	r0, #10
   10bae:	d007      	beq.n	10bc0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   10bb0:	4b07      	ldr	r3, [pc, #28]	; (10bd0 <console_out+0x28>)
   10bb2:	6818      	ldr	r0, [r3, #0]
   10bb4:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
   10bb6:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   10bb8:	685b      	ldr	r3, [r3, #4]
   10bba:	4798      	blx	r3

	return c;
}
   10bbc:	4620      	mov	r0, r4
   10bbe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   10bc0:	4b03      	ldr	r3, [pc, #12]	; (10bd0 <console_out+0x28>)
   10bc2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   10bc4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   10bc6:	685b      	ldr	r3, [r3, #4]
   10bc8:	210d      	movs	r1, #13
   10bca:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   10bcc:	e7f0      	b.n	10bb0 <console_out+0x8>
   10bce:	bf00      	nop
   10bd0:	20008cd4 	.word	0x20008cd4

00010bd4 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   10bd4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   10bd6:	4c04      	ldr	r4, [pc, #16]	; (10be8 <uart_console_hook_install+0x14>)
   10bd8:	4620      	mov	r0, r4
   10bda:	f7f4 fa4b 	bl	5074 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   10bde:	4620      	mov	r0, r4
   10be0:	f7f2 ff22 	bl	3a28 <__printk_hook_install>
#endif
}
   10be4:	bd10      	pop	{r4, pc}
   10be6:	bf00      	nop
   10be8:	00010ba9 	.word	0x00010ba9

00010bec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   10bec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   10bee:	4806      	ldr	r0, [pc, #24]	; (10c08 <uart_console_init+0x1c>)
   10bf0:	4b06      	ldr	r3, [pc, #24]	; (10c0c <uart_console_init+0x20>)
   10bf2:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   10bf4:	f00c fe75 	bl	1d8e2 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   10bf8:	b118      	cbz	r0, 10c02 <uart_console_init+0x16>
		return -ENODEV;
	}

	uart_console_hook_install();
   10bfa:	f7ff ffeb 	bl	10bd4 <uart_console_hook_install>

	return 0;
   10bfe:	2000      	movs	r0, #0
}
   10c00:	bd08      	pop	{r3, pc}
		return -ENODEV;
   10c02:	f06f 0012 	mvn.w	r0, #18
   10c06:	e7fb      	b.n	10c00 <uart_console_init+0x14>
   10c08:	0001e4d0 	.word	0x0001e4d0
   10c0c:	20008cd4 	.word	0x20008cd4

00010c10 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   10c10:	b128      	cbz	r0, 10c1e <get_dev+0xe>
   10c12:	2801      	cmp	r0, #1
   10c14:	d101      	bne.n	10c1a <get_dev+0xa>
   10c16:	4803      	ldr	r0, [pc, #12]	; (10c24 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   10c18:	4770      	bx	lr
	const struct device *dev = NULL;
   10c1a:	2000      	movs	r0, #0
   10c1c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   10c1e:	4802      	ldr	r0, [pc, #8]	; (10c28 <get_dev+0x18>)
   10c20:	4770      	bx	lr
   10c22:	bf00      	nop
   10c24:	0001e470 	.word	0x0001e470
   10c28:	0001e488 	.word	0x0001e488

00010c2c <gpio_nrfx_pin_interrupt_configure>:
{
   10c2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c2e:	b085      	sub	sp, #20
   10c30:	460e      	mov	r6, r1
   10c32:	4619      	mov	r1, r3
	return port->config;
   10c34:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   10c36:	7b1b      	ldrb	r3, [r3, #12]
   10c38:	f006 051f 	and.w	r5, r6, #31
   10c3c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   10c40:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   10c44:	d022      	beq.n	10c8c <gpio_nrfx_pin_interrupt_configure+0x60>
   10c46:	4607      	mov	r7, r0
   10c48:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   10c4a:	2300      	movs	r3, #0
   10c4c:	9302      	str	r3, [sp, #8]
   10c4e:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   10c50:	4610      	mov	r0, r2
   10c52:	f00c fa43 	bl	1d0dc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   10c56:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   10c5a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   10c5c:	6899      	ldr	r1, [r3, #8]
   10c5e:	40f1      	lsrs	r1, r6
   10c60:	f011 0f01 	tst.w	r1, #1
   10c64:	d102      	bne.n	10c6c <gpio_nrfx_pin_interrupt_configure+0x40>
   10c66:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   10c6a:	d014      	beq.n	10c96 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10c6c:	2300      	movs	r3, #0
   10c6e:	aa02      	add	r2, sp, #8
   10c70:	4619      	mov	r1, r3
   10c72:	4628      	mov	r0, r5
   10c74:	f001 fac2 	bl	121fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10c78:	4b1b      	ldr	r3, [pc, #108]	; (10ce8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   10c7a:	4298      	cmp	r0, r3
   10c7c:	d131      	bne.n	10ce2 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   10c7e:	2101      	movs	r1, #1
   10c80:	4628      	mov	r0, r5
   10c82:	f001 fc99 	bl	125b8 <nrfx_gpiote_trigger_enable>
	return 0;
   10c86:	2000      	movs	r0, #0
}
   10c88:	b005      	add	sp, #20
   10c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   10c8c:	4628      	mov	r0, r5
   10c8e:	f001 fcf7 	bl	12680 <nrfx_gpiote_trigger_disable>
		return 0;
   10c92:	2000      	movs	r0, #0
   10c94:	e7f8      	b.n	10c88 <gpio_nrfx_pin_interrupt_configure+0x5c>
    *p_pin = pin_number & 0x1F;
   10c96:	f005 031f 	and.w	r3, r5, #31
    return pin_number >> 5;
   10c9a:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   10c9c:	2a01      	cmp	r2, #1
   10c9e:	d014      	beq.n	10cca <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   10ca0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   10ca4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   10ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   10cac:	f013 0f01 	tst.w	r3, #1
   10cb0:	d1dc      	bne.n	10c6c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   10cb2:	f10d 0107 	add.w	r1, sp, #7
   10cb6:	4628      	mov	r0, r5
   10cb8:	f001 fc22 	bl	12500 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   10cbc:	4b0b      	ldr	r3, [pc, #44]	; (10cec <gpio_nrfx_pin_interrupt_configure+0xc0>)
   10cbe:	4298      	cmp	r0, r3
   10cc0:	d005      	beq.n	10cce <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   10cc2:	f10d 0307 	add.w	r3, sp, #7
   10cc6:	9303      	str	r3, [sp, #12]
   10cc8:	e7d0      	b.n	10c6c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   10cca:	4a09      	ldr	r2, [pc, #36]	; (10cf0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   10ccc:	e7ea      	b.n	10ca4 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   10cce:	f10d 0007 	add.w	r0, sp, #7
   10cd2:	f001 fc69 	bl	125a8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   10cd6:	4b04      	ldr	r3, [pc, #16]	; (10ce8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
   10cd8:	4298      	cmp	r0, r3
   10cda:	d0f2      	beq.n	10cc2 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   10cdc:	f06f 000b 	mvn.w	r0, #11
   10ce0:	e7d2      	b.n	10c88 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   10ce2:	f06f 0004 	mvn.w	r0, #4
   10ce6:	e7cf      	b.n	10c88 <gpio_nrfx_pin_interrupt_configure+0x5c>
   10ce8:	0bad0000 	.word	0x0bad0000
   10cec:	0bad0004 	.word	0x0bad0004
   10cf0:	50000300 	.word	0x50000300

00010cf4 <pin_uninit>:
{
   10cf4:	b530      	push	{r4, r5, lr}
   10cf6:	b083      	sub	sp, #12
   10cf8:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   10cfa:	f10d 0107 	add.w	r1, sp, #7
   10cfe:	f001 fbff 	bl	12500 <nrfx_gpiote_channel_get>
   10d02:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   10d04:	4620      	mov	r0, r4
   10d06:	f001 fceb 	bl	126e0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   10d0a:	4b0b      	ldr	r3, [pc, #44]	; (10d38 <pin_uninit+0x44>)
   10d0c:	4298      	cmp	r0, r3
   10d0e:	d10f      	bne.n	10d30 <pin_uninit+0x3c>
	if (free_ch) {
   10d10:	429d      	cmp	r5, r3
   10d12:	d005      	beq.n	10d20 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   10d14:	4b08      	ldr	r3, [pc, #32]	; (10d38 <pin_uninit+0x44>)
   10d16:	4298      	cmp	r0, r3
   10d18:	d107      	bne.n	10d2a <pin_uninit+0x36>
   10d1a:	2000      	movs	r0, #0
}
   10d1c:	b003      	add	sp, #12
   10d1e:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   10d20:	f89d 0007 	ldrb.w	r0, [sp, #7]
   10d24:	f001 fc38 	bl	12598 <nrfx_gpiote_channel_free>
   10d28:	e7f4      	b.n	10d14 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   10d2a:	f06f 0004 	mvn.w	r0, #4
   10d2e:	e7f5      	b.n	10d1c <pin_uninit+0x28>
		return -EIO;
   10d30:	f06f 0004 	mvn.w	r0, #4
   10d34:	e7f2      	b.n	10d1c <pin_uninit+0x28>
   10d36:	bf00      	nop
   10d38:	0bad0000 	.word	0x0bad0000

00010d3c <gpio_nrfx_pin_configure>:
{
   10d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10d40:	b087      	sub	sp, #28
	return port->config;
   10d42:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   10d46:	f898 300c 	ldrb.w	r3, [r8, #12]
   10d4a:	f001 051f 	and.w	r5, r1, #31
   10d4e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   10d52:	2a00      	cmp	r2, #0
   10d54:	d044      	beq.n	10de0 <gpio_nrfx_pin_configure+0xa4>
   10d56:	460c      	mov	r4, r1
   10d58:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   10d5a:	2600      	movs	r6, #0
   10d5c:	9603      	str	r6, [sp, #12]
   10d5e:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   10d60:	f10d 0117 	add.w	r1, sp, #23
   10d64:	4620      	mov	r0, r4
   10d66:	f001 fbcb 	bl	12500 <nrfx_gpiote_channel_get>
   10d6a:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   10d6c:	4633      	mov	r3, r6
   10d6e:	aa03      	add	r2, sp, #12
   10d70:	4631      	mov	r1, r6
   10d72:	4628      	mov	r0, r5
   10d74:	f001 fa42 	bl	121fc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   10d78:	4b30      	ldr	r3, [pc, #192]	; (10e3c <gpio_nrfx_pin_configure+0x100>)
   10d7a:	4298      	cmp	r0, r3
   10d7c:	d15b      	bne.n	10e36 <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   10d7e:	4599      	cmp	r9, r3
   10d80:	d036      	beq.n	10df0 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   10d82:	f417 3f00 	tst.w	r7, #131072	; 0x20000
   10d86:	d043      	beq.n	10e10 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   10d88:	f10d 0103 	add.w	r1, sp, #3
   10d8c:	4638      	mov	r0, r7
   10d8e:	f00c f92c 	bl	1cfea <get_drive>
		if (rv != 0) {
   10d92:	4606      	mov	r6, r0
   10d94:	bb40      	cbnz	r0, 10de8 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   10d96:	f89d 3003 	ldrb.w	r3, [sp, #3]
   10d9a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   10d9e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
   10da2:	bf0c      	ite	eq
   10da4:	2301      	moveq	r3, #1
   10da6:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   10da8:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   10dac:	4638      	mov	r0, r7
   10dae:	f00c f962 	bl	1d076 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   10db2:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   10db6:	f417 2f00 	tst.w	r7, #524288	; 0x80000
   10dba:	d01e      	beq.n	10dfa <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   10dbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   10dc0:	2101      	movs	r1, #1
   10dc2:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   10dc6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   10dca:	2200      	movs	r2, #0
   10dcc:	a901      	add	r1, sp, #4
   10dce:	4628      	mov	r0, r5
   10dd0:	f001 facc 	bl	1236c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   10dd4:	4b19      	ldr	r3, [pc, #100]	; (10e3c <gpio_nrfx_pin_configure+0x100>)
   10dd6:	4298      	cmp	r0, r3
   10dd8:	d006      	beq.n	10de8 <gpio_nrfx_pin_configure+0xac>
   10dda:	f06f 0615 	mvn.w	r6, #21
   10dde:	e003      	b.n	10de8 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   10de0:	4628      	mov	r0, r5
   10de2:	f7ff ff87 	bl	10cf4 <pin_uninit>
   10de6:	4606      	mov	r6, r0
}
   10de8:	4630      	mov	r0, r6
   10dea:	b007      	add	sp, #28
   10dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   10df0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10df4:	f001 fbd0 	bl	12598 <nrfx_gpiote_channel_free>
   10df8:	e7c3      	b.n	10d82 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   10dfa:	f417 2f80 	tst.w	r7, #262144	; 0x40000
   10dfe:	d0e4      	beq.n	10dca <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   10e00:	f8d8 2004 	ldr.w	r2, [r8, #4]
   10e04:	2301      	movs	r3, #1
   10e06:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   10e0a:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   10e0e:	e7dc      	b.n	10dca <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   10e10:	4638      	mov	r0, r7
   10e12:	f00c f930 	bl	1d076 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   10e16:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   10e1a:	2300      	movs	r3, #0
   10e1c:	461a      	mov	r2, r3
   10e1e:	a902      	add	r1, sp, #8
   10e20:	4628      	mov	r0, r5
   10e22:	f001 f9eb 	bl	121fc <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   10e26:	4b05      	ldr	r3, [pc, #20]	; (10e3c <gpio_nrfx_pin_configure+0x100>)
   10e28:	4298      	cmp	r0, r3
   10e2a:	d101      	bne.n	10e30 <gpio_nrfx_pin_configure+0xf4>
   10e2c:	2600      	movs	r6, #0
   10e2e:	e7db      	b.n	10de8 <gpio_nrfx_pin_configure+0xac>
   10e30:	f06f 0615 	mvn.w	r6, #21
   10e34:	e7d8      	b.n	10de8 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   10e36:	f06f 0615 	mvn.w	r6, #21
   10e3a:	e7d5      	b.n	10de8 <gpio_nrfx_pin_configure+0xac>
   10e3c:	0bad0000 	.word	0x0bad0000

00010e40 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   10e40:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   10e42:	f001 fb9f 	bl	12584 <nrfx_gpiote_is_init>
   10e46:	b108      	cbz	r0, 10e4c <gpio_nrfx_init+0xc>
		return 0;
   10e48:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   10e4a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   10e4c:	f001 fb70 	bl	12530 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   10e50:	4b08      	ldr	r3, [pc, #32]	; (10e74 <gpio_nrfx_init+0x34>)
   10e52:	4298      	cmp	r0, r3
   10e54:	d10a      	bne.n	10e6c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   10e56:	2100      	movs	r1, #0
   10e58:	4807      	ldr	r0, [pc, #28]	; (10e78 <gpio_nrfx_init+0x38>)
   10e5a:	f001 fb4b 	bl	124f4 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   10e5e:	2200      	movs	r2, #0
   10e60:	2105      	movs	r1, #5
   10e62:	2006      	movs	r0, #6
   10e64:	f7f3 fd80 	bl	4968 <z_arm_irq_priority_set>
	return 0;
   10e68:	2000      	movs	r0, #0
   10e6a:	e7ee      	b.n	10e4a <gpio_nrfx_init+0xa>
		return -EIO;
   10e6c:	f06f 0004 	mvn.w	r0, #4
   10e70:	e7eb      	b.n	10e4a <gpio_nrfx_init+0xa>
   10e72:	bf00      	nop
   10e74:	0bad0000 	.word	0x0bad0000
   10e78:	0001d17b 	.word	0x0001d17b

00010e7c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   10e7c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   10e7e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   10e80:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   10e84:	d06f      	beq.n	10f66 <baudrate_set+0xea>
   10e86:	d83a      	bhi.n	10efe <baudrate_set+0x82>
   10e88:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   10e8c:	d06e      	beq.n	10f6c <baudrate_set+0xf0>
   10e8e:	d90a      	bls.n	10ea6 <baudrate_set+0x2a>
   10e90:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   10e94:	d075      	beq.n	10f82 <baudrate_set+0x106>
   10e96:	d924      	bls.n	10ee2 <baudrate_set+0x66>
   10e98:	f647 2312 	movw	r3, #31250	; 0x7a12
   10e9c:	4299      	cmp	r1, r3
   10e9e:	d12b      	bne.n	10ef8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   10ea0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   10ea4:	e013      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10ea6:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   10eaa:	d061      	beq.n	10f70 <baudrate_set+0xf4>
   10eac:	d907      	bls.n	10ebe <baudrate_set+0x42>
   10eae:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   10eb2:	d063      	beq.n	10f7c <baudrate_set+0x100>
   10eb4:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   10eb8:	d110      	bne.n	10edc <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   10eba:	4b3c      	ldr	r3, [pc, #240]	; (10fac <baudrate_set+0x130>)
   10ebc:	e007      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10ebe:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   10ec2:	d058      	beq.n	10f76 <baudrate_set+0xfa>
   10ec4:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   10ec8:	d105      	bne.n	10ed6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   10eca:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   10ece:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   10ed2:	2000      	movs	r0, #0
   10ed4:	4770      	bx	lr
	switch (baudrate) {
   10ed6:	f06f 0015 	mvn.w	r0, #21
   10eda:	4770      	bx	lr
   10edc:	f06f 0015 	mvn.w	r0, #21
   10ee0:	4770      	bx	lr
   10ee2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   10ee6:	d04e      	beq.n	10f86 <baudrate_set+0x10a>
   10ee8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   10eec:	d101      	bne.n	10ef2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   10eee:	4b30      	ldr	r3, [pc, #192]	; (10fb0 <baudrate_set+0x134>)
   10ef0:	e7ed      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10ef2:	f06f 0015 	mvn.w	r0, #21
   10ef6:	4770      	bx	lr
   10ef8:	f06f 0015 	mvn.w	r0, #21
   10efc:	4770      	bx	lr
   10efe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   10f02:	d042      	beq.n	10f8a <baudrate_set+0x10e>
   10f04:	d909      	bls.n	10f1a <baudrate_set+0x9e>
   10f06:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   10f0a:	d046      	beq.n	10f9a <baudrate_set+0x11e>
   10f0c:	d91f      	bls.n	10f4e <baudrate_set+0xd2>
   10f0e:	4b29      	ldr	r3, [pc, #164]	; (10fb4 <baudrate_set+0x138>)
   10f10:	4299      	cmp	r1, r3
   10f12:	d148      	bne.n	10fa6 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   10f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   10f18:	e7d9      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10f1a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   10f1e:	d037      	beq.n	10f90 <baudrate_set+0x114>
   10f20:	d905      	bls.n	10f2e <baudrate_set+0xb2>
   10f22:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   10f26:	d10f      	bne.n	10f48 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   10f28:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   10f2c:	e7cf      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10f2e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   10f32:	4299      	cmp	r1, r3
   10f34:	d02e      	beq.n	10f94 <baudrate_set+0x118>
   10f36:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   10f3a:	d102      	bne.n	10f42 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   10f3c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   10f40:	e7c5      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10f42:	f06f 0015 	mvn.w	r0, #21
   10f46:	4770      	bx	lr
   10f48:	f06f 0015 	mvn.w	r0, #21
   10f4c:	4770      	bx	lr
   10f4e:	4b1a      	ldr	r3, [pc, #104]	; (10fb8 <baudrate_set+0x13c>)
   10f50:	4299      	cmp	r1, r3
   10f52:	d025      	beq.n	10fa0 <baudrate_set+0x124>
   10f54:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   10f58:	d102      	bne.n	10f60 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   10f5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   10f5e:	e7b6      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10f60:	f06f 0015 	mvn.w	r0, #21
   10f64:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   10f66:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   10f6a:	e7b0      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   10f6c:	4b13      	ldr	r3, [pc, #76]	; (10fbc <baudrate_set+0x140>)
   10f6e:	e7ae      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   10f70:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   10f74:	e7ab      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10f76:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   10f7a:	e7a8      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   10f7c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   10f80:	e7a5      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   10f82:	4b0f      	ldr	r3, [pc, #60]	; (10fc0 <baudrate_set+0x144>)
   10f84:	e7a3      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   10f86:	4b0f      	ldr	r3, [pc, #60]	; (10fc4 <baudrate_set+0x148>)
   10f88:	e7a1      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   10f8a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   10f8e:	e79e      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   10f90:	4b0d      	ldr	r3, [pc, #52]	; (10fc8 <baudrate_set+0x14c>)
   10f92:	e79c      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   10f94:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   10f98:	e799      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   10f9a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   10f9e:	e796      	b.n	10ece <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   10fa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   10fa4:	e793      	b.n	10ece <baudrate_set+0x52>
	switch (baudrate) {
   10fa6:	f06f 0015 	mvn.w	r0, #21
}
   10faa:	4770      	bx	lr
   10fac:	0013b000 	.word	0x0013b000
   10fb0:	004ea000 	.word	0x004ea000
   10fb4:	000f4240 	.word	0x000f4240
   10fb8:	0003d090 	.word	0x0003d090
   10fbc:	00275000 	.word	0x00275000
   10fc0:	0075c000 	.word	0x0075c000
   10fc4:	003af000 	.word	0x003af000
   10fc8:	013a9000 	.word	0x013a9000

00010fcc <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   10fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fd0:	4605      	mov	r5, r0
   10fd2:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = dev->data;
   10fd4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10fd8:	f00c fd32 	bl	1da40 <k_is_in_isr>
   10fdc:	b920      	cbnz	r0, 10fe8 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   10fde:	4b16      	ldr	r3, [pc, #88]	; (11038 <uarte_nrfx_poll_out+0x6c>)
   10fe0:	781b      	ldrb	r3, [r3, #0]
   10fe2:	b143      	cbz	r3, 10ff6 <uarte_nrfx_poll_out+0x2a>
   10fe4:	2300      	movs	r3, #0
   10fe6:	e000      	b.n	10fea <uarte_nrfx_poll_out+0x1e>
   10fe8:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   10fea:	b953      	cbnz	r3, 11002 <uarte_nrfx_poll_out+0x36>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   10fec:	4628      	mov	r0, r5
   10fee:	f00c f9ea 	bl	1d3c6 <wait_tx_ready>
   10ff2:	4606      	mov	r6, r0
   10ff4:	e013      	b.n	1101e <uarte_nrfx_poll_out+0x52>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   10ff6:	2301      	movs	r3, #1
   10ff8:	e7f7      	b.n	10fea <uarte_nrfx_poll_out+0x1e>
   10ffa:	f384 8811 	msr	BASEPRI, r4
   10ffe:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   11002:	f04f 0320 	mov.w	r3, #32
   11006:	f3ef 8411 	mrs	r4, BASEPRI
   1100a:	f383 8812 	msr	BASEPRI_MAX, r3
   1100e:	f3bf 8f6f 	isb	sy
			key = irq_lock();
   11012:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   11014:	4628      	mov	r0, r5
   11016:	f00c f988 	bl	1d32a <is_tx_ready>
   1101a:	2800      	cmp	r0, #0
   1101c:	d0ed      	beq.n	10ffa <uarte_nrfx_poll_out+0x2e>
	}

	data->char_out = c;
   1101e:	4641      	mov	r1, r8
   11020:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   11024:	2201      	movs	r2, #1
   11026:	4628      	mov	r0, r5
   11028:	f00c f999 	bl	1d35e <tx_start>
	__asm__ volatile(
   1102c:	f386 8811 	msr	BASEPRI, r6
   11030:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   11034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11038:	200092a1 	.word	0x200092a1

0001103c <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1103c:	b538      	push	{r3, r4, r5, lr}
   1103e:	4604      	mov	r4, r0
   11040:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   11042:	f101 0012 	add.w	r0, r1, #18
   11046:	f001 fb9f 	bl	12788 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1104a:	4b0c      	ldr	r3, [pc, #48]	; (1107c <endtx_stoptx_ppi_init+0x40>)
   1104c:	4298      	cmp	r0, r3
   1104e:	d111      	bne.n	11074 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   11050:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   11052:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   11056:	340c      	adds	r4, #12
    p_reg->CH[(uint32_t) channel].EEP = eep;
   11058:	4a09      	ldr	r2, [pc, #36]	; (11080 <endtx_stoptx_ppi_init+0x44>)
   1105a:	33a2      	adds	r3, #162	; 0xa2
   1105c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   11060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   11064:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   11066:	7ca9      	ldrb	r1, [r5, #18]
   11068:	2301      	movs	r3, #1
   1106a:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1106c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   11070:	2000      	movs	r0, #0
}
   11072:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
   11074:	f06f 0004 	mvn.w	r0, #4
   11078:	e7fb      	b.n	11072 <endtx_stoptx_ppi_init+0x36>
   1107a:	bf00      	nop
   1107c:	0bad0000 	.word	0x0bad0000
   11080:	4001f000 	.word	0x4001f000

00011084 <random_byte_get>:
	__asm__ volatile(
   11084:	f04f 0320 	mov.w	r3, #32
   11088:	f3ef 8211 	mrs	r2, BASEPRI
   1108c:	f383 8812 	msr	BASEPRI_MAX, r3
   11090:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   11094:	4b0a      	ldr	r3, [pc, #40]	; (110c0 <random_byte_get+0x3c>)
   11096:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1109a:	b16b      	cbz	r3, 110b8 <random_byte_get+0x34>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1109c:	4b08      	ldr	r3, [pc, #32]	; (110c0 <random_byte_get+0x3c>)
   1109e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   110a2:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   110a4:	2100      	movs	r1, #0
   110a6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   110aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	__asm__ volatile(
   110ae:	f382 8811 	msr	BASEPRI, r2
   110b2:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   110b6:	4770      	bx	lr
	int retval = -EAGAIN;
   110b8:	f06f 000a 	mvn.w	r0, #10
   110bc:	e7f7      	b.n	110ae <random_byte_get+0x2a>
   110be:	bf00      	nop
   110c0:	4000d000 	.word	0x4000d000

000110c4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   110c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110c6:	4686      	mov	lr, r0
	uint32_t last  = rngp->last;
   110c8:	7885      	ldrb	r5, [r0, #2]
	uint32_t mask  = rngp->mask;
   110ca:	78c4      	ldrb	r4, [r0, #3]
	__asm__ volatile(
   110cc:	f04f 0320 	mov.w	r3, #32
   110d0:	f3ef 8c11 	mrs	ip, BASEPRI
   110d4:	f383 8812 	msr	BASEPRI_MAX, r3
   110d8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   110dc:	7806      	ldrb	r6, [r0, #0]
   110de:	4633      	mov	r3, r6
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   110e0:	7847      	ldrb	r7, [r0, #1]

	available = (last - first) & mask;
   110e2:	1bad      	subs	r5, r5, r6
   110e4:	4025      	ands	r5, r4
	if (available < len) {
   110e6:	42aa      	cmp	r2, r5
   110e8:	d900      	bls.n	110ec <rng_pool_get+0x28>
		len = available;
   110ea:	b2aa      	uxth	r2, r5

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   110ec:	18b0      	adds	r0, r6, r2
   110ee:	4020      	ands	r0, r4
   110f0:	f88e 0000 	strb.w	r0, [lr]
	__asm__ volatile(
   110f4:	f38c 8811 	msr	BASEPRI, ip
   110f8:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   110fc:	4608      	mov	r0, r1
}
   110fe:	e007      	b.n	11110 <rng_pool_get+0x4c>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   11100:	eb0e 0203 	add.w	r2, lr, r3
   11104:	7952      	ldrb	r2, [r2, #5]
   11106:	f800 2b01 	strb.w	r2, [r0], #1
		first = (first + 1) & mask;
   1110a:	3301      	adds	r3, #1
   1110c:	4023      	ands	r3, r4
	while (likely(len--)) {
   1110e:	4662      	mov	r2, ip
   11110:	f102 3cff 	add.w	ip, r2, #4294967295
   11114:	fa1f fc8c 	uxth.w	ip, ip
   11118:	2a00      	cmp	r2, #0
   1111a:	d1f1      	bne.n	11100 <rng_pool_get+0x3c>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1111c:	42be      	cmp	r6, r7
   1111e:	d10f      	bne.n	11140 <rng_pool_get+0x7c>
	__asm__ volatile(
   11120:	f04f 0220 	mov.w	r2, #32
   11124:	f3ef 8311 	mrs	r3, BASEPRI
   11128:	f382 8812 	msr	BASEPRI_MAX, r2
   1112c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   11130:	f89e 2000 	ldrb.w	r2, [lr]
   11134:	f88e 2001 	strb.w	r2, [lr, #1]
	__asm__ volatile(
   11138:	f383 8811 	msr	BASEPRI, r3
   1113c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   11140:	1a40      	subs	r0, r0, r1
   11142:	b280      	uxth	r0, r0
	available = available - len;
   11144:	1a2d      	subs	r5, r5, r0
	if (available <= rngp->threshold) {
   11146:	f89e 3004 	ldrb.w	r3, [lr, #4]
   1114a:	42ab      	cmp	r3, r5
   1114c:	d302      	bcc.n	11154 <rng_pool_get+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1114e:	4b02      	ldr	r3, [pc, #8]	; (11158 <rng_pool_get+0x94>)
   11150:	2201      	movs	r2, #1
   11152:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   11154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11156:	bf00      	nop
   11158:	4000d000 	.word	0x4000d000

0001115c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1115e:	460d      	mov	r5, r1
   11160:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   11162:	f013 0f01 	tst.w	r3, #1
   11166:	d103      	bne.n	11170 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   11168:	4823      	ldr	r0, [pc, #140]	; (111f8 <entropy_nrf5_get_entropy_isr+0x9c>)
   1116a:	f7ff ffab 	bl	110c4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   11170:	b90a      	cbnz	r2, 11176 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   11172:	4620      	mov	r0, r4
   11174:	e7fb      	b.n	1116e <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   11176:	f04f 0320 	mov.w	r3, #32
   1117a:	f3ef 8611 	mrs	r6, BASEPRI
   1117e:	f383 8812 	msr	BASEPRI_MAX, r3
   11182:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   11186:	200d      	movs	r0, #13
   11188:	f7f3 fbe0 	bl	494c <arch_irq_is_enabled>
   1118c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1118e:	200d      	movs	r0, #13
   11190:	f7f3 fbc8 	bl	4924 <arch_irq_disable>
	__asm__ volatile(
   11194:	f386 8811 	msr	BASEPRI, r6
   11198:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1119c:	4b17      	ldr	r3, [pc, #92]	; (111fc <entropy_nrf5_get_entropy_isr+0xa0>)
   1119e:	2200      	movs	r2, #0
   111a0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   111a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   111a8:	2201      	movs	r2, #1
   111aa:	601a      	str	r2, [r3, #0]
   111ac:	4b14      	ldr	r3, [pc, #80]	; (11200 <entropy_nrf5_get_entropy_isr+0xa4>)
   111ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   111b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   111b6:	4626      	mov	r6, r4
   111b8:	e004      	b.n	111c4 <entropy_nrf5_get_entropy_isr+0x68>
   111ba:	f3bf 8f4f 	dsb	sy
				__WFE();
   111be:	bf20      	wfe
				__SEV();
   111c0:	bf40      	sev
				__WFE();
   111c2:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   111c4:	4b0d      	ldr	r3, [pc, #52]	; (111fc <entropy_nrf5_get_entropy_isr+0xa0>)
   111c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   111ca:	2b00      	cmp	r3, #0
   111cc:	d0f5      	beq.n	111ba <entropy_nrf5_get_entropy_isr+0x5e>
			byte = random_byte_get();
   111ce:	f7ff ff59 	bl	11084 <random_byte_get>
   111d2:	4b0b      	ldr	r3, [pc, #44]	; (11200 <entropy_nrf5_get_entropy_isr+0xa4>)
   111d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   111d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   111dc:	2800      	cmp	r0, #0
   111de:	db02      	blt.n	111e6 <entropy_nrf5_get_entropy_isr+0x8a>
			buf[--len] = byte;
   111e0:	3e01      	subs	r6, #1
   111e2:	b2b6      	uxth	r6, r6
   111e4:	55a8      	strb	r0, [r5, r6]
		} while (len);
   111e6:	2e00      	cmp	r6, #0
   111e8:	d1ec      	bne.n	111c4 <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   111ea:	2f00      	cmp	r7, #0
   111ec:	d0c1      	beq.n	11172 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   111ee:	200d      	movs	r0, #13
   111f0:	f7f3 fb8a 	bl	4908 <arch_irq_enable>
   111f4:	e7bd      	b.n	11172 <entropy_nrf5_get_entropy_isr+0x16>
   111f6:	bf00      	nop
   111f8:	20008d20 	.word	0x20008d20
   111fc:	4000d000 	.word	0x4000d000
   11200:	e000e100 	.word	0xe000e100

00011204 <isr>:
{
   11204:	b510      	push	{r4, lr}
	byte = random_byte_get();
   11206:	f7ff ff3d 	bl	11084 <random_byte_get>
	if (byte < 0) {
   1120a:	2800      	cmp	r0, #0
   1120c:	db06      	blt.n	1121c <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1120e:	b2c4      	uxtb	r4, r0
   11210:	4621      	mov	r1, r4
   11212:	480a      	ldr	r0, [pc, #40]	; (1123c <isr+0x38>)
   11214:	f00c f97d 	bl	1d512 <rng_pool_put>
	if (ret < 0) {
   11218:	2800      	cmp	r0, #0
   1121a:	db00      	blt.n	1121e <isr+0x1a>
}
   1121c:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1121e:	4621      	mov	r1, r4
   11220:	4807      	ldr	r0, [pc, #28]	; (11240 <isr+0x3c>)
   11222:	f00c f976 	bl	1d512 <rng_pool_put>
		if (ret < 0) {
   11226:	2800      	cmp	r0, #0
   11228:	db03      	blt.n	11232 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1122a:	4806      	ldr	r0, [pc, #24]	; (11244 <isr+0x40>)
   1122c:	f001 fe6e 	bl	12f0c <z_impl_k_sem_give>
}
   11230:	e7f4      	b.n	1121c <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   11232:	4b05      	ldr	r3, [pc, #20]	; (11248 <isr+0x44>)
   11234:	2201      	movs	r2, #1
   11236:	605a      	str	r2, [r3, #4]
}
   11238:	e7f7      	b.n	1122a <isr+0x26>
   1123a:	bf00      	nop
   1123c:	20008d20 	.word	0x20008d20
   11240:	20008d35 	.word	0x20008d35
   11244:	20008d08 	.word	0x20008d08
   11248:	4000d000 	.word	0x4000d000

0001124c <entropy_nrf5_get_entropy>:
{
   1124c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1124e:	460f      	mov	r7, r1
   11250:	4614      	mov	r4, r2
	while (len) {
   11252:	e007      	b.n	11264 <entropy_nrf5_get_entropy+0x18>
	return z_impl_k_sem_take(sem, timeout);
   11254:	f04f 32ff 	mov.w	r2, #4294967295
   11258:	f04f 33ff 	mov.w	r3, #4294967295
   1125c:	f106 0018 	add.w	r0, r6, #24
   11260:	f001 fe7c 	bl	12f5c <z_impl_k_sem_take>
   11264:	b1bc      	cbz	r4, 11296 <entropy_nrf5_get_entropy+0x4a>
   11266:	4e0d      	ldr	r6, [pc, #52]	; (1129c <entropy_nrf5_get_entropy+0x50>)
   11268:	f04f 32ff 	mov.w	r2, #4294967295
   1126c:	f04f 33ff 	mov.w	r3, #4294967295
   11270:	4630      	mov	r0, r6
   11272:	f001 fe73 	bl	12f5c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   11276:	4622      	mov	r2, r4
   11278:	4639      	mov	r1, r7
   1127a:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1127e:	f7ff ff21 	bl	110c4 <rng_pool_get>
   11282:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   11284:	4630      	mov	r0, r6
   11286:	f001 fe41 	bl	12f0c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1128a:	2d00      	cmp	r5, #0
   1128c:	d0e2      	beq.n	11254 <entropy_nrf5_get_entropy+0x8>
		len -= bytes;
   1128e:	1b64      	subs	r4, r4, r5
   11290:	b2a4      	uxth	r4, r4
		buf += bytes;
   11292:	442f      	add	r7, r5
   11294:	e7e6      	b.n	11264 <entropy_nrf5_get_entropy+0x18>
}
   11296:	2000      	movs	r0, #0
   11298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1129a:	bf00      	nop
   1129c:	20008cf0 	.word	0x20008cf0

000112a0 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   112a0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   112a2:	4c18      	ldr	r4, [pc, #96]	; (11304 <entropy_nrf5_init+0x64>)
   112a4:	2201      	movs	r2, #1
   112a6:	4611      	mov	r1, r2
   112a8:	4620      	mov	r0, r4
   112aa:	f00c fcfe 	bl	1dcaa <z_impl_k_sem_init>
   112ae:	2201      	movs	r2, #1
   112b0:	2100      	movs	r1, #0
   112b2:	f104 0018 	add.w	r0, r4, #24
   112b6:	f00c fcf8 	bl	1dcaa <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   112ba:	2204      	movs	r2, #4
   112bc:	2108      	movs	r1, #8
   112be:	f104 0045 	add.w	r0, r4, #69	; 0x45
   112c2:	f00c f93a 	bl	1d53a <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   112c6:	220c      	movs	r2, #12
   112c8:	2110      	movs	r1, #16
   112ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   112ce:	f00c f934 	bl	1d53a <rng_pool_init>
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   112d2:	4b0d      	ldr	r3, [pc, #52]	; (11308 <entropy_nrf5_init+0x68>)
   112d4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   112d8:	f042 0201 	orr.w	r2, r2, #1
   112dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   112e0:	2400      	movs	r4, #0
   112e2:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
   112e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   112ea:	2101      	movs	r1, #1
   112ec:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   112f0:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   112f2:	4622      	mov	r2, r4
   112f4:	200d      	movs	r0, #13
   112f6:	f7f3 fb37 	bl	4968 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   112fa:	200d      	movs	r0, #13
   112fc:	f7f3 fb04 	bl	4908 <arch_irq_enable>

	return 0;
}
   11300:	4620      	mov	r0, r4
   11302:	bd10      	pop	{r4, pc}
   11304:	20008cf0 	.word	0x20008cf0
   11308:	4000d000 	.word	0x4000d000

0001130c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1130c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   11310:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11314:	4b01      	ldr	r3, [pc, #4]	; (1131c <set_comparator+0x10>)
   11316:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1131a:	4770      	bx	lr
   1131c:	40011000 	.word	0x40011000

00011320 <get_comparator>:
    return p_reg->CC[ch];
   11320:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11324:	4b01      	ldr	r3, [pc, #4]	; (1132c <get_comparator+0xc>)
   11326:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1132a:	4770      	bx	lr
   1132c:	40011000 	.word	0x40011000

00011330 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11334:	4083      	lsls	r3, r0
    p_reg->EVTENSET = mask;
   11336:	4a02      	ldr	r2, [pc, #8]	; (11340 <event_enable+0x10>)
   11338:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1133c:	4770      	bx	lr
   1133e:	bf00      	nop
   11340:	40011000 	.word	0x40011000

00011344 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11348:	4083      	lsls	r3, r0
    p_reg->EVTENCLR = mask;
   1134a:	4a02      	ldr	r2, [pc, #8]	; (11354 <event_disable+0x10>)
   1134c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   11350:	4770      	bx	lr
   11352:	bf00      	nop
   11354:	40011000 	.word	0x40011000

00011358 <counter>:
     return p_reg->COUNTER;
   11358:	4b01      	ldr	r3, [pc, #4]	; (11360 <counter+0x8>)
   1135a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1135e:	4770      	bx	lr
   11360:	40011000 	.word	0x40011000

00011364 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   11364:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   11366:	2301      	movs	r3, #1
   11368:	4083      	lsls	r3, r0
   1136a:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1136e:	4a10      	ldr	r2, [pc, #64]	; (113b0 <compare_int_lock+0x4c>)
   11370:	f3bf 8f5b 	dmb	ish
   11374:	e852 1f00 	ldrex	r1, [r2]
   11378:	ea01 0e0c 	and.w	lr, r1, ip
   1137c:	e842 e400 	strex	r4, lr, [r2]
   11380:	2c00      	cmp	r4, #0
   11382:	d1f7      	bne.n	11374 <compare_int_lock+0x10>
   11384:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11388:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1138c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   11390:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   11394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   11398:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1139c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   113a0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   113a4:	420b      	tst	r3, r1
}
   113a6:	bf14      	ite	ne
   113a8:	2001      	movne	r0, #1
   113aa:	2000      	moveq	r0, #0
   113ac:	bd10      	pop	{r4, pc}
   113ae:	bf00      	nop
   113b0:	20008d48 	.word	0x20008d48

000113b4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   113b4:	b570      	push	{r4, r5, r6, lr}
   113b6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   113b8:	f00c f8db 	bl	1d572 <full_int_lock>
   113bc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   113be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   113c2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   113c4:	4a17      	ldr	r2, [pc, #92]	; (11424 <channel_processing_check_and_clear+0x70>)
   113c6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   113ca:	4213      	tst	r3, r2
   113cc:	d105      	bne.n	113da <channel_processing_check_and_clear+0x26>
	bool result = false;
   113ce:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   113d0:	4628      	mov	r0, r5
   113d2:	f00c f8d7 	bl	1d584 <full_int_unlock>

	return result;
}
   113d6:	4630      	mov	r0, r6
   113d8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   113da:	2301      	movs	r3, #1
   113dc:	40a3      	lsls	r3, r4
   113de:	43db      	mvns	r3, r3
   113e0:	4a11      	ldr	r2, [pc, #68]	; (11428 <channel_processing_check_and_clear+0x74>)
   113e2:	f3bf 8f5b 	dmb	ish
   113e6:	e852 1f00 	ldrex	r1, [r2]
   113ea:	ea01 0003 	and.w	r0, r1, r3
   113ee:	e842 0600 	strex	r6, r0, [r2]
   113f2:	2e00      	cmp	r6, #0
   113f4:	d1f7      	bne.n	113e6 <channel_processing_check_and_clear+0x32>
   113f6:	f3bf 8f5b 	dmb	ish
   113fa:	b959      	cbnz	r1, 11414 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   113fc:	f104 0350 	add.w	r3, r4, #80	; 0x50
   11400:	009b      	lsls	r3, r3, #2
   11402:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11404:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   11408:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1140c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1140e:	b113      	cbz	r3, 11416 <channel_processing_check_and_clear+0x62>
   11410:	2301      	movs	r3, #1
   11412:	e000      	b.n	11416 <channel_processing_check_and_clear+0x62>
   11414:	2301      	movs	r3, #1
		if (result) {
   11416:	461e      	mov	r6, r3
   11418:	2b00      	cmp	r3, #0
   1141a:	d0d9      	beq.n	113d0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1141c:	4620      	mov	r0, r4
   1141e:	f00c f899 	bl	1d554 <event_clear>
   11422:	e7d5      	b.n	113d0 <channel_processing_check_and_clear+0x1c>
   11424:	40011000 	.word	0x40011000
   11428:	20008d44 	.word	0x20008d44

0001142c <compare_int_unlock>:
	if (key) {
   1142c:	b901      	cbnz	r1, 11430 <compare_int_unlock+0x4>
}
   1142e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   11430:	2301      	movs	r3, #1
   11432:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   11434:	4a11      	ldr	r2, [pc, #68]	; (1147c <compare_int_unlock+0x50>)
   11436:	f3bf 8f5b 	dmb	ish
   1143a:	e852 1f00 	ldrex	r1, [r2]
   1143e:	4319      	orrs	r1, r3
   11440:	e842 1c00 	strex	ip, r1, [r2]
   11444:	f1bc 0f00 	cmp.w	ip, #0
   11448:	d1f7      	bne.n	1143a <compare_int_unlock+0xe>
   1144a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1144e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11452:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   11454:	4a0a      	ldr	r2, [pc, #40]	; (11480 <compare_int_unlock+0x54>)
   11456:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1145a:	f3bf 8f5b 	dmb	ish
   1145e:	4b09      	ldr	r3, [pc, #36]	; (11484 <compare_int_unlock+0x58>)
   11460:	681b      	ldr	r3, [r3, #0]
   11462:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   11466:	fa23 f000 	lsr.w	r0, r3, r0
   1146a:	f010 0f01 	tst.w	r0, #1
   1146e:	d0de      	beq.n	1142e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11470:	4b05      	ldr	r3, [pc, #20]	; (11488 <compare_int_unlock+0x5c>)
   11472:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11476:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1147a:	e7d8      	b.n	1142e <compare_int_unlock+0x2>
   1147c:	20008d48 	.word	0x20008d48
   11480:	40011000 	.word	0x40011000
   11484:	20008d44 	.word	0x20008d44
   11488:	e000e100 	.word	0xe000e100

0001148c <sys_clock_timeout_handler>:
{
   1148c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11490:	4607      	mov	r7, r0
   11492:	4614      	mov	r4, r2
   11494:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   11496:	4610      	mov	r0, r2
   11498:	4619      	mov	r1, r3
   1149a:	f00c f867 	bl	1d56c <absolute_time_to_cc>
   1149e:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   114a0:	4b15      	ldr	r3, [pc, #84]	; (114f8 <sys_clock_timeout_handler+0x6c>)
   114a2:	681a      	ldr	r2, [r3, #0]
   114a4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   114a6:	601c      	str	r4, [r3, #0]
   114a8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   114aa:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   114ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   114b2:	d309      	bcc.n	114c8 <sys_clock_timeout_handler+0x3c>
	return false;
   114b4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   114b6:	f002 fc0d 	bl	13cd4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   114ba:	4638      	mov	r0, r7
   114bc:	f7ff ff30 	bl	11320 <get_comparator>
   114c0:	42a8      	cmp	r0, r5
   114c2:	d00e      	beq.n	114e2 <sys_clock_timeout_handler+0x56>
}
   114c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   114c8:	4b0c      	ldr	r3, [pc, #48]	; (114fc <sys_clock_timeout_handler+0x70>)
   114ca:	681b      	ldr	r3, [r3, #0]
   114cc:	0a1a      	lsrs	r2, r3, #8
   114ce:	061b      	lsls	r3, r3, #24
   114d0:	eb15 0803 	adds.w	r8, r5, r3
   114d4:	f142 0900 	adc.w	r9, r2, #0
   114d8:	4b09      	ldr	r3, [pc, #36]	; (11500 <sys_clock_timeout_handler+0x74>)
   114da:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
   114de:	2401      	movs	r4, #1
   114e0:	e7e9      	b.n	114b6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
   114e2:	b11c      	cbz	r4, 114ec <sys_clock_timeout_handler+0x60>
		event_enable(chan);
   114e4:	4638      	mov	r0, r7
   114e6:	f7ff ff23 	bl	11330 <event_enable>
}
   114ea:	e7eb      	b.n	114c4 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
   114ec:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   114f0:	4638      	mov	r0, r7
   114f2:	f7ff ff0b 	bl	1130c <set_comparator>
   114f6:	e7f5      	b.n	114e4 <sys_clock_timeout_handler+0x58>
   114f8:	20001290 	.word	0x20001290
   114fc:	20008d4c 	.word	0x20008d4c
   11500:	20001278 	.word	0x20001278

00011504 <z_nrf_rtc_timer_read>:
{
   11504:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   11506:	4b0d      	ldr	r3, [pc, #52]	; (1153c <z_nrf_rtc_timer_read+0x38>)
   11508:	681c      	ldr	r4, [r3, #0]
   1150a:	0a25      	lsrs	r5, r4, #8
   1150c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1150e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   11512:	f7ff ff21 	bl	11358 <counter>
   11516:	4603      	mov	r3, r0
	val += cntr;
   11518:	1900      	adds	r0, r0, r4
   1151a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1151e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   11522:	d20a      	bcs.n	1153a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   11524:	4b06      	ldr	r3, [pc, #24]	; (11540 <z_nrf_rtc_timer_read+0x3c>)
   11526:	e9d3 2300 	ldrd	r2, r3, [r3]
   1152a:	4290      	cmp	r0, r2
   1152c:	eb71 0303 	sbcs.w	r3, r1, r3
   11530:	d203      	bcs.n	1153a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   11532:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   11536:	f141 0100 	adc.w	r1, r1, #0
}
   1153a:	bd38      	pop	{r3, r4, r5, pc}
   1153c:	20008d4c 	.word	0x20008d4c
   11540:	20001278 	.word	0x20001278

00011544 <compare_set_nolocks>:
{
   11544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11546:	4606      	mov	r6, r0
   11548:	4614      	mov	r4, r2
   1154a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1154c:	4610      	mov	r0, r2
   1154e:	4619      	mov	r1, r3
   11550:	f00c f80c 	bl	1d56c <absolute_time_to_cc>
   11554:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   11556:	f7ff ffd5 	bl	11504 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1155a:	42a0      	cmp	r0, r4
   1155c:	eb71 0305 	sbcs.w	r3, r1, r5
   11560:	d21d      	bcs.n	1159e <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
   11562:	1a23      	subs	r3, r4, r0
   11564:	eb65 0101 	sbc.w	r1, r5, r1
   11568:	4a1b      	ldr	r2, [pc, #108]	; (115d8 <compare_set_nolocks+0x94>)
   1156a:	4293      	cmp	r3, r2
   1156c:	f171 0300 	sbcs.w	r3, r1, #0
   11570:	d22f      	bcs.n	115d2 <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
   11572:	4b1a      	ldr	r3, [pc, #104]	; (115dc <compare_set_nolocks+0x98>)
   11574:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   11578:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1157c:	42ab      	cmp	r3, r5
   1157e:	bf08      	it	eq
   11580:	42a2      	cmpeq	r2, r4
   11582:	d01a      	beq.n	115ba <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   11584:	4639      	mov	r1, r7
   11586:	4630      	mov	r0, r6
   11588:	f00c f801 	bl	1d58e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1158c:	4639      	mov	r1, r7
   1158e:	f00b ffdd 	bl	1d54c <counter_sub>
   11592:	1900      	adds	r0, r0, r4
   11594:	f145 0300 	adc.w	r3, r5, #0
   11598:	4604      	mov	r4, r0
   1159a:	461d      	mov	r5, r3
   1159c:	e00d      	b.n	115ba <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   1159e:	2301      	movs	r3, #1
   115a0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   115a2:	4a0f      	ldr	r2, [pc, #60]	; (115e0 <compare_set_nolocks+0x9c>)
   115a4:	f3bf 8f5b 	dmb	ish
   115a8:	e852 1f00 	ldrex	r1, [r2]
   115ac:	4319      	orrs	r1, r3
   115ae:	e842 1000 	strex	r0, r1, [r2]
   115b2:	2800      	cmp	r0, #0
   115b4:	d1f8      	bne.n	115a8 <compare_set_nolocks+0x64>
   115b6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   115ba:	4b08      	ldr	r3, [pc, #32]	; (115dc <compare_set_nolocks+0x98>)
   115bc:	0132      	lsls	r2, r6, #4
   115be:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   115c2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   115c6:	9906      	ldr	r1, [sp, #24]
   115c8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   115ca:	9b07      	ldr	r3, [sp, #28]
   115cc:	6073      	str	r3, [r6, #4]
	return ret;
   115ce:	2000      	movs	r0, #0
}
   115d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   115d2:	f06f 0015 	mvn.w	r0, #21
   115d6:	e7fb      	b.n	115d0 <compare_set_nolocks+0x8c>
   115d8:	01000001 	.word	0x01000001
   115dc:	20001280 	.word	0x20001280
   115e0:	20008d44 	.word	0x20008d44

000115e4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   115e4:	b530      	push	{r4, r5, lr}
   115e6:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   115e8:	2300      	movs	r3, #0
   115ea:	4a1d      	ldr	r2, [pc, #116]	; (11660 <sys_clock_driver_init+0x7c>)
   115ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   115f0:	2b00      	cmp	r3, #0
   115f2:	dd24      	ble.n	1163e <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
   115f4:	4c1a      	ldr	r4, [pc, #104]	; (11660 <sys_clock_driver_init+0x7c>)
   115f6:	2502      	movs	r5, #2
   115f8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   115fc:	4b19      	ldr	r3, [pc, #100]	; (11664 <sys_clock_driver_init+0x80>)
   115fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   11602:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11606:	2200      	movs	r2, #0
   11608:	2101      	movs	r1, #1
   1160a:	2011      	movs	r0, #17
   1160c:	f7f3 f9ac 	bl	4968 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11610:	2011      	movs	r0, #17
   11612:	f7f3 f979 	bl	4908 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11616:	2301      	movs	r3, #1
   11618:	60a3      	str	r3, [r4, #8]
   1161a:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1161c:	4a12      	ldr	r2, [pc, #72]	; (11668 <sys_clock_driver_init+0x84>)
   1161e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   11620:	2400      	movs	r4, #0
   11622:	9401      	str	r4, [sp, #4]
   11624:	4b11      	ldr	r3, [pc, #68]	; (1166c <sys_clock_driver_init+0x88>)
   11626:	9300      	str	r3, [sp, #0]
   11628:	4a11      	ldr	r2, [pc, #68]	; (11670 <sys_clock_driver_init+0x8c>)
   1162a:	2300      	movs	r3, #0
   1162c:	4620      	mov	r0, r4
   1162e:	f00b ffe9 	bl	1d604 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   11632:	4628      	mov	r0, r5
   11634:	f7ff fa8e 	bl	10b54 <z_nrf_clock_control_lf_on>

	return 0;
}
   11638:	4620      	mov	r0, r4
   1163a:	b003      	add	sp, #12
   1163c:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1163e:	4a0d      	ldr	r2, [pc, #52]	; (11674 <sys_clock_driver_init+0x90>)
   11640:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   11644:	f04f 30ff 	mov.w	r0, #4294967295
   11648:	f04f 31ff 	mov.w	r1, #4294967295
   1164c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11650:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   11654:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   11656:	4902      	ldr	r1, [pc, #8]	; (11660 <sys_clock_driver_init+0x7c>)
   11658:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1165c:	3301      	adds	r3, #1
   1165e:	e7c7      	b.n	115f0 <sys_clock_driver_init+0xc>
   11660:	40011000 	.word	0x40011000
   11664:	e000e100 	.word	0xe000e100
   11668:	20008d48 	.word	0x20008d48
   1166c:	0001148d 	.word	0x0001148d
   11670:	007fffff 	.word	0x007fffff
   11674:	20001280 	.word	0x20001280

00011678 <process_channel>:
{
   11678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1167c:	b082      	sub	sp, #8
   1167e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   11680:	f7ff fe98 	bl	113b4 <channel_processing_check_and_clear>
   11684:	b910      	cbnz	r0, 1168c <process_channel+0x14>
}
   11686:	b002      	add	sp, #8
   11688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1168c:	f7ff ff3a 	bl	11504 <z_nrf_rtc_timer_read>
   11690:	4682      	mov	sl, r0
   11692:	460e      	mov	r6, r1
		mcu_critical_state = full_int_lock();
   11694:	f00b ff6d 	bl	1d572 <full_int_lock>
   11698:	4605      	mov	r5, r0
		expire_time = cc_data[chan].target_time;
   1169a:	4b13      	ldr	r3, [pc, #76]	; (116e8 <process_channel+0x70>)
   1169c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   116a0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   116a4:	45c2      	cmp	sl, r8
   116a6:	eb76 0309 	sbcs.w	r3, r6, r9
   116aa:	d20b      	bcs.n	116c4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   116ac:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   116ae:	4628      	mov	r0, r5
   116b0:	f00b ff68 	bl	1d584 <full_int_unlock>
		if (handler) {
   116b4:	2e00      	cmp	r6, #0
   116b6:	d0e6      	beq.n	11686 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   116b8:	9700      	str	r7, [sp, #0]
   116ba:	4642      	mov	r2, r8
   116bc:	464b      	mov	r3, r9
   116be:	4620      	mov	r0, r4
   116c0:	47b0      	blx	r6
}
   116c2:	e7e0      	b.n	11686 <process_channel+0xe>
			handler = cc_data[chan].callback;
   116c4:	4a08      	ldr	r2, [pc, #32]	; (116e8 <process_channel+0x70>)
   116c6:	0123      	lsls	r3, r4, #4
   116c8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   116cc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   116ce:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   116d0:	2000      	movs	r0, #0
   116d2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   116d4:	f04f 32ff 	mov.w	r2, #4294967295
   116d8:	f04f 33ff 	mov.w	r3, #4294967295
   116dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   116e0:	4620      	mov	r0, r4
   116e2:	f7ff fe2f 	bl	11344 <event_disable>
   116e6:	e7e2      	b.n	116ae <process_channel+0x36>
   116e8:	20001280 	.word	0x20001280

000116ec <rtc_nrf_isr>:
{
   116ec:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   116ee:	4b0e      	ldr	r3, [pc, #56]	; (11728 <rtc_nrf_isr+0x3c>)
   116f0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   116f4:	f013 0f02 	tst.w	r3, #2
   116f8:	d00d      	beq.n	11716 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   116fa:	4b0b      	ldr	r3, [pc, #44]	; (11728 <rtc_nrf_isr+0x3c>)
   116fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   11700:	b14b      	cbz	r3, 11716 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11702:	4b09      	ldr	r3, [pc, #36]	; (11728 <rtc_nrf_isr+0x3c>)
   11704:	2200      	movs	r2, #0
   11706:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1170a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   1170e:	4a07      	ldr	r2, [pc, #28]	; (1172c <rtc_nrf_isr+0x40>)
   11710:	6813      	ldr	r3, [r2, #0]
   11712:	3301      	adds	r3, #1
   11714:	6013      	str	r3, [r2, #0]
{
   11716:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11718:	2c00      	cmp	r4, #0
   1171a:	dd00      	ble.n	1171e <rtc_nrf_isr+0x32>
}
   1171c:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1171e:	4620      	mov	r0, r4
   11720:	f7ff ffaa 	bl	11678 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11724:	3401      	adds	r4, #1
   11726:	e7f7      	b.n	11718 <rtc_nrf_isr+0x2c>
   11728:	40011000 	.word	0x40011000
   1172c:	20008d4c 	.word	0x20008d4c

00011730 <sys_clock_set_timeout>:
{
   11730:	b510      	push	{r4, lr}
   11732:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11734:	f1b0 3fff 	cmp.w	r0, #4294967295
   11738:	d006      	beq.n	11748 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1173a:	2801      	cmp	r0, #1
   1173c:	dd06      	ble.n	1174c <sys_clock_set_timeout+0x1c>
   1173e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11742:	da05      	bge.n	11750 <sys_clock_set_timeout+0x20>
   11744:	1e44      	subs	r4, r0, #1
   11746:	e004      	b.n	11752 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11748:	480f      	ldr	r0, [pc, #60]	; (11788 <sys_clock_set_timeout+0x58>)
   1174a:	e7f8      	b.n	1173e <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1174c:	2400      	movs	r4, #0
   1174e:	e000      	b.n	11752 <sys_clock_set_timeout+0x22>
   11750:	4c0d      	ldr	r4, [pc, #52]	; (11788 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   11752:	f7ff fed7 	bl	11504 <z_nrf_rtc_timer_read>
   11756:	4b0d      	ldr	r3, [pc, #52]	; (1178c <sys_clock_set_timeout+0x5c>)
   11758:	6819      	ldr	r1, [r3, #0]
   1175a:	685b      	ldr	r3, [r3, #4]
   1175c:	1a40      	subs	r0, r0, r1
	if (unannounced >= COUNTER_HALF_SPAN) {
   1175e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   11762:	d300      	bcc.n	11766 <sys_clock_set_timeout+0x36>
		ticks = 0;
   11764:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11766:	4420      	add	r0, r4
   11768:	1c42      	adds	r2, r0, #1
	if (cyc > MAX_CYCLES) {
   1176a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
   1176e:	d300      	bcc.n	11772 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   11770:	4a05      	ldr	r2, [pc, #20]	; (11788 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
   11772:	2000      	movs	r0, #0
   11774:	188a      	adds	r2, r1, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   11776:	9001      	str	r0, [sp, #4]
   11778:	4905      	ldr	r1, [pc, #20]	; (11790 <sys_clock_set_timeout+0x60>)
   1177a:	9100      	str	r1, [sp, #0]
   1177c:	f143 0300 	adc.w	r3, r3, #0
   11780:	f00b ff40 	bl	1d604 <compare_set>
}
   11784:	b002      	add	sp, #8
   11786:	bd10      	pop	{r4, pc}
   11788:	007fffff 	.word	0x007fffff
   1178c:	20001290 	.word	0x20001290
   11790:	0001148d 	.word	0x0001148d

00011794 <sys_clock_elapsed>:
{
   11794:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   11796:	f7ff feb5 	bl	11504 <z_nrf_rtc_timer_read>
   1179a:	4b02      	ldr	r3, [pc, #8]	; (117a4 <sys_clock_elapsed+0x10>)
   1179c:	681b      	ldr	r3, [r3, #0]
}
   1179e:	1ac0      	subs	r0, r0, r3
   117a0:	bd08      	pop	{r3, pc}
   117a2:	bf00      	nop
   117a4:	20001290 	.word	0x20001290

000117a8 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
   117a8:	b500      	push	{lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   117aa:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   117ae:	d001      	beq.n	117b4 <nrf_pin_configure+0xc>
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   117b0:	2201      	movs	r2, #1
		dir = NRF_GPIO_PIN_DIR_INPUT;
   117b2:	2100      	movs	r1, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
   117b4:	f3c0 1e81 	ubfx	lr, r0, #6, #2
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
   117b8:	f3c0 2c03 	ubfx	ip, r0, #8, #4
    *p_pin = pin_number & 0x1F;
   117bc:	f000 031f 	and.w	r3, r0, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   117c0:	f010 0f20 	tst.w	r0, #32
   117c4:	d10d      	bne.n	117e2 <nrf_pin_configure+0x3a>
        case 0: return NRF_P0;
   117c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   117ca:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   117ce:	ea41 018e 	orr.w	r1, r1, lr, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   117d2:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   117d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   117da:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   117de:	f85d fb04 	ldr.w	pc, [sp], #4
        case 1: return NRF_P1;
   117e2:	4801      	ldr	r0, [pc, #4]	; (117e8 <nrf_pin_configure+0x40>)
   117e4:	e7f1      	b.n	117ca <nrf_pin_configure+0x22>
   117e6:	bf00      	nop
   117e8:	50000300 	.word	0x50000300

000117ec <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   117ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   117ee:	4605      	mov	r5, r0
   117f0:	460e      	mov	r6, r1
   117f2:	4617      	mov	r7, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   117f4:	2400      	movs	r4, #0
   117f6:	e017      	b.n	11828 <pinctrl_configure_pins+0x3c>
		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   117f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   117fc:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   11800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   11804:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11808:	f012 0f20 	tst.w	r2, #32
   1180c:	d14e      	bne.n	118ac <pinctrl_configure_pins+0xc0>
        case 0: return NRF_P0;
   1180e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11812:	2101      	movs	r1, #1
   11814:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
   11818:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   1181c:	460a      	mov	r2, r1
   1181e:	5828      	ldr	r0, [r5, r0]
   11820:	f7ff ffc2 	bl	117a8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   11824:	3401      	adds	r4, #1
   11826:	b2e4      	uxtb	r4, r4
   11828:	42b4      	cmp	r4, r6
   1182a:	f080 816b 	bcs.w	11b04 <pinctrl_configure_pins+0x318>
		switch (NRF_GET_FUN(pins[i])) {
   1182e:	00a0      	lsls	r0, r4, #2
   11830:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11834:	0c1a      	lsrs	r2, r3, #16
   11836:	2a19      	cmp	r2, #25
   11838:	f200 8166 	bhi.w	11b08 <pinctrl_configure_pins+0x31c>
   1183c:	a101      	add	r1, pc, #4	; (adr r1, 11844 <pinctrl_configure_pins+0x58>)
   1183e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   11842:	bf00      	nop
   11844:	000117f9 	.word	0x000117f9
   11848:	000118b1 	.word	0x000118b1
   1184c:	000118c7 	.word	0x000118c7
   11850:	000118f9 	.word	0x000118f9
   11854:	0001190f 	.word	0x0001190f
   11858:	00011941 	.word	0x00011941
   1185c:	00011973 	.word	0x00011973
   11860:	00011b09 	.word	0x00011b09
   11864:	00011b09 	.word	0x00011b09
   11868:	00011b09 	.word	0x00011b09
   1186c:	00011b09 	.word	0x00011b09
   11870:	00011989 	.word	0x00011989
   11874:	0001199f 	.word	0x0001199f
   11878:	00011b09 	.word	0x00011b09
   1187c:	00011b09 	.word	0x00011b09
   11880:	00011b09 	.word	0x00011b09
   11884:	00011b09 	.word	0x00011b09
   11888:	00011b09 	.word	0x00011b09
   1188c:	00011b09 	.word	0x00011b09
   11890:	00011b09 	.word	0x00011b09
   11894:	00011b09 	.word	0x00011b09
   11898:	00011b09 	.word	0x00011b09
   1189c:	000119b5 	.word	0x000119b5
   118a0:	00011a09 	.word	0x00011a09
   118a4:	00011a5d 	.word	0x00011a5d
   118a8:	00011ab1 	.word	0x00011ab1
        case 1: return NRF_P1;
   118ac:	4a98      	ldr	r2, [pc, #608]	; (11b10 <pinctrl_configure_pins+0x324>)
   118ae:	e7b0      	b.n	11812 <pinctrl_configure_pins+0x26>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
		case NRF_FUN_UART_RX:
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   118b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   118b4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   118b8:	2200      	movs	r2, #0
   118ba:	4611      	mov	r1, r2
   118bc:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   118c0:	f7ff ff72 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   118c4:	e7ae      	b.n	11824 <pinctrl_configure_pins+0x38>
		case NRF_FUN_UART_RTS:
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   118c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   118ca:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
   118ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   118d2:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   118d6:	f012 0f20 	tst.w	r2, #32
   118da:	d10b      	bne.n	118f4 <pinctrl_configure_pins+0x108>
        case 0: return NRF_P0;
   118dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   118e0:	2101      	movs	r1, #1
   118e2:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTSET = set_mask;
   118e6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   118ea:	460a      	mov	r2, r1
   118ec:	5828      	ldr	r0, [r5, r0]
   118ee:	f7ff ff5b 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   118f2:	e797      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   118f4:	4a86      	ldr	r2, [pc, #536]	; (11b10 <pinctrl_configure_pins+0x324>)
   118f6:	e7f3      	b.n	118e0 <pinctrl_configure_pins+0xf4>
		case NRF_FUN_UART_CTS:
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
   118f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   118fc:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   11900:	2200      	movs	r2, #0
   11902:	4611      	mov	r1, r2
   11904:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   11908:	f7ff ff4e 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   1190c:	e78a      	b.n	11824 <pinctrl_configure_pins+0x38>
#endif /* defined(NRF_PSEL_UART) */
#if defined(NRF_PSEL_SPIM)
		case NRF_FUN_SPIM_SCK:
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   1190e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11912:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   11916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   1191a:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1191e:	f012 0f20 	tst.w	r2, #32
   11922:	d10b      	bne.n	1193c <pinctrl_configure_pins+0x150>
        case 0: return NRF_P0;
   11924:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11928:	2101      	movs	r1, #1
   1192a:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
   1192e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   11932:	2200      	movs	r2, #0
   11934:	5828      	ldr	r0, [r5, r0]
   11936:	f7ff ff37 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   1193a:	e773      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   1193c:	4a74      	ldr	r2, [pc, #464]	; (11b10 <pinctrl_configure_pins+0x324>)
   1193e:	e7f3      	b.n	11928 <pinctrl_configure_pins+0x13c>
		case NRF_FUN_SPIM_MOSI:
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   11940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11944:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
   11948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    *p_pin = pin_number & 0x1F;
   1194c:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11950:	f012 0f20 	tst.w	r2, #32
   11954:	d10b      	bne.n	1196e <pinctrl_configure_pins+0x182>
        case 0: return NRF_P0;
   11956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1195a:	2101      	movs	r1, #1
   1195c:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->OUTCLR = clr_mask;
   11960:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   11964:	460a      	mov	r2, r1
   11966:	5828      	ldr	r0, [r5, r0]
   11968:	f7ff ff1e 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   1196c:	e75a      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   1196e:	4a68      	ldr	r2, [pc, #416]	; (11b10 <pinctrl_configure_pins+0x324>)
   11970:	e7f3      	b.n	1195a <pinctrl_configure_pins+0x16e>
		case NRF_FUN_SPIM_MISO:
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   11972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11976:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   1197a:	2200      	movs	r2, #0
   1197c:	4611      	mov	r1, r2
   1197e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   11982:	f7ff ff11 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   11986:	e74d      	b.n	11824 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_SPIS) */
#if defined(NRF_PSEL_TWIM)
		case NRF_FUN_TWIM_SCL:
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   11988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1198c:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   11990:	2200      	movs	r2, #0
   11992:	4611      	mov	r1, r2
   11994:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   11998:	f7ff ff06 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   1199c:	e742      	b.n	11824 <pinctrl_configure_pins+0x38>
		case NRF_FUN_TWIM_SDA:
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   1199e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   119a2:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   119a6:	2200      	movs	r2, #0
   119a8:	4611      	mov	r1, r2
   119aa:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
   119ae:	f7ff fefb 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
   119b2:	e737      	b.n	11824 <pinctrl_configure_pins+0x38>
					  NRF_GPIO_PIN_INPUT_CONNECT);
			break;
#endif /* defined(NRF_PSEL_PDM) */
#if defined(NRF_PSEL_PWM)
		case NRF_FUN_PWM_OUT0:
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   119b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   119b8:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   119bc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   119c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
   119c4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   119c8:	d111      	bne.n	119ee <pinctrl_configure_pins+0x202>
    *p_pin = pin_number & 0x1F;
   119ca:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   119ce:	0953      	lsrs	r3, r2, #5
   119d0:	d10b      	bne.n	119ea <pinctrl_configure_pins+0x1fe>
        case 0: return NRF_P0;
   119d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   119d6:	2301      	movs	r3, #1
   119d8:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   119da:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   119de:	2201      	movs	r2, #1
   119e0:	4611      	mov	r1, r2
   119e2:	5828      	ldr	r0, [r5, r0]
   119e4:	f7ff fee0 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   119e8:	e71c      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   119ea:	4a49      	ldr	r2, [pc, #292]	; (11b10 <pinctrl_configure_pins+0x324>)
   119ec:	e7f3      	b.n	119d6 <pinctrl_configure_pins+0x1ea>
    *p_pin = pin_number & 0x1F;
   119ee:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   119f2:	0953      	lsrs	r3, r2, #5
   119f4:	d106      	bne.n	11a04 <pinctrl_configure_pins+0x218>
        case 0: return NRF_P0;
   119f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   119fa:	2301      	movs	r3, #1
   119fc:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   119fe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   11a02:	e7ec      	b.n	119de <pinctrl_configure_pins+0x1f2>
        case 1: return NRF_P1;
   11a04:	4a42      	ldr	r2, [pc, #264]	; (11b10 <pinctrl_configure_pins+0x324>)
   11a06:	e7f8      	b.n	119fa <pinctrl_configure_pins+0x20e>
		case NRF_FUN_PWM_OUT1:
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   11a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11a0c:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   11a10:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
   11a18:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11a1c:	d111      	bne.n	11a42 <pinctrl_configure_pins+0x256>
    *p_pin = pin_number & 0x1F;
   11a1e:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11a22:	0953      	lsrs	r3, r2, #5
   11a24:	d10b      	bne.n	11a3e <pinctrl_configure_pins+0x252>
        case 0: return NRF_P0;
   11a26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11a2a:	2301      	movs	r3, #1
   11a2c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   11a2e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   11a32:	2201      	movs	r2, #1
   11a34:	4611      	mov	r1, r2
   11a36:	5828      	ldr	r0, [r5, r0]
   11a38:	f7ff feb6 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   11a3c:	e6f2      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   11a3e:	4a34      	ldr	r2, [pc, #208]	; (11b10 <pinctrl_configure_pins+0x324>)
   11a40:	e7f3      	b.n	11a2a <pinctrl_configure_pins+0x23e>
    *p_pin = pin_number & 0x1F;
   11a42:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11a46:	0953      	lsrs	r3, r2, #5
   11a48:	d106      	bne.n	11a58 <pinctrl_configure_pins+0x26c>
        case 0: return NRF_P0;
   11a4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11a4e:	2301      	movs	r3, #1
   11a50:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   11a52:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   11a56:	e7ec      	b.n	11a32 <pinctrl_configure_pins+0x246>
        case 1: return NRF_P1;
   11a58:	4a2d      	ldr	r2, [pc, #180]	; (11b10 <pinctrl_configure_pins+0x324>)
   11a5a:	e7f8      	b.n	11a4e <pinctrl_configure_pins+0x262>
		case NRF_FUN_PWM_OUT2:
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   11a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11a60:	f8c7 3568 	str.w	r3, [r7, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   11a64:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11a68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
   11a6c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11a70:	d111      	bne.n	11a96 <pinctrl_configure_pins+0x2aa>
    *p_pin = pin_number & 0x1F;
   11a72:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11a76:	0953      	lsrs	r3, r2, #5
   11a78:	d10b      	bne.n	11a92 <pinctrl_configure_pins+0x2a6>
        case 0: return NRF_P0;
   11a7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11a7e:	2301      	movs	r3, #1
   11a80:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   11a82:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   11a86:	2201      	movs	r2, #1
   11a88:	4611      	mov	r1, r2
   11a8a:	5828      	ldr	r0, [r5, r0]
   11a8c:	f7ff fe8c 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   11a90:	e6c8      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   11a92:	4a1f      	ldr	r2, [pc, #124]	; (11b10 <pinctrl_configure_pins+0x324>)
   11a94:	e7f3      	b.n	11a7e <pinctrl_configure_pins+0x292>
    *p_pin = pin_number & 0x1F;
   11a96:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11a9a:	0953      	lsrs	r3, r2, #5
   11a9c:	d106      	bne.n	11aac <pinctrl_configure_pins+0x2c0>
        case 0: return NRF_P0;
   11a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11aa2:	2301      	movs	r3, #1
   11aa4:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   11aa6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   11aaa:	e7ec      	b.n	11a86 <pinctrl_configure_pins+0x29a>
        case 1: return NRF_P1;
   11aac:	4a18      	ldr	r2, [pc, #96]	; (11b10 <pinctrl_configure_pins+0x324>)
   11aae:	e7f8      	b.n	11aa2 <pinctrl_configure_pins+0x2b6>
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   11ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   11ab4:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   11ab8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   11abc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    if (value == 0)
   11ac0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   11ac4:	d111      	bne.n	11aea <pinctrl_configure_pins+0x2fe>
    *p_pin = pin_number & 0x1F;
   11ac6:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11aca:	0953      	lsrs	r3, r2, #5
   11acc:	d10b      	bne.n	11ae6 <pinctrl_configure_pins+0x2fa>
        case 0: return NRF_P0;
   11ace:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   11ad2:	2301      	movs	r3, #1
   11ad4:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
   11ad6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   11ada:	2201      	movs	r2, #1
   11adc:	4611      	mov	r1, r2
   11ade:	5828      	ldr	r0, [r5, r0]
   11ae0:	f7ff fe62 	bl	117a8 <nrf_pin_configure>
					  NRF_GPIO_PIN_INPUT_DISCONNECT);
			break;
   11ae4:	e69e      	b.n	11824 <pinctrl_configure_pins+0x38>
        case 1: return NRF_P1;
   11ae6:	4a0a      	ldr	r2, [pc, #40]	; (11b10 <pinctrl_configure_pins+0x324>)
   11ae8:	e7f3      	b.n	11ad2 <pinctrl_configure_pins+0x2e6>
    *p_pin = pin_number & 0x1F;
   11aea:	f002 011f 	and.w	r1, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   11aee:	0953      	lsrs	r3, r2, #5
   11af0:	d106      	bne.n	11b00 <pinctrl_configure_pins+0x314>
        case 0: return NRF_P0;
   11af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   11af6:	2301      	movs	r3, #1
   11af8:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   11afa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
   11afe:	e7ec      	b.n	11ada <pinctrl_configure_pins+0x2ee>
        case 1: return NRF_P1;
   11b00:	4a03      	ldr	r2, [pc, #12]	; (11b10 <pinctrl_configure_pins+0x324>)
   11b02:	e7f8      	b.n	11af6 <pinctrl_configure_pins+0x30a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   11b04:	2000      	movs	r0, #0
   11b06:	e001      	b.n	11b0c <pinctrl_configure_pins+0x320>
		switch (NRF_GET_FUN(pins[i])) {
   11b08:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   11b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11b0e:	bf00      	nop
   11b10:	50000300 	.word	0x50000300

00011b14 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   11b14:	4b02      	ldr	r3, [pc, #8]	; (11b20 <nvmc_wait+0xc>)
   11b16:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   11b1a:	2b00      	cmp	r3, #0
   11b1c:	d0fa      	beq.n	11b14 <nvmc_wait>
}
   11b1e:	4770      	bx	lr
   11b20:	4001e000 	.word	0x4001e000

00011b24 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   11b24:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   11b26:	4b03      	ldr	r3, [pc, #12]	; (11b34 <nvmc_config+0x10>)
   11b28:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   11b2c:	f7ff fff2 	bl	11b14 <nvmc_wait>
}
   11b30:	bd08      	pop	{r3, pc}
   11b32:	bf00      	nop
   11b34:	4001e000 	.word	0x4001e000

00011b38 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   11b38:	4b01      	ldr	r3, [pc, #4]	; (11b40 <SystemCoreClockUpdate+0x8>)
   11b3a:	4a02      	ldr	r2, [pc, #8]	; (11b44 <SystemCoreClockUpdate+0xc>)
   11b3c:	601a      	str	r2, [r3, #0]
}
   11b3e:	4770      	bx	lr
   11b40:	200008c8 	.word	0x200008c8
   11b44:	03d09000 	.word	0x03d09000

00011b48 <SystemInit>:

void SystemInit(void)
{
   11b48:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   11b4a:	f00b fd92 	bl	1d672 <nrf52_errata_36>
   11b4e:	b140      	cbz	r0, 11b62 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   11b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11b54:	2200      	movs	r2, #0
   11b56:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   11b5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   11b5e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   11b62:	f00b fd90 	bl	1d686 <nrf52_errata_66>
   11b66:	2800      	cmp	r0, #0
   11b68:	d046      	beq.n	11bf8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   11b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11b6e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   11b72:	4b45      	ldr	r3, [pc, #276]	; (11c88 <SystemInit+0x140>)
   11b74:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   11b78:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   11b7c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   11b80:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   11b84:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   11b88:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   11b8c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   11b90:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   11b94:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   11b98:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   11b9c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   11ba0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   11ba4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   11ba8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   11bac:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   11bb0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   11bb4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   11bb8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   11bbc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   11bc0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   11bc4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   11bc8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   11bcc:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   11bd0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   11bd4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   11bd8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   11bdc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   11be0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   11be4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   11be8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   11bec:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   11bf0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   11bf4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   11bf8:	f00b fd4f 	bl	1d69a <nrf52_errata_136>
   11bfc:	b160      	cbz	r0, 11c18 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   11bfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   11c06:	f013 0f01 	tst.w	r3, #1
   11c0a:	d005      	beq.n	11c18 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   11c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c10:	f06f 0201 	mvn.w	r2, #1
   11c14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   11c18:	f00b fd49 	bl	1d6ae <nrf52_configuration_249>
   11c1c:	b138      	cbz	r0, 11c2e <SystemInit+0xe6>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   11c1e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11c22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   11c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11c2a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   11c2e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   11c36:	2b00      	cmp	r3, #0
   11c38:	db08      	blt.n	11c4c <SystemInit+0x104>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   11c3a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   11c3e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   11c42:	2b00      	cmp	r3, #0
   11c44:	db02      	blt.n	11c4c <SystemInit+0x104>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   11c46:	f7ff ff77 	bl	11b38 <SystemCoreClockUpdate>
}
   11c4a:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   11c4c:	2001      	movs	r0, #1
   11c4e:	f7ff ff69 	bl	11b24 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   11c52:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   11c56:	2512      	movs	r5, #18
   11c58:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   11c5c:	f7ff ff5a 	bl	11b14 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   11c60:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   11c64:	f7ff ff56 	bl	11b14 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   11c68:	2000      	movs	r0, #0
   11c6a:	f7ff ff5b 	bl	11b24 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   11c6e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   11c72:	4906      	ldr	r1, [pc, #24]	; (11c8c <SystemInit+0x144>)
   11c74:	68ca      	ldr	r2, [r1, #12]
   11c76:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11c7a:	4b05      	ldr	r3, [pc, #20]	; (11c90 <SystemInit+0x148>)
   11c7c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   11c7e:	60cb      	str	r3, [r1, #12]
   11c80:	f3bf 8f4f 	dsb	sy
    __NOP();
   11c84:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   11c86:	e7fd      	b.n	11c84 <SystemInit+0x13c>
   11c88:	4000c000 	.word	0x4000c000
   11c8c:	e000ed00 	.word	0xe000ed00
   11c90:	05fa0004 	.word	0x05fa0004

00011c94 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   11c94:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   11c96:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   11c98:	fab4 f384 	clz	r3, r4
   11c9c:	f1c3 031f 	rsb	r3, r3, #31
   11ca0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   11ca4:	2b00      	cmp	r3, #0
   11ca6:	db16      	blt.n	11cd6 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   11ca8:	2201      	movs	r2, #1
   11caa:	fa02 f303 	lsl.w	r3, r2, r3
   11cae:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11cb2:	f3bf 8f5b 	dmb	ish
   11cb6:	e850 2f00 	ldrex	r2, [r0]
   11cba:	42a2      	cmp	r2, r4
   11cbc:	d104      	bne.n	11cc8 <nrfx_flag32_alloc+0x34>
   11cbe:	e840 3e00 	strex	lr, r3, [r0]
   11cc2:	f1be 0f00 	cmp.w	lr, #0
   11cc6:	d1f6      	bne.n	11cb6 <nrfx_flag32_alloc+0x22>
   11cc8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   11ccc:	d1e3      	bne.n	11c96 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   11cce:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   11cd2:	4802      	ldr	r0, [pc, #8]	; (11cdc <nrfx_flag32_alloc+0x48>)
}
   11cd4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   11cd6:	4802      	ldr	r0, [pc, #8]	; (11ce0 <nrfx_flag32_alloc+0x4c>)
   11cd8:	e7fc      	b.n	11cd4 <nrfx_flag32_alloc+0x40>
   11cda:	bf00      	nop
   11cdc:	0bad0000 	.word	0x0bad0000
   11ce0:	0bad0002 	.word	0x0bad0002

00011ce4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   11ce4:	6803      	ldr	r3, [r0, #0]
   11ce6:	40cb      	lsrs	r3, r1
   11ce8:	f013 0f01 	tst.w	r3, #1
   11cec:	d115      	bne.n	11d1a <nrfx_flag32_free+0x36>
{
   11cee:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   11cf0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   11cf2:	2301      	movs	r3, #1
   11cf4:	408b      	lsls	r3, r1
   11cf6:	4313      	orrs	r3, r2
   11cf8:	f3bf 8f5b 	dmb	ish
   11cfc:	e850 cf00 	ldrex	ip, [r0]
   11d00:	4594      	cmp	ip, r2
   11d02:	d104      	bne.n	11d0e <nrfx_flag32_free+0x2a>
   11d04:	e840 3e00 	strex	lr, r3, [r0]
   11d08:	f1be 0f00 	cmp.w	lr, #0
   11d0c:	d1f6      	bne.n	11cfc <nrfx_flag32_free+0x18>
   11d0e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   11d12:	d1ed      	bne.n	11cf0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   11d14:	4802      	ldr	r0, [pc, #8]	; (11d20 <nrfx_flag32_free+0x3c>)
}
   11d16:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   11d1a:	4802      	ldr	r0, [pc, #8]	; (11d24 <nrfx_flag32_free+0x40>)
}
   11d1c:	4770      	bx	lr
   11d1e:	bf00      	nop
   11d20:	0bad0000 	.word	0x0bad0000
   11d24:	0bad0004 	.word	0x0bad0004

00011d28 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   11d28:	4b05      	ldr	r3, [pc, #20]	; (11d40 <nrfx_clock_init+0x18>)
   11d2a:	791b      	ldrb	r3, [r3, #4]
   11d2c:	b92b      	cbnz	r3, 11d3a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   11d2e:	4b04      	ldr	r3, [pc, #16]	; (11d40 <nrfx_clock_init+0x18>)
   11d30:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   11d32:	2201      	movs	r2, #1
   11d34:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   11d36:	4803      	ldr	r0, [pc, #12]	; (11d44 <nrfx_clock_init+0x1c>)
   11d38:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   11d3a:	4803      	ldr	r0, [pc, #12]	; (11d48 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   11d3c:	4770      	bx	lr
   11d3e:	bf00      	nop
   11d40:	20008d50 	.word	0x20008d50
   11d44:	0bad0000 	.word	0x0bad0000
   11d48:	0bad000c 	.word	0x0bad000c

00011d4c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   11d4c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11d4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   11d56:	b163      	cbz	r3, 11d72 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d5c:	2000      	movs	r0, #0
   11d5e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   11d62:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   11d66:	2201      	movs	r2, #1
   11d68:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   11d6c:	4b13      	ldr	r3, [pc, #76]	; (11dbc <nrfx_power_clock_irq_handler+0x70>)
   11d6e:	681b      	ldr	r3, [r3, #0]
   11d70:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   11d7a:	b19b      	cbz	r3, 11da4 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d80:	2200      	movs	r2, #0
   11d82:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   11d86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11d8a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11d8e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   11d92:	f012 0f03 	tst.w	r2, #3
   11d96:	d106      	bne.n	11da6 <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   11d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11d9c:	2201      	movs	r2, #1
   11d9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11da2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   11da4:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
   11da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   11daa:	2202      	movs	r2, #2
   11dac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   11db0:	4b02      	ldr	r3, [pc, #8]	; (11dbc <nrfx_power_clock_irq_handler+0x70>)
   11db2:	681b      	ldr	r3, [r3, #0]
   11db4:	2001      	movs	r0, #1
   11db6:	4798      	blx	r3
}
   11db8:	e7f4      	b.n	11da4 <nrfx_power_clock_irq_handler+0x58>
   11dba:	bf00      	nop
   11dbc:	20008d50 	.word	0x20008d50

00011dc0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   11dc0:	3008      	adds	r0, #8
   11dc2:	4b03      	ldr	r3, [pc, #12]	; (11dd0 <pin_in_use+0x10>)
   11dc4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11dc8:	f000 0001 	and.w	r0, r0, #1
   11dcc:	4770      	bx	lr
   11dce:	bf00      	nop
   11dd0:	200008cc 	.word	0x200008cc

00011dd4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   11dd4:	3008      	adds	r0, #8
   11dd6:	4b03      	ldr	r3, [pc, #12]	; (11de4 <pin_in_use_by_te+0x10>)
   11dd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11ddc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   11de0:	4770      	bx	lr
   11de2:	bf00      	nop
   11de4:	200008cc 	.word	0x200008cc

00011de8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   11de8:	3008      	adds	r0, #8
   11dea:	4b04      	ldr	r3, [pc, #16]	; (11dfc <pin_has_trigger+0x14>)
   11dec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11df0:	f010 001c 	ands.w	r0, r0, #28
   11df4:	bf18      	it	ne
   11df6:	2001      	movne	r0, #1
   11df8:	4770      	bx	lr
   11dfa:	bf00      	nop
   11dfc:	200008cc 	.word	0x200008cc

00011e00 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   11e00:	3008      	adds	r0, #8
   11e02:	4b03      	ldr	r3, [pc, #12]	; (11e10 <pin_is_output+0x10>)
   11e04:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11e08:	f3c0 0040 	ubfx	r0, r0, #1, #1
   11e0c:	4770      	bx	lr
   11e0e:	bf00      	nop
   11e10:	200008cc 	.word	0x200008cc

00011e14 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   11e14:	3008      	adds	r0, #8
   11e16:	4b02      	ldr	r3, [pc, #8]	; (11e20 <pin_te_get+0xc>)
   11e18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   11e1c:	0b40      	lsrs	r0, r0, #13
   11e1e:	4770      	bx	lr
   11e20:	200008cc 	.word	0x200008cc

00011e24 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   11e24:	2200      	movs	r2, #0
   11e26:	e004      	b.n	11e32 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   11e28:	f04f 33ff 	mov.w	r3, #4294967295
   11e2c:	4283      	cmp	r3, r0
   11e2e:	d00f      	beq.n	11e50 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   11e30:	3201      	adds	r2, #1
   11e32:	2a29      	cmp	r2, #41	; 0x29
   11e34:	d80a      	bhi.n	11e4c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   11e36:	f102 0308 	add.w	r3, r2, #8
   11e3a:	4906      	ldr	r1, [pc, #24]	; (11e54 <handler_in_use+0x30>)
   11e3c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   11e40:	f413 7f80 	tst.w	r3, #256	; 0x100
   11e44:	d0f0      	beq.n	11e28 <handler_in_use+0x4>
   11e46:	f3c3 2343 	ubfx	r3, r3, #9, #4
   11e4a:	e7ef      	b.n	11e2c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   11e4c:	2000      	movs	r0, #0
   11e4e:	4770      	bx	lr
            return true;
   11e50:	2001      	movs	r0, #1
}
   11e52:	4770      	bx	lr
   11e54:	200008cc 	.word	0x200008cc

00011e58 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   11e58:	2300      	movs	r3, #0
   11e5a:	b113      	cbz	r3, 11e62 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   11e5c:	f04f 30ff 	mov.w	r0, #4294967295
}
   11e60:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11e62:	4a07      	ldr	r2, [pc, #28]	; (11e80 <find_handler+0x28>)
   11e64:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   11e68:	4282      	cmp	r2, r0
   11e6a:	d001      	beq.n	11e70 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   11e6c:	3301      	adds	r3, #1
   11e6e:	e7f4      	b.n	11e5a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   11e70:	4a03      	ldr	r2, [pc, #12]	; (11e80 <find_handler+0x28>)
   11e72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   11e76:	6852      	ldr	r2, [r2, #4]
   11e78:	428a      	cmp	r2, r1
   11e7a:	d1f7      	bne.n	11e6c <find_handler+0x14>
            return i;
   11e7c:	4618      	mov	r0, r3
   11e7e:	4770      	bx	lr
   11e80:	200008cc 	.word	0x200008cc

00011e84 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   11e84:	3008      	adds	r0, #8
   11e86:	4b06      	ldr	r3, [pc, #24]	; (11ea0 <channel_handler_get+0x1c>)
   11e88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   11e8c:	f410 7f80 	tst.w	r0, #256	; 0x100
   11e90:	d004      	beq.n	11e9c <channel_handler_get+0x18>
   11e92:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   11e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   11e9a:	4770      	bx	lr
        return NULL;
   11e9c:	2000      	movs	r0, #0
}
   11e9e:	4770      	bx	lr
   11ea0:	200008cc 	.word	0x200008cc

00011ea4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   11ea4:	b570      	push	{r4, r5, r6, lr}
   11ea6:	4604      	mov	r4, r0
   11ea8:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   11eaa:	f7ff ffeb 	bl	11e84 <channel_handler_get>

    if (handler)
   11eae:	b120      	cbz	r0, 11eba <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   11eb0:	6806      	ldr	r6, [r0, #0]
   11eb2:	6842      	ldr	r2, [r0, #4]
   11eb4:	4629      	mov	r1, r5
   11eb6:	4620      	mov	r0, r4
   11eb8:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   11eba:	4b04      	ldr	r3, [pc, #16]	; (11ecc <call_handler+0x28>)
   11ebc:	689b      	ldr	r3, [r3, #8]
   11ebe:	b123      	cbz	r3, 11eca <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   11ec0:	4a02      	ldr	r2, [pc, #8]	; (11ecc <call_handler+0x28>)
   11ec2:	68d2      	ldr	r2, [r2, #12]
   11ec4:	4629      	mov	r1, r5
   11ec6:	4620      	mov	r0, r4
   11ec8:	4798      	blx	r3
    }
}
   11eca:	bd70      	pop	{r4, r5, r6, pc}
   11ecc:	200008cc 	.word	0x200008cc

00011ed0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   11ed0:	f100 0208 	add.w	r2, r0, #8
   11ed4:	4b0e      	ldr	r3, [pc, #56]	; (11f10 <release_handler+0x40>)
   11ed6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   11eda:	f413 7f80 	tst.w	r3, #256	; 0x100
   11ede:	d016      	beq.n	11f0e <release_handler+0x3e>
{
   11ee0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   11ee2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   11ee6:	4610      	mov	r0, r2
   11ee8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   11eec:	4a08      	ldr	r2, [pc, #32]	; (11f10 <release_handler+0x40>)
   11eee:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   11ef2:	4620      	mov	r0, r4
   11ef4:	f7ff ff96 	bl	11e24 <handler_in_use>
   11ef8:	b100      	cbz	r0, 11efc <release_handler+0x2c>
}
   11efa:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   11efc:	4804      	ldr	r0, [pc, #16]	; (11f10 <release_handler+0x40>)
   11efe:	2300      	movs	r3, #0
   11f00:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   11f04:	4621      	mov	r1, r4
   11f06:	3068      	adds	r0, #104	; 0x68
   11f08:	f7ff feec 	bl	11ce4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   11f0c:	e7f5      	b.n	11efa <release_handler+0x2a>
   11f0e:	4770      	bx	lr
   11f10:	200008cc 	.word	0x200008cc

00011f14 <pin_handler_trigger_uninit>:
{
   11f14:	b510      	push	{r4, lr}
   11f16:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   11f18:	f7ff ff5c 	bl	11dd4 <pin_in_use_by_te>
   11f1c:	b140      	cbz	r0, 11f30 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   11f1e:	4620      	mov	r0, r4
   11f20:	f7ff ff78 	bl	11e14 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   11f24:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   11f28:	4b06      	ldr	r3, [pc, #24]	; (11f44 <pin_handler_trigger_uninit+0x30>)
   11f2a:	2200      	movs	r2, #0
   11f2c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   11f30:	4620      	mov	r0, r4
   11f32:	f7ff ffcd 	bl	11ed0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   11f36:	3408      	adds	r4, #8
   11f38:	4b03      	ldr	r3, [pc, #12]	; (11f48 <pin_handler_trigger_uninit+0x34>)
   11f3a:	2200      	movs	r2, #0
   11f3c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   11f40:	bd10      	pop	{r4, pc}
   11f42:	bf00      	nop
   11f44:	40006000 	.word	0x40006000
   11f48:	200008cc 	.word	0x200008cc

00011f4c <pin_handler_set>:
{
   11f4c:	b570      	push	{r4, r5, r6, lr}
   11f4e:	b082      	sub	sp, #8
   11f50:	4606      	mov	r6, r0
   11f52:	460c      	mov	r4, r1
   11f54:	4615      	mov	r5, r2
    release_handler(pin);
   11f56:	f7ff ffbb 	bl	11ed0 <release_handler>
    if (!handler)
   11f5a:	b324      	cbz	r4, 11fa6 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   11f5c:	4629      	mov	r1, r5
   11f5e:	4620      	mov	r0, r4
   11f60:	f7ff ff7a 	bl	11e58 <find_handler>
    if (handler_id < 0)
   11f64:	1e03      	subs	r3, r0, #0
   11f66:	db13      	blt.n	11f90 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   11f68:	4a10      	ldr	r2, [pc, #64]	; (11fac <pin_handler_set+0x60>)
   11f6a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   11f6e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   11f72:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   11f74:	025b      	lsls	r3, r3, #9
   11f76:	b29b      	uxth	r3, r3
   11f78:	f106 0008 	add.w	r0, r6, #8
   11f7c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   11f80:	430b      	orrs	r3, r1
   11f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   11f86:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   11f8a:	4809      	ldr	r0, [pc, #36]	; (11fb0 <pin_handler_set+0x64>)
}
   11f8c:	b002      	add	sp, #8
   11f8e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   11f90:	f10d 0107 	add.w	r1, sp, #7
   11f94:	4807      	ldr	r0, [pc, #28]	; (11fb4 <pin_handler_set+0x68>)
   11f96:	f7ff fe7d 	bl	11c94 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   11f9a:	4b05      	ldr	r3, [pc, #20]	; (11fb0 <pin_handler_set+0x64>)
   11f9c:	4298      	cmp	r0, r3
   11f9e:	d1f5      	bne.n	11f8c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   11fa0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   11fa4:	e7e0      	b.n	11f68 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   11fa6:	4802      	ldr	r0, [pc, #8]	; (11fb0 <pin_handler_set+0x64>)
   11fa8:	e7f0      	b.n	11f8c <pin_handler_set+0x40>
   11faa:	bf00      	nop
   11fac:	200008cc 	.word	0x200008cc
   11fb0:	0bad0000 	.word	0x0bad0000
   11fb4:	20000934 	.word	0x20000934

00011fb8 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   11fb8:	b538      	push	{r3, r4, r5, lr}
   11fba:	4604      	mov	r4, r0
    while (mask)
   11fbc:	e018      	b.n	11ff0 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   11fbe:	fa94 f3a4 	rbit	r3, r4
   11fc2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   11fc6:	2201      	movs	r2, #1
   11fc8:	409a      	lsls	r2, r3
   11fca:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   11fce:	4a0a      	ldr	r2, [pc, #40]	; (11ff8 <gpiote_evt_handle+0x40>)
   11fd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   11fd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   11fd8:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   11fdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   11fe0:	f3c0 4001 	ubfx	r0, r0, #16, #2
   11fe4:	f00b fc6d 	bl	1d8c2 <gpiote_polarity_to_trigger>
   11fe8:	4601      	mov	r1, r0
   11fea:	4628      	mov	r0, r5
   11fec:	f7ff ff5a 	bl	11ea4 <call_handler>
    while (mask)
   11ff0:	2c00      	cmp	r4, #0
   11ff2:	d1e4      	bne.n	11fbe <gpiote_evt_handle+0x6>
    }
}
   11ff4:	bd38      	pop	{r3, r4, r5, pc}
   11ff6:	bf00      	nop
   11ff8:	40006000 	.word	0x40006000

00011ffc <latch_pending_read_and_check>:
{
   11ffc:	b082      	sub	sp, #8
   11ffe:	4684      	mov	ip, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   12000:	4b11      	ldr	r3, [pc, #68]	; (12048 <latch_pending_read_and_check+0x4c>)
   12002:	e893 0003 	ldmia.w	r3, {r0, r1}
   12006:	ab02      	add	r3, sp, #8
   12008:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1200c:	4660      	mov	r0, ip
   1200e:	2300      	movs	r3, #0
   12010:	e00b      	b.n	1202a <latch_pending_read_and_check+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   12012:	aa02      	add	r2, sp, #8
   12014:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12018:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1201c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   12020:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   12024:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   12028:	3301      	adds	r3, #1
   1202a:	2b01      	cmp	r3, #1
   1202c:	d9f1      	bls.n	12012 <latch_pending_read_and_check+0x16>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1202e:	2300      	movs	r3, #0
   12030:	2b01      	cmp	r3, #1
   12032:	d804      	bhi.n	1203e <latch_pending_read_and_check+0x42>
        if (latch[port_idx])
   12034:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
   12038:	b922      	cbnz	r2, 12044 <latch_pending_read_and_check+0x48>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1203a:	3301      	adds	r3, #1
   1203c:	e7f8      	b.n	12030 <latch_pending_read_and_check+0x34>
    return false;
   1203e:	2000      	movs	r0, #0
}
   12040:	b002      	add	sp, #8
   12042:	4770      	bx	lr
            return true;
   12044:	2001      	movs	r0, #1
   12046:	e7fb      	b.n	12040 <latch_pending_read_and_check+0x44>
   12048:	0001e6e8 	.word	0x0001e6e8

0001204c <next_sense_cond_call_handler>:
{
   1204c:	b570      	push	{r4, r5, r6, lr}
   1204e:	4604      	mov	r4, r0
   12050:	460d      	mov	r5, r1
   12052:	4616      	mov	r6, r2
    if (is_level(trigger))
   12054:	4608      	mov	r0, r1
   12056:	f00b fc36 	bl	1d8c6 <is_level>
   1205a:	b9d0      	cbnz	r0, 12092 <next_sense_cond_call_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1205c:	2e02      	cmp	r6, #2
   1205e:	d052      	beq.n	12106 <next_sense_cond_call_handler+0xba>
   12060:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   12062:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   12066:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12068:	2901      	cmp	r1, #1
   1206a:	d04e      	beq.n	1210a <next_sense_cond_call_handler+0xbe>
        case 0: return NRF_P0;
   1206c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12070:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   12074:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   12078:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1207c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12080:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   12084:	2d03      	cmp	r5, #3
   12086:	d044      	beq.n	12112 <next_sense_cond_call_handler+0xc6>
   12088:	2e02      	cmp	r6, #2
   1208a:	d040      	beq.n	1210e <next_sense_cond_call_handler+0xc2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1208c:	2e03      	cmp	r6, #3
   1208e:	d045      	beq.n	1211c <next_sense_cond_call_handler+0xd0>
}
   12090:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   12092:	4629      	mov	r1, r5
   12094:	4620      	mov	r0, r4
   12096:	f7ff ff05 	bl	11ea4 <call_handler>
    *p_pin = pin_number & 0x1F;
   1209a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1209e:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   120a0:	2a01      	cmp	r2, #1
   120a2:	d02a      	beq.n	120fa <next_sense_cond_call_handler+0xae>
        case 0: return NRF_P0;
   120a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   120a8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   120ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   120b0:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   120b4:	429e      	cmp	r6, r3
   120b6:	d1eb      	bne.n	12090 <next_sense_cond_call_handler+0x44>
    *p_pin = pin_number & 0x1F;
   120b8:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   120bc:	0962      	lsrs	r2, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   120be:	2a01      	cmp	r2, #1
   120c0:	d01d      	beq.n	120fe <next_sense_cond_call_handler+0xb2>
        case 0: return NRF_P0;
   120c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   120c6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   120ca:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   120ce:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   120d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   120d6:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   120da:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   120dc:	2c01      	cmp	r4, #1
   120de:	d010      	beq.n	12102 <next_sense_cond_call_handler+0xb6>
        case 0: return NRF_P0;
   120e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   120e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   120e8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   120ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   120f0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   120f4:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
   120f8:	e7ca      	b.n	12090 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   120fa:	4a0a      	ldr	r2, [pc, #40]	; (12124 <next_sense_cond_call_handler+0xd8>)
   120fc:	e7d4      	b.n	120a8 <next_sense_cond_call_handler+0x5c>
   120fe:	4909      	ldr	r1, [pc, #36]	; (12124 <next_sense_cond_call_handler+0xd8>)
   12100:	e7e1      	b.n	120c6 <next_sense_cond_call_handler+0x7a>
   12102:	4908      	ldr	r1, [pc, #32]	; (12124 <next_sense_cond_call_handler+0xd8>)
   12104:	e7ee      	b.n	120e4 <next_sense_cond_call_handler+0x98>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12106:	2003      	movs	r0, #3
   12108:	e7ab      	b.n	12062 <next_sense_cond_call_handler+0x16>
   1210a:	4906      	ldr	r1, [pc, #24]	; (12124 <next_sense_cond_call_handler+0xd8>)
   1210c:	e7b0      	b.n	12070 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1210e:	2d01      	cmp	r5, #1
   12110:	d1bc      	bne.n	1208c <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   12112:	4629      	mov	r1, r5
   12114:	4620      	mov	r0, r4
   12116:	f7ff fec5 	bl	11ea4 <call_handler>
}
   1211a:	e7b9      	b.n	12090 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1211c:	2d02      	cmp	r5, #2
   1211e:	d1b7      	bne.n	12090 <next_sense_cond_call_handler+0x44>
   12120:	e7f7      	b.n	12112 <next_sense_cond_call_handler+0xc6>
   12122:	bf00      	nop
   12124:	50000300 	.word	0x50000300

00012128 <port_event_handle>:
{
   12128:	b570      	push	{r4, r5, r6, lr}
   1212a:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1212c:	4a2f      	ldr	r2, [pc, #188]	; (121ec <port_event_handle+0xc4>)
   1212e:	466b      	mov	r3, sp
   12130:	e892 0003 	ldmia.w	r2, {r0, r1}
   12134:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   12138:	2300      	movs	r3, #0
   1213a:	a802      	add	r0, sp, #8
   1213c:	e00b      	b.n	12156 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   1213e:	aa04      	add	r2, sp, #16
   12140:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   12144:	f852 2c10 	ldr.w	r2, [r2, #-16]
   12148:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1214c:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   12150:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   12154:	3301      	adds	r3, #1
   12156:	2b01      	cmp	r3, #1
   12158:	d9f1      	bls.n	1213e <port_event_handle+0x16>
   1215a:	e042      	b.n	121e2 <port_event_handle+0xba>
        case 1: return NRF_P1;
   1215c:	4e24      	ldr	r6, [pc, #144]	; (121f0 <port_event_handle+0xc8>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1215e:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   12162:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                next_sense_cond_call_handler(pin, trigger, sense);
   12166:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1216a:	f7ff ff6f 	bl	1204c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   1216e:	2301      	movs	r3, #1
   12170:	40ab      	lsls	r3, r5
   12172:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   12176:	ab04      	add	r3, sp, #16
   12178:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1217c:	f853 0c08 	ldr.w	r0, [r3, #-8]
   12180:	b310      	cbz	r0, 121c8 <port_event_handle+0xa0>
                uint32_t pin = NRF_CTZ(latch[i]);
   12182:	fa90 f0a0 	rbit	r0, r0
   12186:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1218a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1218e:	f100 0208 	add.w	r2, r0, #8
   12192:	4b18      	ldr	r3, [pc, #96]	; (121f4 <port_event_handle+0xcc>)
   12194:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   12198:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1219c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1219e:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   121a2:	f10d 0c08 	add.w	ip, sp, #8
   121a6:	2301      	movs	r3, #1
   121a8:	fa03 f202 	lsl.w	r2, r3, r2
   121ac:	f81c 3005 	ldrb.w	r3, [ip, r5]
   121b0:	ea23 0302 	bic.w	r3, r3, r2
   121b4:	f80c 3005 	strb.w	r3, [ip, r5]
    *p_pin = pin_number & 0x1F;
   121b8:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   121bc:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   121be:	2b01      	cmp	r3, #1
   121c0:	d0cc      	beq.n	1215c <port_event_handle+0x34>
        case 0: return NRF_P0;
   121c2:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   121c6:	e7ca      	b.n	1215e <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   121c8:	3401      	adds	r4, #1
   121ca:	2c01      	cmp	r4, #1
   121cc:	d9d3      	bls.n	12176 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   121ce:	4b0a      	ldr	r3, [pc, #40]	; (121f8 <port_event_handle+0xd0>)
   121d0:	2200      	movs	r2, #0
   121d2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   121d6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    } while (latch_pending_read_and_check(latch));
   121da:	a802      	add	r0, sp, #8
   121dc:	f7ff ff0e 	bl	11ffc <latch_pending_read_and_check>
   121e0:	b108      	cbz	r0, 121e6 <port_event_handle+0xbe>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   121e2:	2400      	movs	r4, #0
   121e4:	e7f1      	b.n	121ca <port_event_handle+0xa2>
}
   121e6:	b004      	add	sp, #16
   121e8:	bd70      	pop	{r4, r5, r6, pc}
   121ea:	bf00      	nop
   121ec:	0001e6e8 	.word	0x0001e6e8
   121f0:	50000300 	.word	0x50000300
   121f4:	200008cc 	.word	0x200008cc
   121f8:	40006000 	.word	0x40006000

000121fc <nrfx_gpiote_input_configure>:
{
   121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12200:	4604      	mov	r4, r0
   12202:	4615      	mov	r5, r2
   12204:	461e      	mov	r6, r3
    if (p_input_config)
   12206:	b371      	cbz	r1, 12266 <nrfx_gpiote_input_configure+0x6a>
   12208:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1220a:	f00b fb44 	bl	1d896 <pin_is_task_output>
   1220e:	2800      	cmp	r0, #0
   12210:	f040 8099 	bne.w	12346 <nrfx_gpiote_input_configure+0x14a>
    *p_pin = pin_number & 0x1F;
   12214:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   12218:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1221a:	2b01      	cmp	r3, #1
   1221c:	d045      	beq.n	122aa <nrfx_gpiote_input_configure+0xae>
        case 0: return NRF_P0;
   1221e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12222:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   12226:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1222a:	2f00      	cmp	r7, #0
   1222c:	d03f      	beq.n	122ae <nrfx_gpiote_input_configure+0xb2>
   1222e:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   12230:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   12234:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12238:	2f00      	cmp	r7, #0
   1223a:	d03a      	beq.n	122b2 <nrfx_gpiote_input_configure+0xb6>
   1223c:	7839      	ldrb	r1, [r7, #0]
   1223e:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12240:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   12242:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   12246:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1224a:	4a43      	ldr	r2, [pc, #268]	; (12358 <nrfx_gpiote_input_configure+0x15c>)
   1224c:	f104 0108 	add.w	r1, r4, #8
   12250:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   12254:	f023 0302 	bic.w	r3, r3, #2
   12258:	b29b      	uxth	r3, r3
   1225a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1225e:	f043 0301 	orr.w	r3, r3, #1
   12262:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   12266:	b1bd      	cbz	r5, 12298 <nrfx_gpiote_input_configure+0x9c>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   12268:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1226a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   1226e:	4620      	mov	r0, r4
   12270:	f7ff fdc6 	bl	11e00 <pin_is_output>
   12274:	b1f8      	cbz	r0, 122b6 <nrfx_gpiote_input_configure+0xba>
            if (use_evt)
   12276:	f1b8 0f00 	cmp.w	r8, #0
   1227a:	d166      	bne.n	1234a <nrfx_gpiote_input_configure+0x14e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1227c:	4a36      	ldr	r2, [pc, #216]	; (12358 <nrfx_gpiote_input_configure+0x15c>)
   1227e:	f104 0108 	add.w	r1, r4, #8
   12282:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   12286:	f023 031c 	bic.w	r3, r3, #28
   1228a:	b29b      	uxth	r3, r3
   1228c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   12290:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   12294:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   12298:	2e00      	cmp	r6, #0
   1229a:	d05a      	beq.n	12352 <nrfx_gpiote_input_configure+0x156>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1229c:	6872      	ldr	r2, [r6, #4]
   1229e:	6831      	ldr	r1, [r6, #0]
   122a0:	4620      	mov	r0, r4
   122a2:	f7ff fe53 	bl	11f4c <pin_handler_set>
}
   122a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        case 1: return NRF_P1;
   122aa:	482c      	ldr	r0, [pc, #176]	; (1235c <nrfx_gpiote_input_configure+0x160>)
   122ac:	e7b9      	b.n	12222 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   122ae:	2100      	movs	r1, #0
   122b0:	e7be      	b.n	12230 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   122b2:	2100      	movs	r1, #0
   122b4:	e7c4      	b.n	12240 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   122b6:	4a28      	ldr	r2, [pc, #160]	; (12358 <nrfx_gpiote_input_configure+0x15c>)
   122b8:	f104 0108 	add.w	r1, r4, #8
   122bc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   122c0:	f023 0320 	bic.w	r3, r3, #32
   122c4:	04db      	lsls	r3, r3, #19
   122c6:	0cdb      	lsrs	r3, r3, #19
   122c8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   122cc:	f1b8 0f00 	cmp.w	r8, #0
   122d0:	d0d4      	beq.n	1227c <nrfx_gpiote_input_configure+0x80>
                if (!edge)
   122d2:	2f03      	cmp	r7, #3
   122d4:	d83b      	bhi.n	1234e <nrfx_gpiote_input_configure+0x152>
                uint8_t ch = *p_trigger_config->p_in_channel;
   122d6:	686b      	ldr	r3, [r5, #4]
   122d8:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   122da:	b937      	cbnz	r7, 122ea <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   122dc:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   122e0:	4b1f      	ldr	r3, [pc, #124]	; (12360 <nrfx_gpiote_input_configure+0x164>)
   122e2:	2200      	movs	r2, #0
   122e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   122e8:	e7c8      	b.n	1227c <nrfx_gpiote_input_configure+0x80>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   122ea:	4638      	mov	r0, r7
   122ec:	f00b faea 	bl	1d8c4 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   122f0:	4b1b      	ldr	r3, [pc, #108]	; (12360 <nrfx_gpiote_input_configure+0x164>)
   122f2:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   122f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   122fa:	f021 0103 	bic.w	r1, r1, #3
   122fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   12302:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   12306:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1230a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12312:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   12316:	0221      	lsls	r1, r4, #8
   12318:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1231c:	0400      	lsls	r0, r0, #16
   1231e:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12322:	4301      	orrs	r1, r0
   12324:	ea4c 0101 	orr.w	r1, ip, r1
   12328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1232c:	036b      	lsls	r3, r5, #13
   1232e:	b29b      	uxth	r3, r3
   12330:	4a09      	ldr	r2, [pc, #36]	; (12358 <nrfx_gpiote_input_configure+0x15c>)
   12332:	f104 0108 	add.w	r1, r4, #8
   12336:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
   1233a:	4303      	orrs	r3, r0
   1233c:	f043 0320 	orr.w	r3, r3, #32
   12340:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   12344:	e79a      	b.n	1227c <nrfx_gpiote_input_configure+0x80>
            return NRFX_ERROR_INVALID_PARAM;
   12346:	4807      	ldr	r0, [pc, #28]	; (12364 <nrfx_gpiote_input_configure+0x168>)
   12348:	e7ad      	b.n	122a6 <nrfx_gpiote_input_configure+0xaa>
                return NRFX_ERROR_INVALID_PARAM;
   1234a:	4806      	ldr	r0, [pc, #24]	; (12364 <nrfx_gpiote_input_configure+0x168>)
   1234c:	e7ab      	b.n	122a6 <nrfx_gpiote_input_configure+0xaa>
                    return NRFX_ERROR_INVALID_PARAM;
   1234e:	4805      	ldr	r0, [pc, #20]	; (12364 <nrfx_gpiote_input_configure+0x168>)
   12350:	e7a9      	b.n	122a6 <nrfx_gpiote_input_configure+0xaa>
        err = NRFX_SUCCESS;
   12352:	4805      	ldr	r0, [pc, #20]	; (12368 <nrfx_gpiote_input_configure+0x16c>)
   12354:	e7a7      	b.n	122a6 <nrfx_gpiote_input_configure+0xaa>
   12356:	bf00      	nop
   12358:	200008cc 	.word	0x200008cc
   1235c:	50000300 	.word	0x50000300
   12360:	40006000 	.word	0x40006000
   12364:	0bad0004 	.word	0x0bad0004
   12368:	0bad0000 	.word	0x0bad0000

0001236c <nrfx_gpiote_output_configure>:
{
   1236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1236e:	4604      	mov	r4, r0
   12370:	4615      	mov	r5, r2
    if (p_config)
   12372:	2900      	cmp	r1, #0
   12374:	d055      	beq.n	12422 <nrfx_gpiote_output_configure+0xb6>
   12376:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   12378:	f00b fa9c 	bl	1d8b4 <pin_is_input>
   1237c:	b128      	cbz	r0, 1238a <nrfx_gpiote_output_configure+0x1e>
   1237e:	4620      	mov	r0, r4
   12380:	f7ff fd28 	bl	11dd4 <pin_in_use_by_te>
   12384:	2800      	cmp	r0, #0
   12386:	f040 80a2 	bne.w	124ce <nrfx_gpiote_output_configure+0x162>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1238a:	4620      	mov	r0, r4
   1238c:	f7ff fd2c 	bl	11de8 <pin_has_trigger>
   12390:	b118      	cbz	r0, 1239a <nrfx_gpiote_output_configure+0x2e>
   12392:	7873      	ldrb	r3, [r6, #1]
   12394:	2b01      	cmp	r3, #1
   12396:	f000 809c 	beq.w	124d2 <nrfx_gpiote_output_configure+0x166>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1239a:	f106 0c01 	add.w	ip, r6, #1
   1239e:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   123a0:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   123a4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   123a6:	2b01      	cmp	r3, #1
   123a8:	d057      	beq.n	1245a <nrfx_gpiote_output_configure+0xee>
        case 0: return NRF_P0;
   123aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   123ae:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   123b2:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   123b6:	f1bc 0f00 	cmp.w	ip, #0
   123ba:	d050      	beq.n	1245e <nrfx_gpiote_output_configure+0xf2>
   123bc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   123be:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   123c2:	2f00      	cmp	r7, #0
   123c4:	d04d      	beq.n	12462 <nrfx_gpiote_output_configure+0xf6>
   123c6:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   123ca:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   123ce:	2e00      	cmp	r6, #0
   123d0:	d04a      	beq.n	12468 <nrfx_gpiote_output_configure+0xfc>
   123d2:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   123d6:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   123da:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   123de:	f1bc 0f00 	cmp.w	ip, #0
   123e2:	d044      	beq.n	1246e <nrfx_gpiote_output_configure+0x102>
   123e4:	7873      	ldrb	r3, [r6, #1]
   123e6:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   123e8:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   123ec:	2f00      	cmp	r7, #0
   123ee:	d040      	beq.n	12472 <nrfx_gpiote_output_configure+0x106>
   123f0:	f896 c002 	ldrb.w	ip, [r6, #2]
   123f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   123f8:	ea43 030c 	orr.w	r3, r3, ip
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   123fc:	2e00      	cmp	r6, #0
   123fe:	d03b      	beq.n	12478 <nrfx_gpiote_output_configure+0x10c>
   12400:	7836      	ldrb	r6, [r6, #0]
   12402:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12404:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   12406:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   12408:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1240c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   12410:	4a33      	ldr	r2, [pc, #204]	; (124e0 <nrfx_gpiote_output_configure+0x174>)
   12412:	f104 0108 	add.w	r1, r4, #8
   12416:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1241a:	f043 0303 	orr.w	r3, r3, #3
   1241e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   12422:	2d00      	cmp	r5, #0
   12424:	d057      	beq.n	124d6 <nrfx_gpiote_output_configure+0x16a>
        if (pin_is_input(pin))
   12426:	4620      	mov	r0, r4
   12428:	f00b fa44 	bl	1d8b4 <pin_is_input>
   1242c:	2800      	cmp	r0, #0
   1242e:	d154      	bne.n	124da <nrfx_gpiote_output_configure+0x16e>
        uint32_t ch = p_task_config->task_ch;
   12430:	782b      	ldrb	r3, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   12432:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   12436:	4a2b      	ldr	r2, [pc, #172]	; (124e4 <nrfx_gpiote_output_configure+0x178>)
   12438:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1243c:	4928      	ldr	r1, [pc, #160]	; (124e0 <nrfx_gpiote_output_configure+0x174>)
   1243e:	f104 0008 	add.w	r0, r4, #8
   12442:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   12446:	f022 0220 	bic.w	r2, r2, #32
   1244a:	04d2      	lsls	r2, r2, #19
   1244c:	0cd2      	lsrs	r2, r2, #19
   1244e:	f821 2010 	strh.w	r2, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   12452:	786a      	ldrb	r2, [r5, #1]
   12454:	b992      	cbnz	r2, 1247c <nrfx_gpiote_output_configure+0x110>
    return NRFX_SUCCESS;
   12456:	4824      	ldr	r0, [pc, #144]	; (124e8 <nrfx_gpiote_output_configure+0x17c>)
}
   12458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   1245a:	4924      	ldr	r1, [pc, #144]	; (124ec <nrfx_gpiote_output_configure+0x180>)
   1245c:	e7a7      	b.n	123ae <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1245e:	2300      	movs	r3, #0
   12460:	e7ad      	b.n	123be <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   12462:	f04f 0e00 	mov.w	lr, #0
   12466:	e7b0      	b.n	123ca <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   12468:	f04f 0e00 	mov.w	lr, #0
   1246c:	e7b3      	b.n	123d6 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1246e:	2300      	movs	r3, #0
   12470:	e7ba      	b.n	123e8 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   12472:	f04f 0c00 	mov.w	ip, #0
   12476:	e7bf      	b.n	123f8 <nrfx_gpiote_output_configure+0x8c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   12478:	2600      	movs	r6, #0
   1247a:	e7c3      	b.n	12404 <nrfx_gpiote_output_configure+0x98>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1247c:	78af      	ldrb	r7, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1247e:	4819      	ldr	r0, [pc, #100]	; (124e4 <nrfx_gpiote_output_configure+0x178>)
   12480:	f503 75a2 	add.w	r5, r3, #324	; 0x144
   12484:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
   12488:	f421 1199 	bic.w	r1, r1, #1253376	; 0x132000
   1248c:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
   12490:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   12494:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
   12498:	0221      	lsls	r1, r4, #8
   1249a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1249e:	0412      	lsls	r2, r2, #16
   124a0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   124a4:	430a      	orrs	r2, r1
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   124a6:	0539      	lsls	r1, r7, #20
   124a8:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   124ac:	430a      	orrs	r2, r1
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   124ae:	4332      	orrs	r2, r6
   124b0:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   124b4:	035b      	lsls	r3, r3, #13
   124b6:	b29b      	uxth	r3, r3
   124b8:	4a09      	ldr	r2, [pc, #36]	; (124e0 <nrfx_gpiote_output_configure+0x174>)
   124ba:	3408      	adds	r4, #8
   124bc:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
   124c0:	430b      	orrs	r3, r1
   124c2:	f043 0320 	orr.w	r3, r3, #32
   124c6:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   124ca:	4807      	ldr	r0, [pc, #28]	; (124e8 <nrfx_gpiote_output_configure+0x17c>)
   124cc:	e7c4      	b.n	12458 <nrfx_gpiote_output_configure+0xec>
   124ce:	4808      	ldr	r0, [pc, #32]	; (124f0 <nrfx_gpiote_output_configure+0x184>)
   124d0:	e7c2      	b.n	12458 <nrfx_gpiote_output_configure+0xec>
   124d2:	4807      	ldr	r0, [pc, #28]	; (124f0 <nrfx_gpiote_output_configure+0x184>)
   124d4:	e7c0      	b.n	12458 <nrfx_gpiote_output_configure+0xec>
   124d6:	4804      	ldr	r0, [pc, #16]	; (124e8 <nrfx_gpiote_output_configure+0x17c>)
   124d8:	e7be      	b.n	12458 <nrfx_gpiote_output_configure+0xec>
            return NRFX_ERROR_INVALID_PARAM;
   124da:	4805      	ldr	r0, [pc, #20]	; (124f0 <nrfx_gpiote_output_configure+0x184>)
   124dc:	e7bc      	b.n	12458 <nrfx_gpiote_output_configure+0xec>
   124de:	bf00      	nop
   124e0:	200008cc 	.word	0x200008cc
   124e4:	40006000 	.word	0x40006000
   124e8:	0bad0000 	.word	0x0bad0000
   124ec:	50000300 	.word	0x50000300
   124f0:	0bad0004 	.word	0x0bad0004

000124f4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   124f4:	4b01      	ldr	r3, [pc, #4]	; (124fc <nrfx_gpiote_global_callback_set+0x8>)
   124f6:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   124f8:	60d9      	str	r1, [r3, #12]
}
   124fa:	4770      	bx	lr
   124fc:	200008cc 	.word	0x200008cc

00012500 <nrfx_gpiote_channel_get>:
{
   12500:	b538      	push	{r3, r4, r5, lr}
   12502:	4604      	mov	r4, r0
   12504:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   12506:	f7ff fc65 	bl	11dd4 <pin_in_use_by_te>
   1250a:	b140      	cbz	r0, 1251e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1250c:	f104 0008 	add.w	r0, r4, #8
   12510:	4b04      	ldr	r3, [pc, #16]	; (12524 <nrfx_gpiote_channel_get+0x24>)
   12512:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   12516:	0b5b      	lsrs	r3, r3, #13
   12518:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1251a:	4803      	ldr	r0, [pc, #12]	; (12528 <nrfx_gpiote_channel_get+0x28>)
}
   1251c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1251e:	4803      	ldr	r0, [pc, #12]	; (1252c <nrfx_gpiote_channel_get+0x2c>)
   12520:	e7fc      	b.n	1251c <nrfx_gpiote_channel_get+0x1c>
   12522:	bf00      	nop
   12524:	200008cc 	.word	0x200008cc
   12528:	0bad0000 	.word	0x0bad0000
   1252c:	0bad0004 	.word	0x0bad0004

00012530 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   12530:	4b10      	ldr	r3, [pc, #64]	; (12574 <nrfx_gpiote_init+0x44>)
   12532:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   12536:	b10b      	cbz	r3, 1253c <nrfx_gpiote_init+0xc>
        return err_code;
   12538:	480f      	ldr	r0, [pc, #60]	; (12578 <nrfx_gpiote_init+0x48>)
}
   1253a:	4770      	bx	lr
{
   1253c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1253e:	4c0d      	ldr	r4, [pc, #52]	; (12574 <nrfx_gpiote_init+0x44>)
   12540:	2254      	movs	r2, #84	; 0x54
   12542:	2100      	movs	r1, #0
   12544:	f104 0010 	add.w	r0, r4, #16
   12548:	f002 fa54 	bl	149f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1254c:	2006      	movs	r0, #6
   1254e:	f7f2 f9db 	bl	4908 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12552:	4b0a      	ldr	r3, [pc, #40]	; (1257c <nrfx_gpiote_init+0x4c>)
   12554:	2200      	movs	r2, #0
   12556:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1255a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1255e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   12562:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   12566:	2301      	movs	r3, #1
   12568:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1256c:	66a3      	str	r3, [r4, #104]	; 0x68
    return err_code;
   1256e:	4804      	ldr	r0, [pc, #16]	; (12580 <nrfx_gpiote_init+0x50>)
}
   12570:	bd10      	pop	{r4, pc}
   12572:	bf00      	nop
   12574:	200008cc 	.word	0x200008cc
   12578:	0bad0005 	.word	0x0bad0005
   1257c:	40006000 	.word	0x40006000
   12580:	0bad0000 	.word	0x0bad0000

00012584 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   12584:	4b03      	ldr	r3, [pc, #12]	; (12594 <nrfx_gpiote_is_init+0x10>)
   12586:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1258a:	3800      	subs	r0, #0
   1258c:	bf18      	it	ne
   1258e:	2001      	movne	r0, #1
   12590:	4770      	bx	lr
   12592:	bf00      	nop
   12594:	200008cc 	.word	0x200008cc

00012598 <nrfx_gpiote_channel_free>:
{
   12598:	b508      	push	{r3, lr}
   1259a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1259c:	4801      	ldr	r0, [pc, #4]	; (125a4 <nrfx_gpiote_channel_free+0xc>)
   1259e:	f7ff fba1 	bl	11ce4 <nrfx_flag32_free>
}
   125a2:	bd08      	pop	{r3, pc}
   125a4:	20000930 	.word	0x20000930

000125a8 <nrfx_gpiote_channel_alloc>:
{
   125a8:	b508      	push	{r3, lr}
   125aa:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   125ac:	4801      	ldr	r0, [pc, #4]	; (125b4 <nrfx_gpiote_channel_alloc+0xc>)
   125ae:	f7ff fb71 	bl	11c94 <nrfx_flag32_alloc>
}
   125b2:	bd08      	pop	{r3, pc}
   125b4:	20000930 	.word	0x20000930

000125b8 <nrfx_gpiote_trigger_enable>:
{
   125b8:	b538      	push	{r3, r4, r5, lr}
   125ba:	4604      	mov	r4, r0
   125bc:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   125be:	f7ff fc09 	bl	11dd4 <pin_in_use_by_te>
   125c2:	b308      	cbz	r0, 12608 <nrfx_gpiote_trigger_enable+0x50>
   125c4:	4620      	mov	r0, r4
   125c6:	f00b f975 	bl	1d8b4 <pin_is_input>
   125ca:	b1e8      	cbz	r0, 12608 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
   125cc:	4620      	mov	r0, r4
   125ce:	f7ff fc21 	bl	11e14 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   125d2:	0083      	lsls	r3, r0, #2
   125d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   125d8:	b29b      	uxth	r3, r3
   125da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   125de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   125e2:	2200      	movs	r2, #0
   125e4:	601a      	str	r2, [r3, #0]
   125e6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   125e8:	4a22      	ldr	r2, [pc, #136]	; (12674 <nrfx_gpiote_trigger_enable+0xbc>)
   125ea:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   125ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   125f2:	f043 0301 	orr.w	r3, r3, #1
   125f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   125fa:	b39d      	cbz	r5, 12664 <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   125fc:	2301      	movs	r3, #1
   125fe:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   12602:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   12606:	e02d      	b.n	12664 <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   12608:	f104 0308 	add.w	r3, r4, #8
   1260c:	4a1a      	ldr	r2, [pc, #104]	; (12678 <nrfx_gpiote_trigger_enable+0xc0>)
   1260e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   12612:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   12616:	2b04      	cmp	r3, #4
   12618:	d012      	beq.n	12640 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1261a:	2b05      	cmp	r3, #5
   1261c:	d023      	beq.n	12666 <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
   1261e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   12622:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12624:	2b01      	cmp	r3, #1
   12626:	d009      	beq.n	1263c <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
   12628:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   1262c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   12630:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   12632:	f013 0f01 	tst.w	r3, #1
   12636:	d018      	beq.n	1266a <nrfx_gpiote_trigger_enable+0xb2>
   12638:	2003      	movs	r0, #3
   1263a:	e002      	b.n	12642 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1263c:	4b0f      	ldr	r3, [pc, #60]	; (1267c <nrfx_gpiote_trigger_enable+0xc4>)
   1263e:	e7f5      	b.n	1262c <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   12640:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   12642:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   12646:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12648:	2c01      	cmp	r4, #1
   1264a:	d010      	beq.n	1266e <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
   1264c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   12650:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   12654:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   12658:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1265c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   12660:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   12664:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   12666:	2002      	movs	r0, #2
   12668:	e7eb      	b.n	12642 <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1266a:	2002      	movs	r0, #2
   1266c:	e7e9      	b.n	12642 <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
   1266e:	4903      	ldr	r1, [pc, #12]	; (1267c <nrfx_gpiote_trigger_enable+0xc4>)
   12670:	e7ee      	b.n	12650 <nrfx_gpiote_trigger_enable+0x98>
   12672:	bf00      	nop
   12674:	40006000 	.word	0x40006000
   12678:	200008cc 	.word	0x200008cc
   1267c:	50000300 	.word	0x50000300

00012680 <nrfx_gpiote_trigger_disable>:
{
   12680:	b510      	push	{r4, lr}
   12682:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   12684:	f7ff fba6 	bl	11dd4 <pin_in_use_by_te>
   12688:	b1a0      	cbz	r0, 126b4 <nrfx_gpiote_trigger_disable+0x34>
   1268a:	4620      	mov	r0, r4
   1268c:	f00b f912 	bl	1d8b4 <pin_is_input>
   12690:	b180      	cbz	r0, 126b4 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   12692:	4620      	mov	r0, r4
   12694:	f7ff fbbe 	bl	11e14 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   12698:	2201      	movs	r2, #1
   1269a:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   1269c:	4b0e      	ldr	r3, [pc, #56]	; (126d8 <nrfx_gpiote_trigger_disable+0x58>)
   1269e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   126a2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   126a6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   126aa:	f022 0203 	bic.w	r2, r2, #3
   126ae:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   126b2:	e00e      	b.n	126d2 <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   126b4:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   126b8:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   126ba:	2c01      	cmp	r4, #1
   126bc:	d00a      	beq.n	126d4 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   126be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   126c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   126c6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   126ca:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   126ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   126d2:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   126d4:	4901      	ldr	r1, [pc, #4]	; (126dc <nrfx_gpiote_trigger_disable+0x5c>)
   126d6:	e7f4      	b.n	126c2 <nrfx_gpiote_trigger_disable+0x42>
   126d8:	40006000 	.word	0x40006000
   126dc:	50000300 	.word	0x50000300

000126e0 <nrfx_gpiote_pin_uninit>:
{
   126e0:	b510      	push	{r4, lr}
   126e2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   126e4:	f7ff fb6c 	bl	11dc0 <pin_in_use>
   126e8:	b908      	cbnz	r0, 126ee <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   126ea:	480c      	ldr	r0, [pc, #48]	; (1271c <nrfx_gpiote_pin_uninit+0x3c>)
}
   126ec:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   126ee:	4620      	mov	r0, r4
   126f0:	f7ff ffc6 	bl	12680 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   126f4:	4620      	mov	r0, r4
   126f6:	f7ff fc0d 	bl	11f14 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   126fa:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   126fe:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   12700:	2c01      	cmp	r4, #1
   12702:	d008      	beq.n	12716 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   12704:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   12708:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1270c:	2102      	movs	r1, #2
   1270e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   12712:	4803      	ldr	r0, [pc, #12]	; (12720 <nrfx_gpiote_pin_uninit+0x40>)
   12714:	e7ea      	b.n	126ec <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   12716:	4a03      	ldr	r2, [pc, #12]	; (12724 <nrfx_gpiote_pin_uninit+0x44>)
   12718:	e7f6      	b.n	12708 <nrfx_gpiote_pin_uninit+0x28>
   1271a:	bf00      	nop
   1271c:	0bad0004 	.word	0x0bad0004
   12720:	0bad0000 	.word	0x0bad0000
   12724:	50000300 	.word	0x50000300

00012728 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   12728:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1272a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   1272c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   12730:	2100      	movs	r1, #0
    uint32_t status = 0;
   12732:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   12734:	e003      	b.n	1273e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   12736:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   12738:	3304      	adds	r3, #4
   1273a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1273c:	3101      	adds	r1, #1
   1273e:	2907      	cmp	r1, #7
   12740:	d814      	bhi.n	1276c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12742:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   12746:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   1274a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1274c:	2a00      	cmp	r2, #0
   1274e:	d0f2      	beq.n	12736 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   12750:	4a0c      	ldr	r2, [pc, #48]	; (12784 <nrfx_gpiote_irq_handler+0x5c>)
   12752:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   12756:	4210      	tst	r0, r2
   12758:	d0ed      	beq.n	12736 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   1275a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   1275e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   12762:	2500      	movs	r5, #0
   12764:	6015      	str	r5, [r2, #0]
   12766:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   12768:	4304      	orrs	r4, r0
   1276a:	e7e4      	b.n	12736 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1276c:	4b05      	ldr	r3, [pc, #20]	; (12784 <nrfx_gpiote_irq_handler+0x5c>)
   1276e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   12772:	b91b      	cbnz	r3, 1277c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   12774:	4620      	mov	r0, r4
   12776:	f7ff fc1f 	bl	11fb8 <gpiote_evt_handle>
}
   1277a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   1277c:	f7ff fcd4 	bl	12128 <port_event_handle>
   12780:	e7f8      	b.n	12774 <nrfx_gpiote_irq_handler+0x4c>
   12782:	bf00      	nop
   12784:	40006000 	.word	0x40006000

00012788 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   12788:	b508      	push	{r3, lr}
   1278a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1278c:	4801      	ldr	r0, [pc, #4]	; (12794 <nrfx_ppi_channel_alloc+0xc>)
   1278e:	f7ff fa81 	bl	11c94 <nrfx_flag32_alloc>
}
   12792:	bd08      	pop	{r3, pc}
   12794:	2000093c 	.word	0x2000093c

00012798 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   12798:	4b15      	ldr	r3, [pc, #84]	; (127f0 <_DoInit+0x58>)
   1279a:	2203      	movs	r2, #3
   1279c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1279e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   127a0:	4914      	ldr	r1, [pc, #80]	; (127f4 <_DoInit+0x5c>)
   127a2:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   127a4:	4a14      	ldr	r2, [pc, #80]	; (127f8 <_DoInit+0x60>)
   127a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   127a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   127ac:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   127ae:	2200      	movs	r2, #0
   127b0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   127b2:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   127b4:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   127b6:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   127b8:	4910      	ldr	r1, [pc, #64]	; (127fc <_DoInit+0x64>)
   127ba:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   127bc:	2110      	movs	r1, #16
   127be:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   127c0:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   127c2:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   127c4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   127c6:	4a0e      	ldr	r2, [pc, #56]	; (12800 <_DoInit+0x68>)
   127c8:	6810      	ldr	r0, [r2, #0]
   127ca:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   127ce:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
   127d2:	4a0c      	ldr	r2, [pc, #48]	; (12804 <_DoInit+0x6c>)
   127d4:	e892 0003 	ldmia.w	r2, {r0, r1}
   127d8:	6018      	str	r0, [r3, #0]
   127da:	8099      	strh	r1, [r3, #4]
   127dc:	0c09      	lsrs	r1, r1, #16
   127de:	7199      	strb	r1, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   127e0:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
   127e4:	2220      	movs	r2, #32
   127e6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
   127e8:	f3bf 8f5f 	dmb	sy
}
   127ec:	4770      	bx	lr
   127ee:	bf00      	nop
   127f0:	20008d58 	.word	0x20008d58
   127f4:	0001f910 	.word	0x0001f910
   127f8:	20008e10 	.word	0x20008e10
   127fc:	20008e00 	.word	0x20008e00
   12800:	0001f91c 	.word	0x0001f91c
   12804:	0001f920 	.word	0x0001f920

00012808 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   12808:	4b03      	ldr	r3, [pc, #12]	; (12818 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1280a:	e000      	b.n	1280e <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   1280c:	3318      	adds	r3, #24
	while (dev < __device_end) {
   1280e:	4a03      	ldr	r2, [pc, #12]	; (1281c <z_device_state_init+0x14>)
   12810:	4293      	cmp	r3, r2
   12812:	d3fb      	bcc.n	1280c <z_device_state_init+0x4>
	}
}
   12814:	4770      	bx	lr
   12816:	bf00      	nop
   12818:	0001e458 	.word	0x0001e458
   1281c:	0001e4e8 	.word	0x0001e4e8

00012820 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   12820:	b570      	push	{r4, r5, r6, lr}
   12822:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   12824:	4b11      	ldr	r3, [pc, #68]	; (1286c <z_sys_init_run_level+0x4c>)
   12826:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1282a:	e009      	b.n	12840 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1282c:	4240      	negs	r0, r0
   1282e:	e017      	b.n	12860 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   12830:	68eb      	ldr	r3, [r5, #12]
   12832:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   12834:	68ea      	ldr	r2, [r5, #12]
   12836:	7853      	ldrb	r3, [r2, #1]
   12838:	f043 0301 	orr.w	r3, r3, #1
   1283c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1283e:	3408      	adds	r4, #8
   12840:	1c73      	adds	r3, r6, #1
   12842:	4a0a      	ldr	r2, [pc, #40]	; (1286c <z_sys_init_run_level+0x4c>)
   12844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   12848:	42a3      	cmp	r3, r4
   1284a:	d90d      	bls.n	12868 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1284c:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1284e:	6823      	ldr	r3, [r4, #0]
   12850:	4628      	mov	r0, r5
   12852:	4798      	blx	r3
		if (dev != NULL) {
   12854:	2d00      	cmp	r5, #0
   12856:	d0f2      	beq.n	1283e <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   12858:	2800      	cmp	r0, #0
   1285a:	d0eb      	beq.n	12834 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1285c:	2800      	cmp	r0, #0
   1285e:	dbe5      	blt.n	1282c <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   12860:	28ff      	cmp	r0, #255	; 0xff
   12862:	dde5      	ble.n	12830 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   12864:	20ff      	movs	r0, #255	; 0xff
   12866:	e7e3      	b.n	12830 <z_sys_init_run_level+0x10>
		}
	}
}
   12868:	bd70      	pop	{r4, r5, r6, pc}
   1286a:	bf00      	nop
   1286c:	0001f928 	.word	0x0001f928

00012870 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   12870:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   12872:	4605      	mov	r5, r0
   12874:	b328      	cbz	r0, 128c2 <z_impl_device_get_binding+0x52>
   12876:	7803      	ldrb	r3, [r0, #0]
   12878:	b32b      	cbz	r3, 128c6 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1287a:	4c14      	ldr	r4, [pc, #80]	; (128cc <z_impl_device_get_binding+0x5c>)
   1287c:	e000      	b.n	12880 <z_impl_device_get_binding+0x10>
   1287e:	3418      	adds	r4, #24
   12880:	4b13      	ldr	r3, [pc, #76]	; (128d0 <z_impl_device_get_binding+0x60>)
   12882:	429c      	cmp	r4, r3
   12884:	d008      	beq.n	12898 <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   12886:	4620      	mov	r0, r4
   12888:	f00b f82b 	bl	1d8e2 <z_device_is_ready>
   1288c:	2800      	cmp	r0, #0
   1288e:	d0f6      	beq.n	1287e <z_impl_device_get_binding+0xe>
   12890:	6823      	ldr	r3, [r4, #0]
   12892:	42ab      	cmp	r3, r5
   12894:	d1f3      	bne.n	1287e <z_impl_device_get_binding+0xe>
   12896:	e012      	b.n	128be <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   12898:	4c0c      	ldr	r4, [pc, #48]	; (128cc <z_impl_device_get_binding+0x5c>)
   1289a:	e000      	b.n	1289e <z_impl_device_get_binding+0x2e>
   1289c:	3418      	adds	r4, #24
   1289e:	4b0c      	ldr	r3, [pc, #48]	; (128d0 <z_impl_device_get_binding+0x60>)
   128a0:	429c      	cmp	r4, r3
   128a2:	d00b      	beq.n	128bc <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   128a4:	4620      	mov	r0, r4
   128a6:	f00b f81c 	bl	1d8e2 <z_device_is_ready>
   128aa:	2800      	cmp	r0, #0
   128ac:	d0f6      	beq.n	1289c <z_impl_device_get_binding+0x2c>
   128ae:	6821      	ldr	r1, [r4, #0]
   128b0:	4628      	mov	r0, r5
   128b2:	f7ed fc99 	bl	1e8 <strcmp>
   128b6:	2800      	cmp	r0, #0
   128b8:	d1f0      	bne.n	1289c <z_impl_device_get_binding+0x2c>
   128ba:	e000      	b.n	128be <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   128bc:	2400      	movs	r4, #0
}
   128be:	4620      	mov	r0, r4
   128c0:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   128c2:	4604      	mov	r4, r0
   128c4:	e7fb      	b.n	128be <z_impl_device_get_binding+0x4e>
   128c6:	2400      	movs	r4, #0
   128c8:	e7f9      	b.n	128be <z_impl_device_get_binding+0x4e>
   128ca:	bf00      	nop
   128cc:	0001e458 	.word	0x0001e458
   128d0:	0001e4e8 	.word	0x0001e4e8

000128d4 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   128d4:	b510      	push	{r4, lr}
   128d6:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   128d8:	4c11      	ldr	r4, [pc, #68]	; (12920 <init_idle_thread+0x4c>)
   128da:	23b8      	movs	r3, #184	; 0xb8
   128dc:	fb03 4400 	mla	r4, r3, r0, r4
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   128e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   128e4:	4b0f      	ldr	r3, [pc, #60]	; (12924 <init_idle_thread+0x50>)
   128e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	z_setup_new_thread(thread, stack,
   128ea:	4a0f      	ldr	r2, [pc, #60]	; (12928 <init_idle_thread+0x54>)
   128ec:	9205      	str	r2, [sp, #20]
   128ee:	2201      	movs	r2, #1
   128f0:	9204      	str	r2, [sp, #16]
   128f2:	220f      	movs	r2, #15
   128f4:	9203      	str	r2, [sp, #12]
   128f6:	2200      	movs	r2, #0
   128f8:	9202      	str	r2, [sp, #8]
   128fa:	9201      	str	r2, [sp, #4]
   128fc:	9300      	str	r3, [sp, #0]
   128fe:	4b0b      	ldr	r3, [pc, #44]	; (1292c <init_idle_thread+0x58>)
   12900:	f44f 72a0 	mov.w	r2, #320	; 0x140
   12904:	490a      	ldr	r1, [pc, #40]	; (12930 <init_idle_thread+0x5c>)
   12906:	f44f 7cb0 	mov.w	ip, #352	; 0x160
   1290a:	fb0c 1100 	mla	r1, ip, r0, r1
   1290e:	4620      	mov	r0, r4
   12910:	f000 f928 	bl	12b64 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   12914:	7b63      	ldrb	r3, [r4, #13]
   12916:	f023 0304 	bic.w	r3, r3, #4
   1291a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1291c:	b006      	add	sp, #24
   1291e:	bd10      	pop	{r4, pc}
   12920:	20001298 	.word	0x20001298
   12924:	20009210 	.word	0x20009210
   12928:	0001f940 	.word	0x0001f940
   1292c:	00012cc1 	.word	0x00012cc1
   12930:	20009f80 	.word	0x20009f80

00012934 <bg_thread_main>:
{
   12934:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   12936:	4b0a      	ldr	r3, [pc, #40]	; (12960 <bg_thread_main+0x2c>)
   12938:	2201      	movs	r2, #1
   1293a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1293c:	2002      	movs	r0, #2
   1293e:	f7ff ff6f 	bl	12820 <z_sys_init_run_level>
	boot_banner();
   12942:	f001 fd2d 	bl	143a0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   12946:	2003      	movs	r0, #3
   12948:	f7ff ff6a 	bl	12820 <z_sys_init_run_level>
	z_init_static_threads();
   1294c:	f000 f96e 	bl	12c2c <z_init_static_threads>
	main();
   12950:	f7f1 f814 	bl	397c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   12954:	4a03      	ldr	r2, [pc, #12]	; (12964 <bg_thread_main+0x30>)
   12956:	7b13      	ldrb	r3, [r2, #12]
   12958:	f023 0301 	bic.w	r3, r3, #1
   1295c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1295e:	bd08      	pop	{r3, pc}
   12960:	200092a1 	.word	0x200092a1
   12964:	20001350 	.word	0x20001350

00012968 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   12968:	b508      	push	{r3, lr}
   1296a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1296c:	4a01      	ldr	r2, [pc, #4]	; (12974 <switch_to_main_thread+0xc>)
   1296e:	4802      	ldr	r0, [pc, #8]	; (12978 <switch_to_main_thread+0x10>)
   12970:	f7f2 f8e2 	bl	4b38 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   12974:	00012935 	.word	0x00012935
   12978:	20001350 	.word	0x20001350

0001297c <z_bss_zero>:
{
   1297c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1297e:	4803      	ldr	r0, [pc, #12]	; (1298c <z_bss_zero+0x10>)
   12980:	4a03      	ldr	r2, [pc, #12]	; (12990 <z_bss_zero+0x14>)
   12982:	1a12      	subs	r2, r2, r0
   12984:	2100      	movs	r1, #0
   12986:	f00a ffd3 	bl	1d930 <z_early_memset>
}
   1298a:	bd08      	pop	{r3, pc}
   1298c:	20001010 	.word	0x20001010
   12990:	200092a4 	.word	0x200092a4

00012994 <z_init_cpu>:
{
   12994:	b510      	push	{r4, lr}
   12996:	4604      	mov	r4, r0
	init_idle_thread(id);
   12998:	f7ff ff9c 	bl	128d4 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1299c:	490b      	ldr	r1, [pc, #44]	; (129cc <z_init_cpu+0x38>)
   1299e:	23b8      	movs	r3, #184	; 0xb8
   129a0:	fb03 1104 	mla	r1, r3, r4, r1
   129a4:	4a0a      	ldr	r2, [pc, #40]	; (129d0 <z_init_cpu+0x3c>)
   129a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   129aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   129ae:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   129b0:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   129b2:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   129b6:	4b07      	ldr	r3, [pc, #28]	; (129d4 <z_init_cpu+0x40>)
   129b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
   129bc:	f503 6302 	add.w	r3, r3, #2080	; 0x820
	_kernel.cpus[id].irq_stack =
   129c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   129c4:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   129c8:	6063      	str	r3, [r4, #4]
}
   129ca:	bd10      	pop	{r4, pc}
   129cc:	20001298 	.word	0x20001298
   129d0:	20009210 	.word	0x20009210
   129d4:	2000a0e0 	.word	0x2000a0e0

000129d8 <prepare_multithreading>:
{
   129d8:	b570      	push	{r4, r5, r6, lr}
   129da:	b086      	sub	sp, #24
	z_sched_init();
   129dc:	f000 ff82 	bl	138e4 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   129e0:	4d10      	ldr	r5, [pc, #64]	; (12a24 <prepare_multithreading+0x4c>)
   129e2:	4b11      	ldr	r3, [pc, #68]	; (12a28 <prepare_multithreading+0x50>)
   129e4:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   129e6:	4b11      	ldr	r3, [pc, #68]	; (12a2c <prepare_multithreading+0x54>)
   129e8:	9305      	str	r3, [sp, #20]
   129ea:	2301      	movs	r3, #1
   129ec:	9304      	str	r3, [sp, #16]
   129ee:	2400      	movs	r4, #0
   129f0:	9403      	str	r4, [sp, #12]
   129f2:	9402      	str	r4, [sp, #8]
   129f4:	9401      	str	r4, [sp, #4]
   129f6:	9400      	str	r4, [sp, #0]
   129f8:	4b0d      	ldr	r3, [pc, #52]	; (12a30 <prepare_multithreading+0x58>)
   129fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   129fe:	490d      	ldr	r1, [pc, #52]	; (12a34 <prepare_multithreading+0x5c>)
   12a00:	4628      	mov	r0, r5
   12a02:	f000 f8af 	bl	12b64 <z_setup_new_thread>
   12a06:	4606      	mov	r6, r0
   12a08:	7b6b      	ldrb	r3, [r5, #13]
   12a0a:	f023 0304 	bic.w	r3, r3, #4
   12a0e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   12a10:	4628      	mov	r0, r5
   12a12:	f00b fa7a 	bl	1df0a <z_ready_thread>
	z_init_cpu(0);
   12a16:	4620      	mov	r0, r4
   12a18:	f7ff ffbc 	bl	12994 <z_init_cpu>
}
   12a1c:	4630      	mov	r0, r6
   12a1e:	b006      	add	sp, #24
   12a20:	bd70      	pop	{r4, r5, r6, pc}
   12a22:	bf00      	nop
   12a24:	20001350 	.word	0x20001350
   12a28:	20009210 	.word	0x20009210
   12a2c:	0001f948 	.word	0x0001f948
   12a30:	00012935 	.word	0x00012935
   12a34:	20009b60 	.word	0x20009b60

00012a38 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   12a38:	b500      	push	{lr}
   12a3a:	b0af      	sub	sp, #188	; 0xbc
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   12a3c:	4b1d      	ldr	r3, [pc, #116]	; (12ab4 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   12a3e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   12a42:	4c1d      	ldr	r4, [pc, #116]	; (12ab8 <z_cstart+0x80>)
   12a44:	6963      	ldr	r3, [r4, #20]
   12a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   12a4a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12a4c:	23e0      	movs	r3, #224	; 0xe0
   12a4e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   12a52:	2500      	movs	r5, #0
   12a54:	77e5      	strb	r5, [r4, #31]
   12a56:	7625      	strb	r5, [r4, #24]
   12a58:	7665      	strb	r5, [r4, #25]
   12a5a:	76a5      	strb	r5, [r4, #26]
   12a5c:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   12a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   12a62:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   12a66:	6263      	str	r3, [r4, #36]	; 0x24
   12a68:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   12a6c:	f7f2 f9c4 	bl	4df8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   12a70:	f7f1 ff2c 	bl	48cc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   12a74:	f04f 33ff 	mov.w	r3, #4294967295
   12a78:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   12a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   12a7c:	f7f2 fad8 	bl	5030 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   12a80:	f7f2 fa68 	bl	4f54 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   12a84:	2401      	movs	r4, #1
   12a86:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   12a8a:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   12a8e:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   12a90:	9528      	str	r5, [sp, #160]	; 0xa0
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
   12a92:	952a      	str	r5, [sp, #168]	; 0xa8
#endif

	_current_cpu->current = dummy_thread;
   12a94:	4b09      	ldr	r3, [pc, #36]	; (12abc <z_cstart+0x84>)
   12a96:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   12a9a:	f7ff feb5 	bl	12808 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   12a9e:	4628      	mov	r0, r5
   12aa0:	f7ff febe 	bl	12820 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   12aa4:	4620      	mov	r0, r4
   12aa6:	f7ff febb 	bl	12820 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   12aaa:	f7ff ff95 	bl	129d8 <prepare_multithreading>
   12aae:	f7ff ff5b 	bl	12968 <switch_to_main_thread>
   12ab2:	bf00      	nop
   12ab4:	2000a900 	.word	0x2000a900
   12ab8:	e000ed00 	.word	0xe000ed00
   12abc:	20009210 	.word	0x20009210

00012ac0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   12ac0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12ac2:	4c06      	ldr	r4, [pc, #24]	; (12adc <statics_init+0x1c>)
   12ac4:	e005      	b.n	12ad2 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   12ac6:	68a2      	ldr	r2, [r4, #8]
   12ac8:	6861      	ldr	r1, [r4, #4]
   12aca:	4620      	mov	r0, r4
   12acc:	f00a ff38 	bl	1d940 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   12ad0:	3414      	adds	r4, #20
   12ad2:	4b03      	ldr	r3, [pc, #12]	; (12ae0 <statics_init+0x20>)
   12ad4:	429c      	cmp	r4, r3
   12ad6:	d3f6      	bcc.n	12ac6 <statics_init+0x6>
		}
	}
	return 0;
}
   12ad8:	2000      	movs	r0, #0
   12ada:	bd10      	pop	{r4, pc}
   12adc:	20000ee8 	.word	0x20000ee8
   12ae0:	20000ee8 	.word	0x20000ee8

00012ae4 <z_thread_monitor_exit>:
	__asm__ volatile(
   12ae4:	f04f 0320 	mov.w	r3, #32
   12ae8:	f3ef 8111 	mrs	r1, BASEPRI
   12aec:	f383 8812 	msr	BASEPRI_MAX, r3
   12af0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   12af4:	4b0a      	ldr	r3, [pc, #40]	; (12b20 <z_thread_monitor_exit+0x3c>)
   12af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12af8:	4283      	cmp	r3, r0
   12afa:	d104      	bne.n	12b06 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   12afc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   12afe:	4b08      	ldr	r3, [pc, #32]	; (12b20 <z_thread_monitor_exit+0x3c>)
   12b00:	629a      	str	r2, [r3, #40]	; 0x28
   12b02:	e007      	b.n	12b14 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   12b04:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   12b06:	b113      	cbz	r3, 12b0e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   12b08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   12b0a:	4282      	cmp	r2, r0
   12b0c:	d1fa      	bne.n	12b04 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   12b0e:	b10b      	cbz	r3, 12b14 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   12b10:	6f42      	ldr	r2, [r0, #116]	; 0x74
   12b12:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   12b14:	f381 8811 	msr	BASEPRI, r1
   12b18:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   12b1c:	4770      	bx	lr
   12b1e:	bf00      	nop
   12b20:	20009210 	.word	0x20009210

00012b24 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   12b24:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   12b26:	4604      	mov	r4, r0
   12b28:	b140      	cbz	r0, 12b3c <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12b2a:	221f      	movs	r2, #31
   12b2c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12b30:	f001 ffe4 	bl	14afc <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   12b34:	2000      	movs	r0, #0
   12b36:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   12b3a:	bd10      	pop	{r4, pc}
		thread = _current;
   12b3c:	4b01      	ldr	r3, [pc, #4]	; (12b44 <z_impl_k_thread_name_set+0x20>)
   12b3e:	689c      	ldr	r4, [r3, #8]
   12b40:	e7f3      	b.n	12b2a <z_impl_k_thread_name_set+0x6>
   12b42:	bf00      	nop
   12b44:	20009210 	.word	0x20009210

00012b48 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   12b48:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   12b4a:	ea53 0102 	orrs.w	r1, r3, r2
   12b4e:	d102      	bne.n	12b56 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   12b50:	f00a ff7c 	bl	1da4c <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   12b54:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   12b56:	4902      	ldr	r1, [pc, #8]	; (12b60 <schedule_new_thread+0x18>)
   12b58:	3018      	adds	r0, #24
   12b5a:	f001 f82f 	bl	13bbc <z_add_timeout>
   12b5e:	e7f9      	b.n	12b54 <schedule_new_thread+0xc>
   12b60:	0001df43 	.word	0x0001df43

00012b64 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   12b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b68:	b085      	sub	sp, #20
   12b6a:	4604      	mov	r4, r0
   12b6c:	460f      	mov	r7, r1
   12b6e:	4615      	mov	r5, r2
   12b70:	461e      	mov	r6, r3
   12b72:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12b76:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   12b7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   12b7e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   12b82:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   12b86:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   12b88:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   12b8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12b8c:	2204      	movs	r2, #4
   12b8e:	9911      	ldr	r1, [sp, #68]	; 0x44
   12b90:	f00a ff60 	bl	1da54 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   12b94:	462a      	mov	r2, r5
   12b96:	4639      	mov	r1, r7
   12b98:	4620      	mov	r0, r4
   12b9a:	f00a ff3f 	bl	1da1c <setup_thread_stack>
   12b9e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   12ba0:	f8cd 8008 	str.w	r8, [sp, #8]
   12ba4:	f8cd 9004 	str.w	r9, [sp, #4]
   12ba8:	f8cd a000 	str.w	sl, [sp]
   12bac:	4633      	mov	r3, r6
   12bae:	4602      	mov	r2, r0
   12bb0:	4639      	mov	r1, r7
   12bb2:	4620      	mov	r0, r4
   12bb4:	f7f1 ff76 	bl	4aa4 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   12bb8:	2300      	movs	r3, #0
   12bba:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   12bbc:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   12bbe:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   12bc2:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   12bc6:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   12bca:	f04f 0320 	mov.w	r3, #32
   12bce:	f3ef 8211 	mrs	r2, BASEPRI
   12bd2:	f383 8812 	msr	BASEPRI_MAX, r3
   12bd6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   12bda:	4b13      	ldr	r3, [pc, #76]	; (12c28 <z_setup_new_thread+0xc4>)
   12bdc:	6a99      	ldr	r1, [r3, #40]	; 0x28
   12bde:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   12be0:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   12be2:	f382 8811 	msr	BASEPRI, r2
   12be6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   12bea:	f1bb 0f00 	cmp.w	fp, #0
   12bee:	d013      	beq.n	12c18 <z_setup_new_thread+0xb4>
   12bf0:	221f      	movs	r2, #31
   12bf2:	4659      	mov	r1, fp
   12bf4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   12bf8:	f001 ff80 	bl	14afc <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   12bfc:	2300      	movs	r3, #0
   12bfe:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   12c02:	4b09      	ldr	r3, [pc, #36]	; (12c28 <z_setup_new_thread+0xc4>)
   12c04:	689b      	ldr	r3, [r3, #8]
   12c06:	b15b      	cbz	r3, 12c20 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   12c08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   12c0c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   12c10:	4628      	mov	r0, r5
   12c12:	b005      	add	sp, #20
   12c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   12c18:	2300      	movs	r3, #0
   12c1a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   12c1e:	e7f0      	b.n	12c02 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   12c20:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   12c24:	e7f4      	b.n	12c10 <z_setup_new_thread+0xac>
   12c26:	bf00      	nop
   12c28:	20009210 	.word	0x20009210

00012c2c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   12c2c:	b530      	push	{r4, r5, lr}
   12c2e:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   12c30:	4c21      	ldr	r4, [pc, #132]	; (12cb8 <z_init_static_threads+0x8c>)
   12c32:	e014      	b.n	12c5e <z_init_static_threads+0x32>
		z_setup_new_thread(
   12c34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   12c36:	9305      	str	r3, [sp, #20]
   12c38:	6a23      	ldr	r3, [r4, #32]
   12c3a:	9304      	str	r3, [sp, #16]
   12c3c:	69e3      	ldr	r3, [r4, #28]
   12c3e:	9303      	str	r3, [sp, #12]
   12c40:	69a3      	ldr	r3, [r4, #24]
   12c42:	9302      	str	r3, [sp, #8]
   12c44:	6963      	ldr	r3, [r4, #20]
   12c46:	9301      	str	r3, [sp, #4]
   12c48:	6923      	ldr	r3, [r4, #16]
   12c4a:	9300      	str	r3, [sp, #0]
   12c4c:	68e3      	ldr	r3, [r4, #12]
   12c4e:	68a2      	ldr	r2, [r4, #8]
   12c50:	6861      	ldr	r1, [r4, #4]
   12c52:	6820      	ldr	r0, [r4, #0]
   12c54:	f7ff ff86 	bl	12b64 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   12c58:	6823      	ldr	r3, [r4, #0]
   12c5a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   12c5c:	3430      	adds	r4, #48	; 0x30
   12c5e:	4b17      	ldr	r3, [pc, #92]	; (12cbc <z_init_static_threads+0x90>)
   12c60:	429c      	cmp	r4, r3
   12c62:	d3e7      	bcc.n	12c34 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   12c64:	f000 fba6 	bl	133b4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   12c68:	4c13      	ldr	r4, [pc, #76]	; (12cb8 <z_init_static_threads+0x8c>)
   12c6a:	e000      	b.n	12c6e <z_init_static_threads+0x42>
   12c6c:	3430      	adds	r4, #48	; 0x30
   12c6e:	4b13      	ldr	r3, [pc, #76]	; (12cbc <z_init_static_threads+0x90>)
   12c70:	429c      	cmp	r4, r3
   12c72:	d21c      	bcs.n	12cae <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   12c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12c76:	f1b0 3fff 	cmp.w	r0, #4294967295
   12c7a:	d0f7      	beq.n	12c6c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
   12c7c:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   12c7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   12c82:	17c1      	asrs	r1, r0, #31
   12c84:	03c9      	lsls	r1, r1, #15
   12c86:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   12c8a:	03c0      	lsls	r0, r0, #15
   12c8c:	f240 33e7 	movw	r3, #999	; 0x3e7
   12c90:	18c0      	adds	r0, r0, r3
   12c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12c96:	f04f 0300 	mov.w	r3, #0
   12c9a:	f141 0100 	adc.w	r1, r1, #0
   12c9e:	f7ee fa8b 	bl	11b8 <__aeabi_uldivmod>
   12ca2:	4602      	mov	r2, r0
   12ca4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   12ca6:	4628      	mov	r0, r5
   12ca8:	f7ff ff4e 	bl	12b48 <schedule_new_thread>
   12cac:	e7de      	b.n	12c6c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
   12cae:	f000 fda3 	bl	137f8 <k_sched_unlock>
}
   12cb2:	b007      	add	sp, #28
   12cb4:	bd30      	pop	{r4, r5, pc}
   12cb6:	bf00      	nop
   12cb8:	20000ee8 	.word	0x20000ee8
   12cbc:	20000ee8 	.word	0x20000ee8

00012cc0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   12cc0:	b508      	push	{r3, lr}
   12cc2:	e001      	b.n	12cc8 <idle+0x8>
	arch_cpu_idle();
   12cc4:	f7f1 fe08 	bl	48d8 <arch_cpu_idle>
	__asm__ volatile(
   12cc8:	f04f 0220 	mov.w	r2, #32
   12ccc:	f3ef 8311 	mrs	r3, BASEPRI
   12cd0:	f382 8812 	msr	BASEPRI_MAX, r2
   12cd4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   12cd8:	f00b fa62 	bl	1e1a0 <z_get_next_timeout_expiry>
   12cdc:	4b05      	ldr	r3, [pc, #20]	; (12cf4 <idle+0x34>)
   12cde:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   12ce0:	4b05      	ldr	r3, [pc, #20]	; (12cf8 <idle+0x38>)
   12ce2:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   12ce4:	2b00      	cmp	r3, #0
   12ce6:	d0ed      	beq.n	12cc4 <idle+0x4>
   12ce8:	f7f1 fcce 	bl	4688 <pm_system_suspend>
   12cec:	2800      	cmp	r0, #0
   12cee:	d1eb      	bne.n	12cc8 <idle+0x8>
   12cf0:	e7e8      	b.n	12cc4 <idle+0x4>
   12cf2:	bf00      	nop
   12cf4:	20009210 	.word	0x20009210
   12cf8:	200092a1 	.word	0x200092a1

00012cfc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   12cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12d00:	b083      	sub	sp, #12
   12d02:	4604      	mov	r4, r0
   12d04:	461d      	mov	r5, r3
   12d06:	f04f 0320 	mov.w	r3, #32
   12d0a:	f3ef 8711 	mrs	r7, BASEPRI
   12d0e:	f383 8812 	msr	BASEPRI_MAX, r3
   12d12:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   12d16:	68c1      	ldr	r1, [r0, #12]
   12d18:	b999      	cbnz	r1, 12d42 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   12d1a:	2900      	cmp	r1, #0
   12d1c:	d14f      	bne.n	12dbe <z_impl_k_mutex_lock+0xc2>
   12d1e:	4b3a      	ldr	r3, [pc, #232]	; (12e08 <z_impl_k_mutex_lock+0x10c>)
   12d20:	689b      	ldr	r3, [r3, #8]
   12d22:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   12d26:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   12d28:	3101      	adds	r1, #1
   12d2a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   12d2c:	4b36      	ldr	r3, [pc, #216]	; (12e08 <z_impl_k_mutex_lock+0x10c>)
   12d2e:	689b      	ldr	r3, [r3, #8]
   12d30:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   12d32:	f387 8811 	msr	BASEPRI, r7
   12d36:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   12d3a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   12d3c:	b003      	add	sp, #12
   12d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12d42:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   12d44:	6882      	ldr	r2, [r0, #8]
   12d46:	4b30      	ldr	r3, [pc, #192]	; (12e08 <z_impl_k_mutex_lock+0x10c>)
   12d48:	689b      	ldr	r3, [r3, #8]
   12d4a:	429a      	cmp	r2, r3
   12d4c:	d0e5      	beq.n	12d1a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   12d4e:	ea55 0106 	orrs.w	r1, r5, r6
   12d52:	bf0c      	ite	eq
   12d54:	f04f 0801 	moveq.w	r8, #1
   12d58:	f04f 0800 	movne.w	r8, #0
   12d5c:	d031      	beq.n	12dc2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   12d5e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   12d62:	4649      	mov	r1, r9
   12d64:	f993 000e 	ldrsb.w	r0, [r3, #14]
   12d68:	f00a fea7 	bl	1daba <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   12d6c:	4581      	cmp	r9, r0
   12d6e:	dc2f      	bgt.n	12dd0 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   12d70:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   12d74:	9600      	str	r6, [sp, #0]
   12d76:	9501      	str	r5, [sp, #4]
   12d78:	4622      	mov	r2, r4
   12d7a:	4639      	mov	r1, r7
   12d7c:	4823      	ldr	r0, [pc, #140]	; (12e0c <z_impl_k_mutex_lock+0x110>)
   12d7e:	f000 fc85 	bl	1368c <z_pend_curr>
	if (got_mutex == 0) {
   12d82:	2800      	cmp	r0, #0
   12d84:	d0da      	beq.n	12d3c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   12d86:	f04f 0320 	mov.w	r3, #32
   12d8a:	f3ef 8511 	mrs	r5, BASEPRI
   12d8e:	f383 8812 	msr	BASEPRI_MAX, r3
   12d92:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   12d96:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   12d98:	429c      	cmp	r4, r3
   12d9a:	d01f      	beq.n	12ddc <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12d9c:	b1f3      	cbz	r3, 12ddc <z_impl_k_mutex_lock+0xe0>
   12d9e:	6921      	ldr	r1, [r4, #16]
   12da0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   12da4:	f00a fe89 	bl	1daba <new_prio_for_inheritance>
   12da8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12daa:	4620      	mov	r0, r4
   12dac:	f00a fe90 	bl	1dad0 <adjust_owner_prio>
   12db0:	b9b0      	cbnz	r0, 12de0 <z_impl_k_mutex_lock+0xe4>
   12db2:	f1b9 0f00 	cmp.w	r9, #0
   12db6:	d015      	beq.n	12de4 <z_impl_k_mutex_lock+0xe8>
   12db8:	f04f 0801 	mov.w	r8, #1
   12dbc:	e012      	b.n	12de4 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   12dbe:	6923      	ldr	r3, [r4, #16]
   12dc0:	e7b1      	b.n	12d26 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   12dc2:	f387 8811 	msr	BASEPRI, r7
   12dc6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   12dca:	f06f 000f 	mvn.w	r0, #15
   12dce:	e7b5      	b.n	12d3c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   12dd0:	4601      	mov	r1, r0
   12dd2:	4620      	mov	r0, r4
   12dd4:	f00a fe7c 	bl	1dad0 <adjust_owner_prio>
   12dd8:	4681      	mov	r9, r0
   12dda:	e7cb      	b.n	12d74 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   12ddc:	6921      	ldr	r1, [r4, #16]
   12dde:	e7e4      	b.n	12daa <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   12de0:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   12de4:	f1b8 0f00 	cmp.w	r8, #0
   12de8:	d106      	bne.n	12df8 <z_impl_k_mutex_lock+0xfc>
   12dea:	f385 8811 	msr	BASEPRI, r5
   12dee:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   12df2:	f06f 000a 	mvn.w	r0, #10
   12df6:	e7a1      	b.n	12d3c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   12df8:	4629      	mov	r1, r5
   12dfa:	4804      	ldr	r0, [pc, #16]	; (12e0c <z_impl_k_mutex_lock+0x110>)
   12dfc:	f000 fabe 	bl	1337c <z_reschedule>
	return -EAGAIN;
   12e00:	f06f 000a 	mvn.w	r0, #10
   12e04:	e79a      	b.n	12d3c <z_impl_k_mutex_lock+0x40>
   12e06:	bf00      	nop
   12e08:	20009210 	.word	0x20009210
   12e0c:	2000923c 	.word	0x2000923c

00012e10 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   12e10:	6882      	ldr	r2, [r0, #8]
   12e12:	2a00      	cmp	r2, #0
   12e14:	d035      	beq.n	12e82 <z_impl_k_mutex_unlock+0x72>
{
   12e16:	b538      	push	{r3, r4, r5, lr}
   12e18:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   12e1a:	4b1d      	ldr	r3, [pc, #116]	; (12e90 <z_impl_k_mutex_unlock+0x80>)
   12e1c:	689b      	ldr	r3, [r3, #8]
   12e1e:	429a      	cmp	r2, r3
   12e20:	d132      	bne.n	12e88 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   12e22:	7bda      	ldrb	r2, [r3, #15]
   12e24:	3a01      	subs	r2, #1
   12e26:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   12e28:	68c3      	ldr	r3, [r0, #12]
   12e2a:	2b01      	cmp	r3, #1
   12e2c:	d905      	bls.n	12e3a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   12e2e:	3b01      	subs	r3, #1
   12e30:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   12e32:	f000 fce1 	bl	137f8 <k_sched_unlock>

	return 0;
   12e36:	2000      	movs	r0, #0
}
   12e38:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   12e3a:	f04f 0320 	mov.w	r3, #32
   12e3e:	f3ef 8511 	mrs	r5, BASEPRI
   12e42:	f383 8812 	msr	BASEPRI_MAX, r3
   12e46:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   12e4a:	6901      	ldr	r1, [r0, #16]
   12e4c:	f00a fe40 	bl	1dad0 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   12e50:	4620      	mov	r0, r4
   12e52:	f00b f8fa 	bl	1e04a <z_unpend_first_thread>
	mutex->owner = new_owner;
   12e56:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   12e58:	b160      	cbz	r0, 12e74 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   12e5a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   12e5e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   12e60:	2300      	movs	r3, #0
   12e62:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   12e66:	f00b f850 	bl	1df0a <z_ready_thread>
		z_reschedule(&lock, key);
   12e6a:	4629      	mov	r1, r5
   12e6c:	4809      	ldr	r0, [pc, #36]	; (12e94 <z_impl_k_mutex_unlock+0x84>)
   12e6e:	f000 fa85 	bl	1337c <z_reschedule>
   12e72:	e7de      	b.n	12e32 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   12e74:	2300      	movs	r3, #0
   12e76:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   12e78:	f385 8811 	msr	BASEPRI, r5
   12e7c:	f3bf 8f6f 	isb	sy
   12e80:	e7d7      	b.n	12e32 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   12e82:	f06f 0015 	mvn.w	r0, #21
}
   12e86:	4770      	bx	lr
		return -EPERM;
   12e88:	f04f 30ff 	mov.w	r0, #4294967295
   12e8c:	e7d4      	b.n	12e38 <z_impl_k_mutex_unlock+0x28>
   12e8e:	bf00      	nop
   12e90:	20009210 	.word	0x20009210
   12e94:	2000923c 	.word	0x2000923c

00012e98 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   12e98:	b510      	push	{r4, lr}
   12e9a:	b082      	sub	sp, #8
   12e9c:	4601      	mov	r1, r0
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   12e9e:	4684      	mov	ip, r0
	__asm__ volatile(
   12ea0:	f04f 0020 	mov.w	r0, #32
   12ea4:	f3ef 8411 	mrs	r4, BASEPRI
   12ea8:	f380 8812 	msr	BASEPRI_MAX, r0
   12eac:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   12eb0:	f85c 0b08 	ldr.w	r0, [ip], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   12eb4:	b188      	cbz	r0, 12eda <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   12eb6:	6803      	ldr	r3, [r0, #0]
   12eb8:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   12ebc:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   12ebe:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   12ec0:	4290      	cmp	r0, r2
   12ec2:	d008      	beq.n	12ed6 <z_impl_k_queue_get+0x3e>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   12ec4:	2101      	movs	r1, #1
   12ec6:	f00a fe8b 	bl	1dbe0 <z_queue_node_peek>
	__asm__ volatile(
   12eca:	f384 8811 	msr	BASEPRI, r4
   12ece:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   12ed2:	b002      	add	sp, #8
   12ed4:	bd10      	pop	{r4, pc}
	list->tail = node;
   12ed6:	604b      	str	r3, [r1, #4]
}
   12ed8:	e7f4      	b.n	12ec4 <z_impl_k_queue_get+0x2c>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12eda:	ea53 0102 	orrs.w	r1, r3, r2
   12ede:	d00b      	beq.n	12ef8 <z_impl_k_queue_get+0x60>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   12ee0:	9200      	str	r2, [sp, #0]
   12ee2:	9301      	str	r3, [sp, #4]
   12ee4:	4662      	mov	r2, ip
   12ee6:	4621      	mov	r1, r4
   12ee8:	4660      	mov	r0, ip
   12eea:	f000 fbcf 	bl	1368c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   12eee:	b948      	cbnz	r0, 12f04 <z_impl_k_queue_get+0x6c>
   12ef0:	4b05      	ldr	r3, [pc, #20]	; (12f08 <z_impl_k_queue_get+0x70>)
   12ef2:	689b      	ldr	r3, [r3, #8]
   12ef4:	6958      	ldr	r0, [r3, #20]
   12ef6:	e7ec      	b.n	12ed2 <z_impl_k_queue_get+0x3a>
   12ef8:	f384 8811 	msr	BASEPRI, r4
   12efc:	f3bf 8f6f 	isb	sy
		return NULL;
   12f00:	2000      	movs	r0, #0
   12f02:	e7e6      	b.n	12ed2 <z_impl_k_queue_get+0x3a>
	return (ret != 0) ? NULL : _current->base.swap_data;
   12f04:	2000      	movs	r0, #0
   12f06:	e7e4      	b.n	12ed2 <z_impl_k_queue_get+0x3a>
   12f08:	20009210 	.word	0x20009210

00012f0c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   12f0c:	b538      	push	{r3, r4, r5, lr}
   12f0e:	4604      	mov	r4, r0
	__asm__ volatile(
   12f10:	f04f 0320 	mov.w	r3, #32
   12f14:	f3ef 8511 	mrs	r5, BASEPRI
   12f18:	f383 8812 	msr	BASEPRI_MAX, r3
   12f1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   12f20:	f00b f893 	bl	1e04a <z_unpend_first_thread>

	if (thread != NULL) {
   12f24:	b148      	cbz	r0, 12f3a <z_impl_k_sem_give+0x2e>
   12f26:	2200      	movs	r2, #0
   12f28:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   12f2c:	f00a ffed 	bl	1df0a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   12f30:	4629      	mov	r1, r5
   12f32:	4809      	ldr	r0, [pc, #36]	; (12f58 <z_impl_k_sem_give+0x4c>)
   12f34:	f000 fa22 	bl	1337c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   12f38:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   12f3a:	68a3      	ldr	r3, [r4, #8]
   12f3c:	68e2      	ldr	r2, [r4, #12]
   12f3e:	4293      	cmp	r3, r2
   12f40:	d008      	beq.n	12f54 <z_impl_k_sem_give+0x48>
   12f42:	2201      	movs	r2, #1
   12f44:	4413      	add	r3, r2
   12f46:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   12f48:	2102      	movs	r1, #2
   12f4a:	f104 0010 	add.w	r0, r4, #16
   12f4e:	f00b fa12 	bl	1e376 <z_handle_obj_poll_events>
}
   12f52:	e7ed      	b.n	12f30 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   12f54:	2200      	movs	r2, #0
   12f56:	e7f5      	b.n	12f44 <z_impl_k_sem_give+0x38>
   12f58:	2000923c 	.word	0x2000923c

00012f5c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   12f5c:	b510      	push	{r4, lr}
   12f5e:	b082      	sub	sp, #8
   12f60:	f04f 0420 	mov.w	r4, #32
   12f64:	f3ef 8111 	mrs	r1, BASEPRI
   12f68:	f384 8812 	msr	BASEPRI_MAX, r4
   12f6c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   12f70:	6884      	ldr	r4, [r0, #8]
   12f72:	b144      	cbz	r4, 12f86 <z_impl_k_sem_take+0x2a>
		sem->count--;
   12f74:	3c01      	subs	r4, #1
   12f76:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   12f78:	f381 8811 	msr	BASEPRI, r1
   12f7c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   12f80:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   12f82:	b002      	add	sp, #8
   12f84:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   12f86:	ea53 0402 	orrs.w	r4, r3, r2
   12f8a:	d006      	beq.n	12f9a <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   12f8c:	9200      	str	r2, [sp, #0]
   12f8e:	9301      	str	r3, [sp, #4]
   12f90:	4602      	mov	r2, r0
   12f92:	4805      	ldr	r0, [pc, #20]	; (12fa8 <z_impl_k_sem_take+0x4c>)
   12f94:	f000 fb7a 	bl	1368c <z_pend_curr>
	return ret;
   12f98:	e7f3      	b.n	12f82 <z_impl_k_sem_take+0x26>
   12f9a:	f381 8811 	msr	BASEPRI, r1
   12f9e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   12fa2:	f06f 000f 	mvn.w	r0, #15
   12fa6:	e7ec      	b.n	12f82 <z_impl_k_sem_take+0x26>
   12fa8:	2000923c 	.word	0x2000923c

00012fac <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   12fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12fae:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   12fb0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   12fb2:	f013 0f02 	tst.w	r3, #2
   12fb6:	d15c      	bne.n	13072 <submit_to_queue_locked+0xc6>
   12fb8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   12fba:	f013 0f04 	tst.w	r3, #4
   12fbe:	d15d      	bne.n	1307c <submit_to_queue_locked+0xd0>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   12fc0:	680b      	ldr	r3, [r1, #0]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	d038      	beq.n	13038 <submit_to_queue_locked+0x8c>
	return (*flagp & BIT(bit)) != 0U;
   12fc6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   12fc8:	f013 0f01 	tst.w	r3, #1
   12fcc:	d037      	beq.n	1303e <submit_to_queue_locked+0x92>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   12fce:	68a3      	ldr	r3, [r4, #8]
   12fd0:	602b      	str	r3, [r5, #0]
			ret = 2;
   12fd2:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   12fd4:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   12fd6:	2e00      	cmp	r6, #0
   12fd8:	d03f      	beq.n	1305a <submit_to_queue_locked+0xae>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   12fda:	4b29      	ldr	r3, [pc, #164]	; (13080 <submit_to_queue_locked+0xd4>)
   12fdc:	689b      	ldr	r3, [r3, #8]
   12fde:	42b3      	cmp	r3, r6
   12fe0:	d02f      	beq.n	13042 <submit_to_queue_locked+0x96>
   12fe2:	2300      	movs	r3, #0
   12fe4:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   12fe6:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   12fea:	f3c3 0180 	ubfx	r1, r3, #2, #1
   12fee:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   12ff2:	f013 0f01 	tst.w	r3, #1
   12ff6:	d033      	beq.n	13060 <submit_to_queue_locked+0xb4>
	} else if (draining && !chained) {
   12ff8:	b101      	cbz	r1, 12ffc <submit_to_queue_locked+0x50>
   12ffa:	b3a2      	cbz	r2, 13066 <submit_to_queue_locked+0xba>
	} else if (plugged && !draining) {
   12ffc:	b100      	cbz	r0, 13000 <submit_to_queue_locked+0x54>
   12ffe:	b3a9      	cbz	r1, 1306c <submit_to_queue_locked+0xc0>
	parent->next = child;
   13000:	2300      	movs	r3, #0
   13002:	6023      	str	r3, [r4, #0]
	return list->tail;
   13004:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   13008:	b313      	cbz	r3, 13050 <submit_to_queue_locked+0xa4>
	parent->next = child;
   1300a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1300c:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	if (queue != NULL) {
   13010:	b12e      	cbz	r6, 1301e <submit_to_queue_locked+0x72>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   13012:	2200      	movs	r2, #0
   13014:	4611      	mov	r1, r2
   13016:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1301a:	f00b f855 	bl	1e0c8 <z_sched_wake>
		ret = 1;
   1301e:	2001      	movs	r0, #1

		if (rc < 0) {
   13020:	2800      	cmp	r0, #0
   13022:	db06      	blt.n	13032 <submit_to_queue_locked+0x86>
	*flagp |= BIT(bit);
   13024:	68e3      	ldr	r3, [r4, #12]
   13026:	f043 0304 	orr.w	r3, r3, #4
   1302a:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1302c:	682b      	ldr	r3, [r5, #0]
   1302e:	60a3      	str	r3, [r4, #8]
   13030:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   13032:	2800      	cmp	r0, #0
   13034:	dc21      	bgt.n	1307a <submit_to_queue_locked+0xce>
   13036:	e01e      	b.n	13076 <submit_to_queue_locked+0xca>
			*queuep = work->queue;
   13038:	6883      	ldr	r3, [r0, #8]
   1303a:	600b      	str	r3, [r1, #0]
   1303c:	e7c3      	b.n	12fc6 <submit_to_queue_locked+0x1a>
		ret = 1;
   1303e:	2701      	movs	r7, #1
   13040:	e7c8      	b.n	12fd4 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   13042:	f00a fcfd 	bl	1da40 <k_is_in_isr>
   13046:	b908      	cbnz	r0, 1304c <submit_to_queue_locked+0xa0>
   13048:	2301      	movs	r3, #1
   1304a:	e7cb      	b.n	12fe4 <submit_to_queue_locked+0x38>
   1304c:	2300      	movs	r3, #0
   1304e:	e7c9      	b.n	12fe4 <submit_to_queue_locked+0x38>
   13050:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   13054:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   13058:	e7da      	b.n	13010 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1305a:	f06f 0015 	mvn.w	r0, #21
   1305e:	e7df      	b.n	13020 <submit_to_queue_locked+0x74>
		ret = -ENODEV;
   13060:	f06f 0012 	mvn.w	r0, #18
   13064:	e7dc      	b.n	13020 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   13066:	f06f 000f 	mvn.w	r0, #15
   1306a:	e7d9      	b.n	13020 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   1306c:	f06f 000f 	mvn.w	r0, #15
   13070:	e7d6      	b.n	13020 <submit_to_queue_locked+0x74>
		ret = -EBUSY;
   13072:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   13076:	2300      	movs	r3, #0
   13078:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1307c:	2000      	movs	r0, #0
   1307e:	e7fa      	b.n	13076 <submit_to_queue_locked+0xca>
   13080:	20009210 	.word	0x20009210

00013084 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   13084:	b508      	push	{r3, lr}
   13086:	4684      	mov	ip, r0
   13088:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1308a:	ea53 0102 	orrs.w	r1, r3, r2
   1308e:	d00c      	beq.n	130aa <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   13090:	68c1      	ldr	r1, [r0, #12]
   13092:	f041 0108 	orr.w	r1, r1, #8
   13096:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   13098:	f8dc 1000 	ldr.w	r1, [ip]
   1309c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1309e:	4905      	ldr	r1, [pc, #20]	; (130b4 <schedule_for_queue_locked+0x30>)
   130a0:	3010      	adds	r0, #16
   130a2:	f000 fd8b 	bl	13bbc <z_add_timeout>

	return ret;
   130a6:	2001      	movs	r0, #1
}
   130a8:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   130aa:	4661      	mov	r1, ip
   130ac:	f7ff ff7e 	bl	12fac <submit_to_queue_locked>
   130b0:	e7fa      	b.n	130a8 <schedule_for_queue_locked+0x24>
   130b2:	bf00      	nop
   130b4:	0001dd43 	.word	0x0001dd43

000130b8 <finalize_cancel_locked>:
{
   130b8:	b570      	push	{r4, r5, r6, lr}
   130ba:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   130bc:	68c3      	ldr	r3, [r0, #12]
   130be:	f023 0302 	bic.w	r3, r3, #2
   130c2:	60c3      	str	r3, [r0, #12]
	return list->head;
   130c4:	4b1a      	ldr	r3, [pc, #104]	; (13130 <finalize_cancel_locked+0x78>)
   130c6:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   130c8:	b1fb      	cbz	r3, 1310a <finalize_cancel_locked+0x52>
   130ca:	461c      	mov	r4, r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   130cc:	b103      	cbz	r3, 130d0 <finalize_cancel_locked+0x18>
	return node->next;
   130ce:	681c      	ldr	r4, [r3, #0]
   130d0:	2600      	movs	r6, #0
   130d2:	e01f      	b.n	13114 <finalize_cancel_locked+0x5c>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   130d4:	461a      	mov	r2, r3
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   130d6:	b166      	cbz	r6, 130f2 <finalize_cancel_locked+0x3a>
	return node->next;
   130d8:	6819      	ldr	r1, [r3, #0]
	parent->next = child;
   130da:	6031      	str	r1, [r6, #0]
	return list->tail;
   130dc:	4914      	ldr	r1, [pc, #80]	; (13130 <finalize_cancel_locked+0x78>)
   130de:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   130e0:	428b      	cmp	r3, r1
   130e2:	d00f      	beq.n	13104 <finalize_cancel_locked+0x4c>
	parent->next = child;
   130e4:	2100      	movs	r1, #0
   130e6:	6011      	str	r1, [r2, #0]
			k_sem_give(&wc->sem);
   130e8:	f103 0008 	add.w	r0, r3, #8
	z_impl_k_sem_give(sem);
   130ec:	f7ff ff0e 	bl	12f0c <z_impl_k_sem_give>
}
   130f0:	e015      	b.n	1311e <finalize_cancel_locked+0x66>
	return node->next;
   130f2:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   130f4:	490e      	ldr	r1, [pc, #56]	; (13130 <finalize_cancel_locked+0x78>)
   130f6:	6008      	str	r0, [r1, #0]
	return list->tail;
   130f8:	6849      	ldr	r1, [r1, #4]
Z_GENLIST_REMOVE(slist, snode)
   130fa:	428b      	cmp	r3, r1
   130fc:	d1f2      	bne.n	130e4 <finalize_cancel_locked+0x2c>
	list->tail = node;
   130fe:	490c      	ldr	r1, [pc, #48]	; (13130 <finalize_cancel_locked+0x78>)
   13100:	6048      	str	r0, [r1, #4]
}
   13102:	e7ef      	b.n	130e4 <finalize_cancel_locked+0x2c>
	list->tail = node;
   13104:	490a      	ldr	r1, [pc, #40]	; (13130 <finalize_cancel_locked+0x78>)
   13106:	604e      	str	r6, [r1, #4]
}
   13108:	e7ec      	b.n	130e4 <finalize_cancel_locked+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1310a:	461c      	mov	r4, r3
   1310c:	e7e0      	b.n	130d0 <finalize_cancel_locked+0x18>
   1310e:	4622      	mov	r2, r4
   13110:	4623      	mov	r3, r4
   13112:	4614      	mov	r4, r2
   13114:	b153      	cbz	r3, 1312c <finalize_cancel_locked+0x74>
		if (wc->work == work) {
   13116:	685a      	ldr	r2, [r3, #4]
   13118:	42aa      	cmp	r2, r5
   1311a:	d0db      	beq.n	130d4 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1311c:	461e      	mov	r6, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1311e:	2c00      	cmp	r4, #0
   13120:	d0f5      	beq.n	1310e <finalize_cancel_locked+0x56>
   13122:	4622      	mov	r2, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   13124:	2c00      	cmp	r4, #0
   13126:	d0f3      	beq.n	13110 <finalize_cancel_locked+0x58>
	return node->next;
   13128:	6822      	ldr	r2, [r4, #0]
   1312a:	e7f1      	b.n	13110 <finalize_cancel_locked+0x58>
}
   1312c:	bd70      	pop	{r4, r5, r6, pc}
   1312e:	bf00      	nop
   13130:	2000923c 	.word	0x2000923c

00013134 <work_queue_main>:
{
   13134:	b5f0      	push	{r4, r5, r6, r7, lr}
   13136:	b085      	sub	sp, #20
   13138:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1313a:	e016      	b.n	1316a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1313c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   13140:	f023 0204 	bic.w	r2, r3, #4
   13144:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   13148:	f013 0f04 	tst.w	r3, #4
   1314c:	d159      	bne.n	13202 <work_queue_main+0xce>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1314e:	2300      	movs	r3, #0
   13150:	9302      	str	r3, [sp, #8]
   13152:	f04f 32ff 	mov.w	r2, #4294967295
   13156:	f04f 33ff 	mov.w	r3, #4294967295
   1315a:	e9cd 2300 	strd	r2, r3, [sp]
   1315e:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   13162:	4631      	mov	r1, r6
   13164:	482e      	ldr	r0, [pc, #184]	; (13220 <work_queue_main+0xec>)
   13166:	f000 fcb3 	bl	13ad0 <z_sched_wait>
	__asm__ volatile(
   1316a:	f04f 0320 	mov.w	r3, #32
   1316e:	f3ef 8611 	mrs	r6, BASEPRI
   13172:	f383 8812 	msr	BASEPRI_MAX, r3
   13176:	f3bf 8f6f 	isb	sy
	return list->head;
   1317a:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1317e:	2c00      	cmp	r4, #0
   13180:	d0dc      	beq.n	1313c <work_queue_main+0x8>
	return node->next;
   13182:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   13184:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   13188:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1318c:	4294      	cmp	r4, r2
   1318e:	d035      	beq.n	131fc <work_queue_main+0xc8>
	*flagp |= BIT(bit);
   13190:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   13194:	f043 0302 	orr.w	r3, r3, #2
   13198:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1319c:	68e3      	ldr	r3, [r4, #12]
   1319e:	f043 0301 	orr.w	r3, r3, #1
   131a2:	60e3      	str	r3, [r4, #12]
	*flagp &= ~BIT(bit);
   131a4:	f023 0304 	bic.w	r3, r3, #4
   131a8:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   131aa:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   131ac:	2c00      	cmp	r4, #0
   131ae:	d0ce      	beq.n	1314e <work_queue_main+0x1a>
	__asm__ volatile(
   131b0:	f386 8811 	msr	BASEPRI, r6
   131b4:	f3bf 8f6f 	isb	sy
		handler(work);
   131b8:	4620      	mov	r0, r4
   131ba:	4798      	blx	r3
	__asm__ volatile(
   131bc:	f04f 0320 	mov.w	r3, #32
   131c0:	f3ef 8611 	mrs	r6, BASEPRI
   131c4:	f383 8812 	msr	BASEPRI_MAX, r3
   131c8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   131cc:	68e3      	ldr	r3, [r4, #12]
   131ce:	f023 0301 	bic.w	r3, r3, #1
   131d2:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   131d4:	f013 0f02 	tst.w	r3, #2
   131d8:	d11e      	bne.n	13218 <work_queue_main+0xe4>
	*flagp &= ~BIT(bit);
   131da:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   131de:	f023 0302 	bic.w	r3, r3, #2
   131e2:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   131e6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   131ea:	f386 8811 	msr	BASEPRI, r6
   131ee:	f3bf 8f6f 	isb	sy
		if (yield) {
   131f2:	2b00      	cmp	r3, #0
   131f4:	d1b9      	bne.n	1316a <work_queue_main+0x36>
	z_impl_k_yield();
   131f6:	f000 fb81 	bl	138fc <z_impl_k_yield>
}
   131fa:	e7b6      	b.n	1316a <work_queue_main+0x36>
	list->tail = node;
   131fc:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   13200:	e7c6      	b.n	13190 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   13202:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   13206:	2200      	movs	r2, #0
   13208:	2101      	movs	r1, #1
   1320a:	4638      	mov	r0, r7
   1320c:	f00a ff5c 	bl	1e0c8 <z_sched_wake>
   13210:	2800      	cmp	r0, #0
   13212:	d1f8      	bne.n	13206 <work_queue_main+0xd2>
		k_work_handler_t handler = NULL;
   13214:	2300      	movs	r3, #0
   13216:	e7c9      	b.n	131ac <work_queue_main+0x78>
			finalize_cancel_locked(work);
   13218:	4620      	mov	r0, r4
   1321a:	f7ff ff4d 	bl	130b8 <finalize_cancel_locked>
   1321e:	e7dc      	b.n	131da <work_queue_main+0xa6>
   13220:	2000923c 	.word	0x2000923c

00013224 <k_work_submit>:
{
   13224:	b508      	push	{r3, lr}
   13226:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   13228:	4801      	ldr	r0, [pc, #4]	; (13230 <k_work_submit+0xc>)
   1322a:	f00a fdbe 	bl	1ddaa <k_work_submit_to_queue>
}
   1322e:	bd08      	pop	{r3, pc}
   13230:	20001410 	.word	0x20001410

00013234 <k_work_queue_start>:
{
   13234:	b5f0      	push	{r4, r5, r6, r7, lr}
   13236:	b089      	sub	sp, #36	; 0x24
   13238:	4604      	mov	r4, r0
   1323a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1323c:	2000      	movs	r0, #0
   1323e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   13242:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   13246:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1324a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1324e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   13252:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   13256:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1325a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1325e:	b1fd      	cbz	r5, 132a0 <k_work_queue_start+0x6c>
   13260:	7928      	ldrb	r0, [r5, #4]
   13262:	b9f8      	cbnz	r0, 132a4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   13264:	2001      	movs	r0, #1
	*flagp = flags;
   13266:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1326a:	f04f 36ff 	mov.w	r6, #4294967295
   1326e:	f04f 37ff 	mov.w	r7, #4294967295
   13272:	e9cd 6706 	strd	r6, r7, [sp, #24]
   13276:	2000      	movs	r0, #0
   13278:	9004      	str	r0, [sp, #16]
   1327a:	9303      	str	r3, [sp, #12]
   1327c:	9002      	str	r0, [sp, #8]
   1327e:	9001      	str	r0, [sp, #4]
   13280:	9400      	str	r4, [sp, #0]
   13282:	4b0a      	ldr	r3, [pc, #40]	; (132ac <k_work_queue_start+0x78>)
   13284:	4620      	mov	r0, r4
   13286:	f00a fbf0 	bl	1da6a <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1328a:	b125      	cbz	r5, 13296 <k_work_queue_start+0x62>
   1328c:	6829      	ldr	r1, [r5, #0]
   1328e:	b111      	cbz	r1, 13296 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   13290:	4620      	mov	r0, r4
   13292:	f7ff fc47 	bl	12b24 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   13296:	4620      	mov	r0, r4
   13298:	f00a fbd8 	bl	1da4c <z_impl_k_thread_start>
}
   1329c:	b009      	add	sp, #36	; 0x24
   1329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   132a0:	2001      	movs	r0, #1
   132a2:	e7e0      	b.n	13266 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   132a4:	f240 1001 	movw	r0, #257	; 0x101
   132a8:	e7dd      	b.n	13266 <k_work_queue_start+0x32>
   132aa:	bf00      	nop
   132ac:	00013135 	.word	0x00013135

000132b0 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   132b0:	b508      	push	{r3, lr}
   132b2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   132b4:	4801      	ldr	r0, [pc, #4]	; (132bc <k_work_schedule+0xc>)
   132b6:	f00a fda8 	bl	1de0a <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   132ba:	bd08      	pop	{r3, pc}
   132bc:	20001410 	.word	0x20001410

000132c0 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   132c0:	f1b3 3fff 	cmp.w	r3, #4294967295
   132c4:	bf08      	it	eq
   132c6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   132ca:	d100      	bne.n	132ce <add_thread_timeout+0xe>
   132cc:	4770      	bx	lr
{
   132ce:	b508      	push	{r3, lr}
   132d0:	4902      	ldr	r1, [pc, #8]	; (132dc <add_thread_timeout+0x1c>)
   132d2:	3018      	adds	r0, #24
   132d4:	f000 fc72 	bl	13bbc <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   132d8:	bd08      	pop	{r3, pc}
   132da:	bf00      	nop
   132dc:	0001df43 	.word	0x0001df43

000132e0 <z_reset_time_slice>:
{
   132e0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   132e2:	4b07      	ldr	r3, [pc, #28]	; (13300 <z_reset_time_slice+0x20>)
   132e4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   132e6:	b904      	cbnz	r4, 132ea <z_reset_time_slice+0xa>
}
   132e8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   132ea:	f7fe fa53 	bl	11794 <sys_clock_elapsed>
   132ee:	4404      	add	r4, r0
   132f0:	4b04      	ldr	r3, [pc, #16]	; (13304 <z_reset_time_slice+0x24>)
   132f2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   132f4:	2100      	movs	r1, #0
   132f6:	4b02      	ldr	r3, [pc, #8]	; (13300 <z_reset_time_slice+0x20>)
   132f8:	6818      	ldr	r0, [r3, #0]
   132fa:	f00a ff68 	bl	1e1ce <z_set_timeout_expiry>
}
   132fe:	e7f3      	b.n	132e8 <z_reset_time_slice+0x8>
   13300:	2000924c 	.word	0x2000924c
   13304:	20009210 	.word	0x20009210

00013308 <k_sched_time_slice_set>:
{
   13308:	b570      	push	{r4, r5, r6, lr}
   1330a:	4604      	mov	r4, r0
   1330c:	460d      	mov	r5, r1
	LOCKED(&sched_spinlock) {
   1330e:	2300      	movs	r3, #0
	__asm__ volatile(
   13310:	f04f 0220 	mov.w	r2, #32
   13314:	f3ef 8611 	mrs	r6, BASEPRI
   13318:	f382 8812 	msr	BASEPRI_MAX, r2
   1331c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   13320:	e00e      	b.n	13340 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
   13322:	2802      	cmp	r0, #2
   13324:	bfb8      	it	lt
   13326:	2002      	movlt	r0, #2
   13328:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1332a:	4b11      	ldr	r3, [pc, #68]	; (13370 <k_sched_time_slice_set+0x68>)
   1332c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   1332e:	4b11      	ldr	r3, [pc, #68]	; (13374 <k_sched_time_slice_set+0x6c>)
   13330:	6898      	ldr	r0, [r3, #8]
   13332:	f7ff ffd5 	bl	132e0 <z_reset_time_slice>
	__asm__ volatile(
   13336:	f386 8811 	msr	BASEPRI, r6
   1333a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1333e:	2301      	movs	r3, #1
   13340:	b9a3      	cbnz	r3, 1336c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
   13342:	4b0c      	ldr	r3, [pc, #48]	; (13374 <k_sched_time_slice_set+0x6c>)
   13344:	2200      	movs	r2, #0
   13346:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   13348:	0c61      	lsrs	r1, r4, #17
   1334a:	03e3      	lsls	r3, r4, #15
   1334c:	f240 30e7 	movw	r0, #999	; 0x3e7
   13350:	1818      	adds	r0, r3, r0
   13352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13356:	f04f 0300 	mov.w	r3, #0
   1335a:	f141 0100 	adc.w	r1, r1, #0
   1335e:	f7ed ff2b 	bl	11b8 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   13362:	4b05      	ldr	r3, [pc, #20]	; (13378 <k_sched_time_slice_set+0x70>)
   13364:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   13366:	2c00      	cmp	r4, #0
   13368:	dcdb      	bgt.n	13322 <k_sched_time_slice_set+0x1a>
   1336a:	e7de      	b.n	1332a <k_sched_time_slice_set+0x22>
}
   1336c:	bd70      	pop	{r4, r5, r6, pc}
   1336e:	bf00      	nop
   13370:	20009248 	.word	0x20009248
   13374:	20009210 	.word	0x20009210
   13378:	2000924c 	.word	0x2000924c

0001337c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1337c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1337e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13380:	b921      	cbnz	r1, 1338c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13382:	f3ef 8305 	mrs	r3, IPSR
   13386:	b913      	cbnz	r3, 1338e <z_reschedule+0x12>
   13388:	2101      	movs	r1, #1
   1338a:	e000      	b.n	1338e <z_reschedule+0x12>
   1338c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1338e:	f011 0f01 	tst.w	r1, #1
   13392:	d007      	beq.n	133a4 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   13394:	4b06      	ldr	r3, [pc, #24]	; (133b0 <z_reschedule+0x34>)
   13396:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   13398:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1339a:	429a      	cmp	r2, r3
   1339c:	d002      	beq.n	133a4 <z_reschedule+0x28>
	ret = arch_swap(key);
   1339e:	f7f1 fb29 	bl	49f4 <arch_swap>
		z_swap(lock, key);
   133a2:	e003      	b.n	133ac <z_reschedule+0x30>
   133a4:	f380 8811 	msr	BASEPRI, r0
   133a8:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   133ac:	bd08      	pop	{r3, pc}
   133ae:	bf00      	nop
   133b0:	20009210 	.word	0x20009210

000133b4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   133b4:	2300      	movs	r3, #0
	__asm__ volatile(
   133b6:	f04f 0220 	mov.w	r2, #32
   133ba:	f3ef 8111 	mrs	r1, BASEPRI
   133be:	f382 8812 	msr	BASEPRI_MAX, r2
   133c2:	f3bf 8f6f 	isb	sy
   133c6:	e009      	b.n	133dc <k_sched_lock+0x28>
	--_current->base.sched_locked;
   133c8:	4b06      	ldr	r3, [pc, #24]	; (133e4 <k_sched_lock+0x30>)
   133ca:	689a      	ldr	r2, [r3, #8]
   133cc:	7bd3      	ldrb	r3, [r2, #15]
   133ce:	3b01      	subs	r3, #1
   133d0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   133d2:	f381 8811 	msr	BASEPRI, r1
   133d6:	f3bf 8f6f 	isb	sy
   133da:	2301      	movs	r3, #1
   133dc:	2b00      	cmp	r3, #0
   133de:	d0f3      	beq.n	133c8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   133e0:	4770      	bx	lr
   133e2:	bf00      	nop
   133e4:	20009210 	.word	0x20009210

000133e8 <update_cache>:
{
   133e8:	b538      	push	{r3, r4, r5, lr}
   133ea:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   133ec:	4810      	ldr	r0, [pc, #64]	; (13430 <update_cache+0x48>)
   133ee:	f00a fd85 	bl	1defc <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   133f2:	4605      	mov	r5, r0
   133f4:	b170      	cbz	r0, 13414 <update_cache+0x2c>
	if (preempt_ok != 0) {
   133f6:	b984      	cbnz	r4, 1341a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   133f8:	4b0e      	ldr	r3, [pc, #56]	; (13434 <update_cache+0x4c>)
   133fa:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   133fc:	7b5a      	ldrb	r2, [r3, #13]
   133fe:	f012 0f1f 	tst.w	r2, #31
   13402:	d10a      	bne.n	1341a <update_cache+0x32>
	return node->next != NULL;
   13404:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   13406:	b942      	cbnz	r2, 1341a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   13408:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1340a:	2a7f      	cmp	r2, #127	; 0x7f
   1340c:	d905      	bls.n	1341a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1340e:	4a09      	ldr	r2, [pc, #36]	; (13434 <update_cache+0x4c>)
   13410:	61d3      	str	r3, [r2, #28]
   13412:	e00b      	b.n	1342c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   13414:	4b07      	ldr	r3, [pc, #28]	; (13434 <update_cache+0x4c>)
   13416:	68dd      	ldr	r5, [r3, #12]
   13418:	e7ed      	b.n	133f6 <update_cache+0xe>
		if (thread != _current) {
   1341a:	4b06      	ldr	r3, [pc, #24]	; (13434 <update_cache+0x4c>)
   1341c:	689b      	ldr	r3, [r3, #8]
   1341e:	42ab      	cmp	r3, r5
   13420:	d002      	beq.n	13428 <update_cache+0x40>
			z_reset_time_slice(thread);
   13422:	4628      	mov	r0, r5
   13424:	f7ff ff5c 	bl	132e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   13428:	4b02      	ldr	r3, [pc, #8]	; (13434 <update_cache+0x4c>)
   1342a:	61dd      	str	r5, [r3, #28]
}
   1342c:	bd38      	pop	{r3, r4, r5, pc}
   1342e:	bf00      	nop
   13430:	20009230 	.word	0x20009230
   13434:	20009210 	.word	0x20009210

00013438 <move_thread_to_end_of_prio_q>:
{
   13438:	b538      	push	{r3, r4, r5, lr}
   1343a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1343c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1343e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   13442:	2b00      	cmp	r3, #0
   13444:	db28      	blt.n	13498 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   13446:	7b6b      	ldrb	r3, [r5, #13]
   13448:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1344c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1344e:	4b1a      	ldr	r3, [pc, #104]	; (134b8 <move_thread_to_end_of_prio_q+0x80>)
   13450:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13454:	429c      	cmp	r4, r3
   13456:	d02d      	beq.n	134b4 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13458:	b16c      	cbz	r4, 13476 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1345a:	4621      	mov	r1, r4
   1345c:	4628      	mov	r0, r5
   1345e:	f00a fd02 	bl	1de66 <z_sched_prio_cmp>
   13462:	2800      	cmp	r0, #0
   13464:	dc20      	bgt.n	134a8 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13466:	b134      	cbz	r4, 13476 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   13468:	4b13      	ldr	r3, [pc, #76]	; (134b8 <move_thread_to_end_of_prio_q+0x80>)
   1346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1346c:	429c      	cmp	r4, r3
   1346e:	d002      	beq.n	13476 <move_thread_to_end_of_prio_q+0x3e>
   13470:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13472:	2c00      	cmp	r4, #0
   13474:	d1f0      	bne.n	13458 <move_thread_to_end_of_prio_q+0x20>
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   13476:	4b10      	ldr	r3, [pc, #64]	; (134b8 <move_thread_to_end_of_prio_q+0x80>)
   13478:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1347a:	f103 0120 	add.w	r1, r3, #32
   1347e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   13480:	606a      	str	r2, [r5, #4]

	tail->next = node;
   13482:	6015      	str	r5, [r2, #0]
	list->tail = node;
   13484:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   13486:	4b0c      	ldr	r3, [pc, #48]	; (134b8 <move_thread_to_end_of_prio_q+0x80>)
   13488:	6898      	ldr	r0, [r3, #8]
   1348a:	42a8      	cmp	r0, r5
   1348c:	bf14      	ite	ne
   1348e:	2000      	movne	r0, #0
   13490:	2001      	moveq	r0, #1
   13492:	f7ff ffa9 	bl	133e8 <update_cache>
}
   13496:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13498:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1349c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1349e:	4601      	mov	r1, r0
   134a0:	4806      	ldr	r0, [pc, #24]	; (134bc <move_thread_to_end_of_prio_q+0x84>)
   134a2:	f00a fcff 	bl	1dea4 <z_priq_dumb_remove>
}
   134a6:	e7ce      	b.n	13446 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   134a8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   134aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
   134ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
   134ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   134b0:	6065      	str	r5, [r4, #4]
}
   134b2:	e7e8      	b.n	13486 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   134b4:	2400      	movs	r4, #0
   134b6:	e7cf      	b.n	13458 <move_thread_to_end_of_prio_q+0x20>
   134b8:	20009210 	.word	0x20009210
   134bc:	20009230 	.word	0x20009230

000134c0 <slice_expired_locked>:
{
   134c0:	b538      	push	{r3, r4, r5, lr}
   134c2:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   134c4:	4b07      	ldr	r3, [pc, #28]	; (134e4 <slice_expired_locked+0x24>)
   134c6:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   134c8:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   134ca:	f013 0f1f 	tst.w	r3, #31
   134ce:	d004      	beq.n	134da <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   134d0:	4628      	mov	r0, r5
   134d2:	f7ff ff05 	bl	132e0 <z_reset_time_slice>
}
   134d6:	4620      	mov	r0, r4
   134d8:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   134da:	4628      	mov	r0, r5
   134dc:	f7ff ffac 	bl	13438 <move_thread_to_end_of_prio_q>
   134e0:	e7f6      	b.n	134d0 <slice_expired_locked+0x10>
   134e2:	bf00      	nop
   134e4:	20009210 	.word	0x20009210

000134e8 <z_time_slice>:
{
   134e8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   134ea:	f04f 0320 	mov.w	r3, #32
   134ee:	f3ef 8411 	mrs	r4, BASEPRI
   134f2:	f383 8812 	msr	BASEPRI_MAX, r3
   134f6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   134fa:	4b22      	ldr	r3, [pc, #136]	; (13584 <z_time_slice+0x9c>)
   134fc:	689b      	ldr	r3, [r3, #8]
   134fe:	4a22      	ldr	r2, [pc, #136]	; (13588 <z_time_slice+0xa0>)
   13500:	6812      	ldr	r2, [r2, #0]
   13502:	4293      	cmp	r3, r2
   13504:	d018      	beq.n	13538 <z_time_slice+0x50>
   13506:	4621      	mov	r1, r4
	pending_current = NULL;
   13508:	4a1f      	ldr	r2, [pc, #124]	; (13588 <z_time_slice+0xa0>)
   1350a:	2500      	movs	r5, #0
   1350c:	6015      	str	r5, [r2, #0]
	int ret = slice_ticks;
   1350e:	4a1f      	ldr	r2, [pc, #124]	; (1358c <z_time_slice+0xa4>)
   13510:	6812      	ldr	r2, [r2, #0]
	if (slice_time(_current) && sliceable(_current)) {
   13512:	b372      	cbz	r2, 13572 <z_time_slice+0x8a>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   13514:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   13516:	2a7f      	cmp	r2, #127	; 0x7f
   13518:	d816      	bhi.n	13548 <z_time_slice+0x60>
   1351a:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1351c:	f012 0f1f 	tst.w	r2, #31
   13520:	d11c      	bne.n	1355c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   13522:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13526:	4a1a      	ldr	r2, [pc, #104]	; (13590 <z_time_slice+0xa8>)
   13528:	6812      	ldr	r2, [r2, #0]
   1352a:	4295      	cmp	r5, r2
   1352c:	db18      	blt.n	13560 <z_time_slice+0x78>
		&& !z_is_idle_thread_object(thread);
   1352e:	4a19      	ldr	r2, [pc, #100]	; (13594 <z_time_slice+0xac>)
   13530:	4293      	cmp	r3, r2
   13532:	d017      	beq.n	13564 <z_time_slice+0x7c>
   13534:	2301      	movs	r3, #1
   13536:	e008      	b.n	1354a <z_time_slice+0x62>
		z_reset_time_slice(_current);
   13538:	4618      	mov	r0, r3
   1353a:	f7ff fed1 	bl	132e0 <z_reset_time_slice>
	__asm__ volatile(
   1353e:	f384 8811 	msr	BASEPRI, r4
   13542:	f3bf 8f6f 	isb	sy
		return;
   13546:	e01b      	b.n	13580 <z_time_slice+0x98>
		&& !z_is_idle_thread_object(thread);
   13548:	2300      	movs	r3, #0
	if (slice_time(_current) && sliceable(_current)) {
   1354a:	b193      	cbz	r3, 13572 <z_time_slice+0x8a>
		if (ticks >= _current_cpu->slice_ticks) {
   1354c:	4b0d      	ldr	r3, [pc, #52]	; (13584 <z_time_slice+0x9c>)
   1354e:	691b      	ldr	r3, [r3, #16]
   13550:	4283      	cmp	r3, r0
   13552:	dd09      	ble.n	13568 <z_time_slice+0x80>
			_current_cpu->slice_ticks -= ticks;
   13554:	1a18      	subs	r0, r3, r0
   13556:	4b0b      	ldr	r3, [pc, #44]	; (13584 <z_time_slice+0x9c>)
   13558:	6118      	str	r0, [r3, #16]
   1355a:	e00d      	b.n	13578 <z_time_slice+0x90>
		&& !z_is_idle_thread_object(thread);
   1355c:	2300      	movs	r3, #0
   1355e:	e7f4      	b.n	1354a <z_time_slice+0x62>
   13560:	2300      	movs	r3, #0
   13562:	e7f2      	b.n	1354a <z_time_slice+0x62>
   13564:	2300      	movs	r3, #0
   13566:	e7f0      	b.n	1354a <z_time_slice+0x62>
			key = slice_expired_locked(key);
   13568:	4620      	mov	r0, r4
   1356a:	f7ff ffa9 	bl	134c0 <slice_expired_locked>
   1356e:	4601      	mov	r1, r0
   13570:	e002      	b.n	13578 <z_time_slice+0x90>
		_current_cpu->slice_ticks = 0;
   13572:	4b04      	ldr	r3, [pc, #16]	; (13584 <z_time_slice+0x9c>)
   13574:	2200      	movs	r2, #0
   13576:	611a      	str	r2, [r3, #16]
   13578:	f381 8811 	msr	BASEPRI, r1
   1357c:	f3bf 8f6f 	isb	sy
}
   13580:	bd38      	pop	{r3, r4, r5, pc}
   13582:	bf00      	nop
   13584:	20009210 	.word	0x20009210
   13588:	20009244 	.word	0x20009244
   1358c:	2000924c 	.word	0x2000924c
   13590:	20009248 	.word	0x20009248
   13594:	20001298 	.word	0x20001298

00013598 <ready_thread>:
{
   13598:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1359a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1359c:	f990 200d 	ldrsb.w	r2, [r0, #13]
   135a0:	2a00      	cmp	r2, #0
   135a2:	db2d      	blt.n	13600 <ready_thread+0x68>
   135a4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   135a6:	f013 0f1f 	tst.w	r3, #31
   135aa:	d105      	bne.n	135b8 <ready_thread+0x20>
	return node->next != NULL;
   135ac:	6982      	ldr	r2, [r0, #24]
   135ae:	b10a      	cbz	r2, 135b4 <ready_thread+0x1c>
   135b0:	2200      	movs	r2, #0
   135b2:	e002      	b.n	135ba <ready_thread+0x22>
   135b4:	2201      	movs	r2, #1
   135b6:	e000      	b.n	135ba <ready_thread+0x22>
   135b8:	2200      	movs	r2, #0
   135ba:	b30a      	cbz	r2, 13600 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   135bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   135c0:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   135c2:	4b14      	ldr	r3, [pc, #80]	; (13614 <ready_thread+0x7c>)
   135c4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   135c8:	429d      	cmp	r5, r3
   135ca:	d020      	beq.n	1360e <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   135cc:	b16d      	cbz	r5, 135ea <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   135ce:	4629      	mov	r1, r5
   135d0:	4620      	mov	r0, r4
   135d2:	f00a fc48 	bl	1de66 <z_sched_prio_cmp>
   135d6:	2800      	cmp	r0, #0
   135d8:	dc13      	bgt.n	13602 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   135da:	b135      	cbz	r5, 135ea <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   135dc:	4b0d      	ldr	r3, [pc, #52]	; (13614 <ready_thread+0x7c>)
   135de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   135e0:	429d      	cmp	r5, r3
   135e2:	d002      	beq.n	135ea <ready_thread+0x52>
   135e4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   135e6:	2d00      	cmp	r5, #0
   135e8:	d1f0      	bne.n	135cc <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   135ea:	4b0a      	ldr	r3, [pc, #40]	; (13614 <ready_thread+0x7c>)
   135ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   135ee:	f103 0120 	add.w	r1, r3, #32
   135f2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   135f4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   135f6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   135f8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   135fa:	2000      	movs	r0, #0
   135fc:	f7ff fef4 	bl	133e8 <update_cache>
}
   13600:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   13602:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   13604:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13606:	6025      	str	r5, [r4, #0]
	prev->next = node;
   13608:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1360a:	606c      	str	r4, [r5, #4]
}
   1360c:	e7f5      	b.n	135fa <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1360e:	2500      	movs	r5, #0
   13610:	e7dc      	b.n	135cc <ready_thread+0x34>
   13612:	bf00      	nop
   13614:	20009210 	.word	0x20009210

00013618 <z_sched_start>:
{
   13618:	b510      	push	{r4, lr}
	__asm__ volatile(
   1361a:	f04f 0320 	mov.w	r3, #32
   1361e:	f3ef 8411 	mrs	r4, BASEPRI
   13622:	f383 8812 	msr	BASEPRI_MAX, r3
   13626:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1362a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1362c:	f013 0f04 	tst.w	r3, #4
   13630:	d104      	bne.n	1363c <z_sched_start+0x24>
	__asm__ volatile(
   13632:	f384 8811 	msr	BASEPRI, r4
   13636:	f3bf 8f6f 	isb	sy
}
   1363a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1363c:	f023 0304 	bic.w	r3, r3, #4
   13640:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   13642:	f7ff ffa9 	bl	13598 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   13646:	4621      	mov	r1, r4
   13648:	4801      	ldr	r0, [pc, #4]	; (13650 <z_sched_start+0x38>)
   1364a:	f7ff fe97 	bl	1337c <z_reschedule>
   1364e:	e7f4      	b.n	1363a <z_sched_start+0x22>
   13650:	20009248 	.word	0x20009248

00013654 <unready_thread>:
{
   13654:	b510      	push	{r4, lr}
   13656:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   13658:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1365a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1365e:	2b00      	cmp	r3, #0
   13660:	db08      	blt.n	13674 <unready_thread+0x20>
	update_cache(thread == _current);
   13662:	4b08      	ldr	r3, [pc, #32]	; (13684 <unready_thread+0x30>)
   13664:	6898      	ldr	r0, [r3, #8]
   13666:	42a0      	cmp	r0, r4
   13668:	bf14      	ite	ne
   1366a:	2000      	movne	r0, #0
   1366c:	2001      	moveq	r0, #1
   1366e:	f7ff febb 	bl	133e8 <update_cache>
}
   13672:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   13678:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1367a:	4601      	mov	r1, r0
   1367c:	4802      	ldr	r0, [pc, #8]	; (13688 <unready_thread+0x34>)
   1367e:	f00a fc11 	bl	1dea4 <z_priq_dumb_remove>
}
   13682:	e7ee      	b.n	13662 <unready_thread+0xe>
   13684:	20009210 	.word	0x20009210
   13688:	20009230 	.word	0x20009230

0001368c <z_pend_curr>:
{
   1368c:	b510      	push	{r4, lr}
   1368e:	460c      	mov	r4, r1
   13690:	4611      	mov	r1, r2
	pending_current = _current;
   13692:	4b06      	ldr	r3, [pc, #24]	; (136ac <z_pend_curr+0x20>)
   13694:	6898      	ldr	r0, [r3, #8]
   13696:	4b06      	ldr	r3, [pc, #24]	; (136b0 <z_pend_curr+0x24>)
   13698:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1369a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1369e:	f00a fcb2 	bl	1e006 <pend>
   136a2:	4620      	mov	r0, r4
   136a4:	f7f1 f9a6 	bl	49f4 <arch_swap>
}
   136a8:	bd10      	pop	{r4, pc}
   136aa:	bf00      	nop
   136ac:	20009210 	.word	0x20009210
   136b0:	20009244 	.word	0x20009244

000136b4 <z_set_prio>:
{
   136b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   136b8:	4604      	mov	r4, r0
   136ba:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
   136bc:	2300      	movs	r3, #0
	__asm__ volatile(
   136be:	f04f 0220 	mov.w	r2, #32
   136c2:	f3ef 8811 	mrs	r8, BASEPRI
   136c6:	f382 8812 	msr	BASEPRI_MAX, r2
   136ca:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   136ce:	461f      	mov	r7, r3
   136d0:	e008      	b.n	136e4 <z_set_prio+0x30>
		if (need_sched) {
   136d2:	f012 0701 	ands.w	r7, r2, #1
   136d6:	d111      	bne.n	136fc <z_set_prio+0x48>
			thread->base.prio = prio;
   136d8:	73a6      	strb	r6, [r4, #14]
	__asm__ volatile(
   136da:	f388 8811 	msr	BASEPRI, r8
   136de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   136e2:	2301      	movs	r3, #1
   136e4:	461a      	mov	r2, r3
   136e6:	2b00      	cmp	r3, #0
   136e8:	d13d      	bne.n	13766 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   136ea:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   136ec:	f013 0f1f 	tst.w	r3, #31
   136f0:	d1ef      	bne.n	136d2 <z_set_prio+0x1e>
	return node->next != NULL;
   136f2:	69a1      	ldr	r1, [r4, #24]
   136f4:	2900      	cmp	r1, #0
   136f6:	d1ec      	bne.n	136d2 <z_set_prio+0x1e>
   136f8:	2201      	movs	r2, #1
   136fa:	e7ea      	b.n	136d2 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   136fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13700:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   13702:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1376c <z_set_prio+0xb8>
   13706:	4621      	mov	r1, r4
   13708:	4648      	mov	r0, r9
   1370a:	f00a fbcb 	bl	1dea4 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1370e:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   13710:	7b63      	ldrb	r3, [r4, #13]
   13712:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13716:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   13718:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1371c:	454d      	cmp	r5, r9
   1371e:	d020      	beq.n	13762 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13720:	b16d      	cbz	r5, 1373e <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13722:	4629      	mov	r1, r5
   13724:	4620      	mov	r0, r4
   13726:	f00a fb9e 	bl	1de66 <z_sched_prio_cmp>
   1372a:	2800      	cmp	r0, #0
   1372c:	dc13      	bgt.n	13756 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1372e:	b135      	cbz	r5, 1373e <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   13730:	4b0f      	ldr	r3, [pc, #60]	; (13770 <z_set_prio+0xbc>)
   13732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13734:	429d      	cmp	r5, r3
   13736:	d002      	beq.n	1373e <z_set_prio+0x8a>
   13738:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1373a:	2d00      	cmp	r5, #0
   1373c:	d1f0      	bne.n	13720 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1373e:	4b0c      	ldr	r3, [pc, #48]	; (13770 <z_set_prio+0xbc>)
   13740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   13742:	f103 0120 	add.w	r1, r3, #32
   13746:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   13748:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1374a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1374c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1374e:	2001      	movs	r0, #1
   13750:	f7ff fe4a 	bl	133e8 <update_cache>
   13754:	e7c1      	b.n	136da <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   13756:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   13758:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1375a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1375c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1375e:	606c      	str	r4, [r5, #4]
}
   13760:	e7f5      	b.n	1374e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13762:	2500      	movs	r5, #0
   13764:	e7dc      	b.n	13720 <z_set_prio+0x6c>
}
   13766:	4638      	mov	r0, r7
   13768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1376c:	20009230 	.word	0x20009230
   13770:	20009210 	.word	0x20009210

00013774 <z_impl_k_thread_suspend>:
{
   13774:	b538      	push	{r3, r4, r5, lr}
   13776:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   13778:	3018      	adds	r0, #24
   1377a:	f00a fcf3 	bl	1e164 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1377e:	2300      	movs	r3, #0
	__asm__ volatile(
   13780:	f04f 0220 	mov.w	r2, #32
   13784:	f3ef 8511 	mrs	r5, BASEPRI
   13788:	f382 8812 	msr	BASEPRI_MAX, r2
   1378c:	f3bf 8f6f 	isb	sy
   13790:	e010      	b.n	137b4 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13792:	7b63      	ldrb	r3, [r4, #13]
   13794:	f043 0310 	orr.w	r3, r3, #16
   13798:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1379a:	4b15      	ldr	r3, [pc, #84]	; (137f0 <z_impl_k_thread_suspend+0x7c>)
   1379c:	6898      	ldr	r0, [r3, #8]
   1379e:	42a0      	cmp	r0, r4
   137a0:	bf14      	ite	ne
   137a2:	2000      	movne	r0, #0
   137a4:	2001      	moveq	r0, #1
   137a6:	f7ff fe1f 	bl	133e8 <update_cache>
	__asm__ volatile(
   137aa:	f385 8811 	msr	BASEPRI, r5
   137ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   137b2:	2301      	movs	r3, #1
   137b4:	b963      	cbnz	r3, 137d0 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   137b6:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   137b8:	f994 300d 	ldrsb.w	r3, [r4, #13]
   137bc:	2b00      	cmp	r3, #0
   137be:	dae8      	bge.n	13792 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   137c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   137c4:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   137c6:	4621      	mov	r1, r4
   137c8:	480a      	ldr	r0, [pc, #40]	; (137f4 <z_impl_k_thread_suspend+0x80>)
   137ca:	f00a fb6b 	bl	1dea4 <z_priq_dumb_remove>
}
   137ce:	e7e0      	b.n	13792 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   137d0:	4b07      	ldr	r3, [pc, #28]	; (137f0 <z_impl_k_thread_suspend+0x7c>)
   137d2:	689b      	ldr	r3, [r3, #8]
   137d4:	42a3      	cmp	r3, r4
   137d6:	d000      	beq.n	137da <z_impl_k_thread_suspend+0x66>
}
   137d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   137da:	f04f 0320 	mov.w	r3, #32
   137de:	f3ef 8011 	mrs	r0, BASEPRI
   137e2:	f383 8812 	msr	BASEPRI_MAX, r3
   137e6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   137ea:	f00a fb46 	bl	1de7a <z_reschedule_irqlock>
   137ee:	e7f3      	b.n	137d8 <z_impl_k_thread_suspend+0x64>
   137f0:	20009210 	.word	0x20009210
   137f4:	20009230 	.word	0x20009230

000137f8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   137f8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   137fa:	2300      	movs	r3, #0
   137fc:	f04f 0220 	mov.w	r2, #32
   13800:	f3ef 8411 	mrs	r4, BASEPRI
   13804:	f382 8812 	msr	BASEPRI_MAX, r2
   13808:	f3bf 8f6f 	isb	sy
   1380c:	e00c      	b.n	13828 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1380e:	4b0d      	ldr	r3, [pc, #52]	; (13844 <k_sched_unlock+0x4c>)
   13810:	689a      	ldr	r2, [r3, #8]
   13812:	7bd3      	ldrb	r3, [r2, #15]
   13814:	3301      	adds	r3, #1
   13816:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   13818:	2000      	movs	r0, #0
   1381a:	f7ff fde5 	bl	133e8 <update_cache>
	__asm__ volatile(
   1381e:	f384 8811 	msr	BASEPRI, r4
   13822:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13826:	2301      	movs	r3, #1
   13828:	2b00      	cmp	r3, #0
   1382a:	d0f0      	beq.n	1380e <k_sched_unlock+0x16>
	__asm__ volatile(
   1382c:	f04f 0320 	mov.w	r3, #32
   13830:	f3ef 8011 	mrs	r0, BASEPRI
   13834:	f383 8812 	msr	BASEPRI_MAX, r3
   13838:	f3bf 8f6f 	isb	sy
   1383c:	f00a fb1d 	bl	1de7a <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   13840:	bd10      	pop	{r4, pc}
   13842:	bf00      	nop
   13844:	20009210 	.word	0x20009210

00013848 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   13848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1384a:	7b43      	ldrb	r3, [r0, #13]
   1384c:	f013 0f08 	tst.w	r3, #8
   13850:	d145      	bne.n	138de <end_thread+0x96>
   13852:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   13854:	f043 0308 	orr.w	r3, r3, #8
   13858:	7343      	strb	r3, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1385a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1385e:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   13860:	f013 0f80 	tst.w	r3, #128	; 0x80
   13864:	d12d      	bne.n	138c2 <end_thread+0x7a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   13866:	68ab      	ldr	r3, [r5, #8]
   13868:	b15b      	cbz	r3, 13882 <end_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1386a:	4628      	mov	r0, r5
   1386c:	f00a faf9 	bl	1de62 <pended_on_thread>
   13870:	4629      	mov	r1, r5
   13872:	f00a fb17 	bl	1dea4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13876:	7b6b      	ldrb	r3, [r5, #13]
   13878:	f023 0302 	bic.w	r3, r3, #2
   1387c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1387e:	2300      	movs	r3, #0
   13880:	60ab      	str	r3, [r5, #8]
   13882:	f105 0018 	add.w	r0, r5, #24
   13886:	f00a fc6d 	bl	1e164 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1388a:	f105 0758 	add.w	r7, r5, #88	; 0x58
	return list->head == list;
   1388e:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13890:	42bc      	cmp	r4, r7
   13892:	d01e      	beq.n	138d2 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13894:	b1ec      	cbz	r4, 138d2 <end_thread+0x8a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13896:	4620      	mov	r0, r4
   13898:	f00a fae3 	bl	1de62 <pended_on_thread>
   1389c:	4621      	mov	r1, r4
   1389e:	f00a fb01 	bl	1dea4 <z_priq_dumb_remove>
   138a2:	7b63      	ldrb	r3, [r4, #13]
   138a4:	f023 0302 	bic.w	r3, r3, #2
   138a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   138aa:	2600      	movs	r6, #0
   138ac:	60a6      	str	r6, [r4, #8]
   138ae:	f104 0018 	add.w	r0, r4, #24
   138b2:	f00a fc57 	bl	1e164 <z_abort_timeout>
   138b6:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   138ba:	4620      	mov	r0, r4
   138bc:	f7ff fe6c 	bl	13598 <ready_thread>
   138c0:	e7e5      	b.n	1388e <end_thread+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   138c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   138c6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   138c8:	4601      	mov	r1, r0
   138ca:	4805      	ldr	r0, [pc, #20]	; (138e0 <end_thread+0x98>)
   138cc:	f00a faea 	bl	1dea4 <z_priq_dumb_remove>
}
   138d0:	e7c9      	b.n	13866 <end_thread+0x1e>
		update_cache(1);
   138d2:	2001      	movs	r0, #1
   138d4:	f7ff fd88 	bl	133e8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   138d8:	4628      	mov	r0, r5
   138da:	f7ff f903 	bl	12ae4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   138de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   138e0:	20009230 	.word	0x20009230

000138e4 <z_sched_init>:
{
   138e4:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   138e6:	4804      	ldr	r0, [pc, #16]	; (138f8 <z_sched_init+0x14>)
   138e8:	f00a fbea 	bl	1e0c0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   138ec:	2100      	movs	r1, #0
   138ee:	4608      	mov	r0, r1
   138f0:	f7ff fd0a 	bl	13308 <k_sched_time_slice_set>
}
   138f4:	bd08      	pop	{r3, pc}
   138f6:	bf00      	nop
   138f8:	2000922c 	.word	0x2000922c

000138fc <z_impl_k_yield>:
{
   138fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   138fe:	f04f 0320 	mov.w	r3, #32
   13902:	f3ef 8611 	mrs	r6, BASEPRI
   13906:	f383 8812 	msr	BASEPRI_MAX, r3
   1390a:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   1390e:	4c1c      	ldr	r4, [pc, #112]	; (13980 <z_impl_k_yield+0x84>)
   13910:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   13912:	7b4b      	ldrb	r3, [r1, #13]
   13914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13918:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   1391a:	f104 0720 	add.w	r7, r4, #32
   1391e:	4638      	mov	r0, r7
   13920:	f00a fac0 	bl	1dea4 <z_priq_dumb_remove>
	queue_thread(_current);
   13924:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   13926:	7b6b      	ldrb	r3, [r5, #13]
   13928:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1392c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1392e:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13930:	42bc      	cmp	r4, r7
   13932:	d023      	beq.n	1397c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13934:	b16c      	cbz	r4, 13952 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13936:	4621      	mov	r1, r4
   13938:	4628      	mov	r0, r5
   1393a:	f00a fa94 	bl	1de66 <z_sched_prio_cmp>
   1393e:	2800      	cmp	r0, #0
   13940:	dc16      	bgt.n	13970 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13942:	b134      	cbz	r4, 13952 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   13944:	4b0e      	ldr	r3, [pc, #56]	; (13980 <z_impl_k_yield+0x84>)
   13946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13948:	429c      	cmp	r4, r3
   1394a:	d002      	beq.n	13952 <z_impl_k_yield+0x56>
   1394c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1394e:	2c00      	cmp	r4, #0
   13950:	d1f0      	bne.n	13934 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   13952:	4b0b      	ldr	r3, [pc, #44]	; (13980 <z_impl_k_yield+0x84>)
   13954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   13956:	f103 0120 	add.w	r1, r3, #32
   1395a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1395c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1395e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   13960:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   13962:	2001      	movs	r0, #1
   13964:	f7ff fd40 	bl	133e8 <update_cache>
   13968:	4630      	mov	r0, r6
   1396a:	f7f1 f843 	bl	49f4 <arch_swap>
}
   1396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   13970:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   13972:	606b      	str	r3, [r5, #4]
	node->next = successor;
   13974:	602c      	str	r4, [r5, #0]
	prev->next = node;
   13976:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   13978:	6065      	str	r5, [r4, #4]
}
   1397a:	e7f2      	b.n	13962 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1397c:	2400      	movs	r4, #0
   1397e:	e7d9      	b.n	13934 <z_impl_k_yield+0x38>
   13980:	20009210 	.word	0x20009210

00013984 <z_tick_sleep>:
{
   13984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
   13988:	ea50 0301 	orrs.w	r3, r0, r1
   1398c:	d038      	beq.n	13a00 <z_tick_sleep+0x7c>
   1398e:	4604      	mov	r4, r0
   13990:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
   13992:	f06f 0301 	mvn.w	r3, #1
   13996:	1a1b      	subs	r3, r3, r0
   13998:	f04f 32ff 	mov.w	r2, #4294967295
   1399c:	eb62 0201 	sbc.w	r2, r2, r1
   139a0:	2b01      	cmp	r3, #1
   139a2:	f172 0300 	sbcs.w	r3, r2, #0
   139a6:	db2f      	blt.n	13a08 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   139a8:	f06f 0501 	mvn.w	r5, #1
   139ac:	1a2d      	subs	r5, r5, r0
   139ae:	f04f 0320 	mov.w	r3, #32
   139b2:	f3ef 8811 	mrs	r8, BASEPRI
   139b6:	f383 8812 	msr	BASEPRI_MAX, r3
   139ba:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   139be:	4f14      	ldr	r7, [pc, #80]	; (13a10 <z_tick_sleep+0x8c>)
   139c0:	68b8      	ldr	r0, [r7, #8]
   139c2:	4b14      	ldr	r3, [pc, #80]	; (13a14 <z_tick_sleep+0x90>)
   139c4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   139c6:	f7ff fe45 	bl	13654 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   139ca:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   139cc:	4622      	mov	r2, r4
   139ce:	4633      	mov	r3, r6
   139d0:	4911      	ldr	r1, [pc, #68]	; (13a18 <z_tick_sleep+0x94>)
   139d2:	3018      	adds	r0, #24
   139d4:	f000 f8f2 	bl	13bbc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   139d8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   139da:	7b53      	ldrb	r3, [r2, #13]
   139dc:	f043 0310 	orr.w	r3, r3, #16
   139e0:	7353      	strb	r3, [r2, #13]
   139e2:	4640      	mov	r0, r8
   139e4:	f7f1 f806 	bl	49f4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   139e8:	f00a fc1c 	bl	1e224 <sys_clock_tick_get_32>
   139ec:	1a28      	subs	r0, r5, r0
   139ee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   139f2:	2801      	cmp	r0, #1
   139f4:	f173 0300 	sbcs.w	r3, r3, #0
   139f8:	da00      	bge.n	139fc <z_tick_sleep+0x78>
	return 0;
   139fa:	2000      	movs	r0, #0
}
   139fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   13a00:	f7ff ff7c 	bl	138fc <z_impl_k_yield>
		return 0;
   13a04:	2000      	movs	r0, #0
   13a06:	e7f9      	b.n	139fc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   13a08:	f00a fc0c 	bl	1e224 <sys_clock_tick_get_32>
   13a0c:	1905      	adds	r5, r0, r4
   13a0e:	e7ce      	b.n	139ae <z_tick_sleep+0x2a>
   13a10:	20009210 	.word	0x20009210
   13a14:	20009244 	.word	0x20009244
   13a18:	0001df43 	.word	0x0001df43

00013a1c <z_impl_k_sleep>:
{
   13a1c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13a1e:	f1b1 3fff 	cmp.w	r1, #4294967295
   13a22:	bf08      	it	eq
   13a24:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   13a28:	d01a      	beq.n	13a60 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   13a2a:	f7ff ffab 	bl	13984 <z_tick_sleep>
   13a2e:	4684      	mov	ip, r0
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   13a30:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   13a32:	0151      	lsls	r1, r2, #5
   13a34:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   13a38:	0143      	lsls	r3, r0, #5
   13a3a:	1a1b      	subs	r3, r3, r0
   13a3c:	eb61 0102 	sbc.w	r1, r1, r2
   13a40:	0088      	lsls	r0, r1, #2
   13a42:	ea40 7093 	orr.w	r0, r0, r3, lsr #30
   13a46:	009b      	lsls	r3, r3, #2
   13a48:	eb13 030c 	adds.w	r3, r3, ip
   13a4c:	eb42 0000 	adc.w	r0, r2, r0
   13a50:	00c0      	lsls	r0, r0, #3
   13a52:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
   13a56:	f3c3 3310 	ubfx	r3, r3, #12, #17
   13a5a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
}
   13a5e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
   13a60:	4b03      	ldr	r3, [pc, #12]	; (13a70 <z_impl_k_sleep+0x54>)
   13a62:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   13a64:	f7ff fe86 	bl	13774 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   13a68:	f04f 30ff 	mov.w	r0, #4294967295
   13a6c:	e7f7      	b.n	13a5e <z_impl_k_sleep+0x42>
   13a6e:	bf00      	nop
   13a70:	20009210 	.word	0x20009210

00013a74 <z_impl_z_current_get>:
}
   13a74:	4b01      	ldr	r3, [pc, #4]	; (13a7c <z_impl_z_current_get+0x8>)
   13a76:	6898      	ldr	r0, [r3, #8]
   13a78:	4770      	bx	lr
   13a7a:	bf00      	nop
   13a7c:	20009210 	.word	0x20009210

00013a80 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   13a80:	b538      	push	{r3, r4, r5, lr}
   13a82:	f04f 0320 	mov.w	r3, #32
   13a86:	f3ef 8511 	mrs	r5, BASEPRI
   13a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   13a8e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   13a92:	7b43      	ldrb	r3, [r0, #13]
   13a94:	f013 0f08 	tst.w	r3, #8
   13a98:	d004      	beq.n	13aa4 <z_thread_abort+0x24>
	__asm__ volatile(
   13a9a:	f385 8811 	msr	BASEPRI, r5
   13a9e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   13aa2:	bd38      	pop	{r3, r4, r5, pc}
   13aa4:	4604      	mov	r4, r0
	end_thread(thread);
   13aa6:	f7ff fecf 	bl	13848 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   13aaa:	4b08      	ldr	r3, [pc, #32]	; (13acc <z_thread_abort+0x4c>)
   13aac:	689b      	ldr	r3, [r3, #8]
   13aae:	42a3      	cmp	r3, r4
   13ab0:	d004      	beq.n	13abc <z_thread_abort+0x3c>
   13ab2:	f385 8811 	msr	BASEPRI, r5
   13ab6:	f3bf 8f6f 	isb	sy
   13aba:	e7f2      	b.n	13aa2 <z_thread_abort+0x22>
   13abc:	f3ef 8305 	mrs	r3, IPSR
   13ac0:	2b00      	cmp	r3, #0
   13ac2:	d1f6      	bne.n	13ab2 <z_thread_abort+0x32>
   13ac4:	4628      	mov	r0, r5
   13ac6:	f7f0 ff95 	bl	49f4 <arch_swap>
	return ret;
   13aca:	e7f2      	b.n	13ab2 <z_thread_abort+0x32>
   13acc:	20009210 	.word	0x20009210

00013ad0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   13ad0:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   13ad4:	b083      	sub	sp, #12
   13ad6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   13ad8:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   13adc:	e9cd bc00 	strd	fp, ip, [sp]
   13ae0:	f7ff fdd4 	bl	1368c <z_pend_curr>

	if (data != NULL) {
   13ae4:	b11c      	cbz	r4, 13aee <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   13ae6:	4b03      	ldr	r3, [pc, #12]	; (13af4 <z_sched_wait+0x24>)
   13ae8:	689b      	ldr	r3, [r3, #8]
   13aea:	695b      	ldr	r3, [r3, #20]
   13aec:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   13aee:	b003      	add	sp, #12
   13af0:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   13af4:	20009210 	.word	0x20009210

00013af8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   13af8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   13afa:	4806      	ldr	r0, [pc, #24]	; (13b14 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   13afc:	4a06      	ldr	r2, [pc, #24]	; (13b18 <z_data_copy+0x20>)
   13afe:	1a12      	subs	r2, r2, r0
   13b00:	4906      	ldr	r1, [pc, #24]	; (13b1c <z_data_copy+0x24>)
   13b02:	f009 ff19 	bl	1d938 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   13b06:	4a06      	ldr	r2, [pc, #24]	; (13b20 <z_data_copy+0x28>)
   13b08:	4906      	ldr	r1, [pc, #24]	; (13b24 <z_data_copy+0x2c>)
   13b0a:	4807      	ldr	r0, [pc, #28]	; (13b28 <z_data_copy+0x30>)
   13b0c:	f009 ff14 	bl	1d938 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   13b10:	bd08      	pop	{r3, pc}
   13b12:	bf00      	nop
   13b14:	20000000 	.word	0x20000000
   13b18:	2000100c 	.word	0x2000100c
   13b1c:	0001fc78 	.word	0x0001fc78
   13b20:	00000000 	.word	0x00000000
   13b24:	0001fc78 	.word	0x0001fc78
   13b28:	20000000 	.word	0x20000000

00013b2c <first>:
	return list->head == list;
   13b2c:	4b03      	ldr	r3, [pc, #12]	; (13b3c <first+0x10>)
   13b2e:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b30:	4298      	cmp	r0, r3
   13b32:	d000      	beq.n	13b36 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   13b34:	4770      	bx	lr
   13b36:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   13b38:	e7fc      	b.n	13b34 <first+0x8>
   13b3a:	bf00      	nop
   13b3c:	20000940 	.word	0x20000940

00013b40 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13b40:	b130      	cbz	r0, 13b50 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   13b42:	4a04      	ldr	r2, [pc, #16]	; (13b54 <next+0x14>)
   13b44:	6852      	ldr	r2, [r2, #4]
   13b46:	4290      	cmp	r0, r2
   13b48:	d001      	beq.n	13b4e <next+0xe>
   13b4a:	6800      	ldr	r0, [r0, #0]
   13b4c:	4770      	bx	lr
   13b4e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   13b50:	4770      	bx	lr
   13b52:	bf00      	nop
   13b54:	20000940 	.word	0x20000940

00013b58 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   13b58:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13b5a:	4b04      	ldr	r3, [pc, #16]	; (13b6c <elapsed+0x14>)
   13b5c:	681b      	ldr	r3, [r3, #0]
   13b5e:	b10b      	cbz	r3, 13b64 <elapsed+0xc>
   13b60:	2000      	movs	r0, #0
}
   13b62:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   13b64:	f7fd fe16 	bl	11794 <sys_clock_elapsed>
   13b68:	e7fb      	b.n	13b62 <elapsed+0xa>
   13b6a:	bf00      	nop
   13b6c:	20009250 	.word	0x20009250

00013b70 <next_timeout>:

static int32_t next_timeout(void)
{
   13b70:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   13b72:	f7ff ffdb 	bl	13b2c <first>
   13b76:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   13b78:	f7ff ffee 	bl	13b58 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   13b7c:	b17c      	cbz	r4, 13b9e <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   13b7e:	6923      	ldr	r3, [r4, #16]
   13b80:	6962      	ldr	r2, [r4, #20]
   13b82:	1a1b      	subs	r3, r3, r0
   13b84:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   13b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13b8c:	f170 0200 	sbcs.w	r2, r0, #0
   13b90:	da08      	bge.n	13ba4 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   13b92:	2800      	cmp	r0, #0
   13b94:	db01      	blt.n	13b9a <next_timeout+0x2a>
   13b96:	4618      	mov	r0, r3
   13b98:	e006      	b.n	13ba8 <next_timeout+0x38>
   13b9a:	2300      	movs	r3, #0
   13b9c:	e7fb      	b.n	13b96 <next_timeout+0x26>
		ret = MAX_WAIT;
   13b9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13ba2:	e001      	b.n	13ba8 <next_timeout+0x38>
   13ba4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   13ba8:	4b03      	ldr	r3, [pc, #12]	; (13bb8 <next_timeout+0x48>)
   13baa:	691b      	ldr	r3, [r3, #16]
   13bac:	b113      	cbz	r3, 13bb4 <next_timeout+0x44>
   13bae:	4283      	cmp	r3, r0
   13bb0:	da00      	bge.n	13bb4 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   13bb2:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   13bb4:	bd10      	pop	{r4, pc}
   13bb6:	bf00      	nop
   13bb8:	20009210 	.word	0x20009210

00013bbc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
   13bc0:	bf08      	it	eq
   13bc2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   13bc6:	d07d      	beq.n	13cc4 <z_add_timeout+0x108>
{
   13bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13bcc:	4604      	mov	r4, r0
   13bce:	4692      	mov	sl, r2
   13bd0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   13bd2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   13bd4:	2300      	movs	r3, #0
	__asm__ volatile(
   13bd6:	f04f 0220 	mov.w	r2, #32
   13bda:	f3ef 8711 	mrs	r7, BASEPRI
   13bde:	f382 8812 	msr	BASEPRI_MAX, r2
   13be2:	f3bf 8f6f 	isb	sy
   13be6:	e021      	b.n	13c2c <z_add_timeout+0x70>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   13be8:	f11a 0801 	adds.w	r8, sl, #1
   13bec:	f145 0900 	adc.w	r9, r5, #0
   13bf0:	f7ff ffb2 	bl	13b58 <elapsed>
   13bf4:	eb18 0300 	adds.w	r3, r8, r0
   13bf8:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   13bfc:	6123      	str	r3, [r4, #16]
   13bfe:	6160      	str	r0, [r4, #20]
   13c00:	e036      	b.n	13c70 <z_add_timeout+0xb4>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   13c02:	1a51      	subs	r1, r2, r1
   13c04:	eb66 0303 	sbc.w	r3, r6, r3
   13c08:	6101      	str	r1, [r0, #16]
   13c0a:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   13c0c:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   13c0e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13c10:	6020      	str	r0, [r4, #0]
	prev->next = node;
   13c12:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13c14:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   13c16:	2800      	cmp	r0, #0
   13c18:	d03e      	beq.n	13c98 <z_add_timeout+0xdc>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   13c1a:	f7ff ff87 	bl	13b2c <first>
   13c1e:	4284      	cmp	r4, r0
   13c20:	d041      	beq.n	13ca6 <z_add_timeout+0xea>
	__asm__ volatile(
   13c22:	f387 8811 	msr	BASEPRI, r7
   13c26:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13c2a:	2301      	movs	r3, #1
   13c2c:	2b00      	cmp	r3, #0
   13c2e:	d147      	bne.n	13cc0 <z_add_timeout+0x104>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   13c30:	4653      	mov	r3, sl
   13c32:	f06f 0101 	mvn.w	r1, #1
   13c36:	ebb1 010a 	subs.w	r1, r1, sl
   13c3a:	f04f 30ff 	mov.w	r0, #4294967295
   13c3e:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   13c42:	2a00      	cmp	r2, #0
   13c44:	dbd0      	blt.n	13be8 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   13c46:	4a20      	ldr	r2, [pc, #128]	; (13cc8 <z_add_timeout+0x10c>)
   13c48:	6811      	ldr	r1, [r2, #0]
   13c4a:	6852      	ldr	r2, [r2, #4]
   13c4c:	185b      	adds	r3, r3, r1
   13c4e:	eb42 0205 	adc.w	r2, r2, r5
   13c52:	f06f 0101 	mvn.w	r1, #1
   13c56:	1acb      	subs	r3, r1, r3
   13c58:	eb60 0202 	sbc.w	r2, r0, r2
			to->dticks = MAX(1, ticks);
   13c5c:	4618      	mov	r0, r3
   13c5e:	4611      	mov	r1, r2
   13c60:	2b01      	cmp	r3, #1
   13c62:	f172 0300 	sbcs.w	r3, r2, #0
   13c66:	da01      	bge.n	13c6c <z_add_timeout+0xb0>
   13c68:	2001      	movs	r0, #1
   13c6a:	2100      	movs	r1, #0
   13c6c:	6120      	str	r0, [r4, #16]
   13c6e:	6161      	str	r1, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   13c70:	f7ff ff5c 	bl	13b2c <first>
   13c74:	2800      	cmp	r0, #0
   13c76:	d0ce      	beq.n	13c16 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
   13c78:	6902      	ldr	r2, [r0, #16]
   13c7a:	6946      	ldr	r6, [r0, #20]
   13c7c:	6921      	ldr	r1, [r4, #16]
   13c7e:	6963      	ldr	r3, [r4, #20]
   13c80:	4291      	cmp	r1, r2
   13c82:	eb73 0c06 	sbcs.w	ip, r3, r6
   13c86:	dbbc      	blt.n	13c02 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
   13c88:	1a89      	subs	r1, r1, r2
   13c8a:	eb63 0306 	sbc.w	r3, r3, r6
   13c8e:	6121      	str	r1, [r4, #16]
   13c90:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   13c92:	f7ff ff55 	bl	13b40 <next>
   13c96:	e7ed      	b.n	13c74 <z_add_timeout+0xb8>
	sys_dnode_t *const tail = list->tail;
   13c98:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <z_add_timeout+0x110>)
   13c9a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   13c9c:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   13c9e:	6062      	str	r2, [r4, #4]
	tail->next = node;
   13ca0:	6014      	str	r4, [r2, #0]
	list->tail = node;
   13ca2:	605c      	str	r4, [r3, #4]
}
   13ca4:	e7b9      	b.n	13c1a <z_add_timeout+0x5e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   13ca6:	f7ff ff63 	bl	13b70 <next_timeout>

			if (next_time == 0 ||
   13caa:	4603      	mov	r3, r0
   13cac:	b118      	cbz	r0, 13cb6 <z_add_timeout+0xfa>
			    _current_cpu->slice_ticks != next_time) {
   13cae:	4a08      	ldr	r2, [pc, #32]	; (13cd0 <z_add_timeout+0x114>)
   13cb0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   13cb2:	4282      	cmp	r2, r0
   13cb4:	d0b5      	beq.n	13c22 <z_add_timeout+0x66>
				sys_clock_set_timeout(next_time, false);
   13cb6:	2100      	movs	r1, #0
   13cb8:	4618      	mov	r0, r3
   13cba:	f7fd fd39 	bl	11730 <sys_clock_set_timeout>
   13cbe:	e7b0      	b.n	13c22 <z_add_timeout+0x66>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   13cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13cc4:	4770      	bx	lr
   13cc6:	bf00      	nop
   13cc8:	20001408 	.word	0x20001408
   13ccc:	20000940 	.word	0x20000940
   13cd0:	20009210 	.word	0x20009210

00013cd4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   13cd4:	b570      	push	{r4, r5, r6, lr}
   13cd6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   13cd8:	f7ff fc06 	bl	134e8 <z_time_slice>
	__asm__ volatile(
   13cdc:	f04f 0320 	mov.w	r3, #32
   13ce0:	f3ef 8511 	mrs	r5, BASEPRI
   13ce4:	f383 8812 	msr	BASEPRI_MAX, r3
   13ce8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   13cec:	4b28      	ldr	r3, [pc, #160]	; (13d90 <sys_clock_announce+0xbc>)
   13cee:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   13cf0:	e020      	b.n	13d34 <sys_clock_announce+0x60>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   13cf2:	4828      	ldr	r0, [pc, #160]	; (13d94 <sys_clock_announce+0xc0>)
   13cf4:	6801      	ldr	r1, [r0, #0]
   13cf6:	6846      	ldr	r6, [r0, #4]
   13cf8:	1889      	adds	r1, r1, r2
   13cfa:	eb46 76e2 	adc.w	r6, r6, r2, asr #31
   13cfe:	6001      	str	r1, [r0, #0]
   13d00:	6046      	str	r6, [r0, #4]
		announce_remaining -= dt;
   13d02:	1a9b      	subs	r3, r3, r2
   13d04:	4a22      	ldr	r2, [pc, #136]	; (13d90 <sys_clock_announce+0xbc>)
   13d06:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   13d08:	2200      	movs	r2, #0
   13d0a:	2300      	movs	r3, #0
   13d0c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   13d10:	4620      	mov	r0, r4
   13d12:	f00a fa10 	bl	1e136 <remove_timeout>
	__asm__ volatile(
   13d16:	f385 8811 	msr	BASEPRI, r5
   13d1a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   13d1e:	68a3      	ldr	r3, [r4, #8]
   13d20:	4620      	mov	r0, r4
   13d22:	4798      	blx	r3
	__asm__ volatile(
   13d24:	f04f 0320 	mov.w	r3, #32
   13d28:	f3ef 8511 	mrs	r5, BASEPRI
   13d2c:	f383 8812 	msr	BASEPRI_MAX, r3
   13d30:	f3bf 8f6f 	isb	sy
	while (first() != NULL && first()->dticks <= announce_remaining) {
   13d34:	f7ff fefa 	bl	13b2c <first>
   13d38:	4604      	mov	r4, r0
   13d3a:	b140      	cbz	r0, 13d4e <sys_clock_announce+0x7a>
   13d3c:	6902      	ldr	r2, [r0, #16]
   13d3e:	6941      	ldr	r1, [r0, #20]
   13d40:	4b13      	ldr	r3, [pc, #76]	; (13d90 <sys_clock_announce+0xbc>)
   13d42:	681b      	ldr	r3, [r3, #0]
   13d44:	17d8      	asrs	r0, r3, #31
   13d46:	4293      	cmp	r3, r2
   13d48:	eb70 0101 	sbcs.w	r1, r0, r1
   13d4c:	dad1      	bge.n	13cf2 <sys_clock_announce+0x1e>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   13d4e:	b144      	cbz	r4, 13d62 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   13d50:	4b0f      	ldr	r3, [pc, #60]	; (13d90 <sys_clock_announce+0xbc>)
   13d52:	6819      	ldr	r1, [r3, #0]
   13d54:	6923      	ldr	r3, [r4, #16]
   13d56:	6962      	ldr	r2, [r4, #20]
   13d58:	1a5b      	subs	r3, r3, r1
   13d5a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   13d5e:	6123      	str	r3, [r4, #16]
   13d60:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   13d62:	4a0c      	ldr	r2, [pc, #48]	; (13d94 <sys_clock_announce+0xc0>)
   13d64:	4e0a      	ldr	r6, [pc, #40]	; (13d90 <sys_clock_announce+0xbc>)
   13d66:	6830      	ldr	r0, [r6, #0]
   13d68:	6813      	ldr	r3, [r2, #0]
   13d6a:	6851      	ldr	r1, [r2, #4]
   13d6c:	181b      	adds	r3, r3, r0
   13d6e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   13d72:	6013      	str	r3, [r2, #0]
   13d74:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   13d76:	2400      	movs	r4, #0
   13d78:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   13d7a:	f7ff fef9 	bl	13b70 <next_timeout>
   13d7e:	4621      	mov	r1, r4
   13d80:	f7fd fcd6 	bl	11730 <sys_clock_set_timeout>
	__asm__ volatile(
   13d84:	f385 8811 	msr	BASEPRI, r5
   13d88:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   13d8c:	bd70      	pop	{r4, r5, r6, pc}
   13d8e:	bf00      	nop
   13d90:	20009250 	.word	0x20009250
   13d94:	20001408 	.word	0x20001408

00013d98 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   13d98:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   13d9a:	2300      	movs	r3, #0
	__asm__ volatile(
   13d9c:	f04f 0220 	mov.w	r2, #32
   13da0:	f3ef 8411 	mrs	r4, BASEPRI
   13da4:	f382 8812 	msr	BASEPRI_MAX, r2
   13da8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   13dac:	4618      	mov	r0, r3
   13dae:	4619      	mov	r1, r3
   13db0:	e00c      	b.n	13dcc <sys_clock_tick_get+0x34>
		t = curr_tick + sys_clock_elapsed();
   13db2:	f7fd fcef 	bl	11794 <sys_clock_elapsed>
   13db6:	4a07      	ldr	r2, [pc, #28]	; (13dd4 <sys_clock_tick_get+0x3c>)
   13db8:	6813      	ldr	r3, [r2, #0]
   13dba:	6851      	ldr	r1, [r2, #4]
   13dbc:	18c0      	adds	r0, r0, r3
   13dbe:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   13dc2:	f384 8811 	msr	BASEPRI, r4
   13dc6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13dca:	2301      	movs	r3, #1
   13dcc:	2b00      	cmp	r3, #0
   13dce:	d0f0      	beq.n	13db2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
   13dd0:	bd10      	pop	{r4, pc}
   13dd2:	bf00      	nop
   13dd4:	20001408 	.word	0x20001408

00013dd8 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   13dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ddc:	b087      	sub	sp, #28
   13dde:	4682      	mov	sl, r0
   13de0:	460f      	mov	r7, r1
   13de2:	4693      	mov	fp, r2
   13de4:	9300      	str	r3, [sp, #0]
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   13de6:	2500      	movs	r5, #0
	int events_registered = 0;
   13de8:	9501      	str	r5, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   13dea:	e02f      	b.n	13e4c <register_events+0x74>
		if (k_sem_count_get(event->sem) > 0U) {
   13dec:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   13dee:	689b      	ldr	r3, [r3, #8]
   13df0:	b1cb      	cbz	r3, 13e26 <register_events+0x4e>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   13df2:	f04f 0902 	mov.w	r9, #2
			return true;
   13df6:	2301      	movs	r3, #1
   13df8:	e015      	b.n	13e26 <register_events+0x4e>
		if (!k_queue_is_empty(event->queue)) {
   13dfa:	6923      	ldr	r3, [r4, #16]
	return list->head;
   13dfc:	681b      	ldr	r3, [r3, #0]
   13dfe:	b193      	cbz	r3, 13e26 <register_events+0x4e>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   13e00:	f04f 0904 	mov.w	r9, #4
			return true;
   13e04:	2301      	movs	r3, #1
   13e06:	e00e      	b.n	13e26 <register_events+0x4e>
		if (event->signal->signaled != 0U) {
   13e08:	6923      	ldr	r3, [r4, #16]
   13e0a:	689b      	ldr	r3, [r3, #8]
   13e0c:	b15b      	cbz	r3, 13e26 <register_events+0x4e>
			*state = K_POLL_STATE_SIGNALED;
   13e0e:	f04f 0901 	mov.w	r9, #1
			return true;
   13e12:	464b      	mov	r3, r9
   13e14:	e007      	b.n	13e26 <register_events+0x4e>
		if (event->msgq->used_msgs > 0) {
   13e16:	6923      	ldr	r3, [r4, #16]
   13e18:	6a1b      	ldr	r3, [r3, #32]
   13e1a:	b123      	cbz	r3, 13e26 <register_events+0x4e>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   13e1c:	f04f 0910 	mov.w	r9, #16
			return true;
   13e20:	2301      	movs	r3, #1
   13e22:	e000      	b.n	13e26 <register_events+0x4e>
	switch (event->type) {
   13e24:	2300      	movs	r3, #0
		k_spinlock_key_t key;
		uint32_t state;

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
   13e26:	2b00      	cmp	r3, #0
   13e28:	d03a      	beq.n	13ea0 <register_events+0xc8>
	event->poller = NULL;
   13e2a:	2100      	movs	r1, #0
   13e2c:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   13e2e:	68e3      	ldr	r3, [r4, #12]
   13e30:	f3c3 3245 	ubfx	r2, r3, #13, #6
   13e34:	ea49 0202 	orr.w	r2, r9, r2
   13e38:	f362 3352 	bfi	r3, r2, #13, #6
   13e3c:	60e3      	str	r3, [r4, #12]
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
   13e3e:	f88b 1000 	strb.w	r1, [fp]
   13e42:	f386 8811 	msr	BASEPRI, r6
   13e46:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   13e4a:	3501      	adds	r5, #1
   13e4c:	42bd      	cmp	r5, r7
   13e4e:	f280 81b9 	bge.w	141c4 <register_events+0x3ec>
	__asm__ volatile(
   13e52:	f04f 0320 	mov.w	r3, #32
   13e56:	f3ef 8611 	mrs	r6, BASEPRI
   13e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   13e5e:	f3bf 8f6f 	isb	sy
		if (is_condition_met(&events[ii], &state)) {
   13e62:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   13e66:	ea4f 0884 	mov.w	r8, r4, lsl #2
   13e6a:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
	switch (event->type) {
   13e6e:	7b63      	ldrb	r3, [r4, #13]
   13e70:	f003 031f 	and.w	r3, r3, #31
   13e74:	3b01      	subs	r3, #1
   13e76:	2b07      	cmp	r3, #7
   13e78:	d8d4      	bhi.n	13e24 <register_events+0x4c>
   13e7a:	a201      	add	r2, pc, #4	; (adr r2, 13e80 <register_events+0xa8>)
   13e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13e80:	00013e09 	.word	0x00013e09
   13e84:	00013ded 	.word	0x00013ded
   13e88:	00013e25 	.word	0x00013e25
   13e8c:	00013dfb 	.word	0x00013dfb
   13e90:	00013e25 	.word	0x00013e25
   13e94:	00013e25 	.word	0x00013e25
   13e98:	00013e25 	.word	0x00013e25
   13e9c:	00013e17 	.word	0x00013e17
		} else if (!just_check && poller->is_polling) {
   13ea0:	9b00      	ldr	r3, [sp, #0]
   13ea2:	2b00      	cmp	r3, #0
   13ea4:	d1cd      	bne.n	13e42 <register_events+0x6a>
   13ea6:	f89b 3000 	ldrb.w	r3, [fp]
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d0c9      	beq.n	13e42 <register_events+0x6a>
	switch (event->type) {
   13eae:	7b63      	ldrb	r3, [r4, #13]
   13eb0:	f003 031f 	and.w	r3, r3, #31
   13eb4:	3b01      	subs	r3, #1
   13eb6:	2b07      	cmp	r3, #7
   13eb8:	d848      	bhi.n	13f4c <register_events+0x174>
   13eba:	e8df f013 	tbh	[pc, r3, lsl #1]
   13ebe:	00cb      	.short	0x00cb
   13ec0:	00470008 	.word	0x00470008
   13ec4:	0047006d 	.word	0x0047006d
   13ec8:	00470047 	.word	0x00470047
   13ecc:	0125      	.short	0x0125
		add_event(&event->sem->poll_events, event, poller);
   13ece:	6923      	ldr	r3, [r4, #16]
   13ed0:	9304      	str	r3, [sp, #16]
   13ed2:	f103 0210 	add.w	r2, r3, #16
   13ed6:	9202      	str	r2, [sp, #8]
	return list->head == list;
   13ed8:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13eda:	429a      	cmp	r2, r3
   13edc:	d02f      	beq.n	13f3e <register_events+0x166>
   13ede:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   13ee0:	2b00      	cmp	r3, #0
   13ee2:	d02c      	beq.n	13f3e <register_events+0x166>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   13ee4:	6898      	ldr	r0, [r3, #8]
   13ee6:	f00a f9d7 	bl	1e298 <poller_thread>
   13eea:	9005      	str	r0, [sp, #20]
   13eec:	4658      	mov	r0, fp
   13eee:	f00a f9d3 	bl	1e298 <poller_thread>
   13ef2:	4601      	mov	r1, r0
   13ef4:	9003      	str	r0, [sp, #12]
   13ef6:	9805      	ldr	r0, [sp, #20]
   13ef8:	f009 ffb5 	bl	1de66 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   13efc:	2800      	cmp	r0, #0
   13efe:	dc1e      	bgt.n	13f3e <register_events+0x166>
	return list->head == list;
   13f00:	9b04      	ldr	r3, [sp, #16]
   13f02:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f04:	9a02      	ldr	r2, [sp, #8]
   13f06:	429a      	cmp	r2, r3
   13f08:	d030      	beq.n	13f6c <register_events+0x194>
   13f0a:	9404      	str	r4, [sp, #16]
   13f0c:	9505      	str	r5, [sp, #20]
   13f0e:	9d02      	ldr	r5, [sp, #8]
   13f10:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13f12:	2c00      	cmp	r4, #0
   13f14:	d030      	beq.n	13f78 <register_events+0x1a0>
		if (z_sched_prio_cmp(poller_thread(poller),
   13f16:	68a0      	ldr	r0, [r4, #8]
   13f18:	f00a f9be 	bl	1e298 <poller_thread>
   13f1c:	4601      	mov	r1, r0
   13f1e:	9803      	ldr	r0, [sp, #12]
   13f20:	f009 ffa1 	bl	1de66 <z_sched_prio_cmp>
   13f24:	2800      	cmp	r0, #0
   13f26:	dc17      	bgt.n	13f58 <register_events+0x180>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13f28:	2c00      	cmp	r4, #0
   13f2a:	d028      	beq.n	13f7e <register_events+0x1a6>
	return (node == list->tail) ? NULL : node->next;
   13f2c:	686b      	ldr	r3, [r5, #4]
   13f2e:	429c      	cmp	r4, r3
   13f30:	d02f      	beq.n	13f92 <register_events+0x1ba>
   13f32:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13f34:	2c00      	cmp	r4, #0
   13f36:	d1ec      	bne.n	13f12 <register_events+0x13a>
   13f38:	9c04      	ldr	r4, [sp, #16]
   13f3a:	9d05      	ldr	r5, [sp, #20]
   13f3c:	e021      	b.n	13f82 <register_events+0x1aa>
	sys_dnode_t *const tail = list->tail;
   13f3e:	9a02      	ldr	r2, [sp, #8]
   13f40:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   13f42:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   13f46:	6063      	str	r3, [r4, #4]
	tail->next = node;
   13f48:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13f4a:	6054      	str	r4, [r2, #4]
	event->poller = poller;
   13f4c:	f8c4 b008 	str.w	fp, [r4, #8]
			register_event(&events[ii], poller);
			events_registered += 1;
   13f50:	9b01      	ldr	r3, [sp, #4]
   13f52:	3301      	adds	r3, #1
   13f54:	9301      	str	r3, [sp, #4]
   13f56:	e774      	b.n	13e42 <register_events+0x6a>
	sys_dnode_t *const prev = successor->prev;
   13f58:	9d05      	ldr	r5, [sp, #20]
   13f5a:	4622      	mov	r2, r4
   13f5c:	9c04      	ldr	r4, [sp, #16]
   13f5e:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   13f60:	6063      	str	r3, [r4, #4]
	node->next = successor;
   13f62:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   13f66:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   13f68:	6054      	str	r4, [r2, #4]
			return;
   13f6a:	e7ef      	b.n	13f4c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13f6c:	2300      	movs	r3, #0
   13f6e:	9404      	str	r4, [sp, #16]
   13f70:	9505      	str	r5, [sp, #20]
   13f72:	9d02      	ldr	r5, [sp, #8]
   13f74:	461c      	mov	r4, r3
   13f76:	e7cc      	b.n	13f12 <register_events+0x13a>
   13f78:	9c04      	ldr	r4, [sp, #16]
   13f7a:	9d05      	ldr	r5, [sp, #20]
   13f7c:	e001      	b.n	13f82 <register_events+0x1aa>
   13f7e:	9c04      	ldr	r4, [sp, #16]
   13f80:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   13f82:	9a02      	ldr	r2, [sp, #8]
   13f84:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   13f86:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   13f8a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   13f8c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13f8e:	6054      	str	r4, [r2, #4]
}
   13f90:	e7dc      	b.n	13f4c <register_events+0x174>
   13f92:	9c04      	ldr	r4, [sp, #16]
   13f94:	9d05      	ldr	r5, [sp, #20]
   13f96:	e7f4      	b.n	13f82 <register_events+0x1aa>
		add_event(&event->queue->poll_events, event, poller);
   13f98:	6923      	ldr	r3, [r4, #16]
   13f9a:	9304      	str	r3, [sp, #16]
   13f9c:	f103 0210 	add.w	r2, r3, #16
   13fa0:	9202      	str	r2, [sp, #8]
	return list->head == list;
   13fa2:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   13fa4:	429a      	cmp	r2, r3
   13fa6:	d02d      	beq.n	14004 <register_events+0x22c>
   13fa8:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   13faa:	b35b      	cbz	r3, 14004 <register_events+0x22c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   13fac:	6898      	ldr	r0, [r3, #8]
   13fae:	f00a f973 	bl	1e298 <poller_thread>
   13fb2:	9005      	str	r0, [sp, #20]
   13fb4:	4658      	mov	r0, fp
   13fb6:	f00a f96f 	bl	1e298 <poller_thread>
   13fba:	4601      	mov	r1, r0
   13fbc:	9003      	str	r0, [sp, #12]
   13fbe:	9805      	ldr	r0, [sp, #20]
   13fc0:	f009 ff51 	bl	1de66 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   13fc4:	2800      	cmp	r0, #0
   13fc6:	dc1d      	bgt.n	14004 <register_events+0x22c>
	return list->head == list;
   13fc8:	9b04      	ldr	r3, [sp, #16]
   13fca:	691b      	ldr	r3, [r3, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13fcc:	9a02      	ldr	r2, [sp, #8]
   13fce:	429a      	cmp	r2, r3
   13fd0:	d02a      	beq.n	14028 <register_events+0x250>
   13fd2:	9404      	str	r4, [sp, #16]
   13fd4:	9505      	str	r5, [sp, #20]
   13fd6:	9d02      	ldr	r5, [sp, #8]
   13fd8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13fda:	2c00      	cmp	r4, #0
   13fdc:	d02a      	beq.n	14034 <register_events+0x25c>
		if (z_sched_prio_cmp(poller_thread(poller),
   13fde:	68a0      	ldr	r0, [r4, #8]
   13fe0:	f00a f95a 	bl	1e298 <poller_thread>
   13fe4:	4601      	mov	r1, r0
   13fe6:	9803      	ldr	r0, [sp, #12]
   13fe8:	f009 ff3d 	bl	1de66 <z_sched_prio_cmp>
   13fec:	2800      	cmp	r0, #0
   13fee:	dc11      	bgt.n	14014 <register_events+0x23c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13ff0:	b31c      	cbz	r4, 1403a <register_events+0x262>
	return (node == list->tail) ? NULL : node->next;
   13ff2:	686b      	ldr	r3, [r5, #4]
   13ff4:	429c      	cmp	r4, r3
   13ff6:	d02a      	beq.n	1404e <register_events+0x276>
   13ff8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   13ffa:	2c00      	cmp	r4, #0
   13ffc:	d1ed      	bne.n	13fda <register_events+0x202>
   13ffe:	9c04      	ldr	r4, [sp, #16]
   14000:	9d05      	ldr	r5, [sp, #20]
   14002:	e01c      	b.n	1403e <register_events+0x266>
	sys_dnode_t *const tail = list->tail;
   14004:	9a02      	ldr	r2, [sp, #8]
   14006:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   14008:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1400c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1400e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14010:	6054      	str	r4, [r2, #4]
		return;
   14012:	e79b      	b.n	13f4c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   14014:	9d05      	ldr	r5, [sp, #20]
   14016:	4622      	mov	r2, r4
   14018:	9c04      	ldr	r4, [sp, #16]
   1401a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1401c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1401e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   14022:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14024:	6054      	str	r4, [r2, #4]
			return;
   14026:	e791      	b.n	13f4c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14028:	2300      	movs	r3, #0
   1402a:	9404      	str	r4, [sp, #16]
   1402c:	9505      	str	r5, [sp, #20]
   1402e:	9d02      	ldr	r5, [sp, #8]
   14030:	461c      	mov	r4, r3
   14032:	e7d2      	b.n	13fda <register_events+0x202>
   14034:	9c04      	ldr	r4, [sp, #16]
   14036:	9d05      	ldr	r5, [sp, #20]
   14038:	e001      	b.n	1403e <register_events+0x266>
   1403a:	9c04      	ldr	r4, [sp, #16]
   1403c:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   1403e:	9a02      	ldr	r2, [sp, #8]
   14040:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   14042:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   14046:	6063      	str	r3, [r4, #4]
	tail->next = node;
   14048:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1404a:	6054      	str	r4, [r2, #4]
}
   1404c:	e77e      	b.n	13f4c <register_events+0x174>
   1404e:	9c04      	ldr	r4, [sp, #16]
   14050:	9d05      	ldr	r5, [sp, #20]
   14052:	e7f4      	b.n	1403e <register_events+0x266>
		add_event(&event->signal->poll_events, event, poller);
   14054:	6922      	ldr	r2, [r4, #16]
   14056:	9202      	str	r2, [sp, #8]
	return list->head == list;
   14058:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1405a:	429a      	cmp	r2, r3
   1405c:	d02c      	beq.n	140b8 <register_events+0x2e0>
   1405e:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   14060:	b353      	cbz	r3, 140b8 <register_events+0x2e0>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   14062:	6898      	ldr	r0, [r3, #8]
   14064:	f00a f918 	bl	1e298 <poller_thread>
   14068:	9004      	str	r0, [sp, #16]
   1406a:	4658      	mov	r0, fp
   1406c:	f00a f914 	bl	1e298 <poller_thread>
   14070:	4601      	mov	r1, r0
   14072:	9003      	str	r0, [sp, #12]
   14074:	9804      	ldr	r0, [sp, #16]
   14076:	f009 fef6 	bl	1de66 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1407a:	2800      	cmp	r0, #0
   1407c:	dc1c      	bgt.n	140b8 <register_events+0x2e0>
	return list->head == list;
   1407e:	9b02      	ldr	r3, [sp, #8]
   14080:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14082:	4293      	cmp	r3, r2
   14084:	d02a      	beq.n	140dc <register_events+0x304>
   14086:	9404      	str	r4, [sp, #16]
   14088:	9505      	str	r5, [sp, #20]
   1408a:	9d02      	ldr	r5, [sp, #8]
   1408c:	4614      	mov	r4, r2
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1408e:	2c00      	cmp	r4, #0
   14090:	d02a      	beq.n	140e8 <register_events+0x310>
		if (z_sched_prio_cmp(poller_thread(poller),
   14092:	68a0      	ldr	r0, [r4, #8]
   14094:	f00a f900 	bl	1e298 <poller_thread>
   14098:	4601      	mov	r1, r0
   1409a:	9803      	ldr	r0, [sp, #12]
   1409c:	f009 fee3 	bl	1de66 <z_sched_prio_cmp>
   140a0:	2800      	cmp	r0, #0
   140a2:	dc11      	bgt.n	140c8 <register_events+0x2f0>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   140a4:	b31c      	cbz	r4, 140ee <register_events+0x316>
	return (node == list->tail) ? NULL : node->next;
   140a6:	686b      	ldr	r3, [r5, #4]
   140a8:	429c      	cmp	r4, r3
   140aa:	d02a      	beq.n	14102 <register_events+0x32a>
   140ac:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   140ae:	2c00      	cmp	r4, #0
   140b0:	d1ed      	bne.n	1408e <register_events+0x2b6>
   140b2:	9c04      	ldr	r4, [sp, #16]
   140b4:	9d05      	ldr	r5, [sp, #20]
   140b6:	e01c      	b.n	140f2 <register_events+0x31a>
	sys_dnode_t *const tail = list->tail;
   140b8:	9a02      	ldr	r2, [sp, #8]
   140ba:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   140bc:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   140c0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   140c2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   140c4:	6054      	str	r4, [r2, #4]
		return;
   140c6:	e741      	b.n	13f4c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   140c8:	9d05      	ldr	r5, [sp, #20]
   140ca:	4622      	mov	r2, r4
   140cc:	9c04      	ldr	r4, [sp, #16]
   140ce:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   140d0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   140d2:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   140d6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   140d8:	6054      	str	r4, [r2, #4]
			return;
   140da:	e737      	b.n	13f4c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   140dc:	2300      	movs	r3, #0
   140de:	9404      	str	r4, [sp, #16]
   140e0:	9505      	str	r5, [sp, #20]
   140e2:	9d02      	ldr	r5, [sp, #8]
   140e4:	461c      	mov	r4, r3
   140e6:	e7d2      	b.n	1408e <register_events+0x2b6>
   140e8:	9c04      	ldr	r4, [sp, #16]
   140ea:	9d05      	ldr	r5, [sp, #20]
   140ec:	e001      	b.n	140f2 <register_events+0x31a>
   140ee:	9c04      	ldr	r4, [sp, #16]
   140f0:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   140f2:	9a02      	ldr	r2, [sp, #8]
   140f4:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   140f6:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   140fa:	6063      	str	r3, [r4, #4]
	tail->next = node;
   140fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   140fe:	6054      	str	r4, [r2, #4]
}
   14100:	e724      	b.n	13f4c <register_events+0x174>
   14102:	9c04      	ldr	r4, [sp, #16]
   14104:	9d05      	ldr	r5, [sp, #20]
   14106:	e7f4      	b.n	140f2 <register_events+0x31a>
		add_event(&event->msgq->poll_events, event, poller);
   14108:	6923      	ldr	r3, [r4, #16]
   1410a:	9304      	str	r3, [sp, #16]
   1410c:	f103 0224 	add.w	r2, r3, #36	; 0x24
   14110:	9202      	str	r2, [sp, #8]
	return list->head == list;
   14112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   14114:	429a      	cmp	r2, r3
   14116:	d02d      	beq.n	14174 <register_events+0x39c>
   14118:	6853      	ldr	r3, [r2, #4]
	if ((pending == NULL) ||
   1411a:	b35b      	cbz	r3, 14174 <register_events+0x39c>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1411c:	6898      	ldr	r0, [r3, #8]
   1411e:	f00a f8bb 	bl	1e298 <poller_thread>
   14122:	9005      	str	r0, [sp, #20]
   14124:	4658      	mov	r0, fp
   14126:	f00a f8b7 	bl	1e298 <poller_thread>
   1412a:	4601      	mov	r1, r0
   1412c:	9003      	str	r0, [sp, #12]
   1412e:	9805      	ldr	r0, [sp, #20]
   14130:	f009 fe99 	bl	1de66 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   14134:	2800      	cmp	r0, #0
   14136:	dc1d      	bgt.n	14174 <register_events+0x39c>
	return list->head == list;
   14138:	9b04      	ldr	r3, [sp, #16]
   1413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1413c:	9a02      	ldr	r2, [sp, #8]
   1413e:	429a      	cmp	r2, r3
   14140:	d02a      	beq.n	14198 <register_events+0x3c0>
   14142:	9404      	str	r4, [sp, #16]
   14144:	9505      	str	r5, [sp, #20]
   14146:	9d02      	ldr	r5, [sp, #8]
   14148:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1414a:	2c00      	cmp	r4, #0
   1414c:	d02a      	beq.n	141a4 <register_events+0x3cc>
		if (z_sched_prio_cmp(poller_thread(poller),
   1414e:	68a0      	ldr	r0, [r4, #8]
   14150:	f00a f8a2 	bl	1e298 <poller_thread>
   14154:	4601      	mov	r1, r0
   14156:	9803      	ldr	r0, [sp, #12]
   14158:	f009 fe85 	bl	1de66 <z_sched_prio_cmp>
   1415c:	2800      	cmp	r0, #0
   1415e:	dc11      	bgt.n	14184 <register_events+0x3ac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14160:	b31c      	cbz	r4, 141aa <register_events+0x3d2>
	return (node == list->tail) ? NULL : node->next;
   14162:	686b      	ldr	r3, [r5, #4]
   14164:	429c      	cmp	r4, r3
   14166:	d02a      	beq.n	141be <register_events+0x3e6>
   14168:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1416a:	2c00      	cmp	r4, #0
   1416c:	d1ed      	bne.n	1414a <register_events+0x372>
   1416e:	9c04      	ldr	r4, [sp, #16]
   14170:	9d05      	ldr	r5, [sp, #20]
   14172:	e01c      	b.n	141ae <register_events+0x3d6>
	sys_dnode_t *const tail = list->tail;
   14174:	9a02      	ldr	r2, [sp, #8]
   14176:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   14178:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   1417c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1417e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   14180:	6054      	str	r4, [r2, #4]
		return;
   14182:	e6e3      	b.n	13f4c <register_events+0x174>
	sys_dnode_t *const prev = successor->prev;
   14184:	9d05      	ldr	r5, [sp, #20]
   14186:	4622      	mov	r2, r4
   14188:	9c04      	ldr	r4, [sp, #16]
   1418a:	6853      	ldr	r3, [r2, #4]
	node->prev = prev;
   1418c:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1418e:	f84a 2008 	str.w	r2, [sl, r8]
	prev->next = node;
   14192:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   14194:	6054      	str	r4, [r2, #4]
			return;
   14196:	e6d9      	b.n	13f4c <register_events+0x174>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   14198:	2300      	movs	r3, #0
   1419a:	9404      	str	r4, [sp, #16]
   1419c:	9505      	str	r5, [sp, #20]
   1419e:	9d02      	ldr	r5, [sp, #8]
   141a0:	461c      	mov	r4, r3
   141a2:	e7d2      	b.n	1414a <register_events+0x372>
   141a4:	9c04      	ldr	r4, [sp, #16]
   141a6:	9d05      	ldr	r5, [sp, #20]
   141a8:	e001      	b.n	141ae <register_events+0x3d6>
   141aa:	9c04      	ldr	r4, [sp, #16]
   141ac:	9d05      	ldr	r5, [sp, #20]
	sys_dnode_t *const tail = list->tail;
   141ae:	9a02      	ldr	r2, [sp, #8]
   141b0:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   141b2:	f84a 2008 	str.w	r2, [sl, r8]
	node->prev = tail;
   141b6:	6063      	str	r3, [r4, #4]
	tail->next = node;
   141b8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   141ba:	6054      	str	r4, [r2, #4]
}
   141bc:	e6c6      	b.n	13f4c <register_events+0x174>
   141be:	9c04      	ldr	r4, [sp, #16]
   141c0:	9d05      	ldr	r5, [sp, #20]
   141c2:	e7f4      	b.n	141ae <register_events+0x3d6>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   141c4:	9801      	ldr	r0, [sp, #4]
   141c6:	b007      	add	sp, #28
   141c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000141cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   141cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   141d0:	b082      	sub	sp, #8
   141d2:	4605      	mov	r5, r0
   141d4:	4690      	mov	r8, r2
   141d6:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   141d8:	4b4f      	ldr	r3, [pc, #316]	; (14318 <z_impl_k_poll+0x14c>)
   141da:	689e      	ldr	r6, [r3, #8]

	poller->is_polling = true;
   141dc:	2301      	movs	r3, #1
   141de:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
	poller->mode = MODE_POLL;
   141e2:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   141e6:	ea57 0302 	orrs.w	r3, r7, r2
   141ea:	bf0c      	ite	eq
   141ec:	2301      	moveq	r3, #1
   141ee:	2300      	movne	r3, #0
   141f0:	f106 0260 	add.w	r2, r6, #96	; 0x60
   141f4:	f7ff fdf0 	bl	13dd8 <register_events>
   141f8:	4604      	mov	r4, r0
   141fa:	f04f 0320 	mov.w	r3, #32
   141fe:	f3ef 8111 	mrs	r1, BASEPRI
   14202:	f383 8812 	msr	BASEPRI_MAX, r3
   14206:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1420a:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
   1420e:	b1b3      	cbz	r3, 1423e <z_impl_k_poll+0x72>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   14210:	2300      	movs	r3, #0
   14212:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14216:	ea57 0308 	orrs.w	r3, r7, r8
   1421a:	d043      	beq.n	142a4 <z_impl_k_poll+0xd8>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1421c:	f8cd 8000 	str.w	r8, [sp]
   14220:	9701      	str	r7, [sp, #4]
   14222:	4a3e      	ldr	r2, [pc, #248]	; (1431c <z_impl_k_poll+0x150>)
   14224:	483e      	ldr	r0, [pc, #248]	; (14320 <z_impl_k_poll+0x154>)
   14226:	f7ff fa31 	bl	1368c <z_pend_curr>
   1422a:	f04f 0320 	mov.w	r3, #32
   1422e:	f3ef 8611 	mrs	r6, BASEPRI
   14232:	f383 8812 	msr	BASEPRI_MAX, r3
   14236:	f3bf 8f6f 	isb	sy
   1423a:	46b4      	mov	ip, r6
	while (num_events--) {
   1423c:	e04c      	b.n	142d8 <z_impl_k_poll+0x10c>
		clear_event_registrations(events, events_registered, key);
   1423e:	460e      	mov	r6, r1
	while (num_events--) {
   14240:	e00c      	b.n	1425c <z_impl_k_poll+0x90>
	__asm__ volatile(
   14242:	f386 8811 	msr	BASEPRI, r6
   14246:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1424a:	f04f 0320 	mov.w	r3, #32
   1424e:	f3ef 8611 	mrs	r6, BASEPRI
   14252:	f383 8812 	msr	BASEPRI_MAX, r3
   14256:	f3bf 8f6f 	isb	sy
   1425a:	4604      	mov	r4, r0
   1425c:	1e60      	subs	r0, r4, #1
   1425e:	b1dc      	cbz	r4, 14298 <z_impl_k_poll+0xcc>
		clear_event_registration(&events[num_events]);
   14260:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   14264:	009f      	lsls	r7, r3, #2
   14266:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1426a:	2200      	movs	r2, #0
   1426c:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1426e:	7b5a      	ldrb	r2, [r3, #13]
   14270:	f002 021f 	and.w	r2, r2, #31
   14274:	2a08      	cmp	r2, #8
   14276:	d8e4      	bhi.n	14242 <z_impl_k_poll+0x76>
   14278:	2401      	movs	r4, #1
   1427a:	fa04 f202 	lsl.w	r2, r4, r2
   1427e:	f412 7f8b 	tst.w	r2, #278	; 0x116
   14282:	d0de      	beq.n	14242 <z_impl_k_poll+0x76>
	return node->next != NULL;
   14284:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   14286:	2a00      	cmp	r2, #0
   14288:	d0db      	beq.n	14242 <z_impl_k_poll+0x76>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1428a:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1428c:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1428e:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   14290:	2200      	movs	r2, #0
   14292:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   14294:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
}
   14296:	e7d4      	b.n	14242 <z_impl_k_poll+0x76>
	__asm__ volatile(
   14298:	f381 8811 	msr	BASEPRI, r1
   1429c:	f3bf 8f6f 	isb	sy
		return 0;
   142a0:	4620      	mov	r0, r4
   142a2:	e036      	b.n	14312 <z_impl_k_poll+0x146>
   142a4:	f381 8811 	msr	BASEPRI, r1
   142a8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   142ac:	f06f 000a 	mvn.w	r0, #10
   142b0:	e02f      	b.n	14312 <z_impl_k_poll+0x146>
	sys_dnode_t *const prev = node->prev;
   142b2:	6859      	ldr	r1, [r3, #4]
	prev->next = next;
   142b4:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   142b6:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   142b8:	2200      	movs	r2, #0
   142ba:	512a      	str	r2, [r5, r4]
	node->prev = NULL;
   142bc:	605a      	str	r2, [r3, #4]
   142be:	f38c 8811 	msr	BASEPRI, ip
   142c2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   142c6:	f04f 0320 	mov.w	r3, #32
   142ca:	f3ef 8c11 	mrs	ip, BASEPRI
   142ce:	f383 8812 	msr	BASEPRI_MAX, r3
   142d2:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   142d6:	4674      	mov	r4, lr
   142d8:	f104 3eff 	add.w	lr, r4, #4294967295
   142dc:	b1ac      	cbz	r4, 1430a <z_impl_k_poll+0x13e>
		clear_event_registration(&events[num_events]);
   142de:	eb0e 038e 	add.w	r3, lr, lr, lsl #2
   142e2:	009c      	lsls	r4, r3, #2
   142e4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   142e8:	2200      	movs	r2, #0
   142ea:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   142ec:	7b5a      	ldrb	r2, [r3, #13]
   142ee:	f002 021f 	and.w	r2, r2, #31
   142f2:	2a08      	cmp	r2, #8
   142f4:	d8e3      	bhi.n	142be <z_impl_k_poll+0xf2>
   142f6:	2101      	movs	r1, #1
   142f8:	fa01 f202 	lsl.w	r2, r1, r2
   142fc:	f412 7f8b 	tst.w	r2, #278	; 0x116
   14300:	d0dd      	beq.n	142be <z_impl_k_poll+0xf2>
	return node->next != NULL;
   14302:	592a      	ldr	r2, [r5, r4]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   14304:	2a00      	cmp	r2, #0
   14306:	d1d4      	bne.n	142b2 <z_impl_k_poll+0xe6>
   14308:	e7d9      	b.n	142be <z_impl_k_poll+0xf2>
	__asm__ volatile(
   1430a:	f386 8811 	msr	BASEPRI, r6
   1430e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   14312:	b002      	add	sp, #8
   14314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14318:	20009210 	.word	0x20009210
   1431c:	20000948 	.word	0x20000948
   14320:	20009254 	.word	0x20009254

00014324 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   14324:	b538      	push	{r3, r4, r5, lr}
   14326:	4603      	mov	r3, r0
	__asm__ volatile(
   14328:	f04f 0220 	mov.w	r2, #32
   1432c:	f3ef 8511 	mrs	r5, BASEPRI
   14330:	f382 8812 	msr	BASEPRI_MAX, r2
   14334:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   14338:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1433a:	2201      	movs	r2, #1
   1433c:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1433e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   14340:	4283      	cmp	r3, r0
   14342:	d011      	beq.n	14368 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   14344:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   14346:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   14348:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1434a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1434c:	2300      	movs	r3, #0
   1434e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   14350:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   14352:	b148      	cbz	r0, 14368 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   14354:	2101      	movs	r1, #1
   14356:	f009 ffec 	bl	1e332 <signal_poll_event>
   1435a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1435c:	4629      	mov	r1, r5
   1435e:	4805      	ldr	r0, [pc, #20]	; (14374 <z_impl_k_poll_signal_raise+0x50>)
   14360:	f7ff f80c 	bl	1337c <z_reschedule>
	return rc;
}
   14364:	4620      	mov	r0, r4
   14366:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   14368:	f385 8811 	msr	BASEPRI, r5
   1436c:	f3bf 8f6f 	isb	sy
		return 0;
   14370:	2400      	movs	r4, #0
   14372:	e7f7      	b.n	14364 <z_impl_k_poll_signal_raise+0x40>
   14374:	20009254 	.word	0x20009254

00014378 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   14378:	b538      	push	{r3, r4, r5, lr}
   1437a:	4604      	mov	r4, r0
   1437c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1437e:	f009 fb5f 	bl	1da40 <k_is_in_isr>
   14382:	b948      	cbnz	r0, 14398 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   14384:	4b05      	ldr	r3, [pc, #20]	; (1439c <z_thread_aligned_alloc+0x24>)
   14386:	689b      	ldr	r3, [r3, #8]
   14388:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1438c:	b118      	cbz	r0, 14396 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1438e:	462a      	mov	r2, r5
   14390:	4621      	mov	r1, r4
   14392:	f00a f800 	bl	1e396 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   14396:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   14398:	2000      	movs	r0, #0
	return ret;
   1439a:	e7fc      	b.n	14396 <z_thread_aligned_alloc+0x1e>
   1439c:	20009210 	.word	0x20009210

000143a0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   143a0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   143a2:	4a03      	ldr	r2, [pc, #12]	; (143b0 <boot_banner+0x10>)
   143a4:	4903      	ldr	r1, [pc, #12]	; (143b4 <boot_banner+0x14>)
   143a6:	4804      	ldr	r0, [pc, #16]	; (143b8 <boot_banner+0x18>)
   143a8:	f004 fe7a 	bl	190a0 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   143ac:	bd08      	pop	{r3, pc}
   143ae:	bf00      	nop
   143b0:	0001e93c 	.word	0x0001e93c
   143b4:	0001f950 	.word	0x0001f950
   143b8:	0001f960 	.word	0x0001f960

000143bc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   143bc:	b510      	push	{r4, lr}
   143be:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   143c0:	4b08      	ldr	r3, [pc, #32]	; (143e4 <k_sys_work_q_init+0x28>)
   143c2:	9302      	str	r3, [sp, #8]
   143c4:	2400      	movs	r4, #0
   143c6:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   143ca:	ab02      	add	r3, sp, #8
   143cc:	9300      	str	r3, [sp, #0]
   143ce:	f04f 33ff 	mov.w	r3, #4294967295
   143d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   143d6:	4904      	ldr	r1, [pc, #16]	; (143e8 <k_sys_work_q_init+0x2c>)
   143d8:	4804      	ldr	r0, [pc, #16]	; (143ec <k_sys_work_q_init+0x30>)
   143da:	f7fe ff2b 	bl	13234 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   143de:	4620      	mov	r0, r4
   143e0:	b004      	add	sp, #16
   143e2:	bd10      	pop	{r4, pc}
   143e4:	0001f988 	.word	0x0001f988
   143e8:	2000a900 	.word	0x2000a900
   143ec:	20001410 	.word	0x20001410

000143f0 <malloc>:
   143f0:	4b02      	ldr	r3, [pc, #8]	; (143fc <malloc+0xc>)
   143f2:	4601      	mov	r1, r0
   143f4:	6818      	ldr	r0, [r3, #0]
   143f6:	f000 b80b 	b.w	14410 <_malloc_r>
   143fa:	bf00      	nop
   143fc:	20000d60 	.word	0x20000d60

00014400 <free>:
   14400:	4b02      	ldr	r3, [pc, #8]	; (1440c <free+0xc>)
   14402:	4601      	mov	r1, r0
   14404:	6818      	ldr	r0, [r3, #0]
   14406:	f002 bbad 	b.w	16b64 <_free_r>
   1440a:	bf00      	nop
   1440c:	20000d60 	.word	0x20000d60

00014410 <_malloc_r>:
   14410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	f101 060b 	add.w	r6, r1, #11
   14418:	2e16      	cmp	r6, #22
   1441a:	b083      	sub	sp, #12
   1441c:	4605      	mov	r5, r0
   1441e:	d824      	bhi.n	1446a <_malloc_r+0x5a>
   14420:	2910      	cmp	r1, #16
   14422:	f200 80a8 	bhi.w	14576 <_malloc_r+0x166>
   14426:	f000 fb37 	bl	14a98 <__malloc_lock>
   1442a:	2610      	movs	r6, #16
   1442c:	2218      	movs	r2, #24
   1442e:	f04f 0c02 	mov.w	ip, #2
   14432:	4fb3      	ldr	r7, [pc, #716]	; (14700 <_malloc_r+0x2f0>)
   14434:	443a      	add	r2, r7
   14436:	f1a2 0308 	sub.w	r3, r2, #8
   1443a:	6854      	ldr	r4, [r2, #4]
   1443c:	429c      	cmp	r4, r3
   1443e:	f000 80a7 	beq.w	14590 <_malloc_r+0x180>
   14442:	6863      	ldr	r3, [r4, #4]
   14444:	68e2      	ldr	r2, [r4, #12]
   14446:	68a1      	ldr	r1, [r4, #8]
   14448:	f023 0303 	bic.w	r3, r3, #3
   1444c:	4423      	add	r3, r4
   1444e:	60ca      	str	r2, [r1, #12]
   14450:	6091      	str	r1, [r2, #8]
   14452:	685a      	ldr	r2, [r3, #4]
   14454:	f042 0201 	orr.w	r2, r2, #1
   14458:	4628      	mov	r0, r5
   1445a:	605a      	str	r2, [r3, #4]
   1445c:	3408      	adds	r4, #8
   1445e:	f000 fb21 	bl	14aa4 <__malloc_unlock>
   14462:	4620      	mov	r0, r4
   14464:	b003      	add	sp, #12
   14466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1446a:	f036 0607 	bics.w	r6, r6, #7
   1446e:	f100 8082 	bmi.w	14576 <_malloc_r+0x166>
   14472:	42b1      	cmp	r1, r6
   14474:	d87f      	bhi.n	14576 <_malloc_r+0x166>
   14476:	f000 fb0f 	bl	14a98 <__malloc_lock>
   1447a:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   1447e:	f0c0 819d 	bcc.w	147bc <_malloc_r+0x3ac>
   14482:	0a73      	lsrs	r3, r6, #9
   14484:	d07e      	beq.n	14584 <_malloc_r+0x174>
   14486:	2b04      	cmp	r3, #4
   14488:	f200 8169 	bhi.w	1475e <_malloc_r+0x34e>
   1448c:	09b3      	lsrs	r3, r6, #6
   1448e:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   14492:	f103 0438 	add.w	r4, r3, #56	; 0x38
   14496:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   1449a:	4f99      	ldr	r7, [pc, #612]	; (14700 <_malloc_r+0x2f0>)
   1449c:	443b      	add	r3, r7
   1449e:	f1a3 0008 	sub.w	r0, r3, #8
   144a2:	685b      	ldr	r3, [r3, #4]
   144a4:	4298      	cmp	r0, r3
   144a6:	d106      	bne.n	144b6 <_malloc_r+0xa6>
   144a8:	e00c      	b.n	144c4 <_malloc_r+0xb4>
   144aa:	2900      	cmp	r1, #0
   144ac:	f280 8118 	bge.w	146e0 <_malloc_r+0x2d0>
   144b0:	68db      	ldr	r3, [r3, #12]
   144b2:	4298      	cmp	r0, r3
   144b4:	d006      	beq.n	144c4 <_malloc_r+0xb4>
   144b6:	685a      	ldr	r2, [r3, #4]
   144b8:	f022 0203 	bic.w	r2, r2, #3
   144bc:	1b91      	subs	r1, r2, r6
   144be:	290f      	cmp	r1, #15
   144c0:	ddf3      	ble.n	144aa <_malloc_r+0x9a>
   144c2:	46a4      	mov	ip, r4
   144c4:	693c      	ldr	r4, [r7, #16]
   144c6:	f8df 823c 	ldr.w	r8, [pc, #572]	; 14704 <_malloc_r+0x2f4>
   144ca:	4544      	cmp	r4, r8
   144cc:	d06c      	beq.n	145a8 <_malloc_r+0x198>
   144ce:	6863      	ldr	r3, [r4, #4]
   144d0:	f023 0e03 	bic.w	lr, r3, #3
   144d4:	ebae 0306 	sub.w	r3, lr, r6
   144d8:	2b0f      	cmp	r3, #15
   144da:	f300 8180 	bgt.w	147de <_malloc_r+0x3ce>
   144de:	2b00      	cmp	r3, #0
   144e0:	e9c7 8804 	strd	r8, r8, [r7, #16]
   144e4:	f280 816f 	bge.w	147c6 <_malloc_r+0x3b6>
   144e8:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   144ec:	f080 8116 	bcs.w	1471c <_malloc_r+0x30c>
   144f0:	ea4f 03de 	mov.w	r3, lr, lsr #3
   144f4:	6879      	ldr	r1, [r7, #4]
   144f6:	3301      	adds	r3, #1
   144f8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   144fc:	2201      	movs	r2, #1
   144fe:	fa02 f20e 	lsl.w	r2, r2, lr
   14502:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   14506:	60a0      	str	r0, [r4, #8]
   14508:	430a      	orrs	r2, r1
   1450a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   1450e:	3908      	subs	r1, #8
   14510:	60e1      	str	r1, [r4, #12]
   14512:	607a      	str	r2, [r7, #4]
   14514:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   14518:	60c4      	str	r4, [r0, #12]
   1451a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   1451e:	2001      	movs	r0, #1
   14520:	4098      	lsls	r0, r3
   14522:	4290      	cmp	r0, r2
   14524:	d847      	bhi.n	145b6 <_malloc_r+0x1a6>
   14526:	4210      	tst	r0, r2
   14528:	d106      	bne.n	14538 <_malloc_r+0x128>
   1452a:	f02c 0c03 	bic.w	ip, ip, #3
   1452e:	0040      	lsls	r0, r0, #1
   14530:	4210      	tst	r0, r2
   14532:	f10c 0c04 	add.w	ip, ip, #4
   14536:	d0fa      	beq.n	1452e <_malloc_r+0x11e>
   14538:	eb07 0acc 	add.w	sl, r7, ip, lsl #3
   1453c:	4653      	mov	r3, sl
   1453e:	46e1      	mov	r9, ip
   14540:	68d9      	ldr	r1, [r3, #12]
   14542:	e00e      	b.n	14562 <_malloc_r+0x152>
   14544:	684a      	ldr	r2, [r1, #4]
   14546:	f022 0203 	bic.w	r2, r2, #3
   1454a:	eba2 0e06 	sub.w	lr, r2, r6
   1454e:	f1be 0f0f 	cmp.w	lr, #15
   14552:	460c      	mov	r4, r1
   14554:	68c9      	ldr	r1, [r1, #12]
   14556:	f300 810f 	bgt.w	14778 <_malloc_r+0x368>
   1455a:	f1be 0f00 	cmp.w	lr, #0
   1455e:	f280 8120 	bge.w	147a2 <_malloc_r+0x392>
   14562:	428b      	cmp	r3, r1
   14564:	d1ee      	bne.n	14544 <_malloc_r+0x134>
   14566:	f109 0901 	add.w	r9, r9, #1
   1456a:	f019 0f03 	tst.w	r9, #3
   1456e:	f103 0308 	add.w	r3, r3, #8
   14572:	d1e5      	bne.n	14540 <_malloc_r+0x130>
   14574:	e16a      	b.n	1484c <_malloc_r+0x43c>
   14576:	2400      	movs	r4, #0
   14578:	230c      	movs	r3, #12
   1457a:	4620      	mov	r0, r4
   1457c:	602b      	str	r3, [r5, #0]
   1457e:	b003      	add	sp, #12
   14580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14584:	f44f 7300 	mov.w	r3, #512	; 0x200
   14588:	f04f 0c40 	mov.w	ip, #64	; 0x40
   1458c:	243f      	movs	r4, #63	; 0x3f
   1458e:	e784      	b.n	1449a <_malloc_r+0x8a>
   14590:	68d4      	ldr	r4, [r2, #12]
   14592:	42a2      	cmp	r2, r4
   14594:	bf08      	it	eq
   14596:	f10c 0c02 	addeq.w	ip, ip, #2
   1459a:	f47f af52 	bne.w	14442 <_malloc_r+0x32>
   1459e:	693c      	ldr	r4, [r7, #16]
   145a0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 14704 <_malloc_r+0x2f4>
   145a4:	4544      	cmp	r4, r8
   145a6:	d192      	bne.n	144ce <_malloc_r+0xbe>
   145a8:	687a      	ldr	r2, [r7, #4]
   145aa:	ea4f 03ac 	mov.w	r3, ip, asr #2
   145ae:	2001      	movs	r0, #1
   145b0:	4098      	lsls	r0, r3
   145b2:	4290      	cmp	r0, r2
   145b4:	d9b7      	bls.n	14526 <_malloc_r+0x116>
   145b6:	68bc      	ldr	r4, [r7, #8]
   145b8:	6863      	ldr	r3, [r4, #4]
   145ba:	f023 0903 	bic.w	r9, r3, #3
   145be:	454e      	cmp	r6, r9
   145c0:	d803      	bhi.n	145ca <_malloc_r+0x1ba>
   145c2:	eba9 0306 	sub.w	r3, r9, r6
   145c6:	2b0f      	cmp	r3, #15
   145c8:	dc7a      	bgt.n	146c0 <_malloc_r+0x2b0>
   145ca:	f8df b13c 	ldr.w	fp, [pc, #316]	; 14708 <_malloc_r+0x2f8>
   145ce:	4b4f      	ldr	r3, [pc, #316]	; (1470c <_malloc_r+0x2fc>)
   145d0:	f8db 2000 	ldr.w	r2, [fp]
   145d4:	681b      	ldr	r3, [r3, #0]
   145d6:	3201      	adds	r2, #1
   145d8:	4433      	add	r3, r6
   145da:	eb04 0a09 	add.w	sl, r4, r9
   145de:	f000 814b 	beq.w	14878 <_malloc_r+0x468>
   145e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   145e6:	330f      	adds	r3, #15
   145e8:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   145ec:	f028 080f 	bic.w	r8, r8, #15
   145f0:	4641      	mov	r1, r8
   145f2:	4628      	mov	r0, r5
   145f4:	f000 fa70 	bl	14ad8 <_sbrk_r>
   145f8:	1c41      	adds	r1, r0, #1
   145fa:	4602      	mov	r2, r0
   145fc:	f000 810a 	beq.w	14814 <_malloc_r+0x404>
   14600:	4582      	cmp	sl, r0
   14602:	f200 8105 	bhi.w	14810 <_malloc_r+0x400>
   14606:	4b42      	ldr	r3, [pc, #264]	; (14710 <_malloc_r+0x300>)
   14608:	6819      	ldr	r1, [r3, #0]
   1460a:	4441      	add	r1, r8
   1460c:	6019      	str	r1, [r3, #0]
   1460e:	4608      	mov	r0, r1
   14610:	f000 8168 	beq.w	148e4 <_malloc_r+0x4d4>
   14614:	f8db 1000 	ldr.w	r1, [fp]
   14618:	9301      	str	r3, [sp, #4]
   1461a:	3101      	adds	r1, #1
   1461c:	bf1b      	ittet	ne
   1461e:	eba2 0a0a 	subne.w	sl, r2, sl
   14622:	4450      	addne	r0, sl
   14624:	f8cb 2000 	streq.w	r2, [fp]
   14628:	6018      	strne	r0, [r3, #0]
   1462a:	f012 0b07 	ands.w	fp, r2, #7
   1462e:	f000 812f 	beq.w	14890 <_malloc_r+0x480>
   14632:	f1cb 0108 	rsb	r1, fp, #8
   14636:	440a      	add	r2, r1
   14638:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   1463c:	4490      	add	r8, r2
   1463e:	3108      	adds	r1, #8
   14640:	eba1 0108 	sub.w	r1, r1, r8
   14644:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   14648:	4651      	mov	r1, sl
   1464a:	4628      	mov	r0, r5
   1464c:	9200      	str	r2, [sp, #0]
   1464e:	f000 fa43 	bl	14ad8 <_sbrk_r>
   14652:	1c42      	adds	r2, r0, #1
   14654:	e9dd 2300 	ldrd	r2, r3, [sp]
   14658:	f000 816b 	beq.w	14932 <_malloc_r+0x522>
   1465c:	1a80      	subs	r0, r0, r2
   1465e:	eb00 080a 	add.w	r8, r0, sl
   14662:	6819      	ldr	r1, [r3, #0]
   14664:	60ba      	str	r2, [r7, #8]
   14666:	f048 0001 	orr.w	r0, r8, #1
   1466a:	4451      	add	r1, sl
   1466c:	42bc      	cmp	r4, r7
   1466e:	6050      	str	r0, [r2, #4]
   14670:	6019      	str	r1, [r3, #0]
   14672:	f000 8143 	beq.w	148fc <_malloc_r+0x4ec>
   14676:	f1b9 0f0f 	cmp.w	r9, #15
   1467a:	f240 8141 	bls.w	14900 <_malloc_r+0x4f0>
   1467e:	6860      	ldr	r0, [r4, #4]
   14680:	f1a9 0c0c 	sub.w	ip, r9, #12
   14684:	f02c 0c07 	bic.w	ip, ip, #7
   14688:	f000 0001 	and.w	r0, r0, #1
   1468c:	ea40 000c 	orr.w	r0, r0, ip
   14690:	6060      	str	r0, [r4, #4]
   14692:	f04f 0e05 	mov.w	lr, #5
   14696:	eb04 000c 	add.w	r0, r4, ip
   1469a:	f1bc 0f0f 	cmp.w	ip, #15
   1469e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   146a2:	f200 814e 	bhi.w	14942 <_malloc_r+0x532>
   146a6:	6850      	ldr	r0, [r2, #4]
   146a8:	4614      	mov	r4, r2
   146aa:	4b1a      	ldr	r3, [pc, #104]	; (14714 <_malloc_r+0x304>)
   146ac:	681a      	ldr	r2, [r3, #0]
   146ae:	428a      	cmp	r2, r1
   146b0:	bf38      	it	cc
   146b2:	6019      	strcc	r1, [r3, #0]
   146b4:	4b18      	ldr	r3, [pc, #96]	; (14718 <_malloc_r+0x308>)
   146b6:	681a      	ldr	r2, [r3, #0]
   146b8:	428a      	cmp	r2, r1
   146ba:	bf38      	it	cc
   146bc:	6019      	strcc	r1, [r3, #0]
   146be:	e0ab      	b.n	14818 <_malloc_r+0x408>
   146c0:	19a2      	adds	r2, r4, r6
   146c2:	f043 0301 	orr.w	r3, r3, #1
   146c6:	f046 0601 	orr.w	r6, r6, #1
   146ca:	6066      	str	r6, [r4, #4]
   146cc:	4628      	mov	r0, r5
   146ce:	60ba      	str	r2, [r7, #8]
   146d0:	6053      	str	r3, [r2, #4]
   146d2:	f000 f9e7 	bl	14aa4 <__malloc_unlock>
   146d6:	3408      	adds	r4, #8
   146d8:	4620      	mov	r0, r4
   146da:	b003      	add	sp, #12
   146dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
   146e4:	441a      	add	r2, r3
   146e6:	60e1      	str	r1, [r4, #12]
   146e8:	608c      	str	r4, [r1, #8]
   146ea:	6851      	ldr	r1, [r2, #4]
   146ec:	f041 0101 	orr.w	r1, r1, #1
   146f0:	4628      	mov	r0, r5
   146f2:	6051      	str	r1, [r2, #4]
   146f4:	f103 0408 	add.w	r4, r3, #8
   146f8:	f000 f9d4 	bl	14aa4 <__malloc_unlock>
   146fc:	e6b1      	b.n	14462 <_malloc_r+0x52>
   146fe:	bf00      	nop
   14700:	20000950 	.word	0x20000950
   14704:	20000958 	.word	0x20000958
   14708:	20000d58 	.word	0x20000d58
   1470c:	20009284 	.word	0x20009284
   14710:	20009254 	.word	0x20009254
   14714:	2000927c 	.word	0x2000927c
   14718:	20009280 	.word	0x20009280
   1471c:	f5be 6f20 	cmp.w	lr, #2560	; 0xa00
   14720:	ea4f 225e 	mov.w	r2, lr, lsr #9
   14724:	d36d      	bcc.n	14802 <_malloc_r+0x3f2>
   14726:	2a14      	cmp	r2, #20
   14728:	f200 80c3 	bhi.w	148b2 <_malloc_r+0x4a2>
   1472c:	f102 035c 	add.w	r3, r2, #92	; 0x5c
   14730:	00db      	lsls	r3, r3, #3
   14732:	325b      	adds	r2, #91	; 0x5b
   14734:	18f9      	adds	r1, r7, r3
   14736:	58fb      	ldr	r3, [r7, r3]
   14738:	3908      	subs	r1, #8
   1473a:	4299      	cmp	r1, r3
   1473c:	f000 809f 	beq.w	1487e <_malloc_r+0x46e>
   14740:	685a      	ldr	r2, [r3, #4]
   14742:	f022 0203 	bic.w	r2, r2, #3
   14746:	4572      	cmp	r2, lr
   14748:	d902      	bls.n	14750 <_malloc_r+0x340>
   1474a:	689b      	ldr	r3, [r3, #8]
   1474c:	4299      	cmp	r1, r3
   1474e:	d1f7      	bne.n	14740 <_malloc_r+0x330>
   14750:	68d9      	ldr	r1, [r3, #12]
   14752:	687a      	ldr	r2, [r7, #4]
   14754:	e9c4 3102 	strd	r3, r1, [r4, #8]
   14758:	608c      	str	r4, [r1, #8]
   1475a:	60dc      	str	r4, [r3, #12]
   1475c:	e6dd      	b.n	1451a <_malloc_r+0x10a>
   1475e:	2b14      	cmp	r3, #20
   14760:	d968      	bls.n	14834 <_malloc_r+0x424>
   14762:	2b54      	cmp	r3, #84	; 0x54
   14764:	f200 80ae 	bhi.w	148c4 <_malloc_r+0x4b4>
   14768:	0b33      	lsrs	r3, r6, #12
   1476a:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   1476e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   14772:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   14776:	e690      	b.n	1449a <_malloc_r+0x8a>
   14778:	4628      	mov	r0, r5
   1477a:	68a5      	ldr	r5, [r4, #8]
   1477c:	19a3      	adds	r3, r4, r6
   1477e:	f046 0601 	orr.w	r6, r6, #1
   14782:	6066      	str	r6, [r4, #4]
   14784:	60e9      	str	r1, [r5, #12]
   14786:	608d      	str	r5, [r1, #8]
   14788:	f04e 0101 	orr.w	r1, lr, #1
   1478c:	e9c7 3304 	strd	r3, r3, [r7, #16]
   14790:	e9c3 8802 	strd	r8, r8, [r3, #8]
   14794:	6059      	str	r1, [r3, #4]
   14796:	f844 e002 	str.w	lr, [r4, r2]
   1479a:	f000 f983 	bl	14aa4 <__malloc_unlock>
   1479e:	3408      	adds	r4, #8
   147a0:	e65f      	b.n	14462 <_malloc_r+0x52>
   147a2:	4422      	add	r2, r4
   147a4:	4628      	mov	r0, r5
   147a6:	6853      	ldr	r3, [r2, #4]
   147a8:	f043 0301 	orr.w	r3, r3, #1
   147ac:	6053      	str	r3, [r2, #4]
   147ae:	f854 3f08 	ldr.w	r3, [r4, #8]!
   147b2:	60d9      	str	r1, [r3, #12]
   147b4:	608b      	str	r3, [r1, #8]
   147b6:	f000 f975 	bl	14aa4 <__malloc_unlock>
   147ba:	e652      	b.n	14462 <_malloc_r+0x52>
   147bc:	ea4f 0cd6 	mov.w	ip, r6, lsr #3
   147c0:	f106 0208 	add.w	r2, r6, #8
   147c4:	e635      	b.n	14432 <_malloc_r+0x22>
   147c6:	44a6      	add	lr, r4
   147c8:	4628      	mov	r0, r5
   147ca:	f8de 3004 	ldr.w	r3, [lr, #4]
   147ce:	f043 0301 	orr.w	r3, r3, #1
   147d2:	f8ce 3004 	str.w	r3, [lr, #4]
   147d6:	3408      	adds	r4, #8
   147d8:	f000 f964 	bl	14aa4 <__malloc_unlock>
   147dc:	e641      	b.n	14462 <_malloc_r+0x52>
   147de:	19a2      	adds	r2, r4, r6
   147e0:	f043 0101 	orr.w	r1, r3, #1
   147e4:	f046 0601 	orr.w	r6, r6, #1
   147e8:	6066      	str	r6, [r4, #4]
   147ea:	4628      	mov	r0, r5
   147ec:	e9c7 2204 	strd	r2, r2, [r7, #16]
   147f0:	e9c2 8802 	strd	r8, r8, [r2, #8]
   147f4:	6051      	str	r1, [r2, #4]
   147f6:	f844 300e 	str.w	r3, [r4, lr]
   147fa:	f000 f953 	bl	14aa4 <__malloc_unlock>
   147fe:	3408      	adds	r4, #8
   14800:	e62f      	b.n	14462 <_malloc_r+0x52>
   14802:	ea4f 129e 	mov.w	r2, lr, lsr #6
   14806:	f102 0339 	add.w	r3, r2, #57	; 0x39
   1480a:	00db      	lsls	r3, r3, #3
   1480c:	3238      	adds	r2, #56	; 0x38
   1480e:	e791      	b.n	14734 <_malloc_r+0x324>
   14810:	42bc      	cmp	r4, r7
   14812:	d062      	beq.n	148da <_malloc_r+0x4ca>
   14814:	68bc      	ldr	r4, [r7, #8]
   14816:	6860      	ldr	r0, [r4, #4]
   14818:	f020 0803 	bic.w	r8, r0, #3
   1481c:	4546      	cmp	r6, r8
   1481e:	eba8 0306 	sub.w	r3, r8, r6
   14822:	d802      	bhi.n	1482a <_malloc_r+0x41a>
   14824:	2b0f      	cmp	r3, #15
   14826:	f73f af4b 	bgt.w	146c0 <_malloc_r+0x2b0>
   1482a:	4628      	mov	r0, r5
   1482c:	f000 f93a 	bl	14aa4 <__malloc_unlock>
   14830:	2400      	movs	r4, #0
   14832:	e616      	b.n	14462 <_malloc_r+0x52>
   14834:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   14838:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   1483c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   14840:	e62b      	b.n	1449a <_malloc_r+0x8a>
   14842:	f85a 3908 	ldr.w	r3, [sl], #-8
   14846:	4553      	cmp	r3, sl
   14848:	f040 809b 	bne.w	14982 <_malloc_r+0x572>
   1484c:	f01c 0f03 	tst.w	ip, #3
   14850:	f10c 3cff 	add.w	ip, ip, #4294967295
   14854:	d1f5      	bne.n	14842 <_malloc_r+0x432>
   14856:	687b      	ldr	r3, [r7, #4]
   14858:	ea23 0300 	bic.w	r3, r3, r0
   1485c:	607b      	str	r3, [r7, #4]
   1485e:	0040      	lsls	r0, r0, #1
   14860:	4298      	cmp	r0, r3
   14862:	f63f aea8 	bhi.w	145b6 <_malloc_r+0x1a6>
   14866:	b918      	cbnz	r0, 14870 <_malloc_r+0x460>
   14868:	e6a5      	b.n	145b6 <_malloc_r+0x1a6>
   1486a:	0040      	lsls	r0, r0, #1
   1486c:	f109 0904 	add.w	r9, r9, #4
   14870:	4218      	tst	r0, r3
   14872:	d0fa      	beq.n	1486a <_malloc_r+0x45a>
   14874:	46cc      	mov	ip, r9
   14876:	e65f      	b.n	14538 <_malloc_r+0x128>
   14878:	f103 0810 	add.w	r8, r3, #16
   1487c:	e6b8      	b.n	145f0 <_malloc_r+0x1e0>
   1487e:	1090      	asrs	r0, r2, #2
   14880:	f04f 0e01 	mov.w	lr, #1
   14884:	687a      	ldr	r2, [r7, #4]
   14886:	fa0e f000 	lsl.w	r0, lr, r0
   1488a:	4302      	orrs	r2, r0
   1488c:	607a      	str	r2, [r7, #4]
   1488e:	e761      	b.n	14754 <_malloc_r+0x344>
   14890:	eb02 0108 	add.w	r1, r2, r8
   14894:	4249      	negs	r1, r1
   14896:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   1489a:	4651      	mov	r1, sl
   1489c:	4628      	mov	r0, r5
   1489e:	9200      	str	r2, [sp, #0]
   148a0:	f000 f91a 	bl	14ad8 <_sbrk_r>
   148a4:	1c43      	adds	r3, r0, #1
   148a6:	e9dd 2300 	ldrd	r2, r3, [sp]
   148aa:	f47f aed7 	bne.w	1465c <_malloc_r+0x24c>
   148ae:	46da      	mov	sl, fp
   148b0:	e6d7      	b.n	14662 <_malloc_r+0x252>
   148b2:	2a54      	cmp	r2, #84	; 0x54
   148b4:	d827      	bhi.n	14906 <_malloc_r+0x4f6>
   148b6:	ea4f 321e 	mov.w	r2, lr, lsr #12
   148ba:	f102 036f 	add.w	r3, r2, #111	; 0x6f
   148be:	00db      	lsls	r3, r3, #3
   148c0:	326e      	adds	r2, #110	; 0x6e
   148c2:	e737      	b.n	14734 <_malloc_r+0x324>
   148c4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   148c8:	d827      	bhi.n	1491a <_malloc_r+0x50a>
   148ca:	0bf3      	lsrs	r3, r6, #15
   148cc:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   148d0:	f103 0477 	add.w	r4, r3, #119	; 0x77
   148d4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   148d8:	e5df      	b.n	1449a <_malloc_r+0x8a>
   148da:	4b2b      	ldr	r3, [pc, #172]	; (14988 <_malloc_r+0x578>)
   148dc:	6818      	ldr	r0, [r3, #0]
   148de:	4440      	add	r0, r8
   148e0:	6018      	str	r0, [r3, #0]
   148e2:	e697      	b.n	14614 <_malloc_r+0x204>
   148e4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   148e8:	f1bc 0f00 	cmp.w	ip, #0
   148ec:	f47f ae92 	bne.w	14614 <_malloc_r+0x204>
   148f0:	68bc      	ldr	r4, [r7, #8]
   148f2:	44c8      	add	r8, r9
   148f4:	f048 0001 	orr.w	r0, r8, #1
   148f8:	6060      	str	r0, [r4, #4]
   148fa:	e6d6      	b.n	146aa <_malloc_r+0x29a>
   148fc:	4614      	mov	r4, r2
   148fe:	e6d4      	b.n	146aa <_malloc_r+0x29a>
   14900:	2301      	movs	r3, #1
   14902:	6053      	str	r3, [r2, #4]
   14904:	e791      	b.n	1482a <_malloc_r+0x41a>
   14906:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   1490a:	d825      	bhi.n	14958 <_malloc_r+0x548>
   1490c:	ea4f 32de 	mov.w	r2, lr, lsr #15
   14910:	f102 0378 	add.w	r3, r2, #120	; 0x78
   14914:	00db      	lsls	r3, r3, #3
   14916:	3277      	adds	r2, #119	; 0x77
   14918:	e70c      	b.n	14734 <_malloc_r+0x324>
   1491a:	f240 5254 	movw	r2, #1364	; 0x554
   1491e:	4293      	cmp	r3, r2
   14920:	d825      	bhi.n	1496e <_malloc_r+0x55e>
   14922:	0cb3      	lsrs	r3, r6, #18
   14924:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   14928:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   1492c:	ea4f 03cc 	mov.w	r3, ip, lsl #3
   14930:	e5b3      	b.n	1449a <_malloc_r+0x8a>
   14932:	f1ab 0b08 	sub.w	fp, fp, #8
   14936:	44d8      	add	r8, fp
   14938:	eba8 0802 	sub.w	r8, r8, r2
   1493c:	f04f 0a00 	mov.w	sl, #0
   14940:	e68f      	b.n	14662 <_malloc_r+0x252>
   14942:	f104 0108 	add.w	r1, r4, #8
   14946:	4628      	mov	r0, r5
   14948:	9300      	str	r3, [sp, #0]
   1494a:	f002 f90b 	bl	16b64 <_free_r>
   1494e:	68bc      	ldr	r4, [r7, #8]
   14950:	9b00      	ldr	r3, [sp, #0]
   14952:	6860      	ldr	r0, [r4, #4]
   14954:	6819      	ldr	r1, [r3, #0]
   14956:	e6a8      	b.n	146aa <_malloc_r+0x29a>
   14958:	f240 5354 	movw	r3, #1364	; 0x554
   1495c:	429a      	cmp	r2, r3
   1495e:	d80c      	bhi.n	1497a <_malloc_r+0x56a>
   14960:	ea4f 429e 	mov.w	r2, lr, lsr #18
   14964:	f102 037d 	add.w	r3, r2, #125	; 0x7d
   14968:	00db      	lsls	r3, r3, #3
   1496a:	327c      	adds	r2, #124	; 0x7c
   1496c:	e6e2      	b.n	14734 <_malloc_r+0x324>
   1496e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   14972:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   14976:	247e      	movs	r4, #126	; 0x7e
   14978:	e58f      	b.n	1449a <_malloc_r+0x8a>
   1497a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   1497e:	227e      	movs	r2, #126	; 0x7e
   14980:	e6d8      	b.n	14734 <_malloc_r+0x324>
   14982:	687b      	ldr	r3, [r7, #4]
   14984:	e76b      	b.n	1485e <_malloc_r+0x44e>
   14986:	bf00      	nop
   14988:	20009254 	.word	0x20009254

0001498c <memcmp>:
   1498c:	2a03      	cmp	r2, #3
   1498e:	b510      	push	{r4, lr}
   14990:	d917      	bls.n	149c2 <memcmp+0x36>
   14992:	ea40 0c01 	orr.w	ip, r0, r1
   14996:	f01c 0f03 	tst.w	ip, #3
   1499a:	4604      	mov	r4, r0
   1499c:	460b      	mov	r3, r1
   1499e:	d123      	bne.n	149e8 <memcmp+0x5c>
   149a0:	4619      	mov	r1, r3
   149a2:	4620      	mov	r0, r4
   149a4:	f8d1 e000 	ldr.w	lr, [r1]
   149a8:	f8d0 c000 	ldr.w	ip, [r0]
   149ac:	45f4      	cmp	ip, lr
   149ae:	f104 0404 	add.w	r4, r4, #4
   149b2:	f103 0304 	add.w	r3, r3, #4
   149b6:	d117      	bne.n	149e8 <memcmp+0x5c>
   149b8:	3a04      	subs	r2, #4
   149ba:	2a03      	cmp	r2, #3
   149bc:	4620      	mov	r0, r4
   149be:	4619      	mov	r1, r3
   149c0:	d8ee      	bhi.n	149a0 <memcmp+0x14>
   149c2:	1e54      	subs	r4, r2, #1
   149c4:	b1a2      	cbz	r2, 149f0 <memcmp+0x64>
   149c6:	f100 3cff 	add.w	ip, r0, #4294967295
   149ca:	3901      	subs	r1, #1
   149cc:	e001      	b.n	149d2 <memcmp+0x46>
   149ce:	18c3      	adds	r3, r0, r3
   149d0:	d00c      	beq.n	149ec <memcmp+0x60>
   149d2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
   149d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   149da:	4596      	cmp	lr, r2
   149dc:	eba4 030c 	sub.w	r3, r4, ip
   149e0:	d0f5      	beq.n	149ce <memcmp+0x42>
   149e2:	ebae 0002 	sub.w	r0, lr, r2
   149e6:	bd10      	pop	{r4, pc}
   149e8:	1e54      	subs	r4, r2, #1
   149ea:	e7ec      	b.n	149c6 <memcmp+0x3a>
   149ec:	4618      	mov	r0, r3
   149ee:	bd10      	pop	{r4, pc}
   149f0:	4610      	mov	r0, r2
   149f2:	bd10      	pop	{r4, pc}

000149f4 <memset>:
   149f4:	0783      	lsls	r3, r0, #30
   149f6:	b530      	push	{r4, r5, lr}
   149f8:	d048      	beq.n	14a8c <memset+0x98>
   149fa:	1e54      	subs	r4, r2, #1
   149fc:	2a00      	cmp	r2, #0
   149fe:	d03f      	beq.n	14a80 <memset+0x8c>
   14a00:	b2ca      	uxtb	r2, r1
   14a02:	4603      	mov	r3, r0
   14a04:	e001      	b.n	14a0a <memset+0x16>
   14a06:	3c01      	subs	r4, #1
   14a08:	d33a      	bcc.n	14a80 <memset+0x8c>
   14a0a:	f803 2b01 	strb.w	r2, [r3], #1
   14a0e:	079d      	lsls	r5, r3, #30
   14a10:	d1f9      	bne.n	14a06 <memset+0x12>
   14a12:	2c03      	cmp	r4, #3
   14a14:	d92d      	bls.n	14a72 <memset+0x7e>
   14a16:	b2cd      	uxtb	r5, r1
   14a18:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   14a1c:	2c0f      	cmp	r4, #15
   14a1e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   14a22:	d936      	bls.n	14a92 <memset+0x9e>
   14a24:	f1a4 0210 	sub.w	r2, r4, #16
   14a28:	f022 0c0f 	bic.w	ip, r2, #15
   14a2c:	f103 0e20 	add.w	lr, r3, #32
   14a30:	44e6      	add	lr, ip
   14a32:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   14a36:	f103 0210 	add.w	r2, r3, #16
   14a3a:	e942 5504 	strd	r5, r5, [r2, #-16]
   14a3e:	e942 5502 	strd	r5, r5, [r2, #-8]
   14a42:	3210      	adds	r2, #16
   14a44:	4572      	cmp	r2, lr
   14a46:	d1f8      	bne.n	14a3a <memset+0x46>
   14a48:	f10c 0201 	add.w	r2, ip, #1
   14a4c:	f014 0f0c 	tst.w	r4, #12
   14a50:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   14a54:	f004 0c0f 	and.w	ip, r4, #15
   14a58:	d013      	beq.n	14a82 <memset+0x8e>
   14a5a:	f1ac 0304 	sub.w	r3, ip, #4
   14a5e:	f023 0303 	bic.w	r3, r3, #3
   14a62:	3304      	adds	r3, #4
   14a64:	4413      	add	r3, r2
   14a66:	f842 5b04 	str.w	r5, [r2], #4
   14a6a:	4293      	cmp	r3, r2
   14a6c:	d1fb      	bne.n	14a66 <memset+0x72>
   14a6e:	f00c 0403 	and.w	r4, ip, #3
   14a72:	b12c      	cbz	r4, 14a80 <memset+0x8c>
   14a74:	b2ca      	uxtb	r2, r1
   14a76:	441c      	add	r4, r3
   14a78:	f803 2b01 	strb.w	r2, [r3], #1
   14a7c:	429c      	cmp	r4, r3
   14a7e:	d1fb      	bne.n	14a78 <memset+0x84>
   14a80:	bd30      	pop	{r4, r5, pc}
   14a82:	4664      	mov	r4, ip
   14a84:	4613      	mov	r3, r2
   14a86:	2c00      	cmp	r4, #0
   14a88:	d1f4      	bne.n	14a74 <memset+0x80>
   14a8a:	e7f9      	b.n	14a80 <memset+0x8c>
   14a8c:	4603      	mov	r3, r0
   14a8e:	4614      	mov	r4, r2
   14a90:	e7bf      	b.n	14a12 <memset+0x1e>
   14a92:	461a      	mov	r2, r3
   14a94:	46a4      	mov	ip, r4
   14a96:	e7e0      	b.n	14a5a <memset+0x66>

00014a98 <__malloc_lock>:
   14a98:	4801      	ldr	r0, [pc, #4]	; (14aa0 <__malloc_lock+0x8>)
   14a9a:	f004 bf83 	b.w	199a4 <__retarget_lock_acquire_recursive>
   14a9e:	bf00      	nop
   14aa0:	20000ee8 	.word	0x20000ee8

00014aa4 <__malloc_unlock>:
   14aa4:	4801      	ldr	r0, [pc, #4]	; (14aac <__malloc_unlock+0x8>)
   14aa6:	f004 bf85 	b.w	199b4 <__retarget_lock_release_recursive>
   14aaa:	bf00      	nop
   14aac:	20000ee8 	.word	0x20000ee8

00014ab0 <printf>:
   14ab0:	b40f      	push	{r0, r1, r2, r3}
   14ab2:	b500      	push	{lr}
   14ab4:	4907      	ldr	r1, [pc, #28]	; (14ad4 <printf+0x24>)
   14ab6:	b083      	sub	sp, #12
   14ab8:	ab04      	add	r3, sp, #16
   14aba:	6808      	ldr	r0, [r1, #0]
   14abc:	f853 2b04 	ldr.w	r2, [r3], #4
   14ac0:	6881      	ldr	r1, [r0, #8]
   14ac2:	9301      	str	r3, [sp, #4]
   14ac4:	f000 f85e 	bl	14b84 <_vfprintf_r>
   14ac8:	b003      	add	sp, #12
   14aca:	f85d eb04 	ldr.w	lr, [sp], #4
   14ace:	b004      	add	sp, #16
   14ad0:	4770      	bx	lr
   14ad2:	bf00      	nop
   14ad4:	20000d60 	.word	0x20000d60

00014ad8 <_sbrk_r>:
   14ad8:	b538      	push	{r3, r4, r5, lr}
   14ada:	4d07      	ldr	r5, [pc, #28]	; (14af8 <_sbrk_r+0x20>)
   14adc:	2200      	movs	r2, #0
   14ade:	4604      	mov	r4, r0
   14ae0:	4608      	mov	r0, r1
   14ae2:	602a      	str	r2, [r5, #0]
   14ae4:	f7f0 fb06 	bl	50f4 <_sbrk>
   14ae8:	1c43      	adds	r3, r0, #1
   14aea:	d000      	beq.n	14aee <_sbrk_r+0x16>
   14aec:	bd38      	pop	{r3, r4, r5, pc}
   14aee:	682b      	ldr	r3, [r5, #0]
   14af0:	2b00      	cmp	r3, #0
   14af2:	d0fb      	beq.n	14aec <_sbrk_r+0x14>
   14af4:	6023      	str	r3, [r4, #0]
   14af6:	bd38      	pop	{r3, r4, r5, pc}
   14af8:	20009288 	.word	0x20009288

00014afc <strncpy>:
   14afc:	b530      	push	{r4, r5, lr}
   14afe:	ea40 0401 	orr.w	r4, r0, r1
   14b02:	07a3      	lsls	r3, r4, #30
   14b04:	d101      	bne.n	14b0a <strncpy+0xe>
   14b06:	2a03      	cmp	r2, #3
   14b08:	d80f      	bhi.n	14b2a <strncpy+0x2e>
   14b0a:	4684      	mov	ip, r0
   14b0c:	f101 3eff 	add.w	lr, r1, #4294967295
   14b10:	e007      	b.n	14b22 <strncpy+0x26>
   14b12:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   14b16:	f803 1b01 	strb.w	r1, [r3], #1
   14b1a:	1e54      	subs	r4, r2, #1
   14b1c:	b1c1      	cbz	r1, 14b50 <strncpy+0x54>
   14b1e:	469c      	mov	ip, r3
   14b20:	4622      	mov	r2, r4
   14b22:	4663      	mov	r3, ip
   14b24:	2a00      	cmp	r2, #0
   14b26:	d1f4      	bne.n	14b12 <strncpy+0x16>
   14b28:	bd30      	pop	{r4, r5, pc}
   14b2a:	460b      	mov	r3, r1
   14b2c:	4684      	mov	ip, r0
   14b2e:	4619      	mov	r1, r3
   14b30:	f853 5b04 	ldr.w	r5, [r3], #4
   14b34:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   14b38:	ea24 0405 	bic.w	r4, r4, r5
   14b3c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   14b40:	d1e4      	bne.n	14b0c <strncpy+0x10>
   14b42:	3a04      	subs	r2, #4
   14b44:	2a03      	cmp	r2, #3
   14b46:	f84c 5b04 	str.w	r5, [ip], #4
   14b4a:	4619      	mov	r1, r3
   14b4c:	d8ef      	bhi.n	14b2e <strncpy+0x32>
   14b4e:	e7dd      	b.n	14b0c <strncpy+0x10>
   14b50:	4462      	add	r2, ip
   14b52:	2c00      	cmp	r4, #0
   14b54:	d0e8      	beq.n	14b28 <strncpy+0x2c>
   14b56:	f803 1b01 	strb.w	r1, [r3], #1
   14b5a:	4293      	cmp	r3, r2
   14b5c:	d1fb      	bne.n	14b56 <strncpy+0x5a>
   14b5e:	bd30      	pop	{r4, r5, pc}

00014b60 <strnlen>:
   14b60:	b171      	cbz	r1, 14b80 <strnlen+0x20>
   14b62:	4603      	mov	r3, r0
   14b64:	eb00 0c01 	add.w	ip, r0, r1
   14b68:	e001      	b.n	14b6e <strnlen+0xe>
   14b6a:	4563      	cmp	r3, ip
   14b6c:	d006      	beq.n	14b7c <strnlen+0x1c>
   14b6e:	461a      	mov	r2, r3
   14b70:	3301      	adds	r3, #1
   14b72:	7811      	ldrb	r1, [r2, #0]
   14b74:	2900      	cmp	r1, #0
   14b76:	d1f8      	bne.n	14b6a <strnlen+0xa>
   14b78:	1a10      	subs	r0, r2, r0
   14b7a:	4770      	bx	lr
   14b7c:	1a18      	subs	r0, r3, r0
   14b7e:	4770      	bx	lr
   14b80:	4608      	mov	r0, r1
   14b82:	4770      	bx	lr

00014b84 <_vfprintf_r>:
   14b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b88:	b0d7      	sub	sp, #348	; 0x15c
   14b8a:	461c      	mov	r4, r3
   14b8c:	9109      	str	r1, [sp, #36]	; 0x24
   14b8e:	4691      	mov	r9, r2
   14b90:	4605      	mov	r5, r0
   14b92:	9018      	str	r0, [sp, #96]	; 0x60
   14b94:	f002 f906 	bl	16da4 <_localeconv_r>
   14b98:	6802      	ldr	r2, [r0, #0]
   14b9a:	921a      	str	r2, [sp, #104]	; 0x68
   14b9c:	4610      	mov	r0, r2
   14b9e:	940d      	str	r4, [sp, #52]	; 0x34
   14ba0:	f7eb faae 	bl	100 <strlen>
   14ba4:	9019      	str	r0, [sp, #100]	; 0x64
   14ba6:	b11d      	cbz	r5, 14bb0 <_vfprintf_r+0x2c>
   14ba8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   14baa:	2b00      	cmp	r3, #0
   14bac:	f000 8244 	beq.w	15038 <_vfprintf_r+0x4b4>
   14bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14bb2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   14bb4:	8992      	ldrh	r2, [r2, #12]
   14bb6:	07d8      	lsls	r0, r3, #31
   14bb8:	d402      	bmi.n	14bc0 <_vfprintf_r+0x3c>
   14bba:	0591      	lsls	r1, r2, #22
   14bbc:	f140 8686 	bpl.w	158cc <_vfprintf_r+0xd48>
   14bc0:	0713      	lsls	r3, r2, #28
   14bc2:	f140 80cb 	bpl.w	14d5c <_vfprintf_r+0x1d8>
   14bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14bc8:	691b      	ldr	r3, [r3, #16]
   14bca:	2b00      	cmp	r3, #0
   14bcc:	f000 80c6 	beq.w	14d5c <_vfprintf_r+0x1d8>
   14bd0:	f002 031a 	and.w	r3, r2, #26
   14bd4:	2b0a      	cmp	r3, #10
   14bd6:	f000 80cf 	beq.w	14d78 <_vfprintf_r+0x1f4>
   14bda:	2400      	movs	r4, #0
   14bdc:	ab2d      	add	r3, sp, #180	; 0xb4
   14bde:	464d      	mov	r5, r9
   14be0:	e9cd 442b 	strd	r4, r4, [sp, #172]	; 0xac
   14be4:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
   14be8:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
   14bec:	9414      	str	r4, [sp, #80]	; 0x50
   14bee:	932a      	str	r3, [sp, #168]	; 0xa8
   14bf0:	4698      	mov	r8, r3
   14bf2:	941d      	str	r4, [sp, #116]	; 0x74
   14bf4:	2300      	movs	r3, #0
   14bf6:	940b      	str	r4, [sp, #44]	; 0x2c
   14bf8:	2400      	movs	r4, #0
   14bfa:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
   14bfe:	782b      	ldrb	r3, [r5, #0]
   14c00:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
   14c04:	2b00      	cmp	r3, #0
   14c06:	f000 818d 	beq.w	14f24 <_vfprintf_r+0x3a0>
   14c0a:	46ab      	mov	fp, r5
   14c0c:	e004      	b.n	14c18 <_vfprintf_r+0x94>
   14c0e:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
   14c12:	2b00      	cmp	r3, #0
   14c14:	f000 80c5 	beq.w	14da2 <_vfprintf_r+0x21e>
   14c18:	2b25      	cmp	r3, #37	; 0x25
   14c1a:	d1f8      	bne.n	14c0e <_vfprintf_r+0x8a>
   14c1c:	ebbb 0605 	subs.w	r6, fp, r5
   14c20:	f040 80c3 	bne.w	14daa <_vfprintf_r+0x226>
   14c24:	f89b 3000 	ldrb.w	r3, [fp]
   14c28:	2b00      	cmp	r3, #0
   14c2a:	f000 817b 	beq.w	14f24 <_vfprintf_r+0x3a0>
   14c2e:	2300      	movs	r3, #0
   14c30:	f04f 32ff 	mov.w	r2, #4294967295
   14c34:	f89b 7001 	ldrb.w	r7, [fp, #1]
   14c38:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   14c3c:	930a      	str	r3, [sp, #40]	; 0x28
   14c3e:	f10b 0b01 	add.w	fp, fp, #1
   14c42:	9208      	str	r2, [sp, #32]
   14c44:	469a      	mov	sl, r3
   14c46:	242b      	movs	r4, #43	; 0x2b
   14c48:	2120      	movs	r1, #32
   14c4a:	f10b 0b01 	add.w	fp, fp, #1
   14c4e:	f1a7 0320 	sub.w	r3, r7, #32
   14c52:	2b5a      	cmp	r3, #90	; 0x5a
   14c54:	f200 80dd 	bhi.w	14e12 <_vfprintf_r+0x28e>
   14c58:	e8df f013 	tbh	[pc, r3, lsl #1]
   14c5c:	00db031d 	.word	0x00db031d
   14c60:	031800db 	.word	0x031800db
   14c64:	00db00db 	.word	0x00db00db
   14c68:	006a00db 	.word	0x006a00db
   14c6c:	00db00db 	.word	0x00db00db
   14c70:	028f027f 	.word	0x028f027f
   14c74:	028a00db 	.word	0x028a00db
   14c78:	00db0299 	.word	0x00db0299
   14c7c:	005b0294 	.word	0x005b0294
   14c80:	005b005b 	.word	0x005b005b
   14c84:	005b005b 	.word	0x005b005b
   14c88:	005b005b 	.word	0x005b005b
   14c8c:	005b005b 	.word	0x005b005b
   14c90:	00db00db 	.word	0x00db00db
   14c94:	00db00db 	.word	0x00db00db
   14c98:	00db00db 	.word	0x00db00db
   14c9c:	016b00db 	.word	0x016b00db
   14ca0:	021f00db 	.word	0x021f00db
   14ca4:	016b01f7 	.word	0x016b01f7
   14ca8:	016b016b 	.word	0x016b016b
   14cac:	00db00db 	.word	0x00db00db
   14cb0:	00db00db 	.word	0x00db00db
   14cb4:	00db0313 	.word	0x00db0313
   14cb8:	024e00db 	.word	0x024e00db
   14cbc:	00db00db 	.word	0x00db00db
   14cc0:	022900db 	.word	0x022900db
   14cc4:	030100db 	.word	0x030100db
   14cc8:	00db00db 	.word	0x00db00db
   14ccc:	00db0787 	.word	0x00db0787
   14cd0:	00db00db 	.word	0x00db00db
   14cd4:	00db00db 	.word	0x00db00db
   14cd8:	00db00db 	.word	0x00db00db
   14cdc:	016b00db 	.word	0x016b00db
   14ce0:	021f00db 	.word	0x021f00db
   14ce4:	016b01f9 	.word	0x016b01f9
   14ce8:	016b016b 	.word	0x016b016b
   14cec:	01f902f4 	.word	0x01f902f4
   14cf0:	00db01f2 	.word	0x00db01f2
   14cf4:	00db02dd 	.word	0x00db02dd
   14cf8:	025002b3 	.word	0x025002b3
   14cfc:	01f202cb 	.word	0x01f202cb
   14d00:	022900db 	.word	0x022900db
   14d04:	0783007d 	.word	0x0783007d
   14d08:	00db00db 	.word	0x00db00db
   14d0c:	00db0763 	.word	0x00db0763
   14d10:	007d      	.short	0x007d
   14d12:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   14d16:	2200      	movs	r2, #0
   14d18:	f81b 7b01 	ldrb.w	r7, [fp], #1
   14d1c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   14d20:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   14d24:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   14d28:	2b09      	cmp	r3, #9
   14d2a:	d9f5      	bls.n	14d18 <_vfprintf_r+0x194>
   14d2c:	920a      	str	r2, [sp, #40]	; 0x28
   14d2e:	e78e      	b.n	14c4e <_vfprintf_r+0xca>
   14d30:	4648      	mov	r0, r9
   14d32:	f002 f837 	bl	16da4 <_localeconv_r>
   14d36:	6843      	ldr	r3, [r0, #4]
   14d38:	931e      	str	r3, [sp, #120]	; 0x78
   14d3a:	4618      	mov	r0, r3
   14d3c:	f7eb f9e0 	bl	100 <strlen>
   14d40:	901f      	str	r0, [sp, #124]	; 0x7c
   14d42:	4606      	mov	r6, r0
   14d44:	4648      	mov	r0, r9
   14d46:	f002 f82d 	bl	16da4 <_localeconv_r>
   14d4a:	6883      	ldr	r3, [r0, #8]
   14d4c:	931d      	str	r3, [sp, #116]	; 0x74
   14d4e:	2120      	movs	r1, #32
   14d50:	2e00      	cmp	r6, #0
   14d52:	f040 86d8 	bne.w	15b06 <_vfprintf_r+0xf82>
   14d56:	f89b 7000 	ldrb.w	r7, [fp]
   14d5a:	e776      	b.n	14c4a <_vfprintf_r+0xc6>
   14d5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   14d5e:	9818      	ldr	r0, [sp, #96]	; 0x60
   14d60:	4629      	mov	r1, r5
   14d62:	f001 fc6b 	bl	1663c <__swsetup_r>
   14d66:	2800      	cmp	r0, #0
   14d68:	f041 82e1 	bne.w	1632e <_vfprintf_r+0x17aa>
   14d6c:	89aa      	ldrh	r2, [r5, #12]
   14d6e:	f002 031a 	and.w	r3, r2, #26
   14d72:	2b0a      	cmp	r3, #10
   14d74:	f47f af31 	bne.w	14bda <_vfprintf_r+0x56>
   14d78:	9909      	ldr	r1, [sp, #36]	; 0x24
   14d7a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   14d7e:	2b00      	cmp	r3, #0
   14d80:	f6ff af2b 	blt.w	14bda <_vfprintf_r+0x56>
   14d84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   14d86:	07dd      	lsls	r5, r3, #31
   14d88:	d402      	bmi.n	14d90 <_vfprintf_r+0x20c>
   14d8a:	0590      	lsls	r0, r2, #22
   14d8c:	f141 80fd 	bpl.w	15f8a <_vfprintf_r+0x1406>
   14d90:	9909      	ldr	r1, [sp, #36]	; 0x24
   14d92:	9818      	ldr	r0, [sp, #96]	; 0x60
   14d94:	4623      	mov	r3, r4
   14d96:	464a      	mov	r2, r9
   14d98:	b057      	add	sp, #348	; 0x15c
   14d9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d9e:	f001 bc0d 	b.w	165bc <__sbprintf>
   14da2:	ebbb 0605 	subs.w	r6, fp, r5
   14da6:	f000 80bd 	beq.w	14f24 <_vfprintf_r+0x3a0>
   14daa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   14dac:	4433      	add	r3, r6
   14dae:	932c      	str	r3, [sp, #176]	; 0xb0
   14db0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   14db2:	3301      	adds	r3, #1
   14db4:	2b07      	cmp	r3, #7
   14db6:	e9c8 5600 	strd	r5, r6, [r8]
   14dba:	932b      	str	r3, [sp, #172]	; 0xac
   14dbc:	dc05      	bgt.n	14dca <_vfprintf_r+0x246>
   14dbe:	f108 0808 	add.w	r8, r8, #8
   14dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14dc4:	4433      	add	r3, r6
   14dc6:	930b      	str	r3, [sp, #44]	; 0x2c
   14dc8:	e72c      	b.n	14c24 <_vfprintf_r+0xa0>
   14dca:	9909      	ldr	r1, [sp, #36]	; 0x24
   14dcc:	aa2a      	add	r2, sp, #168	; 0xa8
   14dce:	4648      	mov	r0, r9
   14dd0:	f002 fc74 	bl	176bc <__sprint_r>
   14dd4:	b980      	cbnz	r0, 14df8 <_vfprintf_r+0x274>
   14dd6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   14dda:	e7f2      	b.n	14dc2 <_vfprintf_r+0x23e>
   14ddc:	9909      	ldr	r1, [sp, #36]	; 0x24
   14dde:	aa2a      	add	r2, sp, #168	; 0xa8
   14de0:	4648      	mov	r0, r9
   14de2:	f002 fc6b 	bl	176bc <__sprint_r>
   14de6:	2800      	cmp	r0, #0
   14de8:	f000 808d 	beq.w	14f06 <_vfprintf_r+0x382>
   14dec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14dee:	b11b      	cbz	r3, 14df8 <_vfprintf_r+0x274>
   14df0:	9818      	ldr	r0, [sp, #96]	; 0x60
   14df2:	4619      	mov	r1, r3
   14df4:	f001 feb6 	bl	16b64 <_free_r>
   14df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14dfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   14dfc:	899b      	ldrh	r3, [r3, #12]
   14dfe:	07d4      	lsls	r4, r2, #31
   14e00:	f140 8111 	bpl.w	15026 <_vfprintf_r+0x4a2>
   14e04:	0659      	lsls	r1, r3, #25
   14e06:	f101 829e 	bmi.w	16346 <_vfprintf_r+0x17c2>
   14e0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14e0c:	b057      	add	sp, #348	; 0x15c
   14e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e12:	2f00      	cmp	r7, #0
   14e14:	f000 8086 	beq.w	14f24 <_vfprintf_r+0x3a0>
   14e18:	2200      	movs	r2, #0
   14e1a:	f88d 70f4 	strb.w	r7, [sp, #244]	; 0xf4
   14e1e:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   14e22:	2301      	movs	r3, #1
   14e24:	9307      	str	r3, [sp, #28]
   14e26:	920e      	str	r2, [sp, #56]	; 0x38
   14e28:	930c      	str	r3, [sp, #48]	; 0x30
   14e2a:	9208      	str	r2, [sp, #32]
   14e2c:	9210      	str	r2, [sp, #64]	; 0x40
   14e2e:	9215      	str	r2, [sp, #84]	; 0x54
   14e30:	9213      	str	r2, [sp, #76]	; 0x4c
   14e32:	ad3d      	add	r5, sp, #244	; 0xf4
   14e34:	f01a 0302 	ands.w	r3, sl, #2
   14e38:	930f      	str	r3, [sp, #60]	; 0x3c
   14e3a:	d002      	beq.n	14e42 <_vfprintf_r+0x2be>
   14e3c:	9b07      	ldr	r3, [sp, #28]
   14e3e:	3302      	adds	r3, #2
   14e40:	9307      	str	r3, [sp, #28]
   14e42:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   14e46:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   14e48:	9312      	str	r3, [sp, #72]	; 0x48
   14e4a:	d105      	bne.n	14e58 <_vfprintf_r+0x2d4>
   14e4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e4e:	9907      	ldr	r1, [sp, #28]
   14e50:	1a5e      	subs	r6, r3, r1
   14e52:	2e00      	cmp	r6, #0
   14e54:	f300 80af 	bgt.w	14fb6 <_vfprintf_r+0x432>
   14e58:	b18a      	cbz	r2, 14e7e <_vfprintf_r+0x2fa>
   14e5a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   14e5c:	f10d 018b 	add.w	r1, sp, #139	; 0x8b
   14e60:	3201      	adds	r2, #1
   14e62:	3401      	adds	r4, #1
   14e64:	f8c8 1000 	str.w	r1, [r8]
   14e68:	2a07      	cmp	r2, #7
   14e6a:	f04f 0101 	mov.w	r1, #1
   14e6e:	942c      	str	r4, [sp, #176]	; 0xb0
   14e70:	922b      	str	r2, [sp, #172]	; 0xac
   14e72:	f8c8 1004 	str.w	r1, [r8, #4]
   14e76:	f300 83bf 	bgt.w	155f8 <_vfprintf_r+0xa74>
   14e7a:	f108 0808 	add.w	r8, r8, #8
   14e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14e80:	b183      	cbz	r3, 14ea4 <_vfprintf_r+0x320>
   14e82:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   14e84:	aa23      	add	r2, sp, #140	; 0x8c
   14e86:	3301      	adds	r3, #1
   14e88:	3402      	adds	r4, #2
   14e8a:	f8c8 2000 	str.w	r2, [r8]
   14e8e:	2b07      	cmp	r3, #7
   14e90:	f04f 0202 	mov.w	r2, #2
   14e94:	942c      	str	r4, [sp, #176]	; 0xb0
   14e96:	932b      	str	r3, [sp, #172]	; 0xac
   14e98:	f8c8 2004 	str.w	r2, [r8, #4]
   14e9c:	f300 83b8 	bgt.w	15610 <_vfprintf_r+0xa8c>
   14ea0:	f108 0808 	add.w	r8, r8, #8
   14ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14ea6:	2b80      	cmp	r3, #128	; 0x80
   14ea8:	f000 82a0 	beq.w	153ec <_vfprintf_r+0x868>
   14eac:	9b08      	ldr	r3, [sp, #32]
   14eae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14eb0:	1a9e      	subs	r6, r3, r2
   14eb2:	2e00      	cmp	r6, #0
   14eb4:	f300 82e6 	bgt.w	15484 <_vfprintf_r+0x900>
   14eb8:	f41a 7f80 	tst.w	sl, #256	; 0x100
   14ebc:	f040 823d 	bne.w	1533a <_vfprintf_r+0x7b6>
   14ec0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   14ec2:	f8c8 3004 	str.w	r3, [r8, #4]
   14ec6:	441c      	add	r4, r3
   14ec8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   14eca:	f8c8 5000 	str.w	r5, [r8]
   14ece:	3301      	adds	r3, #1
   14ed0:	2b07      	cmp	r3, #7
   14ed2:	942c      	str	r4, [sp, #176]	; 0xb0
   14ed4:	932b      	str	r3, [sp, #172]	; 0xac
   14ed6:	f300 832c 	bgt.w	15532 <_vfprintf_r+0x9ae>
   14eda:	f108 0808 	add.w	r8, r8, #8
   14ede:	f01a 0f04 	tst.w	sl, #4
   14ee2:	d005      	beq.n	14ef0 <_vfprintf_r+0x36c>
   14ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14ee6:	9a07      	ldr	r2, [sp, #28]
   14ee8:	1a9d      	subs	r5, r3, r2
   14eea:	2d00      	cmp	r5, #0
   14eec:	f300 839c 	bgt.w	15628 <_vfprintf_r+0xaa4>
   14ef0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   14ef4:	9907      	ldr	r1, [sp, #28]
   14ef6:	428a      	cmp	r2, r1
   14ef8:	bfac      	ite	ge
   14efa:	189b      	addge	r3, r3, r2
   14efc:	185b      	addlt	r3, r3, r1
   14efe:	930b      	str	r3, [sp, #44]	; 0x2c
   14f00:	2c00      	cmp	r4, #0
   14f02:	f47f af6b 	bne.w	14ddc <_vfprintf_r+0x258>
   14f06:	2300      	movs	r3, #0
   14f08:	932b      	str	r3, [sp, #172]	; 0xac
   14f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   14f0c:	b11b      	cbz	r3, 14f16 <_vfprintf_r+0x392>
   14f0e:	990e      	ldr	r1, [sp, #56]	; 0x38
   14f10:	4648      	mov	r0, r9
   14f12:	f001 fe27 	bl	16b64 <_free_r>
   14f16:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   14f1a:	465d      	mov	r5, fp
   14f1c:	782b      	ldrb	r3, [r5, #0]
   14f1e:	2b00      	cmp	r3, #0
   14f20:	f47f ae73 	bne.w	14c0a <_vfprintf_r+0x86>
   14f24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   14f26:	2b00      	cmp	r3, #0
   14f28:	f041 81b1 	bne.w	1628e <_vfprintf_r+0x170a>
   14f2c:	2300      	movs	r3, #0
   14f2e:	932b      	str	r3, [sp, #172]	; 0xac
   14f30:	e762      	b.n	14df8 <_vfprintf_r+0x274>
   14f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f34:	3307      	adds	r3, #7
   14f36:	f023 0207 	bic.w	r2, r3, #7
   14f3a:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   14f3e:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
   14f42:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   14f46:	920d      	str	r2, [sp, #52]	; 0x34
   14f48:	461e      	mov	r6, r3
   14f4a:	4618      	mov	r0, r3
   14f4c:	4621      	mov	r1, r4
   14f4e:	4bb8      	ldr	r3, [pc, #736]	; (15230 <_vfprintf_r+0x6ac>)
   14f50:	f04f 32ff 	mov.w	r2, #4294967295
   14f54:	f7ec fa6c 	bl	1430 <__aeabi_dcmpun>
   14f58:	2800      	cmp	r0, #0
   14f5a:	f040 8506 	bne.w	1596a <_vfprintf_r+0xde6>
   14f5e:	4bb4      	ldr	r3, [pc, #720]	; (15230 <_vfprintf_r+0x6ac>)
   14f60:	4630      	mov	r0, r6
   14f62:	4621      	mov	r1, r4
   14f64:	f04f 32ff 	mov.w	r2, #4294967295
   14f68:	f7ec f9aa 	bl	12c0 <__aeabi_dcmple>
   14f6c:	2800      	cmp	r0, #0
   14f6e:	f040 84fc 	bne.w	1596a <_vfprintf_r+0xde6>
   14f72:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   14f76:	2200      	movs	r2, #0
   14f78:	2300      	movs	r3, #0
   14f7a:	f7ec f997 	bl	12ac <__aeabi_dcmplt>
   14f7e:	2800      	cmp	r0, #0
   14f80:	f040 873c 	bne.w	15dfc <_vfprintf_r+0x1278>
   14f84:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   14f88:	4daa      	ldr	r5, [pc, #680]	; (15234 <_vfprintf_r+0x6b0>)
   14f8a:	4bab      	ldr	r3, [pc, #684]	; (15238 <_vfprintf_r+0x6b4>)
   14f8c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
   14f90:	2103      	movs	r1, #3
   14f92:	2f47      	cmp	r7, #71	; 0x47
   14f94:	bfc8      	it	gt
   14f96:	461d      	movgt	r5, r3
   14f98:	2300      	movs	r3, #0
   14f9a:	930e      	str	r3, [sp, #56]	; 0x38
   14f9c:	9107      	str	r1, [sp, #28]
   14f9e:	910c      	str	r1, [sp, #48]	; 0x30
   14fa0:	9308      	str	r3, [sp, #32]
   14fa2:	9310      	str	r3, [sp, #64]	; 0x40
   14fa4:	9315      	str	r3, [sp, #84]	; 0x54
   14fa6:	9313      	str	r3, [sp, #76]	; 0x4c
   14fa8:	2a00      	cmp	r2, #0
   14faa:	f43f af43 	beq.w	14e34 <_vfprintf_r+0x2b0>
   14fae:	9b07      	ldr	r3, [sp, #28]
   14fb0:	3301      	adds	r3, #1
   14fb2:	9307      	str	r3, [sp, #28]
   14fb4:	e73e      	b.n	14e34 <_vfprintf_r+0x2b0>
   14fb6:	2e10      	cmp	r6, #16
   14fb8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   14fba:	dd23      	ble.n	15004 <_vfprintf_r+0x480>
   14fbc:	4621      	mov	r1, r4
   14fbe:	2310      	movs	r3, #16
   14fc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   14fc2:	e004      	b.n	14fce <_vfprintf_r+0x44a>
   14fc4:	3e10      	subs	r6, #16
   14fc6:	2e10      	cmp	r6, #16
   14fc8:	f108 0808 	add.w	r8, r8, #8
   14fcc:	dd19      	ble.n	15002 <_vfprintf_r+0x47e>
   14fce:	3201      	adds	r2, #1
   14fd0:	489a      	ldr	r0, [pc, #616]	; (1523c <_vfprintf_r+0x6b8>)
   14fd2:	3110      	adds	r1, #16
   14fd4:	2a07      	cmp	r2, #7
   14fd6:	e9c8 0300 	strd	r0, r3, [r8]
   14fda:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   14fde:	ddf1      	ble.n	14fc4 <_vfprintf_r+0x440>
   14fe0:	aa2a      	add	r2, sp, #168	; 0xa8
   14fe2:	4621      	mov	r1, r4
   14fe4:	4648      	mov	r0, r9
   14fe6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   14fea:	f002 fb67 	bl	176bc <__sprint_r>
   14fee:	2800      	cmp	r0, #0
   14ff0:	f47f aefc 	bne.w	14dec <_vfprintf_r+0x268>
   14ff4:	3e10      	subs	r6, #16
   14ff6:	2e10      	cmp	r6, #16
   14ff8:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   14ffc:	f04f 0310 	mov.w	r3, #16
   15000:	dce5      	bgt.n	14fce <_vfprintf_r+0x44a>
   15002:	460c      	mov	r4, r1
   15004:	3201      	adds	r2, #1
   15006:	4b8d      	ldr	r3, [pc, #564]	; (1523c <_vfprintf_r+0x6b8>)
   15008:	f8c8 6004 	str.w	r6, [r8, #4]
   1500c:	4434      	add	r4, r6
   1500e:	2a07      	cmp	r2, #7
   15010:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
   15014:	f8c8 3000 	str.w	r3, [r8]
   15018:	f300 8632 	bgt.w	15c80 <_vfprintf_r+0x10fc>
   1501c:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   15020:	f108 0808 	add.w	r8, r8, #8
   15024:	e718      	b.n	14e58 <_vfprintf_r+0x2d4>
   15026:	0598      	lsls	r0, r3, #22
   15028:	f53f aeec 	bmi.w	14e04 <_vfprintf_r+0x280>
   1502c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1502e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15030:	f004 fcc0 	bl	199b4 <__retarget_lock_release_recursive>
   15034:	89a3      	ldrh	r3, [r4, #12]
   15036:	e6e5      	b.n	14e04 <_vfprintf_r+0x280>
   15038:	9818      	ldr	r0, [sp, #96]	; 0x60
   1503a:	f001 fcbd 	bl	169b8 <__sinit>
   1503e:	e5b7      	b.n	14bb0 <_vfprintf_r+0x2c>
   15040:	f89b 7000 	ldrb.w	r7, [fp]
   15044:	f04a 0a20 	orr.w	sl, sl, #32
   15048:	e5ff      	b.n	14c4a <_vfprintf_r+0xc6>
   1504a:	f04a 0a10 	orr.w	sl, sl, #16
   1504e:	f01a 0f20 	tst.w	sl, #32
   15052:	f000 841b 	beq.w	1588c <_vfprintf_r+0xd08>
   15056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15058:	3307      	adds	r3, #7
   1505a:	f023 0307 	bic.w	r3, r3, #7
   1505e:	461a      	mov	r2, r3
   15060:	685b      	ldr	r3, [r3, #4]
   15062:	f852 4b08 	ldr.w	r4, [r2], #8
   15066:	920d      	str	r2, [sp, #52]	; 0x34
   15068:	461e      	mov	r6, r3
   1506a:	2b00      	cmp	r3, #0
   1506c:	f2c0 841f 	blt.w	158ae <_vfprintf_r+0xd2a>
   15070:	9b08      	ldr	r3, [sp, #32]
   15072:	3301      	adds	r3, #1
   15074:	f000 82af 	beq.w	155d6 <_vfprintf_r+0xa52>
   15078:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
   1507c:	ea54 0306 	orrs.w	r3, r4, r6
   15080:	f8cd a01c 	str.w	sl, [sp, #28]
   15084:	f040 82a9 	bne.w	155da <_vfprintf_r+0xa56>
   15088:	9b08      	ldr	r3, [sp, #32]
   1508a:	2b00      	cmp	r3, #0
   1508c:	f040 82aa 	bne.w	155e4 <_vfprintf_r+0xa60>
   15090:	2300      	movs	r3, #0
   15092:	9308      	str	r3, [sp, #32]
   15094:	930c      	str	r3, [sp, #48]	; 0x30
   15096:	ad56      	add	r5, sp, #344	; 0x158
   15098:	e121      	b.n	152de <_vfprintf_r+0x75a>
   1509a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1509c:	2200      	movs	r2, #0
   1509e:	f853 1b04 	ldr.w	r1, [r3], #4
   150a2:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   150a6:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
   150aa:	930d      	str	r3, [sp, #52]	; 0x34
   150ac:	e6b9      	b.n	14e22 <_vfprintf_r+0x29e>
   150ae:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   150b0:	9b08      	ldr	r3, [sp, #32]
   150b2:	f854 5b04 	ldr.w	r5, [r4], #4
   150b6:	2600      	movs	r6, #0
   150b8:	f88d 608b 	strb.w	r6, [sp, #139]	; 0x8b
   150bc:	2d00      	cmp	r5, #0
   150be:	f000 8571 	beq.w	15ba4 <_vfprintf_r+0x1020>
   150c2:	1c5a      	adds	r2, r3, #1
   150c4:	f000 865a 	beq.w	15d7c <_vfprintf_r+0x11f8>
   150c8:	461a      	mov	r2, r3
   150ca:	4631      	mov	r1, r6
   150cc:	4628      	mov	r0, r5
   150ce:	f7eb f9f7 	bl	4c0 <memchr>
   150d2:	900e      	str	r0, [sp, #56]	; 0x38
   150d4:	2800      	cmp	r0, #0
   150d6:	f001 80b5 	beq.w	16244 <_vfprintf_r+0x16c0>
   150da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   150dc:	9608      	str	r6, [sp, #32]
   150de:	1b5b      	subs	r3, r3, r5
   150e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   150e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   150e8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   150ec:	9307      	str	r3, [sp, #28]
   150ee:	960e      	str	r6, [sp, #56]	; 0x38
   150f0:	9610      	str	r6, [sp, #64]	; 0x40
   150f2:	9615      	str	r6, [sp, #84]	; 0x54
   150f4:	9613      	str	r6, [sp, #76]	; 0x4c
   150f6:	e757      	b.n	14fa8 <_vfprintf_r+0x424>
   150f8:	f04a 0a10 	orr.w	sl, sl, #16
   150fc:	f01a 0620 	ands.w	r6, sl, #32
   15100:	f000 83b5 	beq.w	1586e <_vfprintf_r+0xcea>
   15104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15106:	3307      	adds	r3, #7
   15108:	f023 0307 	bic.w	r3, r3, #7
   1510c:	685e      	ldr	r6, [r3, #4]
   1510e:	f853 4b08 	ldr.w	r4, [r3], #8
   15112:	930d      	str	r3, [sp, #52]	; 0x34
   15114:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
   15118:	9307      	str	r3, [sp, #28]
   1511a:	2300      	movs	r3, #0
   1511c:	2200      	movs	r2, #0
   1511e:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   15122:	9a08      	ldr	r2, [sp, #32]
   15124:	1c55      	adds	r5, r2, #1
   15126:	f000 80c2 	beq.w	152ae <_vfprintf_r+0x72a>
   1512a:	9907      	ldr	r1, [sp, #28]
   1512c:	f021 0a80 	bic.w	sl, r1, #128	; 0x80
   15130:	ea54 0106 	orrs.w	r1, r4, r6
   15134:	f040 80b9 	bne.w	152aa <_vfprintf_r+0x726>
   15138:	2a00      	cmp	r2, #0
   1513a:	f040 85d4 	bne.w	15ce6 <_vfprintf_r+0x1162>
   1513e:	2b00      	cmp	r3, #0
   15140:	d1a6      	bne.n	15090 <_vfprintf_r+0x50c>
   15142:	9b07      	ldr	r3, [sp, #28]
   15144:	f013 0301 	ands.w	r3, r3, #1
   15148:	930c      	str	r3, [sp, #48]	; 0x30
   1514a:	f000 83f3 	beq.w	15934 <_vfprintf_r+0xdb0>
   1514e:	2330      	movs	r3, #48	; 0x30
   15150:	f88d 3157 	strb.w	r3, [sp, #343]	; 0x157
   15154:	f20d 1557 	addw	r5, sp, #343	; 0x157
   15158:	e0c1      	b.n	152de <_vfprintf_r+0x75a>
   1515a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1515c:	f853 2b04 	ldr.w	r2, [r3], #4
   15160:	920a      	str	r2, [sp, #40]	; 0x28
   15162:	2a00      	cmp	r2, #0
   15164:	f280 83b9 	bge.w	158da <_vfprintf_r+0xd56>
   15168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1516a:	930d      	str	r3, [sp, #52]	; 0x34
   1516c:	4252      	negs	r2, r2
   1516e:	920a      	str	r2, [sp, #40]	; 0x28
   15170:	f89b 7000 	ldrb.w	r7, [fp]
   15174:	f04a 0a04 	orr.w	sl, sl, #4
   15178:	e567      	b.n	14c4a <_vfprintf_r+0xc6>
   1517a:	f89b 7000 	ldrb.w	r7, [fp]
   1517e:	f88d 408b 	strb.w	r4, [sp, #139]	; 0x8b
   15182:	e562      	b.n	14c4a <_vfprintf_r+0xc6>
   15184:	f89b 7000 	ldrb.w	r7, [fp]
   15188:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   1518c:	e55d      	b.n	14c4a <_vfprintf_r+0xc6>
   1518e:	465a      	mov	r2, fp
   15190:	f812 7b01 	ldrb.w	r7, [r2], #1
   15194:	2f2a      	cmp	r7, #42	; 0x2a
   15196:	f001 81e7 	beq.w	16568 <_vfprintf_r+0x19e4>
   1519a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   1519e:	2b09      	cmp	r3, #9
   151a0:	4693      	mov	fp, r2
   151a2:	bf98      	it	ls
   151a4:	2200      	movls	r2, #0
   151a6:	f201 8086 	bhi.w	162b6 <_vfprintf_r+0x1732>
   151aa:	f81b 7b01 	ldrb.w	r7, [fp], #1
   151ae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   151b2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   151b6:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
   151ba:	2b09      	cmp	r3, #9
   151bc:	d9f5      	bls.n	151aa <_vfprintf_r+0x626>
   151be:	9208      	str	r2, [sp, #32]
   151c0:	e545      	b.n	14c4e <_vfprintf_r+0xca>
   151c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   151c4:	f01a 0f20 	tst.w	sl, #32
   151c8:	f852 3b04 	ldr.w	r3, [r2], #4
   151cc:	920d      	str	r2, [sp, #52]	; 0x34
   151ce:	f040 8493 	bne.w	15af8 <_vfprintf_r+0xf74>
   151d2:	f01a 0f10 	tst.w	sl, #16
   151d6:	f040 858c 	bne.w	15cf2 <_vfprintf_r+0x116e>
   151da:	f01a 0f40 	tst.w	sl, #64	; 0x40
   151de:	f040 861b 	bne.w	15e18 <_vfprintf_r+0x1294>
   151e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
   151e6:	f000 8584 	beq.w	15cf2 <_vfprintf_r+0x116e>
   151ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   151ec:	701a      	strb	r2, [r3, #0]
   151ee:	465d      	mov	r5, fp
   151f0:	e694      	b.n	14f1c <_vfprintf_r+0x398>
   151f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   151f4:	f853 4b04 	ldr.w	r4, [r3], #4
   151f8:	930d      	str	r3, [sp, #52]	; 0x34
   151fa:	2330      	movs	r3, #48	; 0x30
   151fc:	f04a 0202 	orr.w	r2, sl, #2
   15200:	2778      	movs	r7, #120	; 0x78
   15202:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   15206:	4b0e      	ldr	r3, [pc, #56]	; (15240 <_vfprintf_r+0x6bc>)
   15208:	931b      	str	r3, [sp, #108]	; 0x6c
   1520a:	9207      	str	r2, [sp, #28]
   1520c:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
   15210:	2600      	movs	r6, #0
   15212:	2302      	movs	r3, #2
   15214:	e782      	b.n	1511c <_vfprintf_r+0x598>
   15216:	f89b 7000 	ldrb.w	r7, [fp]
   1521a:	2f6c      	cmp	r7, #108	; 0x6c
   1521c:	bf03      	ittte	eq
   1521e:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   15222:	f04a 0a20 	orreq.w	sl, sl, #32
   15226:	f10b 0b01 	addeq.w	fp, fp, #1
   1522a:	f04a 0a10 	orrne.w	sl, sl, #16
   1522e:	e50c      	b.n	14c4a <_vfprintf_r+0xc6>
   15230:	7fefffff 	.word	0x7fefffff
   15234:	0001fa98 	.word	0x0001fa98
   15238:	0001fa9c 	.word	0x0001fa9c
   1523c:	0001fad8 	.word	0x0001fad8
   15240:	0001faa8 	.word	0x0001faa8
   15244:	f89b 7000 	ldrb.w	r7, [fp]
   15248:	2f68      	cmp	r7, #104	; 0x68
   1524a:	bf03      	ittte	eq
   1524c:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
   15250:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
   15254:	f10b 0b01 	addeq.w	fp, fp, #1
   15258:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
   1525c:	e4f5      	b.n	14c4a <_vfprintf_r+0xc6>
   1525e:	f04a 0310 	orr.w	r3, sl, #16
   15262:	9307      	str	r3, [sp, #28]
   15264:	9b07      	ldr	r3, [sp, #28]
   15266:	f013 0620 	ands.w	r6, r3, #32
   1526a:	f000 82ed 	beq.w	15848 <_vfprintf_r+0xcc4>
   1526e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15270:	3307      	adds	r3, #7
   15272:	f023 0307 	bic.w	r3, r3, #7
   15276:	685e      	ldr	r6, [r3, #4]
   15278:	f853 4b08 	ldr.w	r4, [r3], #8
   1527c:	930d      	str	r3, [sp, #52]	; 0x34
   1527e:	2301      	movs	r3, #1
   15280:	e74c      	b.n	1511c <_vfprintf_r+0x598>
   15282:	f89b 7000 	ldrb.w	r7, [fp]
   15286:	f04a 0a08 	orr.w	sl, sl, #8
   1528a:	e4de      	b.n	14c4a <_vfprintf_r+0xc6>
   1528c:	f89b 7000 	ldrb.w	r7, [fp]
   15290:	f04a 0a01 	orr.w	sl, sl, #1
   15294:	e4d9      	b.n	14c4a <_vfprintf_r+0xc6>
   15296:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
   1529a:	f89b 7000 	ldrb.w	r7, [fp]
   1529e:	2b00      	cmp	r3, #0
   152a0:	f47f acd3 	bne.w	14c4a <_vfprintf_r+0xc6>
   152a4:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
   152a8:	e4cf      	b.n	14c4a <_vfprintf_r+0xc6>
   152aa:	f8cd a01c 	str.w	sl, [sp, #28]
   152ae:	2b01      	cmp	r3, #1
   152b0:	f000 8193 	beq.w	155da <_vfprintf_r+0xa56>
   152b4:	2b02      	cmp	r3, #2
   152b6:	ad56      	add	r5, sp, #344	; 0x158
   152b8:	d120      	bne.n	152fc <_vfprintf_r+0x778>
   152ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   152bc:	f004 030f 	and.w	r3, r4, #15
   152c0:	0924      	lsrs	r4, r4, #4
   152c2:	5cd3      	ldrb	r3, [r2, r3]
   152c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
   152c8:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
   152cc:	0936      	lsrs	r6, r6, #4
   152ce:	ea54 0306 	orrs.w	r3, r4, r6
   152d2:	d1f3      	bne.n	152bc <_vfprintf_r+0x738>
   152d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
   152d8:	ab56      	add	r3, sp, #344	; 0x158
   152da:	1b5b      	subs	r3, r3, r5
   152dc:	930c      	str	r3, [sp, #48]	; 0x30
   152de:	9908      	ldr	r1, [sp, #32]
   152e0:	980c      	ldr	r0, [sp, #48]	; 0x30
   152e2:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   152e6:	4281      	cmp	r1, r0
   152e8:	f04f 0300 	mov.w	r3, #0
   152ec:	bfb8      	it	lt
   152ee:	4601      	movlt	r1, r0
   152f0:	930e      	str	r3, [sp, #56]	; 0x38
   152f2:	9107      	str	r1, [sp, #28]
   152f4:	9310      	str	r3, [sp, #64]	; 0x40
   152f6:	9315      	str	r3, [sp, #84]	; 0x54
   152f8:	9313      	str	r3, [sp, #76]	; 0x4c
   152fa:	e655      	b.n	14fa8 <_vfprintf_r+0x424>
   152fc:	f004 0307 	and.w	r3, r4, #7
   15300:	08e4      	lsrs	r4, r4, #3
   15302:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
   15306:	08f6      	lsrs	r6, r6, #3
   15308:	3330      	adds	r3, #48	; 0x30
   1530a:	ea54 0106 	orrs.w	r1, r4, r6
   1530e:	462a      	mov	r2, r5
   15310:	f805 3d01 	strb.w	r3, [r5, #-1]!
   15314:	d1f2      	bne.n	152fc <_vfprintf_r+0x778>
   15316:	f8dd a01c 	ldr.w	sl, [sp, #28]
   1531a:	f01a 0f01 	tst.w	sl, #1
   1531e:	d0db      	beq.n	152d8 <_vfprintf_r+0x754>
   15320:	2b30      	cmp	r3, #48	; 0x30
   15322:	d0d7      	beq.n	152d4 <_vfprintf_r+0x750>
   15324:	2330      	movs	r3, #48	; 0x30
   15326:	3a02      	subs	r2, #2
   15328:	f805 3c01 	strb.w	r3, [r5, #-1]
   1532c:	ab56      	add	r3, sp, #344	; 0x158
   1532e:	1a9b      	subs	r3, r3, r2
   15330:	f8dd a01c 	ldr.w	sl, [sp, #28]
   15334:	930c      	str	r3, [sp, #48]	; 0x30
   15336:	4615      	mov	r5, r2
   15338:	e7d1      	b.n	152de <_vfprintf_r+0x75a>
   1533a:	2f65      	cmp	r7, #101	; 0x65
   1533c:	f340 8105 	ble.w	1554a <_vfprintf_r+0x9c6>
   15340:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   15344:	2200      	movs	r2, #0
   15346:	2300      	movs	r3, #0
   15348:	f7eb ffa6 	bl	1298 <__aeabi_dcmpeq>
   1534c:	2800      	cmp	r0, #0
   1534e:	f000 81a8 	beq.w	156a2 <_vfprintf_r+0xb1e>
   15352:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15354:	4ab7      	ldr	r2, [pc, #732]	; (15634 <_vfprintf_r+0xab0>)
   15356:	f8c8 2000 	str.w	r2, [r8]
   1535a:	3301      	adds	r3, #1
   1535c:	3401      	adds	r4, #1
   1535e:	2201      	movs	r2, #1
   15360:	2b07      	cmp	r3, #7
   15362:	942c      	str	r4, [sp, #176]	; 0xb0
   15364:	932b      	str	r3, [sp, #172]	; 0xac
   15366:	f8c8 2004 	str.w	r2, [r8, #4]
   1536a:	f300 84a1 	bgt.w	15cb0 <_vfprintf_r+0x112c>
   1536e:	f108 0808 	add.w	r8, r8, #8
   15372:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15374:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15376:	4293      	cmp	r3, r2
   15378:	f280 82a3 	bge.w	158c2 <_vfprintf_r+0xd3e>
   1537c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1537e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15380:	441c      	add	r4, r3
   15382:	e9c8 2300 	strd	r2, r3, [r8]
   15386:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15388:	942c      	str	r4, [sp, #176]	; 0xb0
   1538a:	3301      	adds	r3, #1
   1538c:	2b07      	cmp	r3, #7
   1538e:	932b      	str	r3, [sp, #172]	; 0xac
   15390:	f300 83fb 	bgt.w	15b8a <_vfprintf_r+0x1006>
   15394:	f108 0808 	add.w	r8, r8, #8
   15398:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1539a:	1e5d      	subs	r5, r3, #1
   1539c:	2d00      	cmp	r5, #0
   1539e:	f77f ad9e 	ble.w	14ede <_vfprintf_r+0x35a>
   153a2:	2d10      	cmp	r5, #16
   153a4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   153a6:	f341 80d5 	ble.w	16554 <_vfprintf_r+0x19d0>
   153aa:	4fa3      	ldr	r7, [pc, #652]	; (15638 <_vfprintf_r+0xab4>)
   153ac:	970f      	str	r7, [sp, #60]	; 0x3c
   153ae:	4622      	mov	r2, r4
   153b0:	2610      	movs	r6, #16
   153b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   153b4:	e005      	b.n	153c2 <_vfprintf_r+0x83e>
   153b6:	f108 0808 	add.w	r8, r8, #8
   153ba:	3d10      	subs	r5, #16
   153bc:	2d10      	cmp	r5, #16
   153be:	f340 8484 	ble.w	15cca <_vfprintf_r+0x1146>
   153c2:	3301      	adds	r3, #1
   153c4:	3210      	adds	r2, #16
   153c6:	2b07      	cmp	r3, #7
   153c8:	e9c8 7600 	strd	r7, r6, [r8]
   153cc:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   153d0:	ddf1      	ble.n	153b6 <_vfprintf_r+0x832>
   153d2:	aa2a      	add	r2, sp, #168	; 0xa8
   153d4:	4621      	mov	r1, r4
   153d6:	4648      	mov	r0, r9
   153d8:	f002 f970 	bl	176bc <__sprint_r>
   153dc:	2800      	cmp	r0, #0
   153de:	f47f ad05 	bne.w	14dec <_vfprintf_r+0x268>
   153e2:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   153e6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   153ea:	e7e6      	b.n	153ba <_vfprintf_r+0x836>
   153ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   153ee:	9a07      	ldr	r2, [sp, #28]
   153f0:	1a9e      	subs	r6, r3, r2
   153f2:	2e00      	cmp	r6, #0
   153f4:	f77f ad5a 	ble.w	14eac <_vfprintf_r+0x328>
   153f8:	2e10      	cmp	r6, #16
   153fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   153fc:	f340 87e5 	ble.w	163ca <_vfprintf_r+0x1846>
   15400:	488d      	ldr	r0, [pc, #564]	; (15638 <_vfprintf_r+0xab4>)
   15402:	9712      	str	r7, [sp, #72]	; 0x48
   15404:	4621      	mov	r1, r4
   15406:	464f      	mov	r7, r9
   15408:	900f      	str	r0, [sp, #60]	; 0x3c
   1540a:	46a9      	mov	r9, r5
   1540c:	461a      	mov	r2, r3
   1540e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   15410:	4604      	mov	r4, r0
   15412:	e004      	b.n	1541e <_vfprintf_r+0x89a>
   15414:	3e10      	subs	r6, #16
   15416:	2e10      	cmp	r6, #16
   15418:	f108 0808 	add.w	r8, r8, #8
   1541c:	dd19      	ble.n	15452 <_vfprintf_r+0x8ce>
   1541e:	3201      	adds	r2, #1
   15420:	3110      	adds	r1, #16
   15422:	2310      	movs	r3, #16
   15424:	2a07      	cmp	r2, #7
   15426:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
   1542a:	f8c8 4000 	str.w	r4, [r8]
   1542e:	f8c8 3004 	str.w	r3, [r8, #4]
   15432:	ddef      	ble.n	15414 <_vfprintf_r+0x890>
   15434:	aa2a      	add	r2, sp, #168	; 0xa8
   15436:	4629      	mov	r1, r5
   15438:	4638      	mov	r0, r7
   1543a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   1543e:	f002 f93d 	bl	176bc <__sprint_r>
   15442:	2800      	cmp	r0, #0
   15444:	f47f acd2 	bne.w	14dec <_vfprintf_r+0x268>
   15448:	3e10      	subs	r6, #16
   1544a:	2e10      	cmp	r6, #16
   1544c:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
   15450:	dce5      	bgt.n	1541e <_vfprintf_r+0x89a>
   15452:	464d      	mov	r5, r9
   15454:	46b9      	mov	r9, r7
   15456:	9f12      	ldr	r7, [sp, #72]	; 0x48
   15458:	4613      	mov	r3, r2
   1545a:	460c      	mov	r4, r1
   1545c:	3301      	adds	r3, #1
   1545e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15460:	f8c8 2000 	str.w	r2, [r8]
   15464:	4434      	add	r4, r6
   15466:	2b07      	cmp	r3, #7
   15468:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   1546c:	f8c8 6004 	str.w	r6, [r8, #4]
   15470:	f300 837e 	bgt.w	15b70 <_vfprintf_r+0xfec>
   15474:	9b08      	ldr	r3, [sp, #32]
   15476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15478:	1a9e      	subs	r6, r3, r2
   1547a:	2e00      	cmp	r6, #0
   1547c:	f108 0808 	add.w	r8, r8, #8
   15480:	f77f ad1a 	ble.w	14eb8 <_vfprintf_r+0x334>
   15484:	2e10      	cmp	r6, #16
   15486:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15488:	f340 84a0 	ble.w	15dcc <_vfprintf_r+0x1248>
   1548c:	486a      	ldr	r0, [pc, #424]	; (15638 <_vfprintf_r+0xab4>)
   1548e:	900f      	str	r0, [sp, #60]	; 0x3c
   15490:	4642      	mov	r2, r8
   15492:	4621      	mov	r1, r4
   15494:	46a8      	mov	r8, r5
   15496:	4604      	mov	r4, r0
   15498:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1549a:	e004      	b.n	154a6 <_vfprintf_r+0x922>
   1549c:	3e10      	subs	r6, #16
   1549e:	2e10      	cmp	r6, #16
   154a0:	f102 0208 	add.w	r2, r2, #8
   154a4:	dd16      	ble.n	154d4 <_vfprintf_r+0x950>
   154a6:	3301      	adds	r3, #1
   154a8:	3110      	adds	r1, #16
   154aa:	2010      	movs	r0, #16
   154ac:	2b07      	cmp	r3, #7
   154ae:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
   154b2:	6014      	str	r4, [r2, #0]
   154b4:	6050      	str	r0, [r2, #4]
   154b6:	ddf1      	ble.n	1549c <_vfprintf_r+0x918>
   154b8:	aa2a      	add	r2, sp, #168	; 0xa8
   154ba:	4629      	mov	r1, r5
   154bc:	4648      	mov	r0, r9
   154be:	f002 f8fd 	bl	176bc <__sprint_r>
   154c2:	2800      	cmp	r0, #0
   154c4:	f47f ac92 	bne.w	14dec <_vfprintf_r+0x268>
   154c8:	3e10      	subs	r6, #16
   154ca:	2e10      	cmp	r6, #16
   154cc:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
   154d0:	aa2d      	add	r2, sp, #180	; 0xb4
   154d2:	dce8      	bgt.n	154a6 <_vfprintf_r+0x922>
   154d4:	4645      	mov	r5, r8
   154d6:	460c      	mov	r4, r1
   154d8:	4690      	mov	r8, r2
   154da:	3301      	adds	r3, #1
   154dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   154de:	f8c8 2000 	str.w	r2, [r8]
   154e2:	4434      	add	r4, r6
   154e4:	2b07      	cmp	r3, #7
   154e6:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   154ea:	f8c8 6004 	str.w	r6, [r8, #4]
   154ee:	f300 819e 	bgt.w	1582e <_vfprintf_r+0xcaa>
   154f2:	f108 0808 	add.w	r8, r8, #8
   154f6:	e4df      	b.n	14eb8 <_vfprintf_r+0x334>
   154f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   154fa:	991a      	ldr	r1, [sp, #104]	; 0x68
   154fc:	441c      	add	r4, r3
   154fe:	e9c8 1300 	strd	r1, r3, [r8]
   15502:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15504:	942c      	str	r4, [sp, #176]	; 0xb0
   15506:	3301      	adds	r3, #1
   15508:	2b07      	cmp	r3, #7
   1550a:	932b      	str	r3, [sp, #172]	; 0xac
   1550c:	f300 852e 	bgt.w	15f6c <_vfprintf_r+0x13e8>
   15510:	f108 0808 	add.w	r8, r8, #8
   15514:	2a00      	cmp	r2, #0
   15516:	f2c0 86e5 	blt.w	162e4 <_vfprintf_r+0x1760>
   1551a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1551c:	f8c8 5000 	str.w	r5, [r8]
   15520:	3301      	adds	r3, #1
   15522:	4414      	add	r4, r2
   15524:	2b07      	cmp	r3, #7
   15526:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   1552a:	f8c8 2004 	str.w	r2, [r8, #4]
   1552e:	f77f acd4 	ble.w	14eda <_vfprintf_r+0x356>
   15532:	9909      	ldr	r1, [sp, #36]	; 0x24
   15534:	aa2a      	add	r2, sp, #168	; 0xa8
   15536:	4648      	mov	r0, r9
   15538:	f002 f8c0 	bl	176bc <__sprint_r>
   1553c:	2800      	cmp	r0, #0
   1553e:	f47f ac55 	bne.w	14dec <_vfprintf_r+0x268>
   15542:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15544:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15548:	e4c9      	b.n	14ede <_vfprintf_r+0x35a>
   1554a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1554c:	9e2b      	ldr	r6, [sp, #172]	; 0xac
   1554e:	2b01      	cmp	r3, #1
   15550:	f104 0401 	add.w	r4, r4, #1
   15554:	f106 0601 	add.w	r6, r6, #1
   15558:	f108 0708 	add.w	r7, r8, #8
   1555c:	f340 811f 	ble.w	1579e <_vfprintf_r+0xc1a>
   15560:	2301      	movs	r3, #1
   15562:	2e07      	cmp	r6, #7
   15564:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   15568:	f8c8 5000 	str.w	r5, [r8]
   1556c:	f8c8 3004 	str.w	r3, [r8, #4]
   15570:	f300 8331 	bgt.w	15bd6 <_vfprintf_r+0x1052>
   15574:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15576:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   15578:	3601      	adds	r6, #1
   1557a:	441c      	add	r4, r3
   1557c:	2e07      	cmp	r6, #7
   1557e:	e9c7 2300 	strd	r2, r3, [r7]
   15582:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   15586:	f300 8332 	bgt.w	15bee <_vfprintf_r+0x106a>
   1558a:	3708      	adds	r7, #8
   1558c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1558e:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   15592:	f103 38ff 	add.w	r8, r3, #4294967295
   15596:	2200      	movs	r2, #0
   15598:	2300      	movs	r3, #0
   1559a:	f7eb fe7d 	bl	1298 <__aeabi_dcmpeq>
   1559e:	2800      	cmp	r0, #0
   155a0:	f040 8117 	bne.w	157d2 <_vfprintf_r+0xc4e>
   155a4:	3601      	adds	r6, #1
   155a6:	3501      	adds	r5, #1
   155a8:	4444      	add	r4, r8
   155aa:	2e07      	cmp	r6, #7
   155ac:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   155b0:	603d      	str	r5, [r7, #0]
   155b2:	f8c7 8004 	str.w	r8, [r7, #4]
   155b6:	f300 8100 	bgt.w	157ba <_vfprintf_r+0xc36>
   155ba:	3708      	adds	r7, #8
   155bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   155be:	607b      	str	r3, [r7, #4]
   155c0:	3601      	adds	r6, #1
   155c2:	441c      	add	r4, r3
   155c4:	2e07      	cmp	r6, #7
   155c6:	ab26      	add	r3, sp, #152	; 0x98
   155c8:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   155cc:	603b      	str	r3, [r7, #0]
   155ce:	dcb0      	bgt.n	15532 <_vfprintf_r+0x9ae>
   155d0:	f107 0808 	add.w	r8, r7, #8
   155d4:	e483      	b.n	14ede <_vfprintf_r+0x35a>
   155d6:	f8cd a01c 	str.w	sl, [sp, #28]
   155da:	2c0a      	cmp	r4, #10
   155dc:	f176 0300 	sbcs.w	r3, r6, #0
   155e0:	f080 8311 	bcs.w	15c06 <_vfprintf_r+0x1082>
   155e4:	3430      	adds	r4, #48	; 0x30
   155e6:	2301      	movs	r3, #1
   155e8:	f8dd a01c 	ldr.w	sl, [sp, #28]
   155ec:	f88d 4157 	strb.w	r4, [sp, #343]	; 0x157
   155f0:	930c      	str	r3, [sp, #48]	; 0x30
   155f2:	f20d 1557 	addw	r5, sp, #343	; 0x157
   155f6:	e672      	b.n	152de <_vfprintf_r+0x75a>
   155f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   155fa:	aa2a      	add	r2, sp, #168	; 0xa8
   155fc:	4648      	mov	r0, r9
   155fe:	f002 f85d 	bl	176bc <__sprint_r>
   15602:	2800      	cmp	r0, #0
   15604:	f47f abf2 	bne.w	14dec <_vfprintf_r+0x268>
   15608:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1560a:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   1560e:	e436      	b.n	14e7e <_vfprintf_r+0x2fa>
   15610:	9909      	ldr	r1, [sp, #36]	; 0x24
   15612:	aa2a      	add	r2, sp, #168	; 0xa8
   15614:	4648      	mov	r0, r9
   15616:	f002 f851 	bl	176bc <__sprint_r>
   1561a:	2800      	cmp	r0, #0
   1561c:	f47f abe6 	bne.w	14dec <_vfprintf_r+0x268>
   15620:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15622:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15626:	e43d      	b.n	14ea4 <_vfprintf_r+0x320>
   15628:	2d10      	cmp	r5, #16
   1562a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1562c:	dd23      	ble.n	15676 <_vfprintf_r+0xaf2>
   1562e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   15630:	2610      	movs	r6, #16
   15632:	e008      	b.n	15646 <_vfprintf_r+0xac2>
   15634:	0001ead8 	.word	0x0001ead8
   15638:	0001fae8 	.word	0x0001fae8
   1563c:	3d10      	subs	r5, #16
   1563e:	2d10      	cmp	r5, #16
   15640:	f108 0808 	add.w	r8, r8, #8
   15644:	dd17      	ble.n	15676 <_vfprintf_r+0xaf2>
   15646:	3301      	adds	r3, #1
   15648:	4abb      	ldr	r2, [pc, #748]	; (15938 <_vfprintf_r+0xdb4>)
   1564a:	3410      	adds	r4, #16
   1564c:	2b07      	cmp	r3, #7
   1564e:	e9c8 2600 	strd	r2, r6, [r8]
   15652:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   15656:	ddf1      	ble.n	1563c <_vfprintf_r+0xab8>
   15658:	aa2a      	add	r2, sp, #168	; 0xa8
   1565a:	4639      	mov	r1, r7
   1565c:	4648      	mov	r0, r9
   1565e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15662:	f002 f82b 	bl	176bc <__sprint_r>
   15666:	2800      	cmp	r0, #0
   15668:	f47f abc0 	bne.w	14dec <_vfprintf_r+0x268>
   1566c:	3d10      	subs	r5, #16
   1566e:	2d10      	cmp	r5, #16
   15670:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   15674:	dce7      	bgt.n	15646 <_vfprintf_r+0xac2>
   15676:	3301      	adds	r3, #1
   15678:	4aaf      	ldr	r2, [pc, #700]	; (15938 <_vfprintf_r+0xdb4>)
   1567a:	f8c8 5004 	str.w	r5, [r8, #4]
   1567e:	442c      	add	r4, r5
   15680:	2b07      	cmp	r3, #7
   15682:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   15686:	f8c8 2000 	str.w	r2, [r8]
   1568a:	f77f ac31 	ble.w	14ef0 <_vfprintf_r+0x36c>
   1568e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15690:	aa2a      	add	r2, sp, #168	; 0xa8
   15692:	4648      	mov	r0, r9
   15694:	f002 f812 	bl	176bc <__sprint_r>
   15698:	2800      	cmp	r0, #0
   1569a:	f47f aba7 	bne.w	14dec <_vfprintf_r+0x268>
   1569e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   156a0:	e426      	b.n	14ef0 <_vfprintf_r+0x36c>
   156a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   156a4:	2a00      	cmp	r2, #0
   156a6:	f340 811d 	ble.w	158e4 <_vfprintf_r+0xd60>
   156aa:	e9dd 7313 	ldrd	r7, r3, [sp, #76]	; 0x4c
   156ae:	429f      	cmp	r7, r3
   156b0:	bfa8      	it	ge
   156b2:	461f      	movge	r7, r3
   156b4:	2f00      	cmp	r7, #0
   156b6:	dd0b      	ble.n	156d0 <_vfprintf_r+0xb4c>
   156b8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   156ba:	3301      	adds	r3, #1
   156bc:	443c      	add	r4, r7
   156be:	2b07      	cmp	r3, #7
   156c0:	e9c8 5700 	strd	r5, r7, [r8]
   156c4:	942c      	str	r4, [sp, #176]	; 0xb0
   156c6:	932b      	str	r3, [sp, #172]	; 0xac
   156c8:	f300 8565 	bgt.w	16196 <_vfprintf_r+0x1612>
   156cc:	f108 0808 	add.w	r8, r8, #8
   156d0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   156d2:	2f00      	cmp	r7, #0
   156d4:	bfa8      	it	ge
   156d6:	1bf6      	subge	r6, r6, r7
   156d8:	2e00      	cmp	r6, #0
   156da:	f300 830f 	bgt.w	15cfc <_vfprintf_r+0x1178>
   156de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   156e0:	f41a 6f80 	tst.w	sl, #1024	; 0x400
   156e4:	442b      	add	r3, r5
   156e6:	930c      	str	r3, [sp, #48]	; 0x30
   156e8:	f040 849e 	bne.w	16028 <_vfprintf_r+0x14a4>
   156ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
   156ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   156f0:	4293      	cmp	r3, r2
   156f2:	db03      	blt.n	156fc <_vfprintf_r+0xb78>
   156f4:	f01a 0f01 	tst.w	sl, #1
   156f8:	f000 8385 	beq.w	15e06 <_vfprintf_r+0x1282>
   156fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   156fe:	991a      	ldr	r1, [sp, #104]	; 0x68
   15700:	4414      	add	r4, r2
   15702:	e9c8 1200 	strd	r1, r2, [r8]
   15706:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   15708:	942c      	str	r4, [sp, #176]	; 0xb0
   1570a:	3201      	adds	r2, #1
   1570c:	2a07      	cmp	r2, #7
   1570e:	922b      	str	r2, [sp, #172]	; 0xac
   15710:	f300 858a 	bgt.w	16228 <_vfprintf_r+0x16a4>
   15714:	f108 0808 	add.w	r8, r8, #8
   15718:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1571a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1571c:	18ae      	adds	r6, r5, r2
   1571e:	1a76      	subs	r6, r6, r1
   15720:	1ad5      	subs	r5, r2, r3
   15722:	42ae      	cmp	r6, r5
   15724:	bfa8      	it	ge
   15726:	462e      	movge	r6, r5
   15728:	2e00      	cmp	r6, #0
   1572a:	dd0d      	ble.n	15748 <_vfprintf_r+0xbc4>
   1572c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1572e:	f8c8 1000 	str.w	r1, [r8]
   15732:	3301      	adds	r3, #1
   15734:	4434      	add	r4, r6
   15736:	2b07      	cmp	r3, #7
   15738:	f8c8 6004 	str.w	r6, [r8, #4]
   1573c:	942c      	str	r4, [sp, #176]	; 0xb0
   1573e:	932b      	str	r3, [sp, #172]	; 0xac
   15740:	f300 85bd 	bgt.w	162be <_vfprintf_r+0x173a>
   15744:	f108 0808 	add.w	r8, r8, #8
   15748:	2e00      	cmp	r6, #0
   1574a:	bfa8      	it	ge
   1574c:	1bad      	subge	r5, r5, r6
   1574e:	2d00      	cmp	r5, #0
   15750:	f77f abc5 	ble.w	14ede <_vfprintf_r+0x35a>
   15754:	2d10      	cmp	r5, #16
   15756:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15758:	f340 86fc 	ble.w	16554 <_vfprintf_r+0x19d0>
   1575c:	4f77      	ldr	r7, [pc, #476]	; (1593c <_vfprintf_r+0xdb8>)
   1575e:	970f      	str	r7, [sp, #60]	; 0x3c
   15760:	4622      	mov	r2, r4
   15762:	2610      	movs	r6, #16
   15764:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15766:	e005      	b.n	15774 <_vfprintf_r+0xbf0>
   15768:	f108 0808 	add.w	r8, r8, #8
   1576c:	3d10      	subs	r5, #16
   1576e:	2d10      	cmp	r5, #16
   15770:	f340 82ab 	ble.w	15cca <_vfprintf_r+0x1146>
   15774:	3301      	adds	r3, #1
   15776:	3210      	adds	r2, #16
   15778:	2b07      	cmp	r3, #7
   1577a:	e9c8 7600 	strd	r7, r6, [r8]
   1577e:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
   15782:	ddf1      	ble.n	15768 <_vfprintf_r+0xbe4>
   15784:	aa2a      	add	r2, sp, #168	; 0xa8
   15786:	4621      	mov	r1, r4
   15788:	4648      	mov	r0, r9
   1578a:	f001 ff97 	bl	176bc <__sprint_r>
   1578e:	2800      	cmp	r0, #0
   15790:	f47f ab2c 	bne.w	14dec <_vfprintf_r+0x268>
   15794:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
   15798:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   1579c:	e7e6      	b.n	1576c <_vfprintf_r+0xbe8>
   1579e:	f01a 0f01 	tst.w	sl, #1
   157a2:	f47f aedd 	bne.w	15560 <_vfprintf_r+0x9dc>
   157a6:	2301      	movs	r3, #1
   157a8:	2e07      	cmp	r6, #7
   157aa:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   157ae:	f8c8 5000 	str.w	r5, [r8]
   157b2:	f8c8 3004 	str.w	r3, [r8, #4]
   157b6:	f77f af01 	ble.w	155bc <_vfprintf_r+0xa38>
   157ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   157bc:	aa2a      	add	r2, sp, #168	; 0xa8
   157be:	4648      	mov	r0, r9
   157c0:	f001 ff7c 	bl	176bc <__sprint_r>
   157c4:	2800      	cmp	r0, #0
   157c6:	f47f ab11 	bne.w	14dec <_vfprintf_r+0x268>
   157ca:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
   157ce:	af2d      	add	r7, sp, #180	; 0xb4
   157d0:	e6f4      	b.n	155bc <_vfprintf_r+0xa38>
   157d2:	f1b8 0f00 	cmp.w	r8, #0
   157d6:	f77f aef1 	ble.w	155bc <_vfprintf_r+0xa38>
   157da:	4b58      	ldr	r3, [pc, #352]	; (1593c <_vfprintf_r+0xdb8>)
   157dc:	930f      	str	r3, [sp, #60]	; 0x3c
   157de:	f1b8 0f10 	cmp.w	r8, #16
   157e2:	f340 82bf 	ble.w	15d64 <_vfprintf_r+0x11e0>
   157e6:	4622      	mov	r2, r4
   157e8:	f8cd a020 	str.w	sl, [sp, #32]
   157ec:	2510      	movs	r5, #16
   157ee:	46ca      	mov	sl, r9
   157f0:	461c      	mov	r4, r3
   157f2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   157f6:	e006      	b.n	15806 <_vfprintf_r+0xc82>
   157f8:	3708      	adds	r7, #8
   157fa:	f1a8 0810 	sub.w	r8, r8, #16
   157fe:	f1b8 0f10 	cmp.w	r8, #16
   15802:	f340 82ab 	ble.w	15d5c <_vfprintf_r+0x11d8>
   15806:	3601      	adds	r6, #1
   15808:	3210      	adds	r2, #16
   1580a:	2e07      	cmp	r6, #7
   1580c:	e9c7 4500 	strd	r4, r5, [r7]
   15810:	e9cd 622b 	strd	r6, r2, [sp, #172]	; 0xac
   15814:	ddf0      	ble.n	157f8 <_vfprintf_r+0xc74>
   15816:	aa2a      	add	r2, sp, #168	; 0xa8
   15818:	4649      	mov	r1, r9
   1581a:	4650      	mov	r0, sl
   1581c:	f001 ff4e 	bl	176bc <__sprint_r>
   15820:	2800      	cmp	r0, #0
   15822:	f47f aae3 	bne.w	14dec <_vfprintf_r+0x268>
   15826:	e9dd 622b 	ldrd	r6, r2, [sp, #172]	; 0xac
   1582a:	af2d      	add	r7, sp, #180	; 0xb4
   1582c:	e7e5      	b.n	157fa <_vfprintf_r+0xc76>
   1582e:	9909      	ldr	r1, [sp, #36]	; 0x24
   15830:	aa2a      	add	r2, sp, #168	; 0xa8
   15832:	4648      	mov	r0, r9
   15834:	f001 ff42 	bl	176bc <__sprint_r>
   15838:	2800      	cmp	r0, #0
   1583a:	f47f aad7 	bne.w	14dec <_vfprintf_r+0x268>
   1583e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15840:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15844:	f7ff bb38 	b.w	14eb8 <_vfprintf_r+0x334>
   15848:	9a07      	ldr	r2, [sp, #28]
   1584a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1584c:	f012 0210 	ands.w	r2, r2, #16
   15850:	f101 0304 	add.w	r3, r1, #4
   15854:	f040 8084 	bne.w	15960 <_vfprintf_r+0xddc>
   15858:	9907      	ldr	r1, [sp, #28]
   1585a:	f011 0140 	ands.w	r1, r1, #64	; 0x40
   1585e:	f000 82a0 	beq.w	15da2 <_vfprintf_r+0x121e>
   15862:	990d      	ldr	r1, [sp, #52]	; 0x34
   15864:	930d      	str	r3, [sp, #52]	; 0x34
   15866:	880c      	ldrh	r4, [r1, #0]
   15868:	4616      	mov	r6, r2
   1586a:	2301      	movs	r3, #1
   1586c:	e456      	b.n	1511c <_vfprintf_r+0x598>
   1586e:	990d      	ldr	r1, [sp, #52]	; 0x34
   15870:	f01a 0210 	ands.w	r2, sl, #16
   15874:	f101 0304 	add.w	r3, r1, #4
   15878:	d16e      	bne.n	15958 <_vfprintf_r+0xdd4>
   1587a:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
   1587e:	f000 8286 	beq.w	15d8e <_vfprintf_r+0x120a>
   15882:	990d      	ldr	r1, [sp, #52]	; 0x34
   15884:	930d      	str	r3, [sp, #52]	; 0x34
   15886:	880c      	ldrh	r4, [r1, #0]
   15888:	4616      	mov	r6, r2
   1588a:	e443      	b.n	15114 <_vfprintf_r+0x590>
   1588c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1588e:	f01a 0f10 	tst.w	sl, #16
   15892:	f102 0304 	add.w	r3, r2, #4
   15896:	d159      	bne.n	1594c <_vfprintf_r+0xdc8>
   15898:	f01a 0f40 	tst.w	sl, #64	; 0x40
   1589c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1589e:	d051      	beq.n	15944 <_vfprintf_r+0xdc0>
   158a0:	f9b2 4000 	ldrsh.w	r4, [r2]
   158a4:	930d      	str	r3, [sp, #52]	; 0x34
   158a6:	17e6      	asrs	r6, r4, #31
   158a8:	4633      	mov	r3, r6
   158aa:	f7ff bbde 	b.w	1506a <_vfprintf_r+0x4e6>
   158ae:	232d      	movs	r3, #45	; 0x2d
   158b0:	4264      	negs	r4, r4
   158b2:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
   158b6:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
   158ba:	f8cd a01c 	str.w	sl, [sp, #28]
   158be:	2301      	movs	r3, #1
   158c0:	e42f      	b.n	15122 <_vfprintf_r+0x59e>
   158c2:	f01a 0f01 	tst.w	sl, #1
   158c6:	f43f ab0a 	beq.w	14ede <_vfprintf_r+0x35a>
   158ca:	e557      	b.n	1537c <_vfprintf_r+0x7f8>
   158cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   158ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
   158d0:	f004 f868 	bl	199a4 <__retarget_lock_acquire_recursive>
   158d4:	89aa      	ldrh	r2, [r5, #12]
   158d6:	f7ff b973 	b.w	14bc0 <_vfprintf_r+0x3c>
   158da:	f89b 7000 	ldrb.w	r7, [fp]
   158de:	930d      	str	r3, [sp, #52]	; 0x34
   158e0:	f7ff b9b3 	b.w	14c4a <_vfprintf_r+0xc6>
   158e4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   158e6:	4916      	ldr	r1, [pc, #88]	; (15940 <_vfprintf_r+0xdbc>)
   158e8:	f8c8 1000 	str.w	r1, [r8]
   158ec:	3301      	adds	r3, #1
   158ee:	3401      	adds	r4, #1
   158f0:	2101      	movs	r1, #1
   158f2:	2b07      	cmp	r3, #7
   158f4:	942c      	str	r4, [sp, #176]	; 0xb0
   158f6:	932b      	str	r3, [sp, #172]	; 0xac
   158f8:	f8c8 1004 	str.w	r1, [r8, #4]
   158fc:	f300 843d 	bgt.w	1617a <_vfprintf_r+0x15f6>
   15900:	f108 0808 	add.w	r8, r8, #8
   15904:	2a00      	cmp	r2, #0
   15906:	f47f adf7 	bne.w	154f8 <_vfprintf_r+0x974>
   1590a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1590c:	f00a 0301 	and.w	r3, sl, #1
   15910:	4313      	orrs	r3, r2
   15912:	f43f aae4 	beq.w	14ede <_vfprintf_r+0x35a>
   15916:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15918:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1591a:	441c      	add	r4, r3
   1591c:	e9c8 2300 	strd	r2, r3, [r8]
   15920:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15922:	942c      	str	r4, [sp, #176]	; 0xb0
   15924:	3301      	adds	r3, #1
   15926:	2b07      	cmp	r3, #7
   15928:	932b      	str	r3, [sp, #172]	; 0xac
   1592a:	f300 831f 	bgt.w	15f6c <_vfprintf_r+0x13e8>
   1592e:	f108 0808 	add.w	r8, r8, #8
   15932:	e5f2      	b.n	1551a <_vfprintf_r+0x996>
   15934:	ad56      	add	r5, sp, #344	; 0x158
   15936:	e4d2      	b.n	152de <_vfprintf_r+0x75a>
   15938:	0001fad8 	.word	0x0001fad8
   1593c:	0001fae8 	.word	0x0001fae8
   15940:	0001ead8 	.word	0x0001ead8
   15944:	f41a 7f00 	tst.w	sl, #512	; 0x200
   15948:	f040 826b 	bne.w	15e22 <_vfprintf_r+0x129e>
   1594c:	6814      	ldr	r4, [r2, #0]
   1594e:	930d      	str	r3, [sp, #52]	; 0x34
   15950:	17e6      	asrs	r6, r4, #31
   15952:	4633      	mov	r3, r6
   15954:	f7ff bb89 	b.w	1506a <_vfprintf_r+0x4e6>
   15958:	680c      	ldr	r4, [r1, #0]
   1595a:	930d      	str	r3, [sp, #52]	; 0x34
   1595c:	f7ff bbda 	b.w	15114 <_vfprintf_r+0x590>
   15960:	930d      	str	r3, [sp, #52]	; 0x34
   15962:	680c      	ldr	r4, [r1, #0]
   15964:	2301      	movs	r3, #1
   15966:	f7ff bbd9 	b.w	1511c <_vfprintf_r+0x598>
   1596a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1596e:	4602      	mov	r2, r0
   15970:	460b      	mov	r3, r1
   15972:	f7eb fd5d 	bl	1430 <__aeabi_dcmpun>
   15976:	2800      	cmp	r0, #0
   15978:	f040 8559 	bne.w	1642e <_vfprintf_r+0x18aa>
   1597c:	2f61      	cmp	r7, #97	; 0x61
   1597e:	f000 851f 	beq.w	163c0 <_vfprintf_r+0x183c>
   15982:	2f41      	cmp	r7, #65	; 0x41
   15984:	f000 8254 	beq.w	15e30 <_vfprintf_r+0x12ac>
   15988:	9a08      	ldr	r2, [sp, #32]
   1598a:	f027 0320 	bic.w	r3, r7, #32
   1598e:	1c51      	adds	r1, r2, #1
   15990:	9307      	str	r3, [sp, #28]
   15992:	f000 851e 	beq.w	163d2 <_vfprintf_r+0x184e>
   15996:	2b47      	cmp	r3, #71	; 0x47
   15998:	d104      	bne.n	159a4 <_vfprintf_r+0xe20>
   1599a:	2a00      	cmp	r2, #0
   1599c:	4613      	mov	r3, r2
   1599e:	bf08      	it	eq
   159a0:	2301      	moveq	r3, #1
   159a2:	9308      	str	r3, [sp, #32]
   159a4:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   159a8:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
   159ac:	1e0e      	subs	r6, r1, #0
   159ae:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   159b2:	469a      	mov	sl, r3
   159b4:	f04f 0300 	mov.w	r3, #0
   159b8:	f2c0 83d6 	blt.w	16168 <_vfprintf_r+0x15e4>
   159bc:	9312      	str	r3, [sp, #72]	; 0x48
   159be:	900c      	str	r0, [sp, #48]	; 0x30
   159c0:	930e      	str	r3, [sp, #56]	; 0x38
   159c2:	9b07      	ldr	r3, [sp, #28]
   159c4:	2b46      	cmp	r3, #70	; 0x46
   159c6:	f000 8400 	beq.w	161ca <_vfprintf_r+0x1646>
   159ca:	2b45      	cmp	r3, #69	; 0x45
   159cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   159ce:	9908      	ldr	r1, [sp, #32]
   159d0:	4633      	mov	r3, r6
   159d2:	f000 84c7 	beq.w	16364 <_vfprintf_r+0x17e0>
   159d6:	9101      	str	r1, [sp, #4]
   159d8:	a928      	add	r1, sp, #160	; 0xa0
   159da:	9104      	str	r1, [sp, #16]
   159dc:	a925      	add	r1, sp, #148	; 0x94
   159de:	9103      	str	r1, [sp, #12]
   159e0:	a924      	add	r1, sp, #144	; 0x90
   159e2:	9102      	str	r1, [sp, #8]
   159e4:	2102      	movs	r1, #2
   159e6:	9100      	str	r1, [sp, #0]
   159e8:	4648      	mov	r0, r9
   159ea:	f7ec fe1d 	bl	2628 <_dtoa_r>
   159ee:	9b07      	ldr	r3, [sp, #28]
   159f0:	2b47      	cmp	r3, #71	; 0x47
   159f2:	4605      	mov	r5, r0
   159f4:	f040 85c4 	bne.w	16580 <_vfprintf_r+0x19fc>
   159f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   159fa:	07db      	lsls	r3, r3, #31
   159fc:	f100 846f 	bmi.w	162de <_vfprintf_r+0x175a>
   15a00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   15a02:	1b5b      	subs	r3, r3, r5
   15a04:	9314      	str	r3, [sp, #80]	; 0x50
   15a06:	9b24      	ldr	r3, [sp, #144]	; 0x90
   15a08:	9313      	str	r3, [sp, #76]	; 0x4c
   15a0a:	9b07      	ldr	r3, [sp, #28]
   15a0c:	2b47      	cmp	r3, #71	; 0x47
   15a0e:	f000 82c1 	beq.w	15f94 <_vfprintf_r+0x1410>
   15a12:	9b07      	ldr	r3, [sp, #28]
   15a14:	2b46      	cmp	r3, #70	; 0x46
   15a16:	f000 8421 	beq.w	1625c <_vfprintf_r+0x16d8>
   15a1a:	9907      	ldr	r1, [sp, #28]
   15a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15a1e:	b2fa      	uxtb	r2, r7
   15a20:	2941      	cmp	r1, #65	; 0x41
   15a22:	bf08      	it	eq
   15a24:	320f      	addeq	r2, #15
   15a26:	f103 33ff 	add.w	r3, r3, #4294967295
   15a2a:	bf06      	itte	eq
   15a2c:	b2d2      	uxtbeq	r2, r2
   15a2e:	2101      	moveq	r1, #1
   15a30:	2100      	movne	r1, #0
   15a32:	2b00      	cmp	r3, #0
   15a34:	9324      	str	r3, [sp, #144]	; 0x90
   15a36:	bfb8      	it	lt
   15a38:	9b13      	ldrlt	r3, [sp, #76]	; 0x4c
   15a3a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   15a3e:	bfba      	itte	lt
   15a40:	f1c3 0301 	rsblt	r3, r3, #1
   15a44:	222d      	movlt	r2, #45	; 0x2d
   15a46:	222b      	movge	r2, #43	; 0x2b
   15a48:	2b09      	cmp	r3, #9
   15a4a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   15a4e:	f340 8518 	ble.w	16482 <_vfprintf_r+0x18fe>
   15a52:	f10d 04a7 	add.w	r4, sp, #167	; 0xa7
   15a56:	4ebc      	ldr	r6, [pc, #752]	; (15d48 <_vfprintf_r+0x11c4>)
   15a58:	4622      	mov	r2, r4
   15a5a:	4610      	mov	r0, r2
   15a5c:	fb86 2103 	smull	r2, r1, r6, r3
   15a60:	17da      	asrs	r2, r3, #31
   15a62:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   15a66:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15a6a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   15a6e:	3130      	adds	r1, #48	; 0x30
   15a70:	f800 1c01 	strb.w	r1, [r0, #-1]
   15a74:	4619      	mov	r1, r3
   15a76:	2963      	cmp	r1, #99	; 0x63
   15a78:	4613      	mov	r3, r2
   15a7a:	f100 32ff 	add.w	r2, r0, #4294967295
   15a7e:	dcec      	bgt.n	15a5a <_vfprintf_r+0xed6>
   15a80:	3330      	adds	r3, #48	; 0x30
   15a82:	b2d9      	uxtb	r1, r3
   15a84:	1e83      	subs	r3, r0, #2
   15a86:	429c      	cmp	r4, r3
   15a88:	f802 1c01 	strb.w	r1, [r2, #-1]
   15a8c:	f240 857e 	bls.w	1658c <_vfprintf_r+0x1a08>
   15a90:	4613      	mov	r3, r2
   15a92:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   15a96:	e001      	b.n	15a9c <_vfprintf_r+0xf18>
   15a98:	f813 1b01 	ldrb.w	r1, [r3], #1
   15a9c:	f802 1b01 	strb.w	r1, [r2], #1
   15aa0:	429c      	cmp	r4, r3
   15aa2:	d1f9      	bne.n	15a98 <_vfprintf_r+0xf14>
   15aa4:	f10d 03a9 	add.w	r3, sp, #169	; 0xa9
   15aa8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   15aac:	1a1b      	subs	r3, r3, r0
   15aae:	4413      	add	r3, r2
   15ab0:	aa26      	add	r2, sp, #152	; 0x98
   15ab2:	1a9b      	subs	r3, r3, r2
   15ab4:	931c      	str	r3, [sp, #112]	; 0x70
   15ab6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15ab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   15aba:	2b01      	cmp	r3, #1
   15abc:	441a      	add	r2, r3
   15abe:	920c      	str	r2, [sp, #48]	; 0x30
   15ac0:	f340 8532 	ble.w	16528 <_vfprintf_r+0x19a4>
   15ac4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15ac6:	9a19      	ldr	r2, [sp, #100]	; 0x64
   15ac8:	4413      	add	r3, r2
   15aca:	930c      	str	r3, [sp, #48]	; 0x30
   15acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   15ad4:	f443 7a80 	orr.w	sl, r3, #256	; 0x100
   15ad8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   15adc:	2300      	movs	r3, #0
   15ade:	9310      	str	r3, [sp, #64]	; 0x40
   15ae0:	9207      	str	r2, [sp, #28]
   15ae2:	9315      	str	r3, [sp, #84]	; 0x54
   15ae4:	9313      	str	r3, [sp, #76]	; 0x4c
   15ae6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   15ae8:	2b00      	cmp	r3, #0
   15aea:	f040 827a 	bne.w	15fe2 <_vfprintf_r+0x145e>
   15aee:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   15af2:	9308      	str	r3, [sp, #32]
   15af4:	f7ff ba58 	b.w	14fa8 <_vfprintf_r+0x424>
   15af8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15afa:	601a      	str	r2, [r3, #0]
   15afc:	17d2      	asrs	r2, r2, #31
   15afe:	605a      	str	r2, [r3, #4]
   15b00:	465d      	mov	r5, fp
   15b02:	f7ff ba0b 	b.w	14f1c <_vfprintf_r+0x398>
   15b06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   15b08:	f89b 7000 	ldrb.w	r7, [fp]
   15b0c:	2b00      	cmp	r3, #0
   15b0e:	f43f a89c 	beq.w	14c4a <_vfprintf_r+0xc6>
   15b12:	781b      	ldrb	r3, [r3, #0]
   15b14:	2b00      	cmp	r3, #0
   15b16:	f43f a898 	beq.w	14c4a <_vfprintf_r+0xc6>
   15b1a:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
   15b1e:	f7ff b894 	b.w	14c4a <_vfprintf_r+0xc6>
   15b22:	4b8a      	ldr	r3, [pc, #552]	; (15d4c <_vfprintf_r+0x11c8>)
   15b24:	931b      	str	r3, [sp, #108]	; 0x6c
   15b26:	f01a 0620 	ands.w	r6, sl, #32
   15b2a:	d04b      	beq.n	15bc4 <_vfprintf_r+0x1040>
   15b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   15b2e:	3307      	adds	r3, #7
   15b30:	f023 0307 	bic.w	r3, r3, #7
   15b34:	685e      	ldr	r6, [r3, #4]
   15b36:	f853 4b08 	ldr.w	r4, [r3], #8
   15b3a:	930d      	str	r3, [sp, #52]	; 0x34
   15b3c:	f01a 0f01 	tst.w	sl, #1
   15b40:	d009      	beq.n	15b56 <_vfprintf_r+0xfd2>
   15b42:	ea54 0306 	orrs.w	r3, r4, r6
   15b46:	d006      	beq.n	15b56 <_vfprintf_r+0xfd2>
   15b48:	2330      	movs	r3, #48	; 0x30
   15b4a:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
   15b4e:	f04a 0a02 	orr.w	sl, sl, #2
   15b52:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   15b56:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
   15b5a:	9307      	str	r3, [sp, #28]
   15b5c:	2302      	movs	r3, #2
   15b5e:	f7ff badd 	b.w	1511c <_vfprintf_r+0x598>
   15b62:	f8cd a01c 	str.w	sl, [sp, #28]
   15b66:	f7ff bb7d 	b.w	15264 <_vfprintf_r+0x6e0>
   15b6a:	4b79      	ldr	r3, [pc, #484]	; (15d50 <_vfprintf_r+0x11cc>)
   15b6c:	931b      	str	r3, [sp, #108]	; 0x6c
   15b6e:	e7da      	b.n	15b26 <_vfprintf_r+0xfa2>
   15b70:	9909      	ldr	r1, [sp, #36]	; 0x24
   15b72:	aa2a      	add	r2, sp, #168	; 0xa8
   15b74:	4648      	mov	r0, r9
   15b76:	f001 fda1 	bl	176bc <__sprint_r>
   15b7a:	2800      	cmp	r0, #0
   15b7c:	f47f a936 	bne.w	14dec <_vfprintf_r+0x268>
   15b80:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15b82:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15b86:	f7ff b991 	b.w	14eac <_vfprintf_r+0x328>
   15b8a:	9909      	ldr	r1, [sp, #36]	; 0x24
   15b8c:	aa2a      	add	r2, sp, #168	; 0xa8
   15b8e:	4648      	mov	r0, r9
   15b90:	f001 fd94 	bl	176bc <__sprint_r>
   15b94:	2800      	cmp	r0, #0
   15b96:	f47f a929 	bne.w	14dec <_vfprintf_r+0x268>
   15b9a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15b9c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15ba0:	f7ff bbfa 	b.w	15398 <_vfprintf_r+0x814>
   15ba4:	2b06      	cmp	r3, #6
   15ba6:	4629      	mov	r1, r5
   15ba8:	bf28      	it	cs
   15baa:	2306      	movcs	r3, #6
   15bac:	9508      	str	r5, [sp, #32]
   15bae:	950e      	str	r5, [sp, #56]	; 0x38
   15bb0:	462a      	mov	r2, r5
   15bb2:	9307      	str	r3, [sp, #28]
   15bb4:	4d67      	ldr	r5, [pc, #412]	; (15d54 <_vfprintf_r+0x11d0>)
   15bb6:	940d      	str	r4, [sp, #52]	; 0x34
   15bb8:	930c      	str	r3, [sp, #48]	; 0x30
   15bba:	9110      	str	r1, [sp, #64]	; 0x40
   15bbc:	9115      	str	r1, [sp, #84]	; 0x54
   15bbe:	9113      	str	r1, [sp, #76]	; 0x4c
   15bc0:	f7ff b9f2 	b.w	14fa8 <_vfprintf_r+0x424>
   15bc4:	990d      	ldr	r1, [sp, #52]	; 0x34
   15bc6:	f01a 0210 	ands.w	r2, sl, #16
   15bca:	f101 0304 	add.w	r3, r1, #4
   15bce:	d066      	beq.n	15c9e <_vfprintf_r+0x111a>
   15bd0:	680c      	ldr	r4, [r1, #0]
   15bd2:	930d      	str	r3, [sp, #52]	; 0x34
   15bd4:	e7b2      	b.n	15b3c <_vfprintf_r+0xfb8>
   15bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
   15bd8:	aa2a      	add	r2, sp, #168	; 0xa8
   15bda:	4648      	mov	r0, r9
   15bdc:	f001 fd6e 	bl	176bc <__sprint_r>
   15be0:	2800      	cmp	r0, #0
   15be2:	f47f a903 	bne.w	14dec <_vfprintf_r+0x268>
   15be6:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
   15bea:	af2d      	add	r7, sp, #180	; 0xb4
   15bec:	e4c2      	b.n	15574 <_vfprintf_r+0x9f0>
   15bee:	9909      	ldr	r1, [sp, #36]	; 0x24
   15bf0:	aa2a      	add	r2, sp, #168	; 0xa8
   15bf2:	4648      	mov	r0, r9
   15bf4:	f001 fd62 	bl	176bc <__sprint_r>
   15bf8:	2800      	cmp	r0, #0
   15bfa:	f47f a8f7 	bne.w	14dec <_vfprintf_r+0x268>
   15bfe:	e9dd 642b 	ldrd	r6, r4, [sp, #172]	; 0xac
   15c02:	af2d      	add	r7, sp, #180	; 0xb4
   15c04:	e4c2      	b.n	1558c <_vfprintf_r+0xa08>
   15c06:	9b07      	ldr	r3, [sp, #28]
   15c08:	970c      	str	r7, [sp, #48]	; 0x30
   15c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   15c0e:	2200      	movs	r2, #0
   15c10:	e9cd b80e 	strd	fp, r8, [sp, #56]	; 0x38
   15c14:	f50d 7aac 	add.w	sl, sp, #344	; 0x158
   15c18:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   15c1c:	4617      	mov	r7, r2
   15c1e:	469b      	mov	fp, r3
   15c20:	e00c      	b.n	15c3c <_vfprintf_r+0x10b8>
   15c22:	2300      	movs	r3, #0
   15c24:	4620      	mov	r0, r4
   15c26:	4631      	mov	r1, r6
   15c28:	220a      	movs	r2, #10
   15c2a:	f7eb fac5 	bl	11b8 <__aeabi_uldivmod>
   15c2e:	2c0a      	cmp	r4, #10
   15c30:	f176 0300 	sbcs.w	r3, r6, #0
   15c34:	d31c      	bcc.n	15c70 <_vfprintf_r+0x10ec>
   15c36:	4604      	mov	r4, r0
   15c38:	460e      	mov	r6, r1
   15c3a:	46aa      	mov	sl, r5
   15c3c:	4620      	mov	r0, r4
   15c3e:	220a      	movs	r2, #10
   15c40:	2300      	movs	r3, #0
   15c42:	4631      	mov	r1, r6
   15c44:	f7eb fab8 	bl	11b8 <__aeabi_uldivmod>
   15c48:	3230      	adds	r2, #48	; 0x30
   15c4a:	f10a 35ff 	add.w	r5, sl, #4294967295
   15c4e:	3701      	adds	r7, #1
   15c50:	f80a 2c01 	strb.w	r2, [sl, #-1]
   15c54:	f1bb 0f00 	cmp.w	fp, #0
   15c58:	d0e3      	beq.n	15c22 <_vfprintf_r+0x109e>
   15c5a:	f898 3000 	ldrb.w	r3, [r8]
   15c5e:	429f      	cmp	r7, r3
   15c60:	d1df      	bne.n	15c22 <_vfprintf_r+0x109e>
   15c62:	2fff      	cmp	r7, #255	; 0xff
   15c64:	d0dd      	beq.n	15c22 <_vfprintf_r+0x109e>
   15c66:	2c0a      	cmp	r4, #10
   15c68:	f176 0300 	sbcs.w	r3, r6, #0
   15c6c:	f080 80b2 	bcs.w	15dd4 <_vfprintf_r+0x1250>
   15c70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   15c74:	9714      	str	r7, [sp, #80]	; 0x50
   15c76:	e9dd b80e 	ldrd	fp, r8, [sp, #56]	; 0x38
   15c7a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   15c7c:	f7ff bb2a 	b.w	152d4 <_vfprintf_r+0x750>
   15c80:	9909      	ldr	r1, [sp, #36]	; 0x24
   15c82:	aa2a      	add	r2, sp, #168	; 0xa8
   15c84:	4648      	mov	r0, r9
   15c86:	f001 fd19 	bl	176bc <__sprint_r>
   15c8a:	2800      	cmp	r0, #0
   15c8c:	f47f a8ae 	bne.w	14dec <_vfprintf_r+0x268>
   15c90:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   15c94:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15c96:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15c9a:	f7ff b8dd 	b.w	14e58 <_vfprintf_r+0x2d4>
   15c9e:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
   15ca2:	f000 808a 	beq.w	15dba <_vfprintf_r+0x1236>
   15ca6:	990d      	ldr	r1, [sp, #52]	; 0x34
   15ca8:	930d      	str	r3, [sp, #52]	; 0x34
   15caa:	880c      	ldrh	r4, [r1, #0]
   15cac:	4616      	mov	r6, r2
   15cae:	e745      	b.n	15b3c <_vfprintf_r+0xfb8>
   15cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
   15cb2:	aa2a      	add	r2, sp, #168	; 0xa8
   15cb4:	4648      	mov	r0, r9
   15cb6:	f001 fd01 	bl	176bc <__sprint_r>
   15cba:	2800      	cmp	r0, #0
   15cbc:	f47f a896 	bne.w	14dec <_vfprintf_r+0x268>
   15cc0:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   15cc2:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15cc6:	f7ff bb54 	b.w	15372 <_vfprintf_r+0x7ee>
   15cca:	4614      	mov	r4, r2
   15ccc:	3301      	adds	r3, #1
   15cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15cd0:	f8c8 2000 	str.w	r2, [r8]
   15cd4:	442c      	add	r4, r5
   15cd6:	2b07      	cmp	r3, #7
   15cd8:	f8c8 5004 	str.w	r5, [r8, #4]
   15cdc:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   15ce0:	f77f a8fb 	ble.w	14eda <_vfprintf_r+0x356>
   15ce4:	e425      	b.n	15532 <_vfprintf_r+0x9ae>
   15ce6:	2b01      	cmp	r3, #1
   15ce8:	f8cd a01c 	str.w	sl, [sp, #28]
   15cec:	f47f aae2 	bne.w	152b4 <_vfprintf_r+0x730>
   15cf0:	e478      	b.n	155e4 <_vfprintf_r+0xa60>
   15cf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15cf4:	601a      	str	r2, [r3, #0]
   15cf6:	465d      	mov	r5, fp
   15cf8:	f7ff b910 	b.w	14f1c <_vfprintf_r+0x398>
   15cfc:	2e10      	cmp	r6, #16
   15cfe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   15d00:	f340 842f 	ble.w	16562 <_vfprintf_r+0x19de>
   15d04:	4814      	ldr	r0, [pc, #80]	; (15d58 <_vfprintf_r+0x11d4>)
   15d06:	900f      	str	r0, [sp, #60]	; 0x3c
   15d08:	4642      	mov	r2, r8
   15d0a:	4621      	mov	r1, r4
   15d0c:	46a8      	mov	r8, r5
   15d0e:	2710      	movs	r7, #16
   15d10:	9d09      	ldr	r5, [sp, #36]	; 0x24
   15d12:	4604      	mov	r4, r0
   15d14:	e004      	b.n	15d20 <_vfprintf_r+0x119c>
   15d16:	3208      	adds	r2, #8
   15d18:	3e10      	subs	r6, #16
   15d1a:	2e10      	cmp	r6, #16
   15d1c:	f340 8168 	ble.w	15ff0 <_vfprintf_r+0x146c>
   15d20:	3301      	adds	r3, #1
   15d22:	3110      	adds	r1, #16
   15d24:	2b07      	cmp	r3, #7
   15d26:	e9c2 4700 	strd	r4, r7, [r2]
   15d2a:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
   15d2e:	ddf2      	ble.n	15d16 <_vfprintf_r+0x1192>
   15d30:	aa2a      	add	r2, sp, #168	; 0xa8
   15d32:	4629      	mov	r1, r5
   15d34:	4648      	mov	r0, r9
   15d36:	f001 fcc1 	bl	176bc <__sprint_r>
   15d3a:	2800      	cmp	r0, #0
   15d3c:	f47f a856 	bne.w	14dec <_vfprintf_r+0x268>
   15d40:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
   15d44:	aa2d      	add	r2, sp, #180	; 0xb4
   15d46:	e7e7      	b.n	15d18 <_vfprintf_r+0x1194>
   15d48:	66666667 	.word	0x66666667
   15d4c:	0001faa8 	.word	0x0001faa8
   15d50:	0001fabc 	.word	0x0001fabc
   15d54:	0001fad0 	.word	0x0001fad0
   15d58:	0001fae8 	.word	0x0001fae8
   15d5c:	46d1      	mov	r9, sl
   15d5e:	f8dd a020 	ldr.w	sl, [sp, #32]
   15d62:	4614      	mov	r4, r2
   15d64:	3601      	adds	r6, #1
   15d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15d68:	603b      	str	r3, [r7, #0]
   15d6a:	4444      	add	r4, r8
   15d6c:	2e07      	cmp	r6, #7
   15d6e:	e9cd 642b 	strd	r6, r4, [sp, #172]	; 0xac
   15d72:	f8c7 8004 	str.w	r8, [r7, #4]
   15d76:	f77f ac20 	ble.w	155ba <_vfprintf_r+0xa36>
   15d7a:	e51e      	b.n	157ba <_vfprintf_r+0xc36>
   15d7c:	4628      	mov	r0, r5
   15d7e:	9608      	str	r6, [sp, #32]
   15d80:	940d      	str	r4, [sp, #52]	; 0x34
   15d82:	f7ea f9bd 	bl	100 <strlen>
   15d86:	4603      	mov	r3, r0
   15d88:	900c      	str	r0, [sp, #48]	; 0x30
   15d8a:	f7ff b9ab 	b.w	150e4 <_vfprintf_r+0x560>
   15d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15d90:	930d      	str	r3, [sp, #52]	; 0x34
   15d92:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
   15d96:	bf16      	itet	ne
   15d98:	7814      	ldrbne	r4, [r2, #0]
   15d9a:	6814      	ldreq	r4, [r2, #0]
   15d9c:	460e      	movne	r6, r1
   15d9e:	f7ff b9b9 	b.w	15114 <_vfprintf_r+0x590>
   15da2:	9a07      	ldr	r2, [sp, #28]
   15da4:	f412 7600 	ands.w	r6, r2, #512	; 0x200
   15da8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15daa:	930d      	str	r3, [sp, #52]	; 0x34
   15dac:	bf16      	itet	ne
   15dae:	7814      	ldrbne	r4, [r2, #0]
   15db0:	6814      	ldreq	r4, [r2, #0]
   15db2:	460e      	movne	r6, r1
   15db4:	2301      	movs	r3, #1
   15db6:	f7ff b9b1 	b.w	1511c <_vfprintf_r+0x598>
   15dba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15dbc:	930d      	str	r3, [sp, #52]	; 0x34
   15dbe:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
   15dc2:	bf16      	itet	ne
   15dc4:	7814      	ldrbne	r4, [r2, #0]
   15dc6:	6814      	ldreq	r4, [r2, #0]
   15dc8:	460e      	movne	r6, r1
   15dca:	e6b7      	b.n	15b3c <_vfprintf_r+0xfb8>
   15dcc:	4a92      	ldr	r2, [pc, #584]	; (16018 <_vfprintf_r+0x1494>)
   15dce:	920f      	str	r2, [sp, #60]	; 0x3c
   15dd0:	f7ff bb83 	b.w	154da <_vfprintf_r+0x956>
   15dd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   15dd6:	991e      	ldr	r1, [sp, #120]	; 0x78
   15dd8:	1aed      	subs	r5, r5, r3
   15dda:	461a      	mov	r2, r3
   15ddc:	4628      	mov	r0, r5
   15dde:	f7fe fe8d 	bl	14afc <strncpy>
   15de2:	f898 3001 	ldrb.w	r3, [r8, #1]
   15de6:	b10b      	cbz	r3, 15dec <_vfprintf_r+0x1268>
   15de8:	f108 0801 	add.w	r8, r8, #1
   15dec:	4620      	mov	r0, r4
   15dee:	4631      	mov	r1, r6
   15df0:	220a      	movs	r2, #10
   15df2:	2300      	movs	r3, #0
   15df4:	2700      	movs	r7, #0
   15df6:	f7eb f9df 	bl	11b8 <__aeabi_uldivmod>
   15dfa:	e71c      	b.n	15c36 <_vfprintf_r+0x10b2>
   15dfc:	222d      	movs	r2, #45	; 0x2d
   15dfe:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   15e02:	f7ff b8c1 	b.w	14f88 <_vfprintf_r+0x404>
   15e06:	9a14      	ldr	r2, [sp, #80]	; 0x50
   15e08:	990c      	ldr	r1, [sp, #48]	; 0x30
   15e0a:	18ae      	adds	r6, r5, r2
   15e0c:	1a76      	subs	r6, r6, r1
   15e0e:	1ad5      	subs	r5, r2, r3
   15e10:	42ae      	cmp	r6, r5
   15e12:	bfa8      	it	ge
   15e14:	462e      	movge	r6, r5
   15e16:	e497      	b.n	15748 <_vfprintf_r+0xbc4>
   15e18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15e1a:	801a      	strh	r2, [r3, #0]
   15e1c:	465d      	mov	r5, fp
   15e1e:	f7ff b87d 	b.w	14f1c <_vfprintf_r+0x398>
   15e22:	f992 4000 	ldrsb.w	r4, [r2]
   15e26:	930d      	str	r3, [sp, #52]	; 0x34
   15e28:	17e6      	asrs	r6, r4, #31
   15e2a:	4633      	mov	r3, r6
   15e2c:	f7ff b91d 	b.w	1506a <_vfprintf_r+0x4e6>
   15e30:	2330      	movs	r3, #48	; 0x30
   15e32:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   15e36:	2358      	movs	r3, #88	; 0x58
   15e38:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
   15e3c:	f04a 0302 	orr.w	r3, sl, #2
   15e40:	930f      	str	r3, [sp, #60]	; 0x3c
   15e42:	9b08      	ldr	r3, [sp, #32]
   15e44:	2b63      	cmp	r3, #99	; 0x63
   15e46:	f300 8283 	bgt.w	16350 <_vfprintf_r+0x17cc>
   15e4a:	2300      	movs	r3, #0
   15e4c:	930e      	str	r3, [sp, #56]	; 0x38
   15e4e:	ad3d      	add	r5, sp, #244	; 0xf4
   15e50:	f027 0320 	bic.w	r3, r7, #32
   15e54:	9307      	str	r3, [sp, #28]
   15e56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15e58:	1e1e      	subs	r6, r3, #0
   15e5a:	f44a 7a81 	orr.w	sl, sl, #258	; 0x102
   15e5e:	f2c0 8184 	blt.w	1616a <_vfprintf_r+0x15e6>
   15e62:	9b16      	ldr	r3, [sp, #88]	; 0x58
   15e64:	930c      	str	r3, [sp, #48]	; 0x30
   15e66:	2300      	movs	r3, #0
   15e68:	9312      	str	r3, [sp, #72]	; 0x48
   15e6a:	2f61      	cmp	r7, #97	; 0x61
   15e6c:	f000 82ee 	beq.w	1644c <_vfprintf_r+0x18c8>
   15e70:	2f41      	cmp	r7, #65	; 0x41
   15e72:	f47f ada6 	bne.w	159c2 <_vfprintf_r+0xe3e>
   15e76:	aa24      	add	r2, sp, #144	; 0x90
   15e78:	980c      	ldr	r0, [sp, #48]	; 0x30
   15e7a:	4631      	mov	r1, r6
   15e7c:	f001 fba0 	bl	175c0 <frexp>
   15e80:	2200      	movs	r2, #0
   15e82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   15e86:	f7ea fd27 	bl	8d8 <__aeabi_dmul>
   15e8a:	4602      	mov	r2, r0
   15e8c:	460b      	mov	r3, r1
   15e8e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   15e92:	2200      	movs	r2, #0
   15e94:	2300      	movs	r3, #0
   15e96:	f7eb f9ff 	bl	1298 <__aeabi_dcmpeq>
   15e9a:	b108      	cbz	r0, 15ea0 <_vfprintf_r+0x131c>
   15e9c:	2301      	movs	r3, #1
   15e9e:	9324      	str	r3, [sp, #144]	; 0x90
   15ea0:	4b5e      	ldr	r3, [pc, #376]	; (1601c <_vfprintf_r+0x1498>)
   15ea2:	930c      	str	r3, [sp, #48]	; 0x30
   15ea4:	9b08      	ldr	r3, [sp, #32]
   15ea6:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
   15eaa:	e9cd 7b13 	strd	r7, fp, [sp, #76]	; 0x4c
   15eae:	f8cd 9084 	str.w	r9, [sp, #132]	; 0x84
   15eb2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   15eb6:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
   15eba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   15ebe:	1e5e      	subs	r6, r3, #1
   15ec0:	462c      	mov	r4, r5
   15ec2:	9510      	str	r5, [sp, #64]	; 0x40
   15ec4:	e005      	b.n	15ed2 <_vfprintf_r+0x134e>
   15ec6:	2200      	movs	r2, #0
   15ec8:	2300      	movs	r3, #0
   15eca:	3e01      	subs	r6, #1
   15ecc:	f7eb f9e4 	bl	1298 <__aeabi_dcmpeq>
   15ed0:	b9e0      	cbnz	r0, 15f0c <_vfprintf_r+0x1388>
   15ed2:	4b53      	ldr	r3, [pc, #332]	; (16020 <_vfprintf_r+0x149c>)
   15ed4:	2200      	movs	r2, #0
   15ed6:	4640      	mov	r0, r8
   15ed8:	4649      	mov	r1, r9
   15eda:	f7ea fcfd 	bl	8d8 <__aeabi_dmul>
   15ede:	4689      	mov	r9, r1
   15ee0:	4680      	mov	r8, r0
   15ee2:	f7eb fabb 	bl	145c <__aeabi_d2iz>
   15ee6:	4605      	mov	r5, r0
   15ee8:	f7ea fc8c 	bl	804 <__aeabi_i2d>
   15eec:	4602      	mov	r2, r0
   15eee:	460b      	mov	r3, r1
   15ef0:	4640      	mov	r0, r8
   15ef2:	4649      	mov	r1, r9
   15ef4:	f7ea fb38 	bl	568 <__aeabi_dsub>
   15ef8:	f81b 3005 	ldrb.w	r3, [fp, r5]
   15efc:	1c72      	adds	r2, r6, #1
   15efe:	46a2      	mov	sl, r4
   15f00:	4637      	mov	r7, r6
   15f02:	f804 3b01 	strb.w	r3, [r4], #1
   15f06:	4680      	mov	r8, r0
   15f08:	4689      	mov	r9, r1
   15f0a:	d1dc      	bne.n	15ec6 <_vfprintf_r+0x1342>
   15f0c:	4640      	mov	r0, r8
   15f0e:	4649      	mov	r1, r9
   15f10:	4b44      	ldr	r3, [pc, #272]	; (16024 <_vfprintf_r+0x14a0>)
   15f12:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   15f16:	f8dd 9084 	ldr.w	r9, [sp, #132]	; 0x84
   15f1a:	2200      	movs	r2, #0
   15f1c:	463e      	mov	r6, r7
   15f1e:	e9dd 7b13 	ldrd	r7, fp, [sp, #76]	; 0x4c
   15f22:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   15f26:	9514      	str	r5, [sp, #80]	; 0x50
   15f28:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
   15f2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   15f2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   15f32:	f7eb f9d9 	bl	12e8 <__aeabi_dcmpgt>
   15f36:	2800      	cmp	r0, #0
   15f38:	f040 8226 	bne.w	16388 <_vfprintf_r+0x1804>
   15f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   15f40:	4b38      	ldr	r3, [pc, #224]	; (16024 <_vfprintf_r+0x14a0>)
   15f42:	2200      	movs	r2, #0
   15f44:	f7eb f9a8 	bl	1298 <__aeabi_dcmpeq>
   15f48:	b118      	cbz	r0, 15f52 <_vfprintf_r+0x13ce>
   15f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15f4c:	07db      	lsls	r3, r3, #31
   15f4e:	f100 821b 	bmi.w	16388 <_vfprintf_r+0x1804>
   15f52:	2e00      	cmp	r6, #0
   15f54:	4633      	mov	r3, r6
   15f56:	db06      	blt.n	15f66 <_vfprintf_r+0x13e2>
   15f58:	3301      	adds	r3, #1
   15f5a:	4423      	add	r3, r4
   15f5c:	2230      	movs	r2, #48	; 0x30
   15f5e:	f804 2b01 	strb.w	r2, [r4], #1
   15f62:	42a3      	cmp	r3, r4
   15f64:	d1fb      	bne.n	15f5e <_vfprintf_r+0x13da>
   15f66:	1b63      	subs	r3, r4, r5
   15f68:	9314      	str	r3, [sp, #80]	; 0x50
   15f6a:	e54c      	b.n	15a06 <_vfprintf_r+0xe82>
   15f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
   15f6e:	aa2a      	add	r2, sp, #168	; 0xa8
   15f70:	4648      	mov	r0, r9
   15f72:	f001 fba3 	bl	176bc <__sprint_r>
   15f76:	2800      	cmp	r0, #0
   15f78:	f47e af38 	bne.w	14dec <_vfprintf_r+0x268>
   15f7c:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   15f80:	9a24      	ldr	r2, [sp, #144]	; 0x90
   15f82:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   15f86:	f7ff bac5 	b.w	15514 <_vfprintf_r+0x990>
   15f8a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   15f8c:	f003 fd12 	bl	199b4 <__retarget_lock_release_recursive>
   15f90:	f7fe befe 	b.w	14d90 <_vfprintf_r+0x20c>
   15f94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15f96:	1cde      	adds	r6, r3, #3
   15f98:	db02      	blt.n	15fa0 <_vfprintf_r+0x141c>
   15f9a:	9a08      	ldr	r2, [sp, #32]
   15f9c:	429a      	cmp	r2, r3
   15f9e:	da04      	bge.n	15faa <_vfprintf_r+0x1426>
   15fa0:	3f02      	subs	r7, #2
   15fa2:	f027 0320 	bic.w	r3, r7, #32
   15fa6:	9307      	str	r3, [sp, #28]
   15fa8:	e537      	b.n	15a1a <_vfprintf_r+0xe96>
   15faa:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   15fae:	429a      	cmp	r2, r3
   15fb0:	f300 8177 	bgt.w	162a2 <_vfprintf_r+0x171e>
   15fb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15fb6:	07d0      	lsls	r0, r2, #31
   15fb8:	f140 8260 	bpl.w	1647c <_vfprintf_r+0x18f8>
   15fbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
   15fbe:	4413      	add	r3, r2
   15fc0:	930c      	str	r3, [sp, #48]	; 0x30
   15fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   15fc4:	0559      	lsls	r1, r3, #21
   15fc6:	d503      	bpl.n	15fd0 <_vfprintf_r+0x144c>
   15fc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   15fca:	2b00      	cmp	r3, #0
   15fcc:	f300 8268 	bgt.w	164a0 <_vfprintf_r+0x191c>
   15fd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15fd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   15fd6:	9307      	str	r3, [sp, #28]
   15fd8:	2767      	movs	r7, #103	; 0x67
   15fda:	2300      	movs	r3, #0
   15fdc:	9310      	str	r3, [sp, #64]	; 0x40
   15fde:	9315      	str	r3, [sp, #84]	; 0x54
   15fe0:	e581      	b.n	15ae6 <_vfprintf_r+0xf62>
   15fe2:	222d      	movs	r2, #45	; 0x2d
   15fe4:	2300      	movs	r3, #0
   15fe6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
   15fea:	9308      	str	r3, [sp, #32]
   15fec:	f7fe bfdf 	b.w	14fae <_vfprintf_r+0x42a>
   15ff0:	4645      	mov	r5, r8
   15ff2:	460c      	mov	r4, r1
   15ff4:	4690      	mov	r8, r2
   15ff6:	3301      	adds	r3, #1
   15ff8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   15ffa:	f8c8 2000 	str.w	r2, [r8]
   15ffe:	4434      	add	r4, r6
   16000:	2b07      	cmp	r3, #7
   16002:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   16006:	f8c8 6004 	str.w	r6, [r8, #4]
   1600a:	f300 81e6 	bgt.w	163da <_vfprintf_r+0x1856>
   1600e:	f108 0808 	add.w	r8, r8, #8
   16012:	f7ff bb64 	b.w	156de <_vfprintf_r+0xb5a>
   16016:	bf00      	nop
   16018:	0001fae8 	.word	0x0001fae8
   1601c:	0001fabc 	.word	0x0001fabc
   16020:	40300000 	.word	0x40300000
   16024:	3fe00000 	.word	0x3fe00000
   16028:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1602a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1602c:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   16030:	4642      	mov	r2, r8
   16032:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
   16036:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
   1603a:	18eb      	adds	r3, r5, r3
   1603c:	9308      	str	r3, [sp, #32]
   1603e:	9f1d      	ldr	r7, [sp, #116]	; 0x74
   16040:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
   16044:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   16048:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1604a:	9512      	str	r5, [sp, #72]	; 0x48
   1604c:	4621      	mov	r1, r4
   1604e:	f1b8 0f00 	cmp.w	r8, #0
   16052:	d02e      	beq.n	160b2 <_vfprintf_r+0x152e>
   16054:	2b00      	cmp	r3, #0
   16056:	d16c      	bne.n	16132 <_vfprintf_r+0x15ae>
   16058:	3f01      	subs	r7, #1
   1605a:	f108 38ff 	add.w	r8, r8, #4294967295
   1605e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   16060:	e9c2 3a00 	strd	r3, sl, [r2]
   16064:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   16066:	3301      	adds	r3, #1
   16068:	4451      	add	r1, sl
   1606a:	2b07      	cmp	r3, #7
   1606c:	912c      	str	r1, [sp, #176]	; 0xb0
   1606e:	932b      	str	r3, [sp, #172]	; 0xac
   16070:	dc63      	bgt.n	1613a <_vfprintf_r+0x15b6>
   16072:	3208      	adds	r2, #8
   16074:	9b08      	ldr	r3, [sp, #32]
   16076:	7838      	ldrb	r0, [r7, #0]
   16078:	1b9b      	subs	r3, r3, r6
   1607a:	4283      	cmp	r3, r0
   1607c:	bfa8      	it	ge
   1607e:	4603      	movge	r3, r0
   16080:	2b00      	cmp	r3, #0
   16082:	461c      	mov	r4, r3
   16084:	dd0a      	ble.n	1609c <_vfprintf_r+0x1518>
   16086:	982b      	ldr	r0, [sp, #172]	; 0xac
   16088:	3001      	adds	r0, #1
   1608a:	4419      	add	r1, r3
   1608c:	2807      	cmp	r0, #7
   1608e:	e9c2 6300 	strd	r6, r3, [r2]
   16092:	912c      	str	r1, [sp, #176]	; 0xb0
   16094:	902b      	str	r0, [sp, #172]	; 0xac
   16096:	dc5b      	bgt.n	16150 <_vfprintf_r+0x15cc>
   16098:	7838      	ldrb	r0, [r7, #0]
   1609a:	3208      	adds	r2, #8
   1609c:	2c00      	cmp	r4, #0
   1609e:	bfac      	ite	ge
   160a0:	1b05      	subge	r5, r0, r4
   160a2:	4605      	movlt	r5, r0
   160a4:	2d00      	cmp	r5, #0
   160a6:	dc16      	bgt.n	160d6 <_vfprintf_r+0x1552>
   160a8:	4406      	add	r6, r0
   160aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   160ac:	f1b8 0f00 	cmp.w	r8, #0
   160b0:	d1d0      	bne.n	16054 <_vfprintf_r+0x14d0>
   160b2:	2b00      	cmp	r3, #0
   160b4:	d13d      	bne.n	16132 <_vfprintf_r+0x15ae>
   160b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
   160b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   160ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   160be:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
   160c2:	971d      	str	r7, [sp, #116]	; 0x74
   160c4:	18eb      	adds	r3, r5, r3
   160c6:	429e      	cmp	r6, r3
   160c8:	bf28      	it	cs
   160ca:	461e      	movcs	r6, r3
   160cc:	4690      	mov	r8, r2
   160ce:	460c      	mov	r4, r1
   160d0:	960c      	str	r6, [sp, #48]	; 0x30
   160d2:	f7ff bb0b 	b.w	156ec <_vfprintf_r+0xb68>
   160d6:	2d10      	cmp	r5, #16
   160d8:	982b      	ldr	r0, [sp, #172]	; 0xac
   160da:	dd1d      	ble.n	16118 <_vfprintf_r+0x1594>
   160dc:	2410      	movs	r4, #16
   160de:	e004      	b.n	160ea <_vfprintf_r+0x1566>
   160e0:	3d10      	subs	r5, #16
   160e2:	2d10      	cmp	r5, #16
   160e4:	f102 0208 	add.w	r2, r2, #8
   160e8:	dd16      	ble.n	16118 <_vfprintf_r+0x1594>
   160ea:	3001      	adds	r0, #1
   160ec:	4ba5      	ldr	r3, [pc, #660]	; (16384 <_vfprintf_r+0x1800>)
   160ee:	3110      	adds	r1, #16
   160f0:	2807      	cmp	r0, #7
   160f2:	e9c2 3400 	strd	r3, r4, [r2]
   160f6:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
   160fa:	ddf1      	ble.n	160e0 <_vfprintf_r+0x155c>
   160fc:	aa2a      	add	r2, sp, #168	; 0xa8
   160fe:	4659      	mov	r1, fp
   16100:	4648      	mov	r0, r9
   16102:	f001 fadb 	bl	176bc <__sprint_r>
   16106:	2800      	cmp	r0, #0
   16108:	f47e ae70 	bne.w	14dec <_vfprintf_r+0x268>
   1610c:	3d10      	subs	r5, #16
   1610e:	2d10      	cmp	r5, #16
   16110:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
   16114:	aa2d      	add	r2, sp, #180	; 0xb4
   16116:	dce8      	bgt.n	160ea <_vfprintf_r+0x1566>
   16118:	3001      	adds	r0, #1
   1611a:	4b9a      	ldr	r3, [pc, #616]	; (16384 <_vfprintf_r+0x1800>)
   1611c:	6055      	str	r5, [r2, #4]
   1611e:	4429      	add	r1, r5
   16120:	2807      	cmp	r0, #7
   16122:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
   16126:	6013      	str	r3, [r2, #0]
   16128:	dc42      	bgt.n	161b0 <_vfprintf_r+0x162c>
   1612a:	7838      	ldrb	r0, [r7, #0]
   1612c:	3208      	adds	r2, #8
   1612e:	4406      	add	r6, r0
   16130:	e7bb      	b.n	160aa <_vfprintf_r+0x1526>
   16132:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16134:	3b01      	subs	r3, #1
   16136:	9310      	str	r3, [sp, #64]	; 0x40
   16138:	e791      	b.n	1605e <_vfprintf_r+0x14da>
   1613a:	aa2a      	add	r2, sp, #168	; 0xa8
   1613c:	4659      	mov	r1, fp
   1613e:	4648      	mov	r0, r9
   16140:	f001 fabc 	bl	176bc <__sprint_r>
   16144:	2800      	cmp	r0, #0
   16146:	f47e ae51 	bne.w	14dec <_vfprintf_r+0x268>
   1614a:	992c      	ldr	r1, [sp, #176]	; 0xb0
   1614c:	aa2d      	add	r2, sp, #180	; 0xb4
   1614e:	e791      	b.n	16074 <_vfprintf_r+0x14f0>
   16150:	aa2a      	add	r2, sp, #168	; 0xa8
   16152:	4659      	mov	r1, fp
   16154:	4648      	mov	r0, r9
   16156:	f001 fab1 	bl	176bc <__sprint_r>
   1615a:	2800      	cmp	r0, #0
   1615c:	f47e ae46 	bne.w	14dec <_vfprintf_r+0x268>
   16160:	7838      	ldrb	r0, [r7, #0]
   16162:	992c      	ldr	r1, [sp, #176]	; 0xb0
   16164:	aa2d      	add	r2, sp, #180	; 0xb4
   16166:	e799      	b.n	1609c <_vfprintf_r+0x1518>
   16168:	930e      	str	r3, [sp, #56]	; 0x38
   1616a:	e9dd 3416 	ldrd	r3, r4, [sp, #88]	; 0x58
   1616e:	930c      	str	r3, [sp, #48]	; 0x30
   16170:	232d      	movs	r3, #45	; 0x2d
   16172:	f104 4600 	add.w	r6, r4, #2147483648	; 0x80000000
   16176:	9312      	str	r3, [sp, #72]	; 0x48
   16178:	e677      	b.n	15e6a <_vfprintf_r+0x12e6>
   1617a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1617c:	aa2a      	add	r2, sp, #168	; 0xa8
   1617e:	4648      	mov	r0, r9
   16180:	f001 fa9c 	bl	176bc <__sprint_r>
   16184:	2800      	cmp	r0, #0
   16186:	f47e ae31 	bne.w	14dec <_vfprintf_r+0x268>
   1618a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1618c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1618e:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   16192:	f7ff bbb7 	b.w	15904 <_vfprintf_r+0xd80>
   16196:	9909      	ldr	r1, [sp, #36]	; 0x24
   16198:	aa2a      	add	r2, sp, #168	; 0xa8
   1619a:	4648      	mov	r0, r9
   1619c:	f001 fa8e 	bl	176bc <__sprint_r>
   161a0:	2800      	cmp	r0, #0
   161a2:	f47e ae23 	bne.w	14dec <_vfprintf_r+0x268>
   161a6:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   161a8:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   161ac:	f7ff ba90 	b.w	156d0 <_vfprintf_r+0xb4c>
   161b0:	aa2a      	add	r2, sp, #168	; 0xa8
   161b2:	4659      	mov	r1, fp
   161b4:	4648      	mov	r0, r9
   161b6:	f001 fa81 	bl	176bc <__sprint_r>
   161ba:	2800      	cmp	r0, #0
   161bc:	f47e ae16 	bne.w	14dec <_vfprintf_r+0x268>
   161c0:	7838      	ldrb	r0, [r7, #0]
   161c2:	992c      	ldr	r1, [sp, #176]	; 0xb0
   161c4:	aa2d      	add	r2, sp, #180	; 0xb4
   161c6:	4406      	add	r6, r0
   161c8:	e76f      	b.n	160aa <_vfprintf_r+0x1526>
   161ca:	9908      	ldr	r1, [sp, #32]
   161cc:	9101      	str	r1, [sp, #4]
   161ce:	a928      	add	r1, sp, #160	; 0xa0
   161d0:	9104      	str	r1, [sp, #16]
   161d2:	a925      	add	r1, sp, #148	; 0x94
   161d4:	9103      	str	r1, [sp, #12]
   161d6:	a924      	add	r1, sp, #144	; 0x90
   161d8:	9102      	str	r1, [sp, #8]
   161da:	2103      	movs	r1, #3
   161dc:	4633      	mov	r3, r6
   161de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   161e0:	9100      	str	r1, [sp, #0]
   161e2:	4648      	mov	r0, r9
   161e4:	f7ec fa20 	bl	2628 <_dtoa_r>
   161e8:	7803      	ldrb	r3, [r0, #0]
   161ea:	2b30      	cmp	r3, #48	; 0x30
   161ec:	4605      	mov	r5, r0
   161ee:	f000 818d 	beq.w	1650c <_vfprintf_r+0x1988>
   161f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   161f4:	9a08      	ldr	r2, [sp, #32]
   161f6:	4413      	add	r3, r2
   161f8:	18ec      	adds	r4, r5, r3
   161fa:	980c      	ldr	r0, [sp, #48]	; 0x30
   161fc:	4631      	mov	r1, r6
   161fe:	2200      	movs	r2, #0
   16200:	2300      	movs	r3, #0
   16202:	f7eb f849 	bl	1298 <__aeabi_dcmpeq>
   16206:	b110      	cbz	r0, 1620e <_vfprintf_r+0x168a>
   16208:	4623      	mov	r3, r4
   1620a:	f7ff bbfa 	b.w	15a02 <_vfprintf_r+0xe7e>
   1620e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   16210:	42a3      	cmp	r3, r4
   16212:	f4bf abf6 	bcs.w	15a02 <_vfprintf_r+0xe7e>
   16216:	2130      	movs	r1, #48	; 0x30
   16218:	1c5a      	adds	r2, r3, #1
   1621a:	9228      	str	r2, [sp, #160]	; 0xa0
   1621c:	7019      	strb	r1, [r3, #0]
   1621e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   16220:	429c      	cmp	r4, r3
   16222:	d8f9      	bhi.n	16218 <_vfprintf_r+0x1694>
   16224:	f7ff bbed 	b.w	15a02 <_vfprintf_r+0xe7e>
   16228:	9909      	ldr	r1, [sp, #36]	; 0x24
   1622a:	aa2a      	add	r2, sp, #168	; 0xa8
   1622c:	4648      	mov	r0, r9
   1622e:	f001 fa45 	bl	176bc <__sprint_r>
   16232:	2800      	cmp	r0, #0
   16234:	f47e adda 	bne.w	14dec <_vfprintf_r+0x268>
   16238:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1623a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   1623c:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   16240:	f7ff ba6a 	b.w	15718 <_vfprintf_r+0xb94>
   16244:	9b08      	ldr	r3, [sp, #32]
   16246:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
   1624a:	940d      	str	r4, [sp, #52]	; 0x34
   1624c:	9307      	str	r3, [sp, #28]
   1624e:	930c      	str	r3, [sp, #48]	; 0x30
   16250:	9008      	str	r0, [sp, #32]
   16252:	9010      	str	r0, [sp, #64]	; 0x40
   16254:	9015      	str	r0, [sp, #84]	; 0x54
   16256:	9013      	str	r0, [sp, #76]	; 0x4c
   16258:	f7fe bea6 	b.w	14fa8 <_vfprintf_r+0x424>
   1625c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1625e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   16260:	9a08      	ldr	r2, [sp, #32]
   16262:	f003 0301 	and.w	r3, r3, #1
   16266:	2900      	cmp	r1, #0
   16268:	ea43 0302 	orr.w	r3, r3, r2
   1626c:	f340 8162 	ble.w	16534 <_vfprintf_r+0x19b0>
   16270:	2b00      	cmp	r3, #0
   16272:	f040 813c 	bne.w	164ee <_vfprintf_r+0x196a>
   16276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   16278:	930c      	str	r3, [sp, #48]	; 0x30
   1627a:	2766      	movs	r7, #102	; 0x66
   1627c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1627e:	055a      	lsls	r2, r3, #21
   16280:	f100 810f 	bmi.w	164a2 <_vfprintf_r+0x191e>
   16284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1628a:	9307      	str	r3, [sp, #28]
   1628c:	e6a5      	b.n	15fda <_vfprintf_r+0x1456>
   1628e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16290:	9818      	ldr	r0, [sp, #96]	; 0x60
   16292:	aa2a      	add	r2, sp, #168	; 0xa8
   16294:	f001 fa12 	bl	176bc <__sprint_r>
   16298:	2800      	cmp	r0, #0
   1629a:	f43e ae47 	beq.w	14f2c <_vfprintf_r+0x3a8>
   1629e:	f7fe bdab 	b.w	14df8 <_vfprintf_r+0x274>
   162a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   162a4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   162a6:	189a      	adds	r2, r3, r2
   162a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   162aa:	920c      	str	r2, [sp, #48]	; 0x30
   162ac:	2b00      	cmp	r3, #0
   162ae:	f340 8124 	ble.w	164fa <_vfprintf_r+0x1976>
   162b2:	2767      	movs	r7, #103	; 0x67
   162b4:	e7e2      	b.n	1627c <_vfprintf_r+0x16f8>
   162b6:	2300      	movs	r3, #0
   162b8:	9308      	str	r3, [sp, #32]
   162ba:	f7fe bcc8 	b.w	14c4e <_vfprintf_r+0xca>
   162be:	9909      	ldr	r1, [sp, #36]	; 0x24
   162c0:	aa2a      	add	r2, sp, #168	; 0xa8
   162c2:	4648      	mov	r0, r9
   162c4:	f001 f9fa 	bl	176bc <__sprint_r>
   162c8:	2800      	cmp	r0, #0
   162ca:	f47e ad8f 	bne.w	14dec <_vfprintf_r+0x268>
   162ce:	9d24      	ldr	r5, [sp, #144]	; 0x90
   162d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   162d2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   162d4:	1b5d      	subs	r5, r3, r5
   162d6:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   162da:	f7ff ba35 	b.w	15748 <_vfprintf_r+0xbc4>
   162de:	9b08      	ldr	r3, [sp, #32]
   162e0:	18ec      	adds	r4, r5, r3
   162e2:	e78a      	b.n	161fa <_vfprintf_r+0x1676>
   162e4:	4256      	negs	r6, r2
   162e6:	3210      	adds	r2, #16
   162e8:	f280 814d 	bge.w	16586 <_vfprintf_r+0x1a02>
   162ec:	4825      	ldr	r0, [pc, #148]	; (16384 <_vfprintf_r+0x1800>)
   162ee:	900f      	str	r0, [sp, #60]	; 0x3c
   162f0:	4642      	mov	r2, r8
   162f2:	4621      	mov	r1, r4
   162f4:	46a8      	mov	r8, r5
   162f6:	2710      	movs	r7, #16
   162f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   162fa:	4604      	mov	r4, r0
   162fc:	e003      	b.n	16306 <_vfprintf_r+0x1782>
   162fe:	3208      	adds	r2, #8
   16300:	3e10      	subs	r6, #16
   16302:	2e10      	cmp	r6, #16
   16304:	dd76      	ble.n	163f4 <_vfprintf_r+0x1870>
   16306:	3301      	adds	r3, #1
   16308:	3110      	adds	r1, #16
   1630a:	2b07      	cmp	r3, #7
   1630c:	e9c2 4700 	strd	r4, r7, [r2]
   16310:	e9cd 312b 	strd	r3, r1, [sp, #172]	; 0xac
   16314:	ddf3      	ble.n	162fe <_vfprintf_r+0x177a>
   16316:	aa2a      	add	r2, sp, #168	; 0xa8
   16318:	4629      	mov	r1, r5
   1631a:	4648      	mov	r0, r9
   1631c:	f001 f9ce 	bl	176bc <__sprint_r>
   16320:	2800      	cmp	r0, #0
   16322:	f47e ad63 	bne.w	14dec <_vfprintf_r+0x268>
   16326:	e9dd 312b 	ldrd	r3, r1, [sp, #172]	; 0xac
   1632a:	aa2d      	add	r2, sp, #180	; 0xb4
   1632c:	e7e8      	b.n	16300 <_vfprintf_r+0x177c>
   1632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   16332:	07df      	lsls	r7, r3, #31
   16334:	d407      	bmi.n	16346 <_vfprintf_r+0x17c2>
   16336:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16338:	899b      	ldrh	r3, [r3, #12]
   1633a:	059e      	lsls	r6, r3, #22
   1633c:	d403      	bmi.n	16346 <_vfprintf_r+0x17c2>
   1633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16340:	6d98      	ldr	r0, [r3, #88]	; 0x58
   16342:	f003 fb37 	bl	199b4 <__retarget_lock_release_recursive>
   16346:	f04f 33ff 	mov.w	r3, #4294967295
   1634a:	930b      	str	r3, [sp, #44]	; 0x2c
   1634c:	f7fe bd5d 	b.w	14e0a <_vfprintf_r+0x286>
   16350:	1c59      	adds	r1, r3, #1
   16352:	4648      	mov	r0, r9
   16354:	f7fe f85c 	bl	14410 <_malloc_r>
   16358:	4605      	mov	r5, r0
   1635a:	2800      	cmp	r0, #0
   1635c:	f000 811a 	beq.w	16594 <_vfprintf_r+0x1a10>
   16360:	900e      	str	r0, [sp, #56]	; 0x38
   16362:	e575      	b.n	15e50 <_vfprintf_r+0x12cc>
   16364:	1c4c      	adds	r4, r1, #1
   16366:	a928      	add	r1, sp, #160	; 0xa0
   16368:	9104      	str	r1, [sp, #16]
   1636a:	a925      	add	r1, sp, #148	; 0x94
   1636c:	9103      	str	r1, [sp, #12]
   1636e:	a924      	add	r1, sp, #144	; 0x90
   16370:	9102      	str	r1, [sp, #8]
   16372:	2102      	movs	r1, #2
   16374:	9401      	str	r4, [sp, #4]
   16376:	9100      	str	r1, [sp, #0]
   16378:	4648      	mov	r0, r9
   1637a:	f7ec f955 	bl	2628 <_dtoa_r>
   1637e:	4605      	mov	r5, r0
   16380:	442c      	add	r4, r5
   16382:	e73a      	b.n	161fa <_vfprintf_r+0x1676>
   16384:	0001fae8 	.word	0x0001fae8
   16388:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1638a:	9328      	str	r3, [sp, #160]	; 0xa0
   1638c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1638e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   16392:	7bd9      	ldrb	r1, [r3, #15]
   16394:	428a      	cmp	r2, r1
   16396:	4623      	mov	r3, r4
   16398:	d109      	bne.n	163ae <_vfprintf_r+0x182a>
   1639a:	2030      	movs	r0, #48	; 0x30
   1639c:	f803 0c01 	strb.w	r0, [r3, #-1]
   163a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   163a2:	1e5a      	subs	r2, r3, #1
   163a4:	9228      	str	r2, [sp, #160]	; 0xa0
   163a6:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   163aa:	4291      	cmp	r1, r2
   163ac:	d0f6      	beq.n	1639c <_vfprintf_r+0x1818>
   163ae:	2a39      	cmp	r2, #57	; 0x39
   163b0:	bf0b      	itete	eq
   163b2:	9a0c      	ldreq	r2, [sp, #48]	; 0x30
   163b4:	3201      	addne	r2, #1
   163b6:	7a92      	ldrbeq	r2, [r2, #10]
   163b8:	b2d2      	uxtbne	r2, r2
   163ba:	f803 2c01 	strb.w	r2, [r3, #-1]
   163be:	e5d2      	b.n	15f66 <_vfprintf_r+0x13e2>
   163c0:	2330      	movs	r3, #48	; 0x30
   163c2:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   163c6:	2378      	movs	r3, #120	; 0x78
   163c8:	e536      	b.n	15e38 <_vfprintf_r+0x12b4>
   163ca:	4a78      	ldr	r2, [pc, #480]	; (165ac <_vfprintf_r+0x1a28>)
   163cc:	920f      	str	r2, [sp, #60]	; 0x3c
   163ce:	f7ff b845 	b.w	1545c <_vfprintf_r+0x8d8>
   163d2:	2306      	movs	r3, #6
   163d4:	9308      	str	r3, [sp, #32]
   163d6:	f7ff bae5 	b.w	159a4 <_vfprintf_r+0xe20>
   163da:	9909      	ldr	r1, [sp, #36]	; 0x24
   163dc:	aa2a      	add	r2, sp, #168	; 0xa8
   163de:	4648      	mov	r0, r9
   163e0:	f001 f96c 	bl	176bc <__sprint_r>
   163e4:	2800      	cmp	r0, #0
   163e6:	f47e ad01 	bne.w	14dec <_vfprintf_r+0x268>
   163ea:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   163ec:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   163f0:	f7ff b975 	b.w	156de <_vfprintf_r+0xb5a>
   163f4:	4645      	mov	r5, r8
   163f6:	460c      	mov	r4, r1
   163f8:	4690      	mov	r8, r2
   163fa:	3301      	adds	r3, #1
   163fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   163fe:	f8c8 2000 	str.w	r2, [r8]
   16402:	4434      	add	r4, r6
   16404:	2b07      	cmp	r3, #7
   16406:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
   1640a:	f8c8 6004 	str.w	r6, [r8, #4]
   1640e:	f77f aa8e 	ble.w	1592e <_vfprintf_r+0xdaa>
   16412:	9909      	ldr	r1, [sp, #36]	; 0x24
   16414:	aa2a      	add	r2, sp, #168	; 0xa8
   16416:	4648      	mov	r0, r9
   16418:	f001 f950 	bl	176bc <__sprint_r>
   1641c:	2800      	cmp	r0, #0
   1641e:	f47e ace5 	bne.w	14dec <_vfprintf_r+0x268>
   16422:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
   16426:	f10d 08b4 	add.w	r8, sp, #180	; 0xb4
   1642a:	f7ff b876 	b.w	1551a <_vfprintf_r+0x996>
   1642e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   16430:	4d5f      	ldr	r5, [pc, #380]	; (165b0 <_vfprintf_r+0x1a2c>)
   16432:	2b00      	cmp	r3, #0
   16434:	bfb4      	ite	lt
   16436:	222d      	movlt	r2, #45	; 0x2d
   16438:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
   1643c:	4b5d      	ldr	r3, [pc, #372]	; (165b4 <_vfprintf_r+0x1a30>)
   1643e:	bfb8      	it	lt
   16440:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
   16444:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
   16448:	f7fe bda2 	b.w	14f90 <_vfprintf_r+0x40c>
   1644c:	aa24      	add	r2, sp, #144	; 0x90
   1644e:	980c      	ldr	r0, [sp, #48]	; 0x30
   16450:	4631      	mov	r1, r6
   16452:	f001 f8b5 	bl	175c0 <frexp>
   16456:	2200      	movs	r2, #0
   16458:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   1645c:	f7ea fa3c 	bl	8d8 <__aeabi_dmul>
   16460:	4602      	mov	r2, r0
   16462:	460b      	mov	r3, r1
   16464:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   16468:	2200      	movs	r2, #0
   1646a:	2300      	movs	r3, #0
   1646c:	f7ea ff14 	bl	1298 <__aeabi_dcmpeq>
   16470:	b108      	cbz	r0, 16476 <_vfprintf_r+0x18f2>
   16472:	2301      	movs	r3, #1
   16474:	9324      	str	r3, [sp, #144]	; 0x90
   16476:	4b50      	ldr	r3, [pc, #320]	; (165b8 <_vfprintf_r+0x1a34>)
   16478:	930c      	str	r3, [sp, #48]	; 0x30
   1647a:	e513      	b.n	15ea4 <_vfprintf_r+0x1320>
   1647c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1647e:	930c      	str	r3, [sp, #48]	; 0x30
   16480:	e59f      	b.n	15fc2 <_vfprintf_r+0x143e>
   16482:	2900      	cmp	r1, #0
   16484:	d16a      	bne.n	1655c <_vfprintf_r+0x19d8>
   16486:	2230      	movs	r2, #48	; 0x30
   16488:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   1648c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   16490:	3330      	adds	r3, #48	; 0x30
   16492:	f802 3b01 	strb.w	r3, [r2], #1
   16496:	ab26      	add	r3, sp, #152	; 0x98
   16498:	1ad3      	subs	r3, r2, r3
   1649a:	931c      	str	r3, [sp, #112]	; 0x70
   1649c:	f7ff bb0b 	b.w	15ab6 <_vfprintf_r+0xf32>
   164a0:	2767      	movs	r7, #103	; 0x67
   164a2:	991d      	ldr	r1, [sp, #116]	; 0x74
   164a4:	780b      	ldrb	r3, [r1, #0]
   164a6:	2bff      	cmp	r3, #255	; 0xff
   164a8:	d07b      	beq.n	165a2 <_vfprintf_r+0x1a1e>
   164aa:	2400      	movs	r4, #0
   164ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   164ae:	4620      	mov	r0, r4
   164b0:	e003      	b.n	164ba <_vfprintf_r+0x1936>
   164b2:	3001      	adds	r0, #1
   164b4:	3101      	adds	r1, #1
   164b6:	2bff      	cmp	r3, #255	; 0xff
   164b8:	d008      	beq.n	164cc <_vfprintf_r+0x1948>
   164ba:	4293      	cmp	r3, r2
   164bc:	da06      	bge.n	164cc <_vfprintf_r+0x1948>
   164be:	1ad2      	subs	r2, r2, r3
   164c0:	784b      	ldrb	r3, [r1, #1]
   164c2:	2b00      	cmp	r3, #0
   164c4:	d1f5      	bne.n	164b2 <_vfprintf_r+0x192e>
   164c6:	780b      	ldrb	r3, [r1, #0]
   164c8:	3401      	adds	r4, #1
   164ca:	e7f4      	b.n	164b6 <_vfprintf_r+0x1932>
   164cc:	911d      	str	r1, [sp, #116]	; 0x74
   164ce:	9213      	str	r2, [sp, #76]	; 0x4c
   164d0:	9015      	str	r0, [sp, #84]	; 0x54
   164d2:	9410      	str	r4, [sp, #64]	; 0x40
   164d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   164d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   164d8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   164da:	4413      	add	r3, r2
   164dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   164de:	fb01 2303 	mla	r3, r1, r3, r2
   164e2:	930c      	str	r3, [sp, #48]	; 0x30
   164e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   164e8:	9307      	str	r3, [sp, #28]
   164ea:	f7ff bafc 	b.w	15ae6 <_vfprintf_r+0xf62>
   164ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
   164f0:	18cb      	adds	r3, r1, r3
   164f2:	441a      	add	r2, r3
   164f4:	920c      	str	r2, [sp, #48]	; 0x30
   164f6:	2766      	movs	r7, #102	; 0x66
   164f8:	e6c0      	b.n	1627c <_vfprintf_r+0x16f8>
   164fa:	f1c3 0301 	rsb	r3, r3, #1
   164fe:	441a      	add	r2, r3
   16500:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   16504:	920c      	str	r2, [sp, #48]	; 0x30
   16506:	9307      	str	r3, [sp, #28]
   16508:	2767      	movs	r7, #103	; 0x67
   1650a:	e566      	b.n	15fda <_vfprintf_r+0x1456>
   1650c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1650e:	4631      	mov	r1, r6
   16510:	2200      	movs	r2, #0
   16512:	2300      	movs	r3, #0
   16514:	f7ea fec0 	bl	1298 <__aeabi_dcmpeq>
   16518:	2800      	cmp	r0, #0
   1651a:	f47f ae6a 	bne.w	161f2 <_vfprintf_r+0x166e>
   1651e:	9b08      	ldr	r3, [sp, #32]
   16520:	f1c3 0301 	rsb	r3, r3, #1
   16524:	9324      	str	r3, [sp, #144]	; 0x90
   16526:	e665      	b.n	161f4 <_vfprintf_r+0x1670>
   16528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1652a:	07dc      	lsls	r4, r3, #31
   1652c:	f57f aace 	bpl.w	15acc <_vfprintf_r+0xf48>
   16530:	f7ff bac8 	b.w	15ac4 <_vfprintf_r+0xf40>
   16534:	b923      	cbnz	r3, 16540 <_vfprintf_r+0x19bc>
   16536:	2301      	movs	r3, #1
   16538:	9307      	str	r3, [sp, #28]
   1653a:	2766      	movs	r7, #102	; 0x66
   1653c:	930c      	str	r3, [sp, #48]	; 0x30
   1653e:	e54c      	b.n	15fda <_vfprintf_r+0x1456>
   16540:	9b19      	ldr	r3, [sp, #100]	; 0x64
   16542:	9a08      	ldr	r2, [sp, #32]
   16544:	3301      	adds	r3, #1
   16546:	441a      	add	r2, r3
   16548:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   1654c:	920c      	str	r2, [sp, #48]	; 0x30
   1654e:	9307      	str	r3, [sp, #28]
   16550:	2766      	movs	r7, #102	; 0x66
   16552:	e542      	b.n	15fda <_vfprintf_r+0x1456>
   16554:	4a15      	ldr	r2, [pc, #84]	; (165ac <_vfprintf_r+0x1a28>)
   16556:	920f      	str	r2, [sp, #60]	; 0x3c
   16558:	f7ff bbb8 	b.w	15ccc <_vfprintf_r+0x1148>
   1655c:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   16560:	e796      	b.n	16490 <_vfprintf_r+0x190c>
   16562:	4a12      	ldr	r2, [pc, #72]	; (165ac <_vfprintf_r+0x1a28>)
   16564:	920f      	str	r2, [sp, #60]	; 0x3c
   16566:	e546      	b.n	15ff6 <_vfprintf_r+0x1472>
   16568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1656a:	f89b 7001 	ldrb.w	r7, [fp, #1]
   1656e:	4693      	mov	fp, r2
   16570:	f853 2b04 	ldr.w	r2, [r3], #4
   16574:	930d      	str	r3, [sp, #52]	; 0x34
   16576:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   1657a:	9208      	str	r2, [sp, #32]
   1657c:	f7fe bb65 	b.w	14c4a <_vfprintf_r+0xc6>
   16580:	9c08      	ldr	r4, [sp, #32]
   16582:	442c      	add	r4, r5
   16584:	e639      	b.n	161fa <_vfprintf_r+0x1676>
   16586:	4a09      	ldr	r2, [pc, #36]	; (165ac <_vfprintf_r+0x1a28>)
   16588:	920f      	str	r2, [sp, #60]	; 0x3c
   1658a:	e736      	b.n	163fa <_vfprintf_r+0x1876>
   1658c:	2302      	movs	r3, #2
   1658e:	931c      	str	r3, [sp, #112]	; 0x70
   16590:	f7ff ba91 	b.w	15ab6 <_vfprintf_r+0xf32>
   16594:	9a09      	ldr	r2, [sp, #36]	; 0x24
   16596:	8993      	ldrh	r3, [r2, #12]
   16598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1659c:	8193      	strh	r3, [r2, #12]
   1659e:	f7fe bc2b 	b.w	14df8 <_vfprintf_r+0x274>
   165a2:	2300      	movs	r3, #0
   165a4:	9310      	str	r3, [sp, #64]	; 0x40
   165a6:	9315      	str	r3, [sp, #84]	; 0x54
   165a8:	e794      	b.n	164d4 <_vfprintf_r+0x1950>
   165aa:	bf00      	nop
   165ac:	0001fae8 	.word	0x0001fae8
   165b0:	0001faa0 	.word	0x0001faa0
   165b4:	0001faa4 	.word	0x0001faa4
   165b8:	0001faa8 	.word	0x0001faa8

000165bc <__sbprintf>:
   165bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   165be:	461f      	mov	r7, r3
   165c0:	898b      	ldrh	r3, [r1, #12]
   165c2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   165c6:	f023 0302 	bic.w	r3, r3, #2
   165ca:	f8ad 300c 	strh.w	r3, [sp, #12]
   165ce:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   165d0:	9319      	str	r3, [sp, #100]	; 0x64
   165d2:	89cb      	ldrh	r3, [r1, #14]
   165d4:	f8ad 300e 	strh.w	r3, [sp, #14]
   165d8:	69cb      	ldr	r3, [r1, #28]
   165da:	9307      	str	r3, [sp, #28]
   165dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   165de:	9309      	str	r3, [sp, #36]	; 0x24
   165e0:	ab1a      	add	r3, sp, #104	; 0x68
   165e2:	9300      	str	r3, [sp, #0]
   165e4:	9304      	str	r3, [sp, #16]
   165e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   165ea:	4615      	mov	r5, r2
   165ec:	4606      	mov	r6, r0
   165ee:	9302      	str	r3, [sp, #8]
   165f0:	9305      	str	r3, [sp, #20]
   165f2:	a816      	add	r0, sp, #88	; 0x58
   165f4:	2300      	movs	r3, #0
   165f6:	460c      	mov	r4, r1
   165f8:	9306      	str	r3, [sp, #24]
   165fa:	f003 f9c6 	bl	1998a <__retarget_lock_init_recursive>
   165fe:	462a      	mov	r2, r5
   16600:	463b      	mov	r3, r7
   16602:	4669      	mov	r1, sp
   16604:	4630      	mov	r0, r6
   16606:	f7fe fabd 	bl	14b84 <_vfprintf_r>
   1660a:	1e05      	subs	r5, r0, #0
   1660c:	db07      	blt.n	1661e <__sbprintf+0x62>
   1660e:	4669      	mov	r1, sp
   16610:	4630      	mov	r0, r6
   16612:	f000 f99d 	bl	16950 <_fflush_r>
   16616:	2800      	cmp	r0, #0
   16618:	bf18      	it	ne
   1661a:	f04f 35ff 	movne.w	r5, #4294967295
   1661e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   16622:	065b      	lsls	r3, r3, #25
   16624:	d503      	bpl.n	1662e <__sbprintf+0x72>
   16626:	89a3      	ldrh	r3, [r4, #12]
   16628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1662c:	81a3      	strh	r3, [r4, #12]
   1662e:	9816      	ldr	r0, [sp, #88]	; 0x58
   16630:	f003 f9b4 	bl	1999c <__retarget_lock_close_recursive>
   16634:	4628      	mov	r0, r5
   16636:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   1663a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001663c <__swsetup_r>:
   1663c:	b538      	push	{r3, r4, r5, lr}
   1663e:	4b33      	ldr	r3, [pc, #204]	; (1670c <__swsetup_r+0xd0>)
   16640:	681b      	ldr	r3, [r3, #0]
   16642:	4605      	mov	r5, r0
   16644:	460c      	mov	r4, r1
   16646:	b10b      	cbz	r3, 1664c <__swsetup_r+0x10>
   16648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1664a:	b312      	cbz	r2, 16692 <__swsetup_r+0x56>
   1664c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16650:	0718      	lsls	r0, r3, #28
   16652:	b29a      	uxth	r2, r3
   16654:	d525      	bpl.n	166a2 <__swsetup_r+0x66>
   16656:	6921      	ldr	r1, [r4, #16]
   16658:	2900      	cmp	r1, #0
   1665a:	d02d      	beq.n	166b8 <__swsetup_r+0x7c>
   1665c:	f012 0001 	ands.w	r0, r2, #1
   16660:	d007      	beq.n	16672 <__swsetup_r+0x36>
   16662:	2000      	movs	r0, #0
   16664:	60a0      	str	r0, [r4, #8]
   16666:	6960      	ldr	r0, [r4, #20]
   16668:	4240      	negs	r0, r0
   1666a:	61a0      	str	r0, [r4, #24]
   1666c:	b139      	cbz	r1, 1667e <__swsetup_r+0x42>
   1666e:	2000      	movs	r0, #0
   16670:	bd38      	pop	{r3, r4, r5, pc}
   16672:	0795      	lsls	r5, r2, #30
   16674:	bf58      	it	pl
   16676:	6960      	ldrpl	r0, [r4, #20]
   16678:	60a0      	str	r0, [r4, #8]
   1667a:	2900      	cmp	r1, #0
   1667c:	d1f7      	bne.n	1666e <__swsetup_r+0x32>
   1667e:	0612      	lsls	r2, r2, #24
   16680:	bf58      	it	pl
   16682:	4608      	movpl	r0, r1
   16684:	d5f4      	bpl.n	16670 <__swsetup_r+0x34>
   16686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1668a:	81a3      	strh	r3, [r4, #12]
   1668c:	f04f 30ff 	mov.w	r0, #4294967295
   16690:	bd38      	pop	{r3, r4, r5, pc}
   16692:	4618      	mov	r0, r3
   16694:	f000 f990 	bl	169b8 <__sinit>
   16698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1669c:	0718      	lsls	r0, r3, #28
   1669e:	b29a      	uxth	r2, r3
   166a0:	d4d9      	bmi.n	16656 <__swsetup_r+0x1a>
   166a2:	06d1      	lsls	r1, r2, #27
   166a4:	d52a      	bpl.n	166fc <__swsetup_r+0xc0>
   166a6:	0752      	lsls	r2, r2, #29
   166a8:	d414      	bmi.n	166d4 <__swsetup_r+0x98>
   166aa:	6921      	ldr	r1, [r4, #16]
   166ac:	f043 0308 	orr.w	r3, r3, #8
   166b0:	81a3      	strh	r3, [r4, #12]
   166b2:	b29a      	uxth	r2, r3
   166b4:	2900      	cmp	r1, #0
   166b6:	d1d1      	bne.n	1665c <__swsetup_r+0x20>
   166b8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   166bc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   166c0:	d0cc      	beq.n	1665c <__swsetup_r+0x20>
   166c2:	4621      	mov	r1, r4
   166c4:	4628      	mov	r0, r5
   166c6:	f000 fb71 	bl	16dac <__smakebuf_r>
   166ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   166ce:	6921      	ldr	r1, [r4, #16]
   166d0:	b29a      	uxth	r2, r3
   166d2:	e7c3      	b.n	1665c <__swsetup_r+0x20>
   166d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   166d6:	b151      	cbz	r1, 166ee <__swsetup_r+0xb2>
   166d8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   166dc:	4291      	cmp	r1, r2
   166de:	d004      	beq.n	166ea <__swsetup_r+0xae>
   166e0:	4628      	mov	r0, r5
   166e2:	f000 fa3f 	bl	16b64 <_free_r>
   166e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   166ea:	2200      	movs	r2, #0
   166ec:	6322      	str	r2, [r4, #48]	; 0x30
   166ee:	6921      	ldr	r1, [r4, #16]
   166f0:	2200      	movs	r2, #0
   166f2:	e9c4 1200 	strd	r1, r2, [r4]
   166f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   166fa:	e7d7      	b.n	166ac <__swsetup_r+0x70>
   166fc:	2209      	movs	r2, #9
   166fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16702:	602a      	str	r2, [r5, #0]
   16704:	f04f 30ff 	mov.w	r0, #4294967295
   16708:	81a3      	strh	r3, [r4, #12]
   1670a:	bd38      	pop	{r3, r4, r5, pc}
   1670c:	20000d60 	.word	0x20000d60

00016710 <quorem>:
   16710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16714:	6903      	ldr	r3, [r0, #16]
   16716:	690c      	ldr	r4, [r1, #16]
   16718:	42a3      	cmp	r3, r4
   1671a:	b083      	sub	sp, #12
   1671c:	f2c0 8086 	blt.w	1682c <quorem+0x11c>
   16720:	3c01      	subs	r4, #1
   16722:	f101 0514 	add.w	r5, r1, #20
   16726:	00a3      	lsls	r3, r4, #2
   16728:	f100 0814 	add.w	r8, r0, #20
   1672c:	9300      	str	r3, [sp, #0]
   1672e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   16732:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   16736:	3301      	adds	r3, #1
   16738:	468a      	mov	sl, r1
   1673a:	429a      	cmp	r2, r3
   1673c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   16740:	4681      	mov	r9, r0
   16742:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   16746:	9101      	str	r1, [sp, #4]
   16748:	fbb2 f6f3 	udiv	r6, r2, r3
   1674c:	d338      	bcc.n	167c0 <quorem+0xb0>
   1674e:	2300      	movs	r3, #0
   16750:	46ae      	mov	lr, r5
   16752:	4640      	mov	r0, r8
   16754:	469b      	mov	fp, r3
   16756:	f85e 1b04 	ldr.w	r1, [lr], #4
   1675a:	6802      	ldr	r2, [r0, #0]
   1675c:	fa1f fc81 	uxth.w	ip, r1
   16760:	fb06 330c 	mla	r3, r6, ip, r3
   16764:	0c09      	lsrs	r1, r1, #16
   16766:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1676a:	fb06 cc01 	mla	ip, r6, r1, ip
   1676e:	b299      	uxth	r1, r3
   16770:	ebab 0101 	sub.w	r1, fp, r1
   16774:	fa1f f38c 	uxth.w	r3, ip
   16778:	fa11 f182 	uxtah	r1, r1, r2
   1677c:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
   16780:	eb02 4221 	add.w	r2, r2, r1, asr #16
   16784:	b289      	uxth	r1, r1
   16786:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   1678a:	4577      	cmp	r7, lr
   1678c:	f840 1b04 	str.w	r1, [r0], #4
   16790:	ea4f 431c 	mov.w	r3, ip, lsr #16
   16794:	ea4f 4b22 	mov.w	fp, r2, asr #16
   16798:	d2dd      	bcs.n	16756 <quorem+0x46>
   1679a:	9b00      	ldr	r3, [sp, #0]
   1679c:	f858 3003 	ldr.w	r3, [r8, r3]
   167a0:	b973      	cbnz	r3, 167c0 <quorem+0xb0>
   167a2:	9b01      	ldr	r3, [sp, #4]
   167a4:	3b04      	subs	r3, #4
   167a6:	4598      	cmp	r8, r3
   167a8:	d304      	bcc.n	167b4 <quorem+0xa4>
   167aa:	e007      	b.n	167bc <quorem+0xac>
   167ac:	4598      	cmp	r8, r3
   167ae:	f104 34ff 	add.w	r4, r4, #4294967295
   167b2:	d203      	bcs.n	167bc <quorem+0xac>
   167b4:	f853 2904 	ldr.w	r2, [r3], #-4
   167b8:	2a00      	cmp	r2, #0
   167ba:	d0f7      	beq.n	167ac <quorem+0x9c>
   167bc:	f8c9 4010 	str.w	r4, [r9, #16]
   167c0:	4651      	mov	r1, sl
   167c2:	4648      	mov	r0, r9
   167c4:	f000 fdd4 	bl	17370 <__mcmp>
   167c8:	2800      	cmp	r0, #0
   167ca:	db2b      	blt.n	16824 <quorem+0x114>
   167cc:	3601      	adds	r6, #1
   167ce:	4640      	mov	r0, r8
   167d0:	2300      	movs	r3, #0
   167d2:	f855 1b04 	ldr.w	r1, [r5], #4
   167d6:	f8d0 c000 	ldr.w	ip, [r0]
   167da:	b28a      	uxth	r2, r1
   167dc:	1a9a      	subs	r2, r3, r2
   167de:	0c0b      	lsrs	r3, r1, #16
   167e0:	fa12 f28c 	uxtah	r2, r2, ip
   167e4:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   167e8:	eb03 4322 	add.w	r3, r3, r2, asr #16
   167ec:	b292      	uxth	r2, r2
   167ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   167f2:	42af      	cmp	r7, r5
   167f4:	f840 2b04 	str.w	r2, [r0], #4
   167f8:	ea4f 4323 	mov.w	r3, r3, asr #16
   167fc:	d2e9      	bcs.n	167d2 <quorem+0xc2>
   167fe:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   16802:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   16806:	b96a      	cbnz	r2, 16824 <quorem+0x114>
   16808:	3b04      	subs	r3, #4
   1680a:	4598      	cmp	r8, r3
   1680c:	d304      	bcc.n	16818 <quorem+0x108>
   1680e:	e007      	b.n	16820 <quorem+0x110>
   16810:	4598      	cmp	r8, r3
   16812:	f104 34ff 	add.w	r4, r4, #4294967295
   16816:	d203      	bcs.n	16820 <quorem+0x110>
   16818:	f853 2904 	ldr.w	r2, [r3], #-4
   1681c:	2a00      	cmp	r2, #0
   1681e:	d0f7      	beq.n	16810 <quorem+0x100>
   16820:	f8c9 4010 	str.w	r4, [r9, #16]
   16824:	4630      	mov	r0, r6
   16826:	b003      	add	sp, #12
   16828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1682c:	2000      	movs	r0, #0
   1682e:	b003      	add	sp, #12
   16830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016834 <__sflush_r>:
   16834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16836:	898b      	ldrh	r3, [r1, #12]
   16838:	460c      	mov	r4, r1
   1683a:	0719      	lsls	r1, r3, #28
   1683c:	4607      	mov	r7, r0
   1683e:	d43c      	bmi.n	168ba <__sflush_r+0x86>
   16840:	6862      	ldr	r2, [r4, #4]
   16842:	2a00      	cmp	r2, #0
   16844:	dd55      	ble.n	168f2 <__sflush_r+0xbe>
   16846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16848:	2e00      	cmp	r6, #0
   1684a:	d050      	beq.n	168ee <__sflush_r+0xba>
   1684c:	2200      	movs	r2, #0
   1684e:	683d      	ldr	r5, [r7, #0]
   16850:	603a      	str	r2, [r7, #0]
   16852:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   16856:	d150      	bne.n	168fa <__sflush_r+0xc6>
   16858:	69e1      	ldr	r1, [r4, #28]
   1685a:	2301      	movs	r3, #1
   1685c:	4638      	mov	r0, r7
   1685e:	47b0      	blx	r6
   16860:	1c42      	adds	r2, r0, #1
   16862:	d05c      	beq.n	1691e <__sflush_r+0xea>
   16864:	89a3      	ldrh	r3, [r4, #12]
   16866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   16868:	075b      	lsls	r3, r3, #29
   1686a:	d505      	bpl.n	16878 <__sflush_r+0x44>
   1686c:	6863      	ldr	r3, [r4, #4]
   1686e:	1ac0      	subs	r0, r0, r3
   16870:	6b23      	ldr	r3, [r4, #48]	; 0x30
   16872:	b10b      	cbz	r3, 16878 <__sflush_r+0x44>
   16874:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   16876:	1ac0      	subs	r0, r0, r3
   16878:	4602      	mov	r2, r0
   1687a:	69e1      	ldr	r1, [r4, #28]
   1687c:	2300      	movs	r3, #0
   1687e:	4638      	mov	r0, r7
   16880:	47b0      	blx	r6
   16882:	1c46      	adds	r6, r0, #1
   16884:	d142      	bne.n	1690c <__sflush_r+0xd8>
   16886:	683b      	ldr	r3, [r7, #0]
   16888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1688c:	2b00      	cmp	r3, #0
   1688e:	d052      	beq.n	16936 <__sflush_r+0x102>
   16890:	2b1d      	cmp	r3, #29
   16892:	d001      	beq.n	16898 <__sflush_r+0x64>
   16894:	2b16      	cmp	r3, #22
   16896:	d156      	bne.n	16946 <__sflush_r+0x112>
   16898:	6923      	ldr	r3, [r4, #16]
   1689a:	2200      	movs	r2, #0
   1689c:	e9c4 3200 	strd	r3, r2, [r4]
   168a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   168a2:	603d      	str	r5, [r7, #0]
   168a4:	b319      	cbz	r1, 168ee <__sflush_r+0xba>
   168a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   168aa:	4299      	cmp	r1, r3
   168ac:	d002      	beq.n	168b4 <__sflush_r+0x80>
   168ae:	4638      	mov	r0, r7
   168b0:	f000 f958 	bl	16b64 <_free_r>
   168b4:	2000      	movs	r0, #0
   168b6:	6320      	str	r0, [r4, #48]	; 0x30
   168b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168ba:	6926      	ldr	r6, [r4, #16]
   168bc:	b1be      	cbz	r6, 168ee <__sflush_r+0xba>
   168be:	6825      	ldr	r5, [r4, #0]
   168c0:	6026      	str	r6, [r4, #0]
   168c2:	0799      	lsls	r1, r3, #30
   168c4:	bf0c      	ite	eq
   168c6:	6963      	ldreq	r3, [r4, #20]
   168c8:	2300      	movne	r3, #0
   168ca:	1bad      	subs	r5, r5, r6
   168cc:	60a3      	str	r3, [r4, #8]
   168ce:	e00c      	b.n	168ea <__sflush_r+0xb6>
   168d0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   168d4:	69e1      	ldr	r1, [r4, #28]
   168d6:	462b      	mov	r3, r5
   168d8:	4632      	mov	r2, r6
   168da:	4638      	mov	r0, r7
   168dc:	47e0      	blx	ip
   168de:	f1b0 0c00 	subs.w	ip, r0, #0
   168e2:	eba5 050c 	sub.w	r5, r5, ip
   168e6:	4466      	add	r6, ip
   168e8:	dd09      	ble.n	168fe <__sflush_r+0xca>
   168ea:	2d00      	cmp	r5, #0
   168ec:	dcf0      	bgt.n	168d0 <__sflush_r+0x9c>
   168ee:	2000      	movs	r0, #0
   168f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   168f4:	2a00      	cmp	r2, #0
   168f6:	dca6      	bgt.n	16846 <__sflush_r+0x12>
   168f8:	e7f9      	b.n	168ee <__sflush_r+0xba>
   168fa:	6d20      	ldr	r0, [r4, #80]	; 0x50
   168fc:	e7b4      	b.n	16868 <__sflush_r+0x34>
   168fe:	89a3      	ldrh	r3, [r4, #12]
   16900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16904:	f04f 30ff 	mov.w	r0, #4294967295
   16908:	81a3      	strh	r3, [r4, #12]
   1690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1690c:	2300      	movs	r3, #0
   1690e:	6063      	str	r3, [r4, #4]
   16910:	6923      	ldr	r3, [r4, #16]
   16912:	6023      	str	r3, [r4, #0]
   16914:	89a3      	ldrh	r3, [r4, #12]
   16916:	04da      	lsls	r2, r3, #19
   16918:	d5c2      	bpl.n	168a0 <__sflush_r+0x6c>
   1691a:	6520      	str	r0, [r4, #80]	; 0x50
   1691c:	e7c0      	b.n	168a0 <__sflush_r+0x6c>
   1691e:	683b      	ldr	r3, [r7, #0]
   16920:	2b00      	cmp	r3, #0
   16922:	d09f      	beq.n	16864 <__sflush_r+0x30>
   16924:	2b1d      	cmp	r3, #29
   16926:	d00c      	beq.n	16942 <__sflush_r+0x10e>
   16928:	2b16      	cmp	r3, #22
   1692a:	d00a      	beq.n	16942 <__sflush_r+0x10e>
   1692c:	89a3      	ldrh	r3, [r4, #12]
   1692e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16932:	81a3      	strh	r3, [r4, #12]
   16934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16936:	6063      	str	r3, [r4, #4]
   16938:	6923      	ldr	r3, [r4, #16]
   1693a:	6023      	str	r3, [r4, #0]
   1693c:	04d3      	lsls	r3, r2, #19
   1693e:	d5af      	bpl.n	168a0 <__sflush_r+0x6c>
   16940:	e7eb      	b.n	1691a <__sflush_r+0xe6>
   16942:	603d      	str	r5, [r7, #0]
   16944:	e7d3      	b.n	168ee <__sflush_r+0xba>
   16946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1694a:	81a2      	strh	r2, [r4, #12]
   1694c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1694e:	bf00      	nop

00016950 <_fflush_r>:
   16950:	b538      	push	{r3, r4, r5, lr}
   16952:	460c      	mov	r4, r1
   16954:	4605      	mov	r5, r0
   16956:	b108      	cbz	r0, 1695c <_fflush_r+0xc>
   16958:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1695a:	b1a3      	cbz	r3, 16986 <_fflush_r+0x36>
   1695c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   16960:	b1b8      	cbz	r0, 16992 <_fflush_r+0x42>
   16962:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16964:	07db      	lsls	r3, r3, #31
   16966:	d401      	bmi.n	1696c <_fflush_r+0x1c>
   16968:	0581      	lsls	r1, r0, #22
   1696a:	d515      	bpl.n	16998 <_fflush_r+0x48>
   1696c:	4628      	mov	r0, r5
   1696e:	4621      	mov	r1, r4
   16970:	f7ff ff60 	bl	16834 <__sflush_r>
   16974:	6e63      	ldr	r3, [r4, #100]	; 0x64
   16976:	07da      	lsls	r2, r3, #31
   16978:	4605      	mov	r5, r0
   1697a:	d402      	bmi.n	16982 <_fflush_r+0x32>
   1697c:	89a3      	ldrh	r3, [r4, #12]
   1697e:	059b      	lsls	r3, r3, #22
   16980:	d50e      	bpl.n	169a0 <_fflush_r+0x50>
   16982:	4628      	mov	r0, r5
   16984:	bd38      	pop	{r3, r4, r5, pc}
   16986:	f000 f817 	bl	169b8 <__sinit>
   1698a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   1698e:	2800      	cmp	r0, #0
   16990:	d1e7      	bne.n	16962 <_fflush_r+0x12>
   16992:	4605      	mov	r5, r0
   16994:	4628      	mov	r0, r5
   16996:	bd38      	pop	{r3, r4, r5, pc}
   16998:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1699a:	f003 f803 	bl	199a4 <__retarget_lock_acquire_recursive>
   1699e:	e7e5      	b.n	1696c <_fflush_r+0x1c>
   169a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   169a2:	f003 f807 	bl	199b4 <__retarget_lock_release_recursive>
   169a6:	4628      	mov	r0, r5
   169a8:	bd38      	pop	{r3, r4, r5, pc}
   169aa:	bf00      	nop

000169ac <_cleanup_r>:
   169ac:	4901      	ldr	r1, [pc, #4]	; (169b4 <_cleanup_r+0x8>)
   169ae:	f000 b9d5 	b.w	16d5c <_fwalk_reent>
   169b2:	bf00      	nop
   169b4:	00016951 	.word	0x00016951

000169b8 <__sinit>:
   169b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   169bc:	4682      	mov	sl, r0
   169be:	4839      	ldr	r0, [pc, #228]	; (16aa4 <__sinit+0xec>)
   169c0:	f002 fff0 	bl	199a4 <__retarget_lock_acquire_recursive>
   169c4:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   169c8:	2c00      	cmp	r4, #0
   169ca:	d166      	bne.n	16a9a <__sinit+0xe2>
   169cc:	f8da 5004 	ldr.w	r5, [sl, #4]
   169d0:	4a35      	ldr	r2, [pc, #212]	; (16aa8 <__sinit+0xf0>)
   169d2:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
   169d6:	2303      	movs	r3, #3
   169d8:	e9ca 4353 	strd	r4, r3, [sl, #332]	; 0x14c
   169dc:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 16aac <__sinit+0xf4>
   169e0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 16ab0 <__sinit+0xf8>
   169e4:	4f33      	ldr	r7, [pc, #204]	; (16ab4 <__sinit+0xfc>)
   169e6:	4e34      	ldr	r6, [pc, #208]	; (16ab8 <__sinit+0x100>)
   169e8:	2304      	movs	r3, #4
   169ea:	f50a 72ac 	add.w	r2, sl, #344	; 0x158
   169ee:	f8ca 2154 	str.w	r2, [sl, #340]	; 0x154
   169f2:	4621      	mov	r1, r4
   169f4:	e9c5 4302 	strd	r4, r3, [r5, #8]
   169f8:	e9c5 4400 	strd	r4, r4, [r5]
   169fc:	e9c5 4404 	strd	r4, r4, [r5, #16]
   16a00:	666c      	str	r4, [r5, #100]	; 0x64
   16a02:	2208      	movs	r2, #8
   16a04:	61ac      	str	r4, [r5, #24]
   16a06:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   16a0a:	f7fd fff3 	bl	149f4 <memset>
   16a0e:	e9c5 5907 	strd	r5, r9, [r5, #28]
   16a12:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   16a16:	62ee      	str	r6, [r5, #44]	; 0x2c
   16a18:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16a1c:	f002 ffb5 	bl	1998a <__retarget_lock_init_recursive>
   16a20:	f8da 5008 	ldr.w	r5, [sl, #8]
   16a24:	4b25      	ldr	r3, [pc, #148]	; (16abc <__sinit+0x104>)
   16a26:	60eb      	str	r3, [r5, #12]
   16a28:	4621      	mov	r1, r4
   16a2a:	e9c5 4400 	strd	r4, r4, [r5]
   16a2e:	e9c5 4404 	strd	r4, r4, [r5, #16]
   16a32:	666c      	str	r4, [r5, #100]	; 0x64
   16a34:	60ac      	str	r4, [r5, #8]
   16a36:	61ac      	str	r4, [r5, #24]
   16a38:	2208      	movs	r2, #8
   16a3a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   16a3e:	f7fd ffd9 	bl	149f4 <memset>
   16a42:	e9c5 5907 	strd	r5, r9, [r5, #28]
   16a46:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   16a4a:	62ee      	str	r6, [r5, #44]	; 0x2c
   16a4c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16a50:	f002 ff9b 	bl	1998a <__retarget_lock_init_recursive>
   16a54:	f8da 500c 	ldr.w	r5, [sl, #12]
   16a58:	4b19      	ldr	r3, [pc, #100]	; (16ac0 <__sinit+0x108>)
   16a5a:	60eb      	str	r3, [r5, #12]
   16a5c:	4621      	mov	r1, r4
   16a5e:	e9c5 4400 	strd	r4, r4, [r5]
   16a62:	e9c5 4404 	strd	r4, r4, [r5, #16]
   16a66:	666c      	str	r4, [r5, #100]	; 0x64
   16a68:	60ac      	str	r4, [r5, #8]
   16a6a:	61ac      	str	r4, [r5, #24]
   16a6c:	2208      	movs	r2, #8
   16a6e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   16a72:	f7fd ffbf 	bl	149f4 <memset>
   16a76:	f105 0058 	add.w	r0, r5, #88	; 0x58
   16a7a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   16a7e:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   16a82:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   16a86:	f002 ff80 	bl	1998a <__retarget_lock_init_recursive>
   16a8a:	2301      	movs	r3, #1
   16a8c:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   16a90:	4804      	ldr	r0, [pc, #16]	; (16aa4 <__sinit+0xec>)
   16a92:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a96:	f002 bf8d 	b.w	199b4 <__retarget_lock_release_recursive>
   16a9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16a9e:	4801      	ldr	r0, [pc, #4]	; (16aa4 <__sinit+0xec>)
   16aa0:	f002 bf88 	b.w	199b4 <__retarget_lock_release_recursive>
   16aa4:	20000efc 	.word	0x20000efc
   16aa8:	000169ad 	.word	0x000169ad
   16aac:	00017631 	.word	0x00017631
   16ab0:	00017655 	.word	0x00017655
   16ab4:	00017695 	.word	0x00017695
   16ab8:	000176b5 	.word	0x000176b5
   16abc:	00010009 	.word	0x00010009
   16ac0:	00020012 	.word	0x00020012

00016ac4 <_malloc_trim_r>:
   16ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ac6:	4f24      	ldr	r7, [pc, #144]	; (16b58 <_malloc_trim_r+0x94>)
   16ac8:	460c      	mov	r4, r1
   16aca:	4606      	mov	r6, r0
   16acc:	f7fd ffe4 	bl	14a98 <__malloc_lock>
   16ad0:	68ba      	ldr	r2, [r7, #8]
   16ad2:	6855      	ldr	r5, [r2, #4]
   16ad4:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   16ad8:	330f      	adds	r3, #15
   16ada:	f025 0503 	bic.w	r5, r5, #3
   16ade:	442b      	add	r3, r5
   16ae0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   16ae4:	f023 030f 	bic.w	r3, r3, #15
   16ae8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   16aec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   16af0:	db07      	blt.n	16b02 <_malloc_trim_r+0x3e>
   16af2:	2100      	movs	r1, #0
   16af4:	4630      	mov	r0, r6
   16af6:	f7fd ffef 	bl	14ad8 <_sbrk_r>
   16afa:	68bb      	ldr	r3, [r7, #8]
   16afc:	442b      	add	r3, r5
   16afe:	4298      	cmp	r0, r3
   16b00:	d004      	beq.n	16b0c <_malloc_trim_r+0x48>
   16b02:	4630      	mov	r0, r6
   16b04:	f7fd ffce 	bl	14aa4 <__malloc_unlock>
   16b08:	2000      	movs	r0, #0
   16b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b0c:	4261      	negs	r1, r4
   16b0e:	4630      	mov	r0, r6
   16b10:	f7fd ffe2 	bl	14ad8 <_sbrk_r>
   16b14:	3001      	adds	r0, #1
   16b16:	d00d      	beq.n	16b34 <_malloc_trim_r+0x70>
   16b18:	4a10      	ldr	r2, [pc, #64]	; (16b5c <_malloc_trim_r+0x98>)
   16b1a:	68bb      	ldr	r3, [r7, #8]
   16b1c:	1b2d      	subs	r5, r5, r4
   16b1e:	f045 0501 	orr.w	r5, r5, #1
   16b22:	605d      	str	r5, [r3, #4]
   16b24:	6813      	ldr	r3, [r2, #0]
   16b26:	4630      	mov	r0, r6
   16b28:	1b1b      	subs	r3, r3, r4
   16b2a:	6013      	str	r3, [r2, #0]
   16b2c:	f7fd ffba 	bl	14aa4 <__malloc_unlock>
   16b30:	2001      	movs	r0, #1
   16b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16b34:	2100      	movs	r1, #0
   16b36:	4630      	mov	r0, r6
   16b38:	f7fd ffce 	bl	14ad8 <_sbrk_r>
   16b3c:	68ba      	ldr	r2, [r7, #8]
   16b3e:	1a83      	subs	r3, r0, r2
   16b40:	2b0f      	cmp	r3, #15
   16b42:	ddde      	ble.n	16b02 <_malloc_trim_r+0x3e>
   16b44:	f043 0301 	orr.w	r3, r3, #1
   16b48:	6053      	str	r3, [r2, #4]
   16b4a:	4b05      	ldr	r3, [pc, #20]	; (16b60 <_malloc_trim_r+0x9c>)
   16b4c:	4903      	ldr	r1, [pc, #12]	; (16b5c <_malloc_trim_r+0x98>)
   16b4e:	681b      	ldr	r3, [r3, #0]
   16b50:	1ac0      	subs	r0, r0, r3
   16b52:	6008      	str	r0, [r1, #0]
   16b54:	e7d5      	b.n	16b02 <_malloc_trim_r+0x3e>
   16b56:	bf00      	nop
   16b58:	20000950 	.word	0x20000950
   16b5c:	20009254 	.word	0x20009254
   16b60:	20000d58 	.word	0x20000d58

00016b64 <_free_r>:
   16b64:	2900      	cmp	r1, #0
   16b66:	d05f      	beq.n	16c28 <_free_r+0xc4>
   16b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b6a:	460c      	mov	r4, r1
   16b6c:	4606      	mov	r6, r0
   16b6e:	f7fd ff93 	bl	14a98 <__malloc_lock>
   16b72:	f854 3c04 	ldr.w	r3, [r4, #-4]
   16b76:	4f76      	ldr	r7, [pc, #472]	; (16d50 <_free_r+0x1ec>)
   16b78:	f1a4 0508 	sub.w	r5, r4, #8
   16b7c:	f023 0101 	bic.w	r1, r3, #1
   16b80:	186a      	adds	r2, r5, r1
   16b82:	f8d7 c008 	ldr.w	ip, [r7, #8]
   16b86:	6850      	ldr	r0, [r2, #4]
   16b88:	4594      	cmp	ip, r2
   16b8a:	f020 0003 	bic.w	r0, r0, #3
   16b8e:	f000 8086 	beq.w	16c9e <_free_r+0x13a>
   16b92:	07db      	lsls	r3, r3, #31
   16b94:	6050      	str	r0, [r2, #4]
   16b96:	eb02 0c00 	add.w	ip, r2, r0
   16b9a:	d433      	bmi.n	16c04 <_free_r+0xa0>
   16b9c:	f854 4c08 	ldr.w	r4, [r4, #-8]
   16ba0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16ba4:	1b2d      	subs	r5, r5, r4
   16ba6:	4421      	add	r1, r4
   16ba8:	68ac      	ldr	r4, [r5, #8]
   16baa:	f107 0c08 	add.w	ip, r7, #8
   16bae:	4564      	cmp	r4, ip
   16bb0:	f003 0301 	and.w	r3, r3, #1
   16bb4:	d063      	beq.n	16c7e <_free_r+0x11a>
   16bb6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
   16bba:	f8c4 e00c 	str.w	lr, [r4, #12]
   16bbe:	f8ce 4008 	str.w	r4, [lr, #8]
   16bc2:	2b00      	cmp	r3, #0
   16bc4:	f000 808f 	beq.w	16ce6 <_free_r+0x182>
   16bc8:	f041 0301 	orr.w	r3, r1, #1
   16bcc:	606b      	str	r3, [r5, #4]
   16bce:	6011      	str	r1, [r2, #0]
   16bd0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16bd4:	d231      	bcs.n	16c3a <_free_r+0xd6>
   16bd6:	687a      	ldr	r2, [r7, #4]
   16bd8:	08cb      	lsrs	r3, r1, #3
   16bda:	0948      	lsrs	r0, r1, #5
   16bdc:	2101      	movs	r1, #1
   16bde:	3301      	adds	r3, #1
   16be0:	4081      	lsls	r1, r0
   16be2:	4311      	orrs	r1, r2
   16be4:	6079      	str	r1, [r7, #4]
   16be6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   16bea:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   16bee:	3a08      	subs	r2, #8
   16bf0:	e9c5 1202 	strd	r1, r2, [r5, #8]
   16bf4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   16bf8:	60cd      	str	r5, [r1, #12]
   16bfa:	4630      	mov	r0, r6
   16bfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16c00:	f7fd bf50 	b.w	14aa4 <__malloc_unlock>
   16c04:	f8dc 3004 	ldr.w	r3, [ip, #4]
   16c08:	07db      	lsls	r3, r3, #31
   16c0a:	d40e      	bmi.n	16c2a <_free_r+0xc6>
   16c0c:	4401      	add	r1, r0
   16c0e:	f107 0c08 	add.w	ip, r7, #8
   16c12:	6893      	ldr	r3, [r2, #8]
   16c14:	4563      	cmp	r3, ip
   16c16:	f041 0001 	orr.w	r0, r1, #1
   16c1a:	d06c      	beq.n	16cf6 <_free_r+0x192>
   16c1c:	68d2      	ldr	r2, [r2, #12]
   16c1e:	60da      	str	r2, [r3, #12]
   16c20:	6093      	str	r3, [r2, #8]
   16c22:	6068      	str	r0, [r5, #4]
   16c24:	5069      	str	r1, [r5, r1]
   16c26:	e7d3      	b.n	16bd0 <_free_r+0x6c>
   16c28:	4770      	bx	lr
   16c2a:	f041 0301 	orr.w	r3, r1, #1
   16c2e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   16c32:	f844 3c04 	str.w	r3, [r4, #-4]
   16c36:	6011      	str	r1, [r2, #0]
   16c38:	d3cd      	bcc.n	16bd6 <_free_r+0x72>
   16c3a:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   16c3e:	ea4f 2351 	mov.w	r3, r1, lsr #9
   16c42:	d245      	bcs.n	16cd0 <_free_r+0x16c>
   16c44:	098b      	lsrs	r3, r1, #6
   16c46:	f103 0039 	add.w	r0, r3, #57	; 0x39
   16c4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
   16c4e:	00c3      	lsls	r3, r0, #3
   16c50:	18f8      	adds	r0, r7, r3
   16c52:	58fb      	ldr	r3, [r7, r3]
   16c54:	3808      	subs	r0, #8
   16c56:	4298      	cmp	r0, r3
   16c58:	d054      	beq.n	16d04 <_free_r+0x1a0>
   16c5a:	685a      	ldr	r2, [r3, #4]
   16c5c:	f022 0203 	bic.w	r2, r2, #3
   16c60:	428a      	cmp	r2, r1
   16c62:	d902      	bls.n	16c6a <_free_r+0x106>
   16c64:	689b      	ldr	r3, [r3, #8]
   16c66:	4298      	cmp	r0, r3
   16c68:	d1f7      	bne.n	16c5a <_free_r+0xf6>
   16c6a:	68d8      	ldr	r0, [r3, #12]
   16c6c:	e9c5 3002 	strd	r3, r0, [r5, #8]
   16c70:	6085      	str	r5, [r0, #8]
   16c72:	60dd      	str	r5, [r3, #12]
   16c74:	4630      	mov	r0, r6
   16c76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16c7a:	f7fd bf13 	b.w	14aa4 <__malloc_unlock>
   16c7e:	2b00      	cmp	r3, #0
   16c80:	d161      	bne.n	16d46 <_free_r+0x1e2>
   16c82:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
   16c86:	4401      	add	r1, r0
   16c88:	60d3      	str	r3, [r2, #12]
   16c8a:	609a      	str	r2, [r3, #8]
   16c8c:	f041 0301 	orr.w	r3, r1, #1
   16c90:	606b      	str	r3, [r5, #4]
   16c92:	4630      	mov	r0, r6
   16c94:	5069      	str	r1, [r5, r1]
   16c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   16c9a:	f7fd bf03 	b.w	14aa4 <__malloc_unlock>
   16c9e:	07da      	lsls	r2, r3, #31
   16ca0:	4401      	add	r1, r0
   16ca2:	d407      	bmi.n	16cb4 <_free_r+0x150>
   16ca4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   16ca8:	1aed      	subs	r5, r5, r3
   16caa:	4419      	add	r1, r3
   16cac:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   16cb0:	60d3      	str	r3, [r2, #12]
   16cb2:	609a      	str	r2, [r3, #8]
   16cb4:	f041 0301 	orr.w	r3, r1, #1
   16cb8:	606b      	str	r3, [r5, #4]
   16cba:	4b26      	ldr	r3, [pc, #152]	; (16d54 <_free_r+0x1f0>)
   16cbc:	60bd      	str	r5, [r7, #8]
   16cbe:	681b      	ldr	r3, [r3, #0]
   16cc0:	428b      	cmp	r3, r1
   16cc2:	d89a      	bhi.n	16bfa <_free_r+0x96>
   16cc4:	4b24      	ldr	r3, [pc, #144]	; (16d58 <_free_r+0x1f4>)
   16cc6:	4630      	mov	r0, r6
   16cc8:	6819      	ldr	r1, [r3, #0]
   16cca:	f7ff fefb 	bl	16ac4 <_malloc_trim_r>
   16cce:	e794      	b.n	16bfa <_free_r+0x96>
   16cd0:	2b14      	cmp	r3, #20
   16cd2:	d90a      	bls.n	16cea <_free_r+0x186>
   16cd4:	2b54      	cmp	r3, #84	; 0x54
   16cd6:	d81d      	bhi.n	16d14 <_free_r+0x1b0>
   16cd8:	0b0b      	lsrs	r3, r1, #12
   16cda:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   16cde:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   16ce2:	00c3      	lsls	r3, r0, #3
   16ce4:	e7b4      	b.n	16c50 <_free_r+0xec>
   16ce6:	4401      	add	r1, r0
   16ce8:	e793      	b.n	16c12 <_free_r+0xae>
   16cea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   16cee:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   16cf2:	00c3      	lsls	r3, r0, #3
   16cf4:	e7ac      	b.n	16c50 <_free_r+0xec>
   16cf6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   16cfa:	e9c5 cc02 	strd	ip, ip, [r5, #8]
   16cfe:	6068      	str	r0, [r5, #4]
   16d00:	5069      	str	r1, [r5, r1]
   16d02:	e77a      	b.n	16bfa <_free_r+0x96>
   16d04:	6879      	ldr	r1, [r7, #4]
   16d06:	1092      	asrs	r2, r2, #2
   16d08:	2401      	movs	r4, #1
   16d0a:	fa04 f202 	lsl.w	r2, r4, r2
   16d0e:	430a      	orrs	r2, r1
   16d10:	607a      	str	r2, [r7, #4]
   16d12:	e7ab      	b.n	16c6c <_free_r+0x108>
   16d14:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   16d18:	d806      	bhi.n	16d28 <_free_r+0x1c4>
   16d1a:	0bcb      	lsrs	r3, r1, #15
   16d1c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   16d20:	f103 0277 	add.w	r2, r3, #119	; 0x77
   16d24:	00c3      	lsls	r3, r0, #3
   16d26:	e793      	b.n	16c50 <_free_r+0xec>
   16d28:	f240 5254 	movw	r2, #1364	; 0x554
   16d2c:	4293      	cmp	r3, r2
   16d2e:	d806      	bhi.n	16d3e <_free_r+0x1da>
   16d30:	0c8b      	lsrs	r3, r1, #18
   16d32:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   16d36:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   16d3a:	00c3      	lsls	r3, r0, #3
   16d3c:	e788      	b.n	16c50 <_free_r+0xec>
   16d3e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   16d42:	227e      	movs	r2, #126	; 0x7e
   16d44:	e784      	b.n	16c50 <_free_r+0xec>
   16d46:	f041 0301 	orr.w	r3, r1, #1
   16d4a:	606b      	str	r3, [r5, #4]
   16d4c:	6011      	str	r1, [r2, #0]
   16d4e:	e754      	b.n	16bfa <_free_r+0x96>
   16d50:	20000950 	.word	0x20000950
   16d54:	20000d5c 	.word	0x20000d5c
   16d58:	20009284 	.word	0x20009284

00016d5c <_fwalk_reent>:
   16d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16d60:	4607      	mov	r7, r0
   16d62:	4688      	mov	r8, r1
   16d64:	f500 76a6 	add.w	r6, r0, #332	; 0x14c
   16d68:	f04f 0900 	mov.w	r9, #0
   16d6c:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   16d70:	3d01      	subs	r5, #1
   16d72:	d411      	bmi.n	16d98 <_fwalk_reent+0x3c>
   16d74:	89a3      	ldrh	r3, [r4, #12]
   16d76:	2b01      	cmp	r3, #1
   16d78:	f105 35ff 	add.w	r5, r5, #4294967295
   16d7c:	d908      	bls.n	16d90 <_fwalk_reent+0x34>
   16d7e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   16d82:	3301      	adds	r3, #1
   16d84:	4621      	mov	r1, r4
   16d86:	d003      	beq.n	16d90 <_fwalk_reent+0x34>
   16d88:	4638      	mov	r0, r7
   16d8a:	47c0      	blx	r8
   16d8c:	ea49 0900 	orr.w	r9, r9, r0
   16d90:	1c6b      	adds	r3, r5, #1
   16d92:	f104 0468 	add.w	r4, r4, #104	; 0x68
   16d96:	d1ed      	bne.n	16d74 <_fwalk_reent+0x18>
   16d98:	6836      	ldr	r6, [r6, #0]
   16d9a:	2e00      	cmp	r6, #0
   16d9c:	d1e6      	bne.n	16d6c <_fwalk_reent+0x10>
   16d9e:	4648      	mov	r0, r9
   16da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00016da4 <_localeconv_r>:
   16da4:	4800      	ldr	r0, [pc, #0]	; (16da8 <_localeconv_r+0x4>)
   16da6:	4770      	bx	lr
   16da8:	20000e54 	.word	0x20000e54

00016dac <__smakebuf_r>:
   16dac:	b5f0      	push	{r4, r5, r6, r7, lr}
   16dae:	898b      	ldrh	r3, [r1, #12]
   16db0:	460c      	mov	r4, r1
   16db2:	0799      	lsls	r1, r3, #30
   16db4:	b097      	sub	sp, #92	; 0x5c
   16db6:	d507      	bpl.n	16dc8 <__smakebuf_r+0x1c>
   16db8:	f104 0343 	add.w	r3, r4, #67	; 0x43
   16dbc:	2201      	movs	r2, #1
   16dbe:	e9c4 3204 	strd	r3, r2, [r4, #16]
   16dc2:	6023      	str	r3, [r4, #0]
   16dc4:	b017      	add	sp, #92	; 0x5c
   16dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16dc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16dcc:	2900      	cmp	r1, #0
   16dce:	4605      	mov	r5, r0
   16dd0:	db2d      	blt.n	16e2e <__smakebuf_r+0x82>
   16dd2:	466a      	mov	r2, sp
   16dd4:	f001 fc18 	bl	18608 <_fstat_r>
   16dd8:	2800      	cmp	r0, #0
   16dda:	db27      	blt.n	16e2c <__smakebuf_r+0x80>
   16ddc:	9e01      	ldr	r6, [sp, #4]
   16dde:	f406 4670 	and.w	r6, r6, #61440	; 0xf000
   16de2:	f44f 6780 	mov.w	r7, #1024	; 0x400
   16de6:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   16dea:	fab6 f686 	clz	r6, r6
   16dee:	4639      	mov	r1, r7
   16df0:	4628      	mov	r0, r5
   16df2:	0976      	lsrs	r6, r6, #5
   16df4:	f7fd fb0c 	bl	14410 <_malloc_r>
   16df8:	b330      	cbz	r0, 16e48 <__smakebuf_r+0x9c>
   16dfa:	89a3      	ldrh	r3, [r4, #12]
   16dfc:	4a1a      	ldr	r2, [pc, #104]	; (16e68 <__smakebuf_r+0xbc>)
   16dfe:	63ea      	str	r2, [r5, #60]	; 0x3c
   16e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16e04:	e9c4 0704 	strd	r0, r7, [r4, #16]
   16e08:	81a3      	strh	r3, [r4, #12]
   16e0a:	6020      	str	r0, [r4, #0]
   16e0c:	2e00      	cmp	r6, #0
   16e0e:	d0d9      	beq.n	16dc4 <__smakebuf_r+0x18>
   16e10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   16e14:	4628      	mov	r0, r5
   16e16:	f001 fd83 	bl	18920 <_isatty_r>
   16e1a:	2800      	cmp	r0, #0
   16e1c:	d0d2      	beq.n	16dc4 <__smakebuf_r+0x18>
   16e1e:	89a3      	ldrh	r3, [r4, #12]
   16e20:	f023 0303 	bic.w	r3, r3, #3
   16e24:	f043 0301 	orr.w	r3, r3, #1
   16e28:	81a3      	strh	r3, [r4, #12]
   16e2a:	e7cb      	b.n	16dc4 <__smakebuf_r+0x18>
   16e2c:	89a3      	ldrh	r3, [r4, #12]
   16e2e:	f013 0f80 	tst.w	r3, #128	; 0x80
   16e32:	bf14      	ite	ne
   16e34:	2740      	movne	r7, #64	; 0x40
   16e36:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   16e3a:	4639      	mov	r1, r7
   16e3c:	4628      	mov	r0, r5
   16e3e:	2600      	movs	r6, #0
   16e40:	f7fd fae6 	bl	14410 <_malloc_r>
   16e44:	2800      	cmp	r0, #0
   16e46:	d1d8      	bne.n	16dfa <__smakebuf_r+0x4e>
   16e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   16e4c:	059a      	lsls	r2, r3, #22
   16e4e:	d4b9      	bmi.n	16dc4 <__smakebuf_r+0x18>
   16e50:	f023 0303 	bic.w	r3, r3, #3
   16e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
   16e58:	f043 0302 	orr.w	r3, r3, #2
   16e5c:	2101      	movs	r1, #1
   16e5e:	e9c4 2104 	strd	r2, r1, [r4, #16]
   16e62:	81a3      	strh	r3, [r4, #12]
   16e64:	6022      	str	r2, [r4, #0]
   16e66:	e7ad      	b.n	16dc4 <__smakebuf_r+0x18>
   16e68:	000169ad 	.word	0x000169ad

00016e6c <_Balloc>:
   16e6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   16e6e:	b570      	push	{r4, r5, r6, lr}
   16e70:	4605      	mov	r5, r0
   16e72:	460c      	mov	r4, r1
   16e74:	b14b      	cbz	r3, 16e8a <_Balloc+0x1e>
   16e76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   16e7a:	b180      	cbz	r0, 16e9e <_Balloc+0x32>
   16e7c:	6802      	ldr	r2, [r0, #0]
   16e7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   16e82:	2300      	movs	r3, #0
   16e84:	e9c0 3303 	strd	r3, r3, [r0, #12]
   16e88:	bd70      	pop	{r4, r5, r6, pc}
   16e8a:	2221      	movs	r2, #33	; 0x21
   16e8c:	2104      	movs	r1, #4
   16e8e:	f001 fb65 	bl	1855c <_calloc_r>
   16e92:	4603      	mov	r3, r0
   16e94:	64e8      	str	r0, [r5, #76]	; 0x4c
   16e96:	2800      	cmp	r0, #0
   16e98:	d1ed      	bne.n	16e76 <_Balloc+0xa>
   16e9a:	2000      	movs	r0, #0
   16e9c:	bd70      	pop	{r4, r5, r6, pc}
   16e9e:	2101      	movs	r1, #1
   16ea0:	fa01 f604 	lsl.w	r6, r1, r4
   16ea4:	1d72      	adds	r2, r6, #5
   16ea6:	0092      	lsls	r2, r2, #2
   16ea8:	4628      	mov	r0, r5
   16eaa:	f001 fb57 	bl	1855c <_calloc_r>
   16eae:	2800      	cmp	r0, #0
   16eb0:	d0f3      	beq.n	16e9a <_Balloc+0x2e>
   16eb2:	e9c0 4601 	strd	r4, r6, [r0, #4]
   16eb6:	e7e4      	b.n	16e82 <_Balloc+0x16>

00016eb8 <_Bfree>:
   16eb8:	b131      	cbz	r1, 16ec8 <_Bfree+0x10>
   16eba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   16ebc:	684a      	ldr	r2, [r1, #4]
   16ebe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   16ec2:	6008      	str	r0, [r1, #0]
   16ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   16ec8:	4770      	bx	lr
   16eca:	bf00      	nop

00016ecc <__multadd>:
   16ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ed0:	690d      	ldr	r5, [r1, #16]
   16ed2:	4607      	mov	r7, r0
   16ed4:	460e      	mov	r6, r1
   16ed6:	461c      	mov	r4, r3
   16ed8:	f101 0e14 	add.w	lr, r1, #20
   16edc:	2000      	movs	r0, #0
   16ede:	f8de 1000 	ldr.w	r1, [lr]
   16ee2:	b28b      	uxth	r3, r1
   16ee4:	fb02 4303 	mla	r3, r2, r3, r4
   16ee8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   16eec:	0c09      	lsrs	r1, r1, #16
   16eee:	fb02 cc01 	mla	ip, r2, r1, ip
   16ef2:	3001      	adds	r0, #1
   16ef4:	b29b      	uxth	r3, r3
   16ef6:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   16efa:	4285      	cmp	r5, r0
   16efc:	f84e 3b04 	str.w	r3, [lr], #4
   16f00:	ea4f 441c 	mov.w	r4, ip, lsr #16
   16f04:	dceb      	bgt.n	16ede <__multadd+0x12>
   16f06:	b13c      	cbz	r4, 16f18 <__multadd+0x4c>
   16f08:	68b3      	ldr	r3, [r6, #8]
   16f0a:	42ab      	cmp	r3, r5
   16f0c:	dd07      	ble.n	16f1e <__multadd+0x52>
   16f0e:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   16f12:	3501      	adds	r5, #1
   16f14:	615c      	str	r4, [r3, #20]
   16f16:	6135      	str	r5, [r6, #16]
   16f18:	4630      	mov	r0, r6
   16f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f1e:	6871      	ldr	r1, [r6, #4]
   16f20:	4638      	mov	r0, r7
   16f22:	3101      	adds	r1, #1
   16f24:	f7ff ffa2 	bl	16e6c <_Balloc>
   16f28:	4680      	mov	r8, r0
   16f2a:	b1a8      	cbz	r0, 16f58 <__multadd+0x8c>
   16f2c:	6932      	ldr	r2, [r6, #16]
   16f2e:	3202      	adds	r2, #2
   16f30:	f106 010c 	add.w	r1, r6, #12
   16f34:	0092      	lsls	r2, r2, #2
   16f36:	300c      	adds	r0, #12
   16f38:	f7ea f9e0 	bl	12fc <memcpy>
   16f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16f3e:	6872      	ldr	r2, [r6, #4]
   16f40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   16f44:	6031      	str	r1, [r6, #0]
   16f46:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   16f4a:	4646      	mov	r6, r8
   16f4c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   16f50:	3501      	adds	r5, #1
   16f52:	615c      	str	r4, [r3, #20]
   16f54:	6135      	str	r5, [r6, #16]
   16f56:	e7df      	b.n	16f18 <__multadd+0x4c>
   16f58:	4b02      	ldr	r3, [pc, #8]	; (16f64 <__multadd+0x98>)
   16f5a:	4803      	ldr	r0, [pc, #12]	; (16f68 <__multadd+0x9c>)
   16f5c:	4642      	mov	r2, r8
   16f5e:	21b5      	movs	r1, #181	; 0xb5
   16f60:	f001 fadc 	bl	1851c <__assert_func>
   16f64:	0001fb08 	.word	0x0001fb08
   16f68:	0001fb8c 	.word	0x0001fb8c

00016f6c <__hi0bits>:
   16f6c:	0c02      	lsrs	r2, r0, #16
   16f6e:	0412      	lsls	r2, r2, #16
   16f70:	4603      	mov	r3, r0
   16f72:	b9ca      	cbnz	r2, 16fa8 <__hi0bits+0x3c>
   16f74:	0403      	lsls	r3, r0, #16
   16f76:	2010      	movs	r0, #16
   16f78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   16f7c:	bf04      	itt	eq
   16f7e:	021b      	lsleq	r3, r3, #8
   16f80:	3008      	addeq	r0, #8
   16f82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   16f86:	bf04      	itt	eq
   16f88:	011b      	lsleq	r3, r3, #4
   16f8a:	3004      	addeq	r0, #4
   16f8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   16f90:	bf04      	itt	eq
   16f92:	009b      	lsleq	r3, r3, #2
   16f94:	3002      	addeq	r0, #2
   16f96:	2b00      	cmp	r3, #0
   16f98:	db05      	blt.n	16fa6 <__hi0bits+0x3a>
   16f9a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   16f9e:	f100 0001 	add.w	r0, r0, #1
   16fa2:	bf08      	it	eq
   16fa4:	2020      	moveq	r0, #32
   16fa6:	4770      	bx	lr
   16fa8:	2000      	movs	r0, #0
   16faa:	e7e5      	b.n	16f78 <__hi0bits+0xc>

00016fac <__lo0bits>:
   16fac:	6803      	ldr	r3, [r0, #0]
   16fae:	4602      	mov	r2, r0
   16fb0:	f013 0007 	ands.w	r0, r3, #7
   16fb4:	d007      	beq.n	16fc6 <__lo0bits+0x1a>
   16fb6:	07d9      	lsls	r1, r3, #31
   16fb8:	d41d      	bmi.n	16ff6 <__lo0bits+0x4a>
   16fba:	0798      	lsls	r0, r3, #30
   16fbc:	d51f      	bpl.n	16ffe <__lo0bits+0x52>
   16fbe:	085b      	lsrs	r3, r3, #1
   16fc0:	6013      	str	r3, [r2, #0]
   16fc2:	2001      	movs	r0, #1
   16fc4:	4770      	bx	lr
   16fc6:	b299      	uxth	r1, r3
   16fc8:	b909      	cbnz	r1, 16fce <__lo0bits+0x22>
   16fca:	0c1b      	lsrs	r3, r3, #16
   16fcc:	2010      	movs	r0, #16
   16fce:	b2d9      	uxtb	r1, r3
   16fd0:	b909      	cbnz	r1, 16fd6 <__lo0bits+0x2a>
   16fd2:	3008      	adds	r0, #8
   16fd4:	0a1b      	lsrs	r3, r3, #8
   16fd6:	0719      	lsls	r1, r3, #28
   16fd8:	bf04      	itt	eq
   16fda:	091b      	lsreq	r3, r3, #4
   16fdc:	3004      	addeq	r0, #4
   16fde:	0799      	lsls	r1, r3, #30
   16fe0:	bf04      	itt	eq
   16fe2:	089b      	lsreq	r3, r3, #2
   16fe4:	3002      	addeq	r0, #2
   16fe6:	07d9      	lsls	r1, r3, #31
   16fe8:	d403      	bmi.n	16ff2 <__lo0bits+0x46>
   16fea:	085b      	lsrs	r3, r3, #1
   16fec:	f100 0001 	add.w	r0, r0, #1
   16ff0:	d003      	beq.n	16ffa <__lo0bits+0x4e>
   16ff2:	6013      	str	r3, [r2, #0]
   16ff4:	4770      	bx	lr
   16ff6:	2000      	movs	r0, #0
   16ff8:	4770      	bx	lr
   16ffa:	2020      	movs	r0, #32
   16ffc:	4770      	bx	lr
   16ffe:	089b      	lsrs	r3, r3, #2
   17000:	6013      	str	r3, [r2, #0]
   17002:	2002      	movs	r0, #2
   17004:	4770      	bx	lr
   17006:	bf00      	nop

00017008 <__i2b>:
   17008:	b538      	push	{r3, r4, r5, lr}
   1700a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1700c:	4604      	mov	r4, r0
   1700e:	460d      	mov	r5, r1
   17010:	b14b      	cbz	r3, 17026 <__i2b+0x1e>
   17012:	6858      	ldr	r0, [r3, #4]
   17014:	b1b0      	cbz	r0, 17044 <__i2b+0x3c>
   17016:	6802      	ldr	r2, [r0, #0]
   17018:	605a      	str	r2, [r3, #4]
   1701a:	2200      	movs	r2, #0
   1701c:	2301      	movs	r3, #1
   1701e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   17022:	60c2      	str	r2, [r0, #12]
   17024:	bd38      	pop	{r3, r4, r5, pc}
   17026:	2221      	movs	r2, #33	; 0x21
   17028:	2104      	movs	r1, #4
   1702a:	f001 fa97 	bl	1855c <_calloc_r>
   1702e:	4603      	mov	r3, r0
   17030:	64e0      	str	r0, [r4, #76]	; 0x4c
   17032:	2800      	cmp	r0, #0
   17034:	d1ed      	bne.n	17012 <__i2b+0xa>
   17036:	4b09      	ldr	r3, [pc, #36]	; (1705c <__i2b+0x54>)
   17038:	4809      	ldr	r0, [pc, #36]	; (17060 <__i2b+0x58>)
   1703a:	2200      	movs	r2, #0
   1703c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   17040:	f001 fa6c 	bl	1851c <__assert_func>
   17044:	221c      	movs	r2, #28
   17046:	2101      	movs	r1, #1
   17048:	4620      	mov	r0, r4
   1704a:	f001 fa87 	bl	1855c <_calloc_r>
   1704e:	2800      	cmp	r0, #0
   17050:	d0f1      	beq.n	17036 <__i2b+0x2e>
   17052:	2201      	movs	r2, #1
   17054:	2302      	movs	r3, #2
   17056:	e9c0 2301 	strd	r2, r3, [r0, #4]
   1705a:	e7de      	b.n	1701a <__i2b+0x12>
   1705c:	0001fb08 	.word	0x0001fb08
   17060:	0001fb8c 	.word	0x0001fb8c

00017064 <__multiply>:
   17064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17068:	690e      	ldr	r6, [r1, #16]
   1706a:	6915      	ldr	r5, [r2, #16]
   1706c:	42ae      	cmp	r6, r5
   1706e:	b085      	sub	sp, #20
   17070:	4688      	mov	r8, r1
   17072:	4614      	mov	r4, r2
   17074:	db05      	blt.n	17082 <__multiply+0x1e>
   17076:	462a      	mov	r2, r5
   17078:	4623      	mov	r3, r4
   1707a:	4635      	mov	r5, r6
   1707c:	460c      	mov	r4, r1
   1707e:	4616      	mov	r6, r2
   17080:	4698      	mov	r8, r3
   17082:	68a3      	ldr	r3, [r4, #8]
   17084:	6861      	ldr	r1, [r4, #4]
   17086:	19af      	adds	r7, r5, r6
   17088:	42bb      	cmp	r3, r7
   1708a:	bfb8      	it	lt
   1708c:	3101      	addlt	r1, #1
   1708e:	f7ff feed 	bl	16e6c <_Balloc>
   17092:	9001      	str	r0, [sp, #4]
   17094:	2800      	cmp	r0, #0
   17096:	f000 8087 	beq.w	171a8 <__multiply+0x144>
   1709a:	9b01      	ldr	r3, [sp, #4]
   1709c:	f103 0914 	add.w	r9, r3, #20
   170a0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   170a4:	45d1      	cmp	r9, sl
   170a6:	d205      	bcs.n	170b4 <__multiply+0x50>
   170a8:	464b      	mov	r3, r9
   170aa:	2200      	movs	r2, #0
   170ac:	f843 2b04 	str.w	r2, [r3], #4
   170b0:	459a      	cmp	sl, r3
   170b2:	d8fb      	bhi.n	170ac <__multiply+0x48>
   170b4:	f108 0814 	add.w	r8, r8, #20
   170b8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   170bc:	f104 0314 	add.w	r3, r4, #20
   170c0:	45d8      	cmp	r8, fp
   170c2:	461a      	mov	r2, r3
   170c4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   170c8:	d25f      	bcs.n	1718a <__multiply+0x126>
   170ca:	1b2b      	subs	r3, r5, r4
   170cc:	3b15      	subs	r3, #21
   170ce:	f023 0303 	bic.w	r3, r3, #3
   170d2:	3304      	adds	r3, #4
   170d4:	3415      	adds	r4, #21
   170d6:	42a5      	cmp	r5, r4
   170d8:	bf38      	it	cc
   170da:	2304      	movcc	r3, #4
   170dc:	e9cd a702 	strd	sl, r7, [sp, #8]
   170e0:	46ac      	mov	ip, r5
   170e2:	461f      	mov	r7, r3
   170e4:	4692      	mov	sl, r2
   170e6:	e005      	b.n	170f4 <__multiply+0x90>
   170e8:	0c00      	lsrs	r0, r0, #16
   170ea:	d129      	bne.n	17140 <__multiply+0xdc>
   170ec:	45c3      	cmp	fp, r8
   170ee:	f109 0904 	add.w	r9, r9, #4
   170f2:	d948      	bls.n	17186 <__multiply+0x122>
   170f4:	f858 0b04 	ldr.w	r0, [r8], #4
   170f8:	b285      	uxth	r5, r0
   170fa:	2d00      	cmp	r5, #0
   170fc:	d0f4      	beq.n	170e8 <__multiply+0x84>
   170fe:	4656      	mov	r6, sl
   17100:	464c      	mov	r4, r9
   17102:	2300      	movs	r3, #0
   17104:	f856 0b04 	ldr.w	r0, [r6], #4
   17108:	6821      	ldr	r1, [r4, #0]
   1710a:	b282      	uxth	r2, r0
   1710c:	fa1f fe81 	uxth.w	lr, r1
   17110:	fb05 ee02 	mla	lr, r5, r2, lr
   17114:	0c00      	lsrs	r0, r0, #16
   17116:	0c0a      	lsrs	r2, r1, #16
   17118:	4473      	add	r3, lr
   1711a:	fb05 2200 	mla	r2, r5, r0, r2
   1711e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   17122:	b29b      	uxth	r3, r3
   17124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   17128:	45b4      	cmp	ip, r6
   1712a:	f844 3b04 	str.w	r3, [r4], #4
   1712e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   17132:	d8e7      	bhi.n	17104 <__multiply+0xa0>
   17134:	f849 3007 	str.w	r3, [r9, r7]
   17138:	f858 0c04 	ldr.w	r0, [r8, #-4]
   1713c:	0c00      	lsrs	r0, r0, #16
   1713e:	d0d5      	beq.n	170ec <__multiply+0x88>
   17140:	f8d9 3000 	ldr.w	r3, [r9]
   17144:	4654      	mov	r4, sl
   17146:	4619      	mov	r1, r3
   17148:	464d      	mov	r5, r9
   1714a:	2200      	movs	r2, #0
   1714c:	8826      	ldrh	r6, [r4, #0]
   1714e:	0c09      	lsrs	r1, r1, #16
   17150:	fb00 1106 	mla	r1, r0, r6, r1
   17154:	440a      	add	r2, r1
   17156:	b29b      	uxth	r3, r3
   17158:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   1715c:	f845 3b04 	str.w	r3, [r5], #4
   17160:	f854 6b04 	ldr.w	r6, [r4], #4
   17164:	6829      	ldr	r1, [r5, #0]
   17166:	0c36      	lsrs	r6, r6, #16
   17168:	b28b      	uxth	r3, r1
   1716a:	fb00 3306 	mla	r3, r0, r6, r3
   1716e:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   17172:	45a4      	cmp	ip, r4
   17174:	ea4f 4213 	mov.w	r2, r3, lsr #16
   17178:	d8e8      	bhi.n	1714c <__multiply+0xe8>
   1717a:	45c3      	cmp	fp, r8
   1717c:	f849 3007 	str.w	r3, [r9, r7]
   17180:	f109 0904 	add.w	r9, r9, #4
   17184:	d8b6      	bhi.n	170f4 <__multiply+0x90>
   17186:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   1718a:	2f00      	cmp	r7, #0
   1718c:	dc02      	bgt.n	17194 <__multiply+0x130>
   1718e:	e005      	b.n	1719c <__multiply+0x138>
   17190:	3f01      	subs	r7, #1
   17192:	d003      	beq.n	1719c <__multiply+0x138>
   17194:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   17198:	2b00      	cmp	r3, #0
   1719a:	d0f9      	beq.n	17190 <__multiply+0x12c>
   1719c:	9b01      	ldr	r3, [sp, #4]
   1719e:	4618      	mov	r0, r3
   171a0:	611f      	str	r7, [r3, #16]
   171a2:	b005      	add	sp, #20
   171a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a8:	4b03      	ldr	r3, [pc, #12]	; (171b8 <__multiply+0x154>)
   171aa:	4804      	ldr	r0, [pc, #16]	; (171bc <__multiply+0x158>)
   171ac:	9a01      	ldr	r2, [sp, #4]
   171ae:	f240 115d 	movw	r1, #349	; 0x15d
   171b2:	f001 f9b3 	bl	1851c <__assert_func>
   171b6:	bf00      	nop
   171b8:	0001fb08 	.word	0x0001fb08
   171bc:	0001fb8c 	.word	0x0001fb8c

000171c0 <__pow5mult>:
   171c0:	f012 0303 	ands.w	r3, r2, #3
   171c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171c8:	4614      	mov	r4, r2
   171ca:	4606      	mov	r6, r0
   171cc:	d132      	bne.n	17234 <__pow5mult+0x74>
   171ce:	460d      	mov	r5, r1
   171d0:	10a4      	asrs	r4, r4, #2
   171d2:	d020      	beq.n	17216 <__pow5mult+0x56>
   171d4:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
   171d8:	f1b8 0f00 	cmp.w	r8, #0
   171dc:	d033      	beq.n	17246 <__pow5mult+0x86>
   171de:	07e3      	lsls	r3, r4, #31
   171e0:	f04f 0700 	mov.w	r7, #0
   171e4:	d407      	bmi.n	171f6 <__pow5mult+0x36>
   171e6:	1064      	asrs	r4, r4, #1
   171e8:	d015      	beq.n	17216 <__pow5mult+0x56>
   171ea:	f8d8 0000 	ldr.w	r0, [r8]
   171ee:	b1a8      	cbz	r0, 1721c <__pow5mult+0x5c>
   171f0:	4680      	mov	r8, r0
   171f2:	07e3      	lsls	r3, r4, #31
   171f4:	d5f7      	bpl.n	171e6 <__pow5mult+0x26>
   171f6:	4642      	mov	r2, r8
   171f8:	4629      	mov	r1, r5
   171fa:	4630      	mov	r0, r6
   171fc:	f7ff ff32 	bl	17064 <__multiply>
   17200:	b1b5      	cbz	r5, 17230 <__pow5mult+0x70>
   17202:	6869      	ldr	r1, [r5, #4]
   17204:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   17206:	1064      	asrs	r4, r4, #1
   17208:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   1720c:	602a      	str	r2, [r5, #0]
   1720e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   17212:	4605      	mov	r5, r0
   17214:	d1e9      	bne.n	171ea <__pow5mult+0x2a>
   17216:	4628      	mov	r0, r5
   17218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1721c:	4642      	mov	r2, r8
   1721e:	4641      	mov	r1, r8
   17220:	4630      	mov	r0, r6
   17222:	f7ff ff1f 	bl	17064 <__multiply>
   17226:	f8c8 0000 	str.w	r0, [r8]
   1722a:	6007      	str	r7, [r0, #0]
   1722c:	4680      	mov	r8, r0
   1722e:	e7e0      	b.n	171f2 <__pow5mult+0x32>
   17230:	4605      	mov	r5, r0
   17232:	e7d8      	b.n	171e6 <__pow5mult+0x26>
   17234:	3b01      	subs	r3, #1
   17236:	4a0f      	ldr	r2, [pc, #60]	; (17274 <__pow5mult+0xb4>)
   17238:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1723c:	2300      	movs	r3, #0
   1723e:	f7ff fe45 	bl	16ecc <__multadd>
   17242:	4605      	mov	r5, r0
   17244:	e7c4      	b.n	171d0 <__pow5mult+0x10>
   17246:	2101      	movs	r1, #1
   17248:	4630      	mov	r0, r6
   1724a:	f7ff fe0f 	bl	16e6c <_Balloc>
   1724e:	4680      	mov	r8, r0
   17250:	b140      	cbz	r0, 17264 <__pow5mult+0xa4>
   17252:	2301      	movs	r3, #1
   17254:	f240 2271 	movw	r2, #625	; 0x271
   17258:	e9c0 3204 	strd	r3, r2, [r0, #16]
   1725c:	2300      	movs	r3, #0
   1725e:	64b0      	str	r0, [r6, #72]	; 0x48
   17260:	6003      	str	r3, [r0, #0]
   17262:	e7bc      	b.n	171de <__pow5mult+0x1e>
   17264:	4b04      	ldr	r3, [pc, #16]	; (17278 <__pow5mult+0xb8>)
   17266:	4805      	ldr	r0, [pc, #20]	; (1727c <__pow5mult+0xbc>)
   17268:	4642      	mov	r2, r8
   1726a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   1726e:	f001 f955 	bl	1851c <__assert_func>
   17272:	bf00      	nop
   17274:	0001fbfc 	.word	0x0001fbfc
   17278:	0001fb08 	.word	0x0001fb08
   1727c:	0001fb8c 	.word	0x0001fb8c

00017280 <__lshift>:
   17280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17284:	460c      	mov	r4, r1
   17286:	4690      	mov	r8, r2
   17288:	6926      	ldr	r6, [r4, #16]
   1728a:	68a3      	ldr	r3, [r4, #8]
   1728c:	6849      	ldr	r1, [r1, #4]
   1728e:	eb06 1662 	add.w	r6, r6, r2, asr #5
   17292:	1c75      	adds	r5, r6, #1
   17294:	429d      	cmp	r5, r3
   17296:	4607      	mov	r7, r0
   17298:	ea4f 1962 	mov.w	r9, r2, asr #5
   1729c:	dd04      	ble.n	172a8 <__lshift+0x28>
   1729e:	005b      	lsls	r3, r3, #1
   172a0:	429d      	cmp	r5, r3
   172a2:	f101 0101 	add.w	r1, r1, #1
   172a6:	dcfa      	bgt.n	1729e <__lshift+0x1e>
   172a8:	4638      	mov	r0, r7
   172aa:	f7ff fddf 	bl	16e6c <_Balloc>
   172ae:	4684      	mov	ip, r0
   172b0:	2800      	cmp	r0, #0
   172b2:	d051      	beq.n	17358 <__lshift+0xd8>
   172b4:	f1b9 0f00 	cmp.w	r9, #0
   172b8:	f100 0014 	add.w	r0, r0, #20
   172bc:	dd0e      	ble.n	172dc <__lshift+0x5c>
   172be:	f109 0205 	add.w	r2, r9, #5
   172c2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   172c6:	4603      	mov	r3, r0
   172c8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
   172cc:	2100      	movs	r1, #0
   172ce:	f843 1b04 	str.w	r1, [r3], #4
   172d2:	4293      	cmp	r3, r2
   172d4:	d1fb      	bne.n	172ce <__lshift+0x4e>
   172d6:	f1ae 0314 	sub.w	r3, lr, #20
   172da:	4418      	add	r0, r3
   172dc:	6921      	ldr	r1, [r4, #16]
   172de:	f104 0314 	add.w	r3, r4, #20
   172e2:	f018 081f 	ands.w	r8, r8, #31
   172e6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   172ea:	d02d      	beq.n	17348 <__lshift+0xc8>
   172ec:	f1c8 0920 	rsb	r9, r8, #32
   172f0:	4686      	mov	lr, r0
   172f2:	f04f 0a00 	mov.w	sl, #0
   172f6:	681a      	ldr	r2, [r3, #0]
   172f8:	fa02 f208 	lsl.w	r2, r2, r8
   172fc:	ea42 020a 	orr.w	r2, r2, sl
   17300:	f84e 2b04 	str.w	r2, [lr], #4
   17304:	f853 2b04 	ldr.w	r2, [r3], #4
   17308:	4299      	cmp	r1, r3
   1730a:	fa22 fa09 	lsr.w	sl, r2, r9
   1730e:	d8f2      	bhi.n	172f6 <__lshift+0x76>
   17310:	1b0b      	subs	r3, r1, r4
   17312:	3b15      	subs	r3, #21
   17314:	f023 0303 	bic.w	r3, r3, #3
   17318:	3304      	adds	r3, #4
   1731a:	f104 0215 	add.w	r2, r4, #21
   1731e:	4291      	cmp	r1, r2
   17320:	bf38      	it	cc
   17322:	2304      	movcc	r3, #4
   17324:	f1ba 0f00 	cmp.w	sl, #0
   17328:	bf18      	it	ne
   1732a:	462e      	movne	r6, r5
   1732c:	f840 a003 	str.w	sl, [r0, r3]
   17330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17332:	6862      	ldr	r2, [r4, #4]
   17334:	f8cc 6010 	str.w	r6, [ip, #16]
   17338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1733c:	6021      	str	r1, [r4, #0]
   1733e:	4660      	mov	r0, ip
   17340:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   17344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17348:	3804      	subs	r0, #4
   1734a:	f853 2b04 	ldr.w	r2, [r3], #4
   1734e:	f840 2f04 	str.w	r2, [r0, #4]!
   17352:	4299      	cmp	r1, r3
   17354:	d8f9      	bhi.n	1734a <__lshift+0xca>
   17356:	e7eb      	b.n	17330 <__lshift+0xb0>
   17358:	4b03      	ldr	r3, [pc, #12]	; (17368 <__lshift+0xe8>)
   1735a:	4804      	ldr	r0, [pc, #16]	; (1736c <__lshift+0xec>)
   1735c:	4662      	mov	r2, ip
   1735e:	f240 11d9 	movw	r1, #473	; 0x1d9
   17362:	f001 f8db 	bl	1851c <__assert_func>
   17366:	bf00      	nop
   17368:	0001fb08 	.word	0x0001fb08
   1736c:	0001fb8c 	.word	0x0001fb8c

00017370 <__mcmp>:
   17370:	690b      	ldr	r3, [r1, #16]
   17372:	4684      	mov	ip, r0
   17374:	6900      	ldr	r0, [r0, #16]
   17376:	1ac0      	subs	r0, r0, r3
   17378:	d115      	bne.n	173a6 <__mcmp+0x36>
   1737a:	f10c 0c14 	add.w	ip, ip, #20
   1737e:	3114      	adds	r1, #20
   17380:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   17384:	b410      	push	{r4}
   17386:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1738a:	e001      	b.n	17390 <__mcmp+0x20>
   1738c:	4594      	cmp	ip, r2
   1738e:	d208      	bcs.n	173a2 <__mcmp+0x32>
   17390:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   17394:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   17398:	428c      	cmp	r4, r1
   1739a:	d0f7      	beq.n	1738c <__mcmp+0x1c>
   1739c:	d204      	bcs.n	173a8 <__mcmp+0x38>
   1739e:	f04f 30ff 	mov.w	r0, #4294967295
   173a2:	bc10      	pop	{r4}
   173a4:	4770      	bx	lr
   173a6:	4770      	bx	lr
   173a8:	2001      	movs	r0, #1
   173aa:	bc10      	pop	{r4}
   173ac:	4770      	bx	lr
   173ae:	bf00      	nop

000173b0 <__mdiff>:
   173b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b4:	690f      	ldr	r7, [r1, #16]
   173b6:	6913      	ldr	r3, [r2, #16]
   173b8:	1aff      	subs	r7, r7, r3
   173ba:	2f00      	cmp	r7, #0
   173bc:	460e      	mov	r6, r1
   173be:	4690      	mov	r8, r2
   173c0:	d17a      	bne.n	174b8 <__mdiff+0x108>
   173c2:	f101 0514 	add.w	r5, r1, #20
   173c6:	3214      	adds	r2, #20
   173c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   173cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   173d0:	e001      	b.n	173d6 <__mdiff+0x26>
   173d2:	429d      	cmp	r5, r3
   173d4:	d273      	bcs.n	174be <__mdiff+0x10e>
   173d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   173da:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   173de:	42a1      	cmp	r1, r4
   173e0:	d0f7      	beq.n	173d2 <__mdiff+0x22>
   173e2:	d364      	bcc.n	174ae <__mdiff+0xfe>
   173e4:	6871      	ldr	r1, [r6, #4]
   173e6:	f7ff fd41 	bl	16e6c <_Balloc>
   173ea:	4681      	mov	r9, r0
   173ec:	2800      	cmp	r0, #0
   173ee:	d072      	beq.n	174d6 <__mdiff+0x126>
   173f0:	6935      	ldr	r5, [r6, #16]
   173f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
   173f6:	60c7      	str	r7, [r0, #12]
   173f8:	f108 0e14 	add.w	lr, r8, #20
   173fc:	f106 0014 	add.w	r0, r6, #20
   17400:	f109 0a14 	add.w	sl, r9, #20
   17404:	f106 0c10 	add.w	ip, r6, #16
   17408:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   1740c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   17410:	4656      	mov	r6, sl
   17412:	2100      	movs	r1, #0
   17414:	f85e 4b04 	ldr.w	r4, [lr], #4
   17418:	f85c bf04 	ldr.w	fp, [ip, #4]!
   1741c:	b2a3      	uxth	r3, r4
   1741e:	fa11 f18b 	uxtah	r1, r1, fp
   17422:	1acb      	subs	r3, r1, r3
   17424:	0c21      	lsrs	r1, r4, #16
   17426:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   1742a:	eb01 4123 	add.w	r1, r1, r3, asr #16
   1742e:	b29b      	uxth	r3, r3
   17430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   17434:	4572      	cmp	r2, lr
   17436:	f846 3b04 	str.w	r3, [r6], #4
   1743a:	ea4f 4121 	mov.w	r1, r1, asr #16
   1743e:	d8e9      	bhi.n	17414 <__mdiff+0x64>
   17440:	eba2 0408 	sub.w	r4, r2, r8
   17444:	3c15      	subs	r4, #21
   17446:	f108 0815 	add.w	r8, r8, #21
   1744a:	4542      	cmp	r2, r8
   1744c:	f024 0603 	bic.w	r6, r4, #3
   17450:	f106 0604 	add.w	r6, r6, #4
   17454:	bf38      	it	cc
   17456:	2604      	movcc	r6, #4
   17458:	4430      	add	r0, r6
   1745a:	f024 0203 	bic.w	r2, r4, #3
   1745e:	bf38      	it	cc
   17460:	2200      	movcc	r2, #0
   17462:	4287      	cmp	r7, r0
   17464:	4452      	add	r2, sl
   17466:	44b2      	add	sl, r6
   17468:	d916      	bls.n	17498 <__mdiff+0xe8>
   1746a:	4656      	mov	r6, sl
   1746c:	4604      	mov	r4, r0
   1746e:	f854 3b04 	ldr.w	r3, [r4], #4
   17472:	fa11 f183 	uxtah	r1, r1, r3
   17476:	140a      	asrs	r2, r1, #16
   17478:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   1747c:	b289      	uxth	r1, r1
   1747e:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
   17482:	42a7      	cmp	r7, r4
   17484:	f846 3b04 	str.w	r3, [r6], #4
   17488:	ea4f 4122 	mov.w	r1, r2, asr #16
   1748c:	d8ef      	bhi.n	1746e <__mdiff+0xbe>
   1748e:	1e7a      	subs	r2, r7, #1
   17490:	1a10      	subs	r0, r2, r0
   17492:	f020 0203 	bic.w	r2, r0, #3
   17496:	4452      	add	r2, sl
   17498:	b923      	cbnz	r3, 174a4 <__mdiff+0xf4>
   1749a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   1749e:	3d01      	subs	r5, #1
   174a0:	2b00      	cmp	r3, #0
   174a2:	d0fa      	beq.n	1749a <__mdiff+0xea>
   174a4:	f8c9 5010 	str.w	r5, [r9, #16]
   174a8:	4648      	mov	r0, r9
   174aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174ae:	4633      	mov	r3, r6
   174b0:	2701      	movs	r7, #1
   174b2:	4646      	mov	r6, r8
   174b4:	4698      	mov	r8, r3
   174b6:	e795      	b.n	173e4 <__mdiff+0x34>
   174b8:	dbf9      	blt.n	174ae <__mdiff+0xfe>
   174ba:	2700      	movs	r7, #0
   174bc:	e792      	b.n	173e4 <__mdiff+0x34>
   174be:	2100      	movs	r1, #0
   174c0:	f7ff fcd4 	bl	16e6c <_Balloc>
   174c4:	4681      	mov	r9, r0
   174c6:	b168      	cbz	r0, 174e4 <__mdiff+0x134>
   174c8:	2201      	movs	r2, #1
   174ca:	2300      	movs	r3, #0
   174cc:	e9c9 2304 	strd	r2, r3, [r9, #16]
   174d0:	4648      	mov	r0, r9
   174d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d6:	4b07      	ldr	r3, [pc, #28]	; (174f4 <__mdiff+0x144>)
   174d8:	4807      	ldr	r0, [pc, #28]	; (174f8 <__mdiff+0x148>)
   174da:	464a      	mov	r2, r9
   174dc:	f44f 7110 	mov.w	r1, #576	; 0x240
   174e0:	f001 f81c 	bl	1851c <__assert_func>
   174e4:	4b03      	ldr	r3, [pc, #12]	; (174f4 <__mdiff+0x144>)
   174e6:	4804      	ldr	r0, [pc, #16]	; (174f8 <__mdiff+0x148>)
   174e8:	464a      	mov	r2, r9
   174ea:	f240 2132 	movw	r1, #562	; 0x232
   174ee:	f001 f815 	bl	1851c <__assert_func>
   174f2:	bf00      	nop
   174f4:	0001fb08 	.word	0x0001fb08
   174f8:	0001fb8c 	.word	0x0001fb8c

000174fc <__d2b>:
   174fc:	b570      	push	{r4, r5, r6, lr}
   174fe:	2101      	movs	r1, #1
   17500:	b082      	sub	sp, #8
   17502:	4616      	mov	r6, r2
   17504:	461d      	mov	r5, r3
   17506:	f7ff fcb1 	bl	16e6c <_Balloc>
   1750a:	4604      	mov	r4, r0
   1750c:	2800      	cmp	r0, #0
   1750e:	d04b      	beq.n	175a8 <__d2b+0xac>
   17510:	462b      	mov	r3, r5
   17512:	f3c5 550a 	ubfx	r5, r5, #20, #11
   17516:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1751a:	b10d      	cbz	r5, 17520 <__d2b+0x24>
   1751c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   17520:	2e00      	cmp	r6, #0
   17522:	9301      	str	r3, [sp, #4]
   17524:	d022      	beq.n	1756c <__d2b+0x70>
   17526:	4668      	mov	r0, sp
   17528:	9600      	str	r6, [sp, #0]
   1752a:	f7ff fd3f 	bl	16fac <__lo0bits>
   1752e:	2800      	cmp	r0, #0
   17530:	d036      	beq.n	175a0 <__d2b+0xa4>
   17532:	9b01      	ldr	r3, [sp, #4]
   17534:	9900      	ldr	r1, [sp, #0]
   17536:	f1c0 0220 	rsb	r2, r0, #32
   1753a:	fa03 f202 	lsl.w	r2, r3, r2
   1753e:	430a      	orrs	r2, r1
   17540:	40c3      	lsrs	r3, r0
   17542:	9301      	str	r3, [sp, #4]
   17544:	6162      	str	r2, [r4, #20]
   17546:	2b00      	cmp	r3, #0
   17548:	bf14      	ite	ne
   1754a:	2102      	movne	r1, #2
   1754c:	2101      	moveq	r1, #1
   1754e:	61a3      	str	r3, [r4, #24]
   17550:	6121      	str	r1, [r4, #16]
   17552:	b1ad      	cbz	r5, 17580 <__d2b+0x84>
   17554:	9a06      	ldr	r2, [sp, #24]
   17556:	f2a5 4333 	subw	r3, r5, #1075	; 0x433
   1755a:	4403      	add	r3, r0
   1755c:	6013      	str	r3, [r2, #0]
   1755e:	9b07      	ldr	r3, [sp, #28]
   17560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   17564:	6018      	str	r0, [r3, #0]
   17566:	4620      	mov	r0, r4
   17568:	b002      	add	sp, #8
   1756a:	bd70      	pop	{r4, r5, r6, pc}
   1756c:	a801      	add	r0, sp, #4
   1756e:	f7ff fd1d 	bl	16fac <__lo0bits>
   17572:	9b01      	ldr	r3, [sp, #4]
   17574:	2101      	movs	r1, #1
   17576:	e9c4 1304 	strd	r1, r3, [r4, #16]
   1757a:	3020      	adds	r0, #32
   1757c:	2d00      	cmp	r5, #0
   1757e:	d1e9      	bne.n	17554 <__d2b+0x58>
   17580:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   17584:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   17588:	6910      	ldr	r0, [r2, #16]
   1758a:	9a06      	ldr	r2, [sp, #24]
   1758c:	6013      	str	r3, [r2, #0]
   1758e:	f7ff fced 	bl	16f6c <__hi0bits>
   17592:	9b07      	ldr	r3, [sp, #28]
   17594:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   17598:	4620      	mov	r0, r4
   1759a:	6019      	str	r1, [r3, #0]
   1759c:	b002      	add	sp, #8
   1759e:	bd70      	pop	{r4, r5, r6, pc}
   175a0:	e9dd 2300 	ldrd	r2, r3, [sp]
   175a4:	6162      	str	r2, [r4, #20]
   175a6:	e7ce      	b.n	17546 <__d2b+0x4a>
   175a8:	4b03      	ldr	r3, [pc, #12]	; (175b8 <__d2b+0xbc>)
   175aa:	4804      	ldr	r0, [pc, #16]	; (175bc <__d2b+0xc0>)
   175ac:	4622      	mov	r2, r4
   175ae:	f240 310a 	movw	r1, #778	; 0x30a
   175b2:	f000 ffb3 	bl	1851c <__assert_func>
   175b6:	bf00      	nop
   175b8:	0001fb08 	.word	0x0001fb08
   175bc:	0001fb8c 	.word	0x0001fb8c

000175c0 <frexp>:
   175c0:	f8df c060 	ldr.w	ip, [pc, #96]	; 17624 <frexp+0x64>
   175c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   175c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   175ca:	2700      	movs	r7, #0
   175cc:	4563      	cmp	r3, ip
   175ce:	4604      	mov	r4, r0
   175d0:	460d      	mov	r5, r1
   175d2:	4616      	mov	r6, r2
   175d4:	6017      	str	r7, [r2, #0]
   175d6:	dc22      	bgt.n	1761e <frexp+0x5e>
   175d8:	4684      	mov	ip, r0
   175da:	ea53 0c0c 	orrs.w	ip, r3, ip
   175de:	d01e      	beq.n	1761e <frexp+0x5e>
   175e0:	f8df c044 	ldr.w	ip, [pc, #68]	; 17628 <frexp+0x68>
   175e4:	ea01 0c0c 	and.w	ip, r1, ip
   175e8:	460a      	mov	r2, r1
   175ea:	f1bc 0f00 	cmp.w	ip, #0
   175ee:	d109      	bne.n	17604 <frexp+0x44>
   175f0:	4b0e      	ldr	r3, [pc, #56]	; (1762c <frexp+0x6c>)
   175f2:	2200      	movs	r2, #0
   175f4:	f7e9 f970 	bl	8d8 <__aeabi_dmul>
   175f8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   175fc:	4604      	mov	r4, r0
   175fe:	460a      	mov	r2, r1
   17600:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   17604:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   17608:	151b      	asrs	r3, r3, #20
   1760a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   1760e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   17612:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   17616:	443b      	add	r3, r7
   17618:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   1761c:	6033      	str	r3, [r6, #0]
   1761e:	4620      	mov	r0, r4
   17620:	4629      	mov	r1, r5
   17622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17624:	7fefffff 	.word	0x7fefffff
   17628:	7ff00000 	.word	0x7ff00000
   1762c:	43500000 	.word	0x43500000

00017630 <__sread>:
   17630:	b510      	push	{r4, lr}
   17632:	460c      	mov	r4, r1
   17634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   17638:	f001 fa2c 	bl	18a94 <_read_r>
   1763c:	2800      	cmp	r0, #0
   1763e:	db03      	blt.n	17648 <__sread+0x18>
   17640:	6d23      	ldr	r3, [r4, #80]	; 0x50
   17642:	4403      	add	r3, r0
   17644:	6523      	str	r3, [r4, #80]	; 0x50
   17646:	bd10      	pop	{r4, pc}
   17648:	89a3      	ldrh	r3, [r4, #12]
   1764a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1764e:	81a3      	strh	r3, [r4, #12]
   17650:	bd10      	pop	{r4, pc}
   17652:	bf00      	nop

00017654 <__swrite>:
   17654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17658:	460c      	mov	r4, r1
   1765a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   1765e:	461f      	mov	r7, r3
   17660:	05cb      	lsls	r3, r1, #23
   17662:	4605      	mov	r5, r0
   17664:	4616      	mov	r6, r2
   17666:	d40b      	bmi.n	17680 <__swrite+0x2c>
   17668:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   1766c:	81a1      	strh	r1, [r4, #12]
   1766e:	463b      	mov	r3, r7
   17670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   17674:	4632      	mov	r2, r6
   17676:	4628      	mov	r0, r5
   17678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1767c:	f000 bf38 	b.w	184f0 <_write_r>
   17680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   17684:	2302      	movs	r3, #2
   17686:	2200      	movs	r2, #0
   17688:	f001 f95c 	bl	18944 <_lseek_r>
   1768c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   17690:	e7ea      	b.n	17668 <__swrite+0x14>
   17692:	bf00      	nop

00017694 <__sseek>:
   17694:	b510      	push	{r4, lr}
   17696:	460c      	mov	r4, r1
   17698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   1769c:	f001 f952 	bl	18944 <_lseek_r>
   176a0:	89a3      	ldrh	r3, [r4, #12]
   176a2:	1c42      	adds	r2, r0, #1
   176a4:	bf0e      	itee	eq
   176a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   176aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   176ae:	6520      	strne	r0, [r4, #80]	; 0x50
   176b0:	81a3      	strh	r3, [r4, #12]
   176b2:	bd10      	pop	{r4, pc}

000176b4 <__sclose>:
   176b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   176b8:	f000 bf80 	b.w	185bc <_close_r>

000176bc <__sprint_r>:
   176bc:	6893      	ldr	r3, [r2, #8]
   176be:	b510      	push	{r4, lr}
   176c0:	4614      	mov	r4, r2
   176c2:	b913      	cbnz	r3, 176ca <__sprint_r+0xe>
   176c4:	6053      	str	r3, [r2, #4]
   176c6:	4618      	mov	r0, r3
   176c8:	bd10      	pop	{r4, pc}
   176ca:	f000 ffb3 	bl	18634 <__sfvwrite_r>
   176ce:	2300      	movs	r3, #0
   176d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
   176d4:	bd10      	pop	{r4, pc}
   176d6:	bf00      	nop

000176d8 <_vfiprintf_r>:
   176d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176dc:	b0bb      	sub	sp, #236	; 0xec
   176de:	e9cd 3004 	strd	r3, r0, [sp, #16]
   176e2:	461c      	mov	r4, r3
   176e4:	468b      	mov	fp, r1
   176e6:	4616      	mov	r6, r2
   176e8:	b118      	cbz	r0, 176f2 <_vfiprintf_r+0x1a>
   176ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
   176ec:	2b00      	cmp	r3, #0
   176ee:	f000 828a 	beq.w	17c06 <_vfiprintf_r+0x52e>
   176f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   176f6:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   176fa:	07db      	lsls	r3, r3, #31
   176fc:	d402      	bmi.n	17704 <_vfiprintf_r+0x2c>
   176fe:	0597      	lsls	r7, r2, #22
   17700:	f140 8596 	bpl.w	18230 <_vfiprintf_r+0xb58>
   17704:	0715      	lsls	r5, r2, #28
   17706:	f140 80eb 	bpl.w	178e0 <_vfiprintf_r+0x208>
   1770a:	f8db 3010 	ldr.w	r3, [fp, #16]
   1770e:	2b00      	cmp	r3, #0
   17710:	f000 80e6 	beq.w	178e0 <_vfiprintf_r+0x208>
   17714:	f002 031a 	and.w	r3, r2, #26
   17718:	2b0a      	cmp	r3, #10
   1771a:	f000 80ef 	beq.w	178fc <_vfiprintf_r+0x224>
   1771e:	ab11      	add	r3, sp, #68	; 0x44
   17720:	930e      	str	r3, [sp, #56]	; 0x38
   17722:	2300      	movs	r3, #0
   17724:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   17728:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   1772c:	9307      	str	r3, [sp, #28]
   1772e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17732:	9308      	str	r3, [sp, #32]
   17734:	9303      	str	r3, [sp, #12]
   17736:	7833      	ldrb	r3, [r6, #0]
   17738:	2b00      	cmp	r3, #0
   1773a:	f000 8209 	beq.w	17b50 <_vfiprintf_r+0x478>
   1773e:	4634      	mov	r4, r6
   17740:	e004      	b.n	1774c <_vfiprintf_r+0x74>
   17742:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   17746:	2b00      	cmp	r3, #0
   17748:	f000 8131 	beq.w	179ae <_vfiprintf_r+0x2d6>
   1774c:	2b25      	cmp	r3, #37	; 0x25
   1774e:	d1f8      	bne.n	17742 <_vfiprintf_r+0x6a>
   17750:	1ba5      	subs	r5, r4, r6
   17752:	f040 812f 	bne.w	179b4 <_vfiprintf_r+0x2dc>
   17756:	7823      	ldrb	r3, [r4, #0]
   17758:	2b00      	cmp	r3, #0
   1775a:	f000 81f9 	beq.w	17b50 <_vfiprintf_r+0x478>
   1775e:	2300      	movs	r3, #0
   17760:	f04f 32ff 	mov.w	r2, #4294967295
   17764:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17768:	461d      	mov	r5, r3
   1776a:	9302      	str	r3, [sp, #8]
   1776c:	1c66      	adds	r6, r4, #1
   1776e:	7863      	ldrb	r3, [r4, #1]
   17770:	9200      	str	r2, [sp, #0]
   17772:	242b      	movs	r4, #43	; 0x2b
   17774:	3601      	adds	r6, #1
   17776:	f1a3 0220 	sub.w	r2, r3, #32
   1777a:	2a5a      	cmp	r2, #90	; 0x5a
   1777c:	f200 8159 	bhi.w	17a32 <_vfiprintf_r+0x35a>
   17780:	e8df f012 	tbh	[pc, r2, lsl #1]
   17784:	015702d4 	.word	0x015702d4
   17788:	02d00157 	.word	0x02d00157
   1778c:	01570157 	.word	0x01570157
   17790:	006a0157 	.word	0x006a0157
   17794:	01570157 	.word	0x01570157
   17798:	02f802c6 	.word	0x02f802c6
   1779c:	01110157 	.word	0x01110157
   177a0:	015702de 	.word	0x015702de
   177a4:	005b02b0 	.word	0x005b02b0
   177a8:	005b005b 	.word	0x005b005b
   177ac:	005b005b 	.word	0x005b005b
   177b0:	005b005b 	.word	0x005b005b
   177b4:	005b005b 	.word	0x005b005b
   177b8:	01570157 	.word	0x01570157
   177bc:	01570157 	.word	0x01570157
   177c0:	01570157 	.word	0x01570157
   177c4:	01570157 	.word	0x01570157
   177c8:	02320157 	.word	0x02320157
   177cc:	01570084 	.word	0x01570084
   177d0:	01570157 	.word	0x01570157
   177d4:	01570157 	.word	0x01570157
   177d8:	01570157 	.word	0x01570157
   177dc:	01570157 	.word	0x01570157
   177e0:	00d10157 	.word	0x00d10157
   177e4:	01570157 	.word	0x01570157
   177e8:	02160157 	.word	0x02160157
   177ec:	029e0157 	.word	0x029e0157
   177f0:	01570157 	.word	0x01570157
   177f4:	0157055e 	.word	0x0157055e
   177f8:	01570157 	.word	0x01570157
   177fc:	01570157 	.word	0x01570157
   17800:	01570157 	.word	0x01570157
   17804:	01570157 	.word	0x01570157
   17808:	02320157 	.word	0x02320157
   1780c:	01570086 	.word	0x01570086
   17810:	01570157 	.word	0x01570157
   17814:	00860294 	.word	0x00860294
   17818:	01570080 	.word	0x01570080
   1781c:	0157028a 	.word	0x0157028a
   17820:	00d30277 	.word	0x00d30277
   17824:	008002b4 	.word	0x008002b4
   17828:	02160157 	.word	0x02160157
   1782c:	057e007e 	.word	0x057e007e
   17830:	01570157 	.word	0x01570157
   17834:	01570580 	.word	0x01570580
   17838:	007e      	.short	0x007e
   1783a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1783e:	2100      	movs	r1, #0
   17840:	f816 3b01 	ldrb.w	r3, [r6], #1
   17844:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   17848:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   1784c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17850:	2a09      	cmp	r2, #9
   17852:	d9f5      	bls.n	17840 <_vfiprintf_r+0x168>
   17854:	9102      	str	r1, [sp, #8]
   17856:	e78e      	b.n	17776 <_vfiprintf_r+0x9e>
   17858:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1785c:	4640      	mov	r0, r8
   1785e:	f7ff faa1 	bl	16da4 <_localeconv_r>
   17862:	6843      	ldr	r3, [r0, #4]
   17864:	9309      	str	r3, [sp, #36]	; 0x24
   17866:	4618      	mov	r0, r3
   17868:	f7e8 fc4a 	bl	100 <strlen>
   1786c:	900a      	str	r0, [sp, #40]	; 0x28
   1786e:	4607      	mov	r7, r0
   17870:	4640      	mov	r0, r8
   17872:	f7ff fa97 	bl	16da4 <_localeconv_r>
   17876:	6883      	ldr	r3, [r0, #8]
   17878:	9308      	str	r3, [sp, #32]
   1787a:	2f00      	cmp	r7, #0
   1787c:	f040 84c1 	bne.w	18202 <_vfiprintf_r+0xb2a>
   17880:	7833      	ldrb	r3, [r6, #0]
   17882:	e777      	b.n	17774 <_vfiprintf_r+0x9c>
   17884:	7833      	ldrb	r3, [r6, #0]
   17886:	f045 0520 	orr.w	r5, r5, #32
   1788a:	e773      	b.n	17774 <_vfiprintf_r+0x9c>
   1788c:	f045 0510 	orr.w	r5, r5, #16
   17890:	06af      	lsls	r7, r5, #26
   17892:	f140 817e 	bpl.w	17b92 <_vfiprintf_r+0x4ba>
   17896:	9f04      	ldr	r7, [sp, #16]
   17898:	3707      	adds	r7, #7
   1789a:	f027 0707 	bic.w	r7, r7, #7
   1789e:	463a      	mov	r2, r7
   178a0:	687b      	ldr	r3, [r7, #4]
   178a2:	f852 7b08 	ldr.w	r7, [r2], #8
   178a6:	9204      	str	r2, [sp, #16]
   178a8:	4698      	mov	r8, r3
   178aa:	2b00      	cmp	r3, #0
   178ac:	f2c0 81b9 	blt.w	17c22 <_vfiprintf_r+0x54a>
   178b0:	9b00      	ldr	r3, [sp, #0]
   178b2:	3301      	adds	r3, #1
   178b4:	f000 8553 	beq.w	1835e <_vfiprintf_r+0xc86>
   178b8:	ea57 0308 	orrs.w	r3, r7, r8
   178bc:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   178c0:	f000 842e 	beq.w	18120 <_vfiprintf_r+0xa48>
   178c4:	2f0a      	cmp	r7, #10
   178c6:	f178 0300 	sbcs.w	r3, r8, #0
   178ca:	f080 8444 	bcs.w	18156 <_vfiprintf_r+0xa7e>
   178ce:	3730      	adds	r7, #48	; 0x30
   178d0:	2301      	movs	r3, #1
   178d2:	f88d 70e7 	strb.w	r7, [sp, #231]	; 0xe7
   178d6:	4655      	mov	r5, sl
   178d8:	9301      	str	r3, [sp, #4]
   178da:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
   178de:	e052      	b.n	17986 <_vfiprintf_r+0x2ae>
   178e0:	9805      	ldr	r0, [sp, #20]
   178e2:	4659      	mov	r1, fp
   178e4:	f7fe feaa 	bl	1663c <__swsetup_r>
   178e8:	2800      	cmp	r0, #0
   178ea:	f040 85a4 	bne.w	18436 <_vfiprintf_r+0xd5e>
   178ee:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   178f2:	f002 031a 	and.w	r3, r2, #26
   178f6:	2b0a      	cmp	r3, #10
   178f8:	f47f af11 	bne.w	1771e <_vfiprintf_r+0x46>
   178fc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   17900:	2b00      	cmp	r3, #0
   17902:	f6ff af0c 	blt.w	1771e <_vfiprintf_r+0x46>
   17906:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1790a:	07d9      	lsls	r1, r3, #31
   1790c:	d402      	bmi.n	17914 <_vfiprintf_r+0x23c>
   1790e:	0593      	lsls	r3, r2, #22
   17910:	f140 856e 	bpl.w	183f0 <_vfiprintf_r+0xd18>
   17914:	9805      	ldr	r0, [sp, #20]
   17916:	4623      	mov	r3, r4
   17918:	4632      	mov	r2, r6
   1791a:	4659      	mov	r1, fp
   1791c:	b03b      	add	sp, #236	; 0xec
   1791e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17922:	f000 bda5 	b.w	18470 <__sbprintf>
   17926:	f045 0510 	orr.w	r5, r5, #16
   1792a:	f015 0820 	ands.w	r8, r5, #32
   1792e:	f000 8120 	beq.w	17b72 <_vfiprintf_r+0x49a>
   17932:	9f04      	ldr	r7, [sp, #16]
   17934:	3707      	adds	r7, #7
   17936:	f027 0707 	bic.w	r7, r7, #7
   1793a:	463b      	mov	r3, r7
   1793c:	f8d7 8004 	ldr.w	r8, [r7, #4]
   17940:	f853 7b08 	ldr.w	r7, [r3], #8
   17944:	9304      	str	r3, [sp, #16]
   17946:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   1794a:	2300      	movs	r3, #0
   1794c:	2200      	movs	r2, #0
   1794e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   17952:	9a00      	ldr	r2, [sp, #0]
   17954:	1c55      	adds	r5, r2, #1
   17956:	f000 8172 	beq.w	17c3e <_vfiprintf_r+0x566>
   1795a:	ea57 0108 	orrs.w	r1, r7, r8
   1795e:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   17962:	f040 8378 	bne.w	18056 <_vfiprintf_r+0x97e>
   17966:	2a00      	cmp	r2, #0
   17968:	f040 84fc 	bne.w	18364 <_vfiprintf_r+0xc8c>
   1796c:	2b00      	cmp	r3, #0
   1796e:	f040 83dc 	bne.w	1812a <_vfiprintf_r+0xa52>
   17972:	f01a 0301 	ands.w	r3, sl, #1
   17976:	9301      	str	r3, [sp, #4]
   17978:	f000 842c 	beq.w	181d4 <_vfiprintf_r+0xafc>
   1797c:	2330      	movs	r3, #48	; 0x30
   1797e:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
   17982:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
   17986:	e9dd 8200 	ldrd	r8, r2, [sp]
   1798a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1798e:	4590      	cmp	r8, r2
   17990:	bfb8      	it	lt
   17992:	4690      	movlt	r8, r2
   17994:	2b00      	cmp	r3, #0
   17996:	d05b      	beq.n	17a50 <_vfiprintf_r+0x378>
   17998:	f108 0801 	add.w	r8, r8, #1
   1799c:	e058      	b.n	17a50 <_vfiprintf_r+0x378>
   1799e:	9a02      	ldr	r2, [sp, #8]
   179a0:	9304      	str	r3, [sp, #16]
   179a2:	4252      	negs	r2, r2
   179a4:	9202      	str	r2, [sp, #8]
   179a6:	7833      	ldrb	r3, [r6, #0]
   179a8:	f045 0504 	orr.w	r5, r5, #4
   179ac:	e6e2      	b.n	17774 <_vfiprintf_r+0x9c>
   179ae:	1ba5      	subs	r5, r4, r6
   179b0:	f000 80ce 	beq.w	17b50 <_vfiprintf_r+0x478>
   179b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   179b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   179b8:	3301      	adds	r3, #1
   179ba:	442a      	add	r2, r5
   179bc:	2b07      	cmp	r3, #7
   179be:	e9c9 6500 	strd	r6, r5, [r9]
   179c2:	9210      	str	r2, [sp, #64]	; 0x40
   179c4:	930f      	str	r3, [sp, #60]	; 0x3c
   179c6:	dc05      	bgt.n	179d4 <_vfiprintf_r+0x2fc>
   179c8:	f109 0908 	add.w	r9, r9, #8
   179cc:	9b03      	ldr	r3, [sp, #12]
   179ce:	442b      	add	r3, r5
   179d0:	9303      	str	r3, [sp, #12]
   179d2:	e6c0      	b.n	17756 <_vfiprintf_r+0x7e>
   179d4:	b91a      	cbnz	r2, 179de <_vfiprintf_r+0x306>
   179d6:	920f      	str	r2, [sp, #60]	; 0x3c
   179d8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   179dc:	e7f6      	b.n	179cc <_vfiprintf_r+0x2f4>
   179de:	9805      	ldr	r0, [sp, #20]
   179e0:	aa0e      	add	r2, sp, #56	; 0x38
   179e2:	4659      	mov	r1, fp
   179e4:	f000 fe26 	bl	18634 <__sfvwrite_r>
   179e8:	2300      	movs	r3, #0
   179ea:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   179ee:	b990      	cbnz	r0, 17a16 <_vfiprintf_r+0x33e>
   179f0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   179f4:	e7ea      	b.n	179cc <_vfiprintf_r+0x2f4>
   179f6:	4629      	mov	r1, r5
   179f8:	4620      	mov	r0, r4
   179fa:	f000 fe1b 	bl	18634 <__sfvwrite_r>
   179fe:	2300      	movs	r3, #0
   17a00:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   17a04:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17a08:	f04f 0c01 	mov.w	ip, #1
   17a0c:	4602      	mov	r2, r0
   17a0e:	2800      	cmp	r0, #0
   17a10:	f000 8244 	beq.w	17e9c <_vfiprintf_r+0x7c4>
   17a14:	46ab      	mov	fp, r5
   17a16:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
   17a1a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   17a1e:	07d0      	lsls	r0, r2, #31
   17a20:	f140 809d 	bpl.w	17b5e <_vfiprintf_r+0x486>
   17a24:	065a      	lsls	r2, r3, #25
   17a26:	f100 8512 	bmi.w	1844e <_vfiprintf_r+0xd76>
   17a2a:	9803      	ldr	r0, [sp, #12]
   17a2c:	b03b      	add	sp, #236	; 0xec
   17a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a32:	2b00      	cmp	r3, #0
   17a34:	f000 808c 	beq.w	17b50 <_vfiprintf_r+0x478>
   17a38:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   17a3c:	f04f 0801 	mov.w	r8, #1
   17a40:	2300      	movs	r3, #0
   17a42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17a46:	f8cd 8004 	str.w	r8, [sp, #4]
   17a4a:	ac21      	add	r4, sp, #132	; 0x84
   17a4c:	2300      	movs	r3, #0
   17a4e:	9300      	str	r3, [sp, #0]
   17a50:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
   17a54:	f015 0302 	ands.w	r3, r5, #2
   17a58:	bf18      	it	ne
   17a5a:	f108 0802 	addne.w	r8, r8, #2
   17a5e:	f102 0c01 	add.w	ip, r2, #1
   17a62:	f015 0a84 	ands.w	sl, r5, #132	; 0x84
   17a66:	9306      	str	r3, [sp, #24]
   17a68:	4661      	mov	r1, ip
   17a6a:	d105      	bne.n	17a78 <_vfiprintf_r+0x3a0>
   17a6c:	9b02      	ldr	r3, [sp, #8]
   17a6e:	eba3 0708 	sub.w	r7, r3, r8
   17a72:	2f00      	cmp	r7, #0
   17a74:	f300 82f1 	bgt.w	1805a <_vfiprintf_r+0x982>
   17a78:	f89d 7033 	ldrb.w	r7, [sp, #51]	; 0x33
   17a7c:	2f00      	cmp	r7, #0
   17a7e:	f000 8191 	beq.w	17da4 <_vfiprintf_r+0x6cc>
   17a82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   17a86:	3001      	adds	r0, #1
   17a88:	f8c9 2000 	str.w	r2, [r9]
   17a8c:	2907      	cmp	r1, #7
   17a8e:	f04f 0201 	mov.w	r2, #1
   17a92:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
   17a96:	f8c9 2004 	str.w	r2, [r9, #4]
   17a9a:	f340 817f 	ble.w	17d9c <_vfiprintf_r+0x6c4>
   17a9e:	b148      	cbz	r0, 17ab4 <_vfiprintf_r+0x3dc>
   17aa0:	aa0e      	add	r2, sp, #56	; 0x38
   17aa2:	9805      	ldr	r0, [sp, #20]
   17aa4:	4659      	mov	r1, fp
   17aa6:	f000 fdc5 	bl	18634 <__sfvwrite_r>
   17aaa:	2200      	movs	r2, #0
   17aac:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
   17ab0:	2800      	cmp	r0, #0
   17ab2:	d1b0      	bne.n	17a16 <_vfiprintf_r+0x33e>
   17ab4:	9a06      	ldr	r2, [sp, #24]
   17ab6:	2a00      	cmp	r2, #0
   17ab8:	f000 82bc 	beq.w	18034 <_vfiprintf_r+0x95c>
   17abc:	2002      	movs	r0, #2
   17abe:	ab0d      	add	r3, sp, #52	; 0x34
   17ac0:	9012      	str	r0, [sp, #72]	; 0x48
   17ac2:	9311      	str	r3, [sp, #68]	; 0x44
   17ac4:	2201      	movs	r2, #1
   17ac6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17aca:	f109 0908 	add.w	r9, r9, #8
   17ace:	1c51      	adds	r1, r2, #1
   17ad0:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   17ad4:	f000 8183 	beq.w	17dde <_vfiprintf_r+0x706>
   17ad8:	e9dd 3700 	ldrd	r3, r7, [sp]
   17adc:	1bdf      	subs	r7, r3, r7
   17ade:	2f00      	cmp	r7, #0
   17ae0:	f300 81cb 	bgt.w	17e7a <_vfiprintf_r+0x7a2>
   17ae4:	9a01      	ldr	r2, [sp, #4]
   17ae6:	f8c9 4000 	str.w	r4, [r9]
   17aea:	1813      	adds	r3, r2, r0
   17aec:	2907      	cmp	r1, #7
   17aee:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
   17af2:	f8c9 2004 	str.w	r2, [r9, #4]
   17af6:	f340 8235 	ble.w	17f64 <_vfiprintf_r+0x88c>
   17afa:	2b00      	cmp	r3, #0
   17afc:	f040 829f 	bne.w	1803e <_vfiprintf_r+0x966>
   17b00:	930f      	str	r3, [sp, #60]	; 0x3c
   17b02:	076b      	lsls	r3, r5, #29
   17b04:	f140 826d 	bpl.w	17fe2 <_vfiprintf_r+0x90a>
   17b08:	9a02      	ldr	r2, [sp, #8]
   17b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17b0c:	eba2 0408 	sub.w	r4, r2, r8
   17b10:	2c00      	cmp	r4, #0
   17b12:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17b16:	f300 8230 	bgt.w	17f7a <_vfiprintf_r+0x8a2>
   17b1a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   17b1e:	4541      	cmp	r1, r8
   17b20:	bfac      	ite	ge
   17b22:	1852      	addge	r2, r2, r1
   17b24:	4442      	addlt	r2, r8
   17b26:	9203      	str	r2, [sp, #12]
   17b28:	b153      	cbz	r3, 17b40 <_vfiprintf_r+0x468>
   17b2a:	9805      	ldr	r0, [sp, #20]
   17b2c:	aa0e      	add	r2, sp, #56	; 0x38
   17b2e:	4659      	mov	r1, fp
   17b30:	f000 fd80 	bl	18634 <__sfvwrite_r>
   17b34:	2300      	movs	r3, #0
   17b36:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   17b3a:	2800      	cmp	r0, #0
   17b3c:	f47f af6b 	bne.w	17a16 <_vfiprintf_r+0x33e>
   17b40:	2300      	movs	r3, #0
   17b42:	930f      	str	r3, [sp, #60]	; 0x3c
   17b44:	7833      	ldrb	r3, [r6, #0]
   17b46:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17b4a:	2b00      	cmp	r3, #0
   17b4c:	f47f adf7 	bne.w	1773e <_vfiprintf_r+0x66>
   17b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   17b52:	2b00      	cmp	r3, #0
   17b54:	f040 8460 	bne.w	18418 <_vfiprintf_r+0xd40>
   17b58:	2300      	movs	r3, #0
   17b5a:	930f      	str	r3, [sp, #60]	; 0x3c
   17b5c:	e75b      	b.n	17a16 <_vfiprintf_r+0x33e>
   17b5e:	0599      	lsls	r1, r3, #22
   17b60:	f53f af60 	bmi.w	17a24 <_vfiprintf_r+0x34c>
   17b64:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   17b68:	f001 ff24 	bl	199b4 <__retarget_lock_release_recursive>
   17b6c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   17b70:	e758      	b.n	17a24 <_vfiprintf_r+0x34c>
   17b72:	9904      	ldr	r1, [sp, #16]
   17b74:	f015 0210 	ands.w	r2, r5, #16
   17b78:	f101 0304 	add.w	r3, r1, #4
   17b7c:	f040 8354 	bne.w	18228 <_vfiprintf_r+0xb50>
   17b80:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   17b84:	f000 841e 	beq.w	183c4 <_vfiprintf_r+0xcec>
   17b88:	9904      	ldr	r1, [sp, #16]
   17b8a:	9304      	str	r3, [sp, #16]
   17b8c:	880f      	ldrh	r7, [r1, #0]
   17b8e:	4690      	mov	r8, r2
   17b90:	e6d9      	b.n	17946 <_vfiprintf_r+0x26e>
   17b92:	9a04      	ldr	r2, [sp, #16]
   17b94:	06ec      	lsls	r4, r5, #27
   17b96:	f102 0304 	add.w	r3, r2, #4
   17b9a:	d43a      	bmi.n	17c12 <_vfiprintf_r+0x53a>
   17b9c:	0668      	lsls	r0, r5, #25
   17b9e:	9a04      	ldr	r2, [sp, #16]
   17ba0:	d534      	bpl.n	17c0c <_vfiprintf_r+0x534>
   17ba2:	f9b2 7000 	ldrsh.w	r7, [r2]
   17ba6:	9304      	str	r3, [sp, #16]
   17ba8:	ea4f 78e7 	mov.w	r8, r7, asr #31
   17bac:	4643      	mov	r3, r8
   17bae:	e67c      	b.n	178aa <_vfiprintf_r+0x1d2>
   17bb0:	9f04      	ldr	r7, [sp, #16]
   17bb2:	9b00      	ldr	r3, [sp, #0]
   17bb4:	f857 4b04 	ldr.w	r4, [r7], #4
   17bb8:	f04f 0800 	mov.w	r8, #0
   17bbc:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
   17bc0:	2c00      	cmp	r4, #0
   17bc2:	f000 83d9 	beq.w	18378 <_vfiprintf_r+0xca0>
   17bc6:	1c59      	adds	r1, r3, #1
   17bc8:	f000 8392 	beq.w	182f0 <_vfiprintf_r+0xc18>
   17bcc:	461a      	mov	r2, r3
   17bce:	4641      	mov	r1, r8
   17bd0:	4620      	mov	r0, r4
   17bd2:	f7e8 fc75 	bl	4c0 <memchr>
   17bd6:	2800      	cmp	r0, #0
   17bd8:	f000 8410 	beq.w	183fc <_vfiprintf_r+0xd24>
   17bdc:	1b03      	subs	r3, r0, r4
   17bde:	9301      	str	r3, [sp, #4]
   17be0:	9704      	str	r7, [sp, #16]
   17be2:	f8cd 8000 	str.w	r8, [sp]
   17be6:	e6ce      	b.n	17986 <_vfiprintf_r+0x2ae>
   17be8:	9f04      	ldr	r7, [sp, #16]
   17bea:	2300      	movs	r3, #0
   17bec:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17bf0:	f04f 0801 	mov.w	r8, #1
   17bf4:	f857 3b04 	ldr.w	r3, [r7], #4
   17bf8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   17bfc:	9704      	str	r7, [sp, #16]
   17bfe:	f8cd 8004 	str.w	r8, [sp, #4]
   17c02:	ac21      	add	r4, sp, #132	; 0x84
   17c04:	e722      	b.n	17a4c <_vfiprintf_r+0x374>
   17c06:	f7fe fed7 	bl	169b8 <__sinit>
   17c0a:	e572      	b.n	176f2 <_vfiprintf_r+0x1a>
   17c0c:	05a9      	lsls	r1, r5, #22
   17c0e:	f100 83e3 	bmi.w	183d8 <_vfiprintf_r+0xd00>
   17c12:	6817      	ldr	r7, [r2, #0]
   17c14:	9304      	str	r3, [sp, #16]
   17c16:	ea4f 78e7 	mov.w	r8, r7, asr #31
   17c1a:	4643      	mov	r3, r8
   17c1c:	2b00      	cmp	r3, #0
   17c1e:	f6bf ae47 	bge.w	178b0 <_vfiprintf_r+0x1d8>
   17c22:	9a00      	ldr	r2, [sp, #0]
   17c24:	427f      	negs	r7, r7
   17c26:	f04f 032d 	mov.w	r3, #45	; 0x2d
   17c2a:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   17c2e:	46aa      	mov	sl, r5
   17c30:	1c55      	adds	r5, r2, #1
   17c32:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17c36:	f04f 0301 	mov.w	r3, #1
   17c3a:	f47f ae8e 	bne.w	1795a <_vfiprintf_r+0x282>
   17c3e:	2b01      	cmp	r3, #1
   17c40:	f43f ae40 	beq.w	178c4 <_vfiprintf_r+0x1ec>
   17c44:	2b02      	cmp	r3, #2
   17c46:	ac3a      	add	r4, sp, #232	; 0xe8
   17c48:	f040 8159 	bne.w	17efe <_vfiprintf_r+0x826>
   17c4c:	9a07      	ldr	r2, [sp, #28]
   17c4e:	f007 030f 	and.w	r3, r7, #15
   17c52:	093f      	lsrs	r7, r7, #4
   17c54:	5cd3      	ldrb	r3, [r2, r3]
   17c56:	f804 3d01 	strb.w	r3, [r4, #-1]!
   17c5a:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
   17c5e:	ea4f 1818 	mov.w	r8, r8, lsr #4
   17c62:	ea57 0308 	orrs.w	r3, r7, r8
   17c66:	d1f2      	bne.n	17c4e <_vfiprintf_r+0x576>
   17c68:	ab3a      	add	r3, sp, #232	; 0xe8
   17c6a:	1b1b      	subs	r3, r3, r4
   17c6c:	4655      	mov	r5, sl
   17c6e:	9301      	str	r3, [sp, #4]
   17c70:	e689      	b.n	17986 <_vfiprintf_r+0x2ae>
   17c72:	9a04      	ldr	r2, [sp, #16]
   17c74:	f852 3b04 	ldr.w	r3, [r2], #4
   17c78:	9204      	str	r2, [sp, #16]
   17c7a:	06aa      	lsls	r2, r5, #26
   17c7c:	f100 82ce 	bmi.w	1821c <_vfiprintf_r+0xb44>
   17c80:	06ef      	lsls	r7, r5, #27
   17c82:	f100 8375 	bmi.w	18370 <_vfiprintf_r+0xc98>
   17c86:	066c      	lsls	r4, r5, #25
   17c88:	f100 83ae 	bmi.w	183e8 <_vfiprintf_r+0xd10>
   17c8c:	05a8      	lsls	r0, r5, #22
   17c8e:	f140 836f 	bpl.w	18370 <_vfiprintf_r+0xc98>
   17c92:	9a03      	ldr	r2, [sp, #12]
   17c94:	701a      	strb	r2, [r3, #0]
   17c96:	e54e      	b.n	17736 <_vfiprintf_r+0x5e>
   17c98:	7833      	ldrb	r3, [r6, #0]
   17c9a:	2b6c      	cmp	r3, #108	; 0x6c
   17c9c:	bf03      	ittte	eq
   17c9e:	7873      	ldrbeq	r3, [r6, #1]
   17ca0:	f045 0520 	orreq.w	r5, r5, #32
   17ca4:	3601      	addeq	r6, #1
   17ca6:	f045 0510 	orrne.w	r5, r5, #16
   17caa:	e563      	b.n	17774 <_vfiprintf_r+0x9c>
   17cac:	7833      	ldrb	r3, [r6, #0]
   17cae:	2b68      	cmp	r3, #104	; 0x68
   17cb0:	bf03      	ittte	eq
   17cb2:	7873      	ldrbeq	r3, [r6, #1]
   17cb4:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   17cb8:	3601      	addeq	r6, #1
   17cba:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   17cbe:	e559      	b.n	17774 <_vfiprintf_r+0x9c>
   17cc0:	f045 0a10 	orr.w	sl, r5, #16
   17cc4:	f01a 0820 	ands.w	r8, sl, #32
   17cc8:	f000 8234 	beq.w	18134 <_vfiprintf_r+0xa5c>
   17ccc:	9f04      	ldr	r7, [sp, #16]
   17cce:	3707      	adds	r7, #7
   17cd0:	f027 0707 	bic.w	r7, r7, #7
   17cd4:	463b      	mov	r3, r7
   17cd6:	f8d7 8004 	ldr.w	r8, [r7, #4]
   17cda:	f853 7b08 	ldr.w	r7, [r3], #8
   17cde:	9304      	str	r3, [sp, #16]
   17ce0:	2301      	movs	r3, #1
   17ce2:	e633      	b.n	1794c <_vfiprintf_r+0x274>
   17ce4:	7833      	ldrb	r3, [r6, #0]
   17ce6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   17cea:	e543      	b.n	17774 <_vfiprintf_r+0x9c>
   17cec:	9b04      	ldr	r3, [sp, #16]
   17cee:	f853 7b04 	ldr.w	r7, [r3], #4
   17cf2:	9304      	str	r3, [sp, #16]
   17cf4:	2330      	movs	r3, #48	; 0x30
   17cf6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   17cfa:	2378      	movs	r3, #120	; 0x78
   17cfc:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   17d00:	4bc3      	ldr	r3, [pc, #780]	; (18010 <_vfiprintf_r+0x938>)
   17d02:	9307      	str	r3, [sp, #28]
   17d04:	f045 0a02 	orr.w	sl, r5, #2
   17d08:	f04f 0800 	mov.w	r8, #0
   17d0c:	2302      	movs	r3, #2
   17d0e:	e61d      	b.n	1794c <_vfiprintf_r+0x274>
   17d10:	9b04      	ldr	r3, [sp, #16]
   17d12:	f853 2b04 	ldr.w	r2, [r3], #4
   17d16:	9202      	str	r2, [sp, #8]
   17d18:	2a00      	cmp	r2, #0
   17d1a:	f6ff ae40 	blt.w	1799e <_vfiprintf_r+0x2c6>
   17d1e:	9304      	str	r3, [sp, #16]
   17d20:	7833      	ldrb	r3, [r6, #0]
   17d22:	e527      	b.n	17774 <_vfiprintf_r+0x9c>
   17d24:	7833      	ldrb	r3, [r6, #0]
   17d26:	f045 0501 	orr.w	r5, r5, #1
   17d2a:	e523      	b.n	17774 <_vfiprintf_r+0x9c>
   17d2c:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
   17d30:	7833      	ldrb	r3, [r6, #0]
   17d32:	2a00      	cmp	r2, #0
   17d34:	f47f ad1e 	bne.w	17774 <_vfiprintf_r+0x9c>
   17d38:	2220      	movs	r2, #32
   17d3a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   17d3e:	e519      	b.n	17774 <_vfiprintf_r+0x9c>
   17d40:	4631      	mov	r1, r6
   17d42:	f811 3b01 	ldrb.w	r3, [r1], #1
   17d46:	2b2a      	cmp	r3, #42	; 0x2a
   17d48:	f000 8386 	beq.w	18458 <_vfiprintf_r+0xd80>
   17d4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17d50:	2a09      	cmp	r2, #9
   17d52:	460e      	mov	r6, r1
   17d54:	bf98      	it	ls
   17d56:	2100      	movls	r1, #0
   17d58:	f200 8358 	bhi.w	1840c <_vfiprintf_r+0xd34>
   17d5c:	f816 3b01 	ldrb.w	r3, [r6], #1
   17d60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   17d64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   17d68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   17d6c:	2a09      	cmp	r2, #9
   17d6e:	d9f5      	bls.n	17d5c <_vfiprintf_r+0x684>
   17d70:	9100      	str	r1, [sp, #0]
   17d72:	e500      	b.n	17776 <_vfiprintf_r+0x9e>
   17d74:	7833      	ldrb	r3, [r6, #0]
   17d76:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
   17d7a:	e4fb      	b.n	17774 <_vfiprintf_r+0x9c>
   17d7c:	2800      	cmp	r0, #0
   17d7e:	f040 8299 	bne.w	182b4 <_vfiprintf_r+0xbdc>
   17d82:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
   17d86:	2a00      	cmp	r2, #0
   17d88:	f000 828a 	beq.w	182a0 <_vfiprintf_r+0xbc8>
   17d8c:	2101      	movs	r1, #1
   17d8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   17d92:	9112      	str	r1, [sp, #72]	; 0x48
   17d94:	9211      	str	r2, [sp, #68]	; 0x44
   17d96:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17d9a:	4608      	mov	r0, r1
   17d9c:	460a      	mov	r2, r1
   17d9e:	f109 0908 	add.w	r9, r9, #8
   17da2:	3101      	adds	r1, #1
   17da4:	9b06      	ldr	r3, [sp, #24]
   17da6:	2b00      	cmp	r3, #0
   17da8:	f43f ae92 	beq.w	17ad0 <_vfiprintf_r+0x3f8>
   17dac:	ab0d      	add	r3, sp, #52	; 0x34
   17dae:	3002      	adds	r0, #2
   17db0:	f8c9 3000 	str.w	r3, [r9]
   17db4:	2907      	cmp	r1, #7
   17db6:	f04f 0302 	mov.w	r3, #2
   17dba:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
   17dbe:	f8c9 3004 	str.w	r3, [r9, #4]
   17dc2:	f340 81ab 	ble.w	1811c <_vfiprintf_r+0xa44>
   17dc6:	2800      	cmp	r0, #0
   17dc8:	f040 8128 	bne.w	1801c <_vfiprintf_r+0x944>
   17dcc:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
   17dd0:	f04f 0101 	mov.w	r1, #1
   17dd4:	4602      	mov	r2, r0
   17dd6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17dda:	f47f ae7d 	bne.w	17ad8 <_vfiprintf_r+0x400>
   17dde:	9b02      	ldr	r3, [sp, #8]
   17de0:	eba3 0708 	sub.w	r7, r3, r8
   17de4:	2f00      	cmp	r7, #0
   17de6:	f77f ae77 	ble.w	17ad8 <_vfiprintf_r+0x400>
   17dea:	2f10      	cmp	r7, #16
   17dec:	f340 8321 	ble.w	18432 <_vfiprintf_r+0xd5a>
   17df0:	4649      	mov	r1, r9
   17df2:	f04f 0a10 	mov.w	sl, #16
   17df6:	46b9      	mov	r9, r7
   17df8:	4637      	mov	r7, r6
   17dfa:	462e      	mov	r6, r5
   17dfc:	4625      	mov	r5, r4
   17dfe:	9c05      	ldr	r4, [sp, #20]
   17e00:	e008      	b.n	17e14 <_vfiprintf_r+0x73c>
   17e02:	f102 0c02 	add.w	ip, r2, #2
   17e06:	3108      	adds	r1, #8
   17e08:	461a      	mov	r2, r3
   17e0a:	f1a9 0910 	sub.w	r9, r9, #16
   17e0e:	f1b9 0f10 	cmp.w	r9, #16
   17e12:	dd16      	ble.n	17e42 <_vfiprintf_r+0x76a>
   17e14:	1c53      	adds	r3, r2, #1
   17e16:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 18014 <_vfiprintf_r+0x93c>
   17e1a:	3010      	adds	r0, #16
   17e1c:	2b07      	cmp	r3, #7
   17e1e:	e9c1 ca00 	strd	ip, sl, [r1]
   17e22:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
   17e26:	ddec      	ble.n	17e02 <_vfiprintf_r+0x72a>
   17e28:	aa0e      	add	r2, sp, #56	; 0x38
   17e2a:	2800      	cmp	r0, #0
   17e2c:	f040 80e1 	bne.w	17ff2 <_vfiprintf_r+0x91a>
   17e30:	f1a9 0910 	sub.w	r9, r9, #16
   17e34:	f1b9 0f10 	cmp.w	r9, #16
   17e38:	f04f 0c01 	mov.w	ip, #1
   17e3c:	4602      	mov	r2, r0
   17e3e:	a911      	add	r1, sp, #68	; 0x44
   17e40:	dce8      	bgt.n	17e14 <_vfiprintf_r+0x73c>
   17e42:	462c      	mov	r4, r5
   17e44:	4635      	mov	r5, r6
   17e46:	463e      	mov	r6, r7
   17e48:	464f      	mov	r7, r9
   17e4a:	4689      	mov	r9, r1
   17e4c:	4b71      	ldr	r3, [pc, #452]	; (18014 <_vfiprintf_r+0x93c>)
   17e4e:	f8c9 7004 	str.w	r7, [r9, #4]
   17e52:	4438      	add	r0, r7
   17e54:	f1bc 0f07 	cmp.w	ip, #7
   17e58:	e9cd c00f 	strd	ip, r0, [sp, #60]	; 0x3c
   17e5c:	f8c9 3000 	str.w	r3, [r9]
   17e60:	f300 81bb 	bgt.w	181da <_vfiprintf_r+0xb02>
   17e64:	e9dd 3700 	ldrd	r3, r7, [sp]
   17e68:	1bdf      	subs	r7, r3, r7
   17e6a:	2f00      	cmp	r7, #0
   17e6c:	f109 0908 	add.w	r9, r9, #8
   17e70:	f10c 0101 	add.w	r1, ip, #1
   17e74:	4662      	mov	r2, ip
   17e76:	f77f ae35 	ble.w	17ae4 <_vfiprintf_r+0x40c>
   17e7a:	2f10      	cmp	r7, #16
   17e7c:	dd31      	ble.n	17ee2 <_vfiprintf_r+0x80a>
   17e7e:	4633      	mov	r3, r6
   17e80:	9400      	str	r4, [sp, #0]
   17e82:	462e      	mov	r6, r5
   17e84:	9c05      	ldr	r4, [sp, #20]
   17e86:	465d      	mov	r5, fp
   17e88:	f04f 0a10 	mov.w	sl, #16
   17e8c:	46bb      	mov	fp, r7
   17e8e:	461f      	mov	r7, r3
   17e90:	e009      	b.n	17ea6 <_vfiprintf_r+0x7ce>
   17e92:	f102 0c02 	add.w	ip, r2, #2
   17e96:	f109 0908 	add.w	r9, r9, #8
   17e9a:	461a      	mov	r2, r3
   17e9c:	f1ab 0b10 	sub.w	fp, fp, #16
   17ea0:	f1bb 0f10 	cmp.w	fp, #16
   17ea4:	dd16      	ble.n	17ed4 <_vfiprintf_r+0x7fc>
   17ea6:	1c53      	adds	r3, r2, #1
   17ea8:	495a      	ldr	r1, [pc, #360]	; (18014 <_vfiprintf_r+0x93c>)
   17eaa:	3010      	adds	r0, #16
   17eac:	2b07      	cmp	r3, #7
   17eae:	e9c9 1a00 	strd	r1, sl, [r9]
   17eb2:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
   17eb6:	ddec      	ble.n	17e92 <_vfiprintf_r+0x7ba>
   17eb8:	aa0e      	add	r2, sp, #56	; 0x38
   17eba:	2800      	cmp	r0, #0
   17ebc:	f47f ad9b 	bne.w	179f6 <_vfiprintf_r+0x31e>
   17ec0:	f1ab 0b10 	sub.w	fp, fp, #16
   17ec4:	f1bb 0f10 	cmp.w	fp, #16
   17ec8:	f04f 0c01 	mov.w	ip, #1
   17ecc:	4602      	mov	r2, r0
   17ece:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17ed2:	dce8      	bgt.n	17ea6 <_vfiprintf_r+0x7ce>
   17ed4:	463b      	mov	r3, r7
   17ed6:	9c00      	ldr	r4, [sp, #0]
   17ed8:	465f      	mov	r7, fp
   17eda:	4661      	mov	r1, ip
   17edc:	46ab      	mov	fp, r5
   17ede:	4635      	mov	r5, r6
   17ee0:	461e      	mov	r6, r3
   17ee2:	4b4c      	ldr	r3, [pc, #304]	; (18014 <_vfiprintf_r+0x93c>)
   17ee4:	f8c9 7004 	str.w	r7, [r9, #4]
   17ee8:	4438      	add	r0, r7
   17eea:	2907      	cmp	r1, #7
   17eec:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
   17ef0:	f8c9 3000 	str.w	r3, [r9]
   17ef4:	dc22      	bgt.n	17f3c <_vfiprintf_r+0x864>
   17ef6:	f109 0908 	add.w	r9, r9, #8
   17efa:	3101      	adds	r1, #1
   17efc:	e5f2      	b.n	17ae4 <_vfiprintf_r+0x40c>
   17efe:	f007 0307 	and.w	r3, r7, #7
   17f02:	08ff      	lsrs	r7, r7, #3
   17f04:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
   17f08:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   17f0c:	3330      	adds	r3, #48	; 0x30
   17f0e:	ea57 0108 	orrs.w	r1, r7, r8
   17f12:	4622      	mov	r2, r4
   17f14:	f804 3d01 	strb.w	r3, [r4, #-1]!
   17f18:	d1f1      	bne.n	17efe <_vfiprintf_r+0x826>
   17f1a:	f01a 0f01 	tst.w	sl, #1
   17f1e:	f43f aea3 	beq.w	17c68 <_vfiprintf_r+0x590>
   17f22:	2b30      	cmp	r3, #48	; 0x30
   17f24:	f43f aea0 	beq.w	17c68 <_vfiprintf_r+0x590>
   17f28:	2330      	movs	r3, #48	; 0x30
   17f2a:	3a02      	subs	r2, #2
   17f2c:	f804 3c01 	strb.w	r3, [r4, #-1]
   17f30:	ab3a      	add	r3, sp, #232	; 0xe8
   17f32:	1a9b      	subs	r3, r3, r2
   17f34:	4655      	mov	r5, sl
   17f36:	9301      	str	r3, [sp, #4]
   17f38:	4614      	mov	r4, r2
   17f3a:	e524      	b.n	17986 <_vfiprintf_r+0x2ae>
   17f3c:	b150      	cbz	r0, 17f54 <_vfiprintf_r+0x87c>
   17f3e:	9805      	ldr	r0, [sp, #20]
   17f40:	aa0e      	add	r2, sp, #56	; 0x38
   17f42:	4659      	mov	r1, fp
   17f44:	f000 fb76 	bl	18634 <__sfvwrite_r>
   17f48:	2300      	movs	r3, #0
   17f4a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   17f4e:	2800      	cmp	r0, #0
   17f50:	f47f ad61 	bne.w	17a16 <_vfiprintf_r+0x33e>
   17f54:	9b01      	ldr	r3, [sp, #4]
   17f56:	9411      	str	r4, [sp, #68]	; 0x44
   17f58:	2201      	movs	r2, #1
   17f5a:	9312      	str	r3, [sp, #72]	; 0x48
   17f5c:	9310      	str	r3, [sp, #64]	; 0x40
   17f5e:	920f      	str	r2, [sp, #60]	; 0x3c
   17f60:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17f64:	076c      	lsls	r4, r5, #29
   17f66:	f57f add8 	bpl.w	17b1a <_vfiprintf_r+0x442>
   17f6a:	9a02      	ldr	r2, [sp, #8]
   17f6c:	eba2 0408 	sub.w	r4, r2, r8
   17f70:	2c00      	cmp	r4, #0
   17f72:	f109 0908 	add.w	r9, r9, #8
   17f76:	f77f add0 	ble.w	17b1a <_vfiprintf_r+0x442>
   17f7a:	2c10      	cmp	r4, #16
   17f7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17f7e:	f340 8249 	ble.w	18414 <_vfiprintf_r+0xd3c>
   17f82:	f8dd a014 	ldr.w	sl, [sp, #20]
   17f86:	2510      	movs	r5, #16
   17f88:	2700      	movs	r7, #0
   17f8a:	e006      	b.n	17f9a <_vfiprintf_r+0x8c2>
   17f8c:	1c81      	adds	r1, r0, #2
   17f8e:	f109 0908 	add.w	r9, r9, #8
   17f92:	4610      	mov	r0, r2
   17f94:	3c10      	subs	r4, #16
   17f96:	2c10      	cmp	r4, #16
   17f98:	dd14      	ble.n	17fc4 <_vfiprintf_r+0x8ec>
   17f9a:	1c42      	adds	r2, r0, #1
   17f9c:	491e      	ldr	r1, [pc, #120]	; (18018 <_vfiprintf_r+0x940>)
   17f9e:	3310      	adds	r3, #16
   17fa0:	2a07      	cmp	r2, #7
   17fa2:	e9c9 1500 	strd	r1, r5, [r9]
   17fa6:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
   17faa:	ddef      	ble.n	17f8c <_vfiprintf_r+0x8b4>
   17fac:	aa0e      	add	r2, sp, #56	; 0x38
   17fae:	2b00      	cmp	r3, #0
   17fb0:	f040 809f 	bne.w	180f2 <_vfiprintf_r+0xa1a>
   17fb4:	3c10      	subs	r4, #16
   17fb6:	2c10      	cmp	r4, #16
   17fb8:	f04f 0101 	mov.w	r1, #1
   17fbc:	4618      	mov	r0, r3
   17fbe:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   17fc2:	dcea      	bgt.n	17f9a <_vfiprintf_r+0x8c2>
   17fc4:	460a      	mov	r2, r1
   17fc6:	4914      	ldr	r1, [pc, #80]	; (18018 <_vfiprintf_r+0x940>)
   17fc8:	f8c9 4004 	str.w	r4, [r9, #4]
   17fcc:	4423      	add	r3, r4
   17fce:	2a07      	cmp	r2, #7
   17fd0:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
   17fd4:	f8c9 1000 	str.w	r1, [r9]
   17fd8:	f77f ad9f 	ble.w	17b1a <_vfiprintf_r+0x442>
   17fdc:	2b00      	cmp	r3, #0
   17fde:	f040 817a 	bne.w	182d6 <_vfiprintf_r+0xbfe>
   17fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   17fe6:	4542      	cmp	r2, r8
   17fe8:	bfac      	ite	ge
   17fea:	189b      	addge	r3, r3, r2
   17fec:	4443      	addlt	r3, r8
   17fee:	9303      	str	r3, [sp, #12]
   17ff0:	e5a6      	b.n	17b40 <_vfiprintf_r+0x468>
   17ff2:	4659      	mov	r1, fp
   17ff4:	4620      	mov	r0, r4
   17ff6:	f000 fb1d 	bl	18634 <__sfvwrite_r>
   17ffa:	2300      	movs	r3, #0
   17ffc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   18000:	f04f 0c01 	mov.w	ip, #1
   18004:	4602      	mov	r2, r0
   18006:	2800      	cmp	r0, #0
   18008:	f47f ad05 	bne.w	17a16 <_vfiprintf_r+0x33e>
   1800c:	a911      	add	r1, sp, #68	; 0x44
   1800e:	e6fc      	b.n	17e0a <_vfiprintf_r+0x732>
   18010:	0001faa8 	.word	0x0001faa8
   18014:	0001fc18 	.word	0x0001fc18
   18018:	0001fc08 	.word	0x0001fc08
   1801c:	aa0e      	add	r2, sp, #56	; 0x38
   1801e:	9805      	ldr	r0, [sp, #20]
   18020:	4659      	mov	r1, fp
   18022:	f000 fb07 	bl	18634 <__sfvwrite_r>
   18026:	2300      	movs	r3, #0
   18028:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   1802c:	4602      	mov	r2, r0
   1802e:	2800      	cmp	r0, #0
   18030:	f47f acf1 	bne.w	17a16 <_vfiprintf_r+0x33e>
   18034:	2101      	movs	r1, #1
   18036:	4610      	mov	r0, r2
   18038:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   1803c:	e548      	b.n	17ad0 <_vfiprintf_r+0x3f8>
   1803e:	9805      	ldr	r0, [sp, #20]
   18040:	aa0e      	add	r2, sp, #56	; 0x38
   18042:	4659      	mov	r1, fp
   18044:	f000 faf6 	bl	18634 <__sfvwrite_r>
   18048:	2300      	movs	r3, #0
   1804a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   1804e:	2800      	cmp	r0, #0
   18050:	f43f ad57 	beq.w	17b02 <_vfiprintf_r+0x42a>
   18054:	e4df      	b.n	17a16 <_vfiprintf_r+0x33e>
   18056:	46aa      	mov	sl, r5
   18058:	e5f1      	b.n	17c3e <_vfiprintf_r+0x566>
   1805a:	2f10      	cmp	r7, #16
   1805c:	f340 81d4 	ble.w	18408 <_vfiprintf_r+0xd30>
   18060:	46a6      	mov	lr, r4
   18062:	950b      	str	r5, [sp, #44]	; 0x2c
   18064:	4654      	mov	r4, sl
   18066:	9d05      	ldr	r5, [sp, #20]
   18068:	2310      	movs	r3, #16
   1806a:	46f2      	mov	sl, lr
   1806c:	e008      	b.n	18080 <_vfiprintf_r+0x9a8>
   1806e:	f102 0e02 	add.w	lr, r2, #2
   18072:	f109 0908 	add.w	r9, r9, #8
   18076:	460a      	mov	r2, r1
   18078:	3f10      	subs	r7, #16
   1807a:	2f10      	cmp	r7, #16
   1807c:	dd14      	ble.n	180a8 <_vfiprintf_r+0x9d0>
   1807e:	1c51      	adds	r1, r2, #1
   18080:	f8df c308 	ldr.w	ip, [pc, #776]	; 1838c <_vfiprintf_r+0xcb4>
   18084:	3010      	adds	r0, #16
   18086:	2907      	cmp	r1, #7
   18088:	e9c9 c300 	strd	ip, r3, [r9]
   1808c:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
   18090:	dded      	ble.n	1806e <_vfiprintf_r+0x996>
   18092:	aa0e      	add	r2, sp, #56	; 0x38
   18094:	4659      	mov	r1, fp
   18096:	b9e8      	cbnz	r0, 180d4 <_vfiprintf_r+0x9fc>
   18098:	3f10      	subs	r7, #16
   1809a:	2f10      	cmp	r7, #16
   1809c:	4602      	mov	r2, r0
   1809e:	f04f 0e01 	mov.w	lr, #1
   180a2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   180a6:	dcea      	bgt.n	1807e <_vfiprintf_r+0x9a6>
   180a8:	4653      	mov	r3, sl
   180aa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   180ac:	46a2      	mov	sl, r4
   180ae:	461c      	mov	r4, r3
   180b0:	4bb6      	ldr	r3, [pc, #728]	; (1838c <_vfiprintf_r+0xcb4>)
   180b2:	f8c9 7004 	str.w	r7, [r9, #4]
   180b6:	4438      	add	r0, r7
   180b8:	f1be 0f07 	cmp.w	lr, #7
   180bc:	e9cd e00f 	strd	lr, r0, [sp, #60]	; 0x3c
   180c0:	f8c9 3000 	str.w	r3, [r9]
   180c4:	f73f ae5a 	bgt.w	17d7c <_vfiprintf_r+0x6a4>
   180c8:	f109 0908 	add.w	r9, r9, #8
   180cc:	f10e 0101 	add.w	r1, lr, #1
   180d0:	4672      	mov	r2, lr
   180d2:	e4d1      	b.n	17a78 <_vfiprintf_r+0x3a0>
   180d4:	4628      	mov	r0, r5
   180d6:	f000 faad 	bl	18634 <__sfvwrite_r>
   180da:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   180de:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
   180e2:	f04f 0e01 	mov.w	lr, #1
   180e6:	4602      	mov	r2, r0
   180e8:	2800      	cmp	r0, #0
   180ea:	f47f ac94 	bne.w	17a16 <_vfiprintf_r+0x33e>
   180ee:	2310      	movs	r3, #16
   180f0:	e7c2      	b.n	18078 <_vfiprintf_r+0x9a0>
   180f2:	4659      	mov	r1, fp
   180f4:	4650      	mov	r0, sl
   180f6:	f000 fa9d 	bl	18634 <__sfvwrite_r>
   180fa:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   180fe:	e9cd 770f 	strd	r7, r7, [sp, #60]	; 0x3c
   18102:	2101      	movs	r1, #1
   18104:	2800      	cmp	r0, #0
   18106:	f47f ac86 	bne.w	17a16 <_vfiprintf_r+0x33e>
   1810a:	4603      	mov	r3, r0
   1810c:	e742      	b.n	17f94 <_vfiprintf_r+0x8bc>
   1810e:	2002      	movs	r0, #2
   18110:	ab0d      	add	r3, sp, #52	; 0x34
   18112:	9012      	str	r0, [sp, #72]	; 0x48
   18114:	9311      	str	r3, [sp, #68]	; 0x44
   18116:	2101      	movs	r1, #1
   18118:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   1811c:	460a      	mov	r2, r1
   1811e:	e4d4      	b.n	17aca <_vfiprintf_r+0x3f2>
   18120:	9b00      	ldr	r3, [sp, #0]
   18122:	2b00      	cmp	r3, #0
   18124:	f47f abd3 	bne.w	178ce <_vfiprintf_r+0x1f6>
   18128:	4655      	mov	r5, sl
   1812a:	2300      	movs	r3, #0
   1812c:	e9cd 3300 	strd	r3, r3, [sp]
   18130:	ac3a      	add	r4, sp, #232	; 0xe8
   18132:	e428      	b.n	17986 <_vfiprintf_r+0x2ae>
   18134:	9904      	ldr	r1, [sp, #16]
   18136:	f01a 0210 	ands.w	r2, sl, #16
   1813a:	f101 0304 	add.w	r3, r1, #4
   1813e:	d15b      	bne.n	181f8 <_vfiprintf_r+0xb20>
   18140:	f01a 0140 	ands.w	r1, sl, #64	; 0x40
   18144:	f000 8133 	beq.w	183ae <_vfiprintf_r+0xcd6>
   18148:	9904      	ldr	r1, [sp, #16]
   1814a:	9304      	str	r3, [sp, #16]
   1814c:	880f      	ldrh	r7, [r1, #0]
   1814e:	4690      	mov	r8, r2
   18150:	2301      	movs	r3, #1
   18152:	f7ff bbfb 	b.w	1794c <_vfiprintf_r+0x274>
   18156:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
   1815a:	f8cd a004 	str.w	sl, [sp, #4]
   1815e:	f8cd 9018 	str.w	r9, [sp, #24]
   18162:	46b2      	mov	sl, r6
   18164:	f8dd 9020 	ldr.w	r9, [sp, #32]
   18168:	2500      	movs	r5, #0
   1816a:	ac3a      	add	r4, sp, #232	; 0xe8
   1816c:	461e      	mov	r6, r3
   1816e:	e008      	b.n	18182 <_vfiprintf_r+0xaaa>
   18170:	4641      	mov	r1, r8
   18172:	f7e9 f821 	bl	11b8 <__aeabi_uldivmod>
   18176:	2f0a      	cmp	r7, #10
   18178:	f178 0300 	sbcs.w	r3, r8, #0
   1817c:	d31d      	bcc.n	181ba <_vfiprintf_r+0xae2>
   1817e:	4607      	mov	r7, r0
   18180:	4688      	mov	r8, r1
   18182:	4638      	mov	r0, r7
   18184:	4641      	mov	r1, r8
   18186:	220a      	movs	r2, #10
   18188:	2300      	movs	r3, #0
   1818a:	f7e9 f815 	bl	11b8 <__aeabi_uldivmod>
   1818e:	4611      	mov	r1, r2
   18190:	3130      	adds	r1, #48	; 0x30
   18192:	f804 1c01 	strb.w	r1, [r4, #-1]
   18196:	4638      	mov	r0, r7
   18198:	220a      	movs	r2, #10
   1819a:	2300      	movs	r3, #0
   1819c:	3c01      	subs	r4, #1
   1819e:	3501      	adds	r5, #1
   181a0:	2e00      	cmp	r6, #0
   181a2:	d0e5      	beq.n	18170 <_vfiprintf_r+0xa98>
   181a4:	f899 1000 	ldrb.w	r1, [r9]
   181a8:	42a9      	cmp	r1, r5
   181aa:	d1e1      	bne.n	18170 <_vfiprintf_r+0xa98>
   181ac:	2dff      	cmp	r5, #255	; 0xff
   181ae:	d0df      	beq.n	18170 <_vfiprintf_r+0xa98>
   181b0:	2f0a      	cmp	r7, #10
   181b2:	f178 0300 	sbcs.w	r3, r8, #0
   181b6:	f080 80b6 	bcs.w	18326 <_vfiprintf_r+0xc4e>
   181ba:	4656      	mov	r6, sl
   181bc:	ab3a      	add	r3, sp, #232	; 0xe8
   181be:	f8dd a004 	ldr.w	sl, [sp, #4]
   181c2:	f8cd 9020 	str.w	r9, [sp, #32]
   181c6:	1b1b      	subs	r3, r3, r4
   181c8:	f8dd 9018 	ldr.w	r9, [sp, #24]
   181cc:	9301      	str	r3, [sp, #4]
   181ce:	4655      	mov	r5, sl
   181d0:	f7ff bbd9 	b.w	17986 <_vfiprintf_r+0x2ae>
   181d4:	ac3a      	add	r4, sp, #232	; 0xe8
   181d6:	f7ff bbd6 	b.w	17986 <_vfiprintf_r+0x2ae>
   181da:	2800      	cmp	r0, #0
   181dc:	f040 8091 	bne.w	18302 <_vfiprintf_r+0xc2a>
   181e0:	e9dd 3200 	ldrd	r3, r2, [sp]
   181e4:	1a9f      	subs	r7, r3, r2
   181e6:	2f00      	cmp	r7, #0
   181e8:	f77f aeb4 	ble.w	17f54 <_vfiprintf_r+0x87c>
   181ec:	2000      	movs	r0, #0
   181ee:	4602      	mov	r2, r0
   181f0:	2101      	movs	r1, #1
   181f2:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   181f6:	e640      	b.n	17e7a <_vfiprintf_r+0x7a2>
   181f8:	9304      	str	r3, [sp, #16]
   181fa:	680f      	ldr	r7, [r1, #0]
   181fc:	2301      	movs	r3, #1
   181fe:	f7ff bba5 	b.w	1794c <_vfiprintf_r+0x274>
   18202:	9a08      	ldr	r2, [sp, #32]
   18204:	7833      	ldrb	r3, [r6, #0]
   18206:	2a00      	cmp	r2, #0
   18208:	f43f aab4 	beq.w	17774 <_vfiprintf_r+0x9c>
   1820c:	7812      	ldrb	r2, [r2, #0]
   1820e:	2a00      	cmp	r2, #0
   18210:	f43f aab0 	beq.w	17774 <_vfiprintf_r+0x9c>
   18214:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   18218:	f7ff baac 	b.w	17774 <_vfiprintf_r+0x9c>
   1821c:	9a03      	ldr	r2, [sp, #12]
   1821e:	601a      	str	r2, [r3, #0]
   18220:	17d2      	asrs	r2, r2, #31
   18222:	605a      	str	r2, [r3, #4]
   18224:	f7ff ba87 	b.w	17736 <_vfiprintf_r+0x5e>
   18228:	680f      	ldr	r7, [r1, #0]
   1822a:	9304      	str	r3, [sp, #16]
   1822c:	f7ff bb8b 	b.w	17946 <_vfiprintf_r+0x26e>
   18230:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   18234:	f001 fbb6 	bl	199a4 <__retarget_lock_acquire_recursive>
   18238:	f8bb 200c 	ldrh.w	r2, [fp, #12]
   1823c:	f7ff ba62 	b.w	17704 <_vfiprintf_r+0x2c>
   18240:	4a53      	ldr	r2, [pc, #332]	; (18390 <_vfiprintf_r+0xcb8>)
   18242:	9207      	str	r2, [sp, #28]
   18244:	f015 0820 	ands.w	r8, r5, #32
   18248:	d021      	beq.n	1828e <_vfiprintf_r+0xbb6>
   1824a:	9f04      	ldr	r7, [sp, #16]
   1824c:	3707      	adds	r7, #7
   1824e:	f027 0707 	bic.w	r7, r7, #7
   18252:	463a      	mov	r2, r7
   18254:	f8d7 8004 	ldr.w	r8, [r7, #4]
   18258:	f852 7b08 	ldr.w	r7, [r2], #8
   1825c:	9204      	str	r2, [sp, #16]
   1825e:	07ea      	lsls	r2, r5, #31
   18260:	d509      	bpl.n	18276 <_vfiprintf_r+0xb9e>
   18262:	ea57 0208 	orrs.w	r2, r7, r8
   18266:	d006      	beq.n	18276 <_vfiprintf_r+0xb9e>
   18268:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
   1826c:	2330      	movs	r3, #48	; 0x30
   1826e:	f045 0502 	orr.w	r5, r5, #2
   18272:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   18276:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   1827a:	2302      	movs	r3, #2
   1827c:	f7ff bb66 	b.w	1794c <_vfiprintf_r+0x274>
   18280:	46aa      	mov	sl, r5
   18282:	e51f      	b.n	17cc4 <_vfiprintf_r+0x5ec>
   18284:	4a43      	ldr	r2, [pc, #268]	; (18394 <_vfiprintf_r+0xcbc>)
   18286:	9207      	str	r2, [sp, #28]
   18288:	f015 0820 	ands.w	r8, r5, #32
   1828c:	d1dd      	bne.n	1824a <_vfiprintf_r+0xb72>
   1828e:	9804      	ldr	r0, [sp, #16]
   18290:	f015 0110 	ands.w	r1, r5, #16
   18294:	f100 0204 	add.w	r2, r0, #4
   18298:	d059      	beq.n	1834e <_vfiprintf_r+0xc76>
   1829a:	6807      	ldr	r7, [r0, #0]
   1829c:	9204      	str	r2, [sp, #16]
   1829e:	e7de      	b.n	1825e <_vfiprintf_r+0xb86>
   182a0:	9b06      	ldr	r3, [sp, #24]
   182a2:	2b00      	cmp	r3, #0
   182a4:	f47f af33 	bne.w	1810e <_vfiprintf_r+0xa36>
   182a8:	461a      	mov	r2, r3
   182aa:	4618      	mov	r0, r3
   182ac:	2101      	movs	r1, #1
   182ae:	f10d 0944 	add.w	r9, sp, #68	; 0x44
   182b2:	e411      	b.n	17ad8 <_vfiprintf_r+0x400>
   182b4:	aa0e      	add	r2, sp, #56	; 0x38
   182b6:	9805      	ldr	r0, [sp, #20]
   182b8:	4659      	mov	r1, fp
   182ba:	f000 f9bb 	bl	18634 <__sfvwrite_r>
   182be:	2200      	movs	r2, #0
   182c0:	e9cd 220f 	strd	r2, r2, [sp, #60]	; 0x3c
   182c4:	2800      	cmp	r0, #0
   182c6:	f47f aba6 	bne.w	17a16 <_vfiprintf_r+0x33e>
   182ca:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
   182ce:	2a00      	cmp	r2, #0
   182d0:	f47f ad5c 	bne.w	17d8c <_vfiprintf_r+0x6b4>
   182d4:	e7e4      	b.n	182a0 <_vfiprintf_r+0xbc8>
   182d6:	9805      	ldr	r0, [sp, #20]
   182d8:	aa0e      	add	r2, sp, #56	; 0x38
   182da:	4659      	mov	r1, fp
   182dc:	f000 f9aa 	bl	18634 <__sfvwrite_r>
   182e0:	2300      	movs	r3, #0
   182e2:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   182e6:	2800      	cmp	r0, #0
   182e8:	f43f ae7b 	beq.w	17fe2 <_vfiprintf_r+0x90a>
   182ec:	f7ff bb93 	b.w	17a16 <_vfiprintf_r+0x33e>
   182f0:	4620      	mov	r0, r4
   182f2:	9704      	str	r7, [sp, #16]
   182f4:	f8cd 8000 	str.w	r8, [sp]
   182f8:	f7e7 ff02 	bl	100 <strlen>
   182fc:	9001      	str	r0, [sp, #4]
   182fe:	f7ff bb42 	b.w	17986 <_vfiprintf_r+0x2ae>
   18302:	9805      	ldr	r0, [sp, #20]
   18304:	aa0e      	add	r2, sp, #56	; 0x38
   18306:	4659      	mov	r1, fp
   18308:	f000 f994 	bl	18634 <__sfvwrite_r>
   1830c:	2300      	movs	r3, #0
   1830e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   18312:	2800      	cmp	r0, #0
   18314:	f47f ab7f 	bne.w	17a16 <_vfiprintf_r+0x33e>
   18318:	e9dd 3200 	ldrd	r3, r2, [sp]
   1831c:	1a9f      	subs	r7, r3, r2
   1831e:	2f00      	cmp	r7, #0
   18320:	f77f ae18 	ble.w	17f54 <_vfiprintf_r+0x87c>
   18324:	e762      	b.n	181ec <_vfiprintf_r+0xb14>
   18326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18328:	9909      	ldr	r1, [sp, #36]	; 0x24
   1832a:	1ae4      	subs	r4, r4, r3
   1832c:	461a      	mov	r2, r3
   1832e:	4620      	mov	r0, r4
   18330:	f7fc fbe4 	bl	14afc <strncpy>
   18334:	f899 3001 	ldrb.w	r3, [r9, #1]
   18338:	b10b      	cbz	r3, 1833e <_vfiprintf_r+0xc66>
   1833a:	f109 0901 	add.w	r9, r9, #1
   1833e:	4638      	mov	r0, r7
   18340:	4641      	mov	r1, r8
   18342:	220a      	movs	r2, #10
   18344:	2300      	movs	r3, #0
   18346:	2500      	movs	r5, #0
   18348:	f7e8 ff36 	bl	11b8 <__aeabi_uldivmod>
   1834c:	e717      	b.n	1817e <_vfiprintf_r+0xaa6>
   1834e:	f015 0040 	ands.w	r0, r5, #64	; 0x40
   18352:	d023      	beq.n	1839c <_vfiprintf_r+0xcc4>
   18354:	9804      	ldr	r0, [sp, #16]
   18356:	9204      	str	r2, [sp, #16]
   18358:	8807      	ldrh	r7, [r0, #0]
   1835a:	4688      	mov	r8, r1
   1835c:	e77f      	b.n	1825e <_vfiprintf_r+0xb86>
   1835e:	46aa      	mov	sl, r5
   18360:	f7ff bab0 	b.w	178c4 <_vfiprintf_r+0x1ec>
   18364:	2b01      	cmp	r3, #1
   18366:	46aa      	mov	sl, r5
   18368:	f47f ac6c 	bne.w	17c44 <_vfiprintf_r+0x56c>
   1836c:	f7ff baaf 	b.w	178ce <_vfiprintf_r+0x1f6>
   18370:	9a03      	ldr	r2, [sp, #12]
   18372:	601a      	str	r2, [r3, #0]
   18374:	f7ff b9df 	b.w	17736 <_vfiprintf_r+0x5e>
   18378:	2b06      	cmp	r3, #6
   1837a:	bf28      	it	cs
   1837c:	2306      	movcs	r3, #6
   1837e:	4c06      	ldr	r4, [pc, #24]	; (18398 <_vfiprintf_r+0xcc0>)
   18380:	9301      	str	r3, [sp, #4]
   18382:	9704      	str	r7, [sp, #16]
   18384:	4698      	mov	r8, r3
   18386:	f7ff bb61 	b.w	17a4c <_vfiprintf_r+0x374>
   1838a:	bf00      	nop
   1838c:	0001fc08 	.word	0x0001fc08
   18390:	0001fabc 	.word	0x0001fabc
   18394:	0001faa8 	.word	0x0001faa8
   18398:	0001fad0 	.word	0x0001fad0
   1839c:	9904      	ldr	r1, [sp, #16]
   1839e:	9204      	str	r2, [sp, #16]
   183a0:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   183a4:	bf16      	itet	ne
   183a6:	780f      	ldrbne	r7, [r1, #0]
   183a8:	680f      	ldreq	r7, [r1, #0]
   183aa:	4680      	movne	r8, r0
   183ac:	e757      	b.n	1825e <_vfiprintf_r+0xb86>
   183ae:	9a04      	ldr	r2, [sp, #16]
   183b0:	9304      	str	r3, [sp, #16]
   183b2:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   183b6:	bf16      	itet	ne
   183b8:	7817      	ldrbne	r7, [r2, #0]
   183ba:	6817      	ldreq	r7, [r2, #0]
   183bc:	4688      	movne	r8, r1
   183be:	2301      	movs	r3, #1
   183c0:	f7ff bac4 	b.w	1794c <_vfiprintf_r+0x274>
   183c4:	9a04      	ldr	r2, [sp, #16]
   183c6:	9304      	str	r3, [sp, #16]
   183c8:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   183cc:	bf16      	itet	ne
   183ce:	7817      	ldrbne	r7, [r2, #0]
   183d0:	6817      	ldreq	r7, [r2, #0]
   183d2:	4688      	movne	r8, r1
   183d4:	f7ff bab7 	b.w	17946 <_vfiprintf_r+0x26e>
   183d8:	f992 7000 	ldrsb.w	r7, [r2]
   183dc:	9304      	str	r3, [sp, #16]
   183de:	ea4f 78e7 	mov.w	r8, r7, asr #31
   183e2:	4643      	mov	r3, r8
   183e4:	f7ff ba61 	b.w	178aa <_vfiprintf_r+0x1d2>
   183e8:	9a03      	ldr	r2, [sp, #12]
   183ea:	801a      	strh	r2, [r3, #0]
   183ec:	f7ff b9a3 	b.w	17736 <_vfiprintf_r+0x5e>
   183f0:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   183f4:	f001 fade 	bl	199b4 <__retarget_lock_release_recursive>
   183f8:	f7ff ba8c 	b.w	17914 <_vfiprintf_r+0x23c>
   183fc:	9b00      	ldr	r3, [sp, #0]
   183fe:	9301      	str	r3, [sp, #4]
   18400:	9704      	str	r7, [sp, #16]
   18402:	9000      	str	r0, [sp, #0]
   18404:	f7ff babf 	b.w	17986 <_vfiprintf_r+0x2ae>
   18408:	46e6      	mov	lr, ip
   1840a:	e651      	b.n	180b0 <_vfiprintf_r+0x9d8>
   1840c:	2200      	movs	r2, #0
   1840e:	9200      	str	r2, [sp, #0]
   18410:	f7ff b9b1 	b.w	17776 <_vfiprintf_r+0x9e>
   18414:	1c42      	adds	r2, r0, #1
   18416:	e5d6      	b.n	17fc6 <_vfiprintf_r+0x8ee>
   18418:	9805      	ldr	r0, [sp, #20]
   1841a:	aa0e      	add	r2, sp, #56	; 0x38
   1841c:	4659      	mov	r1, fp
   1841e:	f000 f909 	bl	18634 <__sfvwrite_r>
   18422:	2300      	movs	r3, #0
   18424:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
   18428:	2800      	cmp	r0, #0
   1842a:	f43f ab95 	beq.w	17b58 <_vfiprintf_r+0x480>
   1842e:	f7ff baf2 	b.w	17a16 <_vfiprintf_r+0x33e>
   18432:	468c      	mov	ip, r1
   18434:	e50a      	b.n	17e4c <_vfiprintf_r+0x774>
   18436:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   1843a:	07dc      	lsls	r4, r3, #31
   1843c:	d407      	bmi.n	1844e <_vfiprintf_r+0xd76>
   1843e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   18442:	0598      	lsls	r0, r3, #22
   18444:	d403      	bmi.n	1844e <_vfiprintf_r+0xd76>
   18446:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   1844a:	f001 fab3 	bl	199b4 <__retarget_lock_release_recursive>
   1844e:	f04f 33ff 	mov.w	r3, #4294967295
   18452:	9303      	str	r3, [sp, #12]
   18454:	f7ff bae9 	b.w	17a2a <_vfiprintf_r+0x352>
   18458:	9a04      	ldr	r2, [sp, #16]
   1845a:	7873      	ldrb	r3, [r6, #1]
   1845c:	460e      	mov	r6, r1
   1845e:	f852 1b04 	ldr.w	r1, [r2], #4
   18462:	9204      	str	r2, [sp, #16]
   18464:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   18468:	9100      	str	r1, [sp, #0]
   1846a:	f7ff b983 	b.w	17774 <_vfiprintf_r+0x9c>
   1846e:	bf00      	nop

00018470 <__sbprintf>:
   18470:	b5f0      	push	{r4, r5, r6, r7, lr}
   18472:	461f      	mov	r7, r3
   18474:	898b      	ldrh	r3, [r1, #12]
   18476:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   1847a:	f023 0302 	bic.w	r3, r3, #2
   1847e:	f8ad 300c 	strh.w	r3, [sp, #12]
   18482:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   18484:	9319      	str	r3, [sp, #100]	; 0x64
   18486:	89cb      	ldrh	r3, [r1, #14]
   18488:	f8ad 300e 	strh.w	r3, [sp, #14]
   1848c:	69cb      	ldr	r3, [r1, #28]
   1848e:	9307      	str	r3, [sp, #28]
   18490:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   18492:	9309      	str	r3, [sp, #36]	; 0x24
   18494:	ab1a      	add	r3, sp, #104	; 0x68
   18496:	9300      	str	r3, [sp, #0]
   18498:	9304      	str	r3, [sp, #16]
   1849a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1849e:	4615      	mov	r5, r2
   184a0:	4606      	mov	r6, r0
   184a2:	9302      	str	r3, [sp, #8]
   184a4:	9305      	str	r3, [sp, #20]
   184a6:	a816      	add	r0, sp, #88	; 0x58
   184a8:	2300      	movs	r3, #0
   184aa:	460c      	mov	r4, r1
   184ac:	9306      	str	r3, [sp, #24]
   184ae:	f001 fa6c 	bl	1998a <__retarget_lock_init_recursive>
   184b2:	462a      	mov	r2, r5
   184b4:	463b      	mov	r3, r7
   184b6:	4669      	mov	r1, sp
   184b8:	4630      	mov	r0, r6
   184ba:	f7ff f90d 	bl	176d8 <_vfiprintf_r>
   184be:	1e05      	subs	r5, r0, #0
   184c0:	db07      	blt.n	184d2 <__sbprintf+0x62>
   184c2:	4669      	mov	r1, sp
   184c4:	4630      	mov	r0, r6
   184c6:	f7fe fa43 	bl	16950 <_fflush_r>
   184ca:	2800      	cmp	r0, #0
   184cc:	bf18      	it	ne
   184ce:	f04f 35ff 	movne.w	r5, #4294967295
   184d2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   184d6:	065b      	lsls	r3, r3, #25
   184d8:	d503      	bpl.n	184e2 <__sbprintf+0x72>
   184da:	89a3      	ldrh	r3, [r4, #12]
   184dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   184e0:	81a3      	strh	r3, [r4, #12]
   184e2:	9816      	ldr	r0, [sp, #88]	; 0x58
   184e4:	f001 fa5a 	bl	1999c <__retarget_lock_close_recursive>
   184e8:	4628      	mov	r0, r5
   184ea:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   184ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000184f0 <_write_r>:
   184f0:	b538      	push	{r3, r4, r5, lr}
   184f2:	460c      	mov	r4, r1
   184f4:	4d08      	ldr	r5, [pc, #32]	; (18518 <_write_r+0x28>)
   184f6:	4684      	mov	ip, r0
   184f8:	4611      	mov	r1, r2
   184fa:	4620      	mov	r0, r4
   184fc:	461a      	mov	r2, r3
   184fe:	2300      	movs	r3, #0
   18500:	602b      	str	r3, [r5, #0]
   18502:	4664      	mov	r4, ip
   18504:	f001 fa28 	bl	19958 <_write>
   18508:	1c43      	adds	r3, r0, #1
   1850a:	d000      	beq.n	1850e <_write_r+0x1e>
   1850c:	bd38      	pop	{r3, r4, r5, pc}
   1850e:	682b      	ldr	r3, [r5, #0]
   18510:	2b00      	cmp	r3, #0
   18512:	d0fb      	beq.n	1850c <_write_r+0x1c>
   18514:	6023      	str	r3, [r4, #0]
   18516:	bd38      	pop	{r3, r4, r5, pc}
   18518:	20009288 	.word	0x20009288

0001851c <__assert_func>:
   1851c:	b500      	push	{lr}
   1851e:	4c0b      	ldr	r4, [pc, #44]	; (1854c <__assert_func+0x30>)
   18520:	6825      	ldr	r5, [r4, #0]
   18522:	4614      	mov	r4, r2
   18524:	68ee      	ldr	r6, [r5, #12]
   18526:	461a      	mov	r2, r3
   18528:	b085      	sub	sp, #20
   1852a:	4603      	mov	r3, r0
   1852c:	460d      	mov	r5, r1
   1852e:	b14c      	cbz	r4, 18544 <__assert_func+0x28>
   18530:	4907      	ldr	r1, [pc, #28]	; (18550 <__assert_func+0x34>)
   18532:	9500      	str	r5, [sp, #0]
   18534:	e9cd 1401 	strd	r1, r4, [sp, #4]
   18538:	4630      	mov	r0, r6
   1853a:	4906      	ldr	r1, [pc, #24]	; (18554 <__assert_func+0x38>)
   1853c:	f000 f850 	bl	185e0 <fiprintf>
   18540:	f000 fcba 	bl	18eb8 <abort>
   18544:	4904      	ldr	r1, [pc, #16]	; (18558 <__assert_func+0x3c>)
   18546:	460c      	mov	r4, r1
   18548:	e7f3      	b.n	18532 <__assert_func+0x16>
   1854a:	bf00      	nop
   1854c:	20000d60 	.word	0x20000d60
   18550:	0001fc28 	.word	0x0001fc28
   18554:	0001fc38 	.word	0x0001fc38
   18558:	0001e93c 	.word	0x0001e93c

0001855c <_calloc_r>:
   1855c:	b510      	push	{r4, lr}
   1855e:	fb02 f101 	mul.w	r1, r2, r1
   18562:	f7fb ff55 	bl	14410 <_malloc_r>
   18566:	4604      	mov	r4, r0
   18568:	b168      	cbz	r0, 18586 <_calloc_r+0x2a>
   1856a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1856e:	f022 0203 	bic.w	r2, r2, #3
   18572:	3a04      	subs	r2, #4
   18574:	2a24      	cmp	r2, #36	; 0x24
   18576:	d818      	bhi.n	185aa <_calloc_r+0x4e>
   18578:	2a13      	cmp	r2, #19
   1857a:	d806      	bhi.n	1858a <_calloc_r+0x2e>
   1857c:	4602      	mov	r2, r0
   1857e:	2300      	movs	r3, #0
   18580:	e9c2 3300 	strd	r3, r3, [r2]
   18584:	6093      	str	r3, [r2, #8]
   18586:	4620      	mov	r0, r4
   18588:	bd10      	pop	{r4, pc}
   1858a:	2300      	movs	r3, #0
   1858c:	2a1b      	cmp	r2, #27
   1858e:	e9c0 3300 	strd	r3, r3, [r0]
   18592:	d90f      	bls.n	185b4 <_calloc_r+0x58>
   18594:	2a24      	cmp	r2, #36	; 0x24
   18596:	e9c0 3302 	strd	r3, r3, [r0, #8]
   1859a:	bf11      	iteee	ne
   1859c:	f100 0210 	addne.w	r2, r0, #16
   185a0:	6103      	streq	r3, [r0, #16]
   185a2:	f100 0218 	addeq.w	r2, r0, #24
   185a6:	6143      	streq	r3, [r0, #20]
   185a8:	e7e9      	b.n	1857e <_calloc_r+0x22>
   185aa:	2100      	movs	r1, #0
   185ac:	f7fc fa22 	bl	149f4 <memset>
   185b0:	4620      	mov	r0, r4
   185b2:	bd10      	pop	{r4, pc}
   185b4:	f100 0208 	add.w	r2, r0, #8
   185b8:	e7e1      	b.n	1857e <_calloc_r+0x22>
   185ba:	bf00      	nop

000185bc <_close_r>:
   185bc:	b538      	push	{r3, r4, r5, lr}
   185be:	4d07      	ldr	r5, [pc, #28]	; (185dc <_close_r+0x20>)
   185c0:	2200      	movs	r2, #0
   185c2:	4604      	mov	r4, r0
   185c4:	4608      	mov	r0, r1
   185c6:	602a      	str	r2, [r5, #0]
   185c8:	f001 f9cc 	bl	19964 <_close>
   185cc:	1c43      	adds	r3, r0, #1
   185ce:	d000      	beq.n	185d2 <_close_r+0x16>
   185d0:	bd38      	pop	{r3, r4, r5, pc}
   185d2:	682b      	ldr	r3, [r5, #0]
   185d4:	2b00      	cmp	r3, #0
   185d6:	d0fb      	beq.n	185d0 <_close_r+0x14>
   185d8:	6023      	str	r3, [r4, #0]
   185da:	bd38      	pop	{r3, r4, r5, pc}
   185dc:	20009288 	.word	0x20009288

000185e0 <fiprintf>:
   185e0:	b40e      	push	{r1, r2, r3}
   185e2:	b510      	push	{r4, lr}
   185e4:	b083      	sub	sp, #12
   185e6:	ab05      	add	r3, sp, #20
   185e8:	4c06      	ldr	r4, [pc, #24]	; (18604 <fiprintf+0x24>)
   185ea:	f853 2b04 	ldr.w	r2, [r3], #4
   185ee:	9301      	str	r3, [sp, #4]
   185f0:	4601      	mov	r1, r0
   185f2:	6820      	ldr	r0, [r4, #0]
   185f4:	f7ff f870 	bl	176d8 <_vfiprintf_r>
   185f8:	b003      	add	sp, #12
   185fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   185fe:	b003      	add	sp, #12
   18600:	4770      	bx	lr
   18602:	bf00      	nop
   18604:	20000d60 	.word	0x20000d60

00018608 <_fstat_r>:
   18608:	b570      	push	{r4, r5, r6, lr}
   1860a:	460c      	mov	r4, r1
   1860c:	4d08      	ldr	r5, [pc, #32]	; (18630 <_fstat_r+0x28>)
   1860e:	4603      	mov	r3, r0
   18610:	2600      	movs	r6, #0
   18612:	4620      	mov	r0, r4
   18614:	4611      	mov	r1, r2
   18616:	461c      	mov	r4, r3
   18618:	602e      	str	r6, [r5, #0]
   1861a:	f001 f9b1 	bl	19980 <_fstat>
   1861e:	1c43      	adds	r3, r0, #1
   18620:	d000      	beq.n	18624 <_fstat_r+0x1c>
   18622:	bd70      	pop	{r4, r5, r6, pc}
   18624:	682b      	ldr	r3, [r5, #0]
   18626:	2b00      	cmp	r3, #0
   18628:	d0fb      	beq.n	18622 <_fstat_r+0x1a>
   1862a:	6023      	str	r3, [r4, #0]
   1862c:	bd70      	pop	{r4, r5, r6, pc}
   1862e:	bf00      	nop
   18630:	20009288 	.word	0x20009288

00018634 <__sfvwrite_r>:
   18634:	6893      	ldr	r3, [r2, #8]
   18636:	2b00      	cmp	r3, #0
   18638:	f000 80bb 	beq.w	187b2 <__sfvwrite_r+0x17e>
   1863c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18640:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   18644:	fa1f fc83 	uxth.w	ip, r3
   18648:	071b      	lsls	r3, r3, #28
   1864a:	b083      	sub	sp, #12
   1864c:	4617      	mov	r7, r2
   1864e:	4680      	mov	r8, r0
   18650:	460c      	mov	r4, r1
   18652:	d525      	bpl.n	186a0 <__sfvwrite_r+0x6c>
   18654:	690b      	ldr	r3, [r1, #16]
   18656:	b31b      	cbz	r3, 186a0 <__sfvwrite_r+0x6c>
   18658:	f01c 0302 	ands.w	r3, ip, #2
   1865c:	683d      	ldr	r5, [r7, #0]
   1865e:	d02e      	beq.n	186be <__sfvwrite_r+0x8a>
   18660:	f04f 0a00 	mov.w	sl, #0
   18664:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 1891c <__sfvwrite_r+0x2e8>
   18668:	4656      	mov	r6, sl
   1866a:	455e      	cmp	r6, fp
   1866c:	4633      	mov	r3, r6
   1866e:	4652      	mov	r2, sl
   18670:	bf28      	it	cs
   18672:	465b      	movcs	r3, fp
   18674:	4640      	mov	r0, r8
   18676:	2e00      	cmp	r6, #0
   18678:	f000 8088 	beq.w	1878c <__sfvwrite_r+0x158>
   1867c:	69e1      	ldr	r1, [r4, #28]
   1867e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   18682:	47e0      	blx	ip
   18684:	2800      	cmp	r0, #0
   18686:	f340 808a 	ble.w	1879e <__sfvwrite_r+0x16a>
   1868a:	68bb      	ldr	r3, [r7, #8]
   1868c:	1a1b      	subs	r3, r3, r0
   1868e:	4482      	add	sl, r0
   18690:	1a36      	subs	r6, r6, r0
   18692:	60bb      	str	r3, [r7, #8]
   18694:	2b00      	cmp	r3, #0
   18696:	d1e8      	bne.n	1866a <__sfvwrite_r+0x36>
   18698:	2000      	movs	r0, #0
   1869a:	b003      	add	sp, #12
   1869c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186a0:	4621      	mov	r1, r4
   186a2:	4640      	mov	r0, r8
   186a4:	f7fd ffca 	bl	1663c <__swsetup_r>
   186a8:	2800      	cmp	r0, #0
   186aa:	f040 8134 	bne.w	18916 <__sfvwrite_r+0x2e2>
   186ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   186b2:	683d      	ldr	r5, [r7, #0]
   186b4:	fa1f fc83 	uxth.w	ip, r3
   186b8:	f01c 0302 	ands.w	r3, ip, #2
   186bc:	d1d0      	bne.n	18660 <__sfvwrite_r+0x2c>
   186be:	f01c 0901 	ands.w	r9, ip, #1
   186c2:	d178      	bne.n	187b6 <__sfvwrite_r+0x182>
   186c4:	464e      	mov	r6, r9
   186c6:	2e00      	cmp	r6, #0
   186c8:	d05c      	beq.n	18784 <__sfvwrite_r+0x150>
   186ca:	f41c 7f00 	tst.w	ip, #512	; 0x200
   186ce:	6820      	ldr	r0, [r4, #0]
   186d0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   186d4:	f000 80b2 	beq.w	1883c <__sfvwrite_r+0x208>
   186d8:	45b3      	cmp	fp, r6
   186da:	465a      	mov	r2, fp
   186dc:	f200 80e1 	bhi.w	188a2 <__sfvwrite_r+0x26e>
   186e0:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   186e4:	d033      	beq.n	1874e <__sfvwrite_r+0x11a>
   186e6:	6963      	ldr	r3, [r4, #20]
   186e8:	6921      	ldr	r1, [r4, #16]
   186ea:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   186ee:	eba0 0b01 	sub.w	fp, r0, r1
   186f2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   186f6:	f10b 0301 	add.w	r3, fp, #1
   186fa:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   186fe:	4433      	add	r3, r6
   18700:	4553      	cmp	r3, sl
   18702:	4652      	mov	r2, sl
   18704:	bf84      	itt	hi
   18706:	469a      	movhi	sl, r3
   18708:	4652      	movhi	r2, sl
   1870a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   1870e:	f000 80e6 	beq.w	188de <__sfvwrite_r+0x2aa>
   18712:	4611      	mov	r1, r2
   18714:	4640      	mov	r0, r8
   18716:	f7fb fe7b 	bl	14410 <_malloc_r>
   1871a:	2800      	cmp	r0, #0
   1871c:	f000 80f5 	beq.w	1890a <__sfvwrite_r+0x2d6>
   18720:	465a      	mov	r2, fp
   18722:	6921      	ldr	r1, [r4, #16]
   18724:	9001      	str	r0, [sp, #4]
   18726:	f7e8 fde9 	bl	12fc <memcpy>
   1872a:	89a2      	ldrh	r2, [r4, #12]
   1872c:	9b01      	ldr	r3, [sp, #4]
   1872e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   18732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18736:	81a2      	strh	r2, [r4, #12]
   18738:	eb03 000b 	add.w	r0, r3, fp
   1873c:	6123      	str	r3, [r4, #16]
   1873e:	ebaa 030b 	sub.w	r3, sl, fp
   18742:	f8c4 a014 	str.w	sl, [r4, #20]
   18746:	60a3      	str	r3, [r4, #8]
   18748:	6020      	str	r0, [r4, #0]
   1874a:	46b3      	mov	fp, r6
   1874c:	4632      	mov	r2, r6
   1874e:	4649      	mov	r1, r9
   18750:	9201      	str	r2, [sp, #4]
   18752:	f000 f923 	bl	1899c <memmove>
   18756:	68a3      	ldr	r3, [r4, #8]
   18758:	6821      	ldr	r1, [r4, #0]
   1875a:	9a01      	ldr	r2, [sp, #4]
   1875c:	eba3 030b 	sub.w	r3, r3, fp
   18760:	440a      	add	r2, r1
   18762:	46b2      	mov	sl, r6
   18764:	60a3      	str	r3, [r4, #8]
   18766:	6022      	str	r2, [r4, #0]
   18768:	2600      	movs	r6, #0
   1876a:	68b8      	ldr	r0, [r7, #8]
   1876c:	eba0 000a 	sub.w	r0, r0, sl
   18770:	44d1      	add	r9, sl
   18772:	60b8      	str	r0, [r7, #8]
   18774:	2800      	cmp	r0, #0
   18776:	d08f      	beq.n	18698 <__sfvwrite_r+0x64>
   18778:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
   1877c:	fa1f fc8c 	uxth.w	ip, ip
   18780:	2e00      	cmp	r6, #0
   18782:	d1a2      	bne.n	186ca <__sfvwrite_r+0x96>
   18784:	e9d5 9600 	ldrd	r9, r6, [r5]
   18788:	3508      	adds	r5, #8
   1878a:	e79c      	b.n	186c6 <__sfvwrite_r+0x92>
   1878c:	e9d5 a600 	ldrd	sl, r6, [r5]
   18790:	3508      	adds	r5, #8
   18792:	e76a      	b.n	1866a <__sfvwrite_r+0x36>
   18794:	4621      	mov	r1, r4
   18796:	4640      	mov	r0, r8
   18798:	f7fe f8da 	bl	16950 <_fflush_r>
   1879c:	b378      	cbz	r0, 187fe <__sfvwrite_r+0x1ca>
   1879e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   187a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   187a6:	f04f 30ff 	mov.w	r0, #4294967295
   187aa:	81a3      	strh	r3, [r4, #12]
   187ac:	b003      	add	sp, #12
   187ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187b2:	2000      	movs	r0, #0
   187b4:	4770      	bx	lr
   187b6:	461e      	mov	r6, r3
   187b8:	46aa      	mov	sl, r5
   187ba:	4699      	mov	r9, r3
   187bc:	4618      	mov	r0, r3
   187be:	461d      	mov	r5, r3
   187c0:	b34e      	cbz	r6, 18816 <__sfvwrite_r+0x1e2>
   187c2:	b380      	cbz	r0, 18826 <__sfvwrite_r+0x1f2>
   187c4:	464a      	mov	r2, r9
   187c6:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   187ca:	6820      	ldr	r0, [r4, #0]
   187cc:	42b2      	cmp	r2, r6
   187ce:	bf28      	it	cs
   187d0:	4632      	movcs	r2, r6
   187d2:	4288      	cmp	r0, r1
   187d4:	d904      	bls.n	187e0 <__sfvwrite_r+0x1ac>
   187d6:	68a1      	ldr	r1, [r4, #8]
   187d8:	eb03 0b01 	add.w	fp, r3, r1
   187dc:	455a      	cmp	r2, fp
   187de:	dc70      	bgt.n	188c2 <__sfvwrite_r+0x28e>
   187e0:	4293      	cmp	r3, r2
   187e2:	dc61      	bgt.n	188a8 <__sfvwrite_r+0x274>
   187e4:	69e1      	ldr	r1, [r4, #28]
   187e6:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   187ea:	462a      	mov	r2, r5
   187ec:	4640      	mov	r0, r8
   187ee:	47e0      	blx	ip
   187f0:	f1b0 0b00 	subs.w	fp, r0, #0
   187f4:	ddd3      	ble.n	1879e <__sfvwrite_r+0x16a>
   187f6:	ebb9 090b 	subs.w	r9, r9, fp
   187fa:	d0cb      	beq.n	18794 <__sfvwrite_r+0x160>
   187fc:	2001      	movs	r0, #1
   187fe:	68bb      	ldr	r3, [r7, #8]
   18800:	eba3 030b 	sub.w	r3, r3, fp
   18804:	445d      	add	r5, fp
   18806:	eba6 060b 	sub.w	r6, r6, fp
   1880a:	60bb      	str	r3, [r7, #8]
   1880c:	2b00      	cmp	r3, #0
   1880e:	f43f af43 	beq.w	18698 <__sfvwrite_r+0x64>
   18812:	2e00      	cmp	r6, #0
   18814:	d1d5      	bne.n	187c2 <__sfvwrite_r+0x18e>
   18816:	f10a 0308 	add.w	r3, sl, #8
   1881a:	e953 5602 	ldrd	r5, r6, [r3, #-8]
   1881e:	469a      	mov	sl, r3
   18820:	3308      	adds	r3, #8
   18822:	2e00      	cmp	r6, #0
   18824:	d0f9      	beq.n	1881a <__sfvwrite_r+0x1e6>
   18826:	4632      	mov	r2, r6
   18828:	210a      	movs	r1, #10
   1882a:	4628      	mov	r0, r5
   1882c:	f7e7 fe48 	bl	4c0 <memchr>
   18830:	2800      	cmp	r0, #0
   18832:	d067      	beq.n	18904 <__sfvwrite_r+0x2d0>
   18834:	3001      	adds	r0, #1
   18836:	eba0 0905 	sub.w	r9, r0, r5
   1883a:	e7c3      	b.n	187c4 <__sfvwrite_r+0x190>
   1883c:	6923      	ldr	r3, [r4, #16]
   1883e:	4283      	cmp	r3, r0
   18840:	d317      	bcc.n	18872 <__sfvwrite_r+0x23e>
   18842:	6963      	ldr	r3, [r4, #20]
   18844:	42b3      	cmp	r3, r6
   18846:	d814      	bhi.n	18872 <__sfvwrite_r+0x23e>
   18848:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1884c:	42b2      	cmp	r2, r6
   1884e:	bf28      	it	cs
   18850:	4632      	movcs	r2, r6
   18852:	69e1      	ldr	r1, [r4, #28]
   18854:	fb92 f2f3 	sdiv	r2, r2, r3
   18858:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   1885c:	fb02 f303 	mul.w	r3, r2, r3
   18860:	4640      	mov	r0, r8
   18862:	464a      	mov	r2, r9
   18864:	47e0      	blx	ip
   18866:	f1b0 0a00 	subs.w	sl, r0, #0
   1886a:	dd98      	ble.n	1879e <__sfvwrite_r+0x16a>
   1886c:	eba6 060a 	sub.w	r6, r6, sl
   18870:	e77b      	b.n	1876a <__sfvwrite_r+0x136>
   18872:	45b3      	cmp	fp, r6
   18874:	46da      	mov	sl, fp
   18876:	bf28      	it	cs
   18878:	46b2      	movcs	sl, r6
   1887a:	4652      	mov	r2, sl
   1887c:	4649      	mov	r1, r9
   1887e:	f000 f88d 	bl	1899c <memmove>
   18882:	68a3      	ldr	r3, [r4, #8]
   18884:	6822      	ldr	r2, [r4, #0]
   18886:	eba3 030a 	sub.w	r3, r3, sl
   1888a:	4452      	add	r2, sl
   1888c:	60a3      	str	r3, [r4, #8]
   1888e:	6022      	str	r2, [r4, #0]
   18890:	2b00      	cmp	r3, #0
   18892:	d1eb      	bne.n	1886c <__sfvwrite_r+0x238>
   18894:	4621      	mov	r1, r4
   18896:	4640      	mov	r0, r8
   18898:	f7fe f85a 	bl	16950 <_fflush_r>
   1889c:	2800      	cmp	r0, #0
   1889e:	d0e5      	beq.n	1886c <__sfvwrite_r+0x238>
   188a0:	e77d      	b.n	1879e <__sfvwrite_r+0x16a>
   188a2:	46b3      	mov	fp, r6
   188a4:	4632      	mov	r2, r6
   188a6:	e752      	b.n	1874e <__sfvwrite_r+0x11a>
   188a8:	4629      	mov	r1, r5
   188aa:	9201      	str	r2, [sp, #4]
   188ac:	f000 f876 	bl	1899c <memmove>
   188b0:	9a01      	ldr	r2, [sp, #4]
   188b2:	68a3      	ldr	r3, [r4, #8]
   188b4:	1a9b      	subs	r3, r3, r2
   188b6:	60a3      	str	r3, [r4, #8]
   188b8:	6823      	ldr	r3, [r4, #0]
   188ba:	4413      	add	r3, r2
   188bc:	6023      	str	r3, [r4, #0]
   188be:	4693      	mov	fp, r2
   188c0:	e799      	b.n	187f6 <__sfvwrite_r+0x1c2>
   188c2:	4629      	mov	r1, r5
   188c4:	465a      	mov	r2, fp
   188c6:	f000 f869 	bl	1899c <memmove>
   188ca:	6823      	ldr	r3, [r4, #0]
   188cc:	445b      	add	r3, fp
   188ce:	6023      	str	r3, [r4, #0]
   188d0:	4621      	mov	r1, r4
   188d2:	4640      	mov	r0, r8
   188d4:	f7fe f83c 	bl	16950 <_fflush_r>
   188d8:	2800      	cmp	r0, #0
   188da:	d08c      	beq.n	187f6 <__sfvwrite_r+0x1c2>
   188dc:	e75f      	b.n	1879e <__sfvwrite_r+0x16a>
   188de:	4640      	mov	r0, r8
   188e0:	f000 f8ee 	bl	18ac0 <_realloc_r>
   188e4:	4603      	mov	r3, r0
   188e6:	2800      	cmp	r0, #0
   188e8:	f47f af26 	bne.w	18738 <__sfvwrite_r+0x104>
   188ec:	6921      	ldr	r1, [r4, #16]
   188ee:	4640      	mov	r0, r8
   188f0:	f7fe f938 	bl	16b64 <_free_r>
   188f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   188f8:	220c      	movs	r2, #12
   188fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   188fe:	f8c8 2000 	str.w	r2, [r8]
   18902:	e74e      	b.n	187a2 <__sfvwrite_r+0x16e>
   18904:	1c72      	adds	r2, r6, #1
   18906:	4691      	mov	r9, r2
   18908:	e75d      	b.n	187c6 <__sfvwrite_r+0x192>
   1890a:	220c      	movs	r2, #12
   1890c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   18910:	f8c8 2000 	str.w	r2, [r8]
   18914:	e745      	b.n	187a2 <__sfvwrite_r+0x16e>
   18916:	f04f 30ff 	mov.w	r0, #4294967295
   1891a:	e6be      	b.n	1869a <__sfvwrite_r+0x66>
   1891c:	7ffffc00 	.word	0x7ffffc00

00018920 <_isatty_r>:
   18920:	b538      	push	{r3, r4, r5, lr}
   18922:	4d07      	ldr	r5, [pc, #28]	; (18940 <_isatty_r+0x20>)
   18924:	2200      	movs	r2, #0
   18926:	4604      	mov	r4, r0
   18928:	4608      	mov	r0, r1
   1892a:	602a      	str	r2, [r5, #0]
   1892c:	f001 f81f 	bl	1996e <_isatty>
   18930:	1c43      	adds	r3, r0, #1
   18932:	d000      	beq.n	18936 <_isatty_r+0x16>
   18934:	bd38      	pop	{r3, r4, r5, pc}
   18936:	682b      	ldr	r3, [r5, #0]
   18938:	2b00      	cmp	r3, #0
   1893a:	d0fb      	beq.n	18934 <_isatty_r+0x14>
   1893c:	6023      	str	r3, [r4, #0]
   1893e:	bd38      	pop	{r3, r4, r5, pc}
   18940:	20009288 	.word	0x20009288

00018944 <_lseek_r>:
   18944:	b538      	push	{r3, r4, r5, lr}
   18946:	460c      	mov	r4, r1
   18948:	4d08      	ldr	r5, [pc, #32]	; (1896c <_lseek_r+0x28>)
   1894a:	4684      	mov	ip, r0
   1894c:	4611      	mov	r1, r2
   1894e:	4620      	mov	r0, r4
   18950:	461a      	mov	r2, r3
   18952:	2300      	movs	r3, #0
   18954:	602b      	str	r3, [r5, #0]
   18956:	4664      	mov	r4, ip
   18958:	f001 f807 	bl	1996a <_lseek>
   1895c:	1c43      	adds	r3, r0, #1
   1895e:	d000      	beq.n	18962 <_lseek_r+0x1e>
   18960:	bd38      	pop	{r3, r4, r5, pc}
   18962:	682b      	ldr	r3, [r5, #0]
   18964:	2b00      	cmp	r3, #0
   18966:	d0fb      	beq.n	18960 <_lseek_r+0x1c>
   18968:	6023      	str	r3, [r4, #0]
   1896a:	bd38      	pop	{r3, r4, r5, pc}
   1896c:	20009288 	.word	0x20009288

00018970 <__ascii_mbtowc>:
   18970:	b082      	sub	sp, #8
   18972:	b149      	cbz	r1, 18988 <__ascii_mbtowc+0x18>
   18974:	b15a      	cbz	r2, 1898e <__ascii_mbtowc+0x1e>
   18976:	b16b      	cbz	r3, 18994 <__ascii_mbtowc+0x24>
   18978:	7813      	ldrb	r3, [r2, #0]
   1897a:	600b      	str	r3, [r1, #0]
   1897c:	7812      	ldrb	r2, [r2, #0]
   1897e:	1e10      	subs	r0, r2, #0
   18980:	bf18      	it	ne
   18982:	2001      	movne	r0, #1
   18984:	b002      	add	sp, #8
   18986:	4770      	bx	lr
   18988:	a901      	add	r1, sp, #4
   1898a:	2a00      	cmp	r2, #0
   1898c:	d1f3      	bne.n	18976 <__ascii_mbtowc+0x6>
   1898e:	4610      	mov	r0, r2
   18990:	b002      	add	sp, #8
   18992:	4770      	bx	lr
   18994:	f06f 0001 	mvn.w	r0, #1
   18998:	e7f4      	b.n	18984 <__ascii_mbtowc+0x14>
   1899a:	bf00      	nop

0001899c <memmove>:
   1899c:	4288      	cmp	r0, r1
   1899e:	d90d      	bls.n	189bc <memmove+0x20>
   189a0:	188b      	adds	r3, r1, r2
   189a2:	4283      	cmp	r3, r0
   189a4:	d90a      	bls.n	189bc <memmove+0x20>
   189a6:	eb00 0c02 	add.w	ip, r0, r2
   189aa:	b1ba      	cbz	r2, 189dc <memmove+0x40>
   189ac:	4662      	mov	r2, ip
   189ae:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   189b2:	f802 cd01 	strb.w	ip, [r2, #-1]!
   189b6:	4299      	cmp	r1, r3
   189b8:	d1f9      	bne.n	189ae <memmove+0x12>
   189ba:	4770      	bx	lr
   189bc:	2a0f      	cmp	r2, #15
   189be:	d80e      	bhi.n	189de <memmove+0x42>
   189c0:	4603      	mov	r3, r0
   189c2:	f102 3cff 	add.w	ip, r2, #4294967295
   189c6:	b14a      	cbz	r2, 189dc <memmove+0x40>
   189c8:	f10c 0c01 	add.w	ip, ip, #1
   189cc:	3b01      	subs	r3, #1
   189ce:	448c      	add	ip, r1
   189d0:	f811 2b01 	ldrb.w	r2, [r1], #1
   189d4:	f803 2f01 	strb.w	r2, [r3, #1]!
   189d8:	4561      	cmp	r1, ip
   189da:	d1f9      	bne.n	189d0 <memmove+0x34>
   189dc:	4770      	bx	lr
   189de:	ea40 0301 	orr.w	r3, r0, r1
   189e2:	079b      	lsls	r3, r3, #30
   189e4:	d150      	bne.n	18a88 <memmove+0xec>
   189e6:	f1a2 0310 	sub.w	r3, r2, #16
   189ea:	b570      	push	{r4, r5, r6, lr}
   189ec:	f101 0c20 	add.w	ip, r1, #32
   189f0:	f023 050f 	bic.w	r5, r3, #15
   189f4:	f101 0e10 	add.w	lr, r1, #16
   189f8:	f100 0410 	add.w	r4, r0, #16
   189fc:	44ac      	add	ip, r5
   189fe:	091b      	lsrs	r3, r3, #4
   18a00:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   18a04:	f844 5c10 	str.w	r5, [r4, #-16]
   18a08:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   18a0c:	f844 5c0c 	str.w	r5, [r4, #-12]
   18a10:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   18a14:	f844 5c08 	str.w	r5, [r4, #-8]
   18a18:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   18a1c:	f844 5c04 	str.w	r5, [r4, #-4]
   18a20:	f10e 0e10 	add.w	lr, lr, #16
   18a24:	45e6      	cmp	lr, ip
   18a26:	f104 0410 	add.w	r4, r4, #16
   18a2a:	d1e9      	bne.n	18a00 <memmove+0x64>
   18a2c:	3301      	adds	r3, #1
   18a2e:	f012 0f0c 	tst.w	r2, #12
   18a32:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   18a36:	f002 040f 	and.w	r4, r2, #15
   18a3a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   18a3e:	d027      	beq.n	18a90 <memmove+0xf4>
   18a40:	3c04      	subs	r4, #4
   18a42:	f024 0603 	bic.w	r6, r4, #3
   18a46:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   18a4a:	441e      	add	r6, r3
   18a4c:	1f1c      	subs	r4, r3, #4
   18a4e:	468e      	mov	lr, r1
   18a50:	f85e 5b04 	ldr.w	r5, [lr], #4
   18a54:	f844 5f04 	str.w	r5, [r4, #4]!
   18a58:	42b4      	cmp	r4, r6
   18a5a:	d1f9      	bne.n	18a50 <memmove+0xb4>
   18a5c:	f10c 0401 	add.w	r4, ip, #1
   18a60:	f002 0203 	and.w	r2, r2, #3
   18a64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   18a68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   18a6c:	f102 3cff 	add.w	ip, r2, #4294967295
   18a70:	b14a      	cbz	r2, 18a86 <memmove+0xea>
   18a72:	f10c 0c01 	add.w	ip, ip, #1
   18a76:	3b01      	subs	r3, #1
   18a78:	448c      	add	ip, r1
   18a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   18a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
   18a82:	4561      	cmp	r1, ip
   18a84:	d1f9      	bne.n	18a7a <memmove+0xde>
   18a86:	bd70      	pop	{r4, r5, r6, pc}
   18a88:	f102 3cff 	add.w	ip, r2, #4294967295
   18a8c:	4603      	mov	r3, r0
   18a8e:	e79b      	b.n	189c8 <memmove+0x2c>
   18a90:	4622      	mov	r2, r4
   18a92:	e7eb      	b.n	18a6c <memmove+0xd0>

00018a94 <_read_r>:
   18a94:	b538      	push	{r3, r4, r5, lr}
   18a96:	460c      	mov	r4, r1
   18a98:	4d08      	ldr	r5, [pc, #32]	; (18abc <_read_r+0x28>)
   18a9a:	4684      	mov	ip, r0
   18a9c:	4611      	mov	r1, r2
   18a9e:	4620      	mov	r0, r4
   18aa0:	461a      	mov	r2, r3
   18aa2:	2300      	movs	r3, #0
   18aa4:	602b      	str	r3, [r5, #0]
   18aa6:	4664      	mov	r4, ip
   18aa8:	f000 ff50 	bl	1994c <_read>
   18aac:	1c43      	adds	r3, r0, #1
   18aae:	d000      	beq.n	18ab2 <_read_r+0x1e>
   18ab0:	bd38      	pop	{r3, r4, r5, pc}
   18ab2:	682b      	ldr	r3, [r5, #0]
   18ab4:	2b00      	cmp	r3, #0
   18ab6:	d0fb      	beq.n	18ab0 <_read_r+0x1c>
   18ab8:	6023      	str	r3, [r4, #0]
   18aba:	bd38      	pop	{r3, r4, r5, pc}
   18abc:	20009288 	.word	0x20009288

00018ac0 <_realloc_r>:
   18ac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ac4:	4616      	mov	r6, r2
   18ac6:	2900      	cmp	r1, #0
   18ac8:	f000 809d 	beq.w	18c06 <_realloc_r+0x146>
   18acc:	f106 050b 	add.w	r5, r6, #11
   18ad0:	4607      	mov	r7, r0
   18ad2:	460c      	mov	r4, r1
   18ad4:	f7fb ffe0 	bl	14a98 <__malloc_lock>
   18ad8:	2d16      	cmp	r5, #22
   18ada:	d85f      	bhi.n	18b9c <_realloc_r+0xdc>
   18adc:	2510      	movs	r5, #16
   18ade:	462a      	mov	r2, r5
   18ae0:	42ae      	cmp	r6, r5
   18ae2:	d860      	bhi.n	18ba6 <_realloc_r+0xe6>
   18ae4:	f854 ec04 	ldr.w	lr, [r4, #-4]
   18ae8:	f02e 0803 	bic.w	r8, lr, #3
   18aec:	4590      	cmp	r8, r2
   18aee:	f1a4 0908 	sub.w	r9, r4, #8
   18af2:	da63      	bge.n	18bbc <_realloc_r+0xfc>
   18af4:	4bbd      	ldr	r3, [pc, #756]	; (18dec <_realloc_r+0x32c>)
   18af6:	6899      	ldr	r1, [r3, #8]
   18af8:	eb09 0c08 	add.w	ip, r9, r8
   18afc:	4561      	cmp	r1, ip
   18afe:	f8dc 0004 	ldr.w	r0, [ip, #4]
   18b02:	f000 8096 	beq.w	18c32 <_realloc_r+0x172>
   18b06:	f020 0301 	bic.w	r3, r0, #1
   18b0a:	4463      	add	r3, ip
   18b0c:	685b      	ldr	r3, [r3, #4]
   18b0e:	07db      	lsls	r3, r3, #31
   18b10:	d46d      	bmi.n	18bee <_realloc_r+0x12e>
   18b12:	f020 0003 	bic.w	r0, r0, #3
   18b16:	eb08 0300 	add.w	r3, r8, r0
   18b1a:	4293      	cmp	r3, r2
   18b1c:	da49      	bge.n	18bb2 <_realloc_r+0xf2>
   18b1e:	f01e 0f01 	tst.w	lr, #1
   18b22:	d111      	bne.n	18b48 <_realloc_r+0x88>
   18b24:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18b28:	eba9 0b03 	sub.w	fp, r9, r3
   18b2c:	f8db 1004 	ldr.w	r1, [fp, #4]
   18b30:	f021 0103 	bic.w	r1, r1, #3
   18b34:	4408      	add	r0, r1
   18b36:	4440      	add	r0, r8
   18b38:	4290      	cmp	r0, r2
   18b3a:	f280 8112 	bge.w	18d62 <_realloc_r+0x2a2>
   18b3e:	eb08 0301 	add.w	r3, r8, r1
   18b42:	4293      	cmp	r3, r2
   18b44:	f280 80e7 	bge.w	18d16 <_realloc_r+0x256>
   18b48:	4631      	mov	r1, r6
   18b4a:	4638      	mov	r0, r7
   18b4c:	f7fb fc60 	bl	14410 <_malloc_r>
   18b50:	4606      	mov	r6, r0
   18b52:	b1e8      	cbz	r0, 18b90 <_realloc_r+0xd0>
   18b54:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18b58:	f023 0301 	bic.w	r3, r3, #1
   18b5c:	444b      	add	r3, r9
   18b5e:	f1a0 0208 	sub.w	r2, r0, #8
   18b62:	4293      	cmp	r3, r2
   18b64:	f000 80d1 	beq.w	18d0a <_realloc_r+0x24a>
   18b68:	f1a8 0204 	sub.w	r2, r8, #4
   18b6c:	2a24      	cmp	r2, #36	; 0x24
   18b6e:	f200 80f4 	bhi.w	18d5a <_realloc_r+0x29a>
   18b72:	2a13      	cmp	r2, #19
   18b74:	f200 80ab 	bhi.w	18cce <_realloc_r+0x20e>
   18b78:	4603      	mov	r3, r0
   18b7a:	4622      	mov	r2, r4
   18b7c:	6811      	ldr	r1, [r2, #0]
   18b7e:	6019      	str	r1, [r3, #0]
   18b80:	6851      	ldr	r1, [r2, #4]
   18b82:	6059      	str	r1, [r3, #4]
   18b84:	6892      	ldr	r2, [r2, #8]
   18b86:	609a      	str	r2, [r3, #8]
   18b88:	4621      	mov	r1, r4
   18b8a:	4638      	mov	r0, r7
   18b8c:	f7fd ffea 	bl	16b64 <_free_r>
   18b90:	4638      	mov	r0, r7
   18b92:	f7fb ff87 	bl	14aa4 <__malloc_unlock>
   18b96:	4630      	mov	r0, r6
   18b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b9c:	f025 0507 	bic.w	r5, r5, #7
   18ba0:	2d00      	cmp	r5, #0
   18ba2:	462a      	mov	r2, r5
   18ba4:	da9c      	bge.n	18ae0 <_realloc_r+0x20>
   18ba6:	230c      	movs	r3, #12
   18ba8:	603b      	str	r3, [r7, #0]
   18baa:	2600      	movs	r6, #0
   18bac:	4630      	mov	r0, r6
   18bae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bb2:	4698      	mov	r8, r3
   18bb4:	e9dc 2302 	ldrd	r2, r3, [ip, #8]
   18bb8:	60d3      	str	r3, [r2, #12]
   18bba:	609a      	str	r2, [r3, #8]
   18bbc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18bc0:	eba8 0205 	sub.w	r2, r8, r5
   18bc4:	2a0f      	cmp	r2, #15
   18bc6:	f003 0301 	and.w	r3, r3, #1
   18bca:	eb09 0008 	add.w	r0, r9, r8
   18bce:	d81f      	bhi.n	18c10 <_realloc_r+0x150>
   18bd0:	ea48 0303 	orr.w	r3, r8, r3
   18bd4:	f8c9 3004 	str.w	r3, [r9, #4]
   18bd8:	6843      	ldr	r3, [r0, #4]
   18bda:	f043 0301 	orr.w	r3, r3, #1
   18bde:	6043      	str	r3, [r0, #4]
   18be0:	4638      	mov	r0, r7
   18be2:	4626      	mov	r6, r4
   18be4:	f7fb ff5e 	bl	14aa4 <__malloc_unlock>
   18be8:	4630      	mov	r0, r6
   18bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bee:	f01e 0f01 	tst.w	lr, #1
   18bf2:	d1a9      	bne.n	18b48 <_realloc_r+0x88>
   18bf4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   18bf8:	eba9 0b03 	sub.w	fp, r9, r3
   18bfc:	f8db 1004 	ldr.w	r1, [fp, #4]
   18c00:	f021 0103 	bic.w	r1, r1, #3
   18c04:	e79b      	b.n	18b3e <_realloc_r+0x7e>
   18c06:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c0a:	4611      	mov	r1, r2
   18c0c:	f7fb bc00 	b.w	14410 <_malloc_r>
   18c10:	eb09 0105 	add.w	r1, r9, r5
   18c14:	432b      	orrs	r3, r5
   18c16:	f042 0201 	orr.w	r2, r2, #1
   18c1a:	f8c9 3004 	str.w	r3, [r9, #4]
   18c1e:	604a      	str	r2, [r1, #4]
   18c20:	6843      	ldr	r3, [r0, #4]
   18c22:	f043 0301 	orr.w	r3, r3, #1
   18c26:	6043      	str	r3, [r0, #4]
   18c28:	3108      	adds	r1, #8
   18c2a:	4638      	mov	r0, r7
   18c2c:	f7fd ff9a 	bl	16b64 <_free_r>
   18c30:	e7d6      	b.n	18be0 <_realloc_r+0x120>
   18c32:	f020 0003 	bic.w	r0, r0, #3
   18c36:	eb08 0100 	add.w	r1, r8, r0
   18c3a:	f105 0c10 	add.w	ip, r5, #16
   18c3e:	4561      	cmp	r1, ip
   18c40:	da50      	bge.n	18ce4 <_realloc_r+0x224>
   18c42:	f01e 0f01 	tst.w	lr, #1
   18c46:	f47f af7f 	bne.w	18b48 <_realloc_r+0x88>
   18c4a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   18c4e:	eba9 0b01 	sub.w	fp, r9, r1
   18c52:	f8db 1004 	ldr.w	r1, [fp, #4]
   18c56:	f021 0103 	bic.w	r1, r1, #3
   18c5a:	4408      	add	r0, r1
   18c5c:	eb00 0a08 	add.w	sl, r0, r8
   18c60:	45d4      	cmp	ip, sl
   18c62:	f73f af6c 	bgt.w	18b3e <_realloc_r+0x7e>
   18c66:	465e      	mov	r6, fp
   18c68:	f8db 100c 	ldr.w	r1, [fp, #12]
   18c6c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   18c70:	f1a8 0204 	sub.w	r2, r8, #4
   18c74:	2a24      	cmp	r2, #36	; 0x24
   18c76:	60c1      	str	r1, [r0, #12]
   18c78:	6088      	str	r0, [r1, #8]
   18c7a:	f200 80dc 	bhi.w	18e36 <_realloc_r+0x376>
   18c7e:	2a13      	cmp	r2, #19
   18c80:	f240 80d7 	bls.w	18e32 <_realloc_r+0x372>
   18c84:	6821      	ldr	r1, [r4, #0]
   18c86:	f8cb 1008 	str.w	r1, [fp, #8]
   18c8a:	6861      	ldr	r1, [r4, #4]
   18c8c:	f8cb 100c 	str.w	r1, [fp, #12]
   18c90:	2a1b      	cmp	r2, #27
   18c92:	f200 80e0 	bhi.w	18e56 <_realloc_r+0x396>
   18c96:	3408      	adds	r4, #8
   18c98:	f10b 0210 	add.w	r2, fp, #16
   18c9c:	6821      	ldr	r1, [r4, #0]
   18c9e:	6011      	str	r1, [r2, #0]
   18ca0:	6861      	ldr	r1, [r4, #4]
   18ca2:	6051      	str	r1, [r2, #4]
   18ca4:	68a1      	ldr	r1, [r4, #8]
   18ca6:	6091      	str	r1, [r2, #8]
   18ca8:	eb0b 0105 	add.w	r1, fp, r5
   18cac:	ebaa 0205 	sub.w	r2, sl, r5
   18cb0:	f042 0201 	orr.w	r2, r2, #1
   18cb4:	6099      	str	r1, [r3, #8]
   18cb6:	604a      	str	r2, [r1, #4]
   18cb8:	f8db 3004 	ldr.w	r3, [fp, #4]
   18cbc:	f003 0301 	and.w	r3, r3, #1
   18cc0:	431d      	orrs	r5, r3
   18cc2:	4638      	mov	r0, r7
   18cc4:	f8cb 5004 	str.w	r5, [fp, #4]
   18cc8:	f7fb feec 	bl	14aa4 <__malloc_unlock>
   18ccc:	e76e      	b.n	18bac <_realloc_r+0xec>
   18cce:	6823      	ldr	r3, [r4, #0]
   18cd0:	6003      	str	r3, [r0, #0]
   18cd2:	6863      	ldr	r3, [r4, #4]
   18cd4:	6043      	str	r3, [r0, #4]
   18cd6:	2a1b      	cmp	r2, #27
   18cd8:	d869      	bhi.n	18dae <_realloc_r+0x2ee>
   18cda:	f104 0208 	add.w	r2, r4, #8
   18cde:	f100 0308 	add.w	r3, r0, #8
   18ce2:	e74b      	b.n	18b7c <_realloc_r+0xbc>
   18ce4:	eb09 0205 	add.w	r2, r9, r5
   18ce8:	609a      	str	r2, [r3, #8]
   18cea:	1b4b      	subs	r3, r1, r5
   18cec:	f043 0301 	orr.w	r3, r3, #1
   18cf0:	6053      	str	r3, [r2, #4]
   18cf2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18cf6:	f003 0301 	and.w	r3, r3, #1
   18cfa:	431d      	orrs	r5, r3
   18cfc:	4638      	mov	r0, r7
   18cfe:	f844 5c04 	str.w	r5, [r4, #-4]
   18d02:	f7fb fecf 	bl	14aa4 <__malloc_unlock>
   18d06:	4626      	mov	r6, r4
   18d08:	e750      	b.n	18bac <_realloc_r+0xec>
   18d0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   18d0e:	f023 0303 	bic.w	r3, r3, #3
   18d12:	4498      	add	r8, r3
   18d14:	e752      	b.n	18bbc <_realloc_r+0xfc>
   18d16:	465e      	mov	r6, fp
   18d18:	f8db 100c 	ldr.w	r1, [fp, #12]
   18d1c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   18d20:	f1a8 0204 	sub.w	r2, r8, #4
   18d24:	2a24      	cmp	r2, #36	; 0x24
   18d26:	60c1      	str	r1, [r0, #12]
   18d28:	6088      	str	r0, [r1, #8]
   18d2a:	d84d      	bhi.n	18dc8 <_realloc_r+0x308>
   18d2c:	2a13      	cmp	r2, #19
   18d2e:	d949      	bls.n	18dc4 <_realloc_r+0x304>
   18d30:	6821      	ldr	r1, [r4, #0]
   18d32:	f8cb 1008 	str.w	r1, [fp, #8]
   18d36:	6861      	ldr	r1, [r4, #4]
   18d38:	f8cb 100c 	str.w	r1, [fp, #12]
   18d3c:	2a1b      	cmp	r2, #27
   18d3e:	d857      	bhi.n	18df0 <_realloc_r+0x330>
   18d40:	3408      	adds	r4, #8
   18d42:	f10b 0210 	add.w	r2, fp, #16
   18d46:	4698      	mov	r8, r3
   18d48:	6823      	ldr	r3, [r4, #0]
   18d4a:	6013      	str	r3, [r2, #0]
   18d4c:	6863      	ldr	r3, [r4, #4]
   18d4e:	6053      	str	r3, [r2, #4]
   18d50:	68a3      	ldr	r3, [r4, #8]
   18d52:	6093      	str	r3, [r2, #8]
   18d54:	46d9      	mov	r9, fp
   18d56:	4634      	mov	r4, r6
   18d58:	e730      	b.n	18bbc <_realloc_r+0xfc>
   18d5a:	4621      	mov	r1, r4
   18d5c:	f7ff fe1e 	bl	1899c <memmove>
   18d60:	e712      	b.n	18b88 <_realloc_r+0xc8>
   18d62:	e9dc 1302 	ldrd	r1, r3, [ip, #8]
   18d66:	465e      	mov	r6, fp
   18d68:	60cb      	str	r3, [r1, #12]
   18d6a:	6099      	str	r1, [r3, #8]
   18d6c:	f856 1f08 	ldr.w	r1, [r6, #8]!
   18d70:	f8db 300c 	ldr.w	r3, [fp, #12]
   18d74:	60cb      	str	r3, [r1, #12]
   18d76:	f1a8 0204 	sub.w	r2, r8, #4
   18d7a:	2a24      	cmp	r2, #36	; 0x24
   18d7c:	6099      	str	r1, [r3, #8]
   18d7e:	d82d      	bhi.n	18ddc <_realloc_r+0x31c>
   18d80:	2a13      	cmp	r2, #19
   18d82:	d929      	bls.n	18dd8 <_realloc_r+0x318>
   18d84:	6823      	ldr	r3, [r4, #0]
   18d86:	f8cb 3008 	str.w	r3, [fp, #8]
   18d8a:	6863      	ldr	r3, [r4, #4]
   18d8c:	f8cb 300c 	str.w	r3, [fp, #12]
   18d90:	2a1b      	cmp	r2, #27
   18d92:	d842      	bhi.n	18e1a <_realloc_r+0x35a>
   18d94:	3408      	adds	r4, #8
   18d96:	f10b 0310 	add.w	r3, fp, #16
   18d9a:	6822      	ldr	r2, [r4, #0]
   18d9c:	601a      	str	r2, [r3, #0]
   18d9e:	6862      	ldr	r2, [r4, #4]
   18da0:	605a      	str	r2, [r3, #4]
   18da2:	68a2      	ldr	r2, [r4, #8]
   18da4:	609a      	str	r2, [r3, #8]
   18da6:	4680      	mov	r8, r0
   18da8:	46d9      	mov	r9, fp
   18daa:	4634      	mov	r4, r6
   18dac:	e706      	b.n	18bbc <_realloc_r+0xfc>
   18dae:	68a3      	ldr	r3, [r4, #8]
   18db0:	6083      	str	r3, [r0, #8]
   18db2:	68e3      	ldr	r3, [r4, #12]
   18db4:	60c3      	str	r3, [r0, #12]
   18db6:	2a24      	cmp	r2, #36	; 0x24
   18db8:	d026      	beq.n	18e08 <_realloc_r+0x348>
   18dba:	f104 0210 	add.w	r2, r4, #16
   18dbe:	f100 0310 	add.w	r3, r0, #16
   18dc2:	e6db      	b.n	18b7c <_realloc_r+0xbc>
   18dc4:	4632      	mov	r2, r6
   18dc6:	e7be      	b.n	18d46 <_realloc_r+0x286>
   18dc8:	4621      	mov	r1, r4
   18dca:	4630      	mov	r0, r6
   18dcc:	4698      	mov	r8, r3
   18dce:	46d9      	mov	r9, fp
   18dd0:	f7ff fde4 	bl	1899c <memmove>
   18dd4:	4634      	mov	r4, r6
   18dd6:	e6f1      	b.n	18bbc <_realloc_r+0xfc>
   18dd8:	4633      	mov	r3, r6
   18dda:	e7de      	b.n	18d9a <_realloc_r+0x2da>
   18ddc:	4621      	mov	r1, r4
   18dde:	4680      	mov	r8, r0
   18de0:	4630      	mov	r0, r6
   18de2:	f7ff fddb 	bl	1899c <memmove>
   18de6:	46d9      	mov	r9, fp
   18de8:	4634      	mov	r4, r6
   18dea:	e6e7      	b.n	18bbc <_realloc_r+0xfc>
   18dec:	20000950 	.word	0x20000950
   18df0:	68a1      	ldr	r1, [r4, #8]
   18df2:	f8cb 1010 	str.w	r1, [fp, #16]
   18df6:	68e1      	ldr	r1, [r4, #12]
   18df8:	f8cb 1014 	str.w	r1, [fp, #20]
   18dfc:	2a24      	cmp	r2, #36	; 0x24
   18dfe:	d020      	beq.n	18e42 <_realloc_r+0x382>
   18e00:	3410      	adds	r4, #16
   18e02:	f10b 0218 	add.w	r2, fp, #24
   18e06:	e79e      	b.n	18d46 <_realloc_r+0x286>
   18e08:	6923      	ldr	r3, [r4, #16]
   18e0a:	6103      	str	r3, [r0, #16]
   18e0c:	6961      	ldr	r1, [r4, #20]
   18e0e:	6141      	str	r1, [r0, #20]
   18e10:	f104 0218 	add.w	r2, r4, #24
   18e14:	f100 0318 	add.w	r3, r0, #24
   18e18:	e6b0      	b.n	18b7c <_realloc_r+0xbc>
   18e1a:	68a3      	ldr	r3, [r4, #8]
   18e1c:	f8cb 3010 	str.w	r3, [fp, #16]
   18e20:	68e3      	ldr	r3, [r4, #12]
   18e22:	f8cb 3014 	str.w	r3, [fp, #20]
   18e26:	2a24      	cmp	r2, #36	; 0x24
   18e28:	d021      	beq.n	18e6e <_realloc_r+0x3ae>
   18e2a:	3410      	adds	r4, #16
   18e2c:	f10b 0318 	add.w	r3, fp, #24
   18e30:	e7b3      	b.n	18d9a <_realloc_r+0x2da>
   18e32:	4632      	mov	r2, r6
   18e34:	e732      	b.n	18c9c <_realloc_r+0x1dc>
   18e36:	4621      	mov	r1, r4
   18e38:	4630      	mov	r0, r6
   18e3a:	f7ff fdaf 	bl	1899c <memmove>
   18e3e:	4b16      	ldr	r3, [pc, #88]	; (18e98 <_realloc_r+0x3d8>)
   18e40:	e732      	b.n	18ca8 <_realloc_r+0x1e8>
   18e42:	6922      	ldr	r2, [r4, #16]
   18e44:	f8cb 2018 	str.w	r2, [fp, #24]
   18e48:	6962      	ldr	r2, [r4, #20]
   18e4a:	f8cb 201c 	str.w	r2, [fp, #28]
   18e4e:	3418      	adds	r4, #24
   18e50:	f10b 0220 	add.w	r2, fp, #32
   18e54:	e777      	b.n	18d46 <_realloc_r+0x286>
   18e56:	68a1      	ldr	r1, [r4, #8]
   18e58:	f8cb 1010 	str.w	r1, [fp, #16]
   18e5c:	68e1      	ldr	r1, [r4, #12]
   18e5e:	f8cb 1014 	str.w	r1, [fp, #20]
   18e62:	2a24      	cmp	r2, #36	; 0x24
   18e64:	d00d      	beq.n	18e82 <_realloc_r+0x3c2>
   18e66:	3410      	adds	r4, #16
   18e68:	f10b 0218 	add.w	r2, fp, #24
   18e6c:	e716      	b.n	18c9c <_realloc_r+0x1dc>
   18e6e:	6923      	ldr	r3, [r4, #16]
   18e70:	f8cb 3018 	str.w	r3, [fp, #24]
   18e74:	6963      	ldr	r3, [r4, #20]
   18e76:	f8cb 301c 	str.w	r3, [fp, #28]
   18e7a:	3418      	adds	r4, #24
   18e7c:	f10b 0320 	add.w	r3, fp, #32
   18e80:	e78b      	b.n	18d9a <_realloc_r+0x2da>
   18e82:	6922      	ldr	r2, [r4, #16]
   18e84:	f8cb 2018 	str.w	r2, [fp, #24]
   18e88:	6962      	ldr	r2, [r4, #20]
   18e8a:	f8cb 201c 	str.w	r2, [fp, #28]
   18e8e:	3418      	adds	r4, #24
   18e90:	f10b 0220 	add.w	r2, fp, #32
   18e94:	e702      	b.n	18c9c <_realloc_r+0x1dc>
   18e96:	bf00      	nop
   18e98:	20000950 	.word	0x20000950

00018e9c <__ascii_wctomb>:
   18e9c:	b149      	cbz	r1, 18eb2 <__ascii_wctomb+0x16>
   18e9e:	2aff      	cmp	r2, #255	; 0xff
   18ea0:	d802      	bhi.n	18ea8 <__ascii_wctomb+0xc>
   18ea2:	700a      	strb	r2, [r1, #0]
   18ea4:	2001      	movs	r0, #1
   18ea6:	4770      	bx	lr
   18ea8:	238a      	movs	r3, #138	; 0x8a
   18eaa:	6003      	str	r3, [r0, #0]
   18eac:	f04f 30ff 	mov.w	r0, #4294967295
   18eb0:	4770      	bx	lr
   18eb2:	4608      	mov	r0, r1
   18eb4:	4770      	bx	lr
   18eb6:	bf00      	nop

00018eb8 <abort>:
   18eb8:	b508      	push	{r3, lr}
   18eba:	2006      	movs	r0, #6
   18ebc:	f000 f804 	bl	18ec8 <raise>
   18ec0:	2001      	movs	r0, #1
   18ec2:	f7ec f90d 	bl	50e0 <_exit>
   18ec6:	bf00      	nop

00018ec8 <raise>:
   18ec8:	b538      	push	{r3, r4, r5, lr}
   18eca:	4b15      	ldr	r3, [pc, #84]	; (18f20 <raise+0x58>)
   18ecc:	281f      	cmp	r0, #31
   18ece:	681d      	ldr	r5, [r3, #0]
   18ed0:	d820      	bhi.n	18f14 <raise+0x4c>
   18ed2:	f8d5 2148 	ldr.w	r2, [r5, #328]	; 0x148
   18ed6:	4604      	mov	r4, r0
   18ed8:	b162      	cbz	r2, 18ef4 <raise+0x2c>
   18eda:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   18ede:	b14b      	cbz	r3, 18ef4 <raise+0x2c>
   18ee0:	2b01      	cmp	r3, #1
   18ee2:	d015      	beq.n	18f10 <raise+0x48>
   18ee4:	1c59      	adds	r1, r3, #1
   18ee6:	d00f      	beq.n	18f08 <raise+0x40>
   18ee8:	2500      	movs	r5, #0
   18eea:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   18eee:	4798      	blx	r3
   18ef0:	4628      	mov	r0, r5
   18ef2:	bd38      	pop	{r3, r4, r5, pc}
   18ef4:	4628      	mov	r0, r5
   18ef6:	f000 f82b 	bl	18f50 <_getpid_r>
   18efa:	4622      	mov	r2, r4
   18efc:	4601      	mov	r1, r0
   18efe:	4628      	mov	r0, r5
   18f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18f04:	f000 b80e 	b.w	18f24 <_kill_r>
   18f08:	2316      	movs	r3, #22
   18f0a:	602b      	str	r3, [r5, #0]
   18f0c:	2001      	movs	r0, #1
   18f0e:	bd38      	pop	{r3, r4, r5, pc}
   18f10:	2000      	movs	r0, #0
   18f12:	bd38      	pop	{r3, r4, r5, pc}
   18f14:	2316      	movs	r3, #22
   18f16:	602b      	str	r3, [r5, #0]
   18f18:	f04f 30ff 	mov.w	r0, #4294967295
   18f1c:	bd38      	pop	{r3, r4, r5, pc}
   18f1e:	bf00      	nop
   18f20:	20000d60 	.word	0x20000d60

00018f24 <_kill_r>:
   18f24:	b570      	push	{r4, r5, r6, lr}
   18f26:	460c      	mov	r4, r1
   18f28:	4d08      	ldr	r5, [pc, #32]	; (18f4c <_kill_r+0x28>)
   18f2a:	4603      	mov	r3, r0
   18f2c:	2600      	movs	r6, #0
   18f2e:	4620      	mov	r0, r4
   18f30:	4611      	mov	r1, r2
   18f32:	461c      	mov	r4, r3
   18f34:	602e      	str	r6, [r5, #0]
   18f36:	f000 fd1f 	bl	19978 <_kill>
   18f3a:	1c43      	adds	r3, r0, #1
   18f3c:	d000      	beq.n	18f40 <_kill_r+0x1c>
   18f3e:	bd70      	pop	{r4, r5, r6, pc}
   18f40:	682b      	ldr	r3, [r5, #0]
   18f42:	2b00      	cmp	r3, #0
   18f44:	d0fb      	beq.n	18f3e <_kill_r+0x1a>
   18f46:	6023      	str	r3, [r4, #0]
   18f48:	bd70      	pop	{r4, r5, r6, pc}
   18f4a:	bf00      	nop
   18f4c:	20009288 	.word	0x20009288

00018f50 <_getpid_r>:
   18f50:	f000 bd14 	b.w	1997c <_getpid>

00018f54 <data_cb>:
{
   18f54:	b538      	push	{r3, r4, r5, lr}
	switch (data->type) {
   18f56:	7803      	ldrb	r3, [r0, #0]
   18f58:	3b08      	subs	r3, #8
   18f5a:	2b01      	cmp	r3, #1
   18f5c:	d901      	bls.n	18f62 <data_cb+0xe>
		return true;
   18f5e:	2001      	movs	r0, #1
}
   18f60:	bd38      	pop	{r3, r4, r5, pc}
   18f62:	460c      	mov	r4, r1
		len = MIN(data->data_len, PEER_NAME_LEN_MAX - 1);
   18f64:	7845      	ldrb	r5, [r0, #1]
   18f66:	2d1d      	cmp	r5, #29
   18f68:	bf28      	it	cs
   18f6a:	251d      	movcs	r5, #29
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18f6c:	462a      	mov	r2, r5
   18f6e:	6841      	ldr	r1, [r0, #4]
   18f70:	4620      	mov	r0, r4
   18f72:	f7e8 f9c3 	bl	12fc <memcpy>
		name[len] = '\0';
   18f76:	2000      	movs	r0, #0
   18f78:	5560      	strb	r0, [r4, r5]
		return false;
   18f7a:	e7f1      	b.n	18f60 <data_cb+0xc>

00018f7c <hex2char>:
	return 0;
}

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   18f7c:	2809      	cmp	r0, #9
   18f7e:	d803      	bhi.n	18f88 <hex2char+0xc>
		*c = x + '0';
   18f80:	3030      	adds	r0, #48	; 0x30
   18f82:	7008      	strb	r0, [r1, #0]
		*c = x - 10 + 'a';
	} else {
		return -EINVAL;
	}

	return 0;
   18f84:	2000      	movs	r0, #0
   18f86:	4770      	bx	lr
	} else  if (x <= 15) {
   18f88:	280f      	cmp	r0, #15
   18f8a:	d803      	bhi.n	18f94 <hex2char+0x18>
		*c = x - 10 + 'a';
   18f8c:	3057      	adds	r0, #87	; 0x57
   18f8e:	7008      	strb	r0, [r1, #0]
	return 0;
   18f90:	2000      	movs	r0, #0
   18f92:	4770      	bx	lr
		return -EINVAL;
   18f94:	f06f 0015 	mvn.w	r0, #21
}
   18f98:	4770      	bx	lr

00018f9a <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
   18f9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18f9e:	4616      	mov	r6, r2
	if (hexlen < (buflen * 2 + 1)) {
   18fa0:	ea4f 0941 	mov.w	r9, r1, lsl #1
   18fa4:	f109 0201 	add.w	r2, r9, #1
   18fa8:	429a      	cmp	r2, r3
   18faa:	d81f      	bhi.n	18fec <bin2hex+0x52>
   18fac:	4607      	mov	r7, r0
   18fae:	4688      	mov	r8, r1
		return 0;
	}

	for (size_t i = 0; i < buflen; i++) {
   18fb0:	2400      	movs	r4, #0
   18fb2:	e000      	b.n	18fb6 <bin2hex+0x1c>
   18fb4:	3401      	adds	r4, #1
   18fb6:	4544      	cmp	r4, r8
   18fb8:	d214      	bcs.n	18fe4 <bin2hex+0x4a>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   18fba:	5d38      	ldrb	r0, [r7, r4]
   18fbc:	0065      	lsls	r5, r4, #1
   18fbe:	eb06 0144 	add.w	r1, r6, r4, lsl #1
   18fc2:	0900      	lsrs	r0, r0, #4
   18fc4:	f7ff ffda 	bl	18f7c <hex2char>
   18fc8:	2800      	cmp	r0, #0
   18fca:	db14      	blt.n	18ff6 <bin2hex+0x5c>
			return 0;
		}
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   18fcc:	5d38      	ldrb	r0, [r7, r4]
   18fce:	3501      	adds	r5, #1
   18fd0:	1971      	adds	r1, r6, r5
   18fd2:	f000 000f 	and.w	r0, r0, #15
   18fd6:	f7ff ffd1 	bl	18f7c <hex2char>
   18fda:	2800      	cmp	r0, #0
   18fdc:	daea      	bge.n	18fb4 <bin2hex+0x1a>
			return 0;
   18fde:	f04f 0900 	mov.w	r9, #0
   18fe2:	e005      	b.n	18ff0 <bin2hex+0x56>
		}
	}

	hex[2 * buflen] = '\0';
   18fe4:	2300      	movs	r3, #0
   18fe6:	f806 3018 	strb.w	r3, [r6, r8, lsl #1]
	return 2 * buflen;
   18fea:	e001      	b.n	18ff0 <bin2hex+0x56>
		return 0;
   18fec:	f04f 0900 	mov.w	r9, #0
}
   18ff0:	4648      	mov	r0, r9
   18ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return 0;
   18ff6:	f04f 0900 	mov.w	r9, #0
   18ffa:	e7f9      	b.n	18ff0 <bin2hex+0x56>

00018ffc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   18ffc:	4602      	mov	r2, r0
   18ffe:	b1b0      	cbz	r0, 1902e <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19000:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19002:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19006:	2b02      	cmp	r3, #2
   19008:	d00b      	beq.n	19022 <sys_notify_validate+0x26>
   1900a:	2b03      	cmp	r3, #3
   1900c:	d004      	beq.n	19018 <sys_notify_validate+0x1c>
   1900e:	2b01      	cmp	r3, #1
   19010:	d004      	beq.n	1901c <sys_notify_validate+0x20>
   19012:	f06f 0015 	mvn.w	r0, #21
   19016:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   19018:	6803      	ldr	r3, [r0, #0]
   1901a:	b15b      	cbz	r3, 19034 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1901c:	2000      	movs	r0, #0
   1901e:	6090      	str	r0, [r2, #8]
   19020:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19022:	6803      	ldr	r3, [r0, #0]
   19024:	2b00      	cmp	r3, #0
   19026:	d1f9      	bne.n	1901c <sys_notify_validate+0x20>
			rv = -EINVAL;
   19028:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1902c:	4770      	bx	lr
		return -EINVAL;
   1902e:	f06f 0015 	mvn.w	r0, #21
   19032:	4770      	bx	lr
			rv = -EINVAL;
   19034:	f06f 0015 	mvn.w	r0, #21
   19038:	4770      	bx	lr

0001903a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1903a:	b510      	push	{r4, lr}
   1903c:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1903e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19040:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   19044:	6081      	str	r1, [r0, #8]
	switch (method) {
   19046:	2a02      	cmp	r2, #2
   19048:	d004      	beq.n	19054 <sys_notify_finalize+0x1a>
   1904a:	2a03      	cmp	r2, #3
   1904c:	d105      	bne.n	1905a <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1904e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   19050:	2000      	movs	r0, #0
		break;
   19052:	e004      	b.n	1905e <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   19054:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   19056:	2400      	movs	r4, #0
		break;
   19058:	e001      	b.n	1905e <sys_notify_finalize+0x24>
	switch (method) {
   1905a:	2400      	movs	r4, #0
   1905c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1905e:	2200      	movs	r2, #0
   19060:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19062:	b108      	cbz	r0, 19068 <sys_notify_finalize+0x2e>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   19064:	f7fb f95e 	bl	14324 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19068:	4620      	mov	r0, r4
   1906a:	bd10      	pop	{r4, pc}

0001906c <arch_printk_char_out>:
}
   1906c:	2000      	movs	r0, #0
   1906e:	4770      	bx	lr

00019070 <str_out>:
{
   19070:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19072:	680c      	ldr	r4, [r1, #0]
   19074:	b154      	cbz	r4, 1908c <str_out+0x1c>
   19076:	688a      	ldr	r2, [r1, #8]
   19078:	684b      	ldr	r3, [r1, #4]
   1907a:	429a      	cmp	r2, r3
   1907c:	da06      	bge.n	1908c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1907e:	3b01      	subs	r3, #1
   19080:	429a      	cmp	r2, r3
   19082:	d008      	beq.n	19096 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   19084:	1c53      	adds	r3, r2, #1
   19086:	608b      	str	r3, [r1, #8]
   19088:	54a0      	strb	r0, [r4, r2]
   1908a:	e002      	b.n	19092 <str_out+0x22>
		ctx->count++;
   1908c:	688b      	ldr	r3, [r1, #8]
   1908e:	3301      	adds	r3, #1
   19090:	608b      	str	r3, [r1, #8]
}
   19092:	bc10      	pop	{r4}
   19094:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   19096:	1c53      	adds	r3, r2, #1
   19098:	608b      	str	r3, [r1, #8]
   1909a:	2300      	movs	r3, #0
   1909c:	54a3      	strb	r3, [r4, r2]
   1909e:	e7f8      	b.n	19092 <str_out+0x22>

000190a0 <printk>:
{
   190a0:	b40f      	push	{r0, r1, r2, r3}
   190a2:	b500      	push	{lr}
   190a4:	b083      	sub	sp, #12
   190a6:	a904      	add	r1, sp, #16
   190a8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   190ac:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   190ae:	f7ea fcc1 	bl	3a34 <vprintk>
}
   190b2:	b003      	add	sp, #12
   190b4:	f85d eb04 	ldr.w	lr, [sp], #4
   190b8:	b004      	add	sp, #16
   190ba:	4770      	bx	lr

000190bc <snprintk>:
{
   190bc:	b40c      	push	{r2, r3}
   190be:	b500      	push	{lr}
   190c0:	b083      	sub	sp, #12
   190c2:	ab04      	add	r3, sp, #16
   190c4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   190c8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   190ca:	f7ea fcc3 	bl	3a54 <vsnprintk>
}
   190ce:	b003      	add	sp, #12
   190d0:	f85d eb04 	ldr.w	lr, [sp], #4
   190d4:	b002      	add	sp, #8
   190d6:	4770      	bx	lr

000190d8 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   190d8:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   190dc:	8b01      	ldrh	r1, [r0, #24]
   190de:	f021 0107 	bic.w	r1, r1, #7
   190e2:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   190e4:	8301      	strh	r1, [r0, #24]
}
   190e6:	4770      	bx	lr

000190e8 <notify_monitors>:
{
   190e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   190ec:	4606      	mov	r6, r0
   190ee:	460f      	mov	r7, r1
   190f0:	4690      	mov	r8, r2
	return list->head;
   190f2:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   190f4:	b119      	cbz	r1, 190fe <notify_monitors+0x16>
   190f6:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   190f8:	b131      	cbz	r1, 19108 <notify_monitors+0x20>
	return node->next;
   190fa:	680c      	ldr	r4, [r1, #0]
   190fc:	e004      	b.n	19108 <notify_monitors+0x20>
   190fe:	460c      	mov	r4, r1
   19100:	e002      	b.n	19108 <notify_monitors+0x20>
   19102:	4623      	mov	r3, r4
   19104:	4621      	mov	r1, r4
   19106:	461c      	mov	r4, r3
   19108:	b159      	cbz	r1, 19122 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1910a:	684d      	ldr	r5, [r1, #4]
   1910c:	4643      	mov	r3, r8
   1910e:	463a      	mov	r2, r7
   19110:	4630      	mov	r0, r6
   19112:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   19114:	2c00      	cmp	r4, #0
   19116:	d0f4      	beq.n	19102 <notify_monitors+0x1a>
   19118:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1911a:	2c00      	cmp	r4, #0
   1911c:	d0f2      	beq.n	19104 <notify_monitors+0x1c>
	return node->next;
   1911e:	6823      	ldr	r3, [r4, #0]
   19120:	e7f0      	b.n	19104 <notify_monitors+0x1c>
}
   19122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019126 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19126:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19128:	f013 0307 	ands.w	r3, r3, #7
   1912c:	d103      	bne.n	19136 <process_recheck+0x10>
	return list->head;
   1912e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   19130:	b10a      	cbz	r2, 19136 <process_recheck+0x10>
		evt = EVT_START;
   19132:	2003      	movs	r0, #3
   19134:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19136:	2b02      	cmp	r3, #2
   19138:	d003      	beq.n	19142 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1913a:	2b01      	cmp	r3, #1
   1913c:	d006      	beq.n	1914c <process_recheck+0x26>
	int evt = EVT_NOP;
   1913e:	2000      	movs	r0, #0
   19140:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   19142:	8b42      	ldrh	r2, [r0, #26]
   19144:	2a00      	cmp	r2, #0
   19146:	d1f8      	bne.n	1913a <process_recheck+0x14>
		evt = EVT_STOP;
   19148:	2004      	movs	r0, #4
   1914a:	4770      	bx	lr
   1914c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1914e:	b10b      	cbz	r3, 19154 <process_recheck+0x2e>
		evt = EVT_RESET;
   19150:	2005      	movs	r0, #5
}
   19152:	4770      	bx	lr
	int evt = EVT_NOP;
   19154:	2000      	movs	r0, #0
   19156:	4770      	bx	lr

00019158 <process_complete>:
{
   19158:	b510      	push	{r4, lr}
   1915a:	4604      	mov	r4, r0
   1915c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1915e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   19160:	2a00      	cmp	r2, #0
   19162:	db07      	blt.n	19174 <process_complete+0x1c>
   19164:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   19168:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1916a:	2a01      	cmp	r2, #1
   1916c:	d90e      	bls.n	1918c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1916e:	2b04      	cmp	r3, #4
   19170:	d033      	beq.n	191da <process_complete+0x82>
}
   19172:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   19174:	e9d0 0100 	ldrd	r0, r1, [r0]
   19178:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   1917c:	2300      	movs	r3, #0
   1917e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   19180:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   19182:	2101      	movs	r1, #1
   19184:	4620      	mov	r0, r4
   19186:	f7ff ffa7 	bl	190d8 <set_state>
   1918a:	e7f2      	b.n	19172 <process_complete+0x1a>
		*clients = mgr->clients;
   1918c:	e9d0 0100 	ldrd	r0, r1, [r0]
   19190:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   19194:	2200      	movs	r2, #0
   19196:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   19198:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1919a:	2b06      	cmp	r3, #6
   1919c:	d118      	bne.n	191d0 <process_complete+0x78>
	return list->head;
   1919e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   191a2:	b13b      	cbz	r3, 191b4 <process_complete+0x5c>
				mgr->refs += 1U;
   191a4:	8b62      	ldrh	r2, [r4, #26]
   191a6:	3201      	adds	r2, #1
   191a8:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   191aa:	2b00      	cmp	r3, #0
   191ac:	d0f9      	beq.n	191a2 <process_complete+0x4a>
	return node->next;
   191ae:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   191b0:	2b00      	cmp	r3, #0
   191b2:	d1f6      	bne.n	191a2 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
   191b4:	2102      	movs	r1, #2
   191b6:	4620      	mov	r0, r4
   191b8:	f7ff ff8e 	bl	190d8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   191bc:	4620      	mov	r0, r4
   191be:	f7ff ffb2 	bl	19126 <process_recheck>
   191c2:	2800      	cmp	r0, #0
   191c4:	d0d5      	beq.n	19172 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   191c6:	8b23      	ldrh	r3, [r4, #24]
   191c8:	f043 0320 	orr.w	r3, r3, #32
   191cc:	8323      	strh	r3, [r4, #24]
   191ce:	e7d0      	b.n	19172 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   191d0:	2100      	movs	r1, #0
   191d2:	4620      	mov	r0, r4
   191d4:	f7ff ff80 	bl	190d8 <set_state>
   191d8:	e7f0      	b.n	191bc <process_complete+0x64>
		set_state(mgr, ONOFF_STATE_OFF);
   191da:	2100      	movs	r1, #0
   191dc:	f7ff ff7c 	bl	190d8 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   191e0:	4620      	mov	r0, r4
   191e2:	f7ff ffa0 	bl	19126 <process_recheck>
   191e6:	2800      	cmp	r0, #0
   191e8:	d0c3      	beq.n	19172 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   191ea:	8b23      	ldrh	r3, [r4, #24]
   191ec:	f043 0320 	orr.w	r3, r3, #32
   191f0:	8323      	strh	r3, [r4, #24]
}
   191f2:	e7be      	b.n	19172 <process_complete+0x1a>

000191f4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   191f4:	b158      	cbz	r0, 1920e <validate_args+0x1a>
{
   191f6:	b510      	push	{r4, lr}
   191f8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   191fa:	b159      	cbz	r1, 19214 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   191fc:	1d08      	adds	r0, r1, #4
   191fe:	f7ff fefd 	bl	18ffc <sys_notify_validate>
	if ((rv == 0)
   19202:	b918      	cbnz	r0, 1920c <validate_args+0x18>
	    && ((cli->notify.flags
   19204:	68a3      	ldr	r3, [r4, #8]
   19206:	f033 0303 	bics.w	r3, r3, #3
   1920a:	d106      	bne.n	1921a <validate_args+0x26>
}
   1920c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1920e:	f06f 0015 	mvn.w	r0, #21
}
   19212:	4770      	bx	lr
		return -EINVAL;
   19214:	f06f 0015 	mvn.w	r0, #21
   19218:	e7f8      	b.n	1920c <validate_args+0x18>
		rv = -EINVAL;
   1921a:	f06f 0015 	mvn.w	r0, #21
   1921e:	e7f5      	b.n	1920c <validate_args+0x18>

00019220 <notify_one>:
{
   19220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19224:	4607      	mov	r7, r0
   19226:	460c      	mov	r4, r1
   19228:	4616      	mov	r6, r2
   1922a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1922c:	4619      	mov	r1, r3
   1922e:	1d20      	adds	r0, r4, #4
   19230:	f7ff ff03 	bl	1903a <sys_notify_finalize>
	if (cb) {
   19234:	b128      	cbz	r0, 19242 <notify_one+0x22>
   19236:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   19238:	462b      	mov	r3, r5
   1923a:	4632      	mov	r2, r6
   1923c:	4621      	mov	r1, r4
   1923e:	4638      	mov	r0, r7
   19240:	47c0      	blx	r8
}
   19242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019246 <notify_all>:
{
   19246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1924a:	4680      	mov	r8, r0
   1924c:	460c      	mov	r4, r1
   1924e:	4617      	mov	r7, r2
   19250:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   19252:	e004      	b.n	1925e <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   19254:	4633      	mov	r3, r6
   19256:	463a      	mov	r2, r7
   19258:	4640      	mov	r0, r8
   1925a:	f7ff ffe1 	bl	19220 <notify_one>
	return list->head;
   1925e:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   19260:	b131      	cbz	r1, 19270 <notify_all+0x2a>
	return node->next;
   19262:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   19264:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19266:	6863      	ldr	r3, [r4, #4]
   19268:	428b      	cmp	r3, r1
   1926a:	d1f3      	bne.n	19254 <notify_all+0xe>
	list->tail = node;
   1926c:	6065      	str	r5, [r4, #4]
}
   1926e:	e7f1      	b.n	19254 <notify_all+0xe>
}
   19270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019274 <transition_complete>:
{
   19274:	b508      	push	{r3, lr}
	__asm__ volatile(
   19276:	f04f 0c20 	mov.w	ip, #32
   1927a:	f3ef 8211 	mrs	r2, BASEPRI
   1927e:	f38c 8812 	msr	BASEPRI_MAX, ip
   19282:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19286:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   19288:	2101      	movs	r1, #1
   1928a:	f7ea fbf9 	bl	3a80 <process_event>
}
   1928e:	bd08      	pop	{r3, pc}

00019290 <onoff_manager_init>:
	if ((mgr == NULL)
   19290:	4603      	mov	r3, r0
   19292:	b170      	cbz	r0, 192b2 <onoff_manager_init+0x22>
	    || (transitions == NULL)
   19294:	b181      	cbz	r1, 192b8 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
   19296:	680a      	ldr	r2, [r1, #0]
   19298:	b18a      	cbz	r2, 192be <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
   1929a:	684a      	ldr	r2, [r1, #4]
   1929c:	b192      	cbz	r2, 192c4 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1929e:	2000      	movs	r0, #0
   192a0:	6018      	str	r0, [r3, #0]
   192a2:	6058      	str	r0, [r3, #4]
   192a4:	6098      	str	r0, [r3, #8]
   192a6:	60d8      	str	r0, [r3, #12]
   192a8:	6118      	str	r0, [r3, #16]
   192aa:	6158      	str	r0, [r3, #20]
   192ac:	6198      	str	r0, [r3, #24]
   192ae:	6119      	str	r1, [r3, #16]
	return 0;
   192b0:	4770      	bx	lr
		return -EINVAL;
   192b2:	f06f 0015 	mvn.w	r0, #21
   192b6:	4770      	bx	lr
   192b8:	f06f 0015 	mvn.w	r0, #21
   192bc:	4770      	bx	lr
   192be:	f06f 0015 	mvn.w	r0, #21
   192c2:	4770      	bx	lr
   192c4:	f06f 0015 	mvn.w	r0, #21
}
   192c8:	4770      	bx	lr

000192ca <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   192ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   192cc:	4604      	mov	r4, r0
   192ce:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   192d0:	f7ff ff90 	bl	191f4 <validate_args>

	if (rv < 0) {
   192d4:	1e06      	subs	r6, r0, #0
   192d6:	db37      	blt.n	19348 <onoff_request+0x7e>
   192d8:	f04f 0320 	mov.w	r3, #32
   192dc:	f3ef 8211 	mrs	r2, BASEPRI
   192e0:	f383 8812 	msr	BASEPRI_MAX, r3
   192e4:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   192e8:	8b25      	ldrh	r5, [r4, #24]
   192ea:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   192ee:	8b63      	ldrh	r3, [r4, #26]
   192f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   192f4:	428b      	cmp	r3, r1
   192f6:	d02f      	beq.n	19358 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   192f8:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   192fa:	2d02      	cmp	r5, #2
   192fc:	d00c      	beq.n	19318 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   192fe:	b18d      	cbz	r5, 19324 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   19300:	2d04      	cmp	r5, #4
   19302:	d00f      	beq.n	19324 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   19304:	2d06      	cmp	r5, #6
   19306:	d00d      	beq.n	19324 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   19308:	2d05      	cmp	r5, #5
   1930a:	d01f      	beq.n	1934c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1930c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   19310:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   19312:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19314:	4608      	mov	r0, r1
   19316:	e00a      	b.n	1932e <onoff_request+0x64>
		mgr->refs += 1U;
   19318:	3301      	adds	r3, #1
   1931a:	8363      	strh	r3, [r4, #26]
		notify = true;
   1931c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1931e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   19320:	4618      	mov	r0, r3
   19322:	e004      	b.n	1932e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   19324:	fab5 f385 	clz	r3, r5
   19328:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1932a:	2100      	movs	r1, #0
		add_client = true;
   1932c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1932e:	b128      	cbz	r0, 1933c <onoff_request+0x72>
	parent->next = child;
   19330:	2000      	movs	r0, #0
   19332:	6038      	str	r0, [r7, #0]
	return list->tail;
   19334:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   19336:	b1a8      	cbz	r0, 19364 <onoff_request+0x9a>
	parent->next = child;
   19338:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1933a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1933c:	b9ab      	cbnz	r3, 1936a <onoff_request+0xa0>
	__asm__ volatile(
   1933e:	f382 8811 	msr	BASEPRI, r2
   19342:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   19346:	b9a9      	cbnz	r1, 19374 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   19348:	4630      	mov	r0, r6
   1934a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1934c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   19350:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   19352:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19354:	4608      	mov	r0, r1
   19356:	e7ea      	b.n	1932e <onoff_request+0x64>
		rv = -EAGAIN;
   19358:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1935c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1935e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   19360:	4608      	mov	r0, r1
   19362:	e7e4      	b.n	1932e <onoff_request+0x64>
   19364:	6067      	str	r7, [r4, #4]
	list->head = node;
   19366:	6027      	str	r7, [r4, #0]
}
   19368:	e7e8      	b.n	1933c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1936a:	2102      	movs	r1, #2
   1936c:	4620      	mov	r0, r4
   1936e:	f7ea fb87 	bl	3a80 <process_event>
   19372:	e7e9      	b.n	19348 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   19374:	2300      	movs	r3, #0
   19376:	462a      	mov	r2, r5
   19378:	4639      	mov	r1, r7
   1937a:	4620      	mov	r0, r4
   1937c:	f7ff ff50 	bl	19220 <notify_one>
   19380:	e7e2      	b.n	19348 <onoff_request+0x7e>

00019382 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19382:	b508      	push	{r3, lr}
   19384:	4604      	mov	r4, r0
   19386:	4608      	mov	r0, r1
   19388:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1938a:	461a      	mov	r2, r3
   1938c:	47a0      	blx	r4
	return z_impl_z_current_get();
   1938e:	f7fa fb71 	bl	13a74 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   19392:	f7eb fdc5 	bl	4f20 <z_impl_k_thread_abort>

00019396 <chunk_mem>:
#endif

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   19396:	00c9      	lsls	r1, r1, #3
   19398:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1939a:	4408      	add	r0, r1
   1939c:	4770      	bx	lr

0001939e <free_list_remove_bidx>:

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1939e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   193a2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   193a6:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   193a8:	4299      	cmp	r1, r3
   193aa:	d00c      	beq.n	193c6 <free_list_remove_bidx+0x28>
   193ac:	4484      	add	ip, r0
   193ae:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   193b2:	3204      	adds	r2, #4
   193b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   193b8:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   193ba:	3206      	adds	r2, #6
   193bc:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   193be:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   193c0:	3304      	adds	r3, #4
   193c2:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   193c4:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   193c6:	2301      	movs	r3, #1
   193c8:	fa03 f102 	lsl.w	r1, r3, r2
   193cc:	68c3      	ldr	r3, [r0, #12]
   193ce:	ea23 0301 	bic.w	r3, r3, r1
   193d2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   193d4:	3204      	adds	r2, #4
   193d6:	2300      	movs	r3, #0
   193d8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   193dc:	4770      	bx	lr

000193de <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   193de:	b510      	push	{r4, lr}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   193e0:	1d13      	adds	r3, r2, #4
   193e2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   193e6:	b97c      	cbnz	r4, 19408 <free_list_add_bidx+0x2a>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   193e8:	2301      	movs	r3, #1
   193ea:	fa03 f402 	lsl.w	r4, r3, r2
   193ee:	68c3      	ldr	r3, [r0, #12]
   193f0:	4323      	orrs	r3, r4
   193f2:	60c3      	str	r3, [r0, #12]
		b->next = c;
   193f4:	3204      	adds	r2, #4
   193f6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   193fa:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   193fc:	1d1a      	adds	r2, r3, #4
   193fe:	b289      	uxth	r1, r1
   19400:	5281      	strh	r1, [r0, r2]
   19402:	3306      	adds	r3, #6
   19404:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   19406:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   19408:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   1940a:	3204      	adds	r2, #4
   1940c:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   1940e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   19412:	f10c 0e04 	add.w	lr, ip, #4
   19416:	f820 300e 	strh.w	r3, [r0, lr]
   1941a:	f10c 0c06 	add.w	ip, ip, #6
   1941e:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   19422:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   19424:	3306      	adds	r3, #6
   19426:	b289      	uxth	r1, r1
   19428:	52c1      	strh	r1, [r0, r3]
   1942a:	5281      	strh	r1, [r0, r2]
   1942c:	e7eb      	b.n	19406 <free_list_add_bidx+0x28>

0001942e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1942e:	b500      	push	{lr}
	void *cmem = &buf[c];
   19430:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   19432:	3302      	adds	r3, #2
   19434:	f830 e003 	ldrh.w	lr, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   19438:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1943c:	1a89      	subs	r1, r1, r2
   1943e:	eb01 015e 	add.w	r1, r1, lr, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19442:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   19446:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1944a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   1944e:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   19450:	3302      	adds	r3, #2
   19452:	f820 e003 	strh.w	lr, [r0, r3]
   19456:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   1945a:	5ac3      	ldrh	r3, [r0, r3]
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   1945c:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   19460:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   19464:	f85d fb04 	ldr.w	pc, [sp], #4

00019468 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   19468:	b500      	push	{lr}
	void *cmem = &buf[c];
   1946a:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   1946c:	3102      	adds	r1, #2
   1946e:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   19472:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   19476:	f10c 0c02 	add.w	ip, ip, #2
   1947a:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1947e:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   19480:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19484:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   19488:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   1948c:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   19490:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   19494:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   19498:	f85d fb04 	ldr.w	pc, [sp], #4

0001949c <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1949c:	3904      	subs	r1, #4
   1949e:	1a08      	subs	r0, r1, r0
}
   194a0:	08c0      	lsrs	r0, r0, #3
   194a2:	4770      	bx	lr

000194a4 <free_list_remove>:
{
   194a4:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   194a6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   194aa:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   194ac:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   194ae:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   194b2:	f1c2 021f 	rsb	r2, r2, #31
   194b6:	f7ff ff72 	bl	1939e <free_list_remove_bidx>
}
   194ba:	bd08      	pop	{r3, pc}

000194bc <free_list_add>:
{
   194bc:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   194be:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   194c2:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   194c4:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   194c6:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   194ca:	f1c2 021f 	rsb	r2, r2, #31
   194ce:	f7ff ff86 	bl	193de <free_list_add_bidx>
}
   194d2:	bd08      	pop	{r3, pc}

000194d4 <free_chunk>:
{
   194d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194d6:	4604      	mov	r4, r0
   194d8:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   194da:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   194dc:	1cb7      	adds	r7, r6, #2
   194de:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   194e0:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   194e4:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   194e8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   194ea:	f013 0f01 	tst.w	r3, #1
   194ee:	d00c      	beq.n	1950a <free_chunk+0x36>
   194f0:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   194f2:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   194f4:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   194f8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   194fa:	f013 0f01 	tst.w	r3, #1
   194fe:	d00e      	beq.n	1951e <free_chunk+0x4a>
	free_list_add(h, c);
   19500:	4629      	mov	r1, r5
   19502:	4620      	mov	r0, r4
   19504:	f7ff ffda 	bl	194bc <free_list_add>
}
   19508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   1950a:	f7ff ffcb 	bl	194a4 <free_list_remove>
   1950e:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   19510:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   19514:	4629      	mov	r1, r5
   19516:	4620      	mov	r0, r4
   19518:	f7ff ffa6 	bl	19468 <merge_chunks>
   1951c:	e7e8      	b.n	194f0 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   1951e:	4620      	mov	r0, r4
   19520:	f7ff ffc0 	bl	194a4 <free_list_remove>
   19524:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   19526:	462a      	mov	r2, r5
   19528:	1a69      	subs	r1, r5, r1
   1952a:	4620      	mov	r0, r4
   1952c:	f7ff ff9c 	bl	19468 <merge_chunks>
   19530:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   19532:	1aed      	subs	r5, r5, r3
   19534:	e7e4      	b.n	19500 <free_chunk+0x2c>

00019536 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   19536:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   19538:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1953c:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   19540:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   19544:	b1cd      	cbz	r5, 1957a <alloc_chunk+0x44>
   19546:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1954a:	f04f 0e03 	mov.w	lr, #3
		do {
			chunkid_t c = b->next;
   1954e:	1d14      	adds	r4, r2, #4
   19550:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   19554:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   19558:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   1955c:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   1955e:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   19562:	d914      	bls.n	1958e <alloc_chunk+0x58>
   19564:	4484      	add	ip, r0
   19566:	f8bc 4006 	ldrh.w	r4, [ip, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   1956a:	1d16      	adds	r6, r2, #4
   1956c:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   19570:	f1be 0e01 	subs.w	lr, lr, #1
   19574:	d001      	beq.n	1957a <alloc_chunk+0x44>
   19576:	42a5      	cmp	r5, r4
   19578:	d1e9      	bne.n	1954e <alloc_chunk+0x18>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1957a:	68c4      	ldr	r4, [r0, #12]
   1957c:	f1c3 0220 	rsb	r2, r3, #32
   19580:	2301      	movs	r3, #1
   19582:	4093      	lsls	r3, r2
   19584:	425b      	negs	r3, r3

	if (bmask != 0U) {
   19586:	401c      	ands	r4, r3
   19588:	d105      	bne.n	19596 <alloc_chunk+0x60>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1958a:	4620      	mov	r0, r4
   1958c:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   1958e:	4621      	mov	r1, r4
   19590:	f7ff ff05 	bl	1939e <free_list_remove_bidx>
				return c;
   19594:	e7f9      	b.n	1958a <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   19596:	fa94 f2a4 	rbit	r2, r4
   1959a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1959e:	1d13      	adds	r3, r2, #4
   195a0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   195a4:	4621      	mov	r1, r4
   195a6:	f7ff fefa 	bl	1939e <free_list_remove_bidx>
		return c;
   195aa:	e7ee      	b.n	1958a <alloc_chunk+0x54>

000195ac <sys_heap_free>:
	if (mem == NULL) {
   195ac:	b179      	cbz	r1, 195ce <sys_heap_free+0x22>
{
   195ae:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   195b0:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   195b2:	4620      	mov	r0, r4
   195b4:	f7ff ff72 	bl	1949c <mem_to_chunkid>
   195b8:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   195ba:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   195be:	8853      	ldrh	r3, [r2, #2]
   195c0:	f023 0301 	bic.w	r3, r3, #1
   195c4:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   195c6:	4620      	mov	r0, r4
   195c8:	f7ff ff84 	bl	194d4 <free_chunk>
}
   195cc:	bd10      	pop	{r4, pc}
   195ce:	4770      	bx	lr

000195d0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   195d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   195d2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   195d4:	b341      	cbz	r1, 19628 <sys_heap_alloc+0x58>
   195d6:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   195d8:	68aa      	ldr	r2, [r5, #8]
   195da:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   195de:	d925      	bls.n	1962c <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   195e0:	330b      	adds	r3, #11
   195e2:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   195e4:	4621      	mov	r1, r4
   195e6:	4628      	mov	r0, r5
   195e8:	f7ff ffa5 	bl	19536 <alloc_chunk>
	if (c == 0U) {
   195ec:	4607      	mov	r7, r0
   195ee:	b1f8      	cbz	r0, 19630 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   195f0:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   195f2:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   195f6:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   195f8:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   195fc:	d309      	bcc.n	19612 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   195fe:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19600:	885a      	ldrh	r2, [r3, #2]
   19602:	f042 0201 	orr.w	r2, r2, #1
   19606:	805a      	strh	r2, [r3, #2]
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);

	mem = chunk_mem(h, c);
   19608:	4639      	mov	r1, r7
   1960a:	4628      	mov	r0, r5
   1960c:	f7ff fec3 	bl	19396 <chunk_mem>
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   19610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   19612:	4404      	add	r4, r0
   19614:	4622      	mov	r2, r4
   19616:	4601      	mov	r1, r0
   19618:	4628      	mov	r0, r5
   1961a:	f7ff ff08 	bl	1942e <split_chunks>
		free_list_add(h, c + chunk_sz);
   1961e:	4621      	mov	r1, r4
   19620:	4628      	mov	r0, r5
   19622:	f7ff ff4b 	bl	194bc <free_list_add>
   19626:	e7ea      	b.n	195fe <sys_heap_alloc+0x2e>
		return NULL;
   19628:	2000      	movs	r0, #0
   1962a:	e7f1      	b.n	19610 <sys_heap_alloc+0x40>
   1962c:	2000      	movs	r0, #0
   1962e:	e7ef      	b.n	19610 <sys_heap_alloc+0x40>
		return NULL;
   19630:	2000      	movs	r0, #0
   19632:	e7ed      	b.n	19610 <sys_heap_alloc+0x40>

00019634 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   19634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19638:	460d      	mov	r5, r1
   1963a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1963c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1963e:	424b      	negs	r3, r1
   19640:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   19644:	ea31 0303 	bics.w	r3, r1, r3
   19648:	d03e      	beq.n	196c8 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   1964a:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   1964e:	f1b8 0f03 	cmp.w	r8, #3
   19652:	d844      	bhi.n	196de <sys_heap_aligned_alloc+0xaa>
   19654:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   19656:	2c00      	cmp	r4, #0
   19658:	d057      	beq.n	1970a <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1965a:	68b3      	ldr	r3, [r6, #8]
   1965c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   19660:	d955      	bls.n	1970e <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   19662:	1929      	adds	r1, r5, r4
   19664:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19666:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   19668:	08c9      	lsrs	r1, r1, #3
   1966a:	4630      	mov	r0, r6
   1966c:	f7ff ff63 	bl	19536 <alloc_chunk>

	if (c0 == 0) {
   19670:	4607      	mov	r7, r0
   19672:	2800      	cmp	r0, #0
   19674:	d04d      	beq.n	19712 <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   19676:	4601      	mov	r1, r0
   19678:	4630      	mov	r0, r6
   1967a:	f7ff fe8c 	bl	19396 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1967e:	4440      	add	r0, r8
   19680:	4428      	add	r0, r5
   19682:	3801      	subs	r0, #1
   19684:	426d      	negs	r5, r5
   19686:	4005      	ands	r5, r0
   19688:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1968c:	442c      	add	r4, r5
   1968e:	3407      	adds	r4, #7
   19690:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   19694:	4629      	mov	r1, r5
   19696:	4630      	mov	r0, r6
   19698:	f7ff ff00 	bl	1949c <mem_to_chunkid>
   1969c:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1969e:	1ba4      	subs	r4, r4, r6
   196a0:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   196a2:	4287      	cmp	r7, r0
   196a4:	d31d      	bcc.n	196e2 <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   196a6:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   196aa:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   196ae:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   196b0:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   196b4:	429c      	cmp	r4, r3
   196b6:	d31e      	bcc.n	196f6 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   196b8:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   196ba:	8873      	ldrh	r3, [r6, #2]
   196bc:	f043 0301 	orr.w	r3, r3, #1
   196c0:	8073      	strh	r3, [r6, #2]
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   196c2:	4628      	mov	r0, r5
   196c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   196c8:	2904      	cmp	r1, #4
   196ca:	d903      	bls.n	196d4 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   196cc:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   196d0:	2204      	movs	r2, #4
   196d2:	e7c0      	b.n	19656 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   196d4:	4611      	mov	r1, r2
   196d6:	f7ff ff7b 	bl	195d0 <sys_heap_alloc>
   196da:	4605      	mov	r5, r0
   196dc:	e7f1      	b.n	196c2 <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   196de:	2204      	movs	r2, #4
   196e0:	e7b9      	b.n	19656 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   196e2:	4602      	mov	r2, r0
   196e4:	4639      	mov	r1, r7
   196e6:	4630      	mov	r0, r6
   196e8:	f7ff fea1 	bl	1942e <split_chunks>
		free_list_add(h, c0);
   196ec:	4639      	mov	r1, r7
   196ee:	4630      	mov	r0, r6
   196f0:	f7ff fee4 	bl	194bc <free_list_add>
   196f4:	e7d7      	b.n	196a6 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   196f6:	4622      	mov	r2, r4
   196f8:	4641      	mov	r1, r8
   196fa:	4630      	mov	r0, r6
   196fc:	f7ff fe97 	bl	1942e <split_chunks>
		free_list_add(h, c_end);
   19700:	4621      	mov	r1, r4
   19702:	4630      	mov	r0, r6
   19704:	f7ff feda 	bl	194bc <free_list_add>
   19708:	e7d6      	b.n	196b8 <sys_heap_aligned_alloc+0x84>
		return NULL;
   1970a:	2500      	movs	r5, #0
   1970c:	e7d9      	b.n	196c2 <sys_heap_aligned_alloc+0x8e>
   1970e:	2500      	movs	r5, #0
   19710:	e7d7      	b.n	196c2 <sys_heap_aligned_alloc+0x8e>
		return NULL;
   19712:	2500      	movs	r5, #0
   19714:	e7d5      	b.n	196c2 <sys_heap_aligned_alloc+0x8e>

00019716 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   19716:	b570      	push	{r4, r5, r6, lr}
   19718:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1971a:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1971c:	1dc8      	adds	r0, r1, #7
   1971e:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   19722:	440a      	add	r2, r1
   19724:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   19728:	1a12      	subs	r2, r2, r0
   1972a:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1972c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1972e:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   19730:	2300      	movs	r3, #0
   19732:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   19734:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   19738:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1973c:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   19740:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   19742:	1dce      	adds	r6, r1, #7
   19744:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   19746:	e005      	b.n	19754 <sys_heap_init+0x3e>
		h->buckets[i].next = 0;
   19748:	f103 0c04 	add.w	ip, r3, #4
   1974c:	2400      	movs	r4, #0
   1974e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   19752:	3301      	adds	r3, #1
   19754:	4573      	cmp	r3, lr
   19756:	dbf7      	blt.n	19748 <sys_heap_init+0x32>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   19758:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   1975a:	b2a4      	uxth	r4, r4
   1975c:	8044      	strh	r4, [r0, #2]
   1975e:	f04f 0c00 	mov.w	ip, #0
   19762:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   19766:	f044 0401 	orr.w	r4, r4, #1
   1976a:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1976c:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1976e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   19772:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   19776:	1ca5      	adds	r5, r4, #2
   19778:	f820 e005 	strh.w	lr, [r0, r5]
   1977c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1977e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   19782:	1c95      	adds	r5, r2, #2
   19784:	f820 c005 	strh.w	ip, [r0, r5]
   19788:	4402      	add	r2, r0
   1978a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1978c:	8853      	ldrh	r3, [r2, #2]
   1978e:	f043 0301 	orr.w	r3, r3, #1
   19792:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   19794:	f7ff fe92 	bl	194bc <free_list_add>
}
   19798:	bd70      	pop	{r4, r5, r6, pc}

0001979a <outs>:
{
   1979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1979e:	4607      	mov	r7, r0
   197a0:	460e      	mov	r6, r1
   197a2:	4614      	mov	r4, r2
   197a4:	4698      	mov	r8, r3
	size_t count = 0;
   197a6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   197a8:	e006      	b.n	197b8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   197aa:	4631      	mov	r1, r6
   197ac:	f814 0b01 	ldrb.w	r0, [r4], #1
   197b0:	47b8      	blx	r7
		if (rc < 0) {
   197b2:	2800      	cmp	r0, #0
   197b4:	db09      	blt.n	197ca <outs+0x30>
		++count;
   197b6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   197b8:	4544      	cmp	r4, r8
   197ba:	d3f6      	bcc.n	197aa <outs+0x10>
   197bc:	f1b8 0f00 	cmp.w	r8, #0
   197c0:	d102      	bne.n	197c8 <outs+0x2e>
   197c2:	7823      	ldrb	r3, [r4, #0]
   197c4:	2b00      	cmp	r3, #0
   197c6:	d1f0      	bne.n	197aa <outs+0x10>
	return (int)count;
   197c8:	4628      	mov	r0, r5
}
   197ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000197ce <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   197ce:	b40f      	push	{r0, r1, r2, r3}
   197d0:	b500      	push	{lr}
   197d2:	b083      	sub	sp, #12
   197d4:	a904      	add	r1, sp, #16
   197d6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   197da:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   197dc:	f7ea f92a 	bl	3a34 <vprintk>

	va_end(ap);
}
   197e0:	b003      	add	sp, #12
   197e2:	f85d eb04 	ldr.w	lr, [sp], #4
   197e6:	b004      	add	sp, #16
   197e8:	4770      	bx	lr

000197ea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_EXPERIMENTAL, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   197ea:	4770      	bx	lr

000197ec <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   197ec:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   197ee:	f004 f885 	bl	1d8fc <z_fatal_error>
}
   197f2:	bd08      	pop	{r3, pc}

000197f4 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   197f4:	b508      	push	{r3, lr}
   197f6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   197f8:	6800      	ldr	r0, [r0, #0]
   197fa:	f7ff fff7 	bl	197ec <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   197fe:	bd08      	pop	{r3, pc}

00019800 <z_irq_spurious>:
{
   19800:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   19802:	2100      	movs	r1, #0
   19804:	2001      	movs	r0, #1
   19806:	f7ff fff1 	bl	197ec <z_arm_fatal_error>
}
   1980a:	bd08      	pop	{r3, pc}

0001980c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1980c:	b508      	push	{r3, lr}
	handler();
   1980e:	f7eb f8d1 	bl	49b4 <z_SysNmiOnReset>
	z_arm_int_exit();
   19812:	f7eb f9c7 	bl	4ba4 <z_arm_exc_exit>
}
   19816:	bd08      	pop	{r3, pc}

00019818 <memory_fault_recoverable>:
}
   19818:	2000      	movs	r0, #0
   1981a:	4770      	bx	lr

0001981c <debug_monitor>:
	*recoverable = false;
   1981c:	2300      	movs	r3, #0
   1981e:	700b      	strb	r3, [r1, #0]
}
   19820:	4770      	bx	lr

00019822 <fault_handle>:
{
   19822:	b508      	push	{r3, lr}
	*recoverable = false;
   19824:	2300      	movs	r3, #0
   19826:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   19828:	1ecb      	subs	r3, r1, #3
   1982a:	2b09      	cmp	r3, #9
   1982c:	d81a      	bhi.n	19864 <fault_handle+0x42>
   1982e:	e8df f003 	tbb	[pc, r3]
   19832:	0905      	.short	0x0905
   19834:	1919110d 	.word	0x1919110d
   19838:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   1983c:	4611      	mov	r1, r2
   1983e:	f7eb fa4b 	bl	4cd8 <hard_fault>
		break;
   19842:	e010      	b.n	19866 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
   19844:	2100      	movs	r1, #0
   19846:	f7eb f9f7 	bl	4c38 <mem_manage_fault>
		break;
   1984a:	e00c      	b.n	19866 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
   1984c:	2100      	movs	r1, #0
   1984e:	f7eb f9b7 	bl	4bc0 <bus_fault>
		break;
   19852:	e008      	b.n	19866 <fault_handle+0x44>
		reason = usage_fault(esf);
   19854:	f7eb f9de 	bl	4c14 <usage_fault>
		break;
   19858:	e005      	b.n	19866 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
   1985a:	4611      	mov	r1, r2
   1985c:	f7ff ffde 	bl	1981c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   19860:	2000      	movs	r0, #0
		break;
   19862:	e000      	b.n	19866 <fault_handle+0x44>
	switch (fault) {
   19864:	2000      	movs	r0, #0
}
   19866:	bd08      	pop	{r3, pc}

00019868 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   19868:	6843      	ldr	r3, [r0, #4]
   1986a:	1e5a      	subs	r2, r3, #1
		&&
   1986c:	4213      	tst	r3, r2
   1986e:	d106      	bne.n	1987e <mpu_partition_is_valid+0x16>
		&&
   19870:	2b1f      	cmp	r3, #31
   19872:	d906      	bls.n	19882 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   19874:	6803      	ldr	r3, [r0, #0]
		&&
   19876:	421a      	tst	r2, r3
   19878:	d005      	beq.n	19886 <mpu_partition_is_valid+0x1e>
   1987a:	2000      	movs	r0, #0
   1987c:	4770      	bx	lr
   1987e:	2000      	movs	r0, #0
   19880:	4770      	bx	lr
   19882:	2000      	movs	r0, #0
   19884:	4770      	bx	lr
   19886:	2001      	movs	r0, #1
}
   19888:	4770      	bx	lr

0001988a <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
   1988a:	2807      	cmp	r0, #7
   1988c:	d805      	bhi.n	1989a <region_allocate_and_init+0x10>
{
   1988e:	b510      	push	{r4, lr}
   19890:	4604      	mov	r4, r0
	region_init(index, region_conf);
   19892:	f7eb fb7f 	bl	4f94 <region_init>
	return index;
   19896:	4620      	mov	r0, r4
}
   19898:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1989a:	f06f 0015 	mvn.w	r0, #21
}
   1989e:	4770      	bx	lr

000198a0 <mpu_configure_region>:
{
   198a0:	b500      	push	{lr}
   198a2:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   198a4:	680b      	ldr	r3, [r1, #0]
   198a6:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   198a8:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   198aa:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   198ac:	2b20      	cmp	r3, #32
   198ae:	d912      	bls.n	198d6 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   198b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   198b4:	d811      	bhi.n	198da <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   198b6:	3b01      	subs	r3, #1
   198b8:	fab3 f383 	clz	r3, r3
   198bc:	f1c3 031f 	rsb	r3, r3, #31
   198c0:	005b      	lsls	r3, r3, #1
   198c2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   198c6:	4313      	orrs	r3, r2
   198c8:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   198ca:	a901      	add	r1, sp, #4
   198cc:	f7ff ffdd 	bl	1988a <region_allocate_and_init>
}
   198d0:	b005      	add	sp, #20
   198d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   198d6:	2308      	movs	r3, #8
   198d8:	e7f5      	b.n	198c6 <mpu_configure_region+0x26>
		return REGION_4G;
   198da:	233e      	movs	r3, #62	; 0x3e
   198dc:	e7f3      	b.n	198c6 <mpu_configure_region+0x26>

000198de <mpu_configure_regions>:
{
   198de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   198e2:	4680      	mov	r8, r0
   198e4:	460f      	mov	r7, r1
   198e6:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
   198e8:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
   198ea:	2500      	movs	r5, #0
   198ec:	e009      	b.n	19902 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   198ee:	4621      	mov	r1, r4
   198f0:	b2f0      	uxtb	r0, r6
   198f2:	f7ff ffd5 	bl	198a0 <mpu_configure_region>
   198f6:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
   198f8:	f110 0f16 	cmn.w	r0, #22
   198fc:	d014      	beq.n	19928 <mpu_configure_regions+0x4a>
		reg_index++;
   198fe:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   19900:	3501      	adds	r5, #1
   19902:	42bd      	cmp	r5, r7
   19904:	da10      	bge.n	19928 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   19906:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1990a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1990e:	6862      	ldr	r2, [r4, #4]
   19910:	2a00      	cmp	r2, #0
   19912:	d0f5      	beq.n	19900 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   19914:	f1b9 0f00 	cmp.w	r9, #0
   19918:	d0e9      	beq.n	198ee <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   1991a:	4620      	mov	r0, r4
   1991c:	f7ff ffa4 	bl	19868 <mpu_partition_is_valid>
		if (do_sanity_check &&
   19920:	2800      	cmp	r0, #0
   19922:	d1e4      	bne.n	198ee <mpu_configure_regions+0x10>
			return -EINVAL;
   19924:	f06f 0615 	mvn.w	r6, #21
}
   19928:	4630      	mov	r0, r6
   1992a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001992e <arm_core_mpu_configure_static_mpu_regions>:
{
   1992e:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   19930:	f7eb fb44 	bl	4fbc <mpu_configure_static_mpu_regions>
}
   19934:	bd08      	pop	{r3, pc}

00019936 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   19936:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   19938:	f7eb fb4a 	bl	4fd0 <mpu_configure_dynamic_mpu_regions>
}
   1993c:	bd08      	pop	{r3, pc}

0001993e <malloc_prepare>:
}
   1993e:	2000      	movs	r0, #0
   19940:	4770      	bx	lr

00019942 <_stdout_hook_default>:
}
   19942:	f04f 30ff 	mov.w	r0, #4294967295
   19946:	4770      	bx	lr

00019948 <_stdin_hook_default>:
}
   19948:	2000      	movs	r0, #0
   1994a:	4770      	bx	lr

0001994c <_read>:
{
   1994c:	b508      	push	{r3, lr}
   1994e:	4608      	mov	r0, r1
   19950:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_READ_STDIN);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_read_stdin(buf, nbytes);
   19952:	f7eb fb95 	bl	5080 <z_impl_zephyr_read_stdin>
}
   19956:	bd08      	pop	{r3, pc}

00019958 <_write>:
{
   19958:	b508      	push	{r3, lr}
   1995a:	4608      	mov	r0, r1
   1995c:	4611      	mov	r1, r2
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   1995e:	f7eb fba5 	bl	50ac <z_impl_zephyr_write_stdout>
}
   19962:	bd08      	pop	{r3, pc}

00019964 <_close>:
}
   19964:	f04f 30ff 	mov.w	r0, #4294967295
   19968:	4770      	bx	lr

0001996a <_lseek>:
}
   1996a:	2000      	movs	r0, #0
   1996c:	4770      	bx	lr

0001996e <_isatty>:
}
   1996e:	2802      	cmp	r0, #2
   19970:	bfcc      	ite	gt
   19972:	2000      	movgt	r0, #0
   19974:	2001      	movle	r0, #1
   19976:	4770      	bx	lr

00019978 <_kill>:
}
   19978:	2000      	movs	r0, #0
   1997a:	4770      	bx	lr

0001997c <_getpid>:
}
   1997c:	2000      	movs	r0, #0
   1997e:	4770      	bx	lr

00019980 <_fstat>:
	st->st_mode = S_IFCHR;
   19980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19984:	604b      	str	r3, [r1, #4]
}
   19986:	2000      	movs	r0, #0
   19988:	4770      	bx	lr

0001998a <__retarget_lock_init_recursive>:
	k_sem_init((struct k_sem *)*lock, 1, 1);
}

/* Create a new dynamic recursive lock */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
   1998a:	b510      	push	{r4, lr}
   1998c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(lock != NULL);

	/* Allocate mutex object */
#ifndef CONFIG_USERSPACE
	*lock = malloc(sizeof(struct k_mutex));
   1998e:	2014      	movs	r0, #20
   19990:	f7fa fd2e 	bl	143f0 <malloc>
   19994:	6020      	str	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   19996:	f004 f8a6 	bl	1dae6 <z_impl_k_mutex_init>
	*lock = k_object_alloc(K_OBJ_MUTEX);
#endif /* !CONFIG_USERSPACE */
	__ASSERT(*lock != NULL, "recursive lock allocation failed");

	k_mutex_init((struct k_mutex *)*lock);
}
   1999a:	bd10      	pop	{r4, pc}

0001999c <__retarget_lock_close_recursive>:
#endif /* !CONFIG_USERSPACE */
}

/* Close dynamic recursive lock */
void __retarget_lock_close_recursive(_LOCK_T lock)
{
   1999c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(lock != NULL);
#ifndef CONFIG_USERSPACE
	free(lock);
   1999e:	f7fa fd2f 	bl	14400 <free>
#else
	k_object_release(lock);
#endif /* !CONFIG_USERSPACE */
}
   199a2:	bd08      	pop	{r3, pc}

000199a4 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   199a4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   199a6:	f04f 32ff 	mov.w	r2, #4294967295
   199aa:	f04f 33ff 	mov.w	r3, #4294967295
   199ae:	f7f9 f9a5 	bl	12cfc <z_impl_k_mutex_lock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   199b2:	bd08      	pop	{r3, pc}

000199b4 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   199b4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   199b6:	f7f9 fa2b 	bl	12e10 <z_impl_k_mutex_unlock>
	__ASSERT_NO_MSG(lock != NULL);
	k_mutex_unlock((struct k_mutex *)lock);
}
   199ba:	bd08      	pop	{r3, pc}

000199bc <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   199bc:	2806      	cmp	r0, #6
   199be:	d000      	beq.n	199c2 <pm_state_set+0x6>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   199c0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   199c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   199c6:	2201      	movs	r2, #1
   199c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   199cc:	f3bf 8f4f 	dsb	sy
        __WFE();
   199d0:	bf20      	wfe
    while (true)
   199d2:	e7fd      	b.n	199d0 <pm_state_set+0x14>

000199d4 <pm_state_exit_post_ops>:
   199d4:	2300      	movs	r3, #0
   199d6:	f383 8811 	msr	BASEPRI, r3
   199da:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   199de:	4770      	bx	lr

000199e0 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   199e0:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   199e2:	f002 f85b 	bl	1ba9c <bt_encrypt_le>
#endif
}
   199e6:	bd08      	pop	{r3, pc}

000199e8 <internal_rand>:
{
   199e8:	b508      	push	{r3, lr}
	return bt_rand(buf, len);
   199ea:	f002 f853 	bl	1ba94 <bt_rand>
}
   199ee:	bd08      	pop	{r3, pc}

000199f0 <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   199f0:	b510      	push	{r4, lr}
   199f2:	b084      	sub	sp, #16
   199f4:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   199f6:	880a      	ldrh	r2, [r1, #0]
   199f8:	788b      	ldrb	r3, [r1, #2]
   199fa:	f8ad 2000 	strh.w	r2, [sp]
   199fe:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   19a02:	2300      	movs	r3, #0
   19a04:	f8cd 3003 	str.w	r3, [sp, #3]
   19a08:	f8cd 3007 	str.w	r3, [sp, #7]
   19a0c:	f8cd 300b 	str.w	r3, [sp, #11]
   19a10:	f88d 300f 	strb.w	r3, [sp, #15]

	err = internal_encrypt_le(irk, res, res);
   19a14:	466a      	mov	r2, sp
   19a16:	4669      	mov	r1, sp
   19a18:	f7ff ffe2 	bl	199e0 <internal_encrypt_le>
	if (err) {
   19a1c:	b928      	cbnz	r0, 19a2a <ah+0x3a>
   19a1e:	f8bd 2000 	ldrh.w	r2, [sp]
   19a22:	f89d 3002 	ldrb.w	r3, [sp, #2]
   19a26:	8022      	strh	r2, [r4, #0]
   19a28:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   19a2a:	b004      	add	sp, #16
   19a2c:	bd10      	pop	{r4, pc}

00019a2e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   19a2e:	b510      	push	{r4, lr}
   19a30:	b082      	sub	sp, #8
   19a32:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   19a34:	aa01      	add	r2, sp, #4
   19a36:	3103      	adds	r1, #3
   19a38:	f7ff ffda 	bl	199f0 <ah>
	if (err) {
   19a3c:	b110      	cbz	r0, 19a44 <bt_rpa_irk_matches+0x16>
		return false;
   19a3e:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   19a40:	b002      	add	sp, #8
   19a42:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   19a44:	2203      	movs	r2, #3
   19a46:	a901      	add	r1, sp, #4
   19a48:	4620      	mov	r0, r4
   19a4a:	f7fa ff9f 	bl	1498c <memcmp>
   19a4e:	fab0 f080 	clz	r0, r0
   19a52:	0940      	lsrs	r0, r0, #5
   19a54:	e7f4      	b.n	19a40 <bt_rpa_irk_matches+0x12>

00019a56 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   19a56:	b570      	push	{r4, r5, r6, lr}
   19a58:	4605      	mov	r5, r0
   19a5a:	460c      	mov	r4, r1
	int err;

	err = internal_rand(rpa->val + 3, 3);
   19a5c:	1cce      	adds	r6, r1, #3
   19a5e:	2103      	movs	r1, #3
   19a60:	4630      	mov	r0, r6
   19a62:	f7ff ffc1 	bl	199e8 <internal_rand>
	if (err) {
   19a66:	b100      	cbz	r0, 19a6a <bt_rpa_create+0x14>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   19a68:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
   19a6a:	f994 3005 	ldrsb.w	r3, [r4, #5]
   19a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19a76:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
   19a78:	4622      	mov	r2, r4
   19a7a:	4631      	mov	r1, r6
   19a7c:	4628      	mov	r0, r5
   19a7e:	f7ff ffb7 	bl	199f0 <ah>
	if (err) {
   19a82:	e7f1      	b.n	19a68 <bt_rpa_create+0x12>

00019a84 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   19a84:	b510      	push	{r4, lr}
   19a86:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   19a88:	2301      	movs	r3, #1
   19a8a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   19a8e:	2106      	movs	r1, #6
   19a90:	f002 f800 	bl	1ba94 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   19a94:	b918      	cbnz	r0, 19a9e <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   19a96:	79a3      	ldrb	r3, [r4, #6]
   19a98:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19a9c:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   19a9e:	bd10      	pop	{r4, pc}

00019aa0 <hci_vendor_event>:
}
   19aa0:	4770      	bx	lr

00019aa2 <bt_br_init>:
}
   19aa2:	2000      	movs	r0, #0
   19aa4:	4770      	bx	lr

00019aa6 <hci_hardware_error>:
{
   19aa6:	b508      	push	{r3, lr}
   19aa8:	2101      	movs	r1, #1
   19aaa:	3008      	adds	r0, #8
   19aac:	f003 f9b5 	bl	1ce1a <net_buf_simple_pull_mem>
}
   19ab0:	bd08      	pop	{r3, pc}

00019ab2 <le_set_event_mask>:
{
   19ab2:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   19ab4:	2108      	movs	r1, #8
   19ab6:	f242 0001 	movw	r0, #8193	; 0x2001
   19aba:	f7eb fd69 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
   19abe:	b1b0      	cbz	r0, 19aee <le_set_event_mask+0x3c>
   19ac0:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   19ac2:	2108      	movs	r1, #8
   19ac4:	4408      	add	r0, r1
   19ac6:	f003 f98f 	bl	1cde8 <net_buf_simple_add>
	dst[0] = val;
   19aca:	2302      	movs	r3, #2
   19acc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   19ace:	23f0      	movs	r3, #240	; 0xf0
   19ad0:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   19ad2:	2397      	movs	r3, #151	; 0x97
   19ad4:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
   19ad6:	2200      	movs	r2, #0
   19ad8:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   19ada:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   19adc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   19ade:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   19ae0:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   19ae2:	4621      	mov	r1, r4
   19ae4:	f242 0001 	movw	r0, #8193	; 0x2001
   19ae8:	f7eb fd90 	bl	560c <bt_hci_cmd_send_sync>
}
   19aec:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   19aee:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19af2:	e7fb      	b.n	19aec <le_set_event_mask+0x3a>

00019af4 <set_event_mask>:
{
   19af4:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   19af6:	2108      	movs	r1, #8
   19af8:	f640 4001 	movw	r0, #3073	; 0xc01
   19afc:	f7eb fd48 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
   19b00:	b1b0      	cbz	r0, 19b30 <set_event_mask+0x3c>
   19b02:	4604      	mov	r4, r0
   19b04:	2108      	movs	r1, #8
   19b06:	4408      	add	r0, r1
   19b08:	f003 f96e 	bl	1cde8 <net_buf_simple_add>
	dst[0] = val;
   19b0c:	2200      	movs	r2, #0
   19b0e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   19b10:	2380      	movs	r3, #128	; 0x80
   19b12:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   19b14:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   19b16:	2302      	movs	r3, #2
   19b18:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   19b1a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   19b1c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   19b1e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   19b20:	2320      	movs	r3, #32
   19b22:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   19b24:	4621      	mov	r1, r4
   19b26:	f640 4001 	movw	r0, #3073	; 0xc01
   19b2a:	f7eb fd6f 	bl	560c <bt_hci_cmd_send_sync>
}
   19b2e:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   19b30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19b34:	e7fb      	b.n	19b2e <set_event_mask+0x3a>

00019b36 <bt_get_phy>:
	switch (hci_phy) {
   19b36:	2802      	cmp	r0, #2
   19b38:	d004      	beq.n	19b44 <bt_get_phy+0xe>
   19b3a:	2803      	cmp	r0, #3
   19b3c:	d004      	beq.n	19b48 <bt_get_phy+0x12>
   19b3e:	2801      	cmp	r0, #1
   19b40:	d001      	beq.n	19b46 <bt_get_phy+0x10>
		return 0;
   19b42:	2000      	movs	r0, #0
}
   19b44:	4770      	bx	lr
   19b46:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
   19b48:	2004      	movs	r0, #4
   19b4a:	4770      	bx	lr

00019b4c <process_events>:
{
   19b4c:	b538      	push	{r3, r4, r5, lr}
   19b4e:	4604      	mov	r4, r0
   19b50:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   19b52:	e001      	b.n	19b58 <process_events+0xc>
	for (; count; ev++, count--) {
   19b54:	3414      	adds	r4, #20
   19b56:	3d01      	subs	r5, #1
   19b58:	b155      	cbz	r5, 19b70 <process_events+0x24>
		switch (ev->state) {
   19b5a:	68e3      	ldr	r3, [r4, #12]
   19b5c:	f3c3 3345 	ubfx	r3, r3, #13, #6
   19b60:	2b04      	cmp	r3, #4
   19b62:	d1f7      	bne.n	19b54 <process_events+0x8>
			if (ev->tag == BT_EVENT_CMD_TX) {
   19b64:	7b23      	ldrb	r3, [r4, #12]
   19b66:	2b00      	cmp	r3, #0
   19b68:	d1f4      	bne.n	19b54 <process_events+0x8>
				send_cmd();
   19b6a:	f7eb fecd 	bl	5908 <send_cmd>
   19b6e:	e7f1      	b.n	19b54 <process_events+0x8>
}
   19b70:	bd38      	pop	{r3, r4, r5, pc}

00019b72 <bt_recv>:
{
   19b72:	b508      	push	{r3, lr}
   19b74:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   19b76:	2b01      	cmp	r3, #1
   19b78:	d103      	bne.n	19b82 <bt_recv+0x10>
		hci_event(buf);
   19b7a:	f7eb fc9b 	bl	54b4 <hci_event>
		return 0;
   19b7e:	2000      	movs	r0, #0
}
   19b80:	bd08      	pop	{r3, pc}
		net_buf_unref(buf);
   19b82:	f003 f8db 	bl	1cd3c <net_buf_unref>
		return -EINVAL;
   19b86:	f06f 0015 	mvn.w	r0, #21
   19b8a:	e7f9      	b.n	19b80 <bt_recv+0xe>

00019b8c <bt_init>:
{
   19b8c:	b510      	push	{r4, lr}
	err = hci_init();
   19b8e:	f7eb fe8d 	bl	58ac <hci_init>
	if (err) {
   19b92:	4604      	mov	r4, r0
   19b94:	b108      	cbz	r0, 19b9a <bt_init+0xe>
}
   19b96:	4620      	mov	r0, r4
   19b98:	bd10      	pop	{r4, pc}
	bt_finalize_init();
   19b9a:	f7eb ffe5 	bl	5b68 <bt_finalize_init>
	return 0;
   19b9e:	e7fa      	b.n	19b96 <bt_init+0xa>

00019ba0 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   19ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ba2:	b083      	sub	sp, #12
   19ba4:	4604      	mov	r4, r0
   19ba6:	460f      	mov	r7, r1
   19ba8:	4616      	mov	r6, r2
	while (ad->len > 1) {
   19baa:	88a3      	ldrh	r3, [r4, #4]
   19bac:	2b01      	cmp	r3, #1
   19bae:	d91b      	bls.n	19be8 <bt_data_parse+0x48>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   19bb0:	4620      	mov	r0, r4
   19bb2:	f003 f93a 	bl	1ce2a <net_buf_simple_pull_u8>
		if (len == 0U) {
   19bb6:	4605      	mov	r5, r0
   19bb8:	b1b0      	cbz	r0, 19be8 <bt_data_parse+0x48>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   19bba:	b283      	uxth	r3, r0
   19bbc:	88a2      	ldrh	r2, [r4, #4]
   19bbe:	4293      	cmp	r3, r2
   19bc0:	d812      	bhi.n	19be8 <bt_data_parse+0x48>
			BT_WARN("Malformed data");
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
   19bc2:	4620      	mov	r0, r4
   19bc4:	f003 f931 	bl	1ce2a <net_buf_simple_pull_u8>
   19bc8:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   19bcc:	1e6b      	subs	r3, r5, #1
   19bce:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
   19bd2:	6823      	ldr	r3, [r4, #0]
   19bd4:	9301      	str	r3, [sp, #4]

		if (!func(&data, user_data)) {
   19bd6:	4631      	mov	r1, r6
   19bd8:	4668      	mov	r0, sp
   19bda:	47b8      	blx	r7
   19bdc:	b120      	cbz	r0, 19be8 <bt_data_parse+0x48>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
   19bde:	1e69      	subs	r1, r5, #1
   19be0:	4620      	mov	r0, r4
   19be2:	f003 f912 	bl	1ce0a <net_buf_simple_pull>
   19be6:	e7e0      	b.n	19baa <bt_data_parse+0xa>
	}
}
   19be8:	b003      	add	sp, #12
   19bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019bec <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   19bec:	b570      	push	{r4, r5, r6, lr}
   19bee:	4606      	mov	r6, r0
   19bf0:	460d      	mov	r5, r1
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   19bf2:	f04f 32ff 	mov.w	r2, #4294967295
   19bf6:	f04f 33ff 	mov.w	r3, #4294967295
   19bfa:	2100      	movs	r1, #0
   19bfc:	f7eb faf4 	bl	51e8 <bt_buf_get_evt>
   19c00:	4604      	mov	r4, r0
   19c02:	2102      	movs	r1, #2
   19c04:	3008      	adds	r0, #8
   19c06:	f003 f8ef 	bl	1cde8 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   19c0a:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   19c0c:	7045      	strb	r5, [r0, #1]

	return buf;
}
   19c0e:	4620      	mov	r0, r4
   19c10:	bd70      	pop	{r4, r5, r6, pc}

00019c12 <bt_hci_cmd_complete_create>:

struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
   19c12:	b538      	push	{r3, r4, r5, lr}
   19c14:	4605      	mov	r5, r0
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   19c16:	3103      	adds	r1, #3
   19c18:	b2c9      	uxtb	r1, r1
   19c1a:	200e      	movs	r0, #14
   19c1c:	f7ff ffe6 	bl	19bec <bt_hci_evt_create>
   19c20:	4604      	mov	r4, r0
   19c22:	2103      	movs	r1, #3
   19c24:	3008      	adds	r0, #8
   19c26:	f003 f8df 	bl	1cde8 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   19c2a:	2301      	movs	r3, #1
   19c2c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   19c2e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   19c32:	4620      	mov	r0, r4
   19c34:	bd38      	pop	{r3, r4, r5, pc}

00019c36 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   19c36:	b570      	push	{r4, r5, r6, lr}
   19c38:	4605      	mov	r5, r0
   19c3a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   19c3c:	2104      	movs	r1, #4
   19c3e:	200f      	movs	r0, #15
   19c40:	f7ff ffd4 	bl	19bec <bt_hci_evt_create>
   19c44:	4604      	mov	r4, r0
   19c46:	2104      	movs	r1, #4
   19c48:	3008      	adds	r0, #8
   19c4a:	f003 f8cd 	bl	1cde8 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
   19c4e:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   19c50:	2201      	movs	r2, #1
   19c52:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   19c54:	8045      	strh	r5, [r0, #2]

	return buf;
}
   19c56:	4620      	mov	r0, r4
   19c58:	bd70      	pop	{r4, r5, r6, pc}

00019c5a <is_adv_using_rand_addr>:
}
   19c5a:	2000      	movs	r0, #0
   19c5c:	4770      	bx	lr

00019c5e <bt_lookup_id_addr>:
}
   19c5e:	4608      	mov	r0, r1
   19c60:	4770      	bx	lr

00019c62 <bt_id_set_private_addr>:
{
   19c62:	b500      	push	{lr}
   19c64:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   19c66:	2106      	movs	r1, #6
   19c68:	4668      	mov	r0, sp
   19c6a:	f001 ff13 	bl	1ba94 <bt_rand>
	if (err) {
   19c6e:	b110      	cbz	r0, 19c76 <bt_id_set_private_addr+0x14>
}
   19c70:	b003      	add	sp, #12
   19c72:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   19c76:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19c7e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   19c82:	4668      	mov	r0, sp
   19c84:	f7ec f810 	bl	5ca8 <set_random_address>
	if (err)  {
   19c88:	e7f2      	b.n	19c70 <bt_id_set_private_addr+0xe>

00019c8a <bt_id_scan_random_addr_check>:
}
   19c8a:	2001      	movs	r0, #1
   19c8c:	4770      	bx	lr

00019c8e <get_adv_props_legacy>:
	switch (evt_type) {
   19c8e:	2804      	cmp	r0, #4
   19c90:	d80a      	bhi.n	19ca8 <get_adv_props_legacy+0x1a>
   19c92:	e8df f000 	tbb	[pc, r0]
   19c96:	0b03      	.short	0x0b03
   19c98:	050c      	.short	0x050c
   19c9a:	07          	.byte	0x07
   19c9b:	00          	.byte	0x00
   19c9c:	2003      	movs	r0, #3
   19c9e:	4770      	bx	lr
		return 0;
   19ca0:	2000      	movs	r0, #0
   19ca2:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   19ca4:	200a      	movs	r0, #10
   19ca6:	4770      	bx	lr
		return 0;
   19ca8:	2000      	movs	r0, #0
   19caa:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   19cac:	2005      	movs	r0, #5
}
   19cae:	4770      	bx	lr

00019cb0 <get_adv_type>:
	switch (evt_type) {
   19cb0:	3810      	subs	r0, #16
   19cb2:	280b      	cmp	r0, #11
   19cb4:	d80f      	bhi.n	19cd6 <get_adv_type+0x26>
   19cb6:	e8df f000 	tbb	[pc, r0]
   19cba:	0e0a      	.short	0x0e0a
   19cbc:	100e0608 	.word	0x100e0608
   19cc0:	0e0e0e0e 	.word	0x0e0e0e0e
   19cc4:	0c0c      	.short	0x0c0c
   19cc6:	2000      	movs	r0, #0
   19cc8:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_SCAN_IND;
   19cca:	2002      	movs	r0, #2
   19ccc:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_NONCONN_IND;
   19cce:	2003      	movs	r0, #3
   19cd0:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_SCAN_RSP;
   19cd2:	2004      	movs	r0, #4
   19cd4:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_EXT_ADV;
   19cd6:	2005      	movs	r0, #5
   19cd8:	4770      	bx	lr
		return BT_GAP_ADV_TYPE_ADV_DIRECT_IND;
   19cda:	2001      	movs	r0, #1
}
   19cdc:	4770      	bx	lr

00019cde <get_adv_props_extended>:
	return (evt_type ^ BT_HCI_LE_ADV_EVT_TYPE_LEGACY) & BIT_MASK(5);
   19cde:	f080 0010 	eor.w	r0, r0, #16
}
   19ce2:	f000 001f 	and.w	r0, r0, #31
   19ce6:	4770      	bx	lr

00019ce8 <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   19ce8:	7803      	ldrb	r3, [r0, #0]
   19cea:	2b01      	cmp	r3, #1
   19cec:	d815      	bhi.n	19d1a <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   19cee:	6843      	ldr	r3, [r0, #4]
   19cf0:	f033 030f 	bics.w	r3, r3, #15
   19cf4:	d113      	bne.n	19d1e <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   19cf6:	8902      	ldrh	r2, [r0, #8]
   19cf8:	1f13      	subs	r3, r2, #4
   19cfa:	b29b      	uxth	r3, r3
   19cfc:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   19d00:	428b      	cmp	r3, r1
   19d02:	d80e      	bhi.n	19d22 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   19d04:	8941      	ldrh	r1, [r0, #10]
   19d06:	1f0b      	subs	r3, r1, #4
   19d08:	b29b      	uxth	r3, r3
   19d0a:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   19d0e:	4283      	cmp	r3, r0
   19d10:	d809      	bhi.n	19d26 <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   19d12:	428a      	cmp	r2, r1
   19d14:	d309      	bcc.n	19d2a <valid_le_scan_param+0x42>
	return true;
   19d16:	2001      	movs	r0, #1
   19d18:	4770      	bx	lr
		return false;
   19d1a:	2000      	movs	r0, #0
   19d1c:	4770      	bx	lr
		return false;
   19d1e:	2000      	movs	r0, #0
   19d20:	4770      	bx	lr
		return false;
   19d22:	2000      	movs	r0, #0
   19d24:	4770      	bx	lr
		return false;
   19d26:	2000      	movs	r0, #0
   19d28:	4770      	bx	lr
		return false;
   19d2a:	2000      	movs	r0, #0
}
   19d2c:	4770      	bx	lr

00019d2e <start_passive_scan>:
{
   19d2e:	b500      	push	{lr}
   19d30:	b083      	sub	sp, #12
	if (fast_scan) {
   19d32:	b178      	cbz	r0, 19d54 <start_passive_scan+0x26>
		window = BT_GAP_SCAN_FAST_WINDOW;
   19d34:	2330      	movs	r3, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   19d36:	2260      	movs	r2, #96	; 0x60
		scan.type = BT_HCI_LE_SCAN_PASSIVE;
   19d38:	2100      	movs	r1, #0
   19d3a:	f88d 1000 	strb.w	r1, [sp]
		scan.interval = sys_cpu_to_le16(interval);
   19d3e:	f8ad 2001 	strh.w	r2, [sp, #1]
		scan.window = sys_cpu_to_le16(window);
   19d42:	f8ad 3003 	strh.w	r3, [sp, #3]
		return start_le_scan_ext(&scan, NULL, 0);
   19d46:	460a      	mov	r2, r1
   19d48:	4668      	mov	r0, sp
   19d4a:	f7ec f9af 	bl	60ac <start_le_scan_ext>
}
   19d4e:	b003      	add	sp, #12
   19d50:	f85d fb04 	ldr.w	pc, [sp], #4
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   19d54:	2312      	movs	r3, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   19d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19d5a:	e7ed      	b.n	19d38 <start_passive_scan+0xa>

00019d5c <fragmented_advertisers_equal>:
{
   19d5c:	b508      	push	{r3, lr}
	return a->sid == sid && bt_addr_le_cmp(&a->addr, addr) == 0;
   19d5e:	79c3      	ldrb	r3, [r0, #7]
   19d60:	4293      	cmp	r3, r2
   19d62:	d001      	beq.n	19d68 <fragmented_advertisers_equal+0xc>
   19d64:	2000      	movs	r0, #0
}
   19d66:	bd08      	pop	{r3, pc}
	return memcmp(a, b, sizeof(*a));
   19d68:	2207      	movs	r2, #7
   19d6a:	f7fa fe0f 	bl	1498c <memcmp>
	return a->sid == sid && bt_addr_le_cmp(&a->addr, addr) == 0;
   19d6e:	b908      	cbnz	r0, 19d74 <fragmented_advertisers_equal+0x18>
   19d70:	2001      	movs	r0, #1
   19d72:	e7f8      	b.n	19d66 <fragmented_advertisers_equal+0xa>
   19d74:	2000      	movs	r0, #0
   19d76:	e7f6      	b.n	19d66 <fragmented_advertisers_equal+0xa>

00019d78 <create_ext_adv_info>:
{
   19d78:	b538      	push	{r3, r4, r5, lr}
   19d7a:	4605      	mov	r5, r0
   19d7c:	460c      	mov	r4, r1
	scan_info->primary_phy = bt_get_phy(evt->prim_phy);
   19d7e:	7a40      	ldrb	r0, [r0, #9]
   19d80:	f7ff fed9 	bl	19b36 <bt_get_phy>
   19d84:	7320      	strb	r0, [r4, #12]
	scan_info->secondary_phy = bt_get_phy(evt->sec_phy);
   19d86:	7aa8      	ldrb	r0, [r5, #10]
   19d88:	f7ff fed5 	bl	19b36 <bt_get_phy>
   19d8c:	7360      	strb	r0, [r4, #13]
	scan_info->tx_power = evt->tx_power;
   19d8e:	f995 300c 	ldrsb.w	r3, [r5, #12]
   19d92:	71a3      	strb	r3, [r4, #6]
	scan_info->rssi = evt->rssi;
   19d94:	f995 300d 	ldrsb.w	r3, [r5, #13]
   19d98:	7163      	strb	r3, [r4, #5]
	scan_info->sid = evt->sid;
   19d9a:	7aeb      	ldrb	r3, [r5, #11]
   19d9c:	7123      	strb	r3, [r4, #4]
	scan_info->interval = sys_le16_to_cpu(evt->interval);
   19d9e:	89eb      	ldrh	r3, [r5, #14]
   19da0:	8163      	strh	r3, [r4, #10]
	scan_info->adv_type = get_adv_type(evt->evt_type);
   19da2:	8828      	ldrh	r0, [r5, #0]
   19da4:	b2c0      	uxtb	r0, r0
   19da6:	f7ff ff83 	bl	19cb0 <get_adv_type>
   19daa:	71e0      	strb	r0, [r4, #7]
	scan_info->adv_props = get_adv_props_extended(evt->evt_type);
   19dac:	8828      	ldrh	r0, [r5, #0]
   19dae:	f7ff ff96 	bl	19cde <get_adv_props_extended>
   19db2:	8120      	strh	r0, [r4, #8]
}
   19db4:	bd38      	pop	{r3, r4, r5, pc}

00019db6 <per_adv_sync_terminate>:
{
   19db6:	b538      	push	{r3, r4, r5, lr}
   19db8:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_PER_ADV_TERMINATE_SYNC,
   19dba:	2102      	movs	r1, #2
   19dbc:	f242 0046 	movw	r0, #8262	; 0x2046
   19dc0:	f7eb fbe6 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
   19dc4:	b168      	cbz	r0, 19de2 <per_adv_sync_terminate+0x2c>
   19dc6:	4605      	mov	r5, r0
   19dc8:	2102      	movs	r1, #2
   19dca:	3008      	adds	r0, #8
   19dcc:	f003 f80c 	bl	1cde8 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   19dd0:	2200      	movs	r2, #0
   19dd2:	8002      	strh	r2, [r0, #0]
	cp->handle = sys_cpu_to_le16(handle);
   19dd4:	8004      	strh	r4, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_PER_ADV_TERMINATE_SYNC, buf,
   19dd6:	4629      	mov	r1, r5
   19dd8:	f242 0046 	movw	r0, #8262	; 0x2046
   19ddc:	f7eb fc16 	bl	560c <bt_hci_cmd_send_sync>
}
   19de0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19de2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19de6:	e7fb      	b.n	19de0 <per_adv_sync_terminate+0x2a>

00019de8 <per_adv_sync_delete>:
	atomic_clear(per_adv_sync->flags);
   19de8:	3014      	adds	r0, #20
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19dea:	2300      	movs	r3, #0
   19dec:	f3bf 8f5b 	dmb	ish
   19df0:	e850 2f00 	ldrex	r2, [r0]
   19df4:	e840 3100 	strex	r1, r3, [r0]
   19df8:	2900      	cmp	r1, #0
   19dfa:	d1f9      	bne.n	19df0 <per_adv_sync_delete+0x8>
   19dfc:	f3bf 8f5b 	dmb	ish
}
   19e00:	4770      	bx	lr

00019e02 <bt_le_per_adv_sync_create_cancel>:
{
   19e02:	b510      	push	{r4, lr}
   19e04:	4604      	mov	r4, r0
	if (get_pending_per_adv_sync() != per_adv_sync) {
   19e06:	f7ec f9e1 	bl	61cc <get_pending_per_adv_sync>
   19e0a:	4284      	cmp	r4, r0
   19e0c:	d10c      	bne.n	19e28 <bt_le_per_adv_sync_create_cancel+0x26>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_PER_ADV_CREATE_SYNC_CANCEL, 0);
   19e0e:	2100      	movs	r1, #0
   19e10:	f242 0045 	movw	r0, #8261	; 0x2045
   19e14:	f7eb fbbc 	bl	5590 <bt_hci_cmd_create>
	if (!buf) {
   19e18:	4601      	mov	r1, r0
   19e1a:	b140      	cbz	r0, 19e2e <bt_le_per_adv_sync_create_cancel+0x2c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_PER_ADV_CREATE_SYNC_CANCEL, buf,
   19e1c:	2200      	movs	r2, #0
   19e1e:	f242 0045 	movw	r0, #8261	; 0x2045
   19e22:	f7eb fbf3 	bl	560c <bt_hci_cmd_send_sync>
}
   19e26:	bd10      	pop	{r4, pc}
		return -EINVAL;
   19e28:	f06f 0015 	mvn.w	r0, #21
   19e2c:	e7fb      	b.n	19e26 <bt_le_per_adv_sync_create_cancel+0x24>
		return -ENOBUFS;
   19e2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19e32:	e7f8      	b.n	19e26 <bt_le_per_adv_sync_create_cancel+0x24>

00019e34 <bt_le_per_adv_sync_terminate>:
{
   19e34:	b508      	push	{r3, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e36:	f3bf 8f5b 	dmb	ish
   19e3a:	6943      	ldr	r3, [r0, #20]
   19e3c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(per_adv_sync->flags, BT_PER_ADV_SYNC_SYNCED)) {
   19e40:	f013 0f02 	tst.w	r3, #2
   19e44:	d003      	beq.n	19e4e <bt_le_per_adv_sync_terminate+0x1a>
	err = per_adv_sync_terminate(per_adv_sync->handle);
   19e46:	8900      	ldrh	r0, [r0, #8]
   19e48:	f7ff ffb5 	bl	19db6 <per_adv_sync_terminate>
}
   19e4c:	bd08      	pop	{r3, pc}
		return -EINVAL;
   19e4e:	f06f 0015 	mvn.w	r0, #21
   19e52:	e7fb      	b.n	19e4c <bt_le_per_adv_sync_terminate+0x18>

00019e54 <bt_le_scan_set_enable>:
{
   19e54:	b508      	push	{r3, lr}
		return set_le_ext_scan_enable(enable, 0);
   19e56:	2100      	movs	r1, #0
   19e58:	f7ec f8ee 	bl	6038 <set_le_ext_scan_enable>
}
   19e5c:	bd08      	pop	{r3, pc}

00019e5e <bt_hci_le_per_adv_report>:
	if (buf->len < sizeof(*evt)) {
   19e5e:	8983      	ldrh	r3, [r0, #12]
   19e60:	2b06      	cmp	r3, #6
   19e62:	d800      	bhi.n	19e66 <bt_hci_le_per_adv_report+0x8>
   19e64:	4770      	bx	lr
{
   19e66:	b530      	push	{r4, r5, lr}
   19e68:	b083      	sub	sp, #12
	return net_buf_simple_pull_mem(&buf->b, len);
   19e6a:	f100 0408 	add.w	r4, r0, #8
   19e6e:	2107      	movs	r1, #7
   19e70:	4620      	mov	r0, r4
   19e72:	f002 ffd2 	bl	1ce1a <net_buf_simple_pull_mem>
   19e76:	4605      	mov	r5, r0
	per_adv_sync = bt_hci_get_per_adv_sync(sys_le16_to_cpu(evt->handle));
   19e78:	8800      	ldrh	r0, [r0, #0]
   19e7a:	f7ec fbbf 	bl	65fc <bt_hci_get_per_adv_sync>
	if (!per_adv_sync) {
   19e7e:	b1f0      	cbz	r0, 19ebe <bt_hci_le_per_adv_report+0x60>
   19e80:	f3bf 8f5b 	dmb	ish
   19e84:	6942      	ldr	r2, [r0, #20]
   19e86:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(per_adv_sync->flags,
   19e8a:	f012 0f10 	tst.w	r2, #16
   19e8e:	d116      	bne.n	19ebe <bt_hci_le_per_adv_report+0x60>
	info.tx_power = evt->tx_power;
   19e90:	f995 2002 	ldrsb.w	r2, [r5, #2]
   19e94:	f88d 2005 	strb.w	r2, [sp, #5]
	info.rssi = evt->rssi;
   19e98:	f995 2003 	ldrsb.w	r2, [r5, #3]
   19e9c:	f88d 2006 	strb.w	r2, [sp, #6]
	info.cte_type = BIT(evt->cte_type);
   19ea0:	7929      	ldrb	r1, [r5, #4]
   19ea2:	2201      	movs	r2, #1
   19ea4:	408a      	lsls	r2, r1
   19ea6:	f88d 2007 	strb.w	r2, [sp, #7]
	info.addr = &per_adv_sync->addr;
   19eaa:	9000      	str	r0, [sp, #0]
	info.sid = per_adv_sync->sid;
   19eac:	79c2      	ldrb	r2, [r0, #7]
   19eae:	f88d 2004 	strb.w	r2, [sp, #4]
	if (!per_adv_sync->report_truncated) {
   19eb2:	7c02      	ldrb	r2, [r0, #16]
   19eb4:	b952      	cbnz	r2, 19ecc <bt_hci_le_per_adv_report+0x6e>
		if (evt->data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_COMPLETE) {
   19eb6:	796a      	ldrb	r2, [r5, #5]
   19eb8:	b11a      	cbz	r2, 19ec2 <bt_hci_le_per_adv_report+0x64>
			per_adv_sync->report_truncated = true;
   19eba:	2201      	movs	r2, #1
   19ebc:	7402      	strb	r2, [r0, #16]
}
   19ebe:	b003      	add	sp, #12
   19ec0:	bd30      	pop	{r4, r5, pc}
			bt_hci_le_per_adv_report_recv(per_adv_sync, &buf->b, &info);
   19ec2:	466a      	mov	r2, sp
   19ec4:	4621      	mov	r1, r4
   19ec6:	f7ec fbbb 	bl	6640 <bt_hci_le_per_adv_report_recv>
   19eca:	e7f8      	b.n	19ebe <bt_hci_le_per_adv_report+0x60>
	} else if (evt->data_status == BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_COMPLETE) {
   19ecc:	796a      	ldrb	r2, [r5, #5]
   19ece:	2a00      	cmp	r2, #0
   19ed0:	d1f5      	bne.n	19ebe <bt_hci_le_per_adv_report+0x60>
		per_adv_sync->report_truncated = false;
   19ed2:	7402      	strb	r2, [r0, #16]
   19ed4:	e7f3      	b.n	19ebe <bt_hci_le_per_adv_report+0x60>

00019ed6 <bt_hci_le_adv_report>:
{
   19ed6:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ed8:	b085      	sub	sp, #20
   19eda:	4607      	mov	r7, r0
	return net_buf_simple_pull_u8(&buf->b);
   19edc:	f100 0608 	add.w	r6, r0, #8
   19ee0:	4630      	mov	r0, r6
   19ee2:	f002 ffa2 	bl	1ce2a <net_buf_simple_pull_u8>
	BT_DBG("Adv number of reports %u",  num_reports);
   19ee6:	e02b      	b.n	19f40 <bt_hci_le_adv_report+0x6a>
	return net_buf_simple_pull_mem(&buf->b, len);
   19ee8:	2109      	movs	r1, #9
   19eea:	4630      	mov	r0, r6
   19eec:	f002 ff95 	bl	1ce1a <net_buf_simple_pull_mem>
   19ef0:	4604      	mov	r4, r0
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19ef2:	2301      	movs	r3, #1
   19ef4:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   19ef8:	2200      	movs	r2, #0
   19efa:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   19efe:	237f      	movs	r3, #127	; 0x7f
   19f00:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   19f04:	7a03      	ldrb	r3, [r0, #8]
   19f06:	4403      	add	r3, r0
   19f08:	f993 3009 	ldrsb.w	r3, [r3, #9]
   19f0c:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   19f10:	23ff      	movs	r3, #255	; 0xff
   19f12:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   19f16:	f8ad 200a 	strh.w	r2, [sp, #10]
		adv_info.adv_type = evt->evt_type;
   19f1a:	7800      	ldrb	r0, [r0, #0]
   19f1c:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   19f20:	f7ff feb5 	bl	19c8e <get_adv_props_legacy>
   19f24:	f8ad 0008 	strh.w	r0, [sp, #8]
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   19f28:	7a23      	ldrb	r3, [r4, #8]
   19f2a:	4632      	mov	r2, r6
   19f2c:	4669      	mov	r1, sp
   19f2e:	1c60      	adds	r0, r4, #1
   19f30:	f7ec f9a8 	bl	6284 <le_adv_recv>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   19f34:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   19f36:	3101      	adds	r1, #1
   19f38:	4630      	mov	r0, r6
   19f3a:	f002 ff66 	bl	1ce0a <net_buf_simple_pull>
	while (num_reports--) {
   19f3e:	4628      	mov	r0, r5
   19f40:	1e45      	subs	r5, r0, #1
   19f42:	b2ed      	uxtb	r5, r5
   19f44:	b110      	cbz	r0, 19f4c <bt_hci_le_adv_report+0x76>
		if (buf->len < sizeof(*evt)) {
   19f46:	89bb      	ldrh	r3, [r7, #12]
   19f48:	2b08      	cmp	r3, #8
   19f4a:	d8cd      	bhi.n	19ee8 <bt_hci_le_adv_report+0x12>
}
   19f4c:	b005      	add	sp, #20
   19f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00019f50 <valid_cl_cte_rx_params>:
{
   19f50:	b508      	push	{r3, lr}
	if (params->max_cte_count > BT_HCI_LE_SAMPLE_CTE_COUNT_MAX) {
   19f52:	7883      	ldrb	r3, [r0, #2]
   19f54:	2b10      	cmp	r3, #16
   19f56:	d80d      	bhi.n	19f74 <valid_cl_cte_rx_params+0x24>
	if (params->cte_types & BT_DF_CTE_TYPE_AOA) {
   19f58:	f890 c000 	ldrb.w	ip, [r0]
   19f5c:	f01c 0f01 	tst.w	ip, #1
   19f60:	d101      	bne.n	19f66 <valid_cl_cte_rx_params+0x16>
	return true;
   19f62:	2001      	movs	r0, #1
}
   19f64:	bd08      	pop	{r3, pc}
		return valid_cte_rx_common_params(params->cte_types, params->slot_durations,
   19f66:	6843      	ldr	r3, [r0, #4]
   19f68:	78c2      	ldrb	r2, [r0, #3]
   19f6a:	7841      	ldrb	r1, [r0, #1]
   19f6c:	4660      	mov	r0, ip
   19f6e:	f7ec fed3 	bl	6d18 <valid_cte_rx_common_params>
   19f72:	e7f7      	b.n	19f64 <valid_cl_cte_rx_params+0x14>
		return false;
   19f74:	2000      	movs	r0, #0
   19f76:	e7f5      	b.n	19f64 <valid_cl_cte_rx_params+0x14>

00019f78 <hci_df_read_ant_info>:
{
   19f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19f7c:	b083      	sub	sp, #12
   19f7e:	4680      	mov	r8, r0
   19f80:	460f      	mov	r7, r1
   19f82:	4691      	mov	r9, r2
   19f84:	461e      	mov	r6, r3
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_ANT_INFO, NULL, &rsp);
   19f86:	aa01      	add	r2, sp, #4
   19f88:	2100      	movs	r1, #0
   19f8a:	f242 0058 	movw	r0, #8280	; 0x2058
   19f8e:	f7eb fb3d 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
   19f92:	4605      	mov	r5, r0
   19f94:	b118      	cbz	r0, 19f9e <hci_df_read_ant_info+0x26>
}
   19f96:	4628      	mov	r0, r5
   19f98:	b003      	add	sp, #12
   19f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	rp = (void *)rsp->data;
   19f9e:	9801      	ldr	r0, [sp, #4]
   19fa0:	6884      	ldr	r4, [r0, #8]
	*switch_sample_rates = rp->switch_sample_rates;
   19fa2:	7863      	ldrb	r3, [r4, #1]
   19fa4:	f888 3000 	strb.w	r3, [r8]
	*num_ant = rp->num_ant;
   19fa8:	78a3      	ldrb	r3, [r4, #2]
   19faa:	703b      	strb	r3, [r7, #0]
	*max_switch_pattern_len = rp->max_switch_pattern_len;
   19fac:	78e3      	ldrb	r3, [r4, #3]
   19fae:	f889 3000 	strb.w	r3, [r9]
	*max_cte_len = rp->max_cte_len;
   19fb2:	7923      	ldrb	r3, [r4, #4]
   19fb4:	7033      	strb	r3, [r6, #0]
	net_buf_unref(rsp);
   19fb6:	f002 fec1 	bl	1cd3c <net_buf_unref>
	return 0;
   19fba:	e7ec      	b.n	19f96 <hci_df_read_ant_info+0x1e>

00019fbc <hci_df_set_cl_cte_rx_enable>:
{
   19fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fbe:	b089      	sub	sp, #36	; 0x24
   19fc0:	4604      	mov	r4, r0
   19fc2:	4615      	mov	r5, r2
	if (enable) {
   19fc4:	460f      	mov	r7, r1
   19fc6:	b119      	cbz	r1, 19fd0 <hci_df_set_cl_cte_rx_enable+0x14>
		if (!valid_cl_cte_rx_params(params)) {
   19fc8:	4610      	mov	r0, r2
   19fca:	f7ff ffc1 	bl	19f50 <valid_cl_cte_rx_params>
   19fce:	b368      	cbz	r0, 1a02c <hci_df_set_cl_cte_rx_enable+0x70>
	err = prepare_cl_cte_rx_enable_cmd_params(&buf, sync, params, enable);
   19fd0:	463b      	mov	r3, r7
   19fd2:	462a      	mov	r2, r5
   19fd4:	4621      	mov	r1, r4
   19fd6:	a804      	add	r0, sp, #16
   19fd8:	f7ec fed6 	bl	6d88 <prepare_cl_cte_rx_enable_cmd_params>
	if (err) {
   19fdc:	4606      	mov	r6, r0
   19fde:	b110      	cbz	r0, 19fe6 <hci_df_set_cl_cte_rx_enable+0x2a>
}
   19fe0:	4630      	mov	r0, r6
   19fe2:	b009      	add	sp, #36	; 0x24
   19fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_hci_cmd_state_set_init(buf, &state, sync->flags, BT_PER_ADV_SYNC_CTE_ENABLED, enable);
   19fe6:	9700      	str	r7, [sp, #0]
   19fe8:	2305      	movs	r3, #5
   19fea:	f104 0214 	add.w	r2, r4, #20
   19fee:	a905      	add	r1, sp, #20
   19ff0:	9804      	ldr	r0, [sp, #16]
   19ff2:	f7eb fabb 	bl	556c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_CL_CTE_SAMPLING_ENABLE, buf, &rsp);
   19ff6:	aa03      	add	r2, sp, #12
   19ff8:	9904      	ldr	r1, [sp, #16]
   19ffa:	f242 0053 	movw	r0, #8275	; 0x2053
   19ffe:	f7eb fb05 	bl	560c <bt_hci_cmd_send_sync>
	if (err) {
   1a002:	4606      	mov	r6, r0
   1a004:	2800      	cmp	r0, #0
   1a006:	d1eb      	bne.n	19fe0 <hci_df_set_cl_cte_rx_enable+0x24>
	rp = (void *)rsp->data;
   1a008:	9803      	ldr	r0, [sp, #12]
   1a00a:	6883      	ldr	r3, [r0, #8]
	if (sync->handle != sys_le16_to_cpu(rp->sync_handle)) {
   1a00c:	8922      	ldrh	r2, [r4, #8]
   1a00e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   1a012:	429a      	cmp	r2, r3
   1a014:	d004      	beq.n	1a020 <hci_df_set_cl_cte_rx_enable+0x64>
		err = -EIO;
   1a016:	f06f 0604 	mvn.w	r6, #4
	net_buf_unref(rsp);
   1a01a:	f002 fe8f 	bl	1cd3c <net_buf_unref>
	return err;
   1a01e:	e7df      	b.n	19fe0 <hci_df_set_cl_cte_rx_enable+0x24>
		sync->cte_types = (enable ? params->cte_types : 0);
   1a020:	b10f      	cbz	r7, 1a026 <hci_df_set_cl_cte_rx_enable+0x6a>
   1a022:	782b      	ldrb	r3, [r5, #0]
   1a024:	e000      	b.n	1a028 <hci_df_set_cl_cte_rx_enable+0x6c>
   1a026:	2300      	movs	r3, #0
   1a028:	73e3      	strb	r3, [r4, #15]
   1a02a:	e7f6      	b.n	1a01a <hci_df_set_cl_cte_rx_enable+0x5e>
			return -EINVAL;
   1a02c:	f06f 0615 	mvn.w	r6, #21
   1a030:	e7d6      	b.n	19fe0 <hci_df_set_cl_cte_rx_enable+0x24>

0001a032 <hci_df_prepare_connectionless_iq_report>:
	if (buf->len < sizeof(*evt)) {
   1a032:	8983      	ldrh	r3, [r0, #12]
   1a034:	2b0b      	cmp	r3, #11
   1a036:	d932      	bls.n	1a09e <hci_df_prepare_connectionless_iq_report+0x6c>
{
   1a038:	b570      	push	{r4, r5, r6, lr}
   1a03a:	460d      	mov	r5, r1
   1a03c:	4616      	mov	r6, r2
	return net_buf_simple_pull_mem(&buf->b, len);
   1a03e:	210c      	movs	r1, #12
   1a040:	3008      	adds	r0, #8
   1a042:	f002 feea 	bl	1ce1a <net_buf_simple_pull_mem>
   1a046:	4604      	mov	r4, r0
	per_adv_sync = bt_hci_get_per_adv_sync(sys_le16_to_cpu(evt->sync_handle));
   1a048:	8800      	ldrh	r0, [r0, #0]
   1a04a:	f7ec fad7 	bl	65fc <bt_hci_get_per_adv_sync>
	if (!per_adv_sync) {
   1a04e:	b348      	cbz	r0, 1a0a4 <hci_df_prepare_connectionless_iq_report+0x72>
   1a050:	f3bf 8f5b 	dmb	ish
   1a054:	6942      	ldr	r2, [r0, #20]
   1a056:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(per_adv_sync->flags, BT_PER_ADV_SYNC_CTE_ENABLED)) {
   1a05a:	f012 0f20 	tst.w	r2, #32
   1a05e:	d024      	beq.n	1a0aa <hci_df_prepare_connectionless_iq_report+0x78>
	if (!(per_adv_sync->cte_types & BIT(evt->cte_type))) {
   1a060:	7bc2      	ldrb	r2, [r0, #15]
   1a062:	79a1      	ldrb	r1, [r4, #6]
   1a064:	40ca      	lsrs	r2, r1
   1a066:	f012 0f01 	tst.w	r2, #1
   1a06a:	d021      	beq.n	1a0b0 <hci_df_prepare_connectionless_iq_report+0x7e>
	report->chan_idx = evt->chan_idx;
   1a06c:	78a2      	ldrb	r2, [r4, #2]
   1a06e:	702a      	strb	r2, [r5, #0]
	report->rssi = sys_le16_to_cpu(evt->rssi);
   1a070:	f9b4 2003 	ldrsh.w	r2, [r4, #3]
   1a074:	806a      	strh	r2, [r5, #2]
	report->rssi_ant_id = evt->rssi_ant_id;
   1a076:	7962      	ldrb	r2, [r4, #5]
   1a078:	712a      	strb	r2, [r5, #4]
	report->cte_type = BIT(evt->cte_type);
   1a07a:	79a1      	ldrb	r1, [r4, #6]
   1a07c:	2201      	movs	r2, #1
   1a07e:	408a      	lsls	r2, r1
   1a080:	716a      	strb	r2, [r5, #5]
	report->packet_status = evt->packet_status;
   1a082:	7a22      	ldrb	r2, [r4, #8]
   1a084:	71ea      	strb	r2, [r5, #7]
	report->slot_durations = evt->slot_durations;
   1a086:	79e2      	ldrb	r2, [r4, #7]
   1a088:	71aa      	strb	r2, [r5, #6]
	report->per_evt_counter = sys_le16_to_cpu(evt->per_evt_counter);
   1a08a:	f8b4 2009 	ldrh.w	r2, [r4, #9]
   1a08e:	812a      	strh	r2, [r5, #8]
	report->sample_count = evt->sample_count;
   1a090:	7ae2      	ldrb	r2, [r4, #11]
   1a092:	72aa      	strb	r2, [r5, #10]
	report->sample = &evt->sample[0];
   1a094:	340c      	adds	r4, #12
   1a096:	60ec      	str	r4, [r5, #12]
	*per_adv_sync_to_report = per_adv_sync;
   1a098:	6030      	str	r0, [r6, #0]
	return 0;
   1a09a:	2000      	movs	r0, #0
}
   1a09c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1a09e:	f06f 0015 	mvn.w	r0, #21
}
   1a0a2:	4770      	bx	lr
		return -EINVAL;
   1a0a4:	f06f 0015 	mvn.w	r0, #21
   1a0a8:	e7f8      	b.n	1a09c <hci_df_prepare_connectionless_iq_report+0x6a>
		return -EINVAL;
   1a0aa:	f06f 0015 	mvn.w	r0, #21
   1a0ae:	e7f5      	b.n	1a09c <hci_df_prepare_connectionless_iq_report+0x6a>
		return -EINVAL;
   1a0b0:	f06f 0015 	mvn.w	r0, #21
   1a0b4:	e7f2      	b.n	1a09c <hci_df_prepare_connectionless_iq_report+0x6a>

0001a0b6 <bt_df_per_adv_sync_cte_rx_enable>:

int bt_df_per_adv_sync_cte_rx_enable(struct bt_le_per_adv_sync *sync,
				     const struct bt_df_per_adv_sync_cte_rx_param *params)
{
	CHECKIF(!sync) {
   1a0b6:	b130      	cbz	r0, 1a0c6 <bt_df_per_adv_sync_cte_rx_enable+0x10>
{
   1a0b8:	b508      	push	{r3, lr}
   1a0ba:	460a      	mov	r2, r1
		return -EINVAL;
	}
	CHECKIF(!params) {
   1a0bc:	b131      	cbz	r1, 1a0cc <bt_df_per_adv_sync_cte_rx_enable+0x16>
		return -EINVAL;
	}

	return bt_df_set_per_adv_sync_cte_rx_enable(sync, true, params);
   1a0be:	2101      	movs	r1, #1
   1a0c0:	f7ec feac 	bl	6e1c <bt_df_set_per_adv_sync_cte_rx_enable>
}
   1a0c4:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1a0c6:	f06f 0015 	mvn.w	r0, #21
}
   1a0ca:	4770      	bx	lr
		return -EINVAL;
   1a0cc:	f06f 0015 	mvn.w	r0, #21
   1a0d0:	e7f8      	b.n	1a0c4 <bt_df_per_adv_sync_cte_rx_enable+0xe>

0001a0d2 <mem_init>:
#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
	*mem_head = mem_pool;
   1a0d2:	6018      	str	r0, [r3, #0]

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1a0d4:	1dc3      	adds	r3, r0, #7
   1a0d6:	f023 0303 	bic.w	r3, r3, #3
   1a0da:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1a0dc:	3a01      	subs	r2, #1
   1a0de:	b292      	uxth	r2, r2
   1a0e0:	fb02 f301 	mul.w	r3, r2, r1
   1a0e4:	f04f 0c00 	mov.w	ip, #0
   1a0e8:	f840 c003 	str.w	ip, [r0, r3]
		     sizeof(mem_pool));
	while (mem_count--) {
   1a0ec:	1e53      	subs	r3, r2, #1
   1a0ee:	b29b      	uxth	r3, r3
   1a0f0:	b17a      	cbz	r2, 1a112 <mem_init+0x40>
{
   1a0f2:	b082      	sub	sp, #8
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
   1a0f4:	fb03 1201 	mla	r2, r3, r1, r1
		next = (uint32_t)((uint8_t *) mem_pool +
   1a0f8:	4402      	add	r2, r0
   1a0fa:	9201      	str	r2, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1a0fc:	fb03 fc01 	mul.w	ip, r3, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1a100:	f840 200c 	str.w	r2, [r0, ip]
	while (mem_count--) {
   1a104:	461a      	mov	r2, r3
   1a106:	3b01      	subs	r3, #1
   1a108:	b29b      	uxth	r3, r3
   1a10a:	2a00      	cmp	r2, #0
   1a10c:	d1f2      	bne.n	1a0f4 <mem_init+0x22>
		       (void *)&next, sizeof(next));
	}
}
   1a10e:	b002      	add	sp, #8
   1a110:	4770      	bx	lr
   1a112:	4770      	bx	lr

0001a114 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1a114:	4603      	mov	r3, r0
	if (*mem_head) {
   1a116:	6800      	ldr	r0, [r0, #0]
   1a118:	b170      	cbz	r0, 1a138 <mem_acquire+0x24>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1a11a:	1dc2      	adds	r2, r0, #7
   1a11c:	f022 0203 	bic.w	r2, r2, #3
   1a120:	8812      	ldrh	r2, [r2, #0]
					       sizeof(mem_head)));
		free_count--;
   1a122:	3a01      	subs	r2, #1
   1a124:	b292      	uxth	r2, r2

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   1a126:	6801      	ldr	r1, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
   1a128:	b129      	cbz	r1, 1a136 <mem_acquire+0x22>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1a12a:	f101 0c07 	add.w	ip, r1, #7
   1a12e:	f02c 0c03 	bic.w	ip, ip, #3
   1a132:	f8ac 2000 	strh.w	r2, [ip]
				free_count;
		}

		*mem_head = head;
   1a136:	6019      	str	r1, [r3, #0]
		return mem;
	}

	return NULL;
}
   1a138:	4770      	bx	lr

0001a13a <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1a13a:	680b      	ldr	r3, [r1, #0]
   1a13c:	b173      	cbz	r3, 1a15c <mem_release+0x22>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1a13e:	3307      	adds	r3, #7
   1a140:	f023 0303 	bic.w	r3, r3, #3
   1a144:	881a      	ldrh	r2, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
   1a146:	3201      	adds	r2, #1
   1a148:	f8d1 c000 	ldr.w	ip, [r1]
   1a14c:	4603      	mov	r3, r0
   1a14e:	f843 cb07 	str.w	ip, [r3], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1a152:	f023 0303 	bic.w	r3, r3, #3
   1a156:	801a      	strh	r2, [r3, #0]

	*mem_head = mem;
   1a158:	6008      	str	r0, [r1, #0]
}
   1a15a:	4770      	bx	lr
	uint16_t free_count = 0U;
   1a15c:	2200      	movs	r2, #0
   1a15e:	e7f2      	b.n	1a146 <mem_release+0xc>

0001a160 <mem_index_get>:
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size;
   1a160:	1a40      	subs	r0, r0, r1
   1a162:	fb90 f0f2 	sdiv	r0, r0, r2
}
   1a166:	b280      	uxth	r0, r0
   1a168:	4770      	bx	lr

0001a16a <mem_rcopy>:
 * @brief  Copy bytes in reverse
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
   1a16a:	4411      	add	r1, r2
	while (len--) {
   1a16c:	e004      	b.n	1a178 <mem_rcopy+0xe>
		*dst++ = *--src;
   1a16e:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
   1a172:	f800 2b01 	strb.w	r2, [r0], #1
	while (len--) {
   1a176:	461a      	mov	r2, r3
   1a178:	1e53      	subs	r3, r2, #1
   1a17a:	b29b      	uxth	r3, r3
   1a17c:	2a00      	cmp	r2, #0
   1a17e:	d1f6      	bne.n	1a16e <mem_rcopy+0x4>
	}
}
   1a180:	4770      	bx	lr

0001a182 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   1a182:	460b      	mov	r3, r1
   1a184:	3901      	subs	r1, #1
   1a186:	b289      	uxth	r1, r1
   1a188:	b12b      	cbz	r3, 1a196 <mem_nz+0x14>
		if (*src++) {
   1a18a:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a18e:	2b00      	cmp	r3, #0
   1a190:	d0f7      	beq.n	1a182 <mem_nz>
			return 1;
   1a192:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   1a194:	4770      	bx	lr
	return 0;
   1a196:	2000      	movs	r0, #0
   1a198:	4770      	bx	lr

0001a19a <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   1a19a:	6010      	str	r0, [r2, #0]
   1a19c:	6008      	str	r0, [r1, #0]

	return link;
}
   1a19e:	4770      	bx	lr

0001a1a0 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1a1a0:	f8d2 c000 	ldr.w	ip, [r2]
   1a1a4:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   1a1a8:	f8d2 c000 	ldr.w	ip, [r2]
   1a1ac:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1a1b0:	6010      	str	r0, [r2, #0]

	return link;
}
   1a1b2:	4770      	bx	lr

0001a1b4 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   1a1b4:	4288      	cmp	r0, r1
   1a1b6:	d003      	beq.n	1a1c0 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   1a1b8:	b11a      	cbz	r2, 1a1c2 <memq_peek+0xe>
		*mem = head->mem;
   1a1ba:	6843      	ldr	r3, [r0, #4]
   1a1bc:	6013      	str	r3, [r2, #0]
   1a1be:	4770      	bx	lr
		return NULL;
   1a1c0:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1a1c2:	4770      	bx	lr

0001a1c4 <memq_dequeue>:
 * @param head[in,out] Pointer to head link-element of queue. Will be updated
 * @param mem[out]     The memory pointed to by head-element
 * @return             head or NULL if queue is empty
 */
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
   1a1c4:	b510      	push	{r4, lr}
   1a1c6:	460c      	mov	r4, r1
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   1a1c8:	4601      	mov	r1, r0
   1a1ca:	6820      	ldr	r0, [r4, #0]
   1a1cc:	f7ff fff2 	bl	1a1b4 <memq_peek>
	if (old_head == NULL) {
   1a1d0:	b108      	cbz	r0, 1a1d6 <memq_dequeue+0x12>
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1a1d2:	6803      	ldr	r3, [r0, #0]
   1a1d4:	6023      	str	r3, [r4, #0]

	return old_head;
}
   1a1d6:	bd10      	pop	{r4, pc}

0001a1d8 <util_ones_count_get>:
 * @param octets_len Must not be bigger than 255/8 = 31 bytes
 *
 * @return popcnt of 'octets'
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
   1a1d8:	b500      	push	{lr}
   1a1da:	4686      	mov	lr, r0
	uint8_t one_count = 0U;
   1a1dc:	2000      	movs	r0, #0

	while (octets_len--) {
   1a1de:	e009      	b.n	1a1f4 <util_ones_count_get+0x1c>
		uint8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
   1a1e0:	1e5a      	subs	r2, r3, #1
   1a1e2:	b252      	sxtb	r2, r2
   1a1e4:	4013      	ands	r3, r2
			one_count++;
   1a1e6:	3001      	adds	r0, #1
   1a1e8:	b2c0      	uxtb	r0, r0
		while (bite) {
   1a1ea:	2b00      	cmp	r3, #0
   1a1ec:	d1f8      	bne.n	1a1e0 <util_ones_count_get+0x8>
		}
		octets++;
   1a1ee:	f10e 0e01 	add.w	lr, lr, #1
	while (octets_len--) {
   1a1f2:	4661      	mov	r1, ip
   1a1f4:	1e4b      	subs	r3, r1, #1
   1a1f6:	fa5f fc83 	uxtb.w	ip, r3
   1a1fa:	b111      	cbz	r1, 1a202 <util_ones_count_get+0x2a>
		bite = *octets;
   1a1fc:	f89e 3000 	ldrb.w	r3, [lr]
		while (bite) {
   1a200:	e7f3      	b.n	1a1ea <util_ones_count_get+0x12>
	}

	return one_count;
}
   1a202:	f85d fb04 	ldr.w	pc, [sp], #4

0001a206 <ticker_by_next_slot_get>:
{
   1a206:	b5f0      	push	{r4, r5, r6, r7, lr}
	node = instance->nodes;
   1a208:	6805      	ldr	r5, [r0, #0]
	_ticker_id_head = *ticker_id_head;
   1a20a:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   1a20e:	681c      	ldr	r4, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   1a210:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1a214:	d003      	beq.n	1a21e <ticker_by_next_slot_get+0x18>
   1a216:	6816      	ldr	r6, [r2, #0]
   1a218:	6947      	ldr	r7, [r0, #20]
   1a21a:	42be      	cmp	r6, r7
   1a21c:	d016      	beq.n	1a24c <ticker_by_next_slot_get+0x46>
		_ticker_id_head = instance->ticker_id_head;
   1a21e:	f890 e01d 	ldrb.w	lr, [r0, #29]
		*ticks_current = instance->ticks_current;
   1a222:	6940      	ldr	r0, [r0, #20]
   1a224:	6010      	str	r0, [r2, #0]
		_ticks_to_expire = 0U;
   1a226:	2400      	movs	r4, #0
	while (_ticker_id_head != TICKER_NULL) {
   1a228:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1a22c:	d017      	beq.n	1a25e <ticker_by_next_slot_get+0x58>
		ticker = &node[_ticker_id_head];
   1a22e:	eb0e 0c4e 	add.w	ip, lr, lr, lsl #1
   1a232:	ea4f 100c 	mov.w	r0, ip, lsl #4
   1a236:	eb05 1c0c 	add.w	ip, r5, ip, lsl #4
			if (ticker->ticks_slot) {
   1a23a:	f8dc 2018 	ldr.w	r2, [ip, #24]
   1a23e:	b972      	cbnz	r2, 1a25e <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   1a240:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1a244:	4414      	add	r4, r2
		_ticker_id_head = ticker->next;
   1a246:	f815 e000 	ldrb.w	lr, [r5, r0]
   1a24a:	e7ed      	b.n	1a228 <ticker_by_next_slot_get+0x22>
		ticker = &node[_ticker_id_head];
   1a24c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1a250:	ea4f 120e 	mov.w	r2, lr, lsl #4
   1a254:	eb05 1c0e 	add.w	ip, r5, lr, lsl #4
		_ticker_id_head = ticker->next;
   1a258:	f815 e002 	ldrb.w	lr, [r5, r2]
   1a25c:	e7e4      	b.n	1a228 <ticker_by_next_slot_get+0x22>
	if (_ticker_id_head != TICKER_NULL) {
   1a25e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1a262:	d002      	beq.n	1a26a <ticker_by_next_slot_get+0x64>
		_ticks_to_expire += ticker->ticks_to_expire;
   1a264:	f8dc 2008 	ldr.w	r2, [ip, #8]
   1a268:	4414      	add	r4, r2
	*ticker_id_head = _ticker_id_head;
   1a26a:	f881 e000 	strb.w	lr, [r1]
	*ticks_to_expire = _ticks_to_expire;
   1a26e:	601c      	str	r4, [r3, #0]
}
   1a270:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a272 <ticker_enqueue>:
{
   1a272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a276:	4680      	mov	r8, r0
   1a278:	4608      	mov	r0, r1
	node = &instance->nodes[0];
   1a27a:	f8d8 6000 	ldr.w	r6, [r8]
	ticker_new = &node[id];
   1a27e:	eb01 0741 	add.w	r7, r1, r1, lsl #1
   1a282:	0139      	lsls	r1, r7, #4
   1a284:	eb06 1707 	add.w	r7, r6, r7, lsl #4
	ticks_to_expire = ticker_new->ticks_to_expire;
   1a288:	68bc      	ldr	r4, [r7, #8]
	current = instance->ticker_id_head;
   1a28a:	f898 201d 	ldrb.w	r2, [r8, #29]
	previous = TICKER_NULL;
   1a28e:	f04f 0eff 	mov.w	lr, #255	; 0xff
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a292:	e002      	b.n	1a29a <ticker_enqueue+0x28>
		previous = current;
   1a294:	4696      	mov	lr, r2
		current = ticker_current->next;
   1a296:	f816 200c 	ldrb.w	r2, [r6, ip]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a29a:	2aff      	cmp	r2, #255	; 0xff
   1a29c:	d010      	beq.n	1a2c0 <ticker_enqueue+0x4e>
		(ticker_current = &node[current])->ticks_to_expire))) {
   1a29e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1a2a2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
   1a2a6:	eb06 1303 	add.w	r3, r6, r3, lsl #4
		(ticks_to_expire_current =
   1a2aa:	689d      	ldr	r5, [r3, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1a2ac:	42ac      	cmp	r4, r5
   1a2ae:	d307      	bcc.n	1a2c0 <ticker_enqueue+0x4e>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1a2b0:	1b64      	subs	r4, r4, r5
   1a2b2:	d1ef      	bne.n	1a294 <ticker_enqueue+0x22>
   1a2b4:	f8b7 901e 	ldrh.w	r9, [r7, #30]
					     ticker_current->lazy_current)) {
   1a2b8:	8bdb      	ldrh	r3, [r3, #30]
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1a2ba:	4599      	cmp	r9, r3
   1a2bc:	d9ea      	bls.n	1a294 <ticker_enqueue+0x22>
			ticks_to_expire = ticks_to_expire_current;
   1a2be:	462c      	mov	r4, r5
	ticker_new->ticks_to_expire = ticks_to_expire;
   1a2c0:	60bc      	str	r4, [r7, #8]
	ticker_new->next = current;
   1a2c2:	5472      	strb	r2, [r6, r1]
	if (previous == TICKER_NULL) {
   1a2c4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   1a2c8:	d010      	beq.n	1a2ec <ticker_enqueue+0x7a>
		node[previous].next = id;
   1a2ca:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   1a2ce:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   1a2d2:	f806 000e 	strb.w	r0, [r6, lr]
	if (current != TICKER_NULL) {
   1a2d6:	2aff      	cmp	r2, #255	; 0xff
   1a2d8:	d006      	beq.n	1a2e8 <ticker_enqueue+0x76>
		node[current].ticks_to_expire -= ticks_to_expire;
   1a2da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1a2de:	eb06 1202 	add.w	r2, r6, r2, lsl #4
   1a2e2:	6893      	ldr	r3, [r2, #8]
   1a2e4:	1b1b      	subs	r3, r3, r4
   1a2e6:	6093      	str	r3, [r2, #8]
}
   1a2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		instance->ticker_id_head = id;
   1a2ec:	f888 001d 	strb.w	r0, [r8, #29]
   1a2f0:	e7f1      	b.n	1a2d6 <ticker_enqueue+0x64>

0001a2f2 <ticker_dequeue>:
{
   1a2f2:	b530      	push	{r4, r5, lr}
	node = &instance->nodes[0];
   1a2f4:	6804      	ldr	r4, [r0, #0]
	previous = instance->ticker_id_head;
   1a2f6:	7f45      	ldrb	r5, [r0, #29]
	current = previous;
   1a2f8:	462b      	mov	r3, r5
	total = 0U;
   1a2fa:	f04f 0c00 	mov.w	ip, #0
	ticker_current = 0;
   1a2fe:	4662      	mov	r2, ip
	while (current != TICKER_NULL) {
   1a300:	e004      	b.n	1a30c <ticker_dequeue+0x1a>
		total += ticker_current->ticks_to_expire;
   1a302:	6895      	ldr	r5, [r2, #8]
   1a304:	44ac      	add	ip, r5
		previous = current;
   1a306:	461d      	mov	r5, r3
		current = ticker_current->next;
   1a308:	f814 300e 	ldrb.w	r3, [r4, lr]
	while (current != TICKER_NULL) {
   1a30c:	2bff      	cmp	r3, #255	; 0xff
   1a30e:	d007      	beq.n	1a320 <ticker_dequeue+0x2e>
		ticker_current = &node[current];
   1a310:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1a314:	ea4f 1e02 	mov.w	lr, r2, lsl #4
   1a318:	eb04 1202 	add.w	r2, r4, r2, lsl #4
		if (current == id) {
   1a31c:	428b      	cmp	r3, r1
   1a31e:	d1f0      	bne.n	1a302 <ticker_dequeue+0x10>
	if (current == TICKER_NULL) {
   1a320:	2bff      	cmp	r3, #255	; 0xff
   1a322:	d015      	beq.n	1a350 <ticker_dequeue+0x5e>
	if (previous == current) {
   1a324:	429d      	cmp	r5, r3
   1a326:	d010      	beq.n	1a34a <ticker_dequeue+0x58>
	timeout = ticker_current->ticks_to_expire;
   1a328:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   1a32a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a32e:	012d      	lsls	r5, r5, #4
   1a330:	7813      	ldrb	r3, [r2, #0]
   1a332:	5563      	strb	r3, [r4, r5]
	if (ticker_current->next != TICKER_NULL) {
   1a334:	2bff      	cmp	r3, #255	; 0xff
   1a336:	d006      	beq.n	1a346 <ticker_dequeue+0x54>
		node[ticker_current->next].ticks_to_expire += timeout;
   1a338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a33c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   1a340:	68a3      	ldr	r3, [r4, #8]
   1a342:	4403      	add	r3, r0
   1a344:	60a3      	str	r3, [r4, #8]
	return (total + timeout);
   1a346:	4460      	add	r0, ip
}
   1a348:	bd30      	pop	{r4, r5, pc}
		instance->ticker_id_head = ticker_current->next;
   1a34a:	7813      	ldrb	r3, [r2, #0]
   1a34c:	7743      	strb	r3, [r0, #29]
   1a34e:	e7eb      	b.n	1a328 <ticker_dequeue+0x36>
		return 0;
   1a350:	2000      	movs	r0, #0
   1a352:	e7f9      	b.n	1a348 <ticker_dequeue+0x56>

0001a354 <ticker_resolve_collision>:
{
   1a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a358:	b085      	sub	sp, #20
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1a35a:	f991 b02d 	ldrsb.w	fp, [r1, #45]	; 0x2d
   1a35e:	f11b 0f80 	cmn.w	fp, #128	; 0x80
   1a362:	d07e      	beq.n	1a462 <ticker_resolve_collision+0x10e>
	    (ticker->next != TICKER_NULL)) {
   1a364:	f891 9000 	ldrb.w	r9, [r1]
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1a368:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1a36c:	d07d      	beq.n	1a46a <ticker_resolve_collision+0x116>
		int32_t lazy_current = ticker->lazy_current;
   1a36e:	8bca      	ldrh	r2, [r1, #30]
   1a370:	9202      	str	r2, [sp, #8]
		if (lazy_current >= ticker->lazy_periodic) {
   1a372:	8b8b      	ldrh	r3, [r1, #28]
   1a374:	429a      	cmp	r2, r3
   1a376:	d301      	bcc.n	1a37c <ticker_resolve_collision+0x28>
			lazy_current -= ticker->lazy_periodic;
   1a378:	1ad3      	subs	r3, r2, r3
   1a37a:	9302      	str	r3, [sp, #8]
		uint32_t current_age = ticker->ticks_periodic +
   1a37c:	f8d1 8004 	ldr.w	r8, [r1, #4]
   1a380:	9b02      	ldr	r3, [sp, #8]
   1a382:	fb03 8308 	mla	r3, r3, r8, r8
   1a386:	9303      	str	r3, [sp, #12]
		uint32_t acc_ticks_to_expire = 0U;
   1a388:	2200      	movs	r2, #0
		while (id_head != TICKER_NULL) {
   1a38a:	e03d      	b.n	1a408 <ticker_resolve_collision+0xb4>
				id_head = ticker_next->next;
   1a38c:	f810 9007 	ldrb.w	r9, [r0, r7]
				continue;
   1a390:	e03a      	b.n	1a408 <ticker_resolve_collision+0xb4>
					  0U :
   1a392:	4676      	mov	r6, lr
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1a394:	fb0e 6603 	mla	r6, lr, r3, r6
				(ticker->ticks_periodic == 0U) ||
   1a398:	f1b8 0f00 	cmp.w	r8, #0
   1a39c:	d006      	beq.n	1a3ac <ticker_resolve_collision+0x58>
   1a39e:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1a3a2:	45b6      	cmp	lr, r6
   1a3a4:	d911      	bls.n	1a3ca <ticker_resolve_collision+0x76>
   1a3a6:	f04f 0e01 	mov.w	lr, #1
   1a3aa:	e001      	b.n	1a3b0 <ticker_resolve_collision+0x5c>
   1a3ac:	f04f 0e01 	mov.w	lr, #1
			uint8_t current_is_older =
   1a3b0:	fa5f fe8e 	uxtb.w	lr, lr
   1a3b4:	f8cd e004 	str.w	lr, [sp, #4]
					(ticker->ticks_periodic != 0U) &&
   1a3b8:	f1b8 0f00 	cmp.w	r8, #0
   1a3bc:	d008      	beq.n	1a3d0 <ticker_resolve_collision+0x7c>
   1a3be:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1a3c2:	45b6      	cmp	lr, r6
   1a3c4:	d345      	bcc.n	1a452 <ticker_resolve_collision+0xfe>
   1a3c6:	2600      	movs	r6, #0
   1a3c8:	e003      	b.n	1a3d2 <ticker_resolve_collision+0x7e>
				(ticker->ticks_periodic == 0U) ||
   1a3ca:	f04f 0e00 	mov.w	lr, #0
   1a3ce:	e7ef      	b.n	1a3b0 <ticker_resolve_collision+0x5c>
					(ticker->ticks_periodic != 0U) &&
   1a3d0:	2600      	movs	r6, #0
			uint8_t next_is_older =
   1a3d2:	b2f6      	uxtb	r6, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   1a3d4:	f899 9003 	ldrb.w	r9, [r9, #3]
   1a3d8:	f891 e003 	ldrb.w	lr, [r1, #3]
				(lazy_next - ticker_next->priority) >
   1a3dc:	eba3 030c 	sub.w	r3, r3, ip
				(lazy_current - ticker->priority);
   1a3e0:	f8dd a008 	ldr.w	sl, [sp, #8]
   1a3e4:	ebaa 0a0b 	sub.w	sl, sl, fp
			if (!lazy_next_periodic_skip &&
   1a3e8:	42ac      	cmp	r4, r5
   1a3ea:	d30b      	bcc.n	1a404 <ticker_resolve_collision+0xb0>
   1a3ec:	45f1      	cmp	r9, lr
   1a3ee:	d840      	bhi.n	1a472 <ticker_resolve_collision+0x11e>
			    (next_force ||
   1a3f0:	f11c 0f80 	cmn.w	ip, #128	; 0x80
   1a3f4:	d03f      	beq.n	1a476 <ticker_resolve_collision+0x122>
			     next_is_critical ||
   1a3f6:	4553      	cmp	r3, sl
   1a3f8:	dd02      	ble.n	1a400 <ticker_resolve_collision+0xac>
			     (next_has_priority && !current_is_older) ||
   1a3fa:	9b01      	ldr	r3, [sp, #4]
   1a3fc:	2b00      	cmp	r3, #0
   1a3fe:	d03c      	beq.n	1a47a <ticker_resolve_collision+0x126>
   1a400:	45e3      	cmp	fp, ip
   1a402:	d028      	beq.n	1a456 <ticker_resolve_collision+0x102>
			id_head = ticker_next->next;
   1a404:	f810 9007 	ldrb.w	r9, [r0, r7]
		while (id_head != TICKER_NULL) {
   1a408:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1a40c:	d027      	beq.n	1a45e <ticker_resolve_collision+0x10a>
			struct ticker_node *ticker_next = &nodes[id_head];
   1a40e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1a412:	ea4f 1709 	mov.w	r7, r9, lsl #4
   1a416:	eb00 1909 	add.w	r9, r0, r9, lsl #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   1a41a:	f8d9 6008 	ldr.w	r6, [r9, #8]
   1a41e:	4432      	add	r2, r6
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   1a420:	698b      	ldr	r3, [r1, #24]
   1a422:	4293      	cmp	r3, r2
   1a424:	d323      	bcc.n	1a46e <ticker_resolve_collision+0x11a>
			if (ticker_next->ticks_slot == 0U) {
   1a426:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1a42a:	2b00      	cmp	r3, #0
   1a42c:	d0ae      	beq.n	1a38c <ticker_resolve_collision+0x38>
			int32_t lazy_next = ticker_next->lazy_current;
   1a42e:	f8b9 401e 	ldrh.w	r4, [r9, #30]
   1a432:	4623      	mov	r3, r4
				ticker_next->lazy_periodic > lazy_next;
   1a434:	f8b9 501c 	ldrh.w	r5, [r9, #28]
			if (!lazy_next_periodic_skip) {
   1a438:	42ac      	cmp	r4, r5
   1a43a:	d300      	bcc.n	1a43e <ticker_resolve_collision+0xea>
				lazy_next -= ticker_next->lazy_periodic;
   1a43c:	1b63      	subs	r3, r4, r5
				ticker_next->priority;
   1a43e:	f999 c02d 	ldrsb.w	ip, [r9, #45]	; 0x2d
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   1a442:	f8d9 e004 	ldr.w	lr, [r9, #4]
					  0U :
   1a446:	f1be 0f00 	cmp.w	lr, #0
   1a44a:	d0a2      	beq.n	1a392 <ticker_resolve_collision+0x3e>
   1a44c:	ebae 0606 	sub.w	r6, lr, r6
   1a450:	e7a0      	b.n	1a394 <ticker_resolve_collision+0x40>
					(ticker->ticks_periodic != 0U) &&
   1a452:	2601      	movs	r6, #1
   1a454:	e7bd      	b.n	1a3d2 <ticker_resolve_collision+0x7e>
			     (equal_priority && next_is_older))) {
   1a456:	2e00      	cmp	r6, #0
   1a458:	d0d4      	beq.n	1a404 <ticker_resolve_collision+0xb0>
				return 1U;
   1a45a:	2001      	movs	r0, #1
   1a45c:	e002      	b.n	1a464 <ticker_resolve_collision+0x110>
	return 0U;
   1a45e:	2000      	movs	r0, #0
   1a460:	e000      	b.n	1a464 <ticker_resolve_collision+0x110>
   1a462:	2000      	movs	r0, #0
}
   1a464:	b005      	add	sp, #20
   1a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return 0U;
   1a46a:	2000      	movs	r0, #0
   1a46c:	e7fa      	b.n	1a464 <ticker_resolve_collision+0x110>
   1a46e:	2000      	movs	r0, #0
   1a470:	e7f8      	b.n	1a464 <ticker_resolve_collision+0x110>
				return 1U;
   1a472:	2001      	movs	r0, #1
   1a474:	e7f6      	b.n	1a464 <ticker_resolve_collision+0x110>
   1a476:	2001      	movs	r0, #1
   1a478:	e7f4      	b.n	1a464 <ticker_resolve_collision+0x110>
   1a47a:	2001      	movs	r0, #1
   1a47c:	e7f2      	b.n	1a464 <ticker_resolve_collision+0x110>

0001a47e <ticker_job_op_cb>:
{
   1a47e:	b508      	push	{r3, lr}
   1a480:	4603      	mov	r3, r0
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1a482:	2200      	movs	r2, #0
   1a484:	7002      	strb	r2, [r0, #0]
	user_op->status = status;
   1a486:	6281      	str	r1, [r0, #40]	; 0x28
	if (user_op->fp_op_func) {
   1a488:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1a48a:	b112      	cbz	r2, 1a492 <ticker_job_op_cb+0x14>
   1a48c:	4608      	mov	r0, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1a48e:	6b19      	ldr	r1, [r3, #48]	; 0x30
   1a490:	4790      	blx	r2
}
   1a492:	bd08      	pop	{r3, pc}

0001a494 <ticker_job_reschedule_in_window>:
{
   1a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a498:	b083      	sub	sp, #12
   1a49a:	9000      	str	r0, [sp, #0]
   1a49c:	9101      	str	r1, [sp, #4]
	nodes = &instance->nodes[0];
   1a49e:	f8d0 c000 	ldr.w	ip, [r0]
	uint8_t  rescheduled = 0U;
   1a4a2:	2000      	movs	r0, #0
	uint32_t ticks_slot_window = 0;
   1a4a4:	4681      	mov	r9, r0
	while (rescheduling) {
   1a4a6:	e098      	b.n	1a5da <ticker_job_reschedule_in_window+0x146>
			ticker_id_head = ticker->next;
   1a4a8:	f81c 4001 	ldrb.w	r4, [ip, r1]
		while (ticker_id_head != TICKER_NULL) {
   1a4ac:	2cff      	cmp	r4, #255	; 0xff
   1a4ae:	d00a      	beq.n	1a4c6 <ticker_job_reschedule_in_window+0x32>
			ticker = &nodes[ticker_id_head];
   1a4b0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a4b4:	0111      	lsls	r1, r2, #4
   1a4b6:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
			ext_data = ticker->ext_data;
   1a4ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   1a4bc:	2b00      	cmp	r3, #0
   1a4be:	d0f3      	beq.n	1a4a8 <ticker_job_reschedule_in_window+0x14>
   1a4c0:	7a1d      	ldrb	r5, [r3, #8]
   1a4c2:	2d01      	cmp	r5, #1
   1a4c4:	d1f0      	bne.n	1a4a8 <ticker_job_reschedule_in_window+0x14>
		if (ticker_id_head == TICKER_NULL) {
   1a4c6:	4698      	mov	r8, r3
   1a4c8:	2cff      	cmp	r4, #255	; 0xff
   1a4ca:	f000 808a 	beq.w	1a5e2 <ticker_job_reschedule_in_window+0x14e>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1a4ce:	9900      	ldr	r1, [sp, #0]
   1a4d0:	7f0b      	ldrb	r3, [r1, #28]
   1a4d2:	2bff      	cmp	r3, #255	; 0xff
   1a4d4:	d005      	beq.n	1a4e2 <ticker_job_reschedule_in_window+0x4e>
			instance->ticks_slot_previous > ticks_elapsed) {
   1a4d6:	698f      	ldr	r7, [r1, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1a4d8:	9b01      	ldr	r3, [sp, #4]
   1a4da:	429f      	cmp	r7, r3
   1a4dc:	d913      	bls.n	1a506 <ticker_job_reschedule_in_window+0x72>
			window_start_ticks = instance->ticks_slot_previous -
   1a4de:	1aff      	subs	r7, r7, r3
   1a4e0:	e000      	b.n	1a4e4 <ticker_job_reschedule_in_window+0x50>
		window_start_ticks = 0U;
   1a4e2:	2700      	movs	r7, #0
		ticker_id_iter = nodes[ticker_id_head].next;
   1a4e4:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
   1a4e8:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
   1a4ec:	f81c 300b 	ldrb.w	r3, [ip, fp]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1a4f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1a4f4:	f8d8 0000 	ldr.w	r0, [r8]
   1a4f8:	4281      	cmp	r1, r0
   1a4fa:	d239      	bcs.n	1a570 <ticker_job_reschedule_in_window+0xdc>
			ticks_slot_window = ext_data->ticks_slot_window -
   1a4fc:	eba0 0901 	sub.w	r9, r0, r1
			ticker_id_iter = TICKER_NULL;
   1a500:	2600      	movs	r6, #0
   1a502:	4631      	mov	r1, r6
   1a504:	e012      	b.n	1a52c <ticker_job_reschedule_in_window+0x98>
		window_start_ticks = 0U;
   1a506:	2700      	movs	r7, #0
   1a508:	e7ec      	b.n	1a4e4 <ticker_job_reschedule_in_window+0x50>
				ticker_id_iter = node->next;
   1a50a:	f81c 300e 	ldrb.w	r3, [ip, lr]
				continue;
   1a50e:	e00d      	b.n	1a52c <ticker_job_reschedule_in_window+0x98>
				window_end_ticks = 0;
   1a510:	2100      	movs	r1, #0
			if (window_end_ticks > ticks_start_offset +
   1a512:	428d      	cmp	r5, r1
   1a514:	d203      	bcs.n	1a51e <ticker_job_reschedule_in_window+0x8a>
			if (ticks_to_expire != 0U &&
   1a516:	1a09      	subs	r1, r1, r0
   1a518:	d001      	beq.n	1a51e <ticker_job_reschedule_in_window+0x8a>
   1a51a:	428f      	cmp	r7, r1
   1a51c:	d92a      	bls.n	1a574 <ticker_job_reschedule_in_window+0xe0>
			ticks_start_offset += node->ticks_to_expire;
   1a51e:	4456      	add	r6, sl
					      node->ticks_slot;
   1a520:	699f      	ldr	r7, [r3, #24]
			window_start_ticks  = node->ticks_to_expire +
   1a522:	4457      	add	r7, sl
			ticks_to_expire     = ticks_slot_window -
   1a524:	eba9 0100 	sub.w	r1, r9, r0
			ticker_id_iter = node->next;
   1a528:	f81c 300e 	ldrb.w	r3, [ip, lr]
		while (ticker_id_iter != TICKER_NULL &&
   1a52c:	2bff      	cmp	r3, #255	; 0xff
   1a52e:	d021      	beq.n	1a574 <ticker_job_reschedule_in_window+0xe0>
		       ticks_start_offset + ticker->ticks_slot <=
   1a530:	6990      	ldr	r0, [r2, #24]
   1a532:	1985      	adds	r5, r0, r6
		while (ticker_id_iter != TICKER_NULL &&
   1a534:	454d      	cmp	r5, r9
   1a536:	d81d      	bhi.n	1a574 <ticker_job_reschedule_in_window+0xe0>
			node = &nodes[ticker_id_iter];
   1a538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a53c:	ea4f 1e03 	mov.w	lr, r3, lsl #4
   1a540:	eb0c 1303 	add.w	r3, ip, r3, lsl #4
			if (node->ext_data &&
   1a544:	f8d3 a028 	ldr.w	sl, [r3, #40]	; 0x28
   1a548:	f1ba 0f00 	cmp.w	sl, #0
   1a54c:	d004      	beq.n	1a558 <ticker_job_reschedule_in_window+0xc4>
			    node->ext_data->reschedule_state ==
   1a54e:	f89a a008 	ldrb.w	sl, [sl, #8]
			if (node->ext_data &&
   1a552:	f1ba 0f01 	cmp.w	sl, #1
   1a556:	d0d8      	beq.n	1a50a <ticker_job_reschedule_in_window+0x76>
			if (node->ticks_to_expire >
   1a558:	f8d3 a008 	ldr.w	sl, [r3, #8]
   1a55c:	f1ba 0f04 	cmp.w	sl, #4
   1a560:	d9d6      	bls.n	1a510 <ticker_job_reschedule_in_window+0x7c>
					MIN(ticks_slot_window,
   1a562:	eb0a 0106 	add.w	r1, sl, r6
   1a566:	3904      	subs	r1, #4
				window_end_ticks =
   1a568:	4549      	cmp	r1, r9
   1a56a:	bf28      	it	cs
   1a56c:	4649      	movcs	r1, r9
   1a56e:	e7d0      	b.n	1a512 <ticker_job_reschedule_in_window+0x7e>
			ticker_id_iter = TICKER_NULL;
   1a570:	23ff      	movs	r3, #255	; 0xff
   1a572:	e7c5      	b.n	1a500 <ticker_job_reschedule_in_window+0x6c>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1a574:	6a95      	ldr	r5, [r2, #40]	; 0x28
						 ticker->ticks_to_expire;
   1a576:	6893      	ldr	r3, [r2, #8]
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1a578:	1ac8      	subs	r0, r1, r3
   1a57a:	686b      	ldr	r3, [r5, #4]
   1a57c:	4403      	add	r3, r0
   1a57e:	606b      	str	r3, [r5, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1a580:	6091      	str	r1, [r2, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1a582:	f81c 300b 	ldrb.w	r3, [ip, fp]
		ticker_id_prev = TICKER_NULL;
   1a586:	27ff      	movs	r7, #255	; 0xff
		while (ticker_id_iter != TICKER_NULL) {
   1a588:	2bff      	cmp	r3, #255	; 0xff
   1a58a:	d010      	beq.n	1a5ae <ticker_job_reschedule_in_window+0x11a>
			node = &nodes[ticker_id_iter];
   1a58c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1a590:	010e      	lsls	r6, r1, #4
   1a592:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1a596:	6890      	ldr	r0, [r2, #8]
   1a598:	688d      	ldr	r5, [r1, #8]
   1a59a:	42a8      	cmp	r0, r5
   1a59c:	d905      	bls.n	1a5aa <ticker_job_reschedule_in_window+0x116>
				ticker->ticks_to_expire -=
   1a59e:	1b40      	subs	r0, r0, r5
   1a5a0:	6090      	str	r0, [r2, #8]
			ticker_id_prev = ticker_id_iter;
   1a5a2:	461f      	mov	r7, r3
			ticker_id_iter = node->next;
   1a5a4:	f81c 3006 	ldrb.w	r3, [ip, r6]
   1a5a8:	e7ee      	b.n	1a588 <ticker_job_reschedule_in_window+0xf4>
				node->ticks_to_expire -=
   1a5aa:	1a28      	subs	r0, r5, r0
   1a5ac:	6088      	str	r0, [r1, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1a5ae:	2fff      	cmp	r7, #255	; 0xff
   1a5b0:	d00c      	beq.n	1a5cc <ticker_job_reschedule_in_window+0x138>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   1a5b2:	f81c 300b 	ldrb.w	r3, [ip, fp]
   1a5b6:	9900      	ldr	r1, [sp, #0]
   1a5b8:	774b      	strb	r3, [r1, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1a5ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   1a5be:	013f      	lsls	r7, r7, #4
   1a5c0:	f81c 3007 	ldrb.w	r3, [ip, r7]
   1a5c4:	f80c 300b 	strb.w	r3, [ip, fp]
			nodes[ticker_id_prev].next = ticker_id_head;
   1a5c8:	f80c 4007 	strb.w	r4, [ip, r7]
		ticker->lazy_current--;
   1a5cc:	8bd3      	ldrh	r3, [r2, #30]
   1a5ce:	3b01      	subs	r3, #1
   1a5d0:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
   1a5d2:	2302      	movs	r3, #2
   1a5d4:	f888 3008 	strb.w	r3, [r8, #8]
		rescheduled  = 1U;
   1a5d8:	2001      	movs	r0, #1
		ticker_id_head = instance->ticker_id_head;
   1a5da:	9b00      	ldr	r3, [sp, #0]
   1a5dc:	7f5c      	ldrb	r4, [r3, #29]
		while (ticker_id_head != TICKER_NULL) {
   1a5de:	4643      	mov	r3, r8
   1a5e0:	e764      	b.n	1a4ac <ticker_job_reschedule_in_window+0x18>
}
   1a5e2:	b003      	add	sp, #12
   1a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a5e8 <ticker_start>:
{
   1a5e8:	b510      	push	{r4, lr}
   1a5ea:	b08a      	sub	sp, #40	; 0x28
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1a5ec:	2400      	movs	r4, #0
   1a5ee:	9409      	str	r4, [sp, #36]	; 0x24
   1a5f0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a5f2:	9408      	str	r4, [sp, #32]
   1a5f4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1a5f6:	9407      	str	r4, [sp, #28]
   1a5f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1a5fa:	9406      	str	r4, [sp, #24]
   1a5fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1a5fe:	9405      	str	r4, [sp, #20]
   1a600:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1a602:	9404      	str	r4, [sp, #16]
   1a604:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
   1a608:	9403      	str	r4, [sp, #12]
   1a60a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1a60c:	9402      	str	r4, [sp, #8]
   1a60e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   1a610:	9401      	str	r4, [sp, #4]
   1a612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a614:	9400      	str	r4, [sp, #0]
   1a616:	f7ec fe31 	bl	727c <ticker_start_ext>
}
   1a61a:	b00a      	add	sp, #40	; 0x28
   1a61c:	bd10      	pop	{r4, pc}

0001a61e <ticker_update>:
{
   1a61e:	b510      	push	{r4, lr}
   1a620:	b088      	sub	sp, #32
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1a622:	2400      	movs	r4, #0
   1a624:	9407      	str	r4, [sp, #28]
   1a626:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1a628:	9406      	str	r4, [sp, #24]
   1a62a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1a62c:	9405      	str	r4, [sp, #20]
   1a62e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
   1a632:	9404      	str	r4, [sp, #16]
   1a634:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
   1a638:	9403      	str	r4, [sp, #12]
   1a63a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1a63c:	9402      	str	r4, [sp, #8]
   1a63e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1a640:	9401      	str	r4, [sp, #4]
   1a642:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1a644:	9400      	str	r4, [sp, #0]
   1a646:	f7ec fe6b 	bl	7320 <ticker_update_ext>
}
   1a64a:	b008      	add	sp, #32
   1a64c:	bd10      	pop	{r4, pc}

0001a64e <ticker_ticks_now_get>:
 * @brief Get current absolute tick count
 *
 * @return Absolute tick count
 */
uint32_t ticker_ticks_now_get(void)
{
   1a64e:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   1a650:	f7f5 fa56 	bl	fb00 <cntr_cnt_get>
}
   1a654:	bd08      	pop	{r3, pc}

0001a656 <ticker_ticks_diff_get>:
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1a656:	1a40      	subs	r0, r0, r1
}
   1a658:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1a65c:	4770      	bx	lr

0001a65e <ticker_worker>:
{
   1a65e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a662:	b085      	sub	sp, #20
	instance->worker_trigger = 1U;
   1a664:	2301      	movs	r3, #1
   1a666:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   1a668:	f890 b01e 	ldrb.w	fp, [r0, #30]
   1a66c:	f1bb 0f00 	cmp.w	fp, #0
   1a670:	f040 80b6 	bne.w	1a7e0 <ticker_worker+0x182>
   1a674:	4607      	mov	r7, r0
	if (instance->ticker_id_head == TICKER_NULL) {
   1a676:	7f43      	ldrb	r3, [r0, #29]
   1a678:	2bff      	cmp	r3, #255	; 0xff
   1a67a:	d00f      	beq.n	1a69c <ticker_worker+0x3e>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1a67c:	f7f5 fa40 	bl	fb00 <cntr_cnt_get>
   1a680:	6979      	ldr	r1, [r7, #20]
   1a682:	f7ff ffe8 	bl	1a656 <ticker_ticks_diff_get>
   1a686:	4606      	mov	r6, r0
	ticker_id_head = instance->ticker_id_head;
   1a688:	7f7d      	ldrb	r5, [r7, #29]
	   (instance->ticker_id_slot_previous != TICKER_NULL)) {
   1a68a:	7f3b      	ldrb	r3, [r7, #28]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a68c:	2bff      	cmp	r3, #255	; 0xff
   1a68e:	d008      	beq.n	1a6a2 <ticker_worker+0x44>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1a690:	69bb      	ldr	r3, [r7, #24]
   1a692:	4283      	cmp	r3, r0
   1a694:	d80c      	bhi.n	1a6b0 <ticker_worker+0x52>
	uint8_t slot_reserved = 0;
   1a696:	f8cd b00c 	str.w	fp, [sp, #12]
   1a69a:	e004      	b.n	1a6a6 <ticker_worker+0x48>
		instance->worker_trigger = 0U;
   1a69c:	2300      	movs	r3, #0
   1a69e:	77c3      	strb	r3, [r0, #31]
		return;
   1a6a0:	e09e      	b.n	1a7e0 <ticker_worker+0x182>
	uint8_t slot_reserved = 0;
   1a6a2:	f8cd b00c 	str.w	fp, [sp, #12]
	node = &instance->nodes[0];
   1a6a6:	f8d7 9000 	ldr.w	r9, [r7]
	ticks_expired = 0U;
   1a6aa:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   1a6ae:	e023      	b.n	1a6f8 <ticker_worker+0x9a>
			slot_reserved = 1;
   1a6b0:	2301      	movs	r3, #1
   1a6b2:	9303      	str	r3, [sp, #12]
   1a6b4:	e7f7      	b.n	1a6a6 <ticker_worker+0x48>
		   (slot_reserved || ticker_resolve_collision(node, ticker))) {
   1a6b6:	4621      	mov	r1, r4
   1a6b8:	4648      	mov	r0, r9
   1a6ba:	f7ff fe4b 	bl	1a354 <ticker_resolve_collision>
   1a6be:	9002      	str	r0, [sp, #8]
   1a6c0:	2800      	cmp	r0, #0
   1a6c2:	d044      	beq.n	1a74e <ticker_worker+0xf0>
   1a6c4:	e031      	b.n	1a72a <ticker_worker+0xcc>
			} else if (ext_data) {
   1a6c6:	b10b      	cbz	r3, 1a6cc <ticker_worker+0x6e>
				ext_data->reschedule_state =
   1a6c8:	2200      	movs	r2, #0
   1a6ca:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   1a6cc:	8be3      	ldrh	r3, [r4, #30]
   1a6ce:	3301      	adds	r3, #1
   1a6d0:	b29b      	uxth	r3, r3
   1a6d2:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1a6d4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1a6d8:	b15a      	cbz	r2, 1a6f2 <ticker_worker+0x94>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1a6da:	8ba2      	ldrh	r2, [r4, #28]
			if ((ticker->must_expire == 0U) ||
   1a6dc:	4293      	cmp	r3, r2
   1a6de:	d908      	bls.n	1a6f2 <ticker_worker+0x94>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1a6e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   1a6e2:	2b00      	cmp	r3, #0
   1a6e4:	d062      	beq.n	1a7ac <ticker_worker+0x14e>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1a6e6:	7a1b      	ldrb	r3, [r3, #8]
   1a6e8:	2b01      	cmp	r3, #1
   1a6ea:	d002      	beq.n	1a6f2 <ticker_worker+0x94>
			must_expire_skip = 1U;
   1a6ec:	2301      	movs	r3, #1
   1a6ee:	9302      	str	r3, [sp, #8]
   1a6f0:	e02d      	b.n	1a74e <ticker_worker+0xf0>
				ticker->ack--;
   1a6f2:	78a3      	ldrb	r3, [r4, #2]
   1a6f4:	3b01      	subs	r3, #1
   1a6f6:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   1a6f8:	2dff      	cmp	r5, #255	; 0xff
   1a6fa:	d05f      	beq.n	1a7bc <ticker_worker+0x15e>
		ticker = &node[ticker_id_head];
   1a6fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1a700:	012a      	lsls	r2, r5, #4
   1a702:	eb09 1405 	add.w	r4, r9, r5, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1a706:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1a708:	429e      	cmp	r6, r3
   1a70a:	d357      	bcc.n	1a7bc <ticker_worker+0x15e>
		ticks_elapsed -= ticks_to_expire;
   1a70c:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   1a70e:	4498      	add	r8, r3
		ticker_id_head = ticker->next;
   1a710:	f819 5002 	ldrb.w	r5, [r9, r2]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1a714:	7863      	ldrb	r3, [r4, #1]
   1a716:	78a2      	ldrb	r2, [r4, #2]
   1a718:	1a9b      	subs	r3, r3, r2
   1a71a:	b2db      	uxtb	r3, r3
   1a71c:	2b01      	cmp	r3, #1
   1a71e:	d1eb      	bne.n	1a6f8 <ticker_worker+0x9a>
		if (ticker->ticks_slot != 0U &&
   1a720:	69a3      	ldr	r3, [r4, #24]
   1a722:	b193      	cbz	r3, 1a74a <ticker_worker+0xec>
   1a724:	9b03      	ldr	r3, [sp, #12]
   1a726:	2b00      	cmp	r3, #0
   1a728:	d0c5      	beq.n	1a6b6 <ticker_worker+0x58>
			struct ticker_ext *ext_data = ticker->ext_data;
   1a72a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   1a72c:	2b00      	cmp	r3, #0
   1a72e:	d0ca      	beq.n	1a6c6 <ticker_worker+0x68>
			    ext_data->ticks_slot_window != 0U &&
   1a730:	681a      	ldr	r2, [r3, #0]
			if (ext_data &&
   1a732:	2a00      	cmp	r2, #0
   1a734:	d0c7      	beq.n	1a6c6 <ticker_worker+0x68>
			    ext_data->reschedule_state ==
   1a736:	7a1a      	ldrb	r2, [r3, #8]
			    ext_data->ticks_slot_window != 0U &&
   1a738:	2a00      	cmp	r2, #0
   1a73a:	d1c4      	bne.n	1a6c6 <ticker_worker+0x68>
			   (ticker->lazy_periodic <= ticker->lazy_current)) {
   1a73c:	8ba1      	ldrh	r1, [r4, #28]
   1a73e:	8be2      	ldrh	r2, [r4, #30]
			    TICKER_RESCHEDULE_STATE_NONE &&
   1a740:	4291      	cmp	r1, r2
   1a742:	d8c0      	bhi.n	1a6c6 <ticker_worker+0x68>
				ext_data->reschedule_state =
   1a744:	2201      	movs	r2, #1
   1a746:	721a      	strb	r2, [r3, #8]
   1a748:	e7c0      	b.n	1a6cc <ticker_worker+0x6e>
		must_expire_skip = 0U;
   1a74a:	f8cd b008 	str.w	fp, [sp, #8]
		if (ticker->ext_data) {
   1a74e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a750:	2b00      	cmp	r3, #0
   1a752:	d02e      	beq.n	1a7b2 <ticker_worker+0x154>
			ticks_drift = ticker->ext_data->ticks_drift;
   1a754:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   1a756:	2200      	movs	r2, #0
   1a758:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
   1a75a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a75c:	721a      	strb	r2, [r3, #8]
		ticker->ack--;
   1a75e:	78a3      	ldrb	r3, [r4, #2]
   1a760:	3b01      	subs	r3, #1
   1a762:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   1a764:	f8d4 a00c 	ldr.w	sl, [r4, #12]
   1a768:	f1ba 0f00 	cmp.w	sl, #0
   1a76c:	d0c4      	beq.n	1a6f8 <ticker_worker+0x9a>
			ticks_at_expire = (instance->ticks_current +
   1a76e:	697b      	ldr	r3, [r7, #20]
   1a770:	eb03 0008 	add.w	r0, r3, r8
					   ticker->ticks_to_expire_minus) &
   1a774:	6963      	ldr	r3, [r4, #20]
					   ticks_expired -
   1a776:	1ac0      	subs	r0, r0, r3
			ticks_at_expire = (instance->ticks_current +
   1a778:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1a77c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1a77e:	9b02      	ldr	r3, [sp, #8]
   1a780:	b9cb      	cbnz	r3, 1a7b6 <ticker_worker+0x158>
   1a782:	8be3      	ldrh	r3, [r4, #30]
   1a784:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1a788:	f8cd c004 	str.w	ip, [sp, #4]
   1a78c:	f894 c003 	ldrb.w	ip, [r4, #3]
   1a790:	f8cd c000 	str.w	ip, [sp]
   1a794:	47d0      	blx	sl
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a796:	9b02      	ldr	r3, [sp, #8]
   1a798:	2b00      	cmp	r3, #0
   1a79a:	d1ad      	bne.n	1a6f8 <ticker_worker+0x9a>
				ticker->lazy_current = 0U;
   1a79c:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   1a79e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   1a7a0:	69a3      	ldr	r3, [r4, #24]
   1a7a2:	2b00      	cmp	r3, #0
   1a7a4:	d0a8      	beq.n	1a6f8 <ticker_worker+0x9a>
					slot_reserved = 1U;
   1a7a6:	2301      	movs	r3, #1
   1a7a8:	9303      	str	r3, [sp, #12]
   1a7aa:	e7a5      	b.n	1a6f8 <ticker_worker+0x9a>
			must_expire_skip = 1U;
   1a7ac:	2301      	movs	r3, #1
   1a7ae:	9302      	str	r3, [sp, #8]
   1a7b0:	e7cd      	b.n	1a74e <ticker_worker+0xf0>
			ticks_drift = 0U;
   1a7b2:	2100      	movs	r1, #0
   1a7b4:	e7d3      	b.n	1a75e <ticker_worker+0x100>
			ticker->timeout_func(ticks_at_expire,
   1a7b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a7ba:	e7e3      	b.n	1a784 <ticker_worker+0x126>
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   1a7bc:	7aba      	ldrb	r2, [r7, #10]
   1a7be:	7afb      	ldrb	r3, [r7, #11]
   1a7c0:	429a      	cmp	r2, r3
   1a7c2:	d010      	beq.n	1a7e6 <ticker_worker+0x188>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1a7c4:	7afb      	ldrb	r3, [r7, #11]
   1a7c6:	3302      	adds	r3, #2
   1a7c8:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   1a7cc:	f8c3 8004 	str.w	r8, [r3, #4]
	instance->worker_trigger = 0U;
   1a7d0:	2300      	movs	r3, #0
   1a7d2:	77fb      	strb	r3, [r7, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1a7d4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1a7d6:	463b      	mov	r3, r7
   1a7d8:	2201      	movs	r2, #1
   1a7da:	2104      	movs	r1, #4
   1a7dc:	2003      	movs	r0, #3
   1a7de:	47a0      	blx	r4
}
   1a7e0:	b005      	add	sp, #20
   1a7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t idx = *ticks_elapsed_index + 1;
   1a7e6:	3301      	adds	r3, #1
   1a7e8:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   1a7ea:	2b02      	cmp	r3, #2
   1a7ec:	d000      	beq.n	1a7f0 <ticker_worker+0x192>
	uint8_t idx = *ticks_elapsed_index + 1;
   1a7ee:	469b      	mov	fp, r3
	*ticks_elapsed_index = idx;
   1a7f0:	f887 b00b 	strb.w	fp, [r7, #11]
}
   1a7f4:	e7e6      	b.n	1a7c4 <ticker_worker+0x166>

0001a7f6 <ticks_to_expire_prep>:
{
   1a7f6:	b570      	push	{r4, r5, r6, lr}
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	460b      	mov	r3, r1
   1a7fc:	4610      	mov	r0, r2
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1a7fe:	68ac      	ldr	r4, [r5, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1a800:	696e      	ldr	r6, [r5, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1a802:	1a52      	subs	r2, r2, r1
   1a804:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a808:	d109      	bne.n	1a81e <ticks_to_expire_prep+0x28>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   1a80a:	f7ff ff24 	bl	1a656 <ticker_ticks_diff_get>
   1a80e:	1823      	adds	r3, r4, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
   1a810:	42b3      	cmp	r3, r6
   1a812:	d910      	bls.n	1a836 <ticks_to_expire_prep+0x40>
		ticks_to_expire -= ticks_to_expire_minus;
   1a814:	1b9b      	subs	r3, r3, r6
		ticks_to_expire_minus = 0U;
   1a816:	2600      	movs	r6, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1a818:	60ab      	str	r3, [r5, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1a81a:	616e      	str	r6, [r5, #20]
}
   1a81c:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   1a81e:	4601      	mov	r1, r0
   1a820:	4618      	mov	r0, r3
   1a822:	f7ff ff18 	bl	1a656 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   1a826:	4284      	cmp	r4, r0
   1a828:	d901      	bls.n	1a82e <ticks_to_expire_prep+0x38>
			ticks_to_expire -= delta_current_start;
   1a82a:	1a23      	subs	r3, r4, r0
   1a82c:	e7f0      	b.n	1a810 <ticks_to_expire_prep+0x1a>
			    (delta_current_start - ticks_to_expire);
   1a82e:	1b03      	subs	r3, r0, r4
			ticks_to_expire_minus +=
   1a830:	441e      	add	r6, r3
			ticks_to_expire = 0U;
   1a832:	2300      	movs	r3, #0
   1a834:	e7ec      	b.n	1a810 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1a836:	1af6      	subs	r6, r6, r3
		ticks_to_expire = 0U;
   1a838:	2300      	movs	r3, #0
   1a83a:	e7ed      	b.n	1a818 <ticks_to_expire_prep+0x22>

0001a83c <ticker_job_list_insert>:
{
   1a83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a840:	b085      	sub	sp, #20
   1a842:	4683      	mov	fp, r0
   1a844:	460d      	mov	r5, r1
	node = &instance->nodes[0];
   1a846:	f8d0 9000 	ldr.w	r9, [r0]
	users = &instance->users[0];
   1a84a:	6843      	ldr	r3, [r0, #4]
   1a84c:	9303      	str	r3, [sp, #12]
	count_user = instance->count_user;
   1a84e:	7a43      	ldrb	r3, [r0, #9]
   1a850:	9302      	str	r3, [sp, #8]
	while (count_user--) {
   1a852:	e07b      	b.n	1a94c <ticker_job_list_insert+0x110>
				user_op = &user_ops[user_ops_first];
   1a854:	2334      	movs	r3, #52	; 0x34
   1a856:	fb07 f303 	mul.w	r3, r7, r3
   1a85a:	9a01      	ldr	r2, [sp, #4]
   1a85c:	18d6      	adds	r6, r2, r3
				first = user_ops_first + 1;
   1a85e:	3701      	adds	r7, #1
   1a860:	b2ff      	uxtb	r7, r7
				if (first == user->count_user_op) {
   1a862:	f89a 2000 	ldrb.w	r2, [sl]
   1a866:	42ba      	cmp	r2, r7
   1a868:	d03e      	beq.n	1a8e8 <ticker_job_list_insert+0xac>
				id_insert = user_op->id;
   1a86a:	f896 8001 	ldrb.w	r8, [r6, #1]
				ticker = &node[id_insert];
   1a86e:	eb08 0448 	add.w	r4, r8, r8, lsl #1
   1a872:	eb09 1404 	add.w	r4, r9, r4, lsl #4
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1a876:	9a01      	ldr	r2, [sp, #4]
   1a878:	5cd3      	ldrb	r3, [r2, r3]
   1a87a:	2b04      	cmp	r3, #4
   1a87c:	d13a      	bne.n	1a8f4 <ticker_job_list_insert+0xb8>
				if (((ticker->req -
   1a87e:	7863      	ldrb	r3, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
   1a880:	78a2      	ldrb	r2, [r4, #2]
				if (((ticker->req -
   1a882:	1a9b      	subs	r3, r3, r2
   1a884:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a888:	d130      	bne.n	1a8ec <ticker_job_list_insert+0xb0>
				ticker_job_op_start(ticker, user_op,
   1a88a:	f8db 1014 	ldr.w	r1, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1a88e:	8ab3      	ldrh	r3, [r6, #20]
   1a890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1a894:	4293      	cmp	r3, r2
   1a896:	d006      	beq.n	1a8a6 <ticker_job_list_insert+0x6a>
		ticker->must_expire =
   1a898:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a89c:	4293      	cmp	r3, r2
   1a89e:	d04f      	beq.n	1a940 <ticker_job_list_insert+0x104>
   1a8a0:	2300      	movs	r3, #0
   1a8a2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   1a8a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1a8a8:	62a3      	str	r3, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1a8aa:	68f3      	ldr	r3, [r6, #12]
   1a8ac:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1a8ae:	6933      	ldr	r3, [r6, #16]
   1a8b0:	6223      	str	r3, [r4, #32]
		(start->lazy < TICKER_LAZY_MUST_EXPIRE_KEEP) ? start->lazy :
   1a8b2:	8ab3      	ldrh	r3, [r6, #20]
	ticker->lazy_periodic =
   1a8b4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   1a8b8:	4293      	cmp	r3, r2
   1a8ba:	d900      	bls.n	1a8be <ticker_job_list_insert+0x82>
   1a8bc:	2300      	movs	r3, #0
   1a8be:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   1a8c0:	69b3      	ldr	r3, [r6, #24]
   1a8c2:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   1a8c4:	69f3      	ldr	r3, [r6, #28]
   1a8c6:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   1a8c8:	6a33      	ldr	r3, [r6, #32]
   1a8ca:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   1a8cc:	68b3      	ldr	r3, [r6, #8]
   1a8ce:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1a8d0:	2300      	movs	r3, #0
   1a8d2:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   1a8d4:	6872      	ldr	r2, [r6, #4]
   1a8d6:	4620      	mov	r0, r4
   1a8d8:	f7ff ff8d 	bl	1a7f6 <ticks_to_expire_prep>
	ticker->remainder_current = 0U;
   1a8dc:	2300      	movs	r3, #0
   1a8de:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1a8e0:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
   1a8e2:	2301      	movs	r3, #1
   1a8e4:	70e3      	strb	r3, [r4, #3]
}
   1a8e6:	e012      	b.n	1a90e <ticker_job_list_insert+0xd2>
					first = 0U;
   1a8e8:	2700      	movs	r7, #0
   1a8ea:	e7be      	b.n	1a86a <ticker_job_list_insert+0x2e>
					ticker_job_op_cb(user_op,
   1a8ec:	2101      	movs	r1, #1
   1a8ee:	4630      	mov	r0, r6
   1a8f0:	f7ff fdc5 	bl	1a47e <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1a8f4:	2dff      	cmp	r5, #255	; 0xff
   1a8f6:	d025      	beq.n	1a944 <ticker_job_list_insert+0x108>
			if (insert_head != TICKER_NULL) {
   1a8f8:	2dff      	cmp	r5, #255	; 0xff
   1a8fa:	d0ab      	beq.n	1a854 <ticker_job_list_insert+0x18>
				ticker = &node[id_insert];
   1a8fc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1a900:	0123      	lsls	r3, r4, #4
   1a902:	eb09 1404 	add.w	r4, r9, r4, lsl #4
				id_insert = insert_head;
   1a906:	46a8      	mov	r8, r5
				insert_head = ticker->next;
   1a908:	f819 5003 	ldrb.w	r5, [r9, r3]
				user_op = NULL;
   1a90c:	2600      	movs	r6, #0
	ticker->next = TICKER_NULL;
   1a90e:	23ff      	movs	r3, #255	; 0xff
   1a910:	7023      	strb	r3, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
   1a912:	4641      	mov	r1, r8
   1a914:	4658      	mov	r0, fp
   1a916:	f7ff fcac 	bl	1a272 <ticker_enqueue>
	ticker->req = ticker->ack + 1;
   1a91a:	78a3      	ldrb	r3, [r4, #2]
   1a91c:	3301      	adds	r3, #1
   1a91e:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1a920:	2e00      	cmp	r6, #0
   1a922:	d0e7      	beq.n	1a8f4 <ticker_job_list_insert+0xb8>
				ticker_job_op_cb(user_op, status);
   1a924:	2100      	movs	r1, #0
   1a926:	4630      	mov	r0, r6
   1a928:	f7ff fda9 	bl	1a47e <ticker_job_op_cb>
				    (ticker->ticks_periodic == 0U) &&
   1a92c:	6863      	ldr	r3, [r4, #4]
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1a92e:	2b00      	cmp	r3, #0
   1a930:	d1e0      	bne.n	1a8f4 <ticker_job_list_insert+0xb8>
				    (ticker->ticks_periodic == 0U) &&
   1a932:	2e00      	cmp	r6, #0
   1a934:	d0de      	beq.n	1a8f4 <ticker_job_list_insert+0xb8>
						user_op->fp_op_func;
   1a936:	6af3      	ldr	r3, [r6, #44]	; 0x2c
					ticker->fp_op_func =
   1a938:	6223      	str	r3, [r4, #32]
						user_op->op_context;
   1a93a:	6b33      	ldr	r3, [r6, #48]	; 0x30
					ticker->op_context =
   1a93c:	6263      	str	r3, [r4, #36]	; 0x24
   1a93e:	e7d9      	b.n	1a8f4 <ticker_job_list_insert+0xb8>
		ticker->must_expire =
   1a940:	2301      	movs	r3, #1
   1a942:	e7ae      	b.n	1a8a2 <ticker_job_list_insert+0x66>
		       (user_ops_first != user->middle)) {
   1a944:	f89a 3002 	ldrb.w	r3, [sl, #2]
		while ((insert_head != TICKER_NULL) ||
   1a948:	42bb      	cmp	r3, r7
   1a94a:	d1d5      	bne.n	1a8f8 <ticker_job_list_insert+0xbc>
	while (count_user--) {
   1a94c:	9a02      	ldr	r2, [sp, #8]
   1a94e:	4613      	mov	r3, r2
   1a950:	3a01      	subs	r2, #1
   1a952:	b2d2      	uxtb	r2, r2
   1a954:	9202      	str	r2, [sp, #8]
   1a956:	b14b      	cbz	r3, 1a96c <ticker_job_list_insert+0x130>
		user = &users[count_user];
   1a958:	9b03      	ldr	r3, [sp, #12]
   1a95a:	9a02      	ldr	r2, [sp, #8]
   1a95c:	eb03 0ac2 	add.w	sl, r3, r2, lsl #3
		user_ops = (void *)&user->user_op[0];
   1a960:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a964:	9301      	str	r3, [sp, #4]
		user_ops_first = user->first;
   1a966:	f89a 7001 	ldrb.w	r7, [sl, #1]
		while ((insert_head != TICKER_NULL) ||
   1a96a:	e7c3      	b.n	1a8f4 <ticker_job_list_insert+0xb8>
}
   1a96c:	b005      	add	sp, #20
   1a96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a972 <ticker_job_node_update>:
{
   1a972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a976:	4604      	mov	r4, r0
   1a978:	460d      	mov	r5, r1
   1a97a:	4617      	mov	r7, r2
   1a97c:	469a      	mov	sl, r3
   1a97e:	f8dd 9020 	ldr.w	r9, [sp, #32]
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1a982:	6886      	ldr	r6, [r0, #8]
	ticks_now = cntr_cnt_get();
   1a984:	f7f5 f8bc 	bl	fb00 <cntr_cnt_get>
   1a988:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1a98a:	4639      	mov	r1, r7
   1a98c:	f7ff fe63 	bl	1a656 <ticker_ticks_diff_get>
   1a990:	4450      	add	r0, sl
	if (ticks_to_expire > ticks_elapsed) {
   1a992:	4286      	cmp	r6, r0
   1a994:	d907      	bls.n	1a9a6 <ticker_job_node_update+0x34>
		ticks_to_expire -= ticks_elapsed;
   1a996:	1a36      	subs	r6, r6, r0
	if ((ticker->ticks_periodic != 0U) &&
   1a998:	6863      	ldr	r3, [r4, #4]
   1a99a:	b353      	cbz	r3, 1a9f2 <ticker_job_node_update+0x80>
	    (user_op->params.update.lazy != 0U)) {
   1a99c:	8aab      	ldrh	r3, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
   1a99e:	b343      	cbz	r3, 1a9f2 <ticker_job_node_update+0x80>
		user_op->params.update.lazy--;
   1a9a0:	3b01      	subs	r3, #1
   1a9a2:	82ab      	strh	r3, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1a9a4:	e00d      	b.n	1a9c2 <ticker_job_node_update+0x50>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1a9a6:	1b86      	subs	r6, r0, r6
   1a9a8:	6960      	ldr	r0, [r4, #20]
   1a9aa:	4430      	add	r0, r6
   1a9ac:	6160      	str	r0, [r4, #20]
		ticks_to_expire = 0U;
   1a9ae:	2600      	movs	r6, #0
   1a9b0:	e7f2      	b.n	1a998 <ticker_job_node_update+0x26>
					   ticker_remainder_dec(ticker);
   1a9b2:	4620      	mov	r0, r4
   1a9b4:	f7ec fbe4 	bl	7180 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   1a9b8:	4450      	add	r0, sl
   1a9ba:	1a36      	subs	r6, r6, r0
			ticker->lazy_current--;
   1a9bc:	8be3      	ldrh	r3, [r4, #30]
   1a9be:	3b01      	subs	r3, #1
   1a9c0:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1a9c2:	f8d4 a004 	ldr.w	sl, [r4, #4]
   1a9c6:	45b2      	cmp	sl, r6
   1a9c8:	d203      	bcs.n	1a9d2 <ticker_job_node_update+0x60>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   1a9ca:	8be2      	ldrh	r2, [r4, #30]
   1a9cc:	8aab      	ldrh	r3, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1a9ce:	429a      	cmp	r2, r3
   1a9d0:	d8ef      	bhi.n	1a9b2 <ticker_job_node_update+0x40>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1a9d2:	8be2      	ldrh	r2, [r4, #30]
   1a9d4:	8aab      	ldrh	r3, [r5, #20]
   1a9d6:	429a      	cmp	r2, r3
   1a9d8:	d20a      	bcs.n	1a9f0 <ticker_job_node_update+0x7e>
			ticks_to_expire += ticker->ticks_periodic +
   1a9da:	f8d4 a004 	ldr.w	sl, [r4, #4]
					   ticker_remainder_inc(ticker);
   1a9de:	4620      	mov	r0, r4
   1a9e0:	f7ec fbb8 	bl	7154 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   1a9e4:	4482      	add	sl, r0
   1a9e6:	4456      	add	r6, sl
			ticker->lazy_current++;
   1a9e8:	8be3      	ldrh	r3, [r4, #30]
   1a9ea:	3301      	adds	r3, #1
   1a9ec:	83e3      	strh	r3, [r4, #30]
   1a9ee:	e7f0      	b.n	1a9d2 <ticker_job_node_update+0x60>
		ticker->lazy_periodic = user_op->params.update.lazy;
   1a9f0:	83a3      	strh	r3, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   1a9f2:	686b      	ldr	r3, [r5, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   1a9f4:	4433      	add	r3, r6
   1a9f6:	60a3      	str	r3, [r4, #8]
				user_op->params.update.ticks_drift_minus;
   1a9f8:	68aa      	ldr	r2, [r5, #8]
	ticker->ticks_to_expire_minus +=
   1a9fa:	6963      	ldr	r3, [r4, #20]
   1a9fc:	4413      	add	r3, r2
   1a9fe:	6163      	str	r3, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   1aa00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   1aa02:	b12b      	cbz	r3, 1aa10 <ticker_job_node_update+0x9e>
   1aa04:	681a      	ldr	r2, [r3, #0]
   1aa06:	b11a      	cbz	r2, 1aa10 <ticker_job_node_update+0x9e>
			user_op->params.update.ticks_drift_plus -
   1aa08:	686a      	ldr	r2, [r5, #4]
			user_op->params.update.ticks_drift_minus;
   1aa0a:	68a9      	ldr	r1, [r5, #8]
			user_op->params.update.ticks_drift_plus -
   1aa0c:	1a52      	subs	r2, r2, r1
		ext_data->ticks_drift =
   1aa0e:	605a      	str	r2, [r3, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   1aa10:	4642      	mov	r2, r8
   1aa12:	4639      	mov	r1, r7
   1aa14:	4620      	mov	r0, r4
   1aa16:	f7ff feee 	bl	1a7f6 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1aa1a:	68eb      	ldr	r3, [r5, #12]
   1aa1c:	69a2      	ldr	r2, [r4, #24]
   1aa1e:	4413      	add	r3, r2
   1aa20:	61a3      	str	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   1aa22:	692a      	ldr	r2, [r5, #16]
   1aa24:	4293      	cmp	r3, r2
   1aa26:	d911      	bls.n	1aa4c <ticker_job_node_update+0xda>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   1aa28:	1a9b      	subs	r3, r3, r2
   1aa2a:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   1aa2c:	7dab      	ldrb	r3, [r5, #22]
   1aa2e:	b103      	cbz	r3, 1aa32 <ticker_job_node_update+0xc0>
		ticker->force = user_op->params.update.force;
   1aa30:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   1aa32:	7deb      	ldrb	r3, [r5, #23]
   1aa34:	b113      	cbz	r3, 1aa3c <ticker_job_node_update+0xca>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   1aa36:	3b01      	subs	r3, #1
   1aa38:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   1aa3c:	f899 3000 	ldrb.w	r3, [r9]
   1aa40:	7023      	strb	r3, [r4, #0]
	*insert_head = user_op->id;
   1aa42:	786b      	ldrb	r3, [r5, #1]
   1aa44:	f889 3000 	strb.w	r3, [r9]
}
   1aa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticker->ticks_slot = 0U;
   1aa4c:	2300      	movs	r3, #0
   1aa4e:	61a3      	str	r3, [r4, #24]
   1aa50:	e7ec      	b.n	1aa2c <ticker_job_node_update+0xba>

0001aa52 <ticker_job_list_manage>:
{
   1aa52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aa56:	b089      	sub	sp, #36	; 0x24
   1aa58:	4681      	mov	r9, r0
   1aa5a:	9104      	str	r1, [sp, #16]
   1aa5c:	9205      	str	r2, [sp, #20]
	node = &instance->nodes[0];
   1aa5e:	f8d0 a000 	ldr.w	sl, [r0]
	users = &instance->users[0];
   1aa62:	6843      	ldr	r3, [r0, #4]
   1aa64:	9306      	str	r3, [sp, #24]
	count_user = instance->count_user;
   1aa66:	7a43      	ldrb	r3, [r0, #9]
	pending = 0U;
   1aa68:	2200      	movs	r2, #0
   1aa6a:	9207      	str	r2, [sp, #28]
	while (count_user--) {
   1aa6c:	e0a9      	b.n	1abc2 <ticker_job_list_manage+0x170>
				middle = 0U;
   1aa6e:	2300      	movs	r3, #0
   1aa70:	e025      	b.n	1aabe <ticker_job_list_manage+0x6c>
			     (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS)) ||
   1aa72:	2a05      	cmp	r2, #5
   1aa74:	d03d      	beq.n	1aaf2 <ticker_job_list_manage+0xa0>
			if ((state == 1U) ||
   1aa76:	2b01      	cmp	r3, #1
   1aa78:	d002      	beq.n	1aa80 <ticker_job_list_manage+0x2e>
   1aa7a:	2a06      	cmp	r2, #6
   1aa7c:	f040 8096 	bne.w	1abac <ticker_job_list_manage+0x15a>
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1aa80:	f81b 3005 	ldrb.w	r3, [fp, r5]
   1aa84:	2b05      	cmp	r3, #5
   1aa86:	d04a      	beq.n	1ab1e <ticker_job_list_manage+0xcc>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   1aa88:	2b06      	cmp	r3, #6
   1aa8a:	d15b      	bne.n	1ab44 <ticker_job_list_manage+0xf2>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1aa8c:	f899 201c 	ldrb.w	r2, [r9, #28]
   1aa90:	f898 3001 	ldrb.w	r3, [r8, #1]
   1aa94:	429a      	cmp	r2, r3
   1aa96:	d05e      	beq.n	1ab56 <ticker_job_list_manage+0x104>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   1aa98:	2100      	movs	r1, #0
   1aa9a:	4640      	mov	r0, r8
   1aa9c:	f7ff fcef 	bl	1a47e <ticker_job_op_cb>
		while (user->middle != user->last) {
   1aaa0:	78b7      	ldrb	r7, [r6, #2]
   1aaa2:	78f3      	ldrb	r3, [r6, #3]
   1aaa4:	429f      	cmp	r7, r3
   1aaa6:	f000 808b 	beq.w	1abc0 <ticker_job_list_manage+0x16e>
			user_op = &user_ops[user->middle];
   1aaaa:	2534      	movs	r5, #52	; 0x34
   1aaac:	fb07 f505 	mul.w	r5, r7, r5
   1aab0:	eb0b 0805 	add.w	r8, fp, r5
			middle = user->middle + 1;
   1aab4:	1c7b      	adds	r3, r7, #1
   1aab6:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1aab8:	7832      	ldrb	r2, [r6, #0]
   1aaba:	429a      	cmp	r2, r3
   1aabc:	d0d7      	beq.n	1aa6e <ticker_job_list_manage+0x1c>
			user->middle = middle;
   1aabe:	70b3      	strb	r3, [r6, #2]
			ticker = &node[user_op->id];
   1aac0:	f898 4001 	ldrb.w	r4, [r8, #1]
   1aac4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1aac8:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1aacc:	f81b 2005 	ldrb.w	r2, [fp, r5]
   1aad0:	2a04      	cmp	r2, #4
   1aad2:	d9e5      	bls.n	1aaa0 <ticker_job_list_manage+0x4e>
			state = (ticker->req - ticker->ack) & 0xff;
   1aad4:	7863      	ldrb	r3, [r4, #1]
   1aad6:	78a1      	ldrb	r1, [r4, #2]
   1aad8:	1a5b      	subs	r3, r3, r1
   1aada:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1aadc:	2a08      	cmp	r2, #8
   1aade:	d803      	bhi.n	1aae8 <ticker_job_list_manage+0x96>
   1aae0:	2b00      	cmp	r3, #0
   1aae2:	d1c6      	bne.n	1aa72 <ticker_job_list_manage+0x20>
			    ((state == 0U) &&
   1aae4:	2a06      	cmp	r2, #6
   1aae6:	d0c4      	beq.n	1aa72 <ticker_job_list_manage+0x20>
				ticker_job_op_cb(user_op,
   1aae8:	2101      	movs	r1, #1
   1aaea:	4640      	mov	r0, r8
   1aaec:	f7ff fcc7 	bl	1a47e <ticker_job_op_cb>
				continue;
   1aaf0:	e7d6      	b.n	1aaa0 <ticker_job_list_manage+0x4e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1aaf2:	f8d8 1004 	ldr.w	r1, [r8, #4]
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1aaf6:	2900      	cmp	r1, #0
   1aaf8:	d1bd      	bne.n	1aa76 <ticker_job_list_manage+0x24>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1aafa:	f8d8 1008 	ldr.w	r1, [r8, #8]
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1aafe:	2900      	cmp	r1, #0
   1ab00:	d1b9      	bne.n	1aa76 <ticker_job_list_manage+0x24>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1ab02:	f8d8 100c 	ldr.w	r1, [r8, #12]
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1ab06:	2900      	cmp	r1, #0
   1ab08:	d1b5      	bne.n	1aa76 <ticker_job_list_manage+0x24>
			     (user_op->params.update.ticks_slot_minus == 0U) &&
   1ab0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   1ab0e:	2900      	cmp	r1, #0
   1ab10:	d1b1      	bne.n	1aa76 <ticker_job_list_manage+0x24>
			     (user_op->params.update.lazy == 0U) &&
   1ab12:	f8d8 1014 	ldr.w	r1, [r8, #20]
   1ab16:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
   1ab1a:	d1ac      	bne.n	1aa76 <ticker_job_list_manage+0x24>
   1ab1c:	e7e4      	b.n	1aae8 <ticker_job_list_manage+0x96>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1ab1e:	f898 1001 	ldrb.w	r1, [r8, #1]
   1ab22:	4648      	mov	r0, r9
   1ab24:	f7ff fbe5 	bl	1a2f2 <ticker_dequeue>
   1ab28:	60a0      	str	r0, [r4, #8]
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1ab2a:	9b05      	ldr	r3, [sp, #20]
   1ab2c:	9300      	str	r3, [sp, #0]
   1ab2e:	9b04      	ldr	r3, [sp, #16]
   1ab30:	f8d9 2014 	ldr.w	r2, [r9, #20]
   1ab34:	4641      	mov	r1, r8
   1ab36:	4620      	mov	r0, r4
   1ab38:	f7ff ff1b 	bl	1a972 <ticker_job_node_update>
		ticker->req++;
   1ab3c:	7863      	ldrb	r3, [r4, #1]
   1ab3e:	3301      	adds	r3, #1
   1ab40:	7063      	strb	r3, [r4, #1]
   1ab42:	e7a9      	b.n	1aa98 <ticker_job_list_manage+0x46>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   1ab44:	f898 1001 	ldrb.w	r1, [r8, #1]
   1ab48:	4648      	mov	r0, r9
   1ab4a:	f7ff fbd2 	bl	1a2f2 <ticker_dequeue>
   1ab4e:	60a0      	str	r0, [r4, #8]
			ticker->req = ticker->ack;
   1ab50:	78a3      	ldrb	r3, [r4, #2]
   1ab52:	7063      	strb	r3, [r4, #1]
   1ab54:	e79a      	b.n	1aa8c <ticker_job_list_manage+0x3a>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1ab56:	23ff      	movs	r3, #255	; 0xff
   1ab58:	f889 301c 	strb.w	r3, [r9, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   1ab5c:	f81b 3005 	ldrb.w	r3, [fp, r5]
   1ab60:	2b06      	cmp	r3, #6
   1ab62:	d001      	beq.n	1ab68 <ticker_job_list_manage+0x116>
   1ab64:	2b08      	cmp	r3, #8
   1ab66:	d113      	bne.n	1ab90 <ticker_job_list_manage+0x13e>
				ticks_at_yield =
   1ab68:	f8d8 0004 	ldr.w	r0, [r8, #4]
			ticks_current = instance->ticks_current;
   1ab6c:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_yield - ticks_current) &
   1ab70:	1ac2      	subs	r2, r0, r3
   1ab72:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1ab76:	d10e      	bne.n	1ab96 <ticker_job_list_manage+0x144>
					ticker_ticks_diff_get(ticks_at_yield,
   1ab78:	4619      	mov	r1, r3
   1ab7a:	f7ff fd6c 	bl	1a656 <ticker_ticks_diff_get>
				ticks_used = ticks_elapsed +
   1ab7e:	9b04      	ldr	r3, [sp, #16]
   1ab80:	4418      	add	r0, r3
			if (instance->ticks_slot_previous > ticks_used) {
   1ab82:	f8d9 3018 	ldr.w	r3, [r9, #24]
   1ab86:	4283      	cmp	r3, r0
   1ab88:	d986      	bls.n	1aa98 <ticker_job_list_manage+0x46>
				instance->ticks_slot_previous = ticks_used;
   1ab8a:	f8c9 0018 	str.w	r0, [r9, #24]
   1ab8e:	e783      	b.n	1aa98 <ticker_job_list_manage+0x46>
				ticks_at_yield = cntr_cnt_get();
   1ab90:	f7f4 ffb6 	bl	fb00 <cntr_cnt_get>
   1ab94:	e7ea      	b.n	1ab6c <ticker_job_list_manage+0x11a>
					ticker_ticks_diff_get(ticks_current,
   1ab96:	4601      	mov	r1, r0
   1ab98:	4618      	mov	r0, r3
   1ab9a:	f7ff fd5c 	bl	1a656 <ticker_ticks_diff_get>
				if (ticks_elapsed > ticks_used) {
   1ab9e:	9b04      	ldr	r3, [sp, #16]
   1aba0:	4283      	cmp	r3, r0
   1aba2:	d901      	bls.n	1aba8 <ticker_job_list_manage+0x156>
					ticks_used = ticks_elapsed -
   1aba4:	1a18      	subs	r0, r3, r0
   1aba6:	e7ec      	b.n	1ab82 <ticker_job_list_manage+0x130>
					ticks_used = 0;
   1aba8:	2000      	movs	r0, #0
   1abaa:	e7ea      	b.n	1ab82 <ticker_job_list_manage+0x130>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   1abac:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
   1abb0:	464b      	mov	r3, r9
   1abb2:	2201      	movs	r2, #1
   1abb4:	2104      	movs	r1, #4
   1abb6:	4608      	mov	r0, r1
   1abb8:	47a0      	blx	r4
				user->middle = prev;
   1abba:	70b7      	strb	r7, [r6, #2]
				pending = 1U;
   1abbc:	2301      	movs	r3, #1
   1abbe:	9307      	str	r3, [sp, #28]
   1abc0:	9b03      	ldr	r3, [sp, #12]
	while (count_user--) {
   1abc2:	1e5a      	subs	r2, r3, #1
   1abc4:	b2d2      	uxtb	r2, r2
   1abc6:	9203      	str	r2, [sp, #12]
   1abc8:	b133      	cbz	r3, 1abd8 <ticker_job_list_manage+0x186>
		user = &users[count_user];
   1abca:	9b06      	ldr	r3, [sp, #24]
   1abcc:	9a03      	ldr	r2, [sp, #12]
   1abce:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   1abd2:	f8d6 b004 	ldr.w	fp, [r6, #4]
		while (user->middle != user->last) {
   1abd6:	e763      	b.n	1aaa0 <ticker_job_list_manage+0x4e>
}
   1abd8:	9807      	ldr	r0, [sp, #28]
   1abda:	b009      	add	sp, #36	; 0x24
   1abdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001abe0 <ticker_job_worker_bh>:
{
   1abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abe4:	b087      	sub	sp, #28
   1abe6:	4606      	mov	r6, r0
   1abe8:	460c      	mov	r4, r1
   1abea:	9104      	str	r1, [sp, #16]
   1abec:	4690      	mov	r8, r2
   1abee:	9305      	str	r3, [sp, #20]
	ticks_now = cntr_cnt_get();
   1abf0:	f7f4 ff86 	bl	fb00 <cntr_cnt_get>
	ticks_latency = ticker_ticks_diff_get(ticks_now, ticks_previous);
   1abf4:	4621      	mov	r1, r4
   1abf6:	f7ff fd2e 	bl	1a656 <ticker_ticks_diff_get>
   1abfa:	4682      	mov	sl, r0
	node = &instance->nodes[0];
   1abfc:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0U;
   1ac00:	2300      	movs	r3, #0
   1ac02:	9301      	str	r3, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   1ac04:	e02f      	b.n	1ac66 <ticker_job_worker_bh+0x86>
			ticker->ticks_to_expire -= ticks_elapsed;
   1ac06:	eba3 0308 	sub.w	r3, r3, r8
   1ac0a:	60a3      	str	r3, [r4, #8]
}
   1ac0c:	b007      	add	sp, #28
   1ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_slot_previous = TICKER_NULL;
   1ac12:	23ff      	movs	r3, #255	; 0xff
   1ac14:	7733      	strb	r3, [r6, #28]
			instance->ticks_slot_previous = 0U;
   1ac16:	2300      	movs	r3, #0
   1ac18:	61b3      	str	r3, [r6, #24]
   1ac1a:	e03d      	b.n	1ac98 <ticker_job_worker_bh+0xb8>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1ac1c:	2900      	cmp	r1, #0
   1ac1e:	d143      	bne.n	1aca8 <ticker_job_worker_bh+0xc8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1ac20:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1ac22:	b112      	cbz	r2, 1ac2a <ticker_job_worker_bh+0x4a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1ac24:	7a12      	ldrb	r2, [r2, #8]
   1ac26:	2a01      	cmp	r2, #1
   1ac28:	d03e      	beq.n	1aca8 <ticker_job_worker_bh+0xc8>
			instance->ticker_id_slot_previous = id_expired;
   1ac2a:	7737      	strb	r7, [r6, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1ac2c:	69a2      	ldr	r2, [r4, #24]
   1ac2e:	61b2      	str	r2, [r6, #24]
   1ac30:	e03a      	b.n	1aca8 <ticker_job_worker_bh+0xc8>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1ac32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ac34:	2b00      	cmp	r3, #0
   1ac36:	d051      	beq.n	1acdc <ticker_job_worker_bh+0xfc>
   1ac38:	7a1b      	ldrb	r3, [r3, #8]
   1ac3a:	2b01      	cmp	r3, #1
   1ac3c:	d14e      	bne.n	1acdc <ticker_job_worker_bh+0xfc>
				ticker->ticks_to_expire = ticks_elapsed;
   1ac3e:	f8c4 8008 	str.w	r8, [r4, #8]
				ticker->req = ticker->ack;
   1ac42:	78a3      	ldrb	r3, [r4, #2]
   1ac44:	7063      	strb	r3, [r4, #1]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   1ac46:	9b04      	ldr	r3, [sp, #16]
   1ac48:	9a01      	ldr	r2, [sp, #4]
   1ac4a:	189a      	adds	r2, r3, r2
   1ac4c:	6971      	ldr	r1, [r6, #20]
   1ac4e:	4620      	mov	r0, r4
   1ac50:	f7ff fdd1 	bl	1a7f6 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   1ac54:	9a05      	ldr	r2, [sp, #20]
   1ac56:	7813      	ldrb	r3, [r2, #0]
   1ac58:	9902      	ldr	r1, [sp, #8]
   1ac5a:	f809 3001 	strb.w	r3, [r9, r1]
			*insert_head = id_expired;
   1ac5e:	7017      	strb	r7, [r2, #0]
			ticker->req++;
   1ac60:	7863      	ldrb	r3, [r4, #1]
   1ac62:	3301      	adds	r3, #1
   1ac64:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1ac66:	7f77      	ldrb	r7, [r6, #29]
   1ac68:	2fff      	cmp	r7, #255	; 0xff
   1ac6a:	d0cf      	beq.n	1ac0c <ticker_job_worker_bh+0x2c>
		ticker = &node[id_expired];
   1ac6c:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   1ac70:	0123      	lsls	r3, r4, #4
   1ac72:	9302      	str	r3, [sp, #8]
   1ac74:	eb09 1404 	add.w	r4, r9, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1ac78:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1ac7a:	4598      	cmp	r8, r3
   1ac7c:	d3c3      	bcc.n	1ac06 <ticker_job_worker_bh+0x26>
		ticks_elapsed -= ticks_to_expire;
   1ac7e:	eba8 0803 	sub.w	r8, r8, r3
		ticks_expired += ticks_to_expire;
   1ac82:	9a01      	ldr	r2, [sp, #4]
   1ac84:	441a      	add	r2, r3
   1ac86:	9201      	str	r2, [sp, #4]
		ticks_latency -= ticks_to_expire;
   1ac88:	ebaa 0a03 	sub.w	sl, sl, r3
		skip_collision = (ticker->lazy_current != 0U);
   1ac8c:	8be1      	ldrh	r1, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1ac8e:	69b2      	ldr	r2, [r6, #24]
   1ac90:	429a      	cmp	r2, r3
   1ac92:	d9be      	bls.n	1ac12 <ticker_job_worker_bh+0x32>
			instance->ticks_slot_previous -= ticks_to_expire;
   1ac94:	1ad3      	subs	r3, r2, r3
   1ac96:	61b3      	str	r3, [r6, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1ac98:	7863      	ldrb	r3, [r4, #1]
   1ac9a:	78a2      	ldrb	r2, [r4, #2]
   1ac9c:	1a9b      	subs	r3, r3, r2
   1ac9e:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1aca0:	69a2      	ldr	r2, [r4, #24]
   1aca2:	b10a      	cbz	r2, 1aca8 <ticker_job_worker_bh+0xc8>
   1aca4:	2b02      	cmp	r3, #2
   1aca6:	d0b9      	beq.n	1ac1c <ticker_job_worker_bh+0x3c>
		ticker->ticks_to_expire = 0U;
   1aca8:	2200      	movs	r2, #0
   1acaa:	60a2      	str	r2, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1acac:	9a02      	ldr	r2, [sp, #8]
   1acae:	f819 2002 	ldrb.w	r2, [r9, r2]
   1acb2:	7772      	strb	r2, [r6, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1acb4:	6862      	ldr	r2, [r4, #4]
   1acb6:	2a00      	cmp	r2, #0
   1acb8:	d1bb      	bne.n	1ac32 <ticker_job_worker_bh+0x52>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1acba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   1acbc:	b112      	cbz	r2, 1acc4 <ticker_job_worker_bh+0xe4>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   1acbe:	7a12      	ldrb	r2, [r2, #8]
   1acc0:	2a01      	cmp	r2, #1
   1acc2:	d0b6      	beq.n	1ac32 <ticker_job_worker_bh+0x52>
			if (state && ((state == 1U) || skip_collision) &&
   1acc4:	b13b      	cbz	r3, 1acd6 <ticker_job_worker_bh+0xf6>
   1acc6:	2b01      	cmp	r3, #1
   1acc8:	d000      	beq.n	1accc <ticker_job_worker_bh+0xec>
   1acca:	b121      	cbz	r1, 1acd6 <ticker_job_worker_bh+0xf6>
			    ticker->fp_op_func) {
   1accc:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   1acce:	b113      	cbz	r3, 1acd6 <ticker_job_worker_bh+0xf6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1acd0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1acd2:	2001      	movs	r0, #1
   1acd4:	4798      	blx	r3
			ticker->req = ticker->ack;
   1acd6:	78a3      	ldrb	r3, [r4, #2]
   1acd8:	7063      	strb	r3, [r4, #1]
   1acda:	e7c4      	b.n	1ac66 <ticker_job_worker_bh+0x86>
				if (!ticker->lazy_current) {
   1acdc:	8be3      	ldrh	r3, [r4, #30]
   1acde:	b92b      	cbnz	r3, 1acec <ticker_job_worker_bh+0x10c>
					lazy_periodic = ticker->lazy_periodic;
   1ace0:	8ba3      	ldrh	r3, [r4, #28]
   1ace2:	9303      	str	r3, [sp, #12]
				count = 1 + lazy_periodic;
   1ace4:	9b03      	ldr	r3, [sp, #12]
   1ace6:	3301      	adds	r3, #1
				ticks_to_expire = 0U;
   1ace8:	2500      	movs	r5, #0
				while (count--) {
   1acea:	e00b      	b.n	1ad04 <ticker_job_worker_bh+0x124>
					ticker->req = ticker->ack;
   1acec:	78a3      	ldrb	r3, [r4, #2]
   1acee:	7063      	strb	r3, [r4, #1]
					lazy_periodic = 0U;
   1acf0:	2300      	movs	r3, #0
   1acf2:	9303      	str	r3, [sp, #12]
   1acf4:	e7f6      	b.n	1ace4 <ticker_job_worker_bh+0x104>
						ticker->ticks_periodic;
   1acf6:	6863      	ldr	r3, [r4, #4]
					ticks_to_expire +=
   1acf8:	441d      	add	r5, r3
						ticker_remainder_inc(ticker);
   1acfa:	4620      	mov	r0, r4
   1acfc:	f7ec fa2a 	bl	7154 <ticker_remainder_inc>
					ticks_to_expire +=
   1ad00:	4405      	add	r5, r0
				while (count--) {
   1ad02:	465b      	mov	r3, fp
   1ad04:	f103 3bff 	add.w	fp, r3, #4294967295
   1ad08:	2b00      	cmp	r3, #0
   1ad0a:	d1f4      	bne.n	1acf6 <ticker_job_worker_bh+0x116>
				} else if (!ticker->must_expire) {
   1ad0c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1ad10:	b1c3      	cbz	r3, 1ad44 <ticker_job_worker_bh+0x164>
				lazy = 0U;
   1ad12:	f04f 0b00 	mov.w	fp, #0
				ticker->ticks_to_expire = ticks_to_expire;
   1ad16:	60a5      	str	r5, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1ad18:	9b03      	ldr	r3, [sp, #12]
   1ad1a:	445b      	add	r3, fp
   1ad1c:	469b      	mov	fp, r3
   1ad1e:	8be3      	ldrh	r3, [r4, #30]
   1ad20:	fa13 fb8b 	uxtah	fp, r3, fp
   1ad24:	f8a4 b01e 	strh.w	fp, [r4, #30]
   1ad28:	e78d      	b.n	1ac46 <ticker_job_worker_bh+0x66>
							ticker->ticks_periodic;
   1ad2a:	6863      	ldr	r3, [r4, #4]
						ticks_to_expire +=
   1ad2c:	441d      	add	r5, r3
						  ticker_remainder_inc(ticker);
   1ad2e:	4620      	mov	r0, r4
   1ad30:	f7ec fa10 	bl	7154 <ticker_remainder_inc>
						ticks_to_expire +=
   1ad34:	4405      	add	r5, r0
						lazy++;
   1ad36:	f10b 0b01 	add.w	fp, fp, #1
   1ad3a:	fa1f fb8b 	uxth.w	fp, fp
					while (ticks_to_expire <
   1ad3e:	4555      	cmp	r5, sl
   1ad40:	d3f3      	bcc.n	1ad2a <ticker_job_worker_bh+0x14a>
   1ad42:	e7e8      	b.n	1ad16 <ticker_job_worker_bh+0x136>
				lazy = 0U;
   1ad44:	f04f 0b00 	mov.w	fp, #0
   1ad48:	e7f9      	b.n	1ad3e <ticker_job_worker_bh+0x15e>

0001ad4a <ll_addr_read>:

uint8_t *ll_addr_read(uint8_t addr_type, uint8_t *const bdaddr)
{
   1ad4a:	b510      	push	{r4, lr}
   1ad4c:	460c      	mov	r4, r1
	uint8_t *addr;

	addr = ll_addr_get(addr_type);
   1ad4e:	f7ec fcf7 	bl	7740 <ll_addr_get>
	if (addr) {
   1ad52:	4603      	mov	r3, r0
   1ad54:	b118      	cbz	r0, 1ad5e <ll_addr_read+0x14>
   1ad56:	6802      	ldr	r2, [r0, #0]
   1ad58:	6022      	str	r2, [r4, #0]
   1ad5a:	8882      	ldrh	r2, [r0, #4]
   1ad5c:	80a2      	strh	r2, [r4, #4]
		memcpy(bdaddr, addr, BDADDR_SIZE);
	}

	return addr;
}
   1ad5e:	4618      	mov	r0, r3
   1ad60:	bd10      	pop	{r4, pc}

0001ad62 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1ad62:	2300      	movs	r3, #0
   1ad64:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   1ad66:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   1ad68:	4770      	bx	lr

0001ad6a <process_prio_evt>:
	*evt_flags = BT_HCI_EVT_FLAG_RECV;
   1ad6a:	2302      	movs	r3, #2
   1ad6c:	700b      	strb	r3, [r1, #0]
}
   1ad6e:	2000      	movs	r0, #0
   1ad70:	4770      	bx	lr

0001ad72 <hci_driver_send>:
{
   1ad72:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   1ad74:	8983      	ldrh	r3, [r0, #12]
   1ad76:	b163      	cbz	r3, 1ad92 <hci_driver_send+0x20>
   1ad78:	4604      	mov	r4, r0
   1ad7a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   1ad7c:	b963      	cbnz	r3, 1ad98 <hci_driver_send+0x26>
		err = cmd_handle(buf);
   1ad7e:	f7ec fcf5 	bl	776c <cmd_handle>
	if (!err) {
   1ad82:	4605      	mov	r5, r0
   1ad84:	b108      	cbz	r0, 1ad8a <hci_driver_send+0x18>
}
   1ad86:	4628      	mov	r0, r5
   1ad88:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1ad8a:	4620      	mov	r0, r4
   1ad8c:	f001 ffd6 	bl	1cd3c <net_buf_unref>
   1ad90:	e7f9      	b.n	1ad86 <hci_driver_send+0x14>
		return -EINVAL;
   1ad92:	f06f 0515 	mvn.w	r5, #21
   1ad96:	e7f6      	b.n	1ad86 <hci_driver_send+0x14>
		return -EINVAL;
   1ad98:	f06f 0515 	mvn.w	r5, #21
   1ad9c:	e7f3      	b.n	1ad86 <hci_driver_send+0x14>

0001ad9e <adv_cmds_ext_check>:
}
   1ad9e:	2000      	movs	r0, #0
   1ada0:	4770      	bx	lr

0001ada2 <link_control_cmd_handle>:
}
   1ada2:	f06f 0015 	mvn.w	r0, #21
   1ada6:	4770      	bx	lr

0001ada8 <status_cmd_handle>:
}
   1ada8:	f06f 0015 	mvn.w	r0, #21
   1adac:	4770      	bx	lr

0001adae <dup_ext_adv_mode_reset>:
	for (adv_mode = 0U; adv_mode < DUP_EXT_ADV_MODE_COUNT;
   1adae:	2300      	movs	r3, #0
   1adb0:	e00d      	b.n	1adce <dup_ext_adv_mode_reset+0x20>
		dup_mode = &dup_adv_mode[adv_mode];
   1adb2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1adb6:	004a      	lsls	r2, r1, #1
		dup_mode->set_count = 0U;
   1adb8:	f810 1011 	ldrb.w	r1, [r0, r1, lsl #1]
   1adbc:	f36f 0104 	bfc	r1, #0, #5
   1adc0:	5481      	strb	r1, [r0, r2]
		dup_mode->set_curr = 0U;
   1adc2:	5a81      	ldrh	r1, [r0, r2]
   1adc4:	f36f 1149 	bfc	r1, #5, #5
   1adc8:	5281      	strh	r1, [r0, r2]
	     adv_mode++) {
   1adca:	3301      	adds	r3, #1
   1adcc:	b2db      	uxtb	r3, r3
	for (adv_mode = 0U; adv_mode < DUP_EXT_ADV_MODE_COUNT;
   1adce:	2b03      	cmp	r3, #3
   1add0:	d9ef      	bls.n	1adb2 <dup_ext_adv_mode_reset+0x4>
}
   1add2:	4770      	bx	lr

0001add4 <ext_adv_data_get>:
{
   1add4:	b510      	push	{r4, lr}
	*tx_pwr = BT_HCI_LE_ADV_TX_POWER_NO_PREF;
   1add6:	247f      	movs	r4, #127	; 0x7f
   1add8:	7014      	strb	r4, [r2, #0]
	if (!p->ext_hdr_len) {
   1adda:	f890 e022 	ldrb.w	lr, [r0, #34]	; 0x22
   1adde:	f01e 0f3f 	tst.w	lr, #63	; 0x3f
   1ade2:	d039      	beq.n	1ae58 <ext_adv_data_get+0x84>
   1ade4:	f100 0c22 	add.w	ip, r0, #34	; 0x22
	ptr = h->data;
   1ade8:	f100 0424 	add.w	r4, r0, #36	; 0x24
	if (h->adv_addr) {
   1adec:	f890 e023 	ldrb.w	lr, [r0, #35]	; 0x23
   1adf0:	f01e 0f01 	tst.w	lr, #1
   1adf4:	d001      	beq.n	1adfa <ext_adv_data_get+0x26>
		ptr += BDADDR_SIZE;
   1adf6:	f100 042a 	add.w	r4, r0, #42	; 0x2a
	if (h->tgt_addr) {
   1adfa:	f01e 0f02 	tst.w	lr, #2
   1adfe:	d000      	beq.n	1ae02 <ext_adv_data_get+0x2e>
		ptr += BDADDR_SIZE;
   1ae00:	3406      	adds	r4, #6
	if (h->adi) {
   1ae02:	f01e 0f08 	tst.w	lr, #8
   1ae06:	d000      	beq.n	1ae0a <ext_adv_data_get+0x36>
		ptr += sizeof(struct pdu_adv_adi);
   1ae08:	3402      	adds	r4, #2
	if (h->aux_ptr) {
   1ae0a:	f01e 0f10 	tst.w	lr, #16
   1ae0e:	d008      	beq.n	1ae22 <ext_adv_data_get+0x4e>
		*sec_phy = HCI_AUX_PHY_TO_HCI_PHY(aux_ptr->phy);
   1ae10:	f894 e002 	ldrb.w	lr, [r4, #2]
   1ae14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   1ae18:	f10e 0e01 	add.w	lr, lr, #1
   1ae1c:	f881 e000 	strb.w	lr, [r1]
		ptr += sizeof(*aux_ptr);
   1ae20:	3403      	adds	r4, #3
	if (h->sync_info) {
   1ae22:	f890 1023 	ldrb.w	r1, [r0, #35]	; 0x23
   1ae26:	f011 0f20 	tst.w	r1, #32
   1ae2a:	d000      	beq.n	1ae2e <ext_adv_data_get+0x5a>
		ptr += sizeof(struct pdu_adv_sync_info);
   1ae2c:	3412      	adds	r4, #18
	if (h->tx_pwr) {
   1ae2e:	f011 0f40 	tst.w	r1, #64	; 0x40
   1ae32:	d002      	beq.n	1ae3a <ext_adv_data_get+0x66>
		*tx_pwr = *(int8_t *)ptr;
   1ae34:	f914 1b01 	ldrsb.w	r1, [r4], #1
   1ae38:	7011      	strb	r1, [r2, #0]
	hdr_len = ptr - (uint8_t *)p;
   1ae3a:	eba4 020c 	sub.w	r2, r4, ip
   1ae3e:	b2d2      	uxtb	r2, r2
	hdr_buf_len = PDU_AC_EXT_HEADER_SIZE_MIN + p->ext_hdr_len;
   1ae40:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
   1ae44:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1ae48:	3101      	adds	r1, #1
	if (hdr_len < hdr_buf_len) {
   1ae4a:	428a      	cmp	r2, r1
   1ae4c:	d207      	bcs.n	1ae5e <ext_adv_data_get+0x8a>
		uint8_t acad_len = hdr_buf_len - hdr_len;
   1ae4e:	1a8a      	subs	r2, r1, r2
		ptr += acad_len;
   1ae50:	fa54 f482 	uxtab	r4, r4, r2
		hdr_len += acad_len;
   1ae54:	460a      	mov	r2, r1
   1ae56:	e002      	b.n	1ae5e <ext_adv_data_get+0x8a>
   1ae58:	f100 0423 	add.w	r4, r0, #35	; 0x23
		hdr_len = PDU_AC_EXT_HEADER_SIZE_MIN;
   1ae5c:	2201      	movs	r2, #1
	if (hdr_len < adv->len) {
   1ae5e:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
   1ae62:	4291      	cmp	r1, r2
   1ae64:	d801      	bhi.n	1ae6a <ext_adv_data_get+0x96>
	return 0;
   1ae66:	2000      	movs	r0, #0
}
   1ae68:	bd10      	pop	{r4, pc}
		*data = ptr;
   1ae6a:	601c      	str	r4, [r3, #0]
		return adv->len - hdr_len;
   1ae6c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
   1ae70:	1a80      	subs	r0, r0, r2
   1ae72:	b2c0      	uxtb	r0, r0
   1ae74:	e7f8      	b.n	1ae68 <ext_adv_data_get+0x94>

0001ae76 <adv_cmds_legacy_check>:
	if (cc_evt) {
   1ae76:	b140      	cbz	r0, 1ae8a <adv_cmds_legacy_check+0x14>
{
   1ae78:	b510      	push	{r4, lr}
   1ae7a:	4604      	mov	r4, r0
		*cc_evt = cmd_complete_status(BT_HCI_ERR_CMD_DISALLOWED);
   1ae7c:	200c      	movs	r0, #12
   1ae7e:	f7ec fda1 	bl	79c4 <cmd_complete_status>
   1ae82:	6020      	str	r0, [r4, #0]
}
   1ae84:	f06f 0015 	mvn.w	r0, #21
   1ae88:	bd10      	pop	{r4, pc}
   1ae8a:	f06f 0015 	mvn.w	r0, #21
   1ae8e:	4770      	bx	lr

0001ae90 <hci_evt_create>:
{
   1ae90:	b538      	push	{r3, r4, r5, lr}
   1ae92:	460d      	mov	r5, r1
   1ae94:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   1ae96:	2102      	movs	r1, #2
   1ae98:	3008      	adds	r0, #8
   1ae9a:	f001 ffa5 	bl	1cde8 <net_buf_simple_add>
	hdr->evt = evt;
   1ae9e:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
   1aea0:	7044      	strb	r4, [r0, #1]
}
   1aea2:	bd38      	pop	{r3, r4, r5, pc}

0001aea4 <meta_evt>:
{
   1aea4:	b570      	push	{r4, r5, r6, lr}
   1aea6:	4604      	mov	r4, r0
   1aea8:	460e      	mov	r6, r1
   1aeaa:	4615      	mov	r5, r2
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1aeac:	3201      	adds	r2, #1
   1aeae:	b2d2      	uxtb	r2, r2
   1aeb0:	213e      	movs	r1, #62	; 0x3e
   1aeb2:	f7ff ffed 	bl	1ae90 <hci_evt_create>
   1aeb6:	3408      	adds	r4, #8
   1aeb8:	2101      	movs	r1, #1
   1aeba:	4620      	mov	r0, r4
   1aebc:	f001 ff94 	bl	1cde8 <net_buf_simple_add>
	me->subevent = subevt;
   1aec0:	7006      	strb	r6, [r0, #0]
   1aec2:	4629      	mov	r1, r5
   1aec4:	4620      	mov	r0, r4
   1aec6:	f001 ff8f 	bl	1cde8 <net_buf_simple_add>
}
   1aeca:	bd70      	pop	{r4, r5, r6, pc}

0001aecc <dup_ext_adv_adi_store>:
{
   1aecc:	b500      	push	{lr}
	adv_set = &dup_mode->set[dup_mode->set_curr];
   1aece:	8803      	ldrh	r3, [r0, #0]
   1aed0:	f3c3 1344 	ubfx	r3, r3, #5, #5
			      1U : 0U;
   1aed4:	bb3a      	cbnz	r2, 1af26 <dup_ext_adv_adi_store+0x5a>
   1aed6:	f04f 0e01 	mov.w	lr, #1
	adv_set->data_cmplt = (data_status ==
   1aeda:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1aede:	4402      	add	r2, r0
   1aee0:	f892 c002 	ldrb.w	ip, [r2, #2]
   1aee4:	f36e 0c00 	bfi	ip, lr, #0, #1
   1aee8:	f882 c002 	strb.w	ip, [r2, #2]
	if (adi) {
   1aeec:	b1f1      	cbz	r1, 1af2c <dup_ext_adv_adi_store+0x60>
		(void)memcpy(&adv_set->adi, adi, sizeof(*adi));
   1aeee:	4613      	mov	r3, r2
   1aef0:	880a      	ldrh	r2, [r1, #0]
   1aef2:	f8a3 2003 	strh.w	r2, [r3, #3]
	if (dup_mode->set_count < CONFIG_BT_CTLR_DUP_FILTER_ADV_SET_MAX) {
   1aef6:	7803      	ldrb	r3, [r0, #0]
   1aef8:	f013 0f1f 	tst.w	r3, #31
   1aefc:	d11d      	bne.n	1af3a <dup_ext_adv_adi_store+0x6e>
		dup_mode->set_count++;
   1aefe:	461a      	mov	r2, r3
   1af00:	f003 031f 	and.w	r3, r3, #31
   1af04:	3301      	adds	r3, #1
   1af06:	f003 031f 	and.w	r3, r3, #31
   1af0a:	f363 0204 	bfi	r2, r3, #0, #5
   1af0e:	7002      	strb	r2, [r0, #0]
		dup_mode->set_curr = dup_mode->set_count;
   1af10:	8802      	ldrh	r2, [r0, #0]
   1af12:	f363 1249 	bfi	r2, r3, #5, #5
   1af16:	8002      	strh	r2, [r0, #0]
	if (dup_mode->set_curr == CONFIG_BT_CTLR_DUP_FILTER_ADV_SET_MAX) {
   1af18:	8803      	ldrh	r3, [r0, #0]
   1af1a:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
   1af1e:	2b20      	cmp	r3, #32
   1af20:	d013      	beq.n	1af4a <dup_ext_adv_adi_store+0x7e>
}
   1af22:	f85d fb04 	ldr.w	pc, [sp], #4
			      1U : 0U;
   1af26:	f04f 0e00 	mov.w	lr, #0
   1af2a:	e7d6      	b.n	1aeda <dup_ext_adv_adi_store+0xe>
		(void)memset(&adv_set->adi, 0U, sizeof(*adi));
   1af2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1af30:	4403      	add	r3, r0
__ssp_bos_icheck3(memset, void *, int)
   1af32:	2200      	movs	r2, #0
   1af34:	f8a3 2003 	strh.w	r2, [r3, #3]
   1af38:	e7dd      	b.n	1aef6 <dup_ext_adv_adi_store+0x2a>
		dup_mode->set_curr++;
   1af3a:	8803      	ldrh	r3, [r0, #0]
   1af3c:	f3c3 1244 	ubfx	r2, r3, #5, #5
   1af40:	3201      	adds	r2, #1
   1af42:	f362 1349 	bfi	r3, r2, #5, #5
   1af46:	8003      	strh	r3, [r0, #0]
   1af48:	e7e6      	b.n	1af18 <dup_ext_adv_adi_store+0x4c>
		dup_mode->set_curr = 0U;
   1af4a:	8803      	ldrh	r3, [r0, #0]
   1af4c:	f36f 1349 	bfc	r3, #5, #5
   1af50:	8003      	strh	r3, [r0, #0]
}
   1af52:	e7e6      	b.n	1af22 <dup_ext_adv_adi_store+0x56>

0001af54 <vs_write_bd_addr>:
{
   1af54:	b510      	push	{r4, lr}
   1af56:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   1af58:	6881      	ldr	r1, [r0, #8]
   1af5a:	2000      	movs	r0, #0
   1af5c:	f7ec fbd2 	bl	7704 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
   1af60:	2000      	movs	r0, #0
   1af62:	f7ec fd2f 	bl	79c4 <cmd_complete_status>
   1af66:	6020      	str	r0, [r4, #0]
}
   1af68:	bd10      	pop	{r4, pc}

0001af6a <le_set_random_address>:
{
   1af6a:	b510      	push	{r4, lr}
   1af6c:	460c      	mov	r4, r1
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1af6e:	6881      	ldr	r1, [r0, #8]
   1af70:	2001      	movs	r0, #1
   1af72:	f7ec fbc7 	bl	7704 <ll_addr_set>
	*evt = cmd_complete_status(status);
   1af76:	f7ec fd25 	bl	79c4 <cmd_complete_status>
   1af7a:	6020      	str	r0, [r4, #0]
}
   1af7c:	bd10      	pop	{r4, pc}

0001af7e <le_clear_fal>:
{
   1af7e:	b510      	push	{r4, lr}
   1af80:	460c      	mov	r4, r1
	status = ll_fal_clear();
   1af82:	f001 f990 	bl	1c2a6 <ll_fal_clear>
	*evt = cmd_complete_status(status);
   1af86:	f7ec fd1d 	bl	79c4 <cmd_complete_status>
   1af8a:	6020      	str	r0, [r4, #0]
}
   1af8c:	bd10      	pop	{r4, pc}

0001af8e <le_add_dev_to_fal>:
{
   1af8e:	b510      	push	{r4, lr}
   1af90:	460c      	mov	r4, r1
	status = ll_fal_add(&cmd->addr);
   1af92:	6880      	ldr	r0, [r0, #8]
   1af94:	f001 f9d8 	bl	1c348 <ll_fal_add>
	*evt = cmd_complete_status(status);
   1af98:	f7ec fd14 	bl	79c4 <cmd_complete_status>
   1af9c:	6020      	str	r0, [r4, #0]
}
   1af9e:	bd10      	pop	{r4, pc}

0001afa0 <le_rem_dev_from_fal>:
{
   1afa0:	b510      	push	{r4, lr}
   1afa2:	460c      	mov	r4, r1
	status = ll_fal_remove(&cmd->addr);
   1afa4:	6880      	ldr	r0, [r0, #8]
   1afa6:	f001 f98b 	bl	1c2c0 <ll_fal_remove>
	*evt = cmd_complete_status(status);
   1afaa:	f7ec fd0b 	bl	79c4 <cmd_complete_status>
   1afae:	6020      	str	r0, [r4, #0]
}
   1afb0:	bd10      	pop	{r4, pc}

0001afb2 <le_set_scan_param>:
{
   1afb2:	b530      	push	{r4, r5, lr}
   1afb4:	b083      	sub	sp, #12
   1afb6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   1afb8:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_legacy_check(evt)) {
   1afba:	4608      	mov	r0, r1
   1afbc:	f7ff ff5b 	bl	1ae76 <adv_cmds_legacy_check>
   1afc0:	b108      	cbz	r0, 1afc6 <le_set_scan_param+0x14>
}
   1afc2:	b003      	add	sp, #12
   1afc4:	bd30      	pop	{r4, r5, pc}
	interval = sys_le16_to_cpu(cmd->interval);
   1afc6:	f8b5 1001 	ldrh.w	r1, [r5, #1]
	window = sys_le16_to_cpu(cmd->window);
   1afca:	f8b5 2003 	ldrh.w	r2, [r5, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1afce:	796b      	ldrb	r3, [r5, #5]
   1afd0:	7828      	ldrb	r0, [r5, #0]
   1afd2:	79ad      	ldrb	r5, [r5, #6]
   1afd4:	9500      	str	r5, [sp, #0]
   1afd6:	f000 fe7a 	bl	1bcce <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   1afda:	f7ec fcf3 	bl	79c4 <cmd_complete_status>
   1afde:	6020      	str	r0, [r4, #0]
   1afe0:	e7ef      	b.n	1afc2 <le_set_scan_param+0x10>

0001afe2 <le_set_ext_scan_param>:
{
   1afe2:	b570      	push	{r4, r5, r6, lr}
   1afe4:	b082      	sub	sp, #8
   1afe6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_ext_scan_param *cmd = (void *)buf->data;
   1afe8:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
   1afea:	4608      	mov	r0, r1
   1afec:	f7ff fed7 	bl	1ad9e <adv_cmds_ext_check>
   1aff0:	b9b8      	cbnz	r0, 1b022 <le_set_ext_scan_param+0x40>
	phys = cmd->phys;
   1aff2:	78aa      	ldrb	r2, [r5, #2]
	own_addr_type = cmd->own_addr_type;
   1aff4:	782b      	ldrb	r3, [r5, #0]
	filter_policy = cmd->filter_policy;
   1aff6:	786e      	ldrb	r6, [r5, #1]
		if (phys & phy) {
   1aff8:	f012 0f01 	tst.w	r2, #1
   1affc:	d008      	beq.n	1b010 <le_set_ext_scan_param+0x2e>
			type |= (p->type & 0x01);
   1affe:	f995 0003 	ldrsb.w	r0, [r5, #3]
   1b002:	f000 0001 	and.w	r0, r0, #1
   1b006:	f040 0002 	orr.w	r0, r0, #2
			interval = sys_le16_to_cpu(p->interval);
   1b00a:	88a9      	ldrh	r1, [r5, #4]
			window = sys_le16_to_cpu(p->window);
   1b00c:	88ea      	ldrh	r2, [r5, #6]
			p++;
   1b00e:	e002      	b.n	1b016 <le_set_ext_scan_param+0x34>
		type = (phy << 1);
   1b010:	2002      	movs	r0, #2
			window = 0U;
   1b012:	2200      	movs	r2, #0
			interval = 0U;
   1b014:	4611      	mov	r1, r2
		status = ll_scan_params_set(type, interval, window,
   1b016:	9600      	str	r6, [sp, #0]
   1b018:	f000 fe59 	bl	1bcce <ll_scan_params_set>
	*evt = cmd_complete_status(status);
   1b01c:	f7ec fcd2 	bl	79c4 <cmd_complete_status>
   1b020:	6020      	str	r0, [r4, #0]
}
   1b022:	b002      	add	sp, #8
   1b024:	bd70      	pop	{r4, r5, r6, pc}

0001b026 <le_add_dev_to_pal>:
{
   1b026:	b538      	push	{r3, r4, r5, lr}
   1b028:	460c      	mov	r4, r1
	struct bt_hci_cp_le_add_dev_to_per_adv_list *cmd = (void *)buf->data;
   1b02a:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
   1b02c:	4608      	mov	r0, r1
   1b02e:	f7ff feb6 	bl	1ad9e <adv_cmds_ext_check>
   1b032:	b100      	cbz	r0, 1b036 <le_add_dev_to_pal+0x10>
}
   1b034:	bd38      	pop	{r3, r4, r5, pc}
	status = ll_pal_add(&cmd->addr, cmd->sid);
   1b036:	79e9      	ldrb	r1, [r5, #7]
   1b038:	4628      	mov	r0, r5
   1b03a:	f001 f999 	bl	1c370 <ll_pal_add>
	*evt = cmd_complete_status(status);
   1b03e:	f7ec fcc1 	bl	79c4 <cmd_complete_status>
   1b042:	6020      	str	r0, [r4, #0]
   1b044:	e7f6      	b.n	1b034 <le_add_dev_to_pal+0xe>

0001b046 <le_rem_dev_from_pal>:
{
   1b046:	b538      	push	{r3, r4, r5, lr}
   1b048:	460c      	mov	r4, r1
	struct bt_hci_cp_le_rem_dev_from_per_adv_list *cmd = (void *)buf->data;
   1b04a:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
   1b04c:	4608      	mov	r0, r1
   1b04e:	f7ff fea6 	bl	1ad9e <adv_cmds_ext_check>
   1b052:	b100      	cbz	r0, 1b056 <le_rem_dev_from_pal+0x10>
}
   1b054:	bd38      	pop	{r3, r4, r5, pc}
	status = ll_pal_remove(&cmd->addr, cmd->sid);
   1b056:	79e9      	ldrb	r1, [r5, #7]
   1b058:	4628      	mov	r0, r5
   1b05a:	f001 f959 	bl	1c310 <ll_pal_remove>
	*evt = cmd_complete_status(status);
   1b05e:	f7ec fcb1 	bl	79c4 <cmd_complete_status>
   1b062:	6020      	str	r0, [r4, #0]
   1b064:	e7f6      	b.n	1b054 <le_rem_dev_from_pal+0xe>

0001b066 <le_clear_pal>:
{
   1b066:	b510      	push	{r4, lr}
   1b068:	460c      	mov	r4, r1
	if (adv_cmds_ext_check(evt)) {
   1b06a:	4608      	mov	r0, r1
   1b06c:	f7ff fe97 	bl	1ad9e <adv_cmds_ext_check>
   1b070:	b100      	cbz	r0, 1b074 <le_clear_pal+0xe>
}
   1b072:	bd10      	pop	{r4, pc}
	status = ll_pal_clear();
   1b074:	f001 f947 	bl	1c306 <ll_pal_clear>
	*evt = cmd_complete_status(status);
   1b078:	f7ec fca4 	bl	79c4 <cmd_complete_status>
   1b07c:	6020      	str	r0, [r4, #0]
   1b07e:	e7f8      	b.n	1b072 <le_clear_pal+0xc>

0001b080 <le_add_dev_to_rl>:
{
   1b080:	b510      	push	{r4, lr}
   1b082:	460c      	mov	r4, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   1b084:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1b086:	f100 0217 	add.w	r2, r0, #23
   1b08a:	1dc1      	adds	r1, r0, #7
   1b08c:	f7f1 f856 	bl	c13c <ll_rl_add>
	*evt = cmd_complete_status(status);
   1b090:	f7ec fc98 	bl	79c4 <cmd_complete_status>
   1b094:	6020      	str	r0, [r4, #0]
}
   1b096:	bd10      	pop	{r4, pc}

0001b098 <le_rem_dev_from_rl>:
{
   1b098:	b510      	push	{r4, lr}
   1b09a:	460c      	mov	r4, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
   1b09c:	6880      	ldr	r0, [r0, #8]
   1b09e:	f7f1 f937 	bl	c310 <ll_rl_remove>
	*evt = cmd_complete_status(status);
   1b0a2:	f7ec fc8f 	bl	79c4 <cmd_complete_status>
   1b0a6:	6020      	str	r0, [r4, #0]
}
   1b0a8:	bd10      	pop	{r4, pc}

0001b0aa <le_clear_rl>:
{
   1b0aa:	b510      	push	{r4, lr}
   1b0ac:	460c      	mov	r4, r1
	status = ll_rl_clear();
   1b0ae:	f001 f91d 	bl	1c2ec <ll_rl_clear>
	*evt = cmd_complete_status(status);
   1b0b2:	f7ec fc87 	bl	79c4 <cmd_complete_status>
   1b0b6:	6020      	str	r0, [r4, #0]
}
   1b0b8:	bd10      	pop	{r4, pc}

0001b0ba <le_set_addr_res_enable>:
{
   1b0ba:	b510      	push	{r4, lr}
   1b0bc:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
   1b0be:	6883      	ldr	r3, [r0, #8]
	status = ll_rl_enable(cmd->enable);
   1b0c0:	7818      	ldrb	r0, [r3, #0]
   1b0c2:	f7f0 fd9d 	bl	bc00 <ll_rl_enable>
	*evt = cmd_complete_status(status);
   1b0c6:	f7ec fc7d 	bl	79c4 <cmd_complete_status>
   1b0ca:	6020      	str	r0, [r4, #0]
}
   1b0cc:	bd10      	pop	{r4, pc}

0001b0ce <le_set_rpa_timeout>:
{
   1b0ce:	b510      	push	{r4, lr}
   1b0d0:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
   1b0d2:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
   1b0d4:	8818      	ldrh	r0, [r3, #0]
   1b0d6:	f7f0 fdad 	bl	bc34 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
   1b0da:	2000      	movs	r0, #0
   1b0dc:	f7ec fc72 	bl	79c4 <cmd_complete_status>
   1b0e0:	6020      	str	r0, [r4, #0]
}
   1b0e2:	bd10      	pop	{r4, pc}

0001b0e4 <le_set_privacy_mode>:
{
   1b0e4:	b510      	push	{r4, lr}
   1b0e6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   1b0e8:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1b0ea:	79c1      	ldrb	r1, [r0, #7]
   1b0ec:	f7f1 fa0e 	bl	c50c <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
   1b0f0:	f7ec fc68 	bl	79c4 <cmd_complete_status>
   1b0f4:	6020      	str	r0, [r4, #0]
}
   1b0f6:	bd10      	pop	{r4, pc}

0001b0f8 <ext_adv_info_fill>:
{
   1b0f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0fc:	4605      	mov	r5, r0
   1b0fe:	460e      	mov	r6, r1
   1b100:	4690      	mov	r8, r2
   1b102:	469b      	mov	fp, r3
   1b104:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
   1b108:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   1b10c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
	sep = meta_evt(buf, BT_HCI_EVT_LE_EXT_ADVERTISING_REPORT,
   1b110:	f107 0219 	add.w	r2, r7, #25
   1b114:	b2d2      	uxtb	r2, r2
   1b116:	210d      	movs	r1, #13
   1b118:	9814      	ldr	r0, [sp, #80]	; 0x50
   1b11a:	f7ff fec3 	bl	1aea4 <meta_evt>
   1b11e:	4604      	mov	r4, r0
	sep->num_reports = 1U;
   1b120:	2301      	movs	r3, #1
   1b122:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = evt_type;
   1b124:	f8a0 5001 	strh.w	r5, [r0, #1]
	} else if (rl_idx < ll_rl_size_get()) {
   1b128:	f001 f8de 	bl	1c2e8 <ll_rl_size_get>
   1b12c:	4550      	cmp	r0, sl
   1b12e:	d83b      	bhi.n	1b1a8 <ext_adv_info_fill+0xb0>
	} else if (adv_addr) {
   1b130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b132:	2b00      	cmp	r3, #0
   1b134:	d041      	beq.n	1b1ba <ext_adv_info_fill+0xc2>
		adv_info->addr.type = adv_addr_type;
   1b136:	f884 b003 	strb.w	fp, [r4, #3]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b13a:	681b      	ldr	r3, [r3, #0]
   1b13c:	6063      	str	r3, [r4, #4]
   1b13e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b140:	889b      	ldrh	r3, [r3, #4]
   1b142:	8123      	strh	r3, [r4, #8]
   1b144:	fa96 f3a6 	rbit	r3, r6
   1b148:	fab3 f383 	clz	r3, r3
   1b14c:	b90e      	cbnz	r6, 1b152 <ext_adv_info_fill+0x5a>
   1b14e:	f04f 33ff 	mov.w	r3, #4294967295
   1b152:	3301      	adds	r3, #1
	adv_info->prim_phy = find_lsb_set(phy);
   1b154:	72a3      	strb	r3, [r4, #10]
	adv_info->sec_phy = sec_phy;
   1b156:	f884 800b 	strb.w	r8, [r4, #11]
	adv_info->sid = (adi) ? adi->sid : BT_HCI_LE_EXT_ADV_SID_INVALID;
   1b15a:	f1b9 0f00 	cmp.w	r9, #0
   1b15e:	d031      	beq.n	1b1c4 <ext_adv_info_fill+0xcc>
   1b160:	f899 3001 	ldrb.w	r3, [r9, #1]
   1b164:	091b      	lsrs	r3, r3, #4
   1b166:	7323      	strb	r3, [r4, #12]
	adv_info->tx_power = tx_pwr;
   1b168:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   1b16c:	7363      	strb	r3, [r4, #13]
	adv_info->rssi = rssi;
   1b16e:	f99d 303c 	ldrsb.w	r3, [sp, #60]	; 0x3c
   1b172:	73a3      	strb	r3, [r4, #14]
	adv_info->interval = interval_le16;
   1b174:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1b178:	f8a4 300f 	strh.w	r3, [r4, #15]
	if (evt_type & BT_HCI_LE_ADV_EVT_TYPE_DIRECT) {
   1b17c:	f015 0f04 	tst.w	r5, #4
   1b180:	d022      	beq.n	1b1c8 <ext_adv_info_fill+0xd0>
		adv_info->direct_addr.type = direct_addr_type;
   1b182:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b186:	7463      	strb	r3, [r4, #17]
   1b188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b18a:	681b      	ldr	r3, [r3, #0]
   1b18c:	f8c4 3012 	str.w	r3, [r4, #18]
   1b190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1b192:	889b      	ldrh	r3, [r3, #4]
   1b194:	82e3      	strh	r3, [r4, #22]
	adv_info->length = data_len;
   1b196:	7627      	strb	r7, [r4, #24]
   1b198:	463a      	mov	r2, r7
   1b19a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1b19c:	f104 0019 	add.w	r0, r4, #25
   1b1a0:	f7e6 f8ac 	bl	12fc <memcpy>
}
   1b1a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1b1a8:	1d22      	adds	r2, r4, #4
   1b1aa:	1ce1      	adds	r1, r4, #3
   1b1ac:	4650      	mov	r0, sl
   1b1ae:	f7f0 fce3 	bl	bb78 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   1b1b2:	78e3      	ldrb	r3, [r4, #3]
   1b1b4:	3302      	adds	r3, #2
   1b1b6:	70e3      	strb	r3, [r4, #3]
   1b1b8:	e7c4      	b.n	1b144 <ext_adv_info_fill+0x4c>
		adv_info->addr.type = 0U;
   1b1ba:	2200      	movs	r2, #0
   1b1bc:	70e2      	strb	r2, [r4, #3]
__ssp_bos_icheck3(memset, void *, int)
   1b1be:	6062      	str	r2, [r4, #4]
   1b1c0:	8122      	strh	r2, [r4, #8]
   1b1c2:	e7bf      	b.n	1b144 <ext_adv_info_fill+0x4c>
	adv_info->sid = (adi) ? adi->sid : BT_HCI_LE_EXT_ADV_SID_INVALID;
   1b1c4:	23ff      	movs	r3, #255	; 0xff
   1b1c6:	e7ce      	b.n	1b166 <ext_adv_info_fill+0x6e>
		adv_info->direct_addr.type = 0U;
   1b1c8:	2200      	movs	r2, #0
   1b1ca:	7462      	strb	r2, [r4, #17]
   1b1cc:	f8c4 2012 	str.w	r2, [r4, #18]
   1b1d0:	82e2      	strh	r2, [r4, #22]
   1b1d2:	e7e0      	b.n	1b196 <ext_adv_info_fill+0x9e>

0001b1d4 <ext_adv_direct_addr_type>:
	if (direct_report) {
   1b1d4:	bb02      	cbnz	r2, 1b218 <ext_adv_direct_addr_type+0x44>
	} else if (peer_resolved) {
   1b1d6:	b1c9      	cbz	r1, 1b20c <ext_adv_direct_addr_type+0x38>
{
   1b1d8:	b510      	push	{r4, lr}
		scan = HDR_LLL2ULL(lll);
   1b1da:	6804      	ldr	r4, [r0, #0]
		if ((rx_addr_type == lll->init_addr_type) &&
   1b1dc:	7902      	ldrb	r2, [r0, #4]
   1b1de:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1b1e2:	429a      	cmp	r2, r3
   1b1e4:	d006      	beq.n	1b1f4 <ext_adv_direct_addr_type+0x20>
		return scan->own_addr_type | BIT(1);
   1b1e6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1b1ea:	f3c0 0081 	ubfx	r0, r0, #2, #2
   1b1ee:	f040 0002 	orr.w	r0, r0, #2
}
   1b1f2:	bd10      	pop	{r4, pc}
		    !memcmp(lll->init_addr, rx_addr, BDADDR_SIZE)) {
   1b1f4:	2206      	movs	r2, #6
   1b1f6:	9902      	ldr	r1, [sp, #8]
   1b1f8:	3012      	adds	r0, #18
   1b1fa:	f7f9 fbc7 	bl	1498c <memcmp>
		if ((rx_addr_type == lll->init_addr_type) &&
   1b1fe:	2800      	cmp	r0, #0
   1b200:	d1f1      	bne.n	1b1e6 <ext_adv_direct_addr_type+0x12>
			return scan->own_addr_type;
   1b202:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1b206:	f3c0 0081 	ubfx	r0, r0, #2, #2
   1b20a:	e7f2      	b.n	1b1f2 <ext_adv_direct_addr_type+0x1e>
		scan = HDR_LLL2ULL(lll);
   1b20c:	6803      	ldr	r3, [r0, #0]
		return scan->own_addr_type;
   1b20e:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   1b212:	f3c0 0081 	ubfx	r0, r0, #2, #2
   1b216:	4770      	bx	lr
		return BT_ADDR_LE_UNRESOLVED;
   1b218:	20fe      	movs	r0, #254	; 0xfe
}
   1b21a:	4770      	bx	lr

0001b21c <ext_adv_data_frag>:
{
   1b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b220:	b095      	sub	sp, #84	; 0x54
   1b222:	4605      	mov	r5, r0
   1b224:	9210      	str	r2, [sp, #64]	; 0x40
   1b226:	461e      	mov	r6, r3
   1b228:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
   1b22c:	9311      	str	r3, [sp, #68]	; 0x44
   1b22e:	f89d b080 	ldrb.w	fp, [sp, #128]	; 0x80
   1b232:	f89d a088 	ldrb.w	sl, [sp, #136]	; 0x88
   1b236:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
   1b23a:	f99d 3090 	ldrsb.w	r3, [sp, #144]	; 0x90
   1b23e:	9312      	str	r3, [sp, #72]	; 0x48
   1b240:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
   1b244:	9313      	str	r3, [sp, #76]	; 0x4c
   1b246:	f89d 909c 	ldrb.w	r9, [sp, #156]	; 0x9c
   1b24a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
   1b24c:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
	evt_type |= (BT_HCI_LE_ADV_EVT_TYPE_DATA_STATUS_PARTIAL << 5);
   1b24e:	f041 0320 	orr.w	r3, r1, #32
   1b252:	930f      	str	r3, [sp, #60]	; 0x3c
   1b254:	e029      	b.n	1b2aa <ext_adv_data_frag+0x8e>
				ext_adv_pdu_frag(evt_type, phy, *sec_phy,
   1b256:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b258:	930d      	str	r3, [sp, #52]	; 0x34
   1b25a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1b25c:	930c      	str	r3, [sp, #48]	; 0x30
   1b25e:	970b      	str	r7, [sp, #44]	; 0x2c
   1b260:	940a      	str	r4, [sp, #40]	; 0x28
   1b262:	ab28      	add	r3, sp, #160	; 0xa0
   1b264:	9309      	str	r3, [sp, #36]	; 0x24
   1b266:	f8cd 9020 	str.w	r9, [sp, #32]
   1b26a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b26c:	9307      	str	r3, [sp, #28]
   1b26e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b270:	9306      	str	r3, [sp, #24]
   1b272:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b274:	9305      	str	r3, [sp, #20]
   1b276:	f998 3000 	ldrsb.w	r3, [r8]
   1b27a:	9304      	str	r3, [sp, #16]
   1b27c:	f8cd a00c 	str.w	sl, [sp, #12]
   1b280:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b282:	9302      	str	r3, [sp, #8]
   1b284:	f8cd b004 	str.w	fp, [sp, #4]
   1b288:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b28a:	9300      	str	r3, [sp, #0]
   1b28c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b28e:	7832      	ldrb	r2, [r6, #0]
   1b290:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b292:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1b294:	f7ed f874 	bl	8380 <ext_adv_pdu_frag>
   1b298:	e033      	b.n	1b302 <ext_adv_data_frag+0xe6>
	} while ((*data_len < data_len_total) || (*data_len > data_len_max));
   1b29a:	7823      	ldrb	r3, [r4, #0]
   1b29c:	b299      	uxth	r1, r3
   1b29e:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
   1b2a2:	4291      	cmp	r1, r2
   1b2a4:	d301      	bcc.n	1b2aa <ext_adv_data_frag+0x8e>
   1b2a6:	454b      	cmp	r3, r9
   1b2a8:	d939      	bls.n	1b31e <ext_adv_data_frag+0x102>
		ext_adv_pdu_frag(evt_type, phy, *sec_phy, adv_addr_type,
   1b2aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b2ac:	930d      	str	r3, [sp, #52]	; 0x34
   1b2ae:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1b2b0:	930c      	str	r3, [sp, #48]	; 0x30
   1b2b2:	970b      	str	r7, [sp, #44]	; 0x2c
   1b2b4:	940a      	str	r4, [sp, #40]	; 0x28
   1b2b6:	ab28      	add	r3, sp, #160	; 0xa0
   1b2b8:	9309      	str	r3, [sp, #36]	; 0x24
   1b2ba:	f8cd 9020 	str.w	r9, [sp, #32]
   1b2be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1b2c0:	9307      	str	r3, [sp, #28]
   1b2c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b2c4:	9306      	str	r3, [sp, #24]
   1b2c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1b2c8:	9305      	str	r3, [sp, #20]
   1b2ca:	f998 3000 	ldrsb.w	r3, [r8]
   1b2ce:	9304      	str	r3, [sp, #16]
   1b2d0:	f8cd a00c 	str.w	sl, [sp, #12]
   1b2d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1b2d6:	9302      	str	r3, [sp, #8]
   1b2d8:	f8cd b004 	str.w	fp, [sp, #4]
   1b2dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1b2de:	9300      	str	r3, [sp, #0]
   1b2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1b2e2:	7832      	ldrb	r2, [r6, #0]
   1b2e4:	9910      	ldr	r1, [sp, #64]	; 0x40
   1b2e6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1b2e8:	f7ed f84a 	bl	8380 <ext_adv_pdu_frag>
		node_rx_data = node_rx_data->hdr.rx_ftr.extra;
   1b2ec:	68ed      	ldr	r5, [r5, #12]
		if (node_rx_data) {
   1b2ee:	2d00      	cmp	r5, #0
   1b2f0:	d0d3      	beq.n	1b29a <ext_adv_data_frag+0x7e>
			if (*data_len >= data_len_total) {
   1b2f2:	7823      	ldrb	r3, [r4, #0]
   1b2f4:	b299      	uxth	r1, r3
   1b2f6:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
   1b2fa:	4291      	cmp	r1, r2
   1b2fc:	d20f      	bcs.n	1b31e <ext_adv_data_frag+0x102>
			} else if (*data_len) {
   1b2fe:	2b00      	cmp	r3, #0
   1b300:	d1a9      	bne.n	1b256 <ext_adv_data_frag+0x3a>
			*data_len = ext_adv_data_get(node_rx_data, sec_phy,
   1b302:	463b      	mov	r3, r7
   1b304:	4642      	mov	r2, r8
   1b306:	4631      	mov	r1, r6
   1b308:	4628      	mov	r0, r5
   1b30a:	f7ff fd63 	bl	1add4 <ext_adv_data_get>
   1b30e:	7020      	strb	r0, [r4, #0]
			if (*data_len > data_len_total) {
   1b310:	b280      	uxth	r0, r0
   1b312:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1b316:	4298      	cmp	r0, r3
   1b318:	d9bf      	bls.n	1b29a <ext_adv_data_frag+0x7e>
				*data_len = data_len_total;
   1b31a:	7023      	strb	r3, [r4, #0]
   1b31c:	e7bd      	b.n	1b29a <ext_adv_data_frag+0x7e>
}
   1b31e:	b015      	add	sp, #84	; 0x54
   1b320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b324 <node_rx_extra_list_release>:
	while (node_rx_extra) {
   1b324:	b168      	cbz	r0, 1b342 <node_rx_extra_list_release+0x1e>
{
   1b326:	b510      	push	{r4, lr}
   1b328:	b082      	sub	sp, #8
		node_rx_curr = node_rx_extra;
   1b32a:	9001      	str	r0, [sp, #4]
		node_rx_extra = node_rx_curr->hdr.rx_ftr.extra;
   1b32c:	68c4      	ldr	r4, [r0, #12]
		node_rx_curr->hdr.next = NULL;
   1b32e:	2300      	movs	r3, #0
   1b330:	6003      	str	r3, [r0, #0]
		ll_rx_mem_release((void **)&node_rx_curr);
   1b332:	a801      	add	r0, sp, #4
   1b334:	f7ee f884 	bl	9440 <ll_rx_mem_release>
		node_rx_extra = node_rx_curr->hdr.rx_ftr.extra;
   1b338:	4620      	mov	r0, r4
	while (node_rx_extra) {
   1b33a:	2c00      	cmp	r4, #0
   1b33c:	d1f5      	bne.n	1b32a <node_rx_extra_list_release+0x6>
}
   1b33e:	b002      	add	sp, #8
   1b340:	bd10      	pop	{r4, pc}
   1b342:	4770      	bx	lr

0001b344 <le_adv_ext_report>:
{
   1b344:	b510      	push	{r4, lr}
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
   1b346:	f890 c000 	ldrb.w	ip, [r0]
   1b34a:	f00c 0c0f 	and.w	ip, ip, #15
   1b34e:	f1bc 0f07 	cmp.w	ip, #7
   1b352:	d101      	bne.n	1b358 <le_adv_ext_report+0x14>
   1b354:	7844      	ldrb	r4, [r0, #1]
   1b356:	b914      	cbnz	r4, 1b35e <le_adv_ext_report+0x1a>
		le_ext_adv_legacy_report(pdu_data, node_rx, buf);
   1b358:	f7ec febe 	bl	80d8 <le_ext_adv_legacy_report>
}
   1b35c:	bd10      	pop	{r4, pc}
		le_ext_adv_report(pdu_data, node_rx, buf, phy);
   1b35e:	f7ed f87d 	bl	845c <le_ext_adv_report>
   1b362:	e7fb      	b.n	1b35c <le_adv_ext_report+0x18>

0001b364 <le_adv_ext_1M_report>:
{
   1b364:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, node_rx, buf, BT_HCI_LE_EXT_SCAN_PHY_1M);
   1b366:	2301      	movs	r3, #1
   1b368:	f7ff ffec 	bl	1b344 <le_adv_ext_report>
}
   1b36c:	bd08      	pop	{r3, pc}

0001b36e <le_adv_ext_2M_report>:
{
   1b36e:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, node_rx, buf, BT_HCI_LE_EXT_SCAN_PHY_2M);
   1b370:	2302      	movs	r3, #2
   1b372:	f7ff ffe7 	bl	1b344 <le_adv_ext_report>
}
   1b376:	bd08      	pop	{r3, pc}

0001b378 <le_adv_ext_coded_report>:
{
   1b378:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, node_rx, buf, BT_HCI_LE_EXT_SCAN_PHY_CODED);
   1b37a:	2304      	movs	r3, #4
   1b37c:	f7ff ffe2 	bl	1b344 <le_adv_ext_report>
}
   1b380:	bd08      	pop	{r3, pc}

0001b382 <ctrl_bb_cmd_handle>:
{
   1b382:	b508      	push	{r3, lr}
   1b384:	4603      	mov	r3, r0
   1b386:	4608      	mov	r0, r1
   1b388:	4611      	mov	r1, r2
	switch (ocf) {
   1b38a:	2b03      	cmp	r3, #3
   1b38c:	d00a      	beq.n	1b3a4 <ctrl_bb_cmd_handle+0x22>
   1b38e:	2b63      	cmp	r3, #99	; 0x63
   1b390:	d00c      	beq.n	1b3ac <ctrl_bb_cmd_handle+0x2a>
   1b392:	2b01      	cmp	r3, #1
   1b394:	d002      	beq.n	1b39c <ctrl_bb_cmd_handle+0x1a>
   1b396:	f06f 0015 	mvn.w	r0, #21
}
   1b39a:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
   1b39c:	f7ed fe06 	bl	8fac <set_event_mask>
	return 0;
   1b3a0:	2000      	movs	r0, #0
		break;
   1b3a2:	e7fa      	b.n	1b39a <ctrl_bb_cmd_handle+0x18>
		reset(cmd, evt);
   1b3a4:	f7ec fb72 	bl	7a8c <reset>
	return 0;
   1b3a8:	2000      	movs	r0, #0
		break;
   1b3aa:	e7f6      	b.n	1b39a <ctrl_bb_cmd_handle+0x18>
		set_event_mask_page_2(cmd, evt);
   1b3ac:	f7ec fb1c 	bl	79e8 <set_event_mask_page_2>
	return 0;
   1b3b0:	2000      	movs	r0, #0
		break;
   1b3b2:	e7f2      	b.n	1b39a <ctrl_bb_cmd_handle+0x18>

0001b3b4 <vs_read_version_info>:
{
   1b3b4:	b508      	push	{r3, lr}
   1b3b6:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b3b8:	210d      	movs	r1, #13
   1b3ba:	f7ed fe19 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b3be:	2300      	movs	r3, #0
   1b3c0:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   1b3c2:	2202      	movs	r2, #2
   1b3c4:	7042      	strb	r2, [r0, #1]
   1b3c6:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   1b3c8:	70c2      	strb	r2, [r0, #3]
   1b3ca:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0U;
   1b3cc:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1b3ce:	2203      	movs	r2, #3
   1b3d0:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1b3d2:	71c3      	strb	r3, [r0, #7]
   1b3d4:	7203      	strb	r3, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1b3d6:	2263      	movs	r2, #99	; 0x63
   1b3d8:	7242      	strb	r2, [r0, #9]
   1b3da:	7283      	strb	r3, [r0, #10]
   1b3dc:	72c3      	strb	r3, [r0, #11]
   1b3de:	7303      	strb	r3, [r0, #12]
}
   1b3e0:	bd08      	pop	{r3, pc}

0001b3e2 <vs_read_supported_commands>:
{
   1b3e2:	b510      	push	{r4, lr}
   1b3e4:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b3e6:	2141      	movs	r1, #65	; 0x41
   1b3e8:	f7ed fe02 	bl	8ff0 <hci_cmd_complete>
   1b3ec:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b3ee:	2100      	movs	r1, #0
   1b3f0:	f800 1b01 	strb.w	r1, [r0], #1
   1b3f4:	2240      	movs	r2, #64	; 0x40
   1b3f6:	f7f9 fafd 	bl	149f4 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
   1b3fa:	7863      	ldrb	r3, [r4, #1]
   1b3fc:	f043 0307 	orr.w	r3, r3, #7
   1b400:	7063      	strb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
   1b402:	f063 035f 	orn	r3, r3, #95	; 0x5f
   1b406:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   1b408:	78a3      	ldrb	r3, [r4, #2]
   1b40a:	f043 0303 	orr.w	r3, r3, #3
   1b40e:	70a3      	strb	r3, [r4, #2]
}
   1b410:	bd10      	pop	{r4, pc}

0001b412 <vs_read_supported_features>:
{
   1b412:	b508      	push	{r3, lr}
   1b414:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b416:	2109      	movs	r1, #9
   1b418:	f7ed fdea 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b41c:	2200      	movs	r2, #0
   1b41e:	4603      	mov	r3, r0
   1b420:	f803 2b01 	strb.w	r2, [r3], #1
   1b424:	f8c0 2001 	str.w	r2, [r0, #1]
   1b428:	605a      	str	r2, [r3, #4]
}
   1b42a:	bd08      	pop	{r3, pc}

0001b42c <read_local_version_info>:
{
   1b42c:	b508      	push	{r3, lr}
   1b42e:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b430:	2109      	movs	r1, #9
   1b432:	f7ed fddd 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b436:	2300      	movs	r3, #0
   1b438:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1b43a:	220c      	movs	r2, #12
   1b43c:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
   1b43e:	7083      	strb	r3, [r0, #2]
   1b440:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = LL_VERSION_NUMBER;
   1b442:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1b444:	f06f 030e 	mvn.w	r3, #14
   1b448:	7143      	strb	r3, [r0, #5]
   1b44a:	2305      	movs	r3, #5
   1b44c:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1b44e:	f04f 33ff 	mov.w	r3, #4294967295
   1b452:	71c3      	strb	r3, [r0, #7]
   1b454:	7203      	strb	r3, [r0, #8]
}
   1b456:	bd08      	pop	{r3, pc}

0001b458 <read_supported_commands>:
{
   1b458:	b510      	push	{r4, lr}
   1b45a:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b45c:	2141      	movs	r1, #65	; 0x41
   1b45e:	f7ed fdc7 	bl	8ff0 <hci_cmd_complete>
   1b462:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b464:	2100      	movs	r1, #0
   1b466:	f800 1b01 	strb.w	r1, [r0], #1
   1b46a:	2240      	movs	r2, #64	; 0x40
   1b46c:	f7f9 fac2 	bl	149f4 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   1b470:	79a3      	ldrb	r3, [r4, #6]
   1b472:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1b476:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
   1b478:	7ae3      	ldrb	r3, [r4, #11]
   1b47a:	f043 0304 	orr.w	r3, r3, #4
   1b47e:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1b480:	7be3      	ldrb	r3, [r4, #15]
   1b482:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1b486:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
   1b488:	7c23      	ldrb	r3, [r4, #16]
   1b48a:	f043 0302 	orr.w	r3, r3, #2
   1b48e:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
   1b490:	7de3      	ldrb	r3, [r4, #23]
   1b492:	f043 0304 	orr.w	r3, r3, #4
   1b496:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
   1b498:	7ea3      	ldrb	r3, [r4, #26]
   1b49a:	f043 0317 	orr.w	r3, r3, #23
   1b49e:	76a3      	strb	r3, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
   1b4a0:	7ee3      	ldrb	r3, [r4, #27]
   1b4a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   1b4a6:	76e3      	strb	r3, [r4, #27]
	rp->commands[27] |= BIT(0) | BIT(1);
   1b4a8:	7f22      	ldrb	r2, [r4, #28]
   1b4aa:	f042 0203 	orr.w	r2, r2, #3
   1b4ae:	7722      	strb	r2, [r4, #28]
	rp->commands[27] |= BIT(6) | BIT(7);
   1b4b0:	f062 023f 	orn	r2, r2, #63	; 0x3f
   1b4b4:	7722      	strb	r2, [r4, #28]
	rp->commands[28] |= BIT(3);
   1b4b6:	7f62      	ldrb	r2, [r4, #29]
   1b4b8:	f042 0208 	orr.w	r2, r2, #8
   1b4bc:	7762      	strb	r2, [r4, #29]
	rp->commands[26] |= BIT(2) | BIT(3);
   1b4be:	f043 030c 	orr.w	r3, r3, #12
   1b4c2:	76e3      	strb	r3, [r4, #27]
	rp->commands[37] |= BIT(5) | BIT(6);
   1b4c4:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   1b4c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1b4cc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	rp->commands[38] |= BIT(0) | BIT(1) | BIT(2);
   1b4d0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1b4d4:	f043 0307 	orr.w	r3, r3, #7
   1b4d8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	rp->commands[38] |= BIT(3) | BIT(4) | BIT(5) | BIT(6);
   1b4dc:	f043 0378 	orr.w	r3, r3, #120	; 0x78
   1b4e0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	rp->commands[40] |= BIT(5);
   1b4e4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1b4e8:	f043 0320 	orr.w	r3, r3, #32
   1b4ec:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1b4f0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1b4f4:	f062 0207 	orn	r2, r2, #7
   1b4f8:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1b4fc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1b500:	f042 0207 	orr.w	r2, r2, #7
   1b504:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1b508:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
   1b50c:	f042 0204 	orr.w	r2, r2, #4
   1b510:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[39] |= BIT(7);
   1b514:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1b518:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[40] |= BIT(4);
   1b51c:	f043 0310 	orr.w	r3, r3, #16
   1b520:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	rp->commands[38] |= BIT(7);
   1b524:	23ff      	movs	r3, #255	; 0xff
   1b526:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   1b52a:	bd10      	pop	{r4, pc}

0001b52c <read_local_features>:
{
   1b52c:	b508      	push	{r3, lr}
   1b52e:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b530:	2109      	movs	r1, #9
   1b532:	f7ed fd5d 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b536:	2200      	movs	r2, #0
   1b538:	4603      	mov	r3, r0
   1b53a:	f803 2b01 	strb.w	r2, [r3], #1
   1b53e:	f8c0 2001 	str.w	r2, [r0, #1]
   1b542:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   1b544:	2360      	movs	r3, #96	; 0x60
   1b546:	7143      	strb	r3, [r0, #5]
}
   1b548:	bd08      	pop	{r3, pc}

0001b54a <read_bd_addr>:
{
   1b54a:	b508      	push	{r3, lr}
   1b54c:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b54e:	2107      	movs	r1, #7
   1b550:	f7ed fd4e 	bl	8ff0 <hci_cmd_complete>
   1b554:	4601      	mov	r1, r0
	rp->status = 0x00;
   1b556:	2000      	movs	r0, #0
   1b558:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   1b55c:	f7ff fbf5 	bl	1ad4a <ll_addr_read>
}
   1b560:	bd08      	pop	{r3, pc}

0001b562 <info_cmd_handle>:
{
   1b562:	b508      	push	{r3, lr}
   1b564:	468c      	mov	ip, r1
   1b566:	4611      	mov	r1, r2
	switch (ocf) {
   1b568:	1e43      	subs	r3, r0, #1
   1b56a:	2b08      	cmp	r3, #8
   1b56c:	d81a      	bhi.n	1b5a4 <info_cmd_handle+0x42>
   1b56e:	e8df f003 	tbb	[pc, r3]
   1b572:	0a05      	.short	0x0a05
   1b574:	1919190f 	.word	0x1919190f
   1b578:	1919      	.short	0x1919
   1b57a:	14          	.byte	0x14
   1b57b:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
   1b57c:	4660      	mov	r0, ip
   1b57e:	f7ff ff55 	bl	1b42c <read_local_version_info>
	return 0;
   1b582:	2000      	movs	r0, #0
		break;
   1b584:	e010      	b.n	1b5a8 <info_cmd_handle+0x46>
		read_supported_commands(cmd, evt);
   1b586:	4660      	mov	r0, ip
   1b588:	f7ff ff66 	bl	1b458 <read_supported_commands>
	return 0;
   1b58c:	2000      	movs	r0, #0
		break;
   1b58e:	e00b      	b.n	1b5a8 <info_cmd_handle+0x46>
		read_local_features(cmd, evt);
   1b590:	4660      	mov	r0, ip
   1b592:	f7ff ffcb 	bl	1b52c <read_local_features>
	return 0;
   1b596:	2000      	movs	r0, #0
		break;
   1b598:	e006      	b.n	1b5a8 <info_cmd_handle+0x46>
		read_bd_addr(cmd, evt);
   1b59a:	4660      	mov	r0, ip
   1b59c:	f7ff ffd5 	bl	1b54a <read_bd_addr>
	return 0;
   1b5a0:	2000      	movs	r0, #0
		break;
   1b5a2:	e001      	b.n	1b5a8 <info_cmd_handle+0x46>
	switch (ocf) {
   1b5a4:	f06f 0015 	mvn.w	r0, #21
}
   1b5a8:	bd08      	pop	{r3, pc}

0001b5aa <le_read_buffer_size>:
{
   1b5aa:	b508      	push	{r3, lr}
   1b5ac:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b5ae:	2104      	movs	r1, #4
   1b5b0:	f7ed fd1e 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b5b4:	2300      	movs	r3, #0
   1b5b6:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1b5b8:	221b      	movs	r2, #27
   1b5ba:	7042      	strb	r2, [r0, #1]
   1b5bc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1b5be:	2303      	movs	r3, #3
   1b5c0:	70c3      	strb	r3, [r0, #3]
}
   1b5c2:	bd08      	pop	{r3, pc}

0001b5c4 <le_read_local_features>:
{
   1b5c4:	b538      	push	{r3, r4, r5, lr}
   1b5c6:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b5c8:	2109      	movs	r1, #9
   1b5ca:	f7ed fd11 	bl	8ff0 <hci_cmd_complete>
   1b5ce:	4605      	mov	r5, r0
	rp->status = 0x00;
   1b5d0:	2300      	movs	r3, #0
   1b5d2:	4604      	mov	r4, r0
   1b5d4:	f804 3b01 	strb.w	r3, [r4], #1
   1b5d8:	f8c0 3001 	str.w	r3, [r0, #1]
   1b5dc:	6063      	str	r3, [r4, #4]
	sys_put_le64(ll_feat_get(), rp->features);
   1b5de:	f7e6 f8bb 	bl	1758 <ll_feat_get>
	dst[0] = val;
   1b5e2:	7068      	strb	r0, [r5, #1]
	dst[1] = val >> 8;
   1b5e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
   1b5e8:	7063      	strb	r3, [r4, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1b5ea:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   1b5ec:	70a3      	strb	r3, [r4, #2]
	dst[1] = val >> 8;
   1b5ee:	0e00      	lsrs	r0, r0, #24
   1b5f0:	70e0      	strb	r0, [r4, #3]
	dst[0] = val;
   1b5f2:	7121      	strb	r1, [r4, #4]
	dst[1] = val >> 8;
   1b5f4:	f3c1 2307 	ubfx	r3, r1, #8, #8
   1b5f8:	7163      	strb	r3, [r4, #5]
	sys_put_le16(val >> 16, &dst[2]);
   1b5fa:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   1b5fc:	71a3      	strb	r3, [r4, #6]
	dst[1] = val >> 8;
   1b5fe:	0e09      	lsrs	r1, r1, #24
   1b600:	71e1      	strb	r1, [r4, #7]
}
   1b602:	bd38      	pop	{r3, r4, r5, pc}

0001b604 <le_read_fal_size>:
{
   1b604:	b510      	push	{r4, lr}
   1b606:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b608:	2102      	movs	r1, #2
   1b60a:	f7ed fcf1 	bl	8ff0 <hci_cmd_complete>
   1b60e:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b610:	2300      	movs	r3, #0
   1b612:	7003      	strb	r3, [r0, #0]
	rp->fal_size = ll_fal_size_get();
   1b614:	f000 fe45 	bl	1c2a2 <ll_fal_size_get>
   1b618:	7060      	strb	r0, [r4, #1]
}
   1b61a:	bd10      	pop	{r4, pc}

0001b61c <le_encrypt>:
{
   1b61c:	b510      	push	{r4, lr}
   1b61e:	b084      	sub	sp, #16
   1b620:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   1b622:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1b624:	2300      	movs	r3, #0
   1b626:	466a      	mov	r2, sp
   1b628:	f100 0110 	add.w	r1, r0, #16
   1b62c:	f001 f945 	bl	1c8ba <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b630:	2111      	movs	r1, #17
   1b632:	4620      	mov	r0, r4
   1b634:	f7ed fcdc 	bl	8ff0 <hci_cmd_complete>
   1b638:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b63a:	4686      	mov	lr, r0
   1b63c:	2300      	movs	r3, #0
   1b63e:	f80e 3b01 	strb.w	r3, [lr], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1b642:	46ec      	mov	ip, sp
   1b644:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1b648:	f8c4 0001 	str.w	r0, [r4, #1]
   1b64c:	f8ce 1004 	str.w	r1, [lr, #4]
   1b650:	f8ce 2008 	str.w	r2, [lr, #8]
   1b654:	f8ce 300c 	str.w	r3, [lr, #12]
}
   1b658:	b004      	add	sp, #16
   1b65a:	bd10      	pop	{r4, pc}

0001b65c <le_rand>:
{
   1b65c:	b508      	push	{r3, lr}
   1b65e:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b660:	2109      	movs	r1, #9
   1b662:	f7ed fcc5 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b666:	2300      	movs	r3, #0
   1b668:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1b66c:	2108      	movs	r1, #8
   1b66e:	f7f1 fc2b 	bl	cec8 <lll_csrand_get>
}
   1b672:	bd08      	pop	{r3, pc}

0001b674 <le_read_supp_states>:
{
   1b674:	b508      	push	{r3, lr}
   1b676:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b678:	2109      	movs	r1, #9
   1b67a:	f7ed fcb9 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b67e:	2200      	movs	r2, #0
   1b680:	4603      	mov	r3, r0
   1b682:	f803 2b01 	strb.w	r2, [r3], #1
	dst[0] = val;
   1b686:	2130      	movs	r1, #48	; 0x30
   1b688:	7041      	strb	r1, [r0, #1]
	dst[1] = val >> 8;
   1b68a:	2133      	movs	r1, #51	; 0x33
   1b68c:	7059      	strb	r1, [r3, #1]
	dst[0] = val;
   1b68e:	709a      	strb	r2, [r3, #2]
	dst[1] = val >> 8;
   1b690:	70da      	strb	r2, [r3, #3]
	dst[0] = val;
   1b692:	711a      	strb	r2, [r3, #4]
	dst[1] = val >> 8;
   1b694:	715a      	strb	r2, [r3, #5]
	dst[0] = val;
   1b696:	719a      	strb	r2, [r3, #6]
	dst[1] = val >> 8;
   1b698:	71da      	strb	r2, [r3, #7]
}
   1b69a:	bd08      	pop	{r3, pc}

0001b69c <le_per_adv_create_sync_cancel>:
{
   1b69c:	b538      	push	{r3, r4, r5, lr}
   1b69e:	460c      	mov	r4, r1
   1b6a0:	4615      	mov	r5, r2
	if (adv_cmds_ext_check(evt)) {
   1b6a2:	4608      	mov	r0, r1
   1b6a4:	f7ff fb7b 	bl	1ad9e <adv_cmds_ext_check>
   1b6a8:	b100      	cbz	r0, 1b6ac <le_per_adv_create_sync_cancel+0x10>
}
   1b6aa:	bd38      	pop	{r3, r4, r5, pc}
	status = ll_sync_create_cancel(node_rx);
   1b6ac:	4628      	mov	r0, r5
   1b6ae:	f000 fcd2 	bl	1c056 <ll_sync_create_cancel>
   1b6b2:	4605      	mov	r5, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1b6b4:	2101      	movs	r1, #1
   1b6b6:	4620      	mov	r0, r4
   1b6b8:	f7ed fc9a 	bl	8ff0 <hci_cmd_complete>
	ccst->status = status;
   1b6bc:	7005      	strb	r5, [r0, #0]
   1b6be:	e7f4      	b.n	1b6aa <le_per_adv_create_sync_cancel+0xe>

0001b6c0 <le_per_adv_terminate_sync>:
{
   1b6c0:	b538      	push	{r3, r4, r5, lr}
   1b6c2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_per_adv_terminate_sync *cmd = (void *)buf->data;
   1b6c4:	6885      	ldr	r5, [r0, #8]
	if (adv_cmds_ext_check(evt)) {
   1b6c6:	4608      	mov	r0, r1
   1b6c8:	f7ff fb69 	bl	1ad9e <adv_cmds_ext_check>
   1b6cc:	b100      	cbz	r0, 1b6d0 <le_per_adv_terminate_sync+0x10>
}
   1b6ce:	bd38      	pop	{r3, r4, r5, pc}
	status = ll_sync_terminate(handle);
   1b6d0:	8828      	ldrh	r0, [r5, #0]
   1b6d2:	f7ef fd2d 	bl	b130 <ll_sync_terminate>
   1b6d6:	4605      	mov	r5, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1b6d8:	2101      	movs	r1, #1
   1b6da:	4620      	mov	r0, r4
   1b6dc:	f7ed fc88 	bl	8ff0 <hci_cmd_complete>
	ccst->status = status;
   1b6e0:	7005      	strb	r5, [r0, #0]
   1b6e2:	e7f4      	b.n	1b6ce <le_per_adv_terminate_sync+0xe>

0001b6e4 <le_read_pal_size>:
{
   1b6e4:	b510      	push	{r4, lr}
   1b6e6:	460c      	mov	r4, r1
	if (adv_cmds_ext_check(evt)) {
   1b6e8:	4608      	mov	r0, r1
   1b6ea:	f7ff fb58 	bl	1ad9e <adv_cmds_ext_check>
   1b6ee:	b100      	cbz	r0, 1b6f2 <le_read_pal_size+0xe>
}
   1b6f0:	bd10      	pop	{r4, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b6f2:	2102      	movs	r1, #2
   1b6f4:	4620      	mov	r0, r4
   1b6f6:	f7ed fc7b 	bl	8ff0 <hci_cmd_complete>
   1b6fa:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b6fc:	2300      	movs	r3, #0
   1b6fe:	7003      	strb	r3, [r0, #0]
	rp->list_size = ll_pal_size_get();
   1b700:	f000 fdff 	bl	1c302 <ll_pal_size_get>
   1b704:	7060      	strb	r0, [r4, #1]
   1b706:	e7f3      	b.n	1b6f0 <le_read_pal_size+0xc>

0001b708 <le_read_rl_size>:
{
   1b708:	b510      	push	{r4, lr}
   1b70a:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b70c:	2102      	movs	r1, #2
   1b70e:	f7ed fc6f 	bl	8ff0 <hci_cmd_complete>
   1b712:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1b714:	f000 fde8 	bl	1c2e8 <ll_rl_size_get>
   1b718:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   1b71a:	2300      	movs	r3, #0
   1b71c:	7023      	strb	r3, [r4, #0]
}
   1b71e:	bd10      	pop	{r4, pc}

0001b720 <le_read_peer_rpa>:
{
   1b720:	b510      	push	{r4, lr}
   1b722:	b082      	sub	sp, #8
   1b724:	460a      	mov	r2, r1
	struct bt_hci_cp_le_read_peer_rpa *cmd = (void *)buf->data;
   1b726:	6883      	ldr	r3, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1b728:	6818      	ldr	r0, [r3, #0]
   1b72a:	9000      	str	r0, [sp, #0]
   1b72c:	8899      	ldrh	r1, [r3, #4]
   1b72e:	799b      	ldrb	r3, [r3, #6]
   1b730:	f8ad 1004 	strh.w	r1, [sp, #4]
   1b734:	f88d 3006 	strb.w	r3, [sp, #6]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b738:	2107      	movs	r1, #7
   1b73a:	4610      	mov	r0, r2
   1b73c:	f7ed fc58 	bl	8ff0 <hci_cmd_complete>
   1b740:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1b742:	1c41      	adds	r1, r0, #1
   1b744:	4668      	mov	r0, sp
   1b746:	f7f0 fe9f 	bl	c488 <ll_rl_crpa_get>
   1b74a:	7020      	strb	r0, [r4, #0]
}
   1b74c:	b002      	add	sp, #8
   1b74e:	bd10      	pop	{r4, pc}

0001b750 <le_read_local_rpa>:
{
   1b750:	b510      	push	{r4, lr}
   1b752:	b082      	sub	sp, #8
   1b754:	460a      	mov	r2, r1
	struct bt_hci_cp_le_read_local_rpa *cmd = (void *)buf->data;
   1b756:	6883      	ldr	r3, [r0, #8]
   1b758:	6818      	ldr	r0, [r3, #0]
   1b75a:	9000      	str	r0, [sp, #0]
   1b75c:	8899      	ldrh	r1, [r3, #4]
   1b75e:	799b      	ldrb	r3, [r3, #6]
   1b760:	f8ad 1004 	strh.w	r1, [sp, #4]
   1b764:	f88d 3006 	strb.w	r3, [sp, #6]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b768:	2107      	movs	r1, #7
   1b76a:	4610      	mov	r0, r2
   1b76c:	f7ed fc40 	bl	8ff0 <hci_cmd_complete>
   1b770:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1b772:	1c41      	adds	r1, r0, #1
   1b774:	4668      	mov	r0, sp
   1b776:	f7f0 feaf 	bl	c4d8 <ll_rl_lrpa_get>
   1b77a:	7020      	strb	r0, [r4, #0]
}
   1b77c:	b002      	add	sp, #8
   1b77e:	bd10      	pop	{r4, pc}

0001b780 <le_read_tx_power>:
{
   1b780:	b508      	push	{r3, lr}
   1b782:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b784:	2103      	movs	r1, #3
   1b786:	f7ed fc33 	bl	8ff0 <hci_cmd_complete>
	rp->status = 0x00;
   1b78a:	4601      	mov	r1, r0
   1b78c:	2300      	movs	r3, #0
   1b78e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1b792:	3001      	adds	r0, #1
   1b794:	f7ff fae5 	bl	1ad62 <ll_tx_pwr_get>
}
   1b798:	bd08      	pop	{r3, pc}

0001b79a <le_df_set_cl_iq_sampling_enable>:
{
   1b79a:	b570      	push	{r4, r5, r6, lr}
   1b79c:	b082      	sub	sp, #8
   1b79e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_cl_cte_sampling_enable *cmd = (void *)buf->data;
   1b7a0:	6884      	ldr	r4, [r0, #8]
	sync_handle = sys_le16_to_cpu(cmd->sync_handle);
   1b7a2:	4620      	mov	r0, r4
   1b7a4:	f830 6b06 	ldrh.w	r6, [r0], #6
	status = ll_df_set_cl_iq_sampling_enable(sync_handle,
   1b7a8:	7923      	ldrb	r3, [r4, #4]
   1b7aa:	78e2      	ldrb	r2, [r4, #3]
   1b7ac:	78a1      	ldrb	r1, [r4, #2]
   1b7ae:	9001      	str	r0, [sp, #4]
   1b7b0:	7960      	ldrb	r0, [r4, #5]
   1b7b2:	9000      	str	r0, [sp, #0]
   1b7b4:	b2b0      	uxth	r0, r6
   1b7b6:	f7ef fe67 	bl	b488 <ll_df_set_cl_iq_sampling_enable>
   1b7ba:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b7bc:	2103      	movs	r1, #3
   1b7be:	4628      	mov	r0, r5
   1b7c0:	f7ed fc16 	bl	8ff0 <hci_cmd_complete>
	rp->status = status;
   1b7c4:	7004      	strb	r4, [r0, #0]
	rp->sync_handle = sys_cpu_to_le16(sync_handle);
   1b7c6:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   1b7ca:	b002      	add	sp, #8
   1b7cc:	bd70      	pop	{r4, r5, r6, pc}

0001b7ce <le_df_read_ant_inf>:
{
   1b7ce:	b510      	push	{r4, lr}
   1b7d0:	b082      	sub	sp, #8
   1b7d2:	460c      	mov	r4, r1
	ll_df_read_ant_inf(&switch_sample_rates, &num_ant,
   1b7d4:	f10d 0305 	add.w	r3, sp, #5
   1b7d8:	f10d 0207 	add.w	r2, sp, #7
   1b7dc:	a901      	add	r1, sp, #4
   1b7de:	f10d 0006 	add.w	r0, sp, #6
   1b7e2:	f000 fcaf 	bl	1c144 <ll_df_read_ant_inf>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b7e6:	2105      	movs	r1, #5
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f7ed fc01 	bl	8ff0 <hci_cmd_complete>
	rp->max_switch_pattern_len = max_switch_pattern_len;
   1b7ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b7f2:	70c3      	strb	r3, [r0, #3]
	rp->switch_sample_rates = switch_sample_rates;
   1b7f4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b7f8:	7043      	strb	r3, [r0, #1]
	rp->max_cte_len = max_cte_len;
   1b7fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1b7fe:	7103      	strb	r3, [r0, #4]
	rp->num_ant = num_ant;
   1b800:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1b804:	7083      	strb	r3, [r0, #2]
	rp->status = 0x00;
   1b806:	2300      	movs	r3, #0
   1b808:	7003      	strb	r3, [r0, #0]
}
   1b80a:	b002      	add	sp, #8
   1b80c:	bd10      	pop	{r4, pc}

0001b80e <controller_cmd_handle>:
{
   1b80e:	b508      	push	{r3, lr}
   1b810:	4684      	mov	ip, r0
   1b812:	4608      	mov	r0, r1
   1b814:	4611      	mov	r1, r2
	switch (ocf) {
   1b816:	f10c 3cff 	add.w	ip, ip, #4294967295
   1b81a:	f1bc 0f58 	cmp.w	ip, #88	; 0x58
   1b81e:	f200 80bc 	bhi.w	1b99a <controller_cmd_handle+0x18c>
   1b822:	e8df f00c 	tbb	[pc, ip]
   1b826:	312d      	.short	0x312d
   1b828:	ba39ba35 	.word	0xba39ba35
   1b82c:	babababa 	.word	0xbabababa
   1b830:	baba5d59 	.word	0xbaba5d59
   1b834:	4945413d 	.word	0x4945413d
   1b838:	babababa 	.word	0xbabababa
   1b83c:	baba514d 	.word	0xbaba514d
   1b840:	baba55ba 	.word	0xbaba55ba
   1b844:	babababa 	.word	0xbabababa
   1b848:	babababa 	.word	0xbabababa
   1b84c:	96928e8a 	.word	0x96928e8a
   1b850:	a6a29e9a 	.word	0xa6a29e9a
   1b854:	babababa 	.word	0xbabababa
   1b858:	babababa 	.word	0xbabababa
   1b85c:	babababa 	.word	0xbabababa
   1b860:	babababa 	.word	0xbabababa
   1b864:	6561baba 	.word	0x6561baba
   1b868:	726d69ba 	.word	0x726d69ba
   1b86c:	86827e7a 	.word	0x86827e7a
   1b870:	aababaae 	.word	0xaababaae
   1b874:	babababa 	.word	0xbabababa
   1b878:	bababab2 	.word	0xbababab2
   1b87c:	b6ba      	.short	0xb6ba
   1b87e:	76          	.byte	0x76
   1b87f:	00          	.byte	0x00
		le_set_event_mask(cmd, evt);
   1b880:	f7ed fb72 	bl	8f68 <le_set_event_mask>
	return 0;
   1b884:	2000      	movs	r0, #0
		break;
   1b886:	e08a      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_buffer_size(cmd, evt);
   1b888:	f7ff fe8f 	bl	1b5aa <le_read_buffer_size>
	return 0;
   1b88c:	2000      	movs	r0, #0
		break;
   1b88e:	e086      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_local_features(cmd, evt);
   1b890:	f7ff fe98 	bl	1b5c4 <le_read_local_features>
	return 0;
   1b894:	2000      	movs	r0, #0
		break;
   1b896:	e082      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_random_address(cmd, evt);
   1b898:	f7ff fb67 	bl	1af6a <le_set_random_address>
	return 0;
   1b89c:	2000      	movs	r0, #0
		break;
   1b89e:	e07e      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_fal_size(cmd, evt);
   1b8a0:	f7ff feb0 	bl	1b604 <le_read_fal_size>
	return 0;
   1b8a4:	2000      	movs	r0, #0
		break;
   1b8a6:	e07a      	b.n	1b99e <controller_cmd_handle+0x190>
		le_clear_fal(cmd, evt);
   1b8a8:	f7ff fb69 	bl	1af7e <le_clear_fal>
	return 0;
   1b8ac:	2000      	movs	r0, #0
		break;
   1b8ae:	e076      	b.n	1b99e <controller_cmd_handle+0x190>
		le_add_dev_to_fal(cmd, evt);
   1b8b0:	f7ff fb6d 	bl	1af8e <le_add_dev_to_fal>
	return 0;
   1b8b4:	2000      	movs	r0, #0
		break;
   1b8b6:	e072      	b.n	1b99e <controller_cmd_handle+0x190>
		le_rem_dev_from_fal(cmd, evt);
   1b8b8:	f7ff fb72 	bl	1afa0 <le_rem_dev_from_fal>
	return 0;
   1b8bc:	2000      	movs	r0, #0
		break;
   1b8be:	e06e      	b.n	1b99e <controller_cmd_handle+0x190>
		le_encrypt(cmd, evt);
   1b8c0:	f7ff feac 	bl	1b61c <le_encrypt>
	return 0;
   1b8c4:	2000      	movs	r0, #0
		break;
   1b8c6:	e06a      	b.n	1b99e <controller_cmd_handle+0x190>
		le_rand(cmd, evt);
   1b8c8:	f7ff fec8 	bl	1b65c <le_rand>
	return 0;
   1b8cc:	2000      	movs	r0, #0
		break;
   1b8ce:	e066      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_supp_states(cmd, evt);
   1b8d0:	f7ff fed0 	bl	1b674 <le_read_supp_states>
	return 0;
   1b8d4:	2000      	movs	r0, #0
		break;
   1b8d6:	e062      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_scan_param(cmd, evt);
   1b8d8:	f7ff fb6b 	bl	1afb2 <le_set_scan_param>
	return 0;
   1b8dc:	2000      	movs	r0, #0
		break;
   1b8de:	e05e      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_scan_enable(cmd, evt);
   1b8e0:	f7ec f900 	bl	7ae4 <le_set_scan_enable>
	return 0;
   1b8e4:	2000      	movs	r0, #0
		break;
   1b8e6:	e05a      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_ext_scan_param(cmd, evt);
   1b8e8:	f7ff fb7b 	bl	1afe2 <le_set_ext_scan_param>
	return 0;
   1b8ec:	2000      	movs	r0, #0
		break;
   1b8ee:	e056      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_ext_scan_enable(cmd, evt);
   1b8f0:	f7ec f938 	bl	7b64 <le_set_ext_scan_enable>
	return 0;
   1b8f4:	2000      	movs	r0, #0
		break;
   1b8f6:	e052      	b.n	1b99e <controller_cmd_handle+0x190>
		le_per_adv_create_sync(cmd, evt);
   1b8f8:	f7ec f97e 	bl	7bf8 <le_per_adv_create_sync>
	return 0;
   1b8fc:	2000      	movs	r0, #0
		break;
   1b8fe:	e04e      	b.n	1b99e <controller_cmd_handle+0x190>
		le_per_adv_create_sync_cancel(cmd, evt, node_rx);
   1b900:	461a      	mov	r2, r3
   1b902:	f7ff fecb 	bl	1b69c <le_per_adv_create_sync_cancel>
	return 0;
   1b906:	2000      	movs	r0, #0
		break;
   1b908:	e049      	b.n	1b99e <controller_cmd_handle+0x190>
		le_per_adv_terminate_sync(cmd, evt);
   1b90a:	f7ff fed9 	bl	1b6c0 <le_per_adv_terminate_sync>
	return 0;
   1b90e:	2000      	movs	r0, #0
		break;
   1b910:	e045      	b.n	1b99e <controller_cmd_handle+0x190>
		le_per_adv_recv_enable(cmd, evt);
   1b912:	f7ed fba3 	bl	905c <le_per_adv_recv_enable>
	return 0;
   1b916:	2000      	movs	r0, #0
		break;
   1b918:	e041      	b.n	1b99e <controller_cmd_handle+0x190>
		le_add_dev_to_pal(cmd, evt);
   1b91a:	f7ff fb84 	bl	1b026 <le_add_dev_to_pal>
	return 0;
   1b91e:	2000      	movs	r0, #0
		break;
   1b920:	e03d      	b.n	1b99e <controller_cmd_handle+0x190>
		le_rem_dev_from_pal(cmd, evt);
   1b922:	f7ff fb90 	bl	1b046 <le_rem_dev_from_pal>
	return 0;
   1b926:	2000      	movs	r0, #0
		break;
   1b928:	e039      	b.n	1b99e <controller_cmd_handle+0x190>
		le_clear_pal(cmd, evt);
   1b92a:	f7ff fb9c 	bl	1b066 <le_clear_pal>
	return 0;
   1b92e:	2000      	movs	r0, #0
		break;
   1b930:	e035      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_pal_size(cmd, evt);
   1b932:	f7ff fed7 	bl	1b6e4 <le_read_pal_size>
	return 0;
   1b936:	2000      	movs	r0, #0
		break;
   1b938:	e031      	b.n	1b99e <controller_cmd_handle+0x190>
		le_add_dev_to_rl(cmd, evt);
   1b93a:	f7ff fba1 	bl	1b080 <le_add_dev_to_rl>
	return 0;
   1b93e:	2000      	movs	r0, #0
		break;
   1b940:	e02d      	b.n	1b99e <controller_cmd_handle+0x190>
		le_rem_dev_from_rl(cmd, evt);
   1b942:	f7ff fba9 	bl	1b098 <le_rem_dev_from_rl>
	return 0;
   1b946:	2000      	movs	r0, #0
		break;
   1b948:	e029      	b.n	1b99e <controller_cmd_handle+0x190>
		le_clear_rl(cmd, evt);
   1b94a:	f7ff fbae 	bl	1b0aa <le_clear_rl>
	return 0;
   1b94e:	2000      	movs	r0, #0
		break;
   1b950:	e025      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_rl_size(cmd, evt);
   1b952:	f7ff fed9 	bl	1b708 <le_read_rl_size>
	return 0;
   1b956:	2000      	movs	r0, #0
		break;
   1b958:	e021      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_peer_rpa(cmd, evt);
   1b95a:	f7ff fee1 	bl	1b720 <le_read_peer_rpa>
	return 0;
   1b95e:	2000      	movs	r0, #0
		break;
   1b960:	e01d      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_local_rpa(cmd, evt);
   1b962:	f7ff fef5 	bl	1b750 <le_read_local_rpa>
	return 0;
   1b966:	2000      	movs	r0, #0
		break;
   1b968:	e019      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_addr_res_enable(cmd, evt);
   1b96a:	f7ff fba6 	bl	1b0ba <le_set_addr_res_enable>
	return 0;
   1b96e:	2000      	movs	r0, #0
		break;
   1b970:	e015      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_rpa_timeout(cmd, evt);
   1b972:	f7ff fbac 	bl	1b0ce <le_set_rpa_timeout>
	return 0;
   1b976:	2000      	movs	r0, #0
		break;
   1b978:	e011      	b.n	1b99e <controller_cmd_handle+0x190>
		le_set_privacy_mode(cmd, evt);
   1b97a:	f7ff fbb3 	bl	1b0e4 <le_set_privacy_mode>
	return 0;
   1b97e:	2000      	movs	r0, #0
		break;
   1b980:	e00d      	b.n	1b99e <controller_cmd_handle+0x190>
		le_read_tx_power(cmd, evt);
   1b982:	f7ff fefd 	bl	1b780 <le_read_tx_power>
	return 0;
   1b986:	2000      	movs	r0, #0
		break;
   1b988:	e009      	b.n	1b99e <controller_cmd_handle+0x190>
		le_df_set_cl_iq_sampling_enable(cmd, evt);
   1b98a:	f7ff ff06 	bl	1b79a <le_df_set_cl_iq_sampling_enable>
	return 0;
   1b98e:	2000      	movs	r0, #0
		break;
   1b990:	e005      	b.n	1b99e <controller_cmd_handle+0x190>
		le_df_read_ant_inf(cmd, evt);
   1b992:	f7ff ff1c 	bl	1b7ce <le_df_read_ant_inf>
	return 0;
   1b996:	2000      	movs	r0, #0
		break;
   1b998:	e001      	b.n	1b99e <controller_cmd_handle+0x190>
	switch (ocf) {
   1b99a:	f06f 0015 	mvn.w	r0, #21
}
   1b99e:	bd08      	pop	{r3, pc}

0001b9a0 <vs_read_static_addrs>:
{
   1b9a0:	b510      	push	{r4, lr}
   1b9a2:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   1b9a4:	2118      	movs	r1, #24
   1b9a6:	f7ed fb23 	bl	8ff0 <hci_cmd_complete>
   1b9aa:	4604      	mov	r4, r0
	rp->status = 0x00;
   1b9ac:	2300      	movs	r3, #0
   1b9ae:	f800 3b02 	strb.w	r3, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1b9b2:	2101      	movs	r1, #1
   1b9b4:	f000 fff2 	bl	1c99c <hci_vendor_read_static_addr>
   1b9b8:	7060      	strb	r0, [r4, #1]
}
   1b9ba:	bd10      	pop	{r4, pc}

0001b9bc <vs_read_key_hierarchy_roots>:
{
   1b9bc:	b508      	push	{r3, lr}
   1b9be:	4608      	mov	r0, r1
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1b9c0:	2121      	movs	r1, #33	; 0x21
   1b9c2:	f7ed fb15 	bl	8ff0 <hci_cmd_complete>
   1b9c6:	4601      	mov	r1, r0
	rp->status = 0x00;
   1b9c8:	2300      	movs	r3, #0
   1b9ca:	f800 3b01 	strb.w	r3, [r0], #1
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   1b9ce:	3111      	adds	r1, #17
   1b9d0:	f001 f85c 	bl	1ca8c <hci_vendor_read_key_hierarchy_roots>
}
   1b9d4:	bd08      	pop	{r3, pc}

0001b9d6 <hci_vendor_cmd_handle_common>:
{
   1b9d6:	b508      	push	{r3, lr}
   1b9d8:	4603      	mov	r3, r0
   1b9da:	4608      	mov	r0, r1
   1b9dc:	4611      	mov	r1, r2
	switch (ocf) {
   1b9de:	3b01      	subs	r3, #1
   1b9e0:	2b09      	cmp	r3, #9
   1b9e2:	d822      	bhi.n	1ba2a <hci_vendor_cmd_handle_common+0x54>
   1b9e4:	e8df f003 	tbb	[pc, r3]
   1b9e8:	210d0905 	.word	0x210d0905
   1b9ec:	11211521 	.word	0x11211521
   1b9f0:	1d19      	.short	0x1d19
		vs_read_version_info(cmd, evt);
   1b9f2:	f7ff fcdf 	bl	1b3b4 <vs_read_version_info>
	return 0;
   1b9f6:	2000      	movs	r0, #0
		break;
   1b9f8:	e019      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_read_supported_commands(cmd, evt);
   1b9fa:	f7ff fcf2 	bl	1b3e2 <vs_read_supported_commands>
	return 0;
   1b9fe:	2000      	movs	r0, #0
		break;
   1ba00:	e015      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_read_supported_features(cmd, evt);
   1ba02:	f7ff fd06 	bl	1b412 <vs_read_supported_features>
	return 0;
   1ba06:	2000      	movs	r0, #0
		break;
   1ba08:	e011      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_read_build_info(cmd, evt);
   1ba0a:	f7ed fb01 	bl	9010 <vs_read_build_info>
	return 0;
   1ba0e:	2000      	movs	r0, #0
		break;
   1ba10:	e00d      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_write_bd_addr(cmd, evt);
   1ba12:	f7ff fa9f 	bl	1af54 <vs_write_bd_addr>
	return 0;
   1ba16:	2000      	movs	r0, #0
		break;
   1ba18:	e009      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_read_static_addrs(cmd, evt);
   1ba1a:	f7ff ffc1 	bl	1b9a0 <vs_read_static_addrs>
	return 0;
   1ba1e:	2000      	movs	r0, #0
		break;
   1ba20:	e005      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
		vs_read_key_hierarchy_roots(cmd, evt);
   1ba22:	f7ff ffcb 	bl	1b9bc <vs_read_key_hierarchy_roots>
	return 0;
   1ba26:	2000      	movs	r0, #0
		break;
   1ba28:	e001      	b.n	1ba2e <hci_vendor_cmd_handle_common+0x58>
	switch (ocf) {
   1ba2a:	f06f 0015 	mvn.w	r0, #21
}
   1ba2e:	bd08      	pop	{r3, pc}

0001ba30 <hci_evt_encode>:
	}
}
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1ba30:	b508      	push	{r3, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1ba32:	7903      	ldrb	r3, [r0, #4]
   1ba34:	2b03      	cmp	r3, #3
   1ba36:	d100      	bne.n	1ba3a <hci_evt_encode+0xa>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1ba38:	bd08      	pop	{r3, pc}
   1ba3a:	460a      	mov	r2, r1
   1ba3c:	f100 0120 	add.w	r1, r0, #32
		encode_control(node_rx, pdu_data, buf);
   1ba40:	f7ed fa3e 	bl	8ec0 <encode_control>
}
   1ba44:	e7f8      	b.n	1ba38 <hci_evt_encode+0x8>

0001ba46 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1ba46:	7903      	ldrb	r3, [r0, #4]
   1ba48:	2b03      	cmp	r3, #3
   1ba4a:	d019      	beq.n	1ba80 <hci_get_class+0x3a>

		switch (node_rx->hdr.type) {
   1ba4c:	3b05      	subs	r3, #5
   1ba4e:	2b21      	cmp	r3, #33	; 0x21
   1ba50:	d814      	bhi.n	1ba7c <hci_get_class+0x36>
   1ba52:	e8df f003 	tbb	[pc, r3]
   1ba56:	1711      	.short	0x1711
   1ba58:	13131717 	.word	0x13131717
   1ba5c:	17171717 	.word	0x17171717
   1ba60:	13131313 	.word	0x13131313
   1ba64:	13131313 	.word	0x13131313
   1ba68:	13131313 	.word	0x13131313
   1ba6c:	13131313 	.word	0x13131313
   1ba70:	13131313 	.word	0x13131313
   1ba74:	17131313 	.word	0x17131313
   1ba78:	2002      	movs	r0, #2
   1ba7a:	4770      	bx	lr
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   1ba7c:	2000      	movs	r0, #0
   1ba7e:	4770      	bx	lr
	} else {
		return HCI_CLASS_ACL_DATA;
	}
#else
	} else {
		return HCI_CLASS_NONE;
   1ba80:	2000      	movs	r0, #0
   1ba82:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1ba84:	2001      	movs	r0, #1
	}
#endif
}
   1ba86:	4770      	bx	lr

0001ba88 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1ba88:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
   1ba8a:	2100      	movs	r1, #0
   1ba8c:	4608      	mov	r0, r1
   1ba8e:	f7eb fffd 	bl	7a8c <reset>
}
   1ba92:	bd08      	pop	{r3, pc}

0001ba94 <bt_rand>:

#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
   1ba94:	b508      	push	{r3, lr}
	return lll_csrand_get(buf, len);
   1ba96:	f7f1 fa17 	bl	cec8 <lll_csrand_get>
}
   1ba9a:	bd08      	pop	{r3, pc}

0001ba9c <bt_encrypt_le>:

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1ba9c:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1ba9e:	2300      	movs	r3, #0
   1baa0:	f000 ff0b 	bl	1c8ba <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1baa4:	2000      	movs	r0, #0
   1baa6:	bd08      	pop	{r3, pc}

0001baa8 <ll_rx_link_quota_dec>:
{
   1baa8:	b508      	push	{r3, lr}
	ll_rx_link_quota_update(-1);
   1baaa:	f04f 30ff 	mov.w	r0, #4294967295
   1baae:	f7ed fb5f 	bl	9170 <ll_rx_link_quota_update>
}
   1bab2:	bd08      	pop	{r3, pc}

0001bab4 <ll_rx_link_quota_inc>:
{
   1bab4:	b508      	push	{r3, lr}
	ll_rx_link_quota_update(1);
   1bab6:	2001      	movs	r0, #1
   1bab8:	f7ed fb5a 	bl	9170 <ll_rx_link_quota_update>
}
   1babc:	bd08      	pop	{r3, pc}

0001babe <disabled_cb>:

static void disabled_cb(void *param)
{
   1babe:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1bac0:	f7f7 fa24 	bl	12f0c <z_impl_k_sem_give>
	k_sem_give(param);
}
   1bac4:	bd08      	pop	{r3, pc}

0001bac6 <rx_replenish_all>:
{
   1bac6:	b508      	push	{r3, lr}
	rx_replenish(UINT8_MAX);
   1bac8:	20ff      	movs	r0, #255	; 0xff
   1baca:	f7ed fbcb 	bl	9264 <rx_replenish>
}
   1bace:	bd08      	pop	{r3, pc}

0001bad0 <rx_replenish_one>:
{
   1bad0:	b508      	push	{r3, lr}
	rx_replenish(1U);
   1bad2:	2001      	movs	r0, #1
   1bad4:	f7ed fbc6 	bl	9264 <rx_replenish>
}
   1bad8:	bd08      	pop	{r3, pc}

0001bada <rx_release_replenish>:
{
   1bada:	b508      	push	{r3, lr}
	ll_rx_release(rx);
   1badc:	f7ed fc8c 	bl	93f8 <ll_rx_release>
	rx_replenish_one();
   1bae0:	f7ff fff6 	bl	1bad0 <rx_replenish_one>
}
   1bae4:	bd08      	pop	{r3, pc}

0001bae6 <ull_done_extra_type_set>:
{
   1bae6:	b510      	push	{r4, lr}
   1bae8:	4604      	mov	r4, r0
	extra = ull_event_done_extra_get();
   1baea:	f7ee f80d 	bl	9b08 <ull_event_done_extra_get>
	if (!extra) {
   1baee:	b100      	cbz	r0, 1baf2 <ull_done_extra_type_set+0xc>
	extra->type = type;
   1baf0:	7004      	strb	r4, [r0, #0]
}
   1baf2:	bd10      	pop	{r4, pc}

0001baf4 <ull_rxfifo_alloc>:
 * @details This function allocates up to 'max' number of MFIFO elements by
 *          enqueuing pointers to memory elements with associated memq links.
 */
void ull_rxfifo_alloc(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
		      void *mem_free, void *link_free, uint8_t max)
{
   1baf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1baf8:	4682      	mov	sl, r0
   1bafa:	4689      	mov	r9, r1
   1bafc:	4690      	mov	r8, r2
   1bafe:	461e      	mov	r6, r3
   1bb00:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1bb04:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
	uint8_t idx;

	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1bb08:	e01c      	b.n	1bb44 <ull_rxfifo_alloc+0x50>
			break;
		}

		rx = mem_acquire(mem_free);
		if (!rx) {
			mem_release(link, link_free);
   1bb0a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1bb0c:	4638      	mov	r0, r7
   1bb0e:	f7fe fb14 	bl	1a13a <mem_release>
		link->mem = NULL;
		rx->link = link;

		mfifo_by_idx_enqueue(m, s, idx, rx, l);
	}
}
   1bb12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (last == first) {
   1bb16:	45a0      	cmp	r8, r4
   1bb18:	d0fb      	beq.n	1bb12 <ull_rxfifo_alloc+0x1e>
		link = mem_acquire(link_free);
   1bb1a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1bb1c:	f7fe fafa 	bl	1a114 <mem_acquire>
		if (!link) {
   1bb20:	4607      	mov	r7, r0
   1bb22:	2800      	cmp	r0, #0
   1bb24:	d0f5      	beq.n	1bb12 <ull_rxfifo_alloc+0x1e>
		rx = mem_acquire(mem_free);
   1bb26:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1bb28:	f7fe faf4 	bl	1a114 <mem_acquire>
		if (!rx) {
   1bb2c:	2800      	cmp	r0, #0
   1bb2e:	d0ec      	beq.n	1bb0a <ull_rxfifo_alloc+0x16>
		link->mem = NULL;
   1bb30:	2300      	movs	r3, #0
   1bb32:	607b      	str	r3, [r7, #4]
		rx->link = link;
   1bb34:	6007      	str	r7, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1bb36:	7833      	ldrb	r3, [r6, #0]
   1bb38:	fb03 f30a 	mul.w	r3, r3, sl
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1bb3c:	f84b 0003 	str.w	r0, [fp, r3]
	*last = idx; /* Commit: Update write index */
   1bb40:	7034      	strb	r4, [r6, #0]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1bb42:	462b      	mov	r3, r5
   1bb44:	1e5d      	subs	r5, r3, #1
   1bb46:	b2ed      	uxtb	r5, r5
   1bb48:	2b00      	cmp	r3, #0
   1bb4a:	d0e2      	beq.n	1bb12 <ull_rxfifo_alloc+0x1e>
   1bb4c:	7834      	ldrb	r4, [r6, #0]
	last = last + 1;
   1bb4e:	3401      	adds	r4, #1
   1bb50:	b2e4      	uxtb	r4, r4
	if (last == count) {
   1bb52:	45a1      	cmp	r9, r4
   1bb54:	d1df      	bne.n	1bb16 <ull_rxfifo_alloc+0x22>
		last = 0U;
   1bb56:	2400      	movs	r4, #0
   1bb58:	e7dd      	b.n	1bb16 <ull_rxfifo_alloc+0x22>

0001bb5a <ull_rxfifo_release>:
 * @brief   Support function for RXFIFO_RELEASE macro
 * @details This function releases a node by returning it to the FIFO.
 */
void *ull_rxfifo_release(uint8_t s, uint8_t n, uint8_t f, uint8_t *l, uint8_t *m,
			 memq_link_t *link, struct node_rx_hdr *rx)
{
   1bb5a:	b500      	push	{lr}
   1bb5c:	4686      	mov	lr, r0
   1bb5e:	9803      	ldr	r0, [sp, #12]
	uint8_t idx;

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   1bb60:	f893 c000 	ldrb.w	ip, [r3]
	last = last + 1;
   1bb64:	f10c 0c01 	add.w	ip, ip, #1
   1bb68:	fa5f fc8c 	uxtb.w	ip, ip
	if (last == count) {
   1bb6c:	4561      	cmp	r1, ip
   1bb6e:	d00e      	beq.n	1bb8e <ull_rxfifo_release+0x34>
	if (last == first) {
   1bb70:	4562      	cmp	r2, ip
   1bb72:	d00f      	beq.n	1bb94 <ull_rxfifo_release+0x3a>
	return true; /* Successfully allocated new buffer */
   1bb74:	2201      	movs	r2, #1
   1bb76:	b17a      	cbz	r2, 1bb98 <ull_rxfifo_release+0x3e>
		return NULL;
	}

	rx->link = link;
   1bb78:	9a02      	ldr	r2, [sp, #8]
   1bb7a:	6002      	str	r2, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1bb7c:	781a      	ldrb	r2, [r3, #0]
   1bb7e:	fb02 f20e 	mul.w	r2, r2, lr
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1bb82:	9901      	ldr	r1, [sp, #4]
   1bb84:	5088      	str	r0, [r1, r2]
	*last = idx; /* Commit: Update write index */
   1bb86:	f883 c000 	strb.w	ip, [r3]

	mfifo_by_idx_enqueue(m, s, idx, rx, l);

	return rx;
}
   1bb8a:	f85d fb04 	ldr.w	pc, [sp], #4
		last = 0U;
   1bb8e:	f04f 0c00 	mov.w	ip, #0
   1bb92:	e7ed      	b.n	1bb70 <ull_rxfifo_release+0x16>
		return false; /* Queue is full */
   1bb94:	2200      	movs	r2, #0
   1bb96:	e7ee      	b.n	1bb76 <ull_rxfifo_release+0x1c>
		return NULL;
   1bb98:	2000      	movs	r0, #0
   1bb9a:	e7f6      	b.n	1bb8a <ull_rxfifo_release+0x30>

0001bb9c <lll_prepare>:
{
   1bb9c:	b500      	push	{lr}
   1bb9e:	b083      	sub	sp, #12
	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1bba0:	2300      	movs	r3, #0
   1bba2:	9301      	str	r3, [sp, #4]
   1bba4:	9300      	str	r3, [sp, #0]
   1bba6:	9b04      	ldr	r3, [sp, #16]
   1bba8:	f7f1 fab0 	bl	d10c <lll_prepare_resolve>
}
   1bbac:	b003      	add	sp, #12
   1bbae:	f85d fb04 	ldr.w	pc, [sp], #4

0001bbb2 <init_reset>:
}
   1bbb2:	2000      	movs	r0, #0
   1bbb4:	4770      	bx	lr

0001bbb6 <ext_disabled_cb>:

static void ext_disabled_cb(void *param)
{
   1bbb6:	b508      	push	{r3, lr}

	/* Under race condition, if a connection has been established then
	 * node_rx is already utilized to send terminate event on connection
	 */
	lll = (void *)param;
	scan = HDR_LLL2ULL(lll);
   1bbb8:	6803      	ldr	r3, [r0, #0]
	rx_hdr = (void *)scan->node_rx_scan_term;
   1bbba:	6c19      	ldr	r1, [r3, #64]	; 0x40
	if (!rx_hdr) {
   1bbbc:	b121      	cbz	r1, 1bbc8 <ext_disabled_cb+0x12>
	}

	/* NOTE: parameters are already populated on disable,
	 * just enqueue here
	 */
	ll_rx_put(rx_hdr->link, rx_hdr);
   1bbbe:	6808      	ldr	r0, [r1, #0]
   1bbc0:	f7ed fd12 	bl	95e8 <ll_rx_put>
	ll_rx_sched();
   1bbc4:	f7ed fd18 	bl	95f8 <ll_rx_sched>
}
   1bbc8:	bd08      	pop	{r3, pc}

0001bbca <ull_scan_init>:
{
   1bbca:	b508      	push	{r3, lr}
		err = ull_scan_aux_init();
   1bbcc:	f000 f94f 	bl	1be6e <ull_scan_aux_init>
		if (err) {
   1bbd0:	b908      	cbnz	r0, 1bbd6 <ull_scan_init+0xc>
	err = init_reset();
   1bbd2:	f7ff ffee 	bl	1bbb2 <init_reset>
}
   1bbd6:	bd08      	pop	{r3, pc}

0001bbd8 <is_scan_update>:
{
   1bbd8:	b570      	push	{r4, r5, r6, lr}
   1bbda:	460d      	mov	r5, r1
   1bbdc:	4616      	mov	r6, r2
   1bbde:	461c      	mov	r4, r3
	*scan = ull_scan_set_get(handle);
   1bbe0:	f7ee fb1e 	bl	a220 <ull_scan_set_get>
   1bbe4:	6020      	str	r0, [r4, #0]
	*node_rx_scan_term = (void *)(*scan)->node_rx_scan_term;
   1bbe6:	6c02      	ldr	r2, [r0, #64]	; 0x40
   1bbe8:	9b04      	ldr	r3, [sp, #16]
   1bbea:	601a      	str	r2, [r3, #0]
	return duration && period && (*scan)->lll.duration_reload &&
   1bbec:	b13d      	cbz	r5, 1bbfe <is_scan_update+0x26>
   1bbee:	b146      	cbz	r6, 1bc02 <is_scan_update+0x2a>
   1bbf0:	6823      	ldr	r3, [r4, #0]
   1bbf2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
   1bbf4:	b13a      	cbz	r2, 1bc06 <is_scan_update+0x2e>
	       (*scan)->duration_lazy;
   1bbf6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
	return duration && period && (*scan)->lll.duration_reload &&
   1bbf8:	b93b      	cbnz	r3, 1bc0a <is_scan_update+0x32>
   1bbfa:	2000      	movs	r0, #0
   1bbfc:	e000      	b.n	1bc00 <is_scan_update+0x28>
   1bbfe:	2000      	movs	r0, #0
}
   1bc00:	bd70      	pop	{r4, r5, r6, pc}
	return duration && period && (*scan)->lll.duration_reload &&
   1bc02:	2000      	movs	r0, #0
   1bc04:	e7fc      	b.n	1bc00 <is_scan_update+0x28>
   1bc06:	2000      	movs	r0, #0
   1bc08:	e7fa      	b.n	1bc00 <is_scan_update+0x28>
   1bc0a:	2001      	movs	r0, #1
   1bc0c:	e7f8      	b.n	1bc00 <is_scan_update+0x28>

0001bc0e <ull_scan_lll_handle_get>:
{
   1bc0e:	b508      	push	{r3, lr}
	return ull_scan_handle_get((void *)lll->hdr.parent);
   1bc10:	6800      	ldr	r0, [r0, #0]
   1bc12:	f7ee fb31 	bl	a278 <ull_scan_handle_get>
}
   1bc16:	bd08      	pop	{r3, pc}

0001bc18 <ull_scan_lll_is_valid_get>:
{
   1bc18:	b508      	push	{r3, lr}
	scan = ull_scan_is_valid_get(scan);
   1bc1a:	6800      	ldr	r0, [r0, #0]
   1bc1c:	f7ee fc7a 	bl	a514 <ull_scan_is_valid_get>
	if (scan) {
   1bc20:	4603      	mov	r3, r0
   1bc22:	b100      	cbz	r0, 1bc26 <ull_scan_lll_is_valid_get+0xe>
		return &scan->lll;
   1bc24:	331c      	adds	r3, #28
}
   1bc26:	4618      	mov	r0, r3
   1bc28:	bd08      	pop	{r3, pc}

0001bc2a <ull_scan_is_enabled_get>:
{
   1bc2a:	b508      	push	{r3, lr}
	scan = ull_scan_set_get(handle);
   1bc2c:	f7ee faf8 	bl	a220 <ull_scan_set_get>
	if (!scan || !scan->is_enabled) {
   1bc30:	b138      	cbz	r0, 1bc42 <ull_scan_is_enabled_get+0x18>
   1bc32:	4603      	mov	r3, r0
   1bc34:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   1bc38:	f012 0f02 	tst.w	r2, #2
   1bc3c:	d003      	beq.n	1bc46 <ull_scan_is_enabled_get+0x1c>
}
   1bc3e:	4618      	mov	r0, r3
   1bc40:	bd08      	pop	{r3, pc}
		return NULL;
   1bc42:	2300      	movs	r3, #0
   1bc44:	e7fb      	b.n	1bc3e <ull_scan_is_enabled_get+0x14>
   1bc46:	2300      	movs	r3, #0
   1bc48:	e7f9      	b.n	1bc3e <ull_scan_is_enabled_get+0x14>

0001bc4a <disable>:
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static uint8_t disable(uint8_t handle)
{
   1bc4a:	b570      	push	{r4, r5, r6, lr}
   1bc4c:	4604      	mov	r4, r0
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
   1bc4e:	f7ff ffec 	bl	1bc2a <ull_scan_is_enabled_get>
	if (!scan) {
   1bc52:	b1d8      	cbz	r0, 1bc8c <disable+0x42>
   1bc54:	4605      	mov	r5, r0
	if (scan->lll.conn) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1bc56:	4601      	mov	r1, r0
   1bc58:	4620      	mov	r0, r4
   1bc5a:	f7ee fa8b 	bl	a174 <ull_scan_disable>
	if (ret) {
   1bc5e:	4604      	mov	r4, r0
   1bc60:	b990      	cbnz	r0, 1bc88 <disable+0x3e>
		return ret;
	}

	scan->is_enabled = 0U;
   1bc62:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1bc66:	f36f 0341 	bfc	r3, #1, #1
   1bc6a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	if (scan->node_rx_scan_term) {
   1bc6e:	6c2e      	ldr	r6, [r5, #64]	; 0x40
   1bc70:	b13e      	cbz	r6, 1bc82 <disable+0x38>
		struct node_rx_pdu *node_rx_scan_term =
			(void *)scan->node_rx_scan_term;

		scan->node_rx_scan_term = NULL;
   1bc72:	2300      	movs	r3, #0
   1bc74:	642b      	str	r3, [r5, #64]	; 0x40

		ll_rx_link_release(node_rx_scan_term->hdr.link);
   1bc76:	6830      	ldr	r0, [r6, #0]
   1bc78:	f7ed faec 	bl	9254 <ll_rx_link_release>
		ll_rx_release(node_rx_scan_term);
   1bc7c:	4630      	mov	r0, r6
   1bc7e:	f7ed fbbb 	bl	93f8 <ll_rx_release>
#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   1bc82:	2000      	movs	r0, #0
   1bc84:	f000 fb58 	bl	1c338 <ull_filter_adv_scan_state_cb>
	}
#endif

	return 0;
}
   1bc88:	4620      	mov	r0, r4
   1bc8a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bc8c:	240c      	movs	r4, #12
   1bc8e:	e7fb      	b.n	1bc88 <disable+0x3e>

0001bc90 <ull_scan_reset>:
{
   1bc90:	b510      	push	{r4, lr}
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   1bc92:	2400      	movs	r4, #0
   1bc94:	b12c      	cbz	r4, 1bca2 <ull_scan_reset+0x12>
		err = ull_scan_aux_reset();
   1bc96:	f000 f8ee 	bl	1be76 <ull_scan_aux_reset>
		if (err) {
   1bc9a:	b908      	cbnz	r0, 1bca0 <ull_scan_reset+0x10>
	err = init_reset();
   1bc9c:	f7ff ff89 	bl	1bbb2 <init_reset>
}
   1bca0:	bd10      	pop	{r4, pc}
		(void)disable(handle);
   1bca2:	4620      	mov	r0, r4
   1bca4:	f7ff ffd1 	bl	1bc4a <disable>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   1bca8:	3401      	adds	r4, #1
   1bcaa:	b2e4      	uxtb	r4, r4
   1bcac:	e7f2      	b.n	1bc94 <ull_scan_reset+0x4>

0001bcae <ull_scan_is_disabled_get>:
{
   1bcae:	b508      	push	{r3, lr}
	scan = ull_scan_set_get(handle);
   1bcb0:	f7ee fab6 	bl	a220 <ull_scan_set_get>
	if (!scan || scan->is_enabled) {
   1bcb4:	b138      	cbz	r0, 1bcc6 <ull_scan_is_disabled_get+0x18>
   1bcb6:	4603      	mov	r3, r0
   1bcb8:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
   1bcbc:	f012 0f02 	tst.w	r2, #2
   1bcc0:	d103      	bne.n	1bcca <ull_scan_is_disabled_get+0x1c>
}
   1bcc2:	4618      	mov	r0, r3
   1bcc4:	bd08      	pop	{r3, pc}
		return NULL;
   1bcc6:	2300      	movs	r3, #0
   1bcc8:	e7fb      	b.n	1bcc2 <ull_scan_is_disabled_get+0x14>
   1bcca:	2300      	movs	r3, #0
   1bccc:	e7f9      	b.n	1bcc2 <ull_scan_is_disabled_get+0x14>

0001bcce <ll_scan_params_set>:
{
   1bcce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bcd2:	b082      	sub	sp, #8
   1bcd4:	4604      	mov	r4, r0
   1bcd6:	460d      	mov	r5, r1
   1bcd8:	4616      	mov	r6, r2
   1bcda:	4698      	mov	r8, r3
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1bcdc:	2000      	movs	r0, #0
   1bcde:	f7ff ffe6 	bl	1bcae <ull_scan_is_disabled_get>
	if (!scan) {
   1bce2:	b328      	cbz	r0, 1bd30 <ll_scan_params_set+0x62>
   1bce4:	4601      	mov	r1, r0
	phy  = type >> 1;
   1bce6:	0862      	lsrs	r2, r4, #1
	if (phy & BT_HCI_LE_EXT_SCAN_PHY_CODED) {
   1bce8:	f012 0704 	ands.w	r7, r2, #4
   1bcec:	d122      	bne.n	1bd34 <ll_scan_params_set+0x66>
	lll = &scan->lll;
   1bcee:	301c      	adds	r0, #28
	if (!interval) {
   1bcf0:	b94d      	cbnz	r5, 1bd06 <ll_scan_params_set+0x38>
		lll->phy = 0U;
   1bcf2:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   1bcf6:	f36f 0302 	bfc	r3, #0, #3
   1bcfa:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
}
   1bcfe:	4638      	mov	r0, r7
   1bd00:	b002      	add	sp, #8
   1bd02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	lll->phy = phy;
   1bd06:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   1bd0a:	f362 0302 	bfi	r3, r2, #0, #3
   1bd0e:	f881 302c 	strb.w	r3, [r1, #44]	; 0x2c
	scan->own_addr_type = own_addr_type;
   1bd12:	f891 3044 	ldrb.w	r3, [r1, #68]	; 0x44
   1bd16:	f368 0383 	bfi	r3, r8, #2, #2
   1bd1a:	f881 3044 	strb.w	r3, [r1, #68]	; 0x44
	ull_scan_params_set(lll, type, interval, window, filter_policy);
   1bd1e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1bd22:	9300      	str	r3, [sp, #0]
   1bd24:	4633      	mov	r3, r6
   1bd26:	462a      	mov	r2, r5
   1bd28:	4621      	mov	r1, r4
   1bd2a:	f7e5 fd65 	bl	17f8 <ull_scan_params_set>
	return 0;
   1bd2e:	e7e6      	b.n	1bcfe <ll_scan_params_set+0x30>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bd30:	270c      	movs	r7, #12
   1bd32:	e7e4      	b.n	1bcfe <ll_scan_params_set+0x30>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1bd34:	270c      	movs	r7, #12
   1bd36:	e7e2      	b.n	1bcfe <ll_scan_params_set+0x30>

0001bd38 <ll_scan_enable>:
{
   1bd38:	b570      	push	{r4, r5, r6, lr}
   1bd3a:	b084      	sub	sp, #16
	struct node_rx_pdu *node_rx_scan_term = NULL;
   1bd3c:	2300      	movs	r3, #0
   1bd3e:	9303      	str	r3, [sp, #12]
	if (!enable) {
   1bd40:	b1f0      	cbz	r0, 1bd80 <ll_scan_enable+0x48>
   1bd42:	460d      	mov	r5, r1
   1bd44:	4614      	mov	r4, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
   1bd46:	2000      	movs	r0, #0
   1bd48:	f7ff ffb1 	bl	1bcae <ull_scan_is_disabled_get>
   1bd4c:	9002      	str	r0, [sp, #8]
	if (!scan) {
   1bd4e:	b1d8      	cbz	r0, 1bd88 <ll_scan_enable+0x50>
	uint8_t is_update_1m = 0U;
   1bd50:	2600      	movs	r6, #0
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   1bd52:	9b02      	ldr	r3, [sp, #8]
   1bd54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
   1bd58:	f013 0f04 	tst.w	r3, #4
   1bd5c:	d007      	beq.n	1bd6e <ll_scan_enable+0x36>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   1bd5e:	2001      	movs	r0, #1
   1bd60:	f7eb fcee 	bl	7740 <ll_addr_get>
   1bd64:	2106      	movs	r1, #6
   1bd66:	f7fe fa0c 	bl	1a182 <mem_nz>
   1bd6a:	2800      	cmp	r0, #0
   1bd6c:	d04b      	beq.n	1be06 <ll_scan_enable+0xce>
		err = duration_period_setup(scan, duration, period,
   1bd6e:	ab03      	add	r3, sp, #12
   1bd70:	4622      	mov	r2, r4
   1bd72:	4629      	mov	r1, r5
   1bd74:	9802      	ldr	r0, [sp, #8]
   1bd76:	f7ee f951 	bl	a01c <duration_period_setup>
		if (err) {
   1bd7a:	b188      	cbz	r0, 1bda0 <ll_scan_enable+0x68>
}
   1bd7c:	b004      	add	sp, #16
   1bd7e:	bd70      	pop	{r4, r5, r6, pc}
		err = disable(SCAN_HANDLE_1M);
   1bd80:	4618      	mov	r0, r3
   1bd82:	f7ff ff62 	bl	1bc4a <disable>
		return err;
   1bd86:	e7f9      	b.n	1bd7c <ll_scan_enable+0x44>
		is_update_1m = is_scan_update(SCAN_HANDLE_1M, duration, period,
   1bd88:	ab03      	add	r3, sp, #12
   1bd8a:	9300      	str	r3, [sp, #0]
   1bd8c:	ab02      	add	r3, sp, #8
   1bd8e:	4622      	mov	r2, r4
   1bd90:	4629      	mov	r1, r5
   1bd92:	f7ff ff21 	bl	1bbd8 <is_scan_update>
		if (!is_update_1m)
   1bd96:	4606      	mov	r6, r0
   1bd98:	2800      	cmp	r0, #0
   1bd9a:	d1da      	bne.n	1bd52 <ll_scan_enable+0x1a>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1bd9c:	200c      	movs	r0, #12
   1bd9e:	e7ed      	b.n	1bd7c <ll_scan_enable+0x44>
		lll = &scan->lll;
   1bda0:	9c02      	ldr	r4, [sp, #8]
		own_addr_type = scan->own_addr_type;
   1bda2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1bda6:	f3c3 0581 	ubfx	r5, r3, #2, #2
	ull_filter_scan_update(lll->filter_policy);
   1bdaa:	f894 0020 	ldrb.w	r0, [r4, #32]
   1bdae:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1bdb2:	f7f0 f821 	bl	bdf8 <ull_filter_scan_update>
	lll->rl_idx = FILTER_IDX_NONE;
   1bdb6:	23ff      	movs	r3, #255	; 0xff
   1bdb8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	lll->rpa_gen = 0;
   1bdbc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1bdc0:	f36f 1386 	bfc	r3, #6, #1
   1bdc4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if ((lll->type & 0x1) &&
   1bdc8:	f894 3020 	ldrb.w	r3, [r4, #32]
   1bdcc:	f013 0f20 	tst.w	r3, #32
   1bdd0:	d003      	beq.n	1bdda <ll_scan_enable+0xa2>
	    (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1bdd2:	1eab      	subs	r3, r5, #2
   1bdd4:	b2db      	uxtb	r3, r3
	if ((lll->type & 0x1) &&
   1bdd6:	2b01      	cmp	r3, #1
   1bdd8:	d90b      	bls.n	1bdf2 <ll_scan_enable+0xba>
		err = duration_period_update(scan, is_update_1m);
   1bdda:	4631      	mov	r1, r6
   1bddc:	9802      	ldr	r0, [sp, #8]
   1bdde:	f7ee fa59 	bl	a294 <duration_period_update>
		if (err) {
   1bde2:	2800      	cmp	r0, #0
   1bde4:	d1ca      	bne.n	1bd7c <ll_scan_enable+0x44>
		} else if (is_update_1m) {
   1bde6:	2e00      	cmp	r6, #0
   1bde8:	d1c8      	bne.n	1bd7c <ll_scan_enable+0x44>
		err = ull_scan_enable(scan);
   1bdea:	9802      	ldr	r0, [sp, #8]
   1bdec:	f7e5 fd2c 	bl	1848 <ull_scan_enable>
		if (err) {
   1bdf0:	e7c4      	b.n	1bd7c <ll_scan_enable+0x44>
		ull_filter_rpa_update(false);
   1bdf2:	2000      	movs	r0, #0
   1bdf4:	f7f0 f81c 	bl	be30 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   1bdf8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   1bdfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1be00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   1be04:	e7e9      	b.n	1bdda <ll_scan_enable+0xa2>
			return BT_HCI_ERR_INVALID_PARAM;
   1be06:	2012      	movs	r0, #18
   1be08:	e7b8      	b.n	1bd7c <ll_scan_enable+0x44>

0001be0a <ull_scan_is_enabled>:
{
   1be0a:	b510      	push	{r4, lr}
   1be0c:	4604      	mov	r4, r0
	scan = ull_scan_is_enabled_get(handle);
   1be0e:	f7ff ff0c 	bl	1bc2a <ull_scan_is_enabled_get>
	if (!scan) {
   1be12:	b170      	cbz	r0, 1be32 <ull_scan_is_enabled+0x28>
   1be14:	4603      	mov	r3, r0
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   1be16:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
   1be1a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1be1e:	f893 2020 	ldrb.w	r2, [r3, #32]
   1be22:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1be26:	4090      	lsls	r0, r2
		(scan->periodic.sync ? ULL_SCAN_IS_SYNC : 0U) |
   1be28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1be2a:	b15b      	cbz	r3, 1be44 <ull_scan_is_enabled+0x3a>
   1be2c:	2308      	movs	r3, #8
   1be2e:	4318      	orrs	r0, r3
}
   1be30:	bd10      	pop	{r4, pc}
		scan = ull_scan_set_get(handle);
   1be32:	4620      	mov	r0, r4
   1be34:	f7ee f9f4 	bl	a220 <ull_scan_set_get>
		return scan->periodic.sync ? ULL_SCAN_IS_SYNC : 0U;
   1be38:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1be3a:	b10b      	cbz	r3, 1be40 <ull_scan_is_enabled+0x36>
   1be3c:	2008      	movs	r0, #8
   1be3e:	e7f7      	b.n	1be30 <ull_scan_is_enabled+0x26>
   1be40:	2000      	movs	r0, #0
   1be42:	e7f5      	b.n	1be30 <ull_scan_is_enabled+0x26>
		(scan->periodic.sync ? ULL_SCAN_IS_SYNC : 0U) |
   1be44:	2300      	movs	r3, #0
   1be46:	e7f2      	b.n	1be2e <ull_scan_is_enabled+0x24>

0001be48 <ull_scan_filter_pol_get>:
{
   1be48:	b508      	push	{r3, lr}
	scan = ull_scan_is_enabled_get(handle);
   1be4a:	f7ff feee 	bl	1bc2a <ull_scan_is_enabled_get>
	if (!scan) {
   1be4e:	b120      	cbz	r0, 1be5a <ull_scan_filter_pol_get+0x12>
	return scan->lll.filter_policy;
   1be50:	f890 0020 	ldrb.w	r0, [r0, #32]
   1be54:	f3c0 00c1 	ubfx	r0, r0, #3, #2
}
   1be58:	bd08      	pop	{r3, pc}
		return 0;
   1be5a:	2000      	movs	r0, #0
   1be5c:	e7fc      	b.n	1be58 <ull_scan_filter_pol_get+0x10>

0001be5e <rx_release_put>:
{
   1be5e:	b508      	push	{r3, lr}
   1be60:	4601      	mov	r1, r0
	rx->type = NODE_RX_TYPE_RELEASE;
   1be62:	2301      	movs	r3, #1
   1be64:	7103      	strb	r3, [r0, #4]
	ll_rx_put(rx->link, rx);
   1be66:	6800      	ldr	r0, [r0, #0]
   1be68:	f7ed fbbe 	bl	95e8 <ll_rx_put>
}
   1be6c:	bd08      	pop	{r3, pc}

0001be6e <ull_scan_aux_init>:
{
   1be6e:	b508      	push	{r3, lr}
	err = init_reset();
   1be70:	f7ee fb5c 	bl	a52c <init_reset>
}
   1be74:	bd08      	pop	{r3, pc}

0001be76 <ull_scan_aux_reset>:
{
   1be76:	b508      	push	{r3, lr}
	err = init_reset();
   1be78:	f7ee fb58 	bl	a52c <init_reset>
}
   1be7c:	bd08      	pop	{r3, pc}

0001be7e <sync_expire>:
{
   1be7e:	b508      	push	{r3, lr}
	rx = (void *)sync->node_rx_sync_estab;
   1be80:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
	rx->hdr.type = NODE_RX_TYPE_SYNC;
   1be84:	230c      	movs	r3, #12
   1be86:	710b      	strb	r3, [r1, #4]
	rx->hdr.handle = LLL_HANDLE_INVALID;
   1be88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1be8c:	80cb      	strh	r3, [r1, #6]
	se->status = BT_HCI_ERR_CONN_FAIL_TO_ESTAB;
   1be8e:	233e      	movs	r3, #62	; 0x3e
   1be90:	f881 3020 	strb.w	r3, [r1, #32]
	ll_rx_put(rx->hdr.link, rx);
   1be94:	6808      	ldr	r0, [r1, #0]
   1be96:	f7ed fba7 	bl	95e8 <ll_rx_put>
	ll_rx_sched();
   1be9a:	f7ed fbad 	bl	95f8 <ll_rx_sched>
}
   1be9e:	bd08      	pop	{r3, pc}

0001bea0 <ull_sync_init>:
{
   1bea0:	b508      	push	{r3, lr}
	err = init_reset();
   1bea2:	f7ee ff13 	bl	accc <init_reset>
}
   1bea6:	bd08      	pop	{r3, pc}

0001bea8 <ull_sync_is_enabled_get>:
{
   1bea8:	b508      	push	{r3, lr}
	sync = ull_sync_set_get(handle);
   1beaa:	f7ef f8cd 	bl	b048 <ull_sync_set_get>
	if (!sync || !sync->timeout_reload) {
   1beae:	b130      	cbz	r0, 1bebe <ull_sync_is_enabled_get+0x16>
   1beb0:	4602      	mov	r2, r0
   1beb2:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1beb6:	b29b      	uxth	r3, r3
   1beb8:	b11b      	cbz	r3, 1bec2 <ull_sync_is_enabled_get+0x1a>
}
   1beba:	4610      	mov	r0, r2
   1bebc:	bd08      	pop	{r3, pc}
		return NULL;
   1bebe:	2200      	movs	r2, #0
   1bec0:	e7fb      	b.n	1beba <ull_sync_is_enabled_get+0x12>
   1bec2:	2200      	movs	r2, #0
   1bec4:	e7f9      	b.n	1beba <ull_sync_is_enabled_get+0x12>

0001bec6 <ll_sync_recv_enable>:
{
   1bec6:	b510      	push	{r4, lr}
   1bec8:	460c      	mov	r4, r1
	sync = ull_sync_is_enabled_get(handle);
   1beca:	f7ff ffed 	bl	1bea8 <ull_sync_is_enabled_get>
	if (!sync) {
   1bece:	b170      	cbz	r0, 1beee <ll_sync_recv_enable+0x28>
	sync->rx_enable = (enable & BT_HCI_LE_SET_PER_ADV_RECV_ENABLE_ENABLE) ?
   1bed0:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
   1bed4:	f364 0241 	bfi	r2, r4, #1, #1
   1bed8:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
		       1U : 0U;
   1bedc:	f3c4 0440 	ubfx	r4, r4, #1, #1
	sync->nodups = (enable & BT_HCI_LE_SET_PER_ADV_RECV_ENABLE_FILTER_DUPLICATE) ?
   1bee0:	b2d2      	uxtb	r2, r2
   1bee2:	f364 0282 	bfi	r2, r4, #2, #1
   1bee6:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
	return 0;
   1beea:	2000      	movs	r0, #0
}
   1beec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_ADV_IDENTIFIER;
   1beee:	2042      	movs	r0, #66	; 0x42
   1bef0:	e7fc      	b.n	1beec <ll_sync_recv_enable+0x26>

0001bef2 <ull_sync_lll_handle_get>:
{
   1bef2:	b508      	push	{r3, lr}
	return ull_sync_handle_get(HDR_LLL2ULL(lll));
   1bef4:	6800      	ldr	r0, [r0, #0]
   1bef6:	f7ef f8bf 	bl	b078 <ull_sync_handle_get>
}
   1befa:	bd08      	pop	{r3, pc}

0001befc <ull_sync_setup_addr_check>:
{
   1befc:	b570      	push	{r4, r5, r6, lr}
   1befe:	b082      	sub	sp, #8
   1bf00:	4604      	mov	r4, r0
   1bf02:	4615      	mov	r5, r2
   1bf04:	461e      	mov	r6, r3
   1bf06:	f88d 1007 	strb.w	r1, [sp, #7]
	if (IS_ENABLED(CONFIG_BT_CTLR_SYNC_PERIODIC_ADV_LIST) &&
   1bf0a:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
   1bf0e:	f012 0f02 	tst.w	r2, #2
   1bf12:	d10d      	bne.n	1bf30 <ull_sync_setup_addr_check+0x34>
	} else if ((addr_type == scan->periodic.adv_addr_type) &&
   1bf14:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
   1bf18:	f002 0201 	and.w	r2, r2, #1
   1bf1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1bf20:	429a      	cmp	r2, r3
   1bf22:	d039      	beq.n	1bf98 <ull_sync_setup_addr_check+0x9c>
		   (rl_idx < ll_rl_size_get())) {
   1bf24:	f000 f9e0 	bl	1c2e8 <ll_rl_size_get>
	} else if (IS_ENABLED(CONFIG_BT_CTLR_PRIVACY) &&
   1bf28:	42b0      	cmp	r0, r6
   1bf2a:	d845      	bhi.n	1bfb8 <ull_sync_setup_addr_check+0xbc>
}
   1bf2c:	b002      	add	sp, #8
   1bf2e:	bd70      	pop	{r4, r5, r6, pc}
		if (ull_filter_ull_pal_addr_match(addr_type, addr)) {
   1bf30:	4629      	mov	r1, r5
   1bf32:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1bf36:	f7ef fe87 	bl	bc48 <ull_filter_ull_pal_addr_match>
   1bf3a:	b1a8      	cbz	r0, 1bf68 <ull_sync_setup_addr_check+0x6c>
			scan->periodic.adv_addr_type = addr_type;
   1bf3c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bf40:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1bf44:	f362 0300 	bfi	r3, r2, #0, #1
   1bf48:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   1bf4c:	682b      	ldr	r3, [r5, #0]
   1bf4e:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
   1bf52:	88ab      	ldrh	r3, [r5, #4]
   1bf54:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
			scan->periodic.state = LL_SYNC_STATE_ADDR_MATCH;
   1bf58:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bf5c:	2201      	movs	r2, #1
   1bf5e:	f362 03c4 	bfi	r3, r2, #3, #2
   1bf62:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   1bf66:	e7e1      	b.n	1bf2c <ull_sync_setup_addr_check+0x30>
			   ull_filter_ull_pal_listed(rl_idx, &addr_type,
   1bf68:	f104 024a 	add.w	r2, r4, #74	; 0x4a
   1bf6c:	f10d 0107 	add.w	r1, sp, #7
   1bf70:	4630      	mov	r0, r6
   1bf72:	f7ef fec7 	bl	bd04 <ull_filter_ull_pal_listed>
		} else if (IS_ENABLED(CONFIG_BT_CTLR_PRIVACY) &&
   1bf76:	2800      	cmp	r0, #0
   1bf78:	d0d8      	beq.n	1bf2c <ull_sync_setup_addr_check+0x30>
			scan->periodic.adv_addr_type = addr_type;
   1bf7a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bf7e:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1bf82:	f362 0300 	bfi	r3, r2, #0, #1
   1bf86:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
			scan->periodic.state = LL_SYNC_STATE_ADDR_MATCH;
   1bf8a:	b2db      	uxtb	r3, r3
   1bf8c:	2201      	movs	r2, #1
   1bf8e:	f362 03c4 	bfi	r3, r2, #3, #2
   1bf92:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   1bf96:	e7c9      	b.n	1bf2c <ull_sync_setup_addr_check+0x30>
		   !memcmp(addr, scan->periodic.adv_addr, BDADDR_SIZE)) {
   1bf98:	2206      	movs	r2, #6
   1bf9a:	f100 014a 	add.w	r1, r0, #74	; 0x4a
   1bf9e:	4628      	mov	r0, r5
   1bfa0:	f7f8 fcf4 	bl	1498c <memcmp>
	} else if ((addr_type == scan->periodic.adv_addr_type) &&
   1bfa4:	2800      	cmp	r0, #0
   1bfa6:	d1bd      	bne.n	1bf24 <ull_sync_setup_addr_check+0x28>
		scan->periodic.state = LL_SYNC_STATE_ADDR_MATCH;
   1bfa8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bfac:	2201      	movs	r2, #1
   1bfae:	f362 03c4 	bfi	r3, r2, #3, #2
   1bfb2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   1bfb6:	e7b9      	b.n	1bf2c <ull_sync_setup_addr_check+0x30>
		ll_rl_id_addr_get(rl_idx, &addr_type, addr);
   1bfb8:	462a      	mov	r2, r5
   1bfba:	f10d 0107 	add.w	r1, sp, #7
   1bfbe:	4630      	mov	r0, r6
   1bfc0:	f7ef fdda 	bl	bb78 <ll_rl_id_addr_get>
		if ((addr_type == scan->periodic.adv_addr_type) &&
   1bfc4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bfc8:	f003 0301 	and.w	r3, r3, #1
   1bfcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1bfd0:	4293      	cmp	r3, r2
   1bfd2:	d1ab      	bne.n	1bf2c <ull_sync_setup_addr_check+0x30>
		    !memcmp(addr, scan->periodic.adv_addr, BDADDR_SIZE)) {
   1bfd4:	2206      	movs	r2, #6
   1bfd6:	f104 014a 	add.w	r1, r4, #74	; 0x4a
   1bfda:	4628      	mov	r0, r5
   1bfdc:	f7f8 fcd6 	bl	1498c <memcmp>
		if ((addr_type == scan->periodic.adv_addr_type) &&
   1bfe0:	2800      	cmp	r0, #0
   1bfe2:	d1a3      	bne.n	1bf2c <ull_sync_setup_addr_check+0x30>
			scan->periodic.state = LL_SYNC_STATE_ADDR_MATCH;
   1bfe4:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bfe8:	2201      	movs	r2, #1
   1bfea:	f362 03c4 	bfi	r3, r2, #3, #2
   1bfee:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
   1bff2:	e79b      	b.n	1bf2c <ull_sync_setup_addr_check+0x30>

0001bff4 <ull_sync_setup_sid_match>:
{
   1bff4:	b538      	push	{r3, r4, r5, lr}
	return (scan->periodic.state == LL_SYNC_STATE_ADDR_MATCH) &&
   1bff6:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
   1bffa:	f003 0218 	and.w	r2, r3, #24
   1bffe:	2a08      	cmp	r2, #8
   1c000:	d001      	beq.n	1c006 <ull_sync_setup_sid_match+0x12>
   1c002:	2000      	movs	r0, #0
}
   1c004:	bd38      	pop	{r3, r4, r5, pc}
   1c006:	4604      	mov	r4, r0
   1c008:	460d      	mov	r5, r1
	return (scan->periodic.state == LL_SYNC_STATE_ADDR_MATCH) &&
   1c00a:	f013 0f02 	tst.w	r3, #2
   1c00e:	d10a      	bne.n	1c026 <ull_sync_setup_sid_match+0x32>
		 (!scan->periodic.filter_policy &&
   1c010:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
					   scan->periodic.adv_addr, sid)) ||
   1c014:	f013 0f02 	tst.w	r3, #2
   1c018:	d110      	bne.n	1c03c <ull_sync_setup_sid_match+0x48>
		  (sid == scan->periodic.sid)));
   1c01a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
		 (!scan->periodic.filter_policy &&
   1c01e:	42ab      	cmp	r3, r5
   1c020:	d00e      	beq.n	1c040 <ull_sync_setup_sid_match+0x4c>
	return (scan->periodic.state == LL_SYNC_STATE_ADDR_MATCH) &&
   1c022:	2000      	movs	r0, #0
   1c024:	e7ee      	b.n	1c004 <ull_sync_setup_sid_match+0x10>
		  ull_filter_ull_pal_match(scan->periodic.adv_addr_type,
   1c026:	460a      	mov	r2, r1
   1c028:	f104 014a 	add.w	r1, r4, #74	; 0x4a
   1c02c:	f003 0001 	and.w	r0, r3, #1
   1c030:	f7ef fe34 	bl	bc9c <ull_filter_ull_pal_match>
		  scan->periodic.filter_policy &&
   1c034:	2800      	cmp	r0, #0
   1c036:	d0eb      	beq.n	1c010 <ull_sync_setup_sid_match+0x1c>
	return (scan->periodic.state == LL_SYNC_STATE_ADDR_MATCH) &&
   1c038:	2001      	movs	r0, #1
   1c03a:	e7e3      	b.n	1c004 <ull_sync_setup_sid_match+0x10>
   1c03c:	2000      	movs	r0, #0
   1c03e:	e7e1      	b.n	1c004 <ull_sync_setup_sid_match+0x10>
   1c040:	2001      	movs	r0, #1
   1c042:	e7df      	b.n	1c004 <ull_sync_setup_sid_match+0x10>

0001c044 <ull_sync_setup_reset>:
	scan->periodic.sync = NULL;
   1c044:	2200      	movs	r2, #0
   1c046:	6502      	str	r2, [r0, #80]	; 0x50
	scan->lll.is_sync = 0U;
   1c048:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   1c04c:	f362 1345 	bfi	r3, r2, #5, #1
   1c050:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
}
   1c054:	4770      	bx	lr

0001c056 <ll_sync_create_cancel>:
{
   1c056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c05a:	4605      	mov	r5, r0
	scan = ull_scan_set_get(SCAN_HANDLE_1M);
   1c05c:	2000      	movs	r0, #0
   1c05e:	f7ee f8df 	bl	a220 <ull_scan_set_get>
	if (!scan || !scan->periodic.sync) {
   1c062:	b370      	cbz	r0, 1c0c2 <ll_sync_create_cancel+0x6c>
   1c064:	6d02      	ldr	r2, [r0, #80]	; 0x50
   1c066:	b372      	cbz	r2, 1c0c6 <ll_sync_create_cancel+0x70>
	scan->periodic.cancelled = 1U;
   1c068:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
   1c06c:	f042 0204 	orr.w	r2, r2, #4
   1c070:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
	sync = scan->periodic.sync;
   1c074:	6d04      	ldr	r4, [r0, #80]	; 0x50
	if (!sync || sync->timeout_reload) {
   1c076:	b344      	cbz	r4, 1c0ca <ll_sync_create_cancel+0x74>
   1c078:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   1c07c:	b292      	uxth	r2, r2
   1c07e:	bb32      	cbnz	r2, 1c0ce <ll_sync_create_cancel+0x78>
	ull_sync_setup_reset(scan);
   1c080:	f7ff ffe0 	bl	1c044 <ull_sync_setup_reset>
	node_rx = (void *)sync->node_rx_sync_estab;
   1c084:	f8d4 70b4 	ldr.w	r7, [r4, #180]	; 0xb4
	link_sync_estab = node_rx->hdr.link;
   1c088:	f8d7 8000 	ldr.w	r8, [r7]
	link_sync_lost = sync->node_rx_lost.hdr.link;
   1c08c:	4626      	mov	r6, r4
	ll_rx_link_release(link_sync_lost);
   1c08e:	f856 0f90 	ldr.w	r0, [r6, #144]!
   1c092:	f7ed f8df 	bl	9254 <ll_rx_link_release>
	ll_rx_link_release(link_sync_estab);
   1c096:	4640      	mov	r0, r8
   1c098:	f7ed f8dc 	bl	9254 <ll_rx_link_release>
	ll_rx_release(node_rx);
   1c09c:	4638      	mov	r0, r7
   1c09e:	f7ed f9ab 	bl	93f8 <ll_rx_release>
	node_rx->hdr.type = NODE_RX_TYPE_SYNC;
   1c0a2:	230c      	movs	r3, #12
   1c0a4:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
	node_rx->hdr.handle = LLL_HANDLE_INVALID;
   1c0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c0ac:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
	se->status = BT_HCI_ERR_OP_CANCELLED_BY_HOST;
   1c0b0:	2344      	movs	r3, #68	; 0x44
   1c0b2:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	node_rx->hdr.rx_ftr.param = sync;
   1c0b6:	f8c4 4098 	str.w	r4, [r4, #152]	; 0x98
	*rx = node_rx;
   1c0ba:	602e      	str	r6, [r5, #0]
	return 0;
   1c0bc:	2000      	movs	r0, #0
}
   1c0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c0c2:	200c      	movs	r0, #12
   1c0c4:	e7fb      	b.n	1c0be <ll_sync_create_cancel+0x68>
   1c0c6:	200c      	movs	r0, #12
   1c0c8:	e7f9      	b.n	1c0be <ll_sync_create_cancel+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c0ca:	200c      	movs	r0, #12
   1c0cc:	e7f7      	b.n	1c0be <ll_sync_create_cancel+0x68>
   1c0ce:	200c      	movs	r0, #12
   1c0d0:	e7f5      	b.n	1c0be <ll_sync_create_cancel+0x68>

0001c0d2 <ull_sync_reset>:
{
   1c0d2:	b510      	push	{r4, lr}
   1c0d4:	b082      	sub	sp, #8
	(void)ll_sync_create_cancel(&rx);
   1c0d6:	a801      	add	r0, sp, #4
   1c0d8:	f7ff ffbd 	bl	1c056 <ll_sync_create_cancel>
	for (handle = 0U; handle < CONFIG_BT_PER_ADV_SYNC_MAX; handle++) {
   1c0dc:	2400      	movs	r4, #0
   1c0de:	b11c      	cbz	r4, 1c0e8 <ull_sync_reset+0x16>
	err = init_reset();
   1c0e0:	f7ee fdf4 	bl	accc <init_reset>
}
   1c0e4:	b002      	add	sp, #8
   1c0e6:	bd10      	pop	{r4, pc}
		(void)ll_sync_terminate(handle);
   1c0e8:	4620      	mov	r0, r4
   1c0ea:	f7ef f821 	bl	b130 <ll_sync_terminate>
	for (handle = 0U; handle < CONFIG_BT_PER_ADV_SYNC_MAX; handle++) {
   1c0ee:	3401      	adds	r4, #1
   1c0f0:	b2a4      	uxth	r4, r4
   1c0f2:	e7f4      	b.n	1c0de <ull_sync_reset+0xc>

0001c0f4 <ull_df_sync_cfg_init>:
{
   1c0f4:	b510      	push	{r4, lr}
   1c0f6:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   1c0f8:	221e      	movs	r2, #30
   1c0fa:	2100      	movs	r1, #0
   1c0fc:	3002      	adds	r0, #2
   1c0fe:	f7f8 fc79 	bl	149f4 <memset>
	df_cfg->first = 0U;
   1c102:	2300      	movs	r3, #0
   1c104:	7023      	strb	r3, [r4, #0]
	df_cfg->last = 0U;
   1c106:	7063      	strb	r3, [r4, #1]
}
   1c108:	bd10      	pop	{r4, pc}

0001c10a <ull_df_sync_cfg_is_not_enabled>:
/* Return information if DF sync configuration data were modified since last
 * call to lll_df_sync_cfg_latest_get.
 */
static inline uint8_t lll_df_sync_cfg_is_modified(struct lll_df_sync *df_cfg)
{
	return df_cfg->first != df_cfg->last;
   1c10a:	7802      	ldrb	r2, [r0, #0]
   1c10c:	b2d2      	uxtb	r2, r2
   1c10e:	7843      	ldrb	r3, [r0, #1]
	if (lll_df_sync_cfg_is_modified(df_cfg)) {
   1c110:	429a      	cmp	r2, r3
   1c112:	d009      	beq.n	1c128 <ull_df_sync_cfg_is_not_enabled+0x1e>
	return &df_cfg->cfg[df_cfg->last];
   1c114:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c118:	4418      	add	r0, r3
   1c11a:	3002      	adds	r0, #2
	return !cfg->is_enabled;
   1c11c:	7800      	ldrb	r0, [r0, #0]
   1c11e:	f080 0001 	eor.w	r0, r0, #1
}
   1c122:	f000 0001 	and.w	r0, r0, #1
   1c126:	4770      	bx	lr
	return &df_cfg->cfg[df_cfg->first];
   1c128:	7803      	ldrb	r3, [r0, #0]
   1c12a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c12e:	4418      	add	r0, r3
   1c130:	3002      	adds	r0, #2
   1c132:	e7f3      	b.n	1c11c <ull_df_sync_cfg_is_not_enabled+0x12>

0001c134 <ull_df_init>:
{
   1c134:	b508      	push	{r3, lr}
	err = init_reset();
   1c136:	f7ef fadf 	bl	b6f8 <init_reset>
}
   1c13a:	bd08      	pop	{r3, pc}

0001c13c <ull_df_reset>:
{
   1c13c:	b508      	push	{r3, lr}
	err = init_reset();
   1c13e:	f7ef fadb 	bl	b6f8 <init_reset>
}
   1c142:	bd08      	pop	{r3, pc}

0001c144 <ll_df_read_ant_inf>:
 * @param[out]max_cte_len               Pointer to store maximum length of CTE
 *                                      in [8us] units.
 */
void ll_df_read_ant_inf(uint8_t *switch_sample_rates, uint8_t *num_ant,
			uint8_t *max_switch_pattern_len, uint8_t *max_cte_len)
{
   1c144:	b538      	push	{r3, r4, r5, lr}
   1c146:	460d      	mov	r5, r1
   1c148:	461c      	mov	r4, r3
	*switch_sample_rates = 0;
   1c14a:	2300      	movs	r3, #0
   1c14c:	7003      	strb	r3, [r0, #0]
		*switch_sample_rates |= DF_AOD_1US_TX;
	}

	if (IS_ENABLED(CONFIG_BT_CTLR_DF_CTE_RX) &&
	    IS_ENABLED(CONFIG_BT_CTLR_DF_CTE_RX_SAMPLE_1US)) {
		*switch_sample_rates |= DF_AOD_1US_RX;
   1c14e:	2302      	movs	r3, #2
   1c150:	7003      	strb	r3, [r0, #0]
	}

	if (IS_ENABLED(CONFIG_BT_CTLR_DF_ANT_SWITCH_RX) &&
	    IS_ENABLED(CONFIG_BT_CTLR_DF_CTE_RX_SAMPLE_1US)) {
		*switch_sample_rates |= DF_AOA_1US;
   1c152:	2306      	movs	r3, #6
   1c154:	7003      	strb	r3, [r0, #0]
	}

	*max_switch_pattern_len = BT_CTLR_DF_MAX_ANT_SW_PATTERN_LEN;
   1c156:	230c      	movs	r3, #12
   1c158:	7013      	strb	r3, [r2, #0]
	*num_ant = lll_df_ant_num_get();
   1c15a:	f000 fb69 	bl	1c830 <lll_df_ant_num_get>
   1c15e:	7028      	strb	r0, [r5, #0]
	*max_cte_len = LLL_DF_MAX_CTE_LEN;
   1c160:	2314      	movs	r3, #20
   1c162:	7023      	strb	r3, [r4, #0]
}
   1c164:	bd38      	pop	{r3, r4, r5, pc}

0001c166 <chan_sel_remap>:
{
   1c166:	b510      	push	{r4, lr}
   1c168:	4604      	mov	r4, r0
	byte_count = 5U;
   1c16a:	2205      	movs	r2, #5
	chan_next = 0U;
   1c16c:	2000      	movs	r0, #0
	while (byte_count--) {
   1c16e:	e012      	b.n	1c196 <chan_sel_remap+0x30>
			chan_next++;
   1c170:	3001      	adds	r0, #1
   1c172:	b2c0      	uxtb	r0, r0
			bite >>= 1;
   1c174:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		while (bit_count--) {
   1c178:	461a      	mov	r2, r3
   1c17a:	1e53      	subs	r3, r2, #1
   1c17c:	b2db      	uxtb	r3, r3
   1c17e:	b132      	cbz	r2, 1c18e <chan_sel_remap+0x28>
			if (bite & 0x01) {
   1c180:	f01c 0f01 	tst.w	ip, #1
   1c184:	d0f4      	beq.n	1c170 <chan_sel_remap+0xa>
				if (chan_index == 0U) {
   1c186:	b111      	cbz	r1, 1c18e <chan_sel_remap+0x28>
				chan_index--;
   1c188:	3901      	subs	r1, #1
   1c18a:	b2c9      	uxtb	r1, r1
   1c18c:	e7f0      	b.n	1c170 <chan_sel_remap+0xa>
		if (bit_count < 8) {
   1c18e:	2b07      	cmp	r3, #7
   1c190:	d909      	bls.n	1c1a6 <chan_sel_remap+0x40>
		chan_map++;
   1c192:	3401      	adds	r4, #1
	while (byte_count--) {
   1c194:	4672      	mov	r2, lr
   1c196:	1e53      	subs	r3, r2, #1
   1c198:	fa5f fe83 	uxtb.w	lr, r3
   1c19c:	b11a      	cbz	r2, 1c1a6 <chan_sel_remap+0x40>
		bite = *chan_map;
   1c19e:	f894 c000 	ldrb.w	ip, [r4]
		bit_count = 8U;
   1c1a2:	2208      	movs	r2, #8
		while (bit_count--) {
   1c1a4:	e7e9      	b.n	1c17a <chan_sel_remap+0x14>
}
   1c1a6:	bd10      	pop	{r4, pc}

0001c1a8 <chan_perm>:

static uint16_t chan_perm(uint16_t i)
{
   1c1a8:	b538      	push	{r3, r4, r5, lr}
   1c1aa:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1c1ac:	0a00      	lsrs	r0, r0, #8
   1c1ae:	f7ef fabd 	bl	b72c <chan_rev_8>
   1c1b2:	0205      	lsls	r5, r0, #8
   1c1b4:	b2e0      	uxtb	r0, r4
   1c1b6:	f7ef fab9 	bl	b72c <chan_rev_8>
   1c1ba:	b200      	sxth	r0, r0
   1c1bc:	4328      	orrs	r0, r5
}
   1c1be:	b280      	uxth	r0, r0
   1c1c0:	bd38      	pop	{r3, r4, r5, pc}

0001c1c2 <chan_mam>:

static uint16_t chan_mam(uint16_t a, uint16_t b)
{
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1c1c2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1c1c6:	fa11 f080 	uxtah	r0, r1, r0
}
   1c1ca:	b280      	uxth	r0, r0
   1c1cc:	4770      	bx	lr

0001c1ce <chan_prn_s>:

static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
   1c1ce:	b538      	push	{r3, r4, r5, lr}
   1c1d0:	460d      	mov	r5, r1
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1c1d2:	4048      	eors	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1c1d4:	2400      	movs	r4, #0
   1c1d6:	e006      	b.n	1c1e6 <chan_prn_s+0x18>
		prn_s = chan_perm(prn_s);
   1c1d8:	f7ff ffe6 	bl	1c1a8 <chan_perm>
		prn_s = chan_mam(prn_s, chan_id);
   1c1dc:	4629      	mov	r1, r5
   1c1de:	f7ff fff0 	bl	1c1c2 <chan_mam>
	for (iterate = 0U; iterate < 3; iterate++) {
   1c1e2:	3401      	adds	r4, #1
   1c1e4:	b2e4      	uxtb	r4, r4
   1c1e6:	2c02      	cmp	r4, #2
   1c1e8:	d9f6      	bls.n	1c1d8 <chan_prn_s+0xa>
	}

	return prn_s;
}
   1c1ea:	bd38      	pop	{r3, r4, r5, pc}

0001c1ec <chan_prn_e>:

static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
   1c1ec:	b510      	push	{r4, lr}
   1c1ee:	460c      	mov	r4, r1
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
   1c1f0:	f7ff ffed 	bl	1c1ce <chan_prn_s>
	prn_e ^= chan_id;
   1c1f4:	4060      	eors	r0, r4

	return prn_e;
}
   1c1f6:	b280      	uxth	r0, r0
   1c1f8:	bd10      	pop	{r4, pc}

0001c1fa <lll_chan_id>:
	uint16_t aa_ls = ((uint16_t)access_addr[1] << 8) | access_addr[0];
   1c1fa:	7843      	ldrb	r3, [r0, #1]
   1c1fc:	7802      	ldrb	r2, [r0, #0]
   1c1fe:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	uint16_t aa_ms = ((uint16_t)access_addr[3] << 8) | access_addr[2];
   1c202:	78c1      	ldrb	r1, [r0, #3]
   1c204:	7883      	ldrb	r3, [r0, #2]
   1c206:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1c20a:	ea82 0003 	eor.w	r0, r2, r3
   1c20e:	4770      	bx	lr

0001c210 <filter_clear>:
	filter->enable_bitmask = 0;
   1c210:	2300      	movs	r3, #0
   1c212:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   1c214:	7043      	strb	r3, [r0, #1]
}
   1c216:	4770      	bx	lr

0001c218 <filter_find>:
{
   1c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!filter->enable_bitmask) {
   1c21a:	7803      	ldrb	r3, [r0, #0]
   1c21c:	b30b      	cbz	r3, 1c262 <filter_find+0x4a>
   1c21e:	4605      	mov	r5, r0
   1c220:	460e      	mov	r6, r1
   1c222:	4617      	mov	r7, r2
	index = LLL_FILTER_SIZE;
   1c224:	2308      	movs	r3, #8
   1c226:	e000      	b.n	1c22a <filter_find+0x12>
{
   1c228:	4623      	mov	r3, r4
	while (index--) {
   1c22a:	1e5c      	subs	r4, r3, #1
   1c22c:	b1bb      	cbz	r3, 1c25e <filter_find+0x46>
		if ((filter->enable_bitmask & BIT(index)) &&
   1c22e:	782b      	ldrb	r3, [r5, #0]
   1c230:	40e3      	lsrs	r3, r4
   1c232:	f013 0f01 	tst.w	r3, #1
   1c236:	d0f7      	beq.n	1c228 <filter_find+0x10>
		    (((filter->addr_type_bitmask >> index) & 0x01) ==
   1c238:	786b      	ldrb	r3, [r5, #1]
   1c23a:	4123      	asrs	r3, r4
   1c23c:	4073      	eors	r3, r6
		if ((filter->enable_bitmask & BIT(index)) &&
   1c23e:	f013 0f01 	tst.w	r3, #1
   1c242:	d1f1      	bne.n	1c228 <filter_find+0x10>
		    !memcmp(filter->bdaddr[index], bdaddr, BDADDR_SIZE)) {
   1c244:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1c248:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1c24c:	2206      	movs	r2, #6
   1c24e:	4639      	mov	r1, r7
   1c250:	3002      	adds	r0, #2
   1c252:	f7f8 fb9b 	bl	1498c <memcmp>
		     (addr_type & 0x01)) &&
   1c256:	2800      	cmp	r0, #0
   1c258:	d1e6      	bne.n	1c228 <filter_find+0x10>
			return index;
   1c25a:	4620      	mov	r0, r4
   1c25c:	e000      	b.n	1c260 <filter_find+0x48>
	return FILTER_IDX_NONE;
   1c25e:	20ff      	movs	r0, #255	; 0xff
}
   1c260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return FILTER_IDX_NONE;
   1c262:	20ff      	movs	r0, #255	; 0xff
   1c264:	e7fc      	b.n	1c260 <filter_find+0x48>

0001c266 <filter_insert>:
{
   1c266:	b500      	push	{lr}
	filter->enable_bitmask |= BIT(index);
   1c268:	f04f 0c01 	mov.w	ip, #1
   1c26c:	fa0c fe01 	lsl.w	lr, ip, r1
   1c270:	f890 c000 	ldrb.w	ip, [r0]
   1c274:	ea4c 0c0e 	orr.w	ip, ip, lr
   1c278:	f880 c000 	strb.w	ip, [r0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1c27c:	f002 0201 	and.w	r2, r2, #1
   1c280:	408a      	lsls	r2, r1
   1c282:	f890 c001 	ldrb.w	ip, [r0, #1]
   1c286:	ea4c 0202 	orr.w	r2, ip, r2
   1c28a:	7042      	strb	r2, [r0, #1]
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1c28c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1c290:	eb00 0041 	add.w	r0, r0, r1, lsl #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c294:	681a      	ldr	r2, [r3, #0]
   1c296:	f8c0 2002 	str.w	r2, [r0, #2]
   1c29a:	889b      	ldrh	r3, [r3, #4]
   1c29c:	80c3      	strh	r3, [r0, #6]
}
   1c29e:	f85d fb04 	ldr.w	pc, [sp], #4

0001c2a2 <ll_fal_size_get>:
}
   1c2a2:	2008      	movs	r0, #8
   1c2a4:	4770      	bx	lr

0001c2a6 <ll_fal_clear>:
{
   1c2a6:	b508      	push	{r3, lr}
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c2a8:	2000      	movs	r0, #0
   1c2aa:	f7ff fdcd 	bl	1be48 <ull_scan_filter_pol_get>
   1c2ae:	f010 0f01 	tst.w	r0, #1
   1c2b2:	d103      	bne.n	1c2bc <ll_fal_clear+0x16>
	fal_clear();
   1c2b4:	f7ef fa7c 	bl	b7b0 <fal_clear>
	return 0;
   1c2b8:	2000      	movs	r0, #0
}
   1c2ba:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c2bc:	200c      	movs	r0, #12
   1c2be:	e7fc      	b.n	1c2ba <ll_fal_clear+0x14>

0001c2c0 <ll_fal_remove>:
{
   1c2c0:	b510      	push	{r4, lr}
   1c2c2:	4604      	mov	r4, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c2c4:	2000      	movs	r0, #0
   1c2c6:	f7ff fdbf 	bl	1be48 <ull_scan_filter_pol_get>
   1c2ca:	f010 0f01 	tst.w	r0, #1
   1c2ce:	d107      	bne.n	1c2e0 <ll_fal_remove+0x20>
	if (addr->type == ADDR_TYPE_ANON) {
   1c2d0:	7823      	ldrb	r3, [r4, #0]
   1c2d2:	2bff      	cmp	r3, #255	; 0xff
   1c2d4:	d006      	beq.n	1c2e4 <ll_fal_remove+0x24>
	return fal_remove(addr);
   1c2d6:	4620      	mov	r0, r4
   1c2d8:	f7ef fafa 	bl	b8d0 <fal_remove>
   1c2dc:	b2c0      	uxtb	r0, r0
}
   1c2de:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c2e0:	200c      	movs	r0, #12
   1c2e2:	e7fc      	b.n	1c2de <ll_fal_remove+0x1e>
		return 0;
   1c2e4:	2000      	movs	r0, #0
   1c2e6:	e7fa      	b.n	1c2de <ll_fal_remove+0x1e>

0001c2e8 <ll_rl_size_get>:
}
   1c2e8:	2008      	movs	r0, #8
   1c2ea:	4770      	bx	lr

0001c2ec <ll_rl_clear>:
{
   1c2ec:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1c2ee:	2000      	movs	r0, #0
   1c2f0:	f7ef fc0c 	bl	bb0c <rl_access_check>
   1c2f4:	b118      	cbz	r0, 1c2fe <ll_rl_clear+0x12>
	rl_clear();
   1c2f6:	f7ef fa7b 	bl	b7f0 <rl_clear>
	return 0;
   1c2fa:	2000      	movs	r0, #0
}
   1c2fc:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c2fe:	200c      	movs	r0, #12
   1c300:	e7fc      	b.n	1c2fc <ll_rl_clear+0x10>

0001c302 <ll_pal_size_get>:
}
   1c302:	2008      	movs	r0, #8
   1c304:	4770      	bx	lr

0001c306 <ll_pal_clear>:
{
   1c306:	b508      	push	{r3, lr}
	pal_clear();
   1c308:	f7ef fa88 	bl	b81c <pal_clear>
}
   1c30c:	2000      	movs	r0, #0
   1c30e:	bd08      	pop	{r3, pc}

0001c310 <ll_pal_remove>:
{
   1c310:	b508      	push	{r3, lr}
	if (addr->type == ADDR_TYPE_ANON) {
   1c312:	7803      	ldrb	r3, [r0, #0]
   1c314:	2bff      	cmp	r3, #255	; 0xff
   1c316:	d003      	beq.n	1c320 <ll_pal_remove+0x10>
	return pal_remove(addr, sid);
   1c318:	f7ef fb70 	bl	b9fc <pal_remove>
   1c31c:	b2c0      	uxtb	r0, r0
}
   1c31e:	bd08      	pop	{r3, pc}
		return 0;
   1c320:	2000      	movs	r0, #0
   1c322:	e7fc      	b.n	1c31e <ll_pal_remove+0xe>

0001c324 <ull_filter_lll_fal_match>:
{
   1c324:	b510      	push	{r4, lr}
   1c326:	461c      	mov	r4, r3
	*devmatch_id = filter_find(filter, addr_type, addr);
   1c328:	f7ff ff76 	bl	1c218 <filter_find>
   1c32c:	b2c0      	uxtb	r0, r0
   1c32e:	7020      	strb	r0, [r4, #0]
}
   1c330:	38ff      	subs	r0, #255	; 0xff
   1c332:	bf18      	it	ne
   1c334:	2001      	movne	r0, #1
   1c336:	bd10      	pop	{r4, pc}

0001c338 <ull_filter_adv_scan_state_cb>:
{
   1c338:	b508      	push	{r3, lr}
	if (bm) {
   1c33a:	b110      	cbz	r0, 1c342 <ull_filter_adv_scan_state_cb+0xa>
		rpa_refresh_start();
   1c33c:	f7ef fc02 	bl	bb44 <rpa_refresh_start>
}
   1c340:	bd08      	pop	{r3, pc}
		rpa_refresh_stop();
   1c342:	f7ef fbf7 	bl	bb34 <rpa_refresh_stop>
}
   1c346:	e7fb      	b.n	1c340 <ull_filter_adv_scan_state_cb+0x8>

0001c348 <ll_fal_add>:
{
   1c348:	b510      	push	{r4, lr}
   1c34a:	4604      	mov	r4, r0
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1c34c:	2000      	movs	r0, #0
   1c34e:	f7ff fd7b 	bl	1be48 <ull_scan_filter_pol_get>
   1c352:	f010 0f01 	tst.w	r0, #1
   1c356:	d107      	bne.n	1c368 <ll_fal_add+0x20>
	if (addr->type == ADDR_TYPE_ANON) {
   1c358:	7823      	ldrb	r3, [r4, #0]
   1c35a:	2bff      	cmp	r3, #255	; 0xff
   1c35c:	d006      	beq.n	1c36c <ll_fal_add+0x24>
	return fal_add(addr);
   1c35e:	4620      	mov	r0, r4
   1c360:	f7ef fe9c 	bl	c09c <fal_add>
   1c364:	b2c0      	uxtb	r0, r0
}
   1c366:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c368:	200c      	movs	r0, #12
   1c36a:	e7fc      	b.n	1c366 <ll_fal_add+0x1e>
		return 0;
   1c36c:	2000      	movs	r0, #0
   1c36e:	e7fa      	b.n	1c366 <ll_fal_add+0x1e>

0001c370 <ll_pal_add>:
{
   1c370:	b508      	push	{r3, lr}
	if (addr->type == ADDR_TYPE_ANON) {
   1c372:	7803      	ldrb	r3, [r0, #0]
   1c374:	2bff      	cmp	r3, #255	; 0xff
   1c376:	d003      	beq.n	1c380 <ll_pal_add+0x10>
	return pal_add(addr, sid);
   1c378:	f7f0 f8f6 	bl	c568 <pal_add>
   1c37c:	b2c0      	uxtb	r0, r0
}
   1c37e:	bd08      	pop	{r3, pc}
		return 0;
   1c380:	2000      	movs	r0, #0
   1c382:	e7fc      	b.n	1c37e <ll_pal_add+0xe>

0001c384 <init_reset>:
}
   1c384:	2000      	movs	r0, #0
   1c386:	4770      	bx	lr

0001c388 <radio_nrf5_isr>:
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c388:	4668      	mov	r0, sp
   1c38a:	f020 0107 	bic.w	r1, r0, #7
   1c38e:	468d      	mov	sp, r1
   1c390:	b501      	push	{r0, lr}
	isr_radio();
   1c392:	f7f3 fcf5 	bl	fd80 <isr_radio>
	ISR_DIRECT_PM();
   1c396:	f7e8 fafd 	bl	4994 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c39a:	f7e8 fc03 	bl	4ba4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c39e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c3a2:	4685      	mov	sp, r0
   1c3a4:	4770      	bx	lr

0001c3a6 <swi_lll_nrf5_isr>:
{
   1c3a6:	b508      	push	{r3, lr}
	mayfly_run(TICKER_USER_ID_LLL);
   1c3a8:	2000      	movs	r0, #0
   1c3aa:	f7ea fe35 	bl	7018 <mayfly_run>
}
   1c3ae:	bd08      	pop	{r3, pc}

0001c3b0 <isr_race>:
{
   1c3b0:	b508      	push	{r3, lr}
	radio_status_reset();
   1c3b2:	f7f3 fcb7 	bl	fd24 <radio_status_reset>
}
   1c3b6:	bd08      	pop	{r3, pc}

0001c3b8 <lll_reset>:
{
   1c3b8:	b508      	push	{r3, lr}
	err = init_reset();
   1c3ba:	f7ff ffe3 	bl	1c384 <init_reset>
}
   1c3be:	bd08      	pop	{r3, pc}

0001c3c0 <lll_prepare_done>:
}
   1c3c0:	2000      	movs	r0, #0
   1c3c2:	4770      	bx	lr

0001c3c4 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1c3c4:	6883      	ldr	r3, [r0, #8]
   1c3c6:	2b00      	cmp	r3, #0
   1c3c8:	db04      	blt.n	1c3d4 <lll_event_offset_get+0x10>
		return MAX(ull->ticks_active_to_start,
   1c3ca:	6840      	ldr	r0, [r0, #4]
   1c3cc:	4298      	cmp	r0, r3
   1c3ce:	bf38      	it	cc
   1c3d0:	4618      	movcc	r0, r3
}
   1c3d2:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1c3d4:	68c3      	ldr	r3, [r0, #12]
   1c3d6:	6840      	ldr	r0, [r0, #4]
   1c3d8:	4298      	cmp	r0, r3
   1c3da:	bf38      	it	cc
   1c3dc:	4618      	movcc	r0, r3
   1c3de:	4770      	bx	lr

0001c3e0 <lll_preempt_calc>:
{
   1c3e0:	b510      	push	{r4, lr}
   1c3e2:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1c3e4:	f7fe f933 	bl	1a64e <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1c3e8:	1b02      	subs	r2, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1c3ea:	f412 0000 	ands.w	r0, r2, #8388608	; 0x800000
   1c3ee:	d103      	bne.n	1c3f8 <lll_preempt_calc+0x18>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1c3f0:	3203      	adds	r2, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1c3f2:	2a09      	cmp	r2, #9
   1c3f4:	d802      	bhi.n	1c3fc <lll_preempt_calc+0x1c>
}
   1c3f6:	bd10      	pop	{r4, pc}
		return 0;
   1c3f8:	2000      	movs	r0, #0
   1c3fa:	e7fc      	b.n	1c3f6 <lll_preempt_calc+0x16>
		return 1;
   1c3fc:	2001      	movs	r0, #1
   1c3fe:	e7fa      	b.n	1c3f6 <lll_preempt_calc+0x16>

0001c400 <lll_radio_rx_ready_delay_get>:
{
   1c400:	b508      	push	{r3, lr}
	return radio_rx_ready_delay_get(phy, flags);
   1c402:	f000 faa3 	bl	1c94c <radio_rx_ready_delay_get>
}
   1c406:	bd08      	pop	{r3, pc}

0001c408 <lll_isr_tx_status_reset>:
{
   1c408:	b508      	push	{r3, lr}
	radio_status_reset();
   1c40a:	f7f3 fc8b 	bl	fd24 <radio_status_reset>
	radio_tmr_status_reset();
   1c40e:	f7f3 fe6f 	bl	100f0 <radio_tmr_status_reset>
}
   1c412:	bd08      	pop	{r3, pc}

0001c414 <lll_isr_rx_status_reset>:
{
   1c414:	b508      	push	{r3, lr}
	radio_status_reset();
   1c416:	f7f3 fc85 	bl	fd24 <radio_status_reset>
	radio_tmr_status_reset();
   1c41a:	f7f3 fe69 	bl	100f0 <radio_tmr_status_reset>
	radio_rssi_status_reset();
   1c41e:	f7f3 fde1 	bl	ffe4 <radio_rssi_status_reset>
}
   1c422:	bd08      	pop	{r3, pc}

0001c424 <lll_isr_status_reset>:
{
   1c424:	b508      	push	{r3, lr}
	radio_status_reset();
   1c426:	f7f3 fc7d 	bl	fd24 <radio_status_reset>
	radio_tmr_status_reset();
   1c42a:	f7f3 fe61 	bl	100f0 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1c42e:	f7f3 fe29 	bl	10084 <radio_filter_status_reset>
	radio_ar_status_reset();
   1c432:	f7f3 ffe5 	bl	10400 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1c436:	f7f3 fdd5 	bl	ffe4 <radio_rssi_status_reset>
}
   1c43a:	bd08      	pop	{r3, pc}

0001c43c <lll_clock_ppm_local_get>:
}
   1c43c:	2032      	movs	r0, #50	; 0x32
   1c43e:	4770      	bx	lr

0001c440 <init_reset>:
}
   1c440:	2000      	movs	r0, #0
   1c442:	4770      	bx	lr

0001c444 <prepare_cb>:
{
   1c444:	b508      	push	{r3, lr}
	return common_prepare_cb(p, false);
   1c446:	2100      	movs	r1, #0
   1c448:	f7f0 ff78 	bl	d33c <common_prepare_cb>
}
   1c44c:	bd08      	pop	{r3, pc}

0001c44e <isr_done>:
{
   1c44e:	b508      	push	{r3, lr}
	isr_common_done(param);
   1c450:	f7f1 f89c 	bl	d58c <isr_common_done>
	radio_rx_enable();
   1c454:	f7f3 fc4e 	bl	fcf4 <radio_rx_enable>
	radio_tmr_end_capture();
   1c458:	f7f3 ff82 	bl	10360 <radio_tmr_end_capture>
}
   1c45c:	bd08      	pop	{r3, pc}

0001c45e <isr_scan_tgta_check>:
{
   1c45e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c462:	4605      	mov	r5, r0
   1c464:	4688      	mov	r8, r1
   1c466:	4614      	mov	r4, r2
   1c468:	461e      	mov	r6, r3
   1c46a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1c46e:	464a      	mov	r2, r9
   1c470:	4619      	mov	r1, r3
   1c472:	4620      	mov	r0, r4
   1c474:	f7f0 fa76 	bl	c964 <ull_filter_lll_rl_addr_resolve>
   1c478:	4607      	mov	r7, r0
   1c47a:	bb60      	cbnz	r0, 1c4d6 <isr_scan_tgta_check+0x78>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1c47c:	f1b8 0f00 	cmp.w	r8, #0
   1c480:	d003      	beq.n	1c48a <isr_scan_tgta_check+0x2c>
   1c482:	7c2b      	ldrb	r3, [r5, #16]
   1c484:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c488:	d110      	bne.n	1c4ac <isr_scan_tgta_check+0x4e>
	return (((lll->init_addr_type == addr_type) &&
   1c48a:	792b      	ldrb	r3, [r5, #4]
   1c48c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c490:	42a3      	cmp	r3, r4
   1c492:	d010      	beq.n	1c4b6 <isr_scan_tgta_check+0x58>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1c494:	792b      	ldrb	r3, [r5, #4]
   1c496:	f013 0f10 	tst.w	r3, #16
   1c49a:	d01b      	beq.n	1c4d4 <isr_scan_tgta_check+0x76>
   1c49c:	b1f4      	cbz	r4, 1c4dc <isr_scan_tgta_check+0x7e>
	    ((addr[5] & 0xc0) == 0x40)) {
   1c49e:	7973      	ldrb	r3, [r6, #5]
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1c4a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c4a4:	2b40      	cmp	r3, #64	; 0x40
   1c4a6:	d010      	beq.n	1c4ca <isr_scan_tgta_check+0x6c>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c4a8:	2700      	movs	r7, #0
   1c4aa:	e014      	b.n	1c4d6 <isr_scan_tgta_check+0x78>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1c4ac:	4648      	mov	r0, r9
   1c4ae:	f7f0 f8b3 	bl	c618 <ull_filter_lll_lrpa_get>
   1c4b2:	b980      	cbnz	r0, 1c4d6 <isr_scan_tgta_check+0x78>
   1c4b4:	e7e9      	b.n	1c48a <isr_scan_tgta_check+0x2c>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c4b6:	2206      	movs	r2, #6
   1c4b8:	4631      	mov	r1, r6
   1c4ba:	f105 0012 	add.w	r0, r5, #18
   1c4be:	f7f8 fa65 	bl	1498c <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1c4c2:	2800      	cmp	r0, #0
   1c4c4:	d1e6      	bne.n	1c494 <isr_scan_tgta_check+0x36>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c4c6:	2701      	movs	r7, #1
   1c4c8:	e005      	b.n	1c4d6 <isr_scan_tgta_check+0x78>
		if (dir_report) {
   1c4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c4cc:	b143      	cbz	r3, 1c4e0 <isr_scan_tgta_check+0x82>
			*dir_report = true;
   1c4ce:	2701      	movs	r7, #1
   1c4d0:	701f      	strb	r7, [r3, #0]
   1c4d2:	e000      	b.n	1c4d6 <isr_scan_tgta_check+0x78>
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c4d4:	2700      	movs	r7, #0
}
   1c4d6:	4638      	mov	r0, r7
   1c4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1c4dc:	2700      	movs	r7, #0
   1c4de:	e7fa      	b.n	1c4d6 <isr_scan_tgta_check+0x78>
   1c4e0:	2701      	movs	r7, #1
   1c4e2:	e7f8      	b.n	1c4d6 <isr_scan_tgta_check+0x78>

0001c4e4 <isr_window>:
{
   1c4e4:	b510      	push	{r4, lr}
   1c4e6:	4604      	mov	r4, r0
	isr_common_done(param);
   1c4e8:	f7f1 f850 	bl	d58c <isr_common_done>
	if (++lll->chan == ADV_CHAN_MAX) {
   1c4ec:	7922      	ldrb	r2, [r4, #4]
   1c4ee:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1c4f2:	3301      	adds	r3, #1
   1c4f4:	f003 0303 	and.w	r3, r3, #3
   1c4f8:	f363 0242 	bfi	r2, r3, #1, #2
   1c4fc:	7122      	strb	r2, [r4, #4]
   1c4fe:	2b03      	cmp	r3, #3
   1c500:	d00b      	beq.n	1c51a <isr_window+0x36>
	lll_chan_set(37 + lll->chan);
   1c502:	7920      	ldrb	r0, [r4, #4]
   1c504:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1c508:	3025      	adds	r0, #37	; 0x25
   1c50a:	f7f0 fd97 	bl	d03c <lll_chan_set>
	remainder_us = radio_tmr_start_now(0);
   1c50e:	2000      	movs	r0, #0
   1c510:	f7f3 fea4 	bl	1025c <radio_tmr_start_now>
	radio_tmr_end_capture();
   1c514:	f7f3 ff24 	bl	10360 <radio_tmr_end_capture>
}
   1c518:	bd10      	pop	{r4, pc}
		lll->chan = 0U;
   1c51a:	b2d3      	uxtb	r3, r2
   1c51c:	f36f 0342 	bfc	r3, #1, #2
   1c520:	7123      	strb	r3, [r4, #4]
   1c522:	e7ee      	b.n	1c502 <isr_window+0x1e>

0001c524 <resume_prepare_cb>:
{
   1c524:	b570      	push	{r4, r5, r6, lr}
   1c526:	4604      	mov	r4, r0
	ull = HDR_LLL2ULL(p->param);
   1c528:	68c3      	ldr	r3, [r0, #12]
   1c52a:	681e      	ldr	r6, [r3, #0]
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1c52c:	f7fe f88f 	bl	1a64e <ticker_ticks_now_get>
   1c530:	4605      	mov	r5, r0
   1c532:	4630      	mov	r0, r6
   1c534:	f7ff ff46 	bl	1c3c4 <lll_event_offset_get>
   1c538:	1a2d      	subs	r5, r5, r0
   1c53a:	6025      	str	r5, [r4, #0]
	p->remainder = 0;
   1c53c:	2300      	movs	r3, #0
   1c53e:	6063      	str	r3, [r4, #4]
	p->lazy = 0;
   1c540:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1c542:	2101      	movs	r1, #1
   1c544:	4620      	mov	r0, r4
   1c546:	f7f0 fef9 	bl	d33c <common_prepare_cb>
}
   1c54a:	bd70      	pop	{r4, r5, r6, pc}

0001c54c <lll_scan_init>:
{
   1c54c:	b508      	push	{r3, lr}
	err = init_reset();
   1c54e:	f7ff ff77 	bl	1c440 <init_reset>
}
   1c552:	bd08      	pop	{r3, pc}

0001c554 <lll_scan_reset>:
{
   1c554:	b508      	push	{r3, lr}
	err = init_reset();
   1c556:	f7ff ff73 	bl	1c440 <init_reset>
}
   1c55a:	bd08      	pop	{r3, pc}

0001c55c <lll_scan_isr_rx_check>:
{
   1c55c:	b570      	push	{r4, r5, r6, lr}
   1c55e:	4604      	mov	r4, r0
   1c560:	4615      	mov	r5, r2
   1c562:	461e      	mov	r6, r3
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1c564:	7903      	ldrb	r3, [r0, #4]
							       rl_idx))) ||
   1c566:	f013 0f08 	tst.w	r3, #8
   1c56a:	d107      	bne.n	1c57c <lll_scan_isr_rx_check+0x20>
   1c56c:	4608      	mov	r0, r1
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1c56e:	b90a      	cbnz	r2, 1c574 <lll_scan_isr_rx_check+0x18>
							       rl_idx))) ||
   1c570:	2001      	movs	r0, #1
}
   1c572:	bd70      	pop	{r4, r5, r6, pc}
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1c574:	4631      	mov	r1, r6
   1c576:	f7f0 f959 	bl	c82c <ull_filter_lll_rl_idx_allowed>
   1c57a:	b968      	cbnz	r0, 1c598 <lll_scan_isr_rx_check+0x3c>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1c57c:	7923      	ldrb	r3, [r4, #4]
							       rl_idx))) ||
   1c57e:	f013 0f08 	tst.w	r3, #8
   1c582:	d00b      	beq.n	1c59c <lll_scan_isr_rx_check+0x40>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1c584:	b10d      	cbz	r5, 1c58a <lll_scan_isr_rx_check+0x2e>
							       rl_idx))) ||
   1c586:	2001      	movs	r0, #1
   1c588:	e7f3      	b.n	1c572 <lll_scan_isr_rx_check+0x16>
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1c58a:	4630      	mov	r0, r6
   1c58c:	f7f0 f922 	bl	c7d4 <ull_filter_lll_irk_in_fal>
   1c590:	2800      	cmp	r0, #0
   1c592:	d0ee      	beq.n	1c572 <lll_scan_isr_rx_check+0x16>
							       rl_idx))) ||
   1c594:	2001      	movs	r0, #1
   1c596:	e7ec      	b.n	1c572 <lll_scan_isr_rx_check+0x16>
   1c598:	2001      	movs	r0, #1
   1c59a:	e7ea      	b.n	1c572 <lll_scan_isr_rx_check+0x16>
   1c59c:	2000      	movs	r0, #0
   1c59e:	e7e8      	b.n	1c572 <lll_scan_isr_rx_check+0x16>

0001c5a0 <lll_scan_adva_check>:
{
   1c5a0:	b500      	push	{lr}
   1c5a2:	b083      	sub	sp, #12
   1c5a4:	f88d 3007 	strb.w	r3, [sp, #7]
	if (rl_idx != FILTER_IDX_NONE) {
   1c5a8:	b2db      	uxtb	r3, r3
   1c5aa:	2bff      	cmp	r3, #255	; 0xff
   1c5ac:	d007      	beq.n	1c5be <lll_scan_adva_check+0x1e>
		return (rl_idx == lll->rl_idx);
   1c5ae:	7c40      	ldrb	r0, [r0, #17]
   1c5b0:	4283      	cmp	r3, r0
   1c5b2:	bf14      	ite	ne
   1c5b4:	2000      	movne	r0, #0
   1c5b6:	2001      	moveq	r0, #1
}
   1c5b8:	b003      	add	sp, #12
   1c5ba:	f85d fb04 	ldr.w	pc, [sp], #4
   1c5be:	468c      	mov	ip, r1
   1c5c0:	4611      	mov	r1, r2
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
   1c5c2:	f10d 0207 	add.w	r2, sp, #7
   1c5c6:	4660      	mov	r0, ip
   1c5c8:	f7f0 f974 	bl	c8b4 <ull_filter_lll_rl_addr_allowed>
	return false;
   1c5cc:	2000      	movs	r0, #0
   1c5ce:	e7f3      	b.n	1c5b8 <lll_scan_adva_check+0x18>

0001c5d0 <lll_scan_ext_tgta_check>:
{
   1c5d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c5d4:	b083      	sub	sp, #12
   1c5d6:	4606      	mov	r6, r0
   1c5d8:	4615      	mov	r5, r2
   1c5da:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	if (pri && !pdu->adv_ext_ind.ext_hdr.adv_addr) {
   1c5de:	b119      	cbz	r1, 1c5e8 <lll_scan_ext_tgta_check+0x18>
   1c5e0:	78da      	ldrb	r2, [r3, #3]
   1c5e2:	f012 0f01 	tst.w	r2, #1
   1c5e6:	d031      	beq.n	1c64c <lll_scan_ext_tgta_check+0x7c>
	if (pdu->len <
   1c5e8:	785a      	ldrb	r2, [r3, #1]
   1c5ea:	2a07      	cmp	r2, #7
   1c5ec:	d930      	bls.n	1c650 <lll_scan_ext_tgta_check+0x80>
	is_directed = pdu->adv_ext_ind.ext_hdr.tgt_addr;
   1c5ee:	78d9      	ldrb	r1, [r3, #3]
   1c5f0:	f3c1 0840 	ubfx	r8, r1, #1, #1
	if (is_directed && (pdu->len < PDU_AC_EXT_HEADER_SIZE_MIN +
   1c5f4:	f011 0f02 	tst.w	r1, #2
   1c5f8:	d001      	beq.n	1c5fe <lll_scan_ext_tgta_check+0x2e>
   1c5fa:	2a0d      	cmp	r2, #13
   1c5fc:	d92c      	bls.n	1c658 <lll_scan_ext_tgta_check+0x88>
	tx_addr = pdu->tx_addr;
   1c5fe:	461a      	mov	r2, r3
   1c600:	f812 0b04 	ldrb.w	r0, [r2], #4
   1c604:	f3c0 1180 	ubfx	r1, r0, #6, #1
	rx_addr = pdu->rx_addr;
   1c608:	ea4f 19d0 	mov.w	r9, r0, lsr #7
	tgta = &pdu->adv_ext_ind.ext_hdr.data[TGTA_OFFSET];
   1c60c:	f103 040a 	add.w	r4, r3, #10
		 lll_scan_adva_check(lll, tx_addr, adva, rl_idx)) &&
   1c610:	b11d      	cbz	r5, 1c61a <lll_scan_ext_tgta_check+0x4a>
		 ((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   1c612:	7933      	ldrb	r3, [r6, #4]
	return ((!is_init ||
   1c614:	f013 0f08 	tst.w	r3, #8
   1c618:	d004      	beq.n	1c624 <lll_scan_ext_tgta_check+0x54>
		 lll_scan_adva_check(lll, tx_addr, adva, rl_idx)) &&
   1c61a:	f1b8 0f00 	cmp.w	r8, #0
   1c61e:	d109      	bne.n	1c634 <lll_scan_ext_tgta_check+0x64>
   1c620:	2001      	movs	r0, #1
   1c622:	e016      	b.n	1c652 <lll_scan_ext_tgta_check+0x82>
   1c624:	463b      	mov	r3, r7
   1c626:	4630      	mov	r0, r6
   1c628:	f7ff ffba 	bl	1c5a0 <lll_scan_adva_check>
		 ((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
   1c62c:	2800      	cmp	r0, #0
   1c62e:	d1f4      	bne.n	1c61a <lll_scan_ext_tgta_check+0x4a>
		 lll_scan_adva_check(lll, tx_addr, adva, rl_idx)) &&
   1c630:	2000      	movs	r0, #0
   1c632:	e00e      	b.n	1c652 <lll_scan_ext_tgta_check+0x82>
		  isr_scan_tgta_check(lll, is_init, rx_addr, tgta, rl_idx,
   1c634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c636:	9301      	str	r3, [sp, #4]
   1c638:	9700      	str	r7, [sp, #0]
   1c63a:	4623      	mov	r3, r4
   1c63c:	464a      	mov	r2, r9
   1c63e:	4629      	mov	r1, r5
   1c640:	4630      	mov	r0, r6
   1c642:	f7ff ff0c 	bl	1c45e <isr_scan_tgta_check>
		 (is_directed &&
   1c646:	b120      	cbz	r0, 1c652 <lll_scan_ext_tgta_check+0x82>
		 lll_scan_adva_check(lll, tx_addr, adva, rl_idx)) &&
   1c648:	2001      	movs	r0, #1
   1c64a:	e002      	b.n	1c652 <lll_scan_ext_tgta_check+0x82>
		return true;
   1c64c:	4608      	mov	r0, r1
   1c64e:	e000      	b.n	1c652 <lll_scan_ext_tgta_check+0x82>
		return false;
   1c650:	2000      	movs	r0, #0
}
   1c652:	b003      	add	sp, #12
   1c654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   1c658:	2000      	movs	r0, #0
   1c65a:	e7fa      	b.n	1c652 <lll_scan_ext_tgta_check+0x82>

0001c65c <lll_scan_aux_addr_match_get>:
{
   1c65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c660:	b082      	sub	sp, #8
   1c662:	460c      	mov	r4, r1
	if (!ext_hdr->adv_addr) {
   1c664:	78c9      	ldrb	r1, [r1, #3]
   1c666:	f011 0f01 	tst.w	r1, #1
   1c66a:	d104      	bne.n	1c676 <lll_scan_aux_addr_match_get+0x1a>
		return false;
   1c66c:	2600      	movs	r6, #0
}
   1c66e:	4630      	mov	r0, r6
   1c670:	b002      	add	sp, #8
   1c672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c676:	4605      	mov	r5, r0
   1c678:	4690      	mov	r8, r2
   1c67a:	461f      	mov	r7, r3
	if (IS_ENABLED(CONFIG_BT_CTLR_PRIVACY) && ull_filter_lll_rl_enabled()) {
   1c67c:	f7f0 f99e 	bl	c9bc <ull_filter_lll_rl_enabled>
   1c680:	4606      	mov	r6, r0
   1c682:	b928      	cbnz	r0, 1c690 <lll_scan_aux_addr_match_get+0x34>
	} else if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) &&
   1c684:	792b      	ldrb	r3, [r5, #4]
   1c686:	f013 0f18 	tst.w	r3, #24
   1c68a:	d12b      	bne.n	1c6e4 <lll_scan_aux_addr_match_get+0x88>
	return true;
   1c68c:	2601      	movs	r6, #1
   1c68e:	e7ee      	b.n	1c66e <lll_scan_aux_addr_match_get+0x12>
			ull_filter_lll_get((lll->filter_policy &
   1c690:	7928      	ldrb	r0, [r5, #4]
   1c692:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1c696:	f7ef fba5 	bl	bde4 <ull_filter_lll_get>
		const uint8_t *adva = &ext_hdr->data[ADVA_OFFSET];
   1c69a:	4625      	mov	r5, r4
		*devmatch_ok = ull_filter_lll_fal_match(fal, pdu->tx_addr, adva,
   1c69c:	f815 1b04 	ldrb.w	r1, [r5], #4
   1c6a0:	463b      	mov	r3, r7
   1c6a2:	462a      	mov	r2, r5
   1c6a4:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1c6a8:	f7ff fe3c 	bl	1c324 <ull_filter_lll_fal_match>
   1c6ac:	f888 0000 	strb.w	r0, [r8]
		if (!*devmatch_ok && pdu->tx_addr) {
   1c6b0:	2800      	cmp	r0, #0
   1c6b2:	d1dc      	bne.n	1c66e <lll_scan_aux_addr_match_get+0x12>
   1c6b4:	7823      	ldrb	r3, [r4, #0]
   1c6b6:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c6ba:	d0d8      	beq.n	1c66e <lll_scan_aux_addr_match_get+0x12>
			(void)ull_filter_lll_irks_get(&count);
   1c6bc:	f10d 0007 	add.w	r0, sp, #7
   1c6c0:	f7ef ffca 	bl	c658 <ull_filter_lll_irks_get>
			if (count) {
   1c6c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c6c8:	2b00      	cmp	r3, #0
   1c6ca:	d0d0      	beq.n	1c66e <lll_scan_aux_addr_match_get+0x12>
				radio_ar_resolve(adva);
   1c6cc:	4628      	mov	r0, r5
   1c6ce:	f7f3 fed3 	bl	10478 <radio_ar_resolve>
				*irkmatch_ok = radio_ar_has_match();
   1c6d2:	f7f3 fea5 	bl	10420 <radio_ar_has_match>
   1c6d6:	9b08      	ldr	r3, [sp, #32]
   1c6d8:	7018      	strb	r0, [r3, #0]
				*irkmatch_id = radio_ar_match_get();
   1c6da:	f7f3 fe8b 	bl	103f4 <radio_ar_match_get>
   1c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c6e0:	7018      	strb	r0, [r3, #0]
   1c6e2:	e7c4      	b.n	1c66e <lll_scan_aux_addr_match_get+0x12>
		const struct lll_filter *fal = ull_filter_lll_get(true);
   1c6e4:	2001      	movs	r0, #1
   1c6e6:	f7ef fb7d 	bl	bde4 <ull_filter_lll_get>
		const uint8_t *adva = &ext_hdr->data[ADVA_OFFSET];
   1c6ea:	4622      	mov	r2, r4
		*devmatch_ok = ull_filter_lll_fal_match(fal, pdu->tx_addr, adva,
   1c6ec:	f812 1b04 	ldrb.w	r1, [r2], #4
   1c6f0:	463b      	mov	r3, r7
   1c6f2:	f3c1 1180 	ubfx	r1, r1, #6, #1
   1c6f6:	f7ff fe15 	bl	1c324 <ull_filter_lll_fal_match>
   1c6fa:	f888 0000 	strb.w	r0, [r8]
	return true;
   1c6fe:	2601      	movs	r6, #1
   1c700:	e7b5      	b.n	1c66e <lll_scan_aux_addr_match_get+0x12>

0001c702 <isr_rx_ull_schedule>:
{
   1c702:	b510      	push	{r4, lr}
   1c704:	4604      	mov	r4, r0
	lll = ull_scan_aux_lll_parent_get(lll_aux, NULL);
   1c706:	2100      	movs	r1, #0
   1c708:	f7ee f936 	bl	a978 <ull_scan_aux_lll_parent_get>
	isr_rx(lll, lll_aux, lll_aux->phy);
   1c70c:	7962      	ldrb	r2, [r4, #5]
   1c70e:	f002 0207 	and.w	r2, r2, #7
   1c712:	4621      	mov	r1, r4
   1c714:	f7f2 f98a 	bl	ea2c <isr_rx>
}
   1c718:	bd10      	pop	{r4, pc}

0001c71a <isr_rx_lll_schedule>:
{
   1c71a:	b508      	push	{r3, lr}
   1c71c:	4603      	mov	r3, r0
	lll = node_rx->hdr.rx_ftr.param;
   1c71e:	6880      	ldr	r0, [r0, #8]
	phy_aux = node_rx->hdr.rx_ftr.aux_phy; /* PHY remembered in node rx */
   1c720:	7b1a      	ldrb	r2, [r3, #12]
	if (lll->is_aux_sched) {
   1c722:	7c03      	ldrb	r3, [r0, #16]
   1c724:	f013 0f10 	tst.w	r3, #16
   1c728:	d003      	beq.n	1c732 <isr_rx_lll_schedule+0x18>
		isr_rx(lll, NULL, phy_aux);
   1c72a:	2100      	movs	r1, #0
   1c72c:	f7f2 f97e 	bl	ea2c <isr_rx>
}
   1c730:	bd08      	pop	{r3, pc}
		isr_rx(lll, lll->lll_aux, phy_aux);
   1c732:	6881      	ldr	r1, [r0, #8]
   1c734:	f7f2 f97a 	bl	ea2c <isr_rx>
}
   1c738:	e7fa      	b.n	1c730 <isr_rx_lll_schedule+0x16>

0001c73a <init_reset>:
}
   1c73a:	2000      	movs	r0, #0
   1c73c:	4770      	bx	lr

0001c73e <is_max_cte_reached>:
	return max_cte_count == BT_HCI_LE_SAMPLE_CTE_ALL || cte_count < max_cte_count;
   1c73e:	b118      	cbz	r0, 1c748 <is_max_cte_reached+0xa>
   1c740:	4288      	cmp	r0, r1
   1c742:	d903      	bls.n	1c74c <is_max_cte_reached+0xe>
   1c744:	2001      	movs	r0, #1
   1c746:	4770      	bx	lr
   1c748:	2001      	movs	r0, #1
   1c74a:	4770      	bx	lr
   1c74c:	2000      	movs	r0, #0
}
   1c74e:	4770      	bx	lr

0001c750 <data_channel_calc>:
{
   1c750:	b508      	push	{r3, lr}
	if (lll->chm_first != lll->chm_last) {
   1c752:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1c756:	f890 2023 	ldrb.w	r2, [r0, #35]	; 0x23
   1c75a:	4293      	cmp	r3, r2
   1c75c:	d00a      	beq.n	1c774 <data_channel_calc+0x24>
		instant_latency = (lll->event_counter + lll->skip_event - lll->chm_instant) &
   1c75e:	8a43      	ldrh	r3, [r0, #18]
   1c760:	8a01      	ldrh	r1, [r0, #16]
   1c762:	440b      	add	r3, r1
   1c764:	b29b      	uxth	r3, r3
   1c766:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1c768:	1a5b      	subs	r3, r3, r1
		if (instant_latency <= EVENT_INSTANT_LATENCY_MAX) {
   1c76a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1c76e:	d101      	bne.n	1c774 <data_channel_calc+0x24>
			lll->chm_first = lll->chm_last;
   1c770:	f880 2022 	strb.w	r2, [r0, #34]	; 0x22
	data_chan_map = lll->chm[lll->chm_first].data_chan_map;
   1c774:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1c778:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   1c77c:	0052      	lsls	r2, r2, #1
   1c77e:	3210      	adds	r2, #16
   1c780:	4402      	add	r2, r0
	data_chan_count = lll->chm[lll->chm_first].data_chan_count;
   1c782:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c786:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   1c78a:	7edb      	ldrb	r3, [r3, #27]
	return lll_chan_sel_2(lll->event_counter + lll->skip_event, lll->data_chan_id,
   1c78c:	f8b0 c012 	ldrh.w	ip, [r0, #18]
   1c790:	8a01      	ldrh	r1, [r0, #16]
   1c792:	448c      	add	ip, r1
   1c794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c798:	3206      	adds	r2, #6
   1c79a:	8a81      	ldrh	r1, [r0, #20]
   1c79c:	fa1f f08c 	uxth.w	r0, ip
   1c7a0:	f7ee ffda 	bl	b758 <lll_chan_sel_2>
}
   1c7a4:	bd08      	pop	{r3, pc}

0001c7a6 <is_abort_cb>:
	if (next != curr) {
   1c7a6:	4288      	cmp	r0, r1
   1c7a8:	d005      	beq.n	1c7b6 <is_abort_cb+0x10>
{
   1c7aa:	b508      	push	{r3, lr}
		lll = ull_scan_lll_is_valid_get(next);
   1c7ac:	f7ff fa34 	bl	1bc18 <ull_scan_lll_is_valid_get>
		if (!lll) {
   1c7b0:	b118      	cbz	r0, 1c7ba <is_abort_cb+0x14>
	return 0;
   1c7b2:	2000      	movs	r0, #0
}
   1c7b4:	bd08      	pop	{r3, pc}
	return 0;
   1c7b6:	2000      	movs	r0, #0
}
   1c7b8:	4770      	bx	lr
			return -ECANCELED;
   1c7ba:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c7be:	e7f9      	b.n	1c7b4 <is_abort_cb+0xe>

0001c7c0 <lll_sync_init>:
{
   1c7c0:	b508      	push	{r3, lr}
	err = init_reset();
   1c7c2:	f7ff ffba 	bl	1c73a <init_reset>
}
   1c7c6:	bd08      	pop	{r3, pc}

0001c7c8 <lll_sync_cte_is_allowed>:
	if (cte_type_mask == BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_NO_FILTERING) {
   1c7c8:	4684      	mov	ip, r0
   1c7ca:	b310      	cbz	r0, 1c812 <lll_sync_cte_is_allowed+0x4a>
	if (rx_cte_time > 0) {
   1c7cc:	b1f2      	cbz	r2, 1c80c <lll_sync_cte_is_allowed+0x44>
		if ((cte_type_mask & BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_NO_CTE) != 0) {
   1c7ce:	f010 0008 	ands.w	r0, r0, #8
   1c7d2:	d104      	bne.n	1c7de <lll_sync_cte_is_allowed+0x16>
			switch (rx_cte_type) {
   1c7d4:	2b01      	cmp	r3, #1
   1c7d6:	d00b      	beq.n	1c7f0 <lll_sync_cte_is_allowed+0x28>
   1c7d8:	2b02      	cmp	r3, #2
   1c7da:	d010      	beq.n	1c7fe <lll_sync_cte_is_allowed+0x36>
   1c7dc:	b113      	cbz	r3, 1c7e4 <lll_sync_cte_is_allowed+0x1c>
		return filter_policy ? SYNC_STAT_READY_OR_CONT_SCAN : SYNC_STAT_TERM;
   1c7de:	b1c9      	cbz	r1, 1c814 <lll_sync_cte_is_allowed+0x4c>
   1c7e0:	2001      	movs	r0, #1
   1c7e2:	4770      	bx	lr
				cte_ok = !(cte_type_mask &
   1c7e4:	f08c 0c01 	eor.w	ip, ip, #1
   1c7e8:	f00c 0301 	and.w	r3, ip, #1
	if (!cte_ok) {
   1c7ec:	b98b      	cbnz	r3, 1c812 <lll_sync_cte_is_allowed+0x4a>
   1c7ee:	e7f6      	b.n	1c7de <lll_sync_cte_is_allowed+0x16>
				cte_ok = !(cte_type_mask &
   1c7f0:	ea4f 035c 	mov.w	r3, ip, lsr #1
   1c7f4:	f083 0301 	eor.w	r3, r3, #1
   1c7f8:	f003 0301 	and.w	r3, r3, #1
				break;
   1c7fc:	e7f6      	b.n	1c7ec <lll_sync_cte_is_allowed+0x24>
				cte_ok = !(cte_type_mask &
   1c7fe:	ea4f 039c 	mov.w	r3, ip, lsr #2
   1c802:	f083 0301 	eor.w	r3, r3, #1
   1c806:	f003 0301 	and.w	r3, r3, #1
				break;
   1c80a:	e7ef      	b.n	1c7ec <lll_sync_cte_is_allowed+0x24>
		if ((cte_type_mask & BT_HCI_LE_PER_ADV_CREATE_SYNC_CTE_TYPE_ONLY_CTE) != 0) {
   1c80c:	f010 0010 	ands.w	r0, r0, #16
   1c810:	d1e5      	bne.n	1c7de <lll_sync_cte_is_allowed+0x16>
}
   1c812:	4770      	bx	lr
		return filter_policy ? SYNC_STAT_READY_OR_CONT_SCAN : SYNC_STAT_TERM;
   1c814:	2002      	movs	r0, #2
   1c816:	4770      	bx	lr

0001c818 <init_reset>:
 * @return Zero in case of success, other value in case of failure.
 */
static int init_reset(void)
{
	return 0;
}
   1c818:	2000      	movs	r0, #0
   1c81a:	4770      	bx	lr

0001c81c <lll_df_init>:
{
   1c81c:	b508      	push	{r3, lr}
	radio_df_ant_switching_gpios_cfg();
   1c81e:	f7f3 f89d 	bl	f95c <radio_df_ant_switching_gpios_cfg>
	return init_reset();
   1c822:	f7ff fff9 	bl	1c818 <init_reset>
}
   1c826:	bd08      	pop	{r3, pc}

0001c828 <lll_df_reset>:
{
   1c828:	b508      	push	{r3, lr}
	return init_reset();
   1c82a:	f7ff fff5 	bl	1c818 <init_reset>
}
   1c82e:	bd08      	pop	{r3, pc}

0001c830 <lll_df_ant_num_get>:
{
   1c830:	b508      	push	{r3, lr}
	return radio_df_ant_num_get();
   1c832:	f000 f840 	bl	1c8b6 <radio_df_ant_num_get>
}
   1c836:	bd08      	pop	{r3, pc}

0001c838 <lll_df_sync_cfg_alloc>:
	first = df_cfg->first;
   1c838:	7802      	ldrb	r2, [r0, #0]
   1c83a:	b2d2      	uxtb	r2, r2
	last = df_cfg->last;
   1c83c:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1c83e:	429a      	cmp	r2, r3
   1c840:	d011      	beq.n	1c866 <lll_df_sync_cfg_alloc+0x2e>
		df_cfg->last = first;
   1c842:	7042      	strb	r2, [r0, #1]
		first_latest = df_cfg->first;
   1c844:	f890 c000 	ldrb.w	ip, [r0]
   1c848:	fa5f fc8c 	uxtb.w	ip, ip
		if (first_latest != first) {
   1c84c:	4562      	cmp	r2, ip
   1c84e:	d004      	beq.n	1c85a <lll_df_sync_cfg_alloc+0x22>
			df_cfg->last = last;
   1c850:	7043      	strb	r3, [r0, #1]
			last++;
   1c852:	3301      	adds	r3, #1
   1c854:	b2db      	uxtb	r3, r3
			if (last == DOUBLE_BUFFER_SIZE) {
   1c856:	2b02      	cmp	r3, #2
   1c858:	d00b      	beq.n	1c872 <lll_df_sync_cfg_alloc+0x3a>
	*idx = last;
   1c85a:	700b      	strb	r3, [r1, #0]
	return &df_cfg->cfg[last];
   1c85c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c860:	4418      	add	r0, r3
}
   1c862:	3002      	adds	r0, #2
   1c864:	4770      	bx	lr
		last++;
   1c866:	3301      	adds	r3, #1
   1c868:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1c86a:	2b02      	cmp	r3, #2
   1c86c:	d1f5      	bne.n	1c85a <lll_df_sync_cfg_alloc+0x22>
			last = 0U;
   1c86e:	2300      	movs	r3, #0
   1c870:	e7f3      	b.n	1c85a <lll_df_sync_cfg_alloc+0x22>
				last = 0U;
   1c872:	2300      	movs	r3, #0
   1c874:	e7f1      	b.n	1c85a <lll_df_sync_cfg_alloc+0x22>

0001c876 <lll_df_sync_cfg_latest_get>:
	first = df_cfg->first;
   1c876:	7803      	ldrb	r3, [r0, #0]
   1c878:	b2db      	uxtb	r3, r3
	if (first != df_cfg->last) {
   1c87a:	7842      	ldrb	r2, [r0, #1]
   1c87c:	429a      	cmp	r2, r3
   1c87e:	d011      	beq.n	1c8a4 <lll_df_sync_cfg_latest_get+0x2e>
		first += 1U;
   1c880:	1c5a      	adds	r2, r3, #1
   1c882:	b2d2      	uxtb	r2, r2
		if (first == DOUBLE_BUFFER_SIZE) {
   1c884:	2a02      	cmp	r2, #2
   1c886:	d012      	beq.n	1c8ae <lll_df_sync_cfg_latest_get+0x38>
		df_cfg->first = first;
   1c888:	7002      	strb	r2, [r0, #0]
		if (is_modified) {
   1c88a:	b119      	cbz	r1, 1c894 <lll_df_sync_cfg_latest_get+0x1e>
			*is_modified = 1U;
   1c88c:	f04f 0c01 	mov.w	ip, #1
   1c890:	f881 c000 	strb.w	ip, [r1]
		df_cfg->cfg[cfg_idx].is_enabled = 0U; /* mark as disabled - not used anymore */
   1c894:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c898:	4403      	add	r3, r0
   1c89a:	7899      	ldrb	r1, [r3, #2]
   1c89c:	f36f 0100 	bfc	r1, #0, #1
   1c8a0:	7099      	strb	r1, [r3, #2]
   1c8a2:	4613      	mov	r3, r2
	return &df_cfg->cfg[first];
   1c8a4:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1c8a8:	4418      	add	r0, r3
}
   1c8aa:	3002      	adds	r0, #2
   1c8ac:	4770      	bx	lr
			first = 0U;
   1c8ae:	2200      	movs	r2, #0
   1c8b0:	e7ea      	b.n	1c888 <lll_df_sync_cfg_latest_get+0x12>

0001c8b2 <radio_df_pdu_antenna_switch_pattern_get>:
}
   1c8b2:	2000      	movs	r0, #0
   1c8b4:	4770      	bx	lr

0001c8b6 <radio_df_ant_num_get>:
}
   1c8b6:	2004      	movs	r0, #4
   1c8b8:	4770      	bx	lr

0001c8ba <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c8ba:	b570      	push	{r4, r5, r6, lr}
   1c8bc:	b08c      	sub	sp, #48	; 0x30
   1c8be:	460e      	mov	r6, r1
   1c8c0:	4615      	mov	r5, r2
   1c8c2:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c8c4:	2210      	movs	r2, #16
   1c8c6:	4601      	mov	r1, r0
   1c8c8:	4668      	mov	r0, sp
   1c8ca:	f7fd fc4e 	bl	1a16a <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c8ce:	2210      	movs	r2, #16
   1c8d0:	4631      	mov	r1, r6
   1c8d2:	eb0d 0002 	add.w	r0, sp, r2
   1c8d6:	f7fd fc48 	bl	1a16a <mem_rcopy>

	do_ecb(&ecb);
   1c8da:	4668      	mov	r0, sp
   1c8dc:	f7f3 f91e 	bl	fb1c <do_ecb>

	if (cipher_text_le) {
   1c8e0:	b125      	cbz	r5, 1c8ec <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c8e2:	2210      	movs	r2, #16
   1c8e4:	a908      	add	r1, sp, #32
   1c8e6:	4628      	mov	r0, r5
   1c8e8:	f7fd fc3f 	bl	1a16a <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c8ec:	b13c      	cbz	r4, 1c8fe <ecb_encrypt+0x44>
   1c8ee:	f10d 0c20 	add.w	ip, sp, #32
   1c8f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1c8f6:	6020      	str	r0, [r4, #0]
   1c8f8:	6061      	str	r1, [r4, #4]
   1c8fa:	60a2      	str	r2, [r4, #8]
   1c8fc:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   1c8fe:	b00c      	add	sp, #48	; 0x30
   1c900:	bd70      	pop	{r4, r5, r6, pc}

0001c902 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c906:	f04f 32ff 	mov.w	r2, #4294967295
   1c90a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1c90e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c912:	2100      	movs	r1, #0
   1c914:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1c918:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1c91c:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1c920:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1c924:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1c928:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1c92c:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1c930:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1c934:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1c938:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1c93c:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1c940:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1c944:	4770      	bx	lr

0001c946 <radio_stop>:
}
   1c946:	4770      	bx	lr

0001c948 <radio_tx_chain_delay_get>:
}
   1c948:	2001      	movs	r0, #1
   1c94a:	4770      	bx	lr

0001c94c <radio_rx_ready_delay_get>:
}
   1c94c:	2029      	movs	r0, #41	; 0x29
   1c94e:	4770      	bx	lr

0001c950 <radio_rx_chain_delay_get>:
	switch (phy) {
   1c950:	2802      	cmp	r0, #2
   1c952:	d001      	beq.n	1c958 <radio_rx_chain_delay_get+0x8>
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_1M_US;
   1c954:	200a      	movs	r0, #10
   1c956:	4770      	bx	lr
		return HAL_RADIO_NRF52833_RX_CHAIN_DELAY_2M_US;
   1c958:	2005      	movs	r0, #5
}
   1c95a:	4770      	bx	lr

0001c95c <radio_phy_flags_rx_get>:
}
   1c95c:	2000      	movs	r0, #0
   1c95e:	4770      	bx	lr

0001c960 <radio_tmr_tifs_base_get>:
{
   1c960:	b508      	push	{r3, lr}
	return radio_tmr_end_get();
   1c962:	f7f3 fd05 	bl	10370 <radio_tmr_end_get>
}
   1c966:	bd08      	pop	{r3, pc}

0001c968 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c968:	4288      	cmp	r0, r1
   1c96a:	d00d      	beq.n	1c988 <mayfly_prio_is_equal+0x20>
	return (caller_id == callee_id) ||
   1c96c:	2801      	cmp	r0, #1
   1c96e:	d003      	beq.n	1c978 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c970:	2802      	cmp	r0, #2
   1c972:	d005      	beq.n	1c980 <mayfly_prio_is_equal+0x18>
   1c974:	2000      	movs	r0, #0
   1c976:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1c978:	2902      	cmp	r1, #2
   1c97a:	d1f9      	bne.n	1c970 <mayfly_prio_is_equal+0x8>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c97c:	2001      	movs	r0, #1
   1c97e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1c980:	2901      	cmp	r1, #1
   1c982:	d003      	beq.n	1c98c <mayfly_prio_is_equal+0x24>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1c984:	2000      	movs	r0, #0
   1c986:	4770      	bx	lr
   1c988:	2001      	movs	r0, #1
   1c98a:	4770      	bx	lr
   1c98c:	2001      	movs	r0, #1
}
   1c98e:	4770      	bx	lr

0001c990 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1c990:	b508      	push	{r3, lr}
   1c992:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1c994:	2000      	movs	r0, #0
   1c996:	f7f3 f8b9 	bl	fb0c <cntr_cmp_set>
}
   1c99a:	bd08      	pop	{r3, pc}

0001c99c <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c99c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c9a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c9a8:	d008      	beq.n	1c9bc <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1c9aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c9ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c9b2:	f013 0f01 	tst.w	r3, #1
   1c9b6:	d10c      	bne.n	1c9d2 <hci_vendor_read_static_addr+0x36>
		}

		return 1;
	}

	return 0;
   1c9b8:	2000      	movs	r0, #0
}
   1c9ba:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1c9bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1c9c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1c9c4:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1c9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1c9ca:	4293      	cmp	r3, r2
   1c9cc:	d1ed      	bne.n	1c9aa <hci_vendor_read_static_addr+0xe>
	return 0;
   1c9ce:	2000      	movs	r0, #0
   1c9d0:	4770      	bx	lr
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1c9d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1c9d6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1c9da:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1c9dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1c9e0:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1c9e2:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   1c9e4:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1c9e6:	0e1b      	lsrs	r3, r3, #24
   1c9e8:	70c3      	strb	r3, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1c9ea:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1c9ee:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1c9f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1c9f4:	7143      	strb	r3, [r0, #5]
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1c9f6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c9fa:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1c9fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1ca00:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ca04:	d037      	beq.n	1ca76 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ca06:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1ca0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ca0e:	d032      	beq.n	1ca76 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ca10:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1ca14:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ca18:	d02d      	beq.n	1ca76 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1ca1a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1ca1e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ca22:	d028      	beq.n	1ca76 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1ca24:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1ca28:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
   1ca2a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1ca2e:	71c1      	strb	r1, [r0, #7]
	sys_put_le16(val >> 16, &dst[2]);
   1ca30:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   1ca32:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1ca34:	0e1b      	lsrs	r3, r3, #24
   1ca36:	7243      	strb	r3, [r0, #9]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1ca38:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1ca3c:	7283      	strb	r3, [r0, #10]
	dst[1] = val >> 8;
   1ca3e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1ca42:	72c1      	strb	r1, [r0, #11]
	sys_put_le16(val >> 16, &dst[2]);
   1ca44:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   1ca46:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1ca48:	0e1b      	lsrs	r3, r3, #24
   1ca4a:	7343      	strb	r3, [r0, #13]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1ca4c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1ca50:	7383      	strb	r3, [r0, #14]
	dst[1] = val >> 8;
   1ca52:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1ca56:	73c1      	strb	r1, [r0, #15]
	sys_put_le16(val >> 16, &dst[2]);
   1ca58:	0c19      	lsrs	r1, r3, #16
	dst[0] = val;
   1ca5a:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1ca5c:	0e1b      	lsrs	r3, r3, #24
   1ca5e:	7443      	strb	r3, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1ca60:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1ca64:	7483      	strb	r3, [r0, #18]
	dst[1] = val >> 8;
   1ca66:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1ca6a:	74c2      	strb	r2, [r0, #19]
	sys_put_le16(val >> 16, &dst[2]);
   1ca6c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1ca6e:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1ca70:	0e1b      	lsrs	r3, r3, #24
   1ca72:	7543      	strb	r3, [r0, #21]
}
   1ca74:	e008      	b.n	1ca88 <hci_vendor_read_static_addr+0xec>
__ssp_bos_icheck3(memset, void *, int)
   1ca76:	2300      	movs	r3, #0
   1ca78:	f8c0 3006 	str.w	r3, [r0, #6]
   1ca7c:	f8c0 300a 	str.w	r3, [r0, #10]
   1ca80:	f8c0 300e 	str.w	r3, [r0, #14]
   1ca84:	f8c0 3012 	str.w	r3, [r0, #18]
		return 1;
   1ca88:	2001      	movs	r0, #1
   1ca8a:	4770      	bx	lr

0001ca8c <hci_vendor_read_key_hierarchy_roots>:
   1ca8c:	2300      	movs	r3, #0
   1ca8e:	6003      	str	r3, [r0, #0]
   1ca90:	6043      	str	r3, [r0, #4]
   1ca92:	6083      	str	r3, [r0, #8]
   1ca94:	60c3      	str	r3, [r0, #12]
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1ca96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ca9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1caa2:	d03f      	beq.n	1cb24 <hci_vendor_read_key_hierarchy_roots+0x98>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1caa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1caa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1caac:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cab0:	d038      	beq.n	1cb24 <hci_vendor_read_key_hierarchy_roots+0x98>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cab2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1caba:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cabe:	d031      	beq.n	1cb24 <hci_vendor_read_key_hierarchy_roots+0x98>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1cac0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1cac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cacc:	d02a      	beq.n	1cb24 <hci_vendor_read_key_hierarchy_roots+0x98>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1cad2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1cad6:	700b      	strb	r3, [r1, #0]
	dst[1] = val >> 8;
   1cad8:	f3c3 2007 	ubfx	r0, r3, #8, #8
   1cadc:	7048      	strb	r0, [r1, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1cade:	0c18      	lsrs	r0, r3, #16
	dst[0] = val;
   1cae0:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1cae2:	0e1b      	lsrs	r3, r3, #24
   1cae4:	70cb      	strb	r3, [r1, #3]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1cae6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1caea:	710b      	strb	r3, [r1, #4]
	dst[1] = val >> 8;
   1caec:	f3c3 2007 	ubfx	r0, r3, #8, #8
   1caf0:	7148      	strb	r0, [r1, #5]
	sys_put_le16(val >> 16, &dst[2]);
   1caf2:	0c18      	lsrs	r0, r3, #16
	dst[0] = val;
   1caf4:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   1caf6:	0e1b      	lsrs	r3, r3, #24
   1caf8:	71cb      	strb	r3, [r1, #7]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1cafa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   1cafe:	720b      	strb	r3, [r1, #8]
	dst[1] = val >> 8;
   1cb00:	f3c3 2007 	ubfx	r0, r3, #8, #8
   1cb04:	7248      	strb	r0, [r1, #9]
	sys_put_le16(val >> 16, &dst[2]);
   1cb06:	0c18      	lsrs	r0, r3, #16
	dst[0] = val;
   1cb08:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1cb0a:	0e1b      	lsrs	r3, r3, #24
   1cb0c:	72cb      	strb	r3, [r1, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1cb0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1cb12:	730b      	strb	r3, [r1, #12]
	dst[1] = val >> 8;
   1cb14:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1cb18:	734a      	strb	r2, [r1, #13]
	sys_put_le16(val >> 16, &dst[2]);
   1cb1a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1cb1c:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1cb1e:	0e1b      	lsrs	r3, r3, #24
   1cb20:	73cb      	strb	r3, [r1, #15]
}
   1cb22:	4770      	bx	lr
   1cb24:	2300      	movs	r3, #0
   1cb26:	600b      	str	r3, [r1, #0]
   1cb28:	604b      	str	r3, [r1, #4]
   1cb2a:	608b      	str	r3, [r1, #8]
   1cb2c:	60cb      	str	r3, [r1, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1cb2e:	4770      	bx	lr

0001cb30 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1cb30:	4770      	bx	lr

0001cb32 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1cb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cb36:	4604      	mov	r4, r0
   1cb38:	460d      	mov	r5, r1
   1cb3a:	4617      	mov	r7, r2
   1cb3c:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb3e:	7980      	ldrb	r0, [r0, #6]
   1cb40:	f7f3 fe68 	bl	10814 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1cb44:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1cb46:	681b      	ldr	r3, [r3, #0]
   1cb48:	f8d3 8000 	ldr.w	r8, [r3]
   1cb4c:	463a      	mov	r2, r7
   1cb4e:	4633      	mov	r3, r6
   1cb50:	4629      	mov	r1, r5
   1cb52:	4620      	mov	r0, r4
   1cb54:	47c0      	blx	r8
}
   1cb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cb5a <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1cb5a:	b538      	push	{r3, r4, r5, lr}
   1cb5c:	4604      	mov	r4, r0
   1cb5e:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb60:	7980      	ldrb	r0, [r0, #6]
   1cb62:	f7f3 fe57 	bl	10814 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1cb66:	7963      	ldrb	r3, [r4, #5]
   1cb68:	f013 0f02 	tst.w	r3, #2
   1cb6c:	d105      	bne.n	1cb7a <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1cb6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1cb70:	681b      	ldr	r3, [r3, #0]
   1cb72:	689b      	ldr	r3, [r3, #8]
   1cb74:	4629      	mov	r1, r5
   1cb76:	4620      	mov	r0, r4
   1cb78:	4798      	blx	r3
}
   1cb7a:	bd38      	pop	{r3, r4, r5, pc}

0001cb7c <net_buf_id>:
{
   1cb7c:	b510      	push	{r4, lr}
   1cb7e:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb80:	7980      	ldrb	r0, [r0, #6]
   1cb82:	f7f3 fe47 	bl	10814 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cb86:	7f03      	ldrb	r3, [r0, #28]
   1cb88:	3317      	adds	r3, #23
   1cb8a:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1cb8e:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1cb90:	1a20      	subs	r0, r4, r0
}
   1cb92:	fbb0 f0f3 	udiv	r0, r0, r3
   1cb96:	bd10      	pop	{r4, pc}

0001cb98 <fixed_data_alloc>:
{
   1cb98:	b570      	push	{r4, r5, r6, lr}
   1cb9a:	4604      	mov	r4, r0
   1cb9c:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cb9e:	7980      	ldrb	r0, [r0, #6]
   1cba0:	f7f3 fe38 	bl	10814 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1cba4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1cba6:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1cba8:	682a      	ldr	r2, [r5, #0]
   1cbaa:	6819      	ldr	r1, [r3, #0]
   1cbac:	428a      	cmp	r2, r1
   1cbae:	bf28      	it	cs
   1cbb0:	460a      	movcs	r2, r1
   1cbb2:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1cbb4:	685d      	ldr	r5, [r3, #4]
   1cbb6:	681e      	ldr	r6, [r3, #0]
   1cbb8:	4620      	mov	r0, r4
   1cbba:	f7ff ffdf 	bl	1cb7c <net_buf_id>
}
   1cbbe:	fb00 5006 	mla	r0, r0, r6, r5
   1cbc2:	bd70      	pop	{r4, r5, r6, pc}

0001cbc4 <net_buf_reset>:
	buf->len  = 0U;
   1cbc4:	2300      	movs	r3, #0
   1cbc6:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1cbc8:	6903      	ldr	r3, [r0, #16]
   1cbca:	6083      	str	r3, [r0, #8]
}
   1cbcc:	4770      	bx	lr

0001cbce <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1cbce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cbd2:	b082      	sub	sp, #8
   1cbd4:	4605      	mov	r5, r0
   1cbd6:	9101      	str	r1, [sp, #4]
   1cbd8:	4616      	mov	r6, r2
   1cbda:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1cbdc:	4610      	mov	r0, r2
   1cbde:	4619      	mov	r1, r3
   1cbe0:	f001 fb2e 	bl	1e240 <sys_clock_timeout_end_calc>
   1cbe4:	4680      	mov	r8, r0
   1cbe6:	4689      	mov	r9, r1
	__asm__ volatile(
   1cbe8:	f04f 0320 	mov.w	r3, #32
   1cbec:	f3ef 8a11 	mrs	sl, BASEPRI
   1cbf0:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbf4:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1cbf8:	8b6b      	ldrh	r3, [r5, #26]
   1cbfa:	2b00      	cmp	r3, #0
   1cbfc:	d040      	beq.n	1cc80 <net_buf_alloc_len+0xb2>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1cbfe:	8b2a      	ldrh	r2, [r5, #24]
   1cc00:	4293      	cmp	r3, r2
   1cc02:	d20b      	bcs.n	1cc1c <net_buf_alloc_len+0x4e>
	return z_impl_k_queue_get(queue, timeout);
   1cc04:	2200      	movs	r2, #0
   1cc06:	2300      	movs	r3, #0
   1cc08:	4628      	mov	r0, r5
   1cc0a:	f7f6 f945 	bl	12e98 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1cc0e:	4604      	mov	r4, r0
   1cc10:	b120      	cbz	r0, 1cc1c <net_buf_alloc_len+0x4e>
	__asm__ volatile(
   1cc12:	f38a 8811 	msr	BASEPRI, sl
   1cc16:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   1cc1a:	e015      	b.n	1cc48 <net_buf_alloc_len+0x7a>
			}
		}

		uninit_count = pool->uninit_count--;
   1cc1c:	8b6a      	ldrh	r2, [r5, #26]
   1cc1e:	1e53      	subs	r3, r2, #1
   1cc20:	836b      	strh	r3, [r5, #26]
   1cc22:	f38a 8811 	msr	BASEPRI, sl
   1cc26:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1cc2a:	7f2c      	ldrb	r4, [r5, #28]
   1cc2c:	3417      	adds	r4, #23
   1cc2e:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1cc32:	8b2c      	ldrh	r4, [r5, #24]
   1cc34:	1aa2      	subs	r2, r4, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1cc36:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1cc38:	fb02 4403 	mla	r4, r2, r3, r4
	buf->pool_id = pool_id(pool);
   1cc3c:	4628      	mov	r0, r5
   1cc3e:	f7f3 fddd 	bl	107fc <pool_id>
   1cc42:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   1cc44:	7f2b      	ldrb	r3, [r5, #28]
   1cc46:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1cc48:	9b01      	ldr	r3, [sp, #4]
   1cc4a:	b39b      	cbz	r3, 1ccb4 <net_buf_alloc_len+0xe6>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1cc4c:	ea56 0307 	orrs.w	r3, r6, r7
   1cc50:	d005      	beq.n	1cc5e <net_buf_alloc_len+0x90>
   1cc52:	f1b7 3fff 	cmp.w	r7, #4294967295
   1cc56:	bf08      	it	eq
   1cc58:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1cc5c:	d11d      	bne.n	1cc9a <net_buf_alloc_len+0xcc>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1cc5e:	4632      	mov	r2, r6
   1cc60:	463b      	mov	r3, r7
   1cc62:	a901      	add	r1, sp, #4
   1cc64:	4620      	mov	r0, r4
   1cc66:	f7ff ff64 	bl	1cb32 <data_alloc>
   1cc6a:	4605      	mov	r5, r0
   1cc6c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1cc6e:	bb18      	cbnz	r0, 1ccb8 <net_buf_alloc_len+0xea>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cc70:	79a0      	ldrb	r0, [r4, #6]
   1cc72:	f7f3 fdcf 	bl	10814 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1cc76:	4621      	mov	r1, r4
   1cc78:	f000 ffcd 	bl	1dc16 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1cc7c:	462c      	mov	r4, r5
}
   1cc7e:	e025      	b.n	1cccc <net_buf_alloc_len+0xfe>
   1cc80:	f38a 8811 	msr	BASEPRI, sl
   1cc84:	f3bf 8f6f 	isb	sy
   1cc88:	4632      	mov	r2, r6
   1cc8a:	463b      	mov	r3, r7
   1cc8c:	4628      	mov	r0, r5
   1cc8e:	f7f6 f903 	bl	12e98 <z_impl_k_queue_get>
	if (!buf) {
   1cc92:	4604      	mov	r4, r0
   1cc94:	2800      	cmp	r0, #0
   1cc96:	d1d7      	bne.n	1cc48 <net_buf_alloc_len+0x7a>
   1cc98:	e018      	b.n	1cccc <net_buf_alloc_len+0xfe>
			int64_t remaining = end - sys_clock_tick_get();
   1cc9a:	f7f7 f87d 	bl	13d98 <sys_clock_tick_get>
   1cc9e:	ebb8 0600 	subs.w	r6, r8, r0
   1cca2:	eb69 0701 	sbc.w	r7, r9, r1
			if (remaining <= 0) {
   1cca6:	2e01      	cmp	r6, #1
   1cca8:	f177 0300 	sbcs.w	r3, r7, #0
   1ccac:	dad7      	bge.n	1cc5e <net_buf_alloc_len+0x90>
				timeout = K_NO_WAIT;
   1ccae:	2600      	movs	r6, #0
   1ccb0:	4637      	mov	r7, r6
   1ccb2:	e7d4      	b.n	1cc5e <net_buf_alloc_len+0x90>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1ccb4:	2300      	movs	r3, #0
   1ccb6:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1ccb8:	2301      	movs	r3, #1
   1ccba:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1ccbc:	2300      	movs	r3, #0
   1ccbe:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1ccc0:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1ccc2:	9b01      	ldr	r3, [sp, #4]
   1ccc4:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1ccc6:	4620      	mov	r0, r4
   1ccc8:	f7ff ff7c 	bl	1cbc4 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1cccc:	4620      	mov	r0, r4
   1ccce:	b002      	add	sp, #8
   1ccd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ccd4 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1ccd4:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ccd6:	6a41      	ldr	r1, [r0, #36]	; 0x24
   1ccd8:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ccda:	6809      	ldr	r1, [r1, #0]
   1ccdc:	f7ff ff77 	bl	1cbce <net_buf_alloc_len>
}
   1cce0:	bd08      	pop	{r3, pc}

0001cce2 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1cce2:	b570      	push	{r4, r5, r6, lr}
   1cce4:	4605      	mov	r5, r0
   1cce6:	f7f6 f8d7 	bl	12e98 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1ccea:	4606      	mov	r6, r0
   1ccec:	b190      	cbz	r0, 1cd14 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ccee:	4604      	mov	r4, r0
   1ccf0:	e00a      	b.n	1cd08 <net_buf_get+0x26>
   1ccf2:	2200      	movs	r2, #0
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	4628      	mov	r0, r5
   1ccf8:	f7f6 f8ce 	bl	12e98 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ccfc:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1ccfe:	7963      	ldrb	r3, [r4, #5]
   1cd00:	f023 0301 	bic.w	r3, r3, #1
   1cd04:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1cd06:	4604      	mov	r4, r0
   1cd08:	7963      	ldrb	r3, [r4, #5]
   1cd0a:	f013 0f01 	tst.w	r3, #1
   1cd0e:	d1f0      	bne.n	1ccf2 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1cd10:	2300      	movs	r3, #0
   1cd12:	6023      	str	r3, [r4, #0]

	return buf;
}
   1cd14:	4630      	mov	r0, r6
   1cd16:	bd70      	pop	{r4, r5, r6, pc}

0001cd18 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1cd18:	6883      	ldr	r3, [r0, #8]
   1cd1a:	440b      	add	r3, r1
   1cd1c:	6003      	str	r3, [r0, #0]
}
   1cd1e:	4770      	bx	lr

0001cd20 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1cd20:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1cd22:	460a      	mov	r2, r1
   1cd24:	e004      	b.n	1cd30 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1cd26:	7953      	ldrb	r3, [r2, #5]
   1cd28:	f043 0301 	orr.w	r3, r3, #1
   1cd2c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1cd2e:	4622      	mov	r2, r4
   1cd30:	6814      	ldr	r4, [r2, #0]
   1cd32:	2c00      	cmp	r4, #0
   1cd34:	d1f7      	bne.n	1cd26 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1cd36:	f000 ff79 	bl	1dc2c <k_queue_append_list>
}
   1cd3a:	bd10      	pop	{r4, pc}

0001cd3c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1cd3c:	b538      	push	{r3, r4, r5, lr}
   1cd3e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   1cd40:	e00a      	b.n	1cd58 <net_buf_unref+0x1c>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   1cd42:	2300      	movs	r3, #0
   1cd44:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   1cd46:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1cd48:	79a0      	ldrb	r0, [r4, #6]
   1cd4a:	f7f3 fd63 	bl	10814 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1cd4e:	6a03      	ldr	r3, [r0, #32]
   1cd50:	b193      	cbz	r3, 1cd78 <net_buf_unref+0x3c>
			pool->destroy(buf);
   1cd52:	4620      	mov	r0, r4
   1cd54:	4798      	blx	r3
{
   1cd56:	462c      	mov	r4, r5
	while (buf) {
   1cd58:	b1ac      	cbz	r4, 1cd86 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   1cd5a:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   1cd5c:	7923      	ldrb	r3, [r4, #4]
   1cd5e:	3b01      	subs	r3, #1
   1cd60:	b2db      	uxtb	r3, r3
   1cd62:	7123      	strb	r3, [r4, #4]
   1cd64:	b97b      	cbnz	r3, 1cd86 <net_buf_unref+0x4a>
		if (buf->__buf) {
   1cd66:	6921      	ldr	r1, [r4, #16]
   1cd68:	2900      	cmp	r1, #0
   1cd6a:	d0ea      	beq.n	1cd42 <net_buf_unref+0x6>
			data_unref(buf, buf->__buf);
   1cd6c:	4620      	mov	r0, r4
   1cd6e:	f7ff fef4 	bl	1cb5a <data_unref>
			buf->__buf = NULL;
   1cd72:	2300      	movs	r3, #0
   1cd74:	6123      	str	r3, [r4, #16]
   1cd76:	e7e4      	b.n	1cd42 <net_buf_unref+0x6>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1cd78:	79a0      	ldrb	r0, [r4, #6]
   1cd7a:	f7f3 fd4b 	bl	10814 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1cd7e:	4621      	mov	r1, r4
   1cd80:	f000 ff49 	bl	1dc16 <k_queue_prepend>
}
   1cd84:	e7e7      	b.n	1cd56 <net_buf_unref+0x1a>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1cd86:	bd38      	pop	{r3, r4, r5, pc}

0001cd88 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1cd88:	7902      	ldrb	r2, [r0, #4]
   1cd8a:	3201      	adds	r2, #1
   1cd8c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1cd8e:	4770      	bx	lr

0001cd90 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1cd90:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1cd92:	4618      	mov	r0, r3
   1cd94:	681b      	ldr	r3, [r3, #0]
   1cd96:	2b00      	cmp	r3, #0
   1cd98:	d1fb      	bne.n	1cd92 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1cd9a:	4770      	bx	lr

0001cd9c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1cd9c:	b570      	push	{r4, r5, r6, lr}
   1cd9e:	4604      	mov	r4, r0
   1cda0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1cda2:	6806      	ldr	r6, [r0, #0]
   1cda4:	b11e      	cbz	r6, 1cdae <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1cda6:	4608      	mov	r0, r1
   1cda8:	f7ff fff2 	bl	1cd90 <net_buf_frag_last>
   1cdac:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1cdae:	6025      	str	r5, [r4, #0]
}
   1cdb0:	bd70      	pop	{r4, r5, r6, pc}

0001cdb2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1cdb2:	b538      	push	{r3, r4, r5, lr}
   1cdb4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1cdb6:	b138      	cbz	r0, 1cdc8 <net_buf_frag_add+0x16>
   1cdb8:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1cdba:	f7ff ffe9 	bl	1cd90 <net_buf_frag_last>
   1cdbe:	4629      	mov	r1, r5
   1cdc0:	f7ff ffec 	bl	1cd9c <net_buf_frag_insert>

	return head;
   1cdc4:	4620      	mov	r0, r4
}
   1cdc6:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1cdc8:	4608      	mov	r0, r1
   1cdca:	f7ff ffdd 	bl	1cd88 <net_buf_ref>
   1cdce:	e7fa      	b.n	1cdc6 <net_buf_frag_add+0x14>

0001cdd0 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1cdd0:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1cdd2:	b108      	cbz	r0, 1cdd8 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1cdd4:	680a      	ldr	r2, [r1, #0]
   1cdd6:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1cdd8:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1cdda:	2300      	movs	r3, #0
   1cddc:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1cdde:	4608      	mov	r0, r1
   1cde0:	f7ff ffac 	bl	1cd3c <net_buf_unref>
#endif

	return next_frag;
}
   1cde4:	4620      	mov	r0, r4
   1cde6:	bd10      	pop	{r4, pc}

0001cde8 <net_buf_simple_add>:
	return buf->data + buf->len;
   1cde8:	6802      	ldr	r2, [r0, #0]
   1cdea:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1cdec:	4419      	add	r1, r3
   1cdee:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1cdf0:	18d0      	adds	r0, r2, r3
   1cdf2:	4770      	bx	lr

0001cdf4 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1cdf4:	b538      	push	{r3, r4, r5, lr}
   1cdf6:	460d      	mov	r5, r1
   1cdf8:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1cdfa:	4611      	mov	r1, r2
   1cdfc:	f7ff fff4 	bl	1cde8 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ce00:	4622      	mov	r2, r4
   1ce02:	4629      	mov	r1, r5
   1ce04:	f7e4 fa7a 	bl	12fc <memcpy>
}
   1ce08:	bd38      	pop	{r3, r4, r5, pc}

0001ce0a <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   1ce0a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ce0c:	8882      	ldrh	r2, [r0, #4]
   1ce0e:	1a52      	subs	r2, r2, r1
   1ce10:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1ce12:	6800      	ldr	r0, [r0, #0]
   1ce14:	4408      	add	r0, r1
   1ce16:	6018      	str	r0, [r3, #0]
}
   1ce18:	4770      	bx	lr

0001ce1a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1ce1a:	4603      	mov	r3, r0
	void *data = buf->data;
   1ce1c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1ce1e:	889a      	ldrh	r2, [r3, #4]
   1ce20:	1a52      	subs	r2, r2, r1
   1ce22:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1ce24:	4401      	add	r1, r0
   1ce26:	6019      	str	r1, [r3, #0]

	return data;
}
   1ce28:	4770      	bx	lr

0001ce2a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1ce2a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1ce2c:	6803      	ldr	r3, [r0, #0]
   1ce2e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1ce30:	2101      	movs	r1, #1
   1ce32:	f7ff ffea 	bl	1ce0a <net_buf_simple_pull>

	return val;
}
   1ce36:	4620      	mov	r0, r4
   1ce38:	bd10      	pop	{r4, pc}

0001ce3a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1ce3a:	6802      	ldr	r2, [r0, #0]
   1ce3c:	6880      	ldr	r0, [r0, #8]
}
   1ce3e:	1a10      	subs	r0, r2, r0
   1ce40:	4770      	bx	lr

0001ce42 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   1ce42:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1ce44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1ce48:	0089      	lsls	r1, r1, #2
   1ce4a:	3138      	adds	r1, #56	; 0x38
}
   1ce4c:	4408      	add	r0, r1
   1ce4e:	4770      	bx	lr

0001ce50 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1ce50:	6840      	ldr	r0, [r0, #4]
}
   1ce52:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1ce56:	4770      	bx	lr

0001ce58 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1ce58:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1ce5a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   1ce5e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1ce62:	4770      	bx	lr

0001ce64 <get_status>:
{
   1ce64:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1ce66:	b2c9      	uxtb	r1, r1
   1ce68:	f7ff ffeb 	bl	1ce42 <get_sub_data>
   1ce6c:	6880      	ldr	r0, [r0, #8]
}
   1ce6e:	f000 0007 	and.w	r0, r0, #7
   1ce72:	bd08      	pop	{r3, pc}

0001ce74 <set_off_state>:
	__asm__ volatile(
   1ce74:	f04f 0320 	mov.w	r3, #32
   1ce78:	f3ef 8211 	mrs	r2, BASEPRI
   1ce7c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce80:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ce84:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1ce86:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1ce8a:	d001      	beq.n	1ce90 <set_off_state+0x1c>
   1ce8c:	428b      	cmp	r3, r1
   1ce8e:	d107      	bne.n	1cea0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1ce90:	2301      	movs	r3, #1
   1ce92:	6003      	str	r3, [r0, #0]
	int err = 0;
   1ce94:	2000      	movs	r0, #0
	__asm__ volatile(
   1ce96:	f382 8811 	msr	BASEPRI, r2
   1ce9a:	f3bf 8f6f 	isb	sy
}
   1ce9e:	4770      	bx	lr
		err = -EPERM;
   1cea0:	f04f 30ff 	mov.w	r0, #4294967295
   1cea4:	e7f7      	b.n	1ce96 <set_off_state+0x22>

0001cea6 <set_starting_state>:
	__asm__ volatile(
   1cea6:	f04f 0320 	mov.w	r3, #32
   1ceaa:	f3ef 8211 	mrs	r2, BASEPRI
   1ceae:	f383 8812 	msr	BASEPRI_MAX, r3
   1ceb2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1ceb6:	6803      	ldr	r3, [r0, #0]
   1ceb8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1cebc:	f003 0307 	and.w	r3, r3, #7
   1cec0:	2b01      	cmp	r3, #1
   1cec2:	d008      	beq.n	1ced6 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   1cec4:	458c      	cmp	ip, r1
   1cec6:	d009      	beq.n	1cedc <set_starting_state+0x36>
		err = -EPERM;
   1cec8:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   1cecc:	f382 8811 	msr	BASEPRI, r2
   1ced0:	f3bf 8f6f 	isb	sy
}
   1ced4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1ced6:	6001      	str	r1, [r0, #0]
	int err = 0;
   1ced8:	2000      	movs	r0, #0
   1ceda:	e7f7      	b.n	1cecc <set_starting_state+0x26>
		err = -EALREADY;
   1cedc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1cee0:	e7f4      	b.n	1cecc <set_starting_state+0x26>

0001cee2 <set_on_state>:
	__asm__ volatile(
   1cee2:	f04f 0320 	mov.w	r3, #32
   1cee6:	f3ef 8211 	mrs	r2, BASEPRI
   1ceea:	f383 8812 	msr	BASEPRI_MAX, r3
   1ceee:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1cef2:	6803      	ldr	r3, [r0, #0]
   1cef4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cef8:	f043 0302 	orr.w	r3, r3, #2
   1cefc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1cefe:	f382 8811 	msr	BASEPRI, r2
   1cf02:	f3bf 8f6f 	isb	sy
}
   1cf06:	4770      	bx	lr

0001cf08 <clkstarted_handle>:
{
   1cf08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cf0a:	4606      	mov	r6, r0
   1cf0c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   1cf0e:	f7ff ff98 	bl	1ce42 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1cf12:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1cf14:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   1cf16:	2300      	movs	r3, #0
   1cf18:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   1cf1c:	f7ff ffe1 	bl	1cee2 <set_on_state>
	if (callback) {
   1cf20:	b11d      	cbz	r5, 1cf2a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1cf22:	463a      	mov	r2, r7
   1cf24:	4621      	mov	r1, r4
   1cf26:	4630      	mov	r0, r6
   1cf28:	47a8      	blx	r5
}
   1cf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001cf2c <stop>:
{
   1cf2c:	b570      	push	{r4, r5, r6, lr}
   1cf2e:	4606      	mov	r6, r0
   1cf30:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cf32:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1cf34:	4621      	mov	r1, r4
   1cf36:	f7ff ff84 	bl	1ce42 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   1cf3a:	4629      	mov	r1, r5
   1cf3c:	3008      	adds	r0, #8
   1cf3e:	f7ff ff99 	bl	1ce74 <set_off_state>
	if (err < 0) {
   1cf42:	2800      	cmp	r0, #0
   1cf44:	db06      	blt.n	1cf54 <stop+0x28>
	get_sub_config(dev, type)->stop();
   1cf46:	4621      	mov	r1, r4
   1cf48:	4630      	mov	r0, r6
   1cf4a:	f7ff ff81 	bl	1ce50 <get_sub_config>
   1cf4e:	6843      	ldr	r3, [r0, #4]
   1cf50:	4798      	blx	r3
	return 0;
   1cf52:	2000      	movs	r0, #0
}
   1cf54:	bd70      	pop	{r4, r5, r6, pc}

0001cf56 <api_stop>:
{
   1cf56:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   1cf58:	2280      	movs	r2, #128	; 0x80
   1cf5a:	f7ff ffe7 	bl	1cf2c <stop>
}
   1cf5e:	bd08      	pop	{r3, pc}

0001cf60 <async_start>:
{
   1cf60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf64:	4606      	mov	r6, r0
   1cf66:	4690      	mov	r8, r2
   1cf68:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1cf6a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1cf6c:	4629      	mov	r1, r5
   1cf6e:	f7ff ff68 	bl	1ce42 <get_sub_data>
   1cf72:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1cf74:	9906      	ldr	r1, [sp, #24]
   1cf76:	3008      	adds	r0, #8
   1cf78:	f7ff ff95 	bl	1cea6 <set_starting_state>
	if (err < 0) {
   1cf7c:	2800      	cmp	r0, #0
   1cf7e:	db09      	blt.n	1cf94 <async_start+0x34>
	subdata->cb = cb;
   1cf80:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1cf84:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   1cf86:	4629      	mov	r1, r5
   1cf88:	4630      	mov	r0, r6
   1cf8a:	f7ff ff61 	bl	1ce50 <get_sub_config>
   1cf8e:	6803      	ldr	r3, [r0, #0]
   1cf90:	4798      	blx	r3
	return 0;
   1cf92:	2000      	movs	r0, #0
}
   1cf94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cf98 <api_start>:
{
   1cf98:	b510      	push	{r4, lr}
   1cf9a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1cf9c:	2480      	movs	r4, #128	; 0x80
   1cf9e:	9400      	str	r4, [sp, #0]
   1cfa0:	f7ff ffde 	bl	1cf60 <async_start>
}
   1cfa4:	b002      	add	sp, #8
   1cfa6:	bd10      	pop	{r4, pc}

0001cfa8 <onoff_started_callback>:
{
   1cfa8:	b510      	push	{r4, lr}
   1cfaa:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   1cfac:	b2c9      	uxtb	r1, r1
   1cfae:	f7ff ff53 	bl	1ce58 <get_onoff_manager>
	notify(mgr, 0);
   1cfb2:	2100      	movs	r1, #0
   1cfb4:	47a0      	blx	r4
}
   1cfb6:	bd10      	pop	{r4, pc}

0001cfb8 <hfclk_start>:
{
   1cfb8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1cfba:	2001      	movs	r0, #1
   1cfbc:	f000 fc17 	bl	1d7ee <nrfx_clock_start>
}
   1cfc0:	bd08      	pop	{r3, pc}

0001cfc2 <lfclk_start>:
{
   1cfc2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1cfc4:	2000      	movs	r0, #0
   1cfc6:	f000 fc12 	bl	1d7ee <nrfx_clock_start>
}
   1cfca:	bd08      	pop	{r3, pc}

0001cfcc <hfclk_stop>:
{
   1cfcc:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1cfce:	2001      	movs	r0, #1
   1cfd0:	f000 fc5d 	bl	1d88e <nrfx_clock_stop>
}
   1cfd4:	bd08      	pop	{r3, pc}

0001cfd6 <lfclk_stop>:
{
   1cfd6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1cfd8:	2000      	movs	r0, #0
   1cfda:	f000 fc58 	bl	1d88e <nrfx_clock_stop>
}
   1cfde:	bd08      	pop	{r3, pc}

0001cfe0 <blocking_start_callback>:
{
   1cfe0:	b508      	push	{r3, lr}
   1cfe2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1cfe4:	f7f5 ff92 	bl	12f0c <z_impl_k_sem_give>
}
   1cfe8:	bd08      	pop	{r3, pc}

0001cfea <get_drive>:
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1cfea:	f420 70fc 	bic.w	r0, r0, #504	; 0x1f8
   1cfee:	f020 0001 	bic.w	r0, r0, #1
   1cff2:	0540      	lsls	r0, r0, #21
   1cff4:	0d40      	lsrs	r0, r0, #21
   1cff6:	f240 2306 	movw	r3, #518	; 0x206
   1cffa:	4298      	cmp	r0, r3
   1cffc:	d033      	beq.n	1d066 <get_drive+0x7c>
   1cffe:	d816      	bhi.n	1d02e <get_drive+0x44>
   1d000:	2806      	cmp	r0, #6
   1d002:	d02c      	beq.n	1d05e <get_drive+0x74>
   1d004:	d906      	bls.n	1d014 <get_drive+0x2a>
   1d006:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1d00a:	d10d      	bne.n	1d028 <get_drive+0x3e>
		*drive = NRF_GPIO_PIN_H0S1;
   1d00c:	2301      	movs	r3, #1
   1d00e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d010:	2000      	movs	r0, #0
		break;
   1d012:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d014:	b300      	cbz	r0, 1d058 <get_drive+0x6e>
   1d016:	2802      	cmp	r0, #2
   1d018:	d103      	bne.n	1d022 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_D0S1;
   1d01a:	2304      	movs	r3, #4
   1d01c:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d01e:	2000      	movs	r0, #0
		break;
   1d020:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d022:	f06f 0015 	mvn.w	r0, #21
   1d026:	4770      	bx	lr
   1d028:	f06f 0015 	mvn.w	r0, #21
   1d02c:	4770      	bx	lr
   1d02e:	f240 4302 	movw	r3, #1026	; 0x402
   1d032:	4298      	cmp	r0, r3
   1d034:	d01b      	beq.n	1d06e <get_drive+0x84>
   1d036:	f5b0 6fc0 	cmp.w	r0, #1536	; 0x600
   1d03a:	d103      	bne.n	1d044 <get_drive+0x5a>
		*drive = NRF_GPIO_PIN_H0H1;
   1d03c:	2303      	movs	r3, #3
   1d03e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d040:	2000      	movs	r0, #0
		break;
   1d042:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d044:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1d048:	d103      	bne.n	1d052 <get_drive+0x68>
		*drive = NRF_GPIO_PIN_S0H1;
   1d04a:	2302      	movs	r3, #2
   1d04c:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d04e:	2000      	movs	r0, #0
		break;
   1d050:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
   1d052:	f06f 0015 	mvn.w	r0, #21
   1d056:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1d058:	2000      	movs	r0, #0
   1d05a:	7008      	strb	r0, [r1, #0]
		break;
   1d05c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1d05e:	2306      	movs	r3, #6
   1d060:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d062:	2000      	movs	r0, #0
		break;
   1d064:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1d066:	2307      	movs	r3, #7
   1d068:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d06a:	2000      	movs	r0, #0
		break;
   1d06c:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   1d06e:	2305      	movs	r3, #5
   1d070:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1d072:	2000      	movs	r0, #0
}
   1d074:	4770      	bx	lr

0001d076 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   1d076:	f010 0f10 	tst.w	r0, #16
   1d07a:	d104      	bne.n	1d086 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   1d07c:	f010 0f20 	tst.w	r0, #32
   1d080:	d103      	bne.n	1d08a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   1d082:	2000      	movs	r0, #0
   1d084:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   1d086:	2003      	movs	r0, #3
   1d088:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   1d08a:	2001      	movs	r0, #1
}
   1d08c:	4770      	bx	lr

0001d08e <gpio_nrfx_port_get_raw>:
	return port->config;
   1d08e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d090:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1d092:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1d096:	600b      	str	r3, [r1, #0]
}
   1d098:	2000      	movs	r0, #0
   1d09a:	4770      	bx	lr

0001d09c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   1d09c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d09e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1d0a0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1d0a4:	4042      	eors	r2, r0
   1d0a6:	400a      	ands	r2, r1
   1d0a8:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1d0aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1d0ae:	2000      	movs	r0, #0
   1d0b0:	4770      	bx	lr

0001d0b2 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   1d0b2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d0b4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1d0b6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   1d0ba:	2000      	movs	r0, #0
   1d0bc:	4770      	bx	lr

0001d0be <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   1d0be:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d0c0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   1d0c2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1d0c6:	2000      	movs	r0, #0
   1d0c8:	4770      	bx	lr

0001d0ca <gpio_nrfx_port_toggle_bits>:
	return port->config;
   1d0ca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d0cc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1d0ce:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1d0d2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1d0d4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1d0d8:	2000      	movs	r0, #0
   1d0da:	4770      	bx	lr

0001d0dc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   1d0dc:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   1d0e0:	d007      	beq.n	1d0f2 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d0e2:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   1d0e6:	d00d      	beq.n	1d104 <get_trigger+0x28>
   1d0e8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1d0ec:	d008      	beq.n	1d100 <get_trigger+0x24>
   1d0ee:	2001      	movs	r0, #1
}
   1d0f0:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1d0f2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   1d0f6:	d001      	beq.n	1d0fc <get_trigger+0x20>
   1d0f8:	2005      	movs	r0, #5
   1d0fa:	4770      	bx	lr
   1d0fc:	2004      	movs	r0, #4
   1d0fe:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1d100:	2002      	movs	r0, #2
   1d102:	4770      	bx	lr
   1d104:	2003      	movs	r0, #3
   1d106:	4770      	bx	lr

0001d108 <gpio_nrfx_manage_callback>:
{
   1d108:	b410      	push	{r4}
	return port->data;
   1d10a:	6904      	ldr	r4, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1d10c:	f104 0c04 	add.w	ip, r4, #4
	return list->head;
   1d110:	6863      	ldr	r3, [r4, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1d112:	b1fb      	cbz	r3, 1d154 <gpio_nrfx_manage_callback+0x4c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d114:	2000      	movs	r0, #0
   1d116:	e00d      	b.n	1d134 <gpio_nrfx_manage_callback+0x2c>
	return node->next;
   1d118:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1d11a:	6063      	str	r3, [r4, #4]
	return list->tail;
   1d11c:	f8dc 0004 	ldr.w	r0, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d120:	4281      	cmp	r1, r0
   1d122:	d112      	bne.n	1d14a <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1d124:	f8cc 3004 	str.w	r3, [ip, #4]
}
   1d128:	e00f      	b.n	1d14a <gpio_nrfx_manage_callback+0x42>
	list->tail = node;
   1d12a:	f8cc 0004 	str.w	r0, [ip, #4]
}
   1d12e:	e00c      	b.n	1d14a <gpio_nrfx_manage_callback+0x42>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d130:	4618      	mov	r0, r3
   1d132:	681b      	ldr	r3, [r3, #0]
   1d134:	b163      	cbz	r3, 1d150 <gpio_nrfx_manage_callback+0x48>
   1d136:	4299      	cmp	r1, r3
   1d138:	d1fa      	bne.n	1d130 <gpio_nrfx_manage_callback+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1d13a:	2800      	cmp	r0, #0
   1d13c:	d0ec      	beq.n	1d118 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   1d13e:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1d140:	6003      	str	r3, [r0, #0]
	return list->tail;
   1d142:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1d146:	4299      	cmp	r1, r3
   1d148:	d0ef      	beq.n	1d12a <gpio_nrfx_manage_callback+0x22>
	parent->next = child;
   1d14a:	2300      	movs	r3, #0
   1d14c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1d14e:	2301      	movs	r3, #1
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1d150:	b903      	cbnz	r3, 1d154 <gpio_nrfx_manage_callback+0x4c>
			if (!set) {
   1d152:	b162      	cbz	r2, 1d16e <gpio_nrfx_manage_callback+0x66>
				return -EINVAL;
			}
		}
	}

	if (set) {
   1d154:	b172      	cbz	r2, 1d174 <gpio_nrfx_manage_callback+0x6c>
	return list->head;
   1d156:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1d158:	600b      	str	r3, [r1, #0]
	list->head = node;
   1d15a:	6061      	str	r1, [r4, #4]
	return list->tail;
   1d15c:	f8dc 3004 	ldr.w	r3, [ip, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d160:	b10b      	cbz	r3, 1d166 <gpio_nrfx_manage_callback+0x5e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1d162:	2000      	movs	r0, #0
   1d164:	e007      	b.n	1d176 <gpio_nrfx_manage_callback+0x6e>
	list->tail = node;
   1d166:	f8cc 1004 	str.w	r1, [ip, #4]
   1d16a:	2000      	movs	r0, #0
}
   1d16c:	e003      	b.n	1d176 <gpio_nrfx_manage_callback+0x6e>
				return -EINVAL;
   1d16e:	f06f 0015 	mvn.w	r0, #21
   1d172:	e000      	b.n	1d176 <gpio_nrfx_manage_callback+0x6e>
	return 0;
   1d174:	2000      	movs	r0, #0
}
   1d176:	bc10      	pop	{r4}
   1d178:	4770      	bx	lr

0001d17a <nrfx_gpio_handler>:
{
   1d17a:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   1d17c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   1d180:	0940      	lsrs	r0, r0, #5
   1d182:	f7f3 fd45 	bl	10c10 <get_dev>
	if (port == NULL) {
   1d186:	b1d8      	cbz	r0, 1d1c0 <nrfx_gpio_handler+0x46>
   1d188:	4606      	mov	r6, r0
	return port->data;
   1d18a:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   1d18c:	2501      	movs	r5, #1
   1d18e:	40a5      	lsls	r5, r4
	return list->head;
   1d190:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d192:	b119      	cbz	r1, 1d19c <nrfx_gpio_handler+0x22>
   1d194:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d196:	b149      	cbz	r1, 1d1ac <nrfx_gpio_handler+0x32>
	return node->next;
   1d198:	680c      	ldr	r4, [r1, #0]
   1d19a:	e007      	b.n	1d1ac <nrfx_gpio_handler+0x32>
   1d19c:	460c      	mov	r4, r1
   1d19e:	e005      	b.n	1d1ac <nrfx_gpio_handler+0x32>
   1d1a0:	b164      	cbz	r4, 1d1bc <nrfx_gpio_handler+0x42>
   1d1a2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d1a4:	b104      	cbz	r4, 1d1a8 <nrfx_gpio_handler+0x2e>
	return node->next;
   1d1a6:	6823      	ldr	r3, [r4, #0]
   1d1a8:	4621      	mov	r1, r4
   1d1aa:	461c      	mov	r4, r3
   1d1ac:	b141      	cbz	r1, 1d1c0 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   1d1ae:	688a      	ldr	r2, [r1, #8]
   1d1b0:	402a      	ands	r2, r5
   1d1b2:	d0f5      	beq.n	1d1a0 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1d1b4:	684b      	ldr	r3, [r1, #4]
   1d1b6:	4630      	mov	r0, r6
   1d1b8:	4798      	blx	r3
   1d1ba:	e7f1      	b.n	1d1a0 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1d1bc:	4623      	mov	r3, r4
   1d1be:	e7f3      	b.n	1d1a8 <nrfx_gpio_handler+0x2e>
}
   1d1c0:	bd70      	pop	{r4, r5, r6, pc}

0001d1c2 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   1d1c2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d1c4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d1c6:	f04f 0120 	mov.w	r1, #32
   1d1ca:	f3ef 8211 	mrs	r2, BASEPRI
   1d1ce:	f381 8812 	msr	BASEPRI_MAX, r1
   1d1d2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1d6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d1da:	b131      	cbz	r1, 1d1ea <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d1dc:	2100      	movs	r1, #0
   1d1de:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d1e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1e6:	2101      	movs	r1, #1
   1d1e8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d1ea:	f382 8811 	msr	BASEPRI, r2
   1d1ee:	f3bf 8f6f 	isb	sy
}
   1d1f2:	4770      	bx	lr

0001d1f4 <uarte_nrfx_isr_int>:
{
   1d1f4:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d1f6:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
   1d1f8:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
   1d1fa:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1d1fe:	f413 7f80 	tst.w	r3, #256	; 0x100
   1d202:	d002      	beq.n	1d20a <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d204:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1d208:	b9d3      	cbnz	r3, 1d240 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d20a:	686b      	ldr	r3, [r5, #4]
   1d20c:	f013 0f10 	tst.w	r3, #16
   1d210:	d015      	beq.n	1d23e <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
   1d212:	f04f 0220 	mov.w	r2, #32
   1d216:	f3ef 8311 	mrs	r3, BASEPRI
   1d21a:	f382 8812 	msr	BASEPRI_MAX, r2
   1d21e:	f3bf 8f6f 	isb	sy
   1d222:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1d226:	b112      	cbz	r2, 1d22e <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d228:	2200      	movs	r2, #0
   1d22a:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1d22e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   1d232:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
   1d236:	f383 8811 	msr	BASEPRI, r3
   1d23a:	f3bf 8f6f 	isb	sy
}
   1d23e:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   1d240:	f7ff ffbf 	bl	1d1c2 <endtx_isr>
   1d244:	e7e1      	b.n	1d20a <uarte_nrfx_isr_int+0x16>

0001d246 <uarte_nrfx_configure>:
{
   1d246:	b570      	push	{r4, r5, r6, lr}
   1d248:	b082      	sub	sp, #8
   1d24a:	4605      	mov	r5, r0
   1d24c:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   1d24e:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   1d250:	794b      	ldrb	r3, [r1, #5]
   1d252:	2b01      	cmp	r3, #1
   1d254:	d006      	beq.n	1d264 <uarte_nrfx_configure+0x1e>
   1d256:	2b03      	cmp	r3, #3
   1d258:	d011      	beq.n	1d27e <uarte_nrfx_configure+0x38>
   1d25a:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   1d25e:	4610      	mov	r0, r2
   1d260:	b002      	add	sp, #8
   1d262:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   1d264:	2300      	movs	r3, #0
   1d266:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d26a:	79a3      	ldrb	r3, [r4, #6]
   1d26c:	2b03      	cmp	r3, #3
   1d26e:	d146      	bne.n	1d2fe <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   1d270:	79e3      	ldrb	r3, [r4, #7]
   1d272:	b143      	cbz	r3, 1d286 <uarte_nrfx_configure+0x40>
   1d274:	2b01      	cmp	r3, #1
   1d276:	d015      	beq.n	1d2a4 <uarte_nrfx_configure+0x5e>
   1d278:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1d27c:	e7ef      	b.n	1d25e <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d27e:	2310      	movs	r3, #16
   1d280:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   1d284:	e7f1      	b.n	1d26a <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   1d286:	2300      	movs	r3, #0
   1d288:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   1d28c:	2300      	movs	r3, #0
   1d28e:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   1d292:	7923      	ldrb	r3, [r4, #4]
   1d294:	2b01      	cmp	r3, #1
   1d296:	d02a      	beq.n	1d2ee <uarte_nrfx_configure+0xa8>
   1d298:	2b02      	cmp	r3, #2
   1d29a:	d024      	beq.n	1d2e6 <uarte_nrfx_configure+0xa0>
   1d29c:	b133      	cbz	r3, 1d2ac <uarte_nrfx_configure+0x66>
   1d29e:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1d2a2:	e7dc      	b.n	1d25e <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   1d2a4:	2301      	movs	r3, #1
   1d2a6:	f88d 3000 	strb.w	r3, [sp]
		break;
   1d2aa:	e7ef      	b.n	1d28c <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1d2ac:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d2b0:	6821      	ldr	r1, [r4, #0]
   1d2b2:	4628      	mov	r0, r5
   1d2b4:	f7f3 fde2 	bl	10e7c <baudrate_set>
   1d2b8:	4602      	mov	r2, r0
   1d2ba:	bb18      	cbnz	r0, 1d304 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   1d2bc:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   1d2be:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d2c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   1d2c4:	f89d 0002 	ldrb.w	r0, [sp, #2]
   1d2c8:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   1d2ca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1d2ce:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   1d2d0:	f89d 0000 	ldrb.w	r0, [sp]
   1d2d4:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d2d6:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d2da:	3604      	adds	r6, #4
   1d2dc:	e894 0003 	ldmia.w	r4, {r0, r1}
   1d2e0:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   1d2e4:	e7bb      	b.n	1d25e <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d2e6:	230e      	movs	r3, #14
   1d2e8:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   1d2ec:	e7e0      	b.n	1d2b0 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d2ee:	230e      	movs	r3, #14
   1d2f0:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   1d2f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d2f8:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   1d2fc:	e7d8      	b.n	1d2b0 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   1d2fe:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1d302:	e7ac      	b.n	1d25e <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   1d304:	f06f 0285 	mvn.w	r2, #133	; 0x85
   1d308:	e7a9      	b.n	1d25e <uarte_nrfx_configure+0x18>

0001d30a <uarte_nrfx_config_get>:
{
   1d30a:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   1d30c:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   1d30e:	3304      	adds	r3, #4
   1d310:	e893 0003 	ldmia.w	r3, {r0, r1}
   1d314:	e882 0003 	stmia.w	r2, {r0, r1}
}
   1d318:	2000      	movs	r0, #0
   1d31a:	4770      	bx	lr

0001d31c <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   1d31c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d31e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d320:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d324:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1d328:	4770      	bx	lr

0001d32a <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   1d32a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d32c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1d32e:	685b      	ldr	r3, [r3, #4]
   1d330:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d334:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1d338:	b929      	cbnz	r1, 1d346 <is_tx_ready+0x1c>
   1d33a:	b933      	cbnz	r3, 1d34a <is_tx_ready+0x20>
   1d33c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   1d340:	b92b      	cbnz	r3, 1d34e <is_tx_ready+0x24>
   1d342:	2000      	movs	r0, #0
   1d344:	4770      	bx	lr
   1d346:	2001      	movs	r0, #1
   1d348:	4770      	bx	lr
   1d34a:	2000      	movs	r0, #0
   1d34c:	4770      	bx	lr
   1d34e:	2001      	movs	r0, #1
}
   1d350:	4770      	bx	lr

0001d352 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
   1d352:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d354:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d356:	2208      	movs	r2, #8
   1d358:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   1d35c:	4770      	bx	lr

0001d35e <tx_start>:
{
   1d35e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   1d360:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d362:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d364:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d368:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d36c:	2200      	movs	r2, #0
   1d36e:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   1d372:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   1d376:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   1d37a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d37e:	685b      	ldr	r3, [r3, #4]
   1d380:	f013 0f10 	tst.w	r3, #16
   1d384:	d102      	bne.n	1d38c <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d386:	2301      	movs	r3, #1
   1d388:	60a3      	str	r3, [r4, #8]
}
   1d38a:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   1d38c:	2101      	movs	r1, #1
   1d38e:	f7ff ffe0 	bl	1d352 <uarte_enable>
    p_reg->INTENSET = mask;
   1d392:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d396:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1d39a:	e7f4      	b.n	1d386 <tx_start+0x28>

0001d39c <uarte_nrfx_poll_in>:
{
   1d39c:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
   1d39e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   1d3a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1d3a2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d3a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1d3a8:	b152      	cbz	r2, 1d3c0 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   1d3aa:	7c62      	ldrb	r2, [r4, #17]
   1d3ac:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d3ae:	2000      	movs	r0, #0
   1d3b0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1d3b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d3b8:	2201      	movs	r2, #1
   1d3ba:	601a      	str	r2, [r3, #0]
}
   1d3bc:	bc10      	pop	{r4}
   1d3be:	4770      	bx	lr
		return -1;
   1d3c0:	f04f 30ff 	mov.w	r0, #4294967295
   1d3c4:	e7fa      	b.n	1d3bc <uarte_nrfx_poll_in+0x20>

0001d3c6 <wait_tx_ready>:
{
   1d3c6:	b570      	push	{r4, r5, r6, lr}
   1d3c8:	4606      	mov	r6, r0
   1d3ca:	e014      	b.n	1d3f6 <wait_tx_ready+0x30>
		if (res) {
   1d3cc:	b17d      	cbz	r5, 1d3ee <wait_tx_ready+0x28>
	__asm__ volatile(
   1d3ce:	f04f 0320 	mov.w	r3, #32
   1d3d2:	f3ef 8411 	mrs	r4, BASEPRI
   1d3d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d3da:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d3de:	4630      	mov	r0, r6
   1d3e0:	f7ff ffa3 	bl	1d32a <is_tx_ready>
   1d3e4:	b9a0      	cbnz	r0, 1d410 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1d3e6:	f384 8811 	msr	BASEPRI, r4
   1d3ea:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   1d3ee:	2021      	movs	r0, #33	; 0x21
   1d3f0:	2100      	movs	r1, #0
   1d3f2:	f7f6 fb13 	bl	13a1c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d3f6:	2464      	movs	r4, #100	; 0x64
   1d3f8:	4630      	mov	r0, r6
   1d3fa:	f7ff ff96 	bl	1d32a <is_tx_ready>
   1d3fe:	4605      	mov	r5, r0
   1d400:	2800      	cmp	r0, #0
   1d402:	d1e3      	bne.n	1d3cc <wait_tx_ready+0x6>
   1d404:	2001      	movs	r0, #1
   1d406:	f000 f964 	bl	1d6d2 <nrfx_busy_wait>
   1d40a:	3c01      	subs	r4, #1
   1d40c:	d1f4      	bne.n	1d3f8 <wait_tx_ready+0x32>
   1d40e:	e7dd      	b.n	1d3cc <wait_tx_ready+0x6>
}
   1d410:	4620      	mov	r0, r4
   1d412:	bd70      	pop	{r4, r5, r6, pc}

0001d414 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1d414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d418:	b083      	sub	sp, #12
   1d41a:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   1d41c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   1d41e:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   1d420:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d424:	2100      	movs	r1, #0
   1d426:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1d42a:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d42e:	f8d7 900c 	ldr.w	r9, [r7, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d432:	aa01      	add	r2, sp, #4
   1d434:	4648      	mov	r0, r9
   1d436:	f000 f8fe 	bl	1d636 <pinctrl_lookup_state>
	if (ret < 0) {
   1d43a:	1e04      	subs	r4, r0, #0
   1d43c:	db07      	blt.n	1d44e <uarte_instance_init+0x3a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d43e:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d440:	f8d9 2000 	ldr.w	r2, [r9]
   1d444:	7919      	ldrb	r1, [r3, #4]
   1d446:	6818      	ldr	r0, [r3, #0]
   1d448:	f7f4 f9d0 	bl	117ec <pinctrl_configure_pins>
   1d44c:	4604      	mov	r4, r0
	if (err < 0) {
   1d44e:	2c00      	cmp	r4, #0
   1d450:	db35      	blt.n	1d4be <uarte_instance_init+0xaa>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d452:	f108 0104 	add.w	r1, r8, #4
   1d456:	4628      	mov	r0, r5
   1d458:	f7ff fef5 	bl	1d246 <uarte_nrfx_configure>
	if (err) {
   1d45c:	4604      	mov	r4, r0
   1d45e:	bb70      	cbnz	r0, 1d4be <uarte_instance_init+0xaa>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d460:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d462:	f013 0f02 	tst.w	r3, #2
   1d466:	d12e      	bne.n	1d4c6 <uarte_instance_init+0xb2>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d468:	2308      	movs	r3, #8
   1d46a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   1d46e:	7a3b      	ldrb	r3, [r7, #8]
   1d470:	b95b      	cbnz	r3, 1d48a <uarte_instance_init+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d472:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   1d476:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1d47a:	f108 0311 	add.w	r3, r8, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d47e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d482:	2301      	movs	r3, #1
   1d484:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d488:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d48a:	687b      	ldr	r3, [r7, #4]
   1d48c:	f013 0f02 	tst.w	r3, #2
   1d490:	d103      	bne.n	1d49a <uarte_instance_init+0x86>
    p_reg->INTENSET = mask;
   1d492:	f44f 7380 	mov.w	r3, #256	; 0x100
   1d496:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d49a:	687b      	ldr	r3, [r7, #4]
   1d49c:	f013 0f10 	tst.w	r3, #16
   1d4a0:	d003      	beq.n	1d4aa <uarte_instance_init+0x96>
   1d4a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d4a6:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1d4aa:	f108 0310 	add.w	r3, r8, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d4ae:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d4b2:	2300      	movs	r3, #0
   1d4b4:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d4b8:	2301      	movs	r3, #1
   1d4ba:	60b3      	str	r3, [r6, #8]
   1d4bc:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1d4be:	4620      	mov	r0, r4
   1d4c0:	b003      	add	sp, #12
   1d4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   1d4c6:	4641      	mov	r1, r8
   1d4c8:	4630      	mov	r0, r6
   1d4ca:	f7f3 fdb7 	bl	1103c <endtx_stoptx_ppi_init>
		if (err < 0) {
   1d4ce:	2800      	cmp	r0, #0
   1d4d0:	daca      	bge.n	1d468 <uarte_instance_init+0x54>
			return err;
   1d4d2:	4604      	mov	r4, r0
   1d4d4:	e7f3      	b.n	1d4be <uarte_instance_init+0xaa>

0001d4d6 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d4d6:	b510      	push	{r4, lr}
   1d4d8:	4604      	mov	r4, r0
   1d4da:	2200      	movs	r2, #0
   1d4dc:	2101      	movs	r1, #1
   1d4de:	2002      	movs	r0, #2
   1d4e0:	f7e7 fa42 	bl	4968 <z_arm_irq_priority_set>
   1d4e4:	2002      	movs	r0, #2
   1d4e6:	f7e7 fa0f 	bl	4908 <arch_irq_enable>
   1d4ea:	2100      	movs	r1, #0
   1d4ec:	4620      	mov	r0, r4
   1d4ee:	f7ff ff91 	bl	1d414 <uarte_instance_init>
   1d4f2:	bd10      	pop	{r4, pc}

0001d4f4 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1d4f4:	b510      	push	{r4, lr}
   1d4f6:	4604      	mov	r4, r0
   1d4f8:	2200      	movs	r2, #0
   1d4fa:	2101      	movs	r1, #1
   1d4fc:	2028      	movs	r0, #40	; 0x28
   1d4fe:	f7e7 fa33 	bl	4968 <z_arm_irq_priority_set>
   1d502:	2028      	movs	r0, #40	; 0x28
   1d504:	f7e7 fa00 	bl	4908 <arch_irq_enable>
   1d508:	2100      	movs	r1, #0
   1d50a:	4620      	mov	r0, r4
   1d50c:	f7ff ff82 	bl	1d414 <uarte_instance_init>
   1d510:	bd10      	pop	{r4, pc}

0001d512 <rng_pool_put>:
	uint8_t first = rngp->first_read;
   1d512:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   1d514:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   1d516:	f890 c003 	ldrb.w	ip, [r0, #3]
	if (((last - first) & mask) == mask) {
   1d51a:	1a9a      	subs	r2, r3, r2
   1d51c:	ea3c 0202 	bics.w	r2, ip, r2
   1d520:	d008      	beq.n	1d534 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   1d522:	18c2      	adds	r2, r0, r3
   1d524:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   1d526:	3301      	adds	r3, #1
   1d528:	b25b      	sxtb	r3, r3
   1d52a:	ea03 030c 	and.w	r3, r3, ip
   1d52e:	7083      	strb	r3, [r0, #2]
	return 0;
   1d530:	2000      	movs	r0, #0
   1d532:	4770      	bx	lr
		return -ENOBUFS;
   1d534:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1d538:	4770      	bx	lr

0001d53a <rng_pool_init>:
	rngp->first_alloc = 0U;
   1d53a:	2300      	movs	r3, #0
   1d53c:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   1d53e:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   1d540:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   1d542:	3901      	subs	r1, #1
   1d544:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   1d546:	7102      	strb	r2, [r0, #4]
}
   1d548:	4770      	bx	lr

0001d54a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1d54a:	4770      	bx	lr

0001d54c <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1d54c:	1a40      	subs	r0, r0, r1
}
   1d54e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1d552:	4770      	bx	lr

0001d554 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1d554:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1d558:	009b      	lsls	r3, r3, #2
   1d55a:	b29b      	uxth	r3, r3
   1d55c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d560:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1d564:	2200      	movs	r2, #0
   1d566:	601a      	str	r2, [r3, #0]
   1d568:	681b      	ldr	r3, [r3, #0]
}
   1d56a:	4770      	bx	lr

0001d56c <absolute_time_to_cc>:
}
   1d56c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1d570:	4770      	bx	lr

0001d572 <full_int_lock>:
	__asm__ volatile(
   1d572:	f04f 0320 	mov.w	r3, #32
   1d576:	f3ef 8011 	mrs	r0, BASEPRI
   1d57a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d57e:	f3bf 8f6f 	isb	sy
}
   1d582:	4770      	bx	lr

0001d584 <full_int_unlock>:
	__asm__ volatile(
   1d584:	f380 8811 	msr	BASEPRI, r0
   1d588:	f3bf 8f6f 	isb	sy
}
   1d58c:	4770      	bx	lr

0001d58e <set_absolute_alarm>:
{
   1d58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d590:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   1d592:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   1d596:	f7f3 fec3 	bl	11320 <get_comparator>
   1d59a:	4607      	mov	r7, r0
   1d59c:	e019      	b.n	1d5d2 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   1d59e:	2013      	movs	r0, #19
   1d5a0:	f000 fe48 	bl	1e234 <z_impl_k_busy_wait>
}
   1d5a4:	e022      	b.n	1d5ec <set_absolute_alarm+0x5e>
		event_clear(chan);
   1d5a6:	4630      	mov	r0, r6
   1d5a8:	f7ff ffd4 	bl	1d554 <event_clear>
		event_enable(chan);
   1d5ac:	4630      	mov	r0, r6
   1d5ae:	f7f3 febf 	bl	11330 <event_enable>
		set_comparator(chan, cc_val);
   1d5b2:	4629      	mov	r1, r5
   1d5b4:	4630      	mov	r0, r6
   1d5b6:	f7f3 fea9 	bl	1130c <set_comparator>
		now2 = counter();
   1d5ba:	f7f3 fecd 	bl	11358 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   1d5be:	4284      	cmp	r4, r0
   1d5c0:	d01e      	beq.n	1d600 <set_absolute_alarm+0x72>
   1d5c2:	1c81      	adds	r1, r0, #2
   1d5c4:	4628      	mov	r0, r5
   1d5c6:	f7ff ffc1 	bl	1d54c <counter_sub>
	} while ((now2 != now) &&
   1d5ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d5ce:	d917      	bls.n	1d600 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   1d5d0:	462f      	mov	r7, r5
		now = counter();
   1d5d2:	f7f3 fec1 	bl	11358 <counter>
   1d5d6:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1d5d8:	4601      	mov	r1, r0
   1d5da:	4630      	mov	r0, r6
   1d5dc:	f7f3 fe96 	bl	1130c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   1d5e0:	4621      	mov	r1, r4
   1d5e2:	4638      	mov	r0, r7
   1d5e4:	f7ff ffb2 	bl	1d54c <counter_sub>
   1d5e8:	2801      	cmp	r0, #1
   1d5ea:	d0d8      	beq.n	1d59e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1d5ec:	1ca7      	adds	r7, r4, #2
   1d5ee:	4639      	mov	r1, r7
   1d5f0:	4628      	mov	r0, r5
   1d5f2:	f7ff ffab 	bl	1d54c <counter_sub>
   1d5f6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d5fa:	d9d4      	bls.n	1d5a6 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1d5fc:	463d      	mov	r5, r7
   1d5fe:	e7d2      	b.n	1d5a6 <set_absolute_alarm+0x18>
}
   1d600:	4628      	mov	r0, r5
   1d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d604 <compare_set>:
{
   1d604:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d606:	b083      	sub	sp, #12
   1d608:	4604      	mov	r4, r0
   1d60a:	4617      	mov	r7, r2
   1d60c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   1d60e:	f7f3 fea9 	bl	11364 <compare_int_lock>
   1d612:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1d614:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d616:	9301      	str	r3, [sp, #4]
   1d618:	9b08      	ldr	r3, [sp, #32]
   1d61a:	9300      	str	r3, [sp, #0]
   1d61c:	463a      	mov	r2, r7
   1d61e:	462b      	mov	r3, r5
   1d620:	4620      	mov	r0, r4
   1d622:	f7f3 ff8f 	bl	11544 <compare_set_nolocks>
   1d626:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1d628:	4631      	mov	r1, r6
   1d62a:	4620      	mov	r0, r4
   1d62c:	f7f3 fefe 	bl	1142c <compare_int_unlock>
}
   1d630:	4628      	mov	r0, r5
   1d632:	b003      	add	sp, #12
   1d634:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d636 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   1d636:	b410      	push	{r4}
	*state = &config->states[0];
   1d638:	6843      	ldr	r3, [r0, #4]
   1d63a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1d63c:	e001      	b.n	1d642 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   1d63e:	3408      	adds	r4, #8
   1d640:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   1d642:	6814      	ldr	r4, [r2, #0]
   1d644:	7a03      	ldrb	r3, [r0, #8]
   1d646:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   1d64a:	3b01      	subs	r3, #1
   1d64c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   1d650:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   1d654:	429c      	cmp	r4, r3
   1d656:	d804      	bhi.n	1d662 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
   1d658:	7963      	ldrb	r3, [r4, #5]
   1d65a:	428b      	cmp	r3, r1
   1d65c:	d1ef      	bne.n	1d63e <pinctrl_lookup_state+0x8>
			return 0;
   1d65e:	2000      	movs	r0, #0
   1d660:	e001      	b.n	1d666 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
   1d662:	f06f 0001 	mvn.w	r0, #1
}
   1d666:	bc10      	pop	{r4}
   1d668:	4770      	bx	lr

0001d66a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1d66a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
   1d66c:	2000      	movs	r0, #0
   1d66e:	f7e7 fd6f 	bl	5150 <sys_arch_reboot>

0001d672 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d672:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d676:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d67a:	2b0d      	cmp	r3, #13
   1d67c:	d001      	beq.n	1d682 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1d67e:	2000      	movs	r0, #0
   1d680:	4770      	bx	lr
                        return true;
   1d682:	2001      	movs	r0, #1
    #endif
}
   1d684:	4770      	bx	lr

0001d686 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d68a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d68e:	2b0d      	cmp	r3, #13
   1d690:	d001      	beq.n	1d696 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1d692:	2000      	movs	r0, #0
   1d694:	4770      	bx	lr
                        return true;
   1d696:	2001      	movs	r0, #1
    #endif
}
   1d698:	4770      	bx	lr

0001d69a <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d69a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d69e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d6a2:	2b0d      	cmp	r3, #13
   1d6a4:	d001      	beq.n	1d6aa <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1d6a6:	2000      	movs	r0, #0
   1d6a8:	4770      	bx	lr
                        return true;
   1d6aa:	2001      	movs	r0, #1
    #endif
}
   1d6ac:	4770      	bx	lr

0001d6ae <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1d6ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d6b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1d6b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1d6ba:	2a0d      	cmp	r2, #13
   1d6bc:	d001      	beq.n	1d6c2 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1d6be:	2000      	movs	r0, #0
   1d6c0:	4770      	bx	lr
                switch(var2)
   1d6c2:	b10b      	cbz	r3, 1d6c8 <nrf52_configuration_249+0x1a>
                        return true;
   1d6c4:	2001      	movs	r0, #1
    #endif
}
   1d6c6:	4770      	bx	lr
                switch(var2)
   1d6c8:	2000      	movs	r0, #0
   1d6ca:	4770      	bx	lr

0001d6cc <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   1d6cc:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   1d6ce:	4780      	blx	r0
}
   1d6d0:	bd08      	pop	{r3, pc}

0001d6d2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   1d6d2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1d6d4:	f000 fdae 	bl	1e234 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1d6d8:	bd08      	pop	{r3, pc}

0001d6da <clock_initial_lfclksrc_get>:
}
   1d6da:	2000      	movs	r0, #0
   1d6dc:	4770      	bx	lr

0001d6de <clock_stop>:
{
   1d6de:	b570      	push	{r4, r5, r6, lr}
   1d6e0:	b082      	sub	sp, #8
    switch (domain)
   1d6e2:	4605      	mov	r5, r0
   1d6e4:	b118      	cbz	r0, 1d6ee <clock_stop+0x10>
   1d6e6:	2801      	cmp	r0, #1
   1d6e8:	d016      	beq.n	1d718 <clock_stop+0x3a>
}
   1d6ea:	b002      	add	sp, #8
   1d6ec:	bd70      	pop	{r4, r5, r6, pc}
   1d6ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d6f2:	2202      	movs	r2, #2
   1d6f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6f8:	2200      	movs	r2, #0
   1d6fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1d6fe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d702:	2201      	movs	r2, #1
   1d704:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   1d706:	2301      	movs	r3, #1
   1d708:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d70c:	429d      	cmp	r5, r3
   1d70e:	d00f      	beq.n	1d730 <clock_stop+0x52>
   1d710:	2600      	movs	r6, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d712:	f242 7410 	movw	r4, #10000	; 0x2710
   1d716:	e02a      	b.n	1d76e <clock_stop+0x90>
    p_reg->INTENCLR = mask;
   1d718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d71c:	2201      	movs	r2, #1
   1d71e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d722:	2100      	movs	r1, #0
   1d724:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1d728:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d72c:	605a      	str	r2, [r3, #4]
}
   1d72e:	e7ea      	b.n	1d706 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   1d730:	f10d 0607 	add.w	r6, sp, #7
   1d734:	e7ed      	b.n	1d712 <clock_stop+0x34>
            if (p_clk_src != NULL)
   1d736:	b136      	cbz	r6, 1d746 <clock_stop+0x68>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d738:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d73c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d740:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1d744:	6033      	str	r3, [r6, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d746:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d74a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
   1d74e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d752:	d123      	bne.n	1d79c <clock_stop+0xbe>
    return false;
   1d754:	2300      	movs	r3, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   1d756:	2b00      	cmp	r3, #0
   1d758:	d0c7      	beq.n	1d6ea <clock_stop+0xc>
   1d75a:	b11e      	cbz	r6, 1d764 <clock_stop+0x86>
   1d75c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d760:	2b01      	cmp	r3, #1
   1d762:	d1c2      	bne.n	1d6ea <clock_stop+0xc>
   1d764:	2001      	movs	r0, #1
   1d766:	f7ff ffb4 	bl	1d6d2 <nrfx_busy_wait>
   1d76a:	3c01      	subs	r4, #1
   1d76c:	d0bd      	beq.n	1d6ea <clock_stop+0xc>
    switch (domain)
   1d76e:	2d00      	cmp	r5, #0
   1d770:	d0e1      	beq.n	1d736 <clock_stop+0x58>
   1d772:	2d01      	cmp	r5, #1
   1d774:	d001      	beq.n	1d77a <clock_stop+0x9c>
   1d776:	2300      	movs	r3, #0
   1d778:	e7ed      	b.n	1d756 <clock_stop+0x78>
            if (p_clk_src != NULL)
   1d77a:	b136      	cbz	r6, 1d78a <clock_stop+0xac>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d780:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1d784:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   1d788:	7033      	strb	r3, [r6, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d78a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d78e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
   1d792:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d796:	d103      	bne.n	1d7a0 <clock_stop+0xc2>
    return false;
   1d798:	2300      	movs	r3, #0
   1d79a:	e7dc      	b.n	1d756 <clock_stop+0x78>
                return true;
   1d79c:	2301      	movs	r3, #1
   1d79e:	e7da      	b.n	1d756 <clock_stop+0x78>
                return true;
   1d7a0:	2301      	movs	r3, #1
   1d7a2:	e7d8      	b.n	1d756 <clock_stop+0x78>

0001d7a4 <clock_lfclksrc_tweak>:
{
   1d7a4:	b538      	push	{r3, r4, r5, lr}
   1d7a6:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   1d7a8:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1d7aa:	2b01      	cmp	r3, #1
   1d7ac:	d002      	beq.n	1d7b4 <clock_lfclksrc_tweak+0x10>
   1d7ae:	b933      	cbnz	r3, 1d7be <clock_lfclksrc_tweak+0x1a>
   1d7b0:	2301      	movs	r3, #1
   1d7b2:	e000      	b.n	1d7b6 <clock_lfclksrc_tweak+0x12>
   1d7b4:	2301      	movs	r3, #1
    if (!is_correct_clk)
   1d7b6:	461d      	mov	r5, r3
   1d7b8:	b11b      	cbz	r3, 1d7c2 <clock_lfclksrc_tweak+0x1e>
}
   1d7ba:	4628      	mov	r0, r5
   1d7bc:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   1d7be:	2300      	movs	r3, #0
   1d7c0:	e7f9      	b.n	1d7b6 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1d7c2:	2000      	movs	r0, #0
   1d7c4:	f7ff ff8b 	bl	1d6de <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   1d7c8:	f7ff ff87 	bl	1d6da <clock_initial_lfclksrc_get>
   1d7cc:	6020      	str	r0, [r4, #0]
   1d7ce:	e7f4      	b.n	1d7ba <clock_lfclksrc_tweak+0x16>

0001d7d0 <nrfx_clock_enable>:
{
   1d7d0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1d7d2:	2000      	movs	r0, #0
   1d7d4:	f7e7 f8ba 	bl	494c <arch_irq_is_enabled>
   1d7d8:	b130      	cbz	r0, 1d7e8 <nrfx_clock_enable+0x18>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   1d7da:	f7ff ff7e 	bl	1d6da <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d7de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d7e2:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
   1d7e6:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1d7e8:	f7e7 f88e 	bl	4908 <arch_irq_enable>
   1d7ec:	e7f5      	b.n	1d7da <nrfx_clock_enable+0xa>

0001d7ee <nrfx_clock_start>:
    switch (domain)
   1d7ee:	b110      	cbz	r0, 1d7f6 <nrfx_clock_start+0x8>
   1d7f0:	2801      	cmp	r0, #1
   1d7f2:	d040      	beq.n	1d876 <nrfx_clock_start+0x88>
   1d7f4:	4770      	bx	lr
{
   1d7f6:	b500      	push	{lr}
   1d7f8:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d7fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d7fe:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d802:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   1d806:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d808:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   1d80c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1d810:	d11b      	bne.n	1d84a <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   1d812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d816:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   1d81a:	f013 0f01 	tst.w	r3, #1
   1d81e:	d118      	bne.n	1d852 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
   1d820:	f7ff ff5b 	bl	1d6da <clock_initial_lfclksrc_get>
   1d824:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d826:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d82a:	9a01      	ldr	r2, [sp, #4]
   1d82c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d830:	2200      	movs	r2, #0
   1d832:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1d836:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1d83a:	2202      	movs	r2, #2
   1d83c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d840:	2201      	movs	r2, #1
   1d842:	609a      	str	r2, [r3, #8]
}
   1d844:	b003      	add	sp, #12
   1d846:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   1d84a:	a801      	add	r0, sp, #4
   1d84c:	f7ff ffaa 	bl	1d7a4 <clock_lfclksrc_tweak>
   1d850:	e7e9      	b.n	1d826 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d856:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d85a:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   1d85e:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   1d860:	a801      	add	r0, sp, #4
   1d862:	f7ff ff9f 	bl	1d7a4 <clock_lfclksrc_tweak>
   1d866:	2800      	cmp	r0, #0
   1d868:	d0dd      	beq.n	1d826 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
   1d86a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d86e:	2202      	movs	r2, #2
   1d870:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   1d874:	e7e6      	b.n	1d844 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d87a:	2200      	movs	r2, #0
   1d87c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d880:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1d884:	2201      	movs	r2, #1
   1d886:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d88a:	601a      	str	r2, [r3, #0]
   1d88c:	4770      	bx	lr

0001d88e <nrfx_clock_stop>:
{
   1d88e:	b508      	push	{r3, lr}
    clock_stop(domain);
   1d890:	f7ff ff25 	bl	1d6de <clock_stop>
}
   1d894:	bd08      	pop	{r3, pc}

0001d896 <pin_is_task_output>:
{
   1d896:	b510      	push	{r4, lr}
   1d898:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1d89a:	f7f4 fab1 	bl	11e00 <pin_is_output>
   1d89e:	b128      	cbz	r0, 1d8ac <pin_is_task_output+0x16>
   1d8a0:	4620      	mov	r0, r4
   1d8a2:	f7f4 fa97 	bl	11dd4 <pin_in_use_by_te>
   1d8a6:	b118      	cbz	r0, 1d8b0 <pin_is_task_output+0x1a>
   1d8a8:	2001      	movs	r0, #1
   1d8aa:	e000      	b.n	1d8ae <pin_is_task_output+0x18>
   1d8ac:	2000      	movs	r0, #0
}
   1d8ae:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1d8b0:	2000      	movs	r0, #0
   1d8b2:	e7fc      	b.n	1d8ae <pin_is_task_output+0x18>

0001d8b4 <pin_is_input>:
{
   1d8b4:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   1d8b6:	f7f4 faa3 	bl	11e00 <pin_is_output>
   1d8ba:	f080 0001 	eor.w	r0, r0, #1
}
   1d8be:	b2c0      	uxtb	r0, r0
   1d8c0:	bd08      	pop	{r3, pc}

0001d8c2 <gpiote_polarity_to_trigger>:
}
   1d8c2:	4770      	bx	lr

0001d8c4 <gpiote_trigger_to_polarity>:
}
   1d8c4:	4770      	bx	lr

0001d8c6 <is_level>:
}
   1d8c6:	2803      	cmp	r0, #3
   1d8c8:	bf94      	ite	ls
   1d8ca:	2000      	movls	r0, #0
   1d8cc:	2001      	movhi	r0, #1
   1d8ce:	4770      	bx	lr

0001d8d0 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1d8d0:	b508      	push	{r3, lr}
  _DoInit();
   1d8d2:	f7f4 ff61 	bl	12798 <_DoInit>
}
   1d8d6:	bd08      	pop	{r3, pc}

0001d8d8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1d8d8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1d8da:	f7ff fff9 	bl	1d8d0 <SEGGER_RTT_Init>

	return 0;
}
   1d8de:	2000      	movs	r0, #0
   1d8e0:	bd08      	pop	{r3, pc}

0001d8e2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1d8e2:	b148      	cbz	r0, 1d8f8 <z_device_is_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1d8e4:	68c3      	ldr	r3, [r0, #12]
   1d8e6:	8818      	ldrh	r0, [r3, #0]
   1d8e8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1d8ec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1d8f0:	bf14      	ite	ne
   1d8f2:	2000      	movne	r0, #0
   1d8f4:	2001      	moveq	r0, #1
   1d8f6:	4770      	bx	lr
		return false;
   1d8f8:	2000      	movs	r0, #0
}
   1d8fa:	4770      	bx	lr

0001d8fc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1d8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d8fe:	4605      	mov	r5, r0
   1d900:	460e      	mov	r6, r1
	__asm__ volatile(
   1d902:	f04f 0320 	mov.w	r3, #32
   1d906:	f3ef 8711 	mrs	r7, BASEPRI
   1d90a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d90e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1d912:	f7f6 f8af 	bl	13a74 <z_impl_z_current_get>
   1d916:	4604      	mov	r4, r0
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1d918:	4631      	mov	r1, r6
   1d91a:	4628      	mov	r0, r5
   1d91c:	f7ff fea5 	bl	1d66a <k_sys_fatal_error_handler>
	__asm__ volatile(
   1d920:	f387 8811 	msr	BASEPRI, r7
   1d924:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1d928:	4620      	mov	r0, r4
   1d92a:	f7e7 faf9 	bl	4f20 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1d92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d930 <z_early_memset>:
{
   1d930:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   1d932:	f7f7 f85f 	bl	149f4 <memset>
}
   1d936:	bd08      	pop	{r3, pc}

0001d938 <z_early_memcpy>:
{
   1d938:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d93a:	f7e3 fcdf 	bl	12fc <memcpy>
}
   1d93e:	bd08      	pop	{r3, pc}

0001d940 <k_heap_init>:
{
   1d940:	b510      	push	{r4, lr}
   1d942:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   1d946:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   1d948:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   1d94a:	f7fb fee4 	bl	19716 <sys_heap_init>
}
   1d94e:	bd10      	pop	{r4, pc}

0001d950 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1d950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d954:	b085      	sub	sp, #20
   1d956:	4607      	mov	r7, r0
   1d958:	468a      	mov	sl, r1
   1d95a:	9203      	str	r2, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1d95c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1d960:	f000 fc6e 	bl	1e240 <sys_clock_timeout_end_calc>
   1d964:	4606      	mov	r6, r0
   1d966:	4689      	mov	r9, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1d968:	f107 0b14 	add.w	fp, r7, #20
	__asm__ volatile(
   1d96c:	f04f 0320 	mov.w	r3, #32
   1d970:	f3ef 8511 	mrs	r5, BASEPRI
   1d974:	f383 8812 	msr	BASEPRI_MAX, r3
   1d978:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1d97c:	f04f 0800 	mov.w	r8, #0
	void *ret = NULL;
   1d980:	4644      	mov	r4, r8

	while (ret == NULL) {
   1d982:	e00f      	b.n	1d9a4 <k_heap_aligned_alloc+0x54>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1d984:	9000      	str	r0, [sp, #0]
   1d986:	9101      	str	r1, [sp, #4]
   1d988:	f107 020c 	add.w	r2, r7, #12
   1d98c:	4629      	mov	r1, r5
   1d98e:	4658      	mov	r0, fp
   1d990:	f7f5 fe7c 	bl	1368c <z_pend_curr>
   1d994:	f04f 0320 	mov.w	r3, #32
   1d998:	f3ef 8511 	mrs	r5, BASEPRI
   1d99c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9a0:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   1d9a4:	b9ac      	cbnz	r4, 1d9d2 <k_heap_aligned_alloc+0x82>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1d9a6:	9a03      	ldr	r2, [sp, #12]
   1d9a8:	4651      	mov	r1, sl
   1d9aa:	4638      	mov	r0, r7
   1d9ac:	f7fb fe42 	bl	19634 <sys_heap_aligned_alloc>
   1d9b0:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   1d9b2:	f7f6 f9f1 	bl	13d98 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1d9b6:	b964      	cbnz	r4, 1d9d2 <k_heap_aligned_alloc+0x82>
		    (ret != NULL) || ((end - now) <= 0)) {
   1d9b8:	1a30      	subs	r0, r6, r0
   1d9ba:	eb69 0101 	sbc.w	r1, r9, r1
   1d9be:	2801      	cmp	r0, #1
   1d9c0:	f171 0300 	sbcs.w	r3, r1, #0
   1d9c4:	db05      	blt.n	1d9d2 <k_heap_aligned_alloc+0x82>
		if (!blocked_alloc) {
   1d9c6:	f1b8 0f00 	cmp.w	r8, #0
   1d9ca:	d1db      	bne.n	1d984 <k_heap_aligned_alloc+0x34>
			blocked_alloc = true;
   1d9cc:	f04f 0801 	mov.w	r8, #1
   1d9d0:	e7d8      	b.n	1d984 <k_heap_aligned_alloc+0x34>
	__asm__ volatile(
   1d9d2:	f385 8811 	msr	BASEPRI, r5
   1d9d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1d9da:	4620      	mov	r0, r4
   1d9dc:	b005      	add	sp, #20
   1d9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d9e2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1d9e2:	b570      	push	{r4, r5, r6, lr}
   1d9e4:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1d9e6:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1d9ea:	f04f 0320 	mov.w	r3, #32
   1d9ee:	f3ef 8511 	mrs	r5, BASEPRI
   1d9f2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d9f6:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1d9fa:	f7fb fdd7 	bl	195ac <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1d9fe:	f104 000c 	add.w	r0, r4, #12
   1da02:	f000 fb4d 	bl	1e0a0 <z_unpend_all>
   1da06:	b920      	cbnz	r0, 1da12 <k_heap_free+0x30>
	__asm__ volatile(
   1da08:	f385 8811 	msr	BASEPRI, r5
   1da0c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1da10:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   1da12:	4629      	mov	r1, r5
   1da14:	4630      	mov	r0, r6
   1da16:	f7f5 fcb1 	bl	1337c <z_reschedule>
   1da1a:	e7f9      	b.n	1da10 <k_heap_free+0x2e>

0001da1c <setup_thread_stack>:
{
   1da1c:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1da1e:	3207      	adds	r2, #7
   1da20:	f022 0207 	bic.w	r2, r2, #7
   1da24:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1da28:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   1da2c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   1da30:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   1da34:	2200      	movs	r2, #0
   1da36:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   1da3a:	18c8      	adds	r0, r1, r3
   1da3c:	bc10      	pop	{r4}
   1da3e:	4770      	bx	lr

0001da40 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1da40:	f3ef 8005 	mrs	r0, IPSR
}
   1da44:	3800      	subs	r0, #0
   1da46:	bf18      	it	ne
   1da48:	2001      	movne	r0, #1
   1da4a:	4770      	bx	lr

0001da4c <z_impl_k_thread_start>:
{
   1da4c:	b508      	push	{r3, lr}
	z_sched_start(thread);
   1da4e:	f7f5 fde3 	bl	13618 <z_sched_start>
}
   1da52:	bd08      	pop	{r3, pc}

0001da54 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1da54:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   1da56:	2400      	movs	r4, #0
   1da58:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   1da5a:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1da5c:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   1da5e:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1da60:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1da62:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1da64:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   1da66:	bc10      	pop	{r4}
   1da68:	4770      	bx	lr

0001da6a <z_impl_k_thread_create>:
{
   1da6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da6c:	b087      	sub	sp, #28
   1da6e:	4604      	mov	r4, r0
   1da70:	9e12      	ldr	r6, [sp, #72]	; 0x48
   1da72:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1da74:	2700      	movs	r7, #0
   1da76:	9705      	str	r7, [sp, #20]
   1da78:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1da7a:	9704      	str	r7, [sp, #16]
   1da7c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1da7e:	9703      	str	r7, [sp, #12]
   1da80:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1da82:	9702      	str	r7, [sp, #8]
   1da84:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1da86:	9701      	str	r7, [sp, #4]
   1da88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1da8a:	9700      	str	r7, [sp, #0]
   1da8c:	f7f5 f86a 	bl	12b64 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1da90:	f1b5 3fff 	cmp.w	r5, #4294967295
   1da94:	bf08      	it	eq
   1da96:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1da9a:	d102      	bne.n	1daa2 <z_impl_k_thread_create+0x38>
}
   1da9c:	4620      	mov	r0, r4
   1da9e:	b007      	add	sp, #28
   1daa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1daa2:	4632      	mov	r2, r6
   1daa4:	462b      	mov	r3, r5
   1daa6:	4620      	mov	r0, r4
   1daa8:	f7f5 f84e 	bl	12b48 <schedule_new_thread>
   1daac:	e7f6      	b.n	1da9c <z_impl_k_thread_create+0x32>

0001daae <z_pm_save_idle_exit>:
{
   1daae:	b508      	push	{r3, lr}
	pm_system_resume();
   1dab0:	f7e6 fd8a 	bl	45c8 <pm_system_resume>
	sys_clock_idle_exit();
   1dab4:	f7ff fd49 	bl	1d54a <sys_clock_idle_exit>
}
   1dab8:	bd08      	pop	{r3, pc}

0001daba <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1daba:	4288      	cmp	r0, r1
   1dabc:	da00      	bge.n	1dac0 <new_prio_for_inheritance+0x6>
   1dabe:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1dac0:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   1dac4:	db01      	blt.n	1daca <new_prio_for_inheritance+0x10>
   1dac6:	4608      	mov	r0, r1
   1dac8:	4770      	bx	lr
   1daca:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   1dace:	4770      	bx	lr

0001dad0 <adjust_owner_prio>:
{
   1dad0:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   1dad2:	6880      	ldr	r0, [r0, #8]
   1dad4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1dad8:	428b      	cmp	r3, r1
   1dada:	d101      	bne.n	1dae0 <adjust_owner_prio+0x10>
	return false;
   1dadc:	2000      	movs	r0, #0
}
   1dade:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   1dae0:	f7f5 fde8 	bl	136b4 <z_set_prio>
   1dae4:	e7fb      	b.n	1dade <adjust_owner_prio+0xe>

0001dae6 <z_impl_k_mutex_init>:
{
   1dae6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1dae8:	2000      	movs	r0, #0
   1daea:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   1daec:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   1daee:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   1daf0:	605b      	str	r3, [r3, #4]
}
   1daf2:	4770      	bx	lr

0001daf4 <prepare_thread_to_run>:
{
   1daf4:	b508      	push	{r3, lr}
   1daf6:	2200      	movs	r2, #0
   1daf8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1dafc:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   1dafe:	f000 fa04 	bl	1df0a <z_ready_thread>
}
   1db02:	bd08      	pop	{r3, pc}

0001db04 <queue_insert>:
{
   1db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1db08:	4605      	mov	r5, r0
   1db0a:	460e      	mov	r6, r1
   1db0c:	4614      	mov	r4, r2
   1db0e:	4699      	mov	r9, r3
   1db10:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1db14:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1db18:	f04f 0320 	mov.w	r3, #32
   1db1c:	f3ef 8811 	mrs	r8, BASEPRI
   1db20:	f383 8812 	msr	BASEPRI_MAX, r3
   1db24:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1db28:	b102      	cbz	r2, 1db2c <queue_insert+0x28>
	return list->tail;
   1db2a:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1db2c:	4638      	mov	r0, r7
   1db2e:	f000 fa8c 	bl	1e04a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1db32:	b9f8      	cbnz	r0, 1db74 <queue_insert+0x70>
	if (alloc) {
   1db34:	f1b9 0f00 	cmp.w	r9, #0
   1db38:	d125      	bne.n	1db86 <queue_insert+0x82>
	node->next_and_flags = flags;
   1db3a:	2300      	movs	r3, #0
   1db3c:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1db3e:	b39e      	cbz	r6, 1dba8 <queue_insert+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1db40:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1db42:	f033 0303 	bics.w	r3, r3, #3
   1db46:	d03b      	beq.n	1dbc0 <queue_insert+0xbc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1db48:	6822      	ldr	r2, [r4, #0]
   1db4a:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1db4e:	4313      	orrs	r3, r2
   1db50:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1db52:	6833      	ldr	r3, [r6, #0]
   1db54:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1db58:	431c      	orrs	r4, r3
   1db5a:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1db5c:	2104      	movs	r1, #4
   1db5e:	f105 0010 	add.w	r0, r5, #16
   1db62:	f000 fc08 	bl	1e376 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1db66:	4641      	mov	r1, r8
   1db68:	4638      	mov	r0, r7
   1db6a:	f7f5 fc07 	bl	1337c <z_reschedule>
	return 0;
   1db6e:	2000      	movs	r0, #0
}
   1db70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prepare_thread_to_run(first_pending_thread, data);
   1db74:	4621      	mov	r1, r4
   1db76:	f7ff ffbd 	bl	1daf4 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   1db7a:	4641      	mov	r1, r8
   1db7c:	4638      	mov	r0, r7
   1db7e:	f7f5 fbfd 	bl	1337c <z_reschedule>
		return 0;
   1db82:	2000      	movs	r0, #0
   1db84:	e7f4      	b.n	1db70 <queue_insert+0x6c>
	return z_thread_aligned_alloc(0, size);
   1db86:	2108      	movs	r1, #8
   1db88:	2000      	movs	r0, #0
   1db8a:	f7f6 fbf5 	bl	14378 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1db8e:	b120      	cbz	r0, 1db9a <queue_insert+0x96>
		anode->data = data;
   1db90:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1db92:	2201      	movs	r2, #1
   1db94:	6002      	str	r2, [r0, #0]
		data = anode;
   1db96:	4604      	mov	r4, r0
   1db98:	e7d1      	b.n	1db3e <queue_insert+0x3a>
	__asm__ volatile(
   1db9a:	f388 8811 	msr	BASEPRI, r8
   1db9e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1dba2:	f06f 000b 	mvn.w	r0, #11
   1dba6:	e7e3      	b.n	1db70 <queue_insert+0x6c>
	return list->head;
   1dba8:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dbaa:	6823      	ldr	r3, [r4, #0]
   1dbac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dbb0:	4313      	orrs	r3, r2
   1dbb2:	6023      	str	r3, [r4, #0]
	list->head = node;
   1dbb4:	602c      	str	r4, [r5, #0]
	return list->tail;
   1dbb6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   1dbb8:	2b00      	cmp	r3, #0
   1dbba:	d1cf      	bne.n	1db5c <queue_insert+0x58>
	list->tail = node;
   1dbbc:	606c      	str	r4, [r5, #4]
}
   1dbbe:	e7cd      	b.n	1db5c <queue_insert+0x58>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dbc0:	6823      	ldr	r3, [r4, #0]
   1dbc2:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dbc6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1dbc8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1dbca:	b132      	cbz	r2, 1dbda <queue_insert+0xd6>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dbcc:	6813      	ldr	r3, [r2, #0]
   1dbce:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dbd2:	4323      	orrs	r3, r4
   1dbd4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1dbd6:	606c      	str	r4, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   1dbd8:	e7c0      	b.n	1db5c <queue_insert+0x58>
	list->tail = node;
   1dbda:	606c      	str	r4, [r5, #4]
	list->head = node;
   1dbdc:	602c      	str	r4, [r5, #0]
}
   1dbde:	e7bd      	b.n	1db5c <queue_insert+0x58>

0001dbe0 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1dbe0:	b160      	cbz	r0, 1dbfc <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dbe2:	6803      	ldr	r3, [r0, #0]
   1dbe4:	f013 0f03 	tst.w	r3, #3
   1dbe8:	d008      	beq.n	1dbfc <z_queue_node_peek+0x1c>
{
   1dbea:	b510      	push	{r4, lr}
		ret = anode->data;
   1dbec:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1dbee:	b909      	cbnz	r1, 1dbf4 <z_queue_node_peek+0x14>
		ret = anode->data;
   1dbf0:	4620      	mov	r0, r4
}
   1dbf2:	bd10      	pop	{r4, pc}
			k_free(anode);
   1dbf4:	f000 fbe8 	bl	1e3c8 <k_free>
		ret = anode->data;
   1dbf8:	4620      	mov	r0, r4
   1dbfa:	e7fa      	b.n	1dbf2 <z_queue_node_peek+0x12>
}
   1dbfc:	4770      	bx	lr

0001dbfe <k_queue_append>:
{
   1dbfe:	b500      	push	{lr}
   1dc00:	b083      	sub	sp, #12
   1dc02:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   1dc04:	2301      	movs	r3, #1
   1dc06:	9300      	str	r3, [sp, #0]
   1dc08:	2300      	movs	r3, #0
   1dc0a:	4619      	mov	r1, r3
   1dc0c:	f7ff ff7a 	bl	1db04 <queue_insert>
}
   1dc10:	b003      	add	sp, #12
   1dc12:	f85d fb04 	ldr.w	pc, [sp], #4

0001dc16 <k_queue_prepend>:
{
   1dc16:	b500      	push	{lr}
   1dc18:	b083      	sub	sp, #12
   1dc1a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   1dc1c:	2100      	movs	r1, #0
   1dc1e:	9100      	str	r1, [sp, #0]
   1dc20:	460b      	mov	r3, r1
   1dc22:	f7ff ff6f 	bl	1db04 <queue_insert>
}
   1dc26:	b003      	add	sp, #12
   1dc28:	f85d fb04 	ldr.w	pc, [sp], #4

0001dc2c <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   1dc2c:	2900      	cmp	r1, #0
   1dc2e:	d036      	beq.n	1dc9e <k_queue_append_list+0x72>
{
   1dc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dc34:	4606      	mov	r6, r0
   1dc36:	4617      	mov	r7, r2
   1dc38:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   1dc3a:	b39a      	cbz	r2, 1dca4 <k_queue_append_list+0x78>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1dc3c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1dc40:	f04f 0320 	mov.w	r3, #32
   1dc44:	f3ef 8811 	mrs	r8, BASEPRI
   1dc48:	f383 8812 	msr	BASEPRI_MAX, r3
   1dc4c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1dc50:	4628      	mov	r0, r5
   1dc52:	f000 f9fa 	bl	1e04a <z_unpend_first_thread>
   1dc56:	e006      	b.n	1dc66 <k_queue_append_list+0x3a>
		prepare_thread_to_run(thread, head);
   1dc58:	4621      	mov	r1, r4
   1dc5a:	f7ff ff4b 	bl	1daf4 <prepare_thread_to_run>
		head = *(void **)head;
   1dc5e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1dc60:	4628      	mov	r0, r5
   1dc62:	f000 f9f2 	bl	1e04a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1dc66:	b10c      	cbz	r4, 1dc6c <k_queue_append_list+0x40>
   1dc68:	2800      	cmp	r0, #0
   1dc6a:	d1f5      	bne.n	1dc58 <k_queue_append_list+0x2c>
	if (head != NULL) {
   1dc6c:	b14c      	cbz	r4, 1dc82 <k_queue_append_list+0x56>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1dc6e:	b144      	cbz	r4, 1dc82 <k_queue_append_list+0x56>
   1dc70:	b13f      	cbz	r7, 1dc82 <k_queue_append_list+0x56>
	return list->tail;
   1dc72:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1dc74:	b18a      	cbz	r2, 1dc9a <k_queue_append_list+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1dc76:	6813      	ldr	r3, [r2, #0]
   1dc78:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1dc7c:	431c      	orrs	r4, r3
   1dc7e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1dc80:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1dc82:	2104      	movs	r1, #4
   1dc84:	f106 0010 	add.w	r0, r6, #16
   1dc88:	f000 fb75 	bl	1e376 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1dc8c:	4641      	mov	r1, r8
   1dc8e:	4628      	mov	r0, r5
   1dc90:	f7f5 fb74 	bl	1337c <z_reschedule>
	return 0;
   1dc94:	2000      	movs	r0, #0
}
   1dc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   1dc9a:	6034      	str	r4, [r6, #0]
}
   1dc9c:	e7f0      	b.n	1dc80 <k_queue_append_list+0x54>
		return -EINVAL;
   1dc9e:	f06f 0015 	mvn.w	r0, #21
}
   1dca2:	4770      	bx	lr
		return -EINVAL;
   1dca4:	f06f 0015 	mvn.w	r0, #21
   1dca8:	e7f5      	b.n	1dc96 <k_queue_append_list+0x6a>

0001dcaa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   1dcaa:	b15a      	cbz	r2, 1dcc4 <z_impl_k_sem_init+0x1a>
   1dcac:	428a      	cmp	r2, r1
   1dcae:	d30c      	bcc.n	1dcca <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   1dcb0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   1dcb2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   1dcb4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   1dcb6:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   1dcb8:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   1dcbc:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   1dcbe:	6143      	str	r3, [r0, #20]
	return 0;
   1dcc0:	2000      	movs	r0, #0
   1dcc2:	4770      	bx	lr
		return -EINVAL;
   1dcc4:	f06f 0015 	mvn.w	r0, #21
   1dcc8:	4770      	bx	lr
   1dcca:	f06f 0015 	mvn.w	r0, #21
}
   1dcce:	4770      	bx	lr

0001dcd0 <cancel_async_locked>:
{
   1dcd0:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   1dcd2:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1dcd4:	f012 0f02 	tst.w	r2, #2
   1dcd8:	d009      	beq.n	1dcee <cancel_async_locked+0x1e>
	return *flagp;
   1dcda:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   1dcdc:	f012 000f 	ands.w	r0, r2, #15
   1dce0:	d004      	beq.n	1dcec <cancel_async_locked+0x1c>
	*flagp |= BIT(bit);
   1dce2:	f042 0202 	orr.w	r2, r2, #2
   1dce6:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   1dce8:	f002 000f 	and.w	r0, r2, #15
}
   1dcec:	4770      	bx	lr
		queue_remove_locked(work->queue, work);
   1dcee:	6880      	ldr	r0, [r0, #8]
	*flagp &= ~BIT(bit);
   1dcf0:	f022 0104 	bic.w	r1, r2, #4
   1dcf4:	60d9      	str	r1, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   1dcf6:	f012 0f04 	tst.w	r2, #4
   1dcfa:	d0ee      	beq.n	1dcda <cancel_async_locked+0xa>
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   1dcfc:	f100 0cb8 	add.w	ip, r0, #184	; 0xb8
	return list->head;
   1dd00:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1dd04:	2100      	movs	r1, #0
   1dd06:	2a00      	cmp	r2, #0
   1dd08:	d0e7      	beq.n	1dcda <cancel_async_locked+0xa>
   1dd0a:	4293      	cmp	r3, r2
   1dd0c:	d002      	beq.n	1dd14 <cancel_async_locked+0x44>
   1dd0e:	4611      	mov	r1, r2
   1dd10:	6812      	ldr	r2, [r2, #0]
   1dd12:	e7f8      	b.n	1dd06 <cancel_async_locked+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1dd14:	b141      	cbz	r1, 1dd28 <cancel_async_locked+0x58>
	return node->next;
   1dd16:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   1dd18:	600a      	str	r2, [r1, #0]
	return list->tail;
   1dd1a:	f8dc 2004 	ldr.w	r2, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1dd1e:	4293      	cmp	r3, r2
   1dd20:	d00c      	beq.n	1dd3c <cancel_async_locked+0x6c>
	parent->next = child;
   1dd22:	2200      	movs	r2, #0
   1dd24:	601a      	str	r2, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1dd26:	e7d8      	b.n	1dcda <cancel_async_locked+0xa>
	return node->next;
   1dd28:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   1dd2a:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
	return list->tail;
   1dd2e:	f8dc 1004 	ldr.w	r1, [ip, #4]
Z_GENLIST_REMOVE(slist, snode)
   1dd32:	428b      	cmp	r3, r1
   1dd34:	d1f5      	bne.n	1dd22 <cancel_async_locked+0x52>
	list->tail = node;
   1dd36:	f8cc 2004 	str.w	r2, [ip, #4]
}
   1dd3a:	e7f2      	b.n	1dd22 <cancel_async_locked+0x52>
	list->tail = node;
   1dd3c:	f8cc 1004 	str.w	r1, [ip, #4]
}
   1dd40:	e7ef      	b.n	1dd22 <cancel_async_locked+0x52>

0001dd42 <work_timeout>:
{
   1dd42:	b510      	push	{r4, lr}
   1dd44:	b082      	sub	sp, #8
   1dd46:	4603      	mov	r3, r0
   1dd48:	f04f 0220 	mov.w	r2, #32
   1dd4c:	f3ef 8411 	mrs	r4, BASEPRI
   1dd50:	f382 8812 	msr	BASEPRI_MAX, r2
   1dd54:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   1dd58:	2200      	movs	r2, #0
   1dd5a:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   1dd5c:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   1dd60:	f022 0108 	bic.w	r1, r2, #8
   1dd64:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   1dd68:	f012 0f08 	tst.w	r2, #8
   1dd6c:	d105      	bne.n	1dd7a <work_timeout+0x38>
	__asm__ volatile(
   1dd6e:	f384 8811 	msr	BASEPRI, r4
   1dd72:	f3bf 8f6f 	isb	sy
}
   1dd76:	b002      	add	sp, #8
   1dd78:	bd10      	pop	{r4, pc}
   1dd7a:	3810      	subs	r0, #16
		queue = dw->queue;
   1dd7c:	699b      	ldr	r3, [r3, #24]
   1dd7e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   1dd80:	a901      	add	r1, sp, #4
   1dd82:	f7f5 f913 	bl	12fac <submit_to_queue_locked>
   1dd86:	e7f2      	b.n	1dd6e <work_timeout+0x2c>

0001dd88 <cancel_delayable_async_locked>:
{
   1dd88:	b510      	push	{r4, lr}
   1dd8a:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   1dd8c:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   1dd8e:	f023 0208 	bic.w	r2, r3, #8
   1dd92:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   1dd94:	f013 0f08 	tst.w	r3, #8
   1dd98:	d103      	bne.n	1dda2 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   1dd9a:	4620      	mov	r0, r4
   1dd9c:	f7ff ff98 	bl	1dcd0 <cancel_async_locked>
}
   1dda0:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   1dda2:	3010      	adds	r0, #16
   1dda4:	f000 f9de 	bl	1e164 <z_abort_timeout>
		ret = true;
   1dda8:	e7f7      	b.n	1dd9a <cancel_delayable_async_locked+0x12>

0001ddaa <k_work_submit_to_queue>:
{
   1ddaa:	b530      	push	{r4, r5, lr}
   1ddac:	b083      	sub	sp, #12
   1ddae:	9001      	str	r0, [sp, #4]
   1ddb0:	4608      	mov	r0, r1
	__asm__ volatile(
   1ddb2:	f04f 0320 	mov.w	r3, #32
   1ddb6:	f3ef 8511 	mrs	r5, BASEPRI
   1ddba:	f383 8812 	msr	BASEPRI_MAX, r3
   1ddbe:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1ddc2:	a901      	add	r1, sp, #4
   1ddc4:	f7f5 f8f2 	bl	12fac <submit_to_queue_locked>
   1ddc8:	4604      	mov	r4, r0
	__asm__ volatile(
   1ddca:	f385 8811 	msr	BASEPRI, r5
   1ddce:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
   1ddd2:	2800      	cmp	r0, #0
   1ddd4:	dc02      	bgt.n	1dddc <k_work_submit_to_queue+0x32>
}
   1ddd6:	4620      	mov	r0, r4
   1ddd8:	b003      	add	sp, #12
   1ddda:	bd30      	pop	{r4, r5, pc}
	__asm__ volatile(
   1dddc:	f04f 0320 	mov.w	r3, #32
   1dde0:	f3ef 8011 	mrs	r0, BASEPRI
   1dde4:	f383 8812 	msr	BASEPRI_MAX, r3
   1dde8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ddec:	f000 f845 	bl	1de7a <z_reschedule_irqlock>
	return ret;
   1ddf0:	e7f1      	b.n	1ddd6 <k_work_submit_to_queue+0x2c>

0001ddf2 <k_work_init_delayable>:
{
   1ddf2:	b538      	push	{r3, r4, r5, lr}
   1ddf4:	4604      	mov	r4, r0
   1ddf6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   1ddf8:	2230      	movs	r2, #48	; 0x30
   1ddfa:	2100      	movs	r1, #0
   1ddfc:	f7f6 fdfa 	bl	149f4 <memset>
   1de00:	6065      	str	r5, [r4, #4]
   1de02:	f44f 7380 	mov.w	r3, #256	; 0x100
   1de06:	60e3      	str	r3, [r4, #12]
}
   1de08:	bd38      	pop	{r3, r4, r5, pc}

0001de0a <k_work_schedule_for_queue>:
{
   1de0a:	b510      	push	{r4, lr}
   1de0c:	b082      	sub	sp, #8
   1de0e:	9001      	str	r0, [sp, #4]
   1de10:	f04f 0020 	mov.w	r0, #32
   1de14:	f3ef 8411 	mrs	r4, BASEPRI
   1de18:	f380 8812 	msr	BASEPRI_MAX, r0
   1de1c:	f3bf 8f6f 	isb	sy
	return *flagp;
   1de20:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1de22:	f010 0f0e 	tst.w	r0, #14
   1de26:	d006      	beq.n	1de36 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   1de28:	2000      	movs	r0, #0
	__asm__ volatile(
   1de2a:	f384 8811 	msr	BASEPRI, r4
   1de2e:	f3bf 8f6f 	isb	sy
}
   1de32:	b002      	add	sp, #8
   1de34:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   1de36:	a801      	add	r0, sp, #4
   1de38:	f7f5 f924 	bl	13084 <schedule_for_queue_locked>
   1de3c:	e7f5      	b.n	1de2a <k_work_schedule_for_queue+0x20>

0001de3e <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   1de3e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1de40:	f04f 0320 	mov.w	r3, #32
   1de44:	f3ef 8411 	mrs	r4, BASEPRI
   1de48:	f383 8812 	msr	BASEPRI_MAX, r3
   1de4c:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   1de50:	f7ff ff9a 	bl	1dd88 <cancel_delayable_async_locked>
	__asm__ volatile(
   1de54:	f384 8811 	msr	BASEPRI, r4
   1de58:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   1de5c:	bd10      	pop	{r4, pc}

0001de5e <thread_active_elsewhere>:
}
   1de5e:	2000      	movs	r0, #0
   1de60:	4770      	bx	lr

0001de62 <pended_on_thread>:
}
   1de62:	6880      	ldr	r0, [r0, #8]
   1de64:	4770      	bx	lr

0001de66 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1de66:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1de6a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   1de6e:	4283      	cmp	r3, r0
   1de70:	d001      	beq.n	1de76 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   1de72:	1ac0      	subs	r0, r0, r3
   1de74:	4770      	bx	lr
	return 0;
   1de76:	2000      	movs	r0, #0
}
   1de78:	4770      	bx	lr

0001de7a <z_reschedule_irqlock>:
{
   1de7a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1de7c:	4603      	mov	r3, r0
   1de7e:	b920      	cbnz	r0, 1de8a <z_reschedule_irqlock+0x10>
   1de80:	f3ef 8205 	mrs	r2, IPSR
   1de84:	b942      	cbnz	r2, 1de98 <z_reschedule_irqlock+0x1e>
   1de86:	2201      	movs	r2, #1
   1de88:	e000      	b.n	1de8c <z_reschedule_irqlock+0x12>
   1de8a:	2200      	movs	r2, #0
	if (resched(key)) {
   1de8c:	b932      	cbnz	r2, 1de9c <z_reschedule_irqlock+0x22>
   1de8e:	f383 8811 	msr	BASEPRI, r3
   1de92:	f3bf 8f6f 	isb	sy
}
   1de96:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1de98:	2200      	movs	r2, #0
   1de9a:	e7f7      	b.n	1de8c <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   1de9c:	4618      	mov	r0, r3
   1de9e:	f7e6 fda9 	bl	49f4 <arch_swap>
	return ret;
   1dea2:	e7f8      	b.n	1de96 <z_reschedule_irqlock+0x1c>

0001dea4 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   1dea4:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   1dea6:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   1dea8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1deaa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1deac:	2300      	movs	r3, #0
   1deae:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   1deb0:	604b      	str	r3, [r1, #4]
}
   1deb2:	4770      	bx	lr

0001deb4 <z_unpend_thread>:
{
   1deb4:	b538      	push	{r3, r4, r5, lr}
   1deb6:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1deb8:	2300      	movs	r3, #0
	__asm__ volatile(
   1deba:	f04f 0220 	mov.w	r2, #32
   1debe:	f3ef 8511 	mrs	r5, BASEPRI
   1dec2:	f382 8812 	msr	BASEPRI_MAX, r2
   1dec6:	f3bf 8f6f 	isb	sy
   1deca:	e010      	b.n	1deee <z_unpend_thread+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1decc:	4620      	mov	r0, r4
   1dece:	f7ff ffc8 	bl	1de62 <pended_on_thread>
   1ded2:	4621      	mov	r1, r4
   1ded4:	f7ff ffe6 	bl	1dea4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ded8:	7b63      	ldrb	r3, [r4, #13]
   1deda:	f023 0302 	bic.w	r3, r3, #2
   1dede:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1dee0:	2300      	movs	r3, #0
   1dee2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1dee4:	f385 8811 	msr	BASEPRI, r5
   1dee8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1deec:	2301      	movs	r3, #1
   1deee:	2b00      	cmp	r3, #0
   1def0:	d0ec      	beq.n	1decc <z_unpend_thread+0x18>
	return z_abort_timeout(&thread->base.timeout);
   1def2:	f104 0018 	add.w	r0, r4, #24
   1def6:	f000 f935 	bl	1e164 <z_abort_timeout>
}
   1defa:	bd38      	pop	{r3, r4, r5, pc}

0001defc <z_priq_dumb_best>:
{
   1defc:	4603      	mov	r3, r0
	return list->head == list;
   1defe:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1df00:	4283      	cmp	r3, r0
   1df02:	d000      	beq.n	1df06 <z_priq_dumb_best+0xa>
}
   1df04:	4770      	bx	lr
	struct k_thread *thread = NULL;
   1df06:	2000      	movs	r0, #0
	return thread;
   1df08:	e7fc      	b.n	1df04 <z_priq_dumb_best+0x8>

0001df0a <z_ready_thread>:
{
   1df0a:	b538      	push	{r3, r4, r5, lr}
   1df0c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1df0e:	2300      	movs	r3, #0
	__asm__ volatile(
   1df10:	f04f 0220 	mov.w	r2, #32
   1df14:	f3ef 8511 	mrs	r5, BASEPRI
   1df18:	f382 8812 	msr	BASEPRI_MAX, r2
   1df1c:	f3bf 8f6f 	isb	sy
   1df20:	e004      	b.n	1df2c <z_ready_thread+0x22>
	__asm__ volatile(
   1df22:	f385 8811 	msr	BASEPRI, r5
   1df26:	f3bf 8f6f 	isb	sy
   1df2a:	2301      	movs	r3, #1
   1df2c:	b943      	cbnz	r3, 1df40 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   1df2e:	4620      	mov	r0, r4
   1df30:	f7ff ff95 	bl	1de5e <thread_active_elsewhere>
   1df34:	2800      	cmp	r0, #0
   1df36:	d1f4      	bne.n	1df22 <z_ready_thread+0x18>
			ready_thread(thread);
   1df38:	4620      	mov	r0, r4
   1df3a:	f7f5 fb2d 	bl	13598 <ready_thread>
   1df3e:	e7f0      	b.n	1df22 <z_ready_thread+0x18>
}
   1df40:	bd38      	pop	{r3, r4, r5, pc}

0001df42 <z_thread_timeout>:
{
   1df42:	b570      	push	{r4, r5, r6, lr}
   1df44:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   1df46:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   1df4a:	2300      	movs	r3, #0
	__asm__ volatile(
   1df4c:	f04f 0220 	mov.w	r2, #32
   1df50:	f3ef 8611 	mrs	r6, BASEPRI
   1df54:	f382 8812 	msr	BASEPRI_MAX, r2
   1df58:	f3bf 8f6f 	isb	sy
   1df5c:	e011      	b.n	1df82 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1df5e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1df62:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1df66:	f804 3c0b 	strb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1df6a:	f023 0310 	bic.w	r3, r3, #16
   1df6e:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   1df72:	4628      	mov	r0, r5
   1df74:	f7f5 fb10 	bl	13598 <ready_thread>
	__asm__ volatile(
   1df78:	f386 8811 	msr	BASEPRI, r6
   1df7c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1df80:	2301      	movs	r3, #1
   1df82:	b9ab      	cbnz	r3, 1dfb0 <z_thread_timeout+0x6e>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   1df84:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   1df88:	f013 0f28 	tst.w	r3, #40	; 0x28
   1df8c:	d1f4      	bne.n	1df78 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
   1df8e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1df92:	2b00      	cmp	r3, #0
   1df94:	d0e3      	beq.n	1df5e <z_thread_timeout+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1df96:	4628      	mov	r0, r5
   1df98:	f7ff ff63 	bl	1de62 <pended_on_thread>
   1df9c:	4629      	mov	r1, r5
   1df9e:	f7ff ff81 	bl	1dea4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1dfa2:	7b6b      	ldrb	r3, [r5, #13]
   1dfa4:	f023 0302 	bic.w	r3, r3, #2
   1dfa8:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1dfaa:	2300      	movs	r3, #0
   1dfac:	60ab      	str	r3, [r5, #8]
}
   1dfae:	e7d6      	b.n	1df5e <z_thread_timeout+0x1c>
}
   1dfb0:	bd70      	pop	{r4, r5, r6, pc}

0001dfb2 <add_to_waitq_locked>:
{
   1dfb2:	b570      	push	{r4, r5, r6, lr}
   1dfb4:	4605      	mov	r5, r0
   1dfb6:	460e      	mov	r6, r1
	unready_thread(thread);
   1dfb8:	f7f5 fb4c 	bl	13654 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1dfbc:	7b6b      	ldrb	r3, [r5, #13]
   1dfbe:	f043 0302 	orr.w	r3, r3, #2
   1dfc2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   1dfc4:	b1b6      	cbz	r6, 1dff4 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   1dfc6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   1dfc8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1dfca:	42a6      	cmp	r6, r4
   1dfcc:	d019      	beq.n	1e002 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dfce:	b164      	cbz	r4, 1dfea <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1dfd0:	4621      	mov	r1, r4
   1dfd2:	4628      	mov	r0, r5
   1dfd4:	f7ff ff47 	bl	1de66 <z_sched_prio_cmp>
   1dfd8:	2800      	cmp	r0, #0
   1dfda:	dc0c      	bgt.n	1dff6 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1dfdc:	b12c      	cbz	r4, 1dfea <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   1dfde:	6873      	ldr	r3, [r6, #4]
   1dfe0:	429c      	cmp	r4, r3
   1dfe2:	d002      	beq.n	1dfea <add_to_waitq_locked+0x38>
   1dfe4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1dfe6:	2c00      	cmp	r4, #0
   1dfe8:	d1f1      	bne.n	1dfce <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   1dfea:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   1dfec:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   1dfee:	606b      	str	r3, [r5, #4]
	tail->next = node;
   1dff0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1dff2:	6075      	str	r5, [r6, #4]
}
   1dff4:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   1dff6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1dff8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1dffa:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1dffc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1dffe:	6065      	str	r5, [r4, #4]
}
   1e000:	e7f8      	b.n	1dff4 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1e002:	2400      	movs	r4, #0
   1e004:	e7e3      	b.n	1dfce <add_to_waitq_locked+0x1c>

0001e006 <pend>:
{
   1e006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e00a:	4605      	mov	r5, r0
   1e00c:	460e      	mov	r6, r1
   1e00e:	4691      	mov	r9, r2
   1e010:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1e012:	2400      	movs	r4, #0
	__asm__ volatile(
   1e014:	f04f 0320 	mov.w	r3, #32
   1e018:	f3ef 8711 	mrs	r7, BASEPRI
   1e01c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e020:	f3bf 8f6f 	isb	sy
   1e024:	e008      	b.n	1e038 <pend+0x32>
		add_to_waitq_locked(thread, wait_q);
   1e026:	4631      	mov	r1, r6
   1e028:	4628      	mov	r0, r5
   1e02a:	f7ff ffc2 	bl	1dfb2 <add_to_waitq_locked>
	__asm__ volatile(
   1e02e:	f387 8811 	msr	BASEPRI, r7
   1e032:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e036:	2401      	movs	r4, #1
   1e038:	2c00      	cmp	r4, #0
   1e03a:	d0f4      	beq.n	1e026 <pend+0x20>
	add_thread_timeout(thread, timeout);
   1e03c:	464a      	mov	r2, r9
   1e03e:	4643      	mov	r3, r8
   1e040:	4628      	mov	r0, r5
   1e042:	f7f5 f93d 	bl	132c0 <add_thread_timeout>
}
   1e046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e04a <z_unpend_first_thread>:
{
   1e04a:	b570      	push	{r4, r5, r6, lr}
   1e04c:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
   1e04e:	2300      	movs	r3, #0
	__asm__ volatile(
   1e050:	f04f 0220 	mov.w	r2, #32
   1e054:	f3ef 8611 	mrs	r6, BASEPRI
   1e058:	f382 8812 	msr	BASEPRI_MAX, r2
   1e05c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   1e060:	461c      	mov	r4, r3
   1e062:	e004      	b.n	1e06e <z_unpend_first_thread+0x24>
	__asm__ volatile(
   1e064:	f386 8811 	msr	BASEPRI, r6
   1e068:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e06c:	2301      	movs	r3, #1
   1e06e:	b9ab      	cbnz	r3, 1e09c <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   1e070:	4628      	mov	r0, r5
   1e072:	f7ff ff43 	bl	1defc <z_priq_dumb_best>
		if (thread != NULL) {
   1e076:	4604      	mov	r4, r0
   1e078:	2800      	cmp	r0, #0
   1e07a:	d0f3      	beq.n	1e064 <z_unpend_first_thread+0x1a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e07c:	f7ff fef1 	bl	1de62 <pended_on_thread>
   1e080:	4621      	mov	r1, r4
   1e082:	f7ff ff0f 	bl	1dea4 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1e086:	7b63      	ldrb	r3, [r4, #13]
   1e088:	f023 0302 	bic.w	r3, r3, #2
   1e08c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e08e:	2300      	movs	r3, #0
   1e090:	60a3      	str	r3, [r4, #8]
   1e092:	f104 0018 	add.w	r0, r4, #24
   1e096:	f000 f865 	bl	1e164 <z_abort_timeout>
   1e09a:	e7e3      	b.n	1e064 <z_unpend_first_thread+0x1a>
}
   1e09c:	4620      	mov	r0, r4
   1e09e:	bd70      	pop	{r4, r5, r6, pc}

0001e0a0 <z_unpend_all>:
{
   1e0a0:	b538      	push	{r3, r4, r5, lr}
   1e0a2:	4605      	mov	r5, r0
	int need_sched = 0;
   1e0a4:	2000      	movs	r0, #0
	return list->head == list;
   1e0a6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1e0a8:	42a5      	cmp	r5, r4
   1e0aa:	d008      	beq.n	1e0be <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1e0ac:	b13c      	cbz	r4, 1e0be <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   1e0ae:	4620      	mov	r0, r4
   1e0b0:	f7ff ff00 	bl	1deb4 <z_unpend_thread>
		z_ready_thread(thread);
   1e0b4:	4620      	mov	r0, r4
   1e0b6:	f7ff ff28 	bl	1df0a <z_ready_thread>
		need_sched = 1;
   1e0ba:	2001      	movs	r0, #1
   1e0bc:	e7f3      	b.n	1e0a6 <z_unpend_all+0x6>
}
   1e0be:	bd38      	pop	{r3, r4, r5, pc}

0001e0c0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
   1e0c0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   1e0c2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   1e0c4:	6083      	str	r3, [r0, #8]
}
   1e0c6:	4770      	bx	lr

0001e0c8 <z_sched_wake>:
{
   1e0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e0cc:	4605      	mov	r5, r0
   1e0ce:	4688      	mov	r8, r1
   1e0d0:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   1e0d2:	2300      	movs	r3, #0
	__asm__ volatile(
   1e0d4:	f04f 0220 	mov.w	r2, #32
   1e0d8:	f3ef 8611 	mrs	r6, BASEPRI
   1e0dc:	f382 8812 	msr	BASEPRI_MAX, r2
   1e0e0:	f3bf 8f6f 	isb	sy
	bool ret = false;
   1e0e4:	4699      	mov	r9, r3
   1e0e6:	e004      	b.n	1e0f2 <z_sched_wake+0x2a>
	__asm__ volatile(
   1e0e8:	f386 8811 	msr	BASEPRI, r6
   1e0ec:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1e0f0:	2301      	movs	r3, #1
   1e0f2:	b9eb      	cbnz	r3, 1e130 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   1e0f4:	4628      	mov	r0, r5
   1e0f6:	f7ff ff01 	bl	1defc <z_priq_dumb_best>
		if (thread != NULL) {
   1e0fa:	4604      	mov	r4, r0
   1e0fc:	2800      	cmp	r0, #0
   1e0fe:	d0f3      	beq.n	1e0e8 <z_sched_wake+0x20>
   1e100:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   1e104:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1e106:	f7ff feac 	bl	1de62 <pended_on_thread>
   1e10a:	4621      	mov	r1, r4
   1e10c:	f7ff feca 	bl	1dea4 <z_priq_dumb_remove>
   1e110:	7b63      	ldrb	r3, [r4, #13]
   1e112:	f023 0302 	bic.w	r3, r3, #2
   1e116:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1e118:	2300      	movs	r3, #0
   1e11a:	60a3      	str	r3, [r4, #8]
   1e11c:	f104 0018 	add.w	r0, r4, #24
   1e120:	f000 f820 	bl	1e164 <z_abort_timeout>
			ready_thread(thread);
   1e124:	4620      	mov	r0, r4
   1e126:	f7f5 fa37 	bl	13598 <ready_thread>
			ret = true;
   1e12a:	f04f 0901 	mov.w	r9, #1
   1e12e:	e7db      	b.n	1e0e8 <z_sched_wake+0x20>
}
   1e130:	4648      	mov	r0, r9
   1e132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001e136 <remove_timeout>:
{
   1e136:	b510      	push	{r4, lr}
   1e138:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   1e13a:	f7f5 fd01 	bl	13b40 <next>
   1e13e:	b148      	cbz	r0, 1e154 <remove_timeout+0x1e>
   1e140:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   1e142:	6920      	ldr	r0, [r4, #16]
   1e144:	6961      	ldr	r1, [r4, #20]
   1e146:	6913      	ldr	r3, [r2, #16]
   1e148:	181b      	adds	r3, r3, r0
   1e14a:	6950      	ldr	r0, [r2, #20]
   1e14c:	eb41 0100 	adc.w	r1, r1, r0
   1e150:	6113      	str	r3, [r2, #16]
   1e152:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   1e154:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   1e156:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   1e158:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e15a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e15c:	2300      	movs	r3, #0
   1e15e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1e160:	6063      	str	r3, [r4, #4]
}
   1e162:	bd10      	pop	{r4, pc}

0001e164 <z_abort_timeout>:
{
   1e164:	b570      	push	{r4, r5, r6, lr}
   1e166:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   1e168:	2300      	movs	r3, #0
	__asm__ volatile(
   1e16a:	f04f 0220 	mov.w	r2, #32
   1e16e:	f3ef 8611 	mrs	r6, BASEPRI
   1e172:	f382 8812 	msr	BASEPRI_MAX, r2
   1e176:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   1e17a:	f06f 0015 	mvn.w	r0, #21
   1e17e:	e004      	b.n	1e18a <z_abort_timeout+0x26>
	__asm__ volatile(
   1e180:	f386 8811 	msr	BASEPRI, r6
   1e184:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e188:	2301      	movs	r3, #1
   1e18a:	461d      	mov	r5, r3
   1e18c:	b93b      	cbnz	r3, 1e19e <z_abort_timeout+0x3a>
	return node->next != NULL;
   1e18e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   1e190:	2b00      	cmp	r3, #0
   1e192:	d0f5      	beq.n	1e180 <z_abort_timeout+0x1c>
			remove_timeout(to);
   1e194:	4620      	mov	r0, r4
   1e196:	f7ff ffce 	bl	1e136 <remove_timeout>
			ret = 0;
   1e19a:	4628      	mov	r0, r5
   1e19c:	e7f0      	b.n	1e180 <z_abort_timeout+0x1c>
}
   1e19e:	bd70      	pop	{r4, r5, r6, pc}

0001e1a0 <z_get_next_timeout_expiry>:
{
   1e1a0:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   1e1a2:	2300      	movs	r3, #0
	__asm__ volatile(
   1e1a4:	f04f 0220 	mov.w	r2, #32
   1e1a8:	f3ef 8411 	mrs	r4, BASEPRI
   1e1ac:	f382 8812 	msr	BASEPRI_MAX, r2
   1e1b0:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   1e1b4:	f04f 30ff 	mov.w	r0, #4294967295
   1e1b8:	e006      	b.n	1e1c8 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
   1e1ba:	f7f5 fcd9 	bl	13b70 <next_timeout>
	__asm__ volatile(
   1e1be:	f384 8811 	msr	BASEPRI, r4
   1e1c2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e1c6:	2301      	movs	r3, #1
   1e1c8:	2b00      	cmp	r3, #0
   1e1ca:	d0f6      	beq.n	1e1ba <z_get_next_timeout_expiry+0x1a>
}
   1e1cc:	bd10      	pop	{r4, pc}

0001e1ce <z_set_timeout_expiry>:
{
   1e1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1d0:	4605      	mov	r5, r0
   1e1d2:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   1e1d4:	2300      	movs	r3, #0
	__asm__ volatile(
   1e1d6:	f04f 0220 	mov.w	r2, #32
   1e1da:	f3ef 8611 	mrs	r6, BASEPRI
   1e1de:	f382 8812 	msr	BASEPRI_MAX, r2
   1e1e2:	f3bf 8f6f 	isb	sy
   1e1e6:	e00a      	b.n	1e1fe <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   1e1e8:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   1e1ea:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1e1ee:	2801      	cmp	r0, #1
   1e1f0:	dd00      	ble.n	1e1f4 <z_set_timeout_expiry+0x26>
   1e1f2:	b97c      	cbnz	r4, 1e214 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   1e1f4:	f386 8811 	msr	BASEPRI, r6
   1e1f8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1e1fc:	2301      	movs	r3, #1
   1e1fe:	461c      	mov	r4, r3
   1e200:	b97b      	cbnz	r3, 1e222 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   1e202:	f7f5 fcb5 	bl	13b70 <next_timeout>
			      || (ticks <= next_to);
   1e206:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e20a:	d0ed      	beq.n	1e1e8 <z_set_timeout_expiry+0x1a>
   1e20c:	42a8      	cmp	r0, r5
   1e20e:	dbec      	blt.n	1e1ea <z_set_timeout_expiry+0x1c>
   1e210:	2401      	movs	r4, #1
   1e212:	e7ea      	b.n	1e1ea <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   1e214:	4639      	mov	r1, r7
   1e216:	42a8      	cmp	r0, r5
   1e218:	bfa8      	it	ge
   1e21a:	4628      	movge	r0, r5
   1e21c:	f7f3 fa88 	bl	11730 <sys_clock_set_timeout>
   1e220:	e7e8      	b.n	1e1f4 <z_set_timeout_expiry+0x26>
}
   1e222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e224 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   1e224:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   1e226:	f7f5 fdb7 	bl	13d98 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1e22a:	bd08      	pop	{r3, pc}

0001e22c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   1e22c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   1e22e:	f7f5 fdb3 	bl	13d98 <sys_clock_tick_get>
}
   1e232:	bd08      	pop	{r3, pc}

0001e234 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   1e234:	b900      	cbnz	r0, 1e238 <z_impl_k_busy_wait+0x4>
   1e236:	4770      	bx	lr
{
   1e238:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   1e23a:	f7e6 ff9f 	bl	517c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   1e23e:	bd08      	pop	{r3, pc}

0001e240 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1e240:	f1b1 3fff 	cmp.w	r1, #4294967295
   1e244:	bf08      	it	eq
   1e246:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1e24a:	d021      	beq.n	1e290 <sys_clock_timeout_end_calc+0x50>
{
   1e24c:	b538      	push	{r3, r4, r5, lr}
   1e24e:	4605      	mov	r5, r0
   1e250:	460c      	mov	r4, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1e252:	ea51 0300 	orrs.w	r3, r1, r0
   1e256:	d009      	beq.n	1e26c <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1e258:	f06f 0301 	mvn.w	r3, #1
   1e25c:	1a18      	subs	r0, r3, r0
   1e25e:	f04f 33ff 	mov.w	r3, #4294967295
   1e262:	eb63 0101 	sbc.w	r1, r3, r1
   1e266:	2900      	cmp	r1, #0
   1e268:	db03      	blt.n	1e272 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   1e26a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   1e26c:	f7f5 fd94 	bl	13d98 <sys_clock_tick_get>
   1e270:	e7fb      	b.n	1e26a <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   1e272:	f7f5 fd91 	bl	13d98 <sys_clock_tick_get>
   1e276:	4603      	mov	r3, r0
   1e278:	4628      	mov	r0, r5
   1e27a:	4622      	mov	r2, r4
   1e27c:	2d01      	cmp	r5, #1
   1e27e:	f174 0400 	sbcs.w	r4, r4, #0
   1e282:	da01      	bge.n	1e288 <sys_clock_timeout_end_calc+0x48>
   1e284:	2001      	movs	r0, #1
   1e286:	2200      	movs	r2, #0
   1e288:	1818      	adds	r0, r3, r0
   1e28a:	eb41 0102 	adc.w	r1, r1, r2
   1e28e:	e7ec      	b.n	1e26a <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   1e290:	f04f 30ff 	mov.w	r0, #4294967295
   1e294:	4601      	mov	r1, r0
}
   1e296:	4770      	bx	lr

0001e298 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   1e298:	b108      	cbz	r0, 1e29e <poller_thread+0x6>
   1e29a:	3860      	subs	r0, #96	; 0x60
   1e29c:	4770      	bx	lr
}
   1e29e:	4770      	bx	lr

0001e2a0 <signal_poller>:
{
   1e2a0:	b538      	push	{r3, r4, r5, lr}
   1e2a2:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   1e2a4:	6880      	ldr	r0, [r0, #8]
   1e2a6:	f7ff fff7 	bl	1e298 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   1e2aa:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   1e2ac:	f013 0f02 	tst.w	r3, #2
   1e2b0:	d025      	beq.n	1e2fe <signal_poller+0x5e>
   1e2b2:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   1e2b4:	6a82      	ldr	r2, [r0, #40]	; 0x28
   1e2b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (z_is_thread_timeout_expired(thread)) {
   1e2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e2bc:	bf08      	it	eq
   1e2be:	f112 0f02 	cmneq.w	r2, #2
   1e2c2:	d01e      	beq.n	1e302 <signal_poller+0x62>
	z_unpend_thread(thread);
   1e2c4:	f7ff fdf6 	bl	1deb4 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1e2c8:	2d08      	cmp	r5, #8
   1e2ca:	d00a      	beq.n	1e2e2 <signal_poller+0x42>
   1e2cc:	2300      	movs	r3, #0
   1e2ce:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   1e2d2:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1e2d4:	f013 0f1f 	tst.w	r3, #31
   1e2d8:	d108      	bne.n	1e2ec <signal_poller+0x4c>
   1e2da:	69a3      	ldr	r3, [r4, #24]
   1e2dc:	b123      	cbz	r3, 1e2e8 <signal_poller+0x48>
   1e2de:	2300      	movs	r3, #0
   1e2e0:	e005      	b.n	1e2ee <signal_poller+0x4e>
   1e2e2:	f06f 0303 	mvn.w	r3, #3
   1e2e6:	e7f2      	b.n	1e2ce <signal_poller+0x2e>
   1e2e8:	2301      	movs	r3, #1
   1e2ea:	e000      	b.n	1e2ee <signal_poller+0x4e>
   1e2ec:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   1e2ee:	b90b      	cbnz	r3, 1e2f4 <signal_poller+0x54>
		return 0;
   1e2f0:	2000      	movs	r0, #0
   1e2f2:	e005      	b.n	1e300 <signal_poller+0x60>
	z_ready_thread(thread);
   1e2f4:	4620      	mov	r0, r4
   1e2f6:	f7ff fe08 	bl	1df0a <z_ready_thread>
	return 0;
   1e2fa:	2000      	movs	r0, #0
   1e2fc:	e000      	b.n	1e300 <signal_poller+0x60>
		return 0;
   1e2fe:	2000      	movs	r0, #0
}
   1e300:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   1e302:	f06f 000a 	mvn.w	r0, #10
   1e306:	e7fb      	b.n	1e300 <signal_poller+0x60>

0001e308 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   1e308:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   1e30a:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   1e30c:	7823      	ldrb	r3, [r4, #0]
   1e30e:	b173      	cbz	r3, 1e32e <signal_triggered_work+0x26>
   1e310:	f854 5c04 	ldr.w	r5, [r4, #-4]
   1e314:	b15d      	cbz	r5, 1e32e <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   1e316:	f1a4 0614 	sub.w	r6, r4, #20
   1e31a:	f104 0014 	add.w	r0, r4, #20
   1e31e:	f7ff ff21 	bl	1e164 <z_abort_timeout>
		twork->poll_result = 0;
   1e322:	2300      	movs	r3, #0
   1e324:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   1e326:	4631      	mov	r1, r6
   1e328:	4628      	mov	r0, r5
   1e32a:	f7ff fd3e 	bl	1ddaa <k_work_submit_to_queue>
	}

	return 0;
}
   1e32e:	2000      	movs	r0, #0
   1e330:	bd70      	pop	{r4, r5, r6, pc}

0001e332 <signal_poll_event>:
{
   1e332:	b570      	push	{r4, r5, r6, lr}
   1e334:	4604      	mov	r4, r0
   1e336:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   1e338:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   1e33a:	b1d6      	cbz	r6, 1e372 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   1e33c:	7873      	ldrb	r3, [r6, #1]
   1e33e:	2b01      	cmp	r3, #1
   1e340:	d00d      	beq.n	1e35e <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   1e342:	2b02      	cmp	r3, #2
   1e344:	d012      	beq.n	1e36c <signal_poll_event+0x3a>
		poller->is_polling = false;
   1e346:	2000      	movs	r0, #0
   1e348:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   1e34a:	2300      	movs	r3, #0
   1e34c:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   1e34e:	68e3      	ldr	r3, [r4, #12]
   1e350:	f3c3 3145 	ubfx	r1, r3, #13, #6
   1e354:	430d      	orrs	r5, r1
   1e356:	f365 3352 	bfi	r3, r5, #13, #6
   1e35a:	60e3      	str	r3, [r4, #12]
}
   1e35c:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   1e35e:	f7ff ff9f 	bl	1e2a0 <signal_poller>
		poller->is_polling = false;
   1e362:	2300      	movs	r3, #0
   1e364:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   1e366:	4298      	cmp	r0, r3
   1e368:	daef      	bge.n	1e34a <signal_poll_event+0x18>
   1e36a:	e7f7      	b.n	1e35c <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   1e36c:	f7ff ffcc 	bl	1e308 <signal_triggered_work>
   1e370:	e7f7      	b.n	1e362 <signal_poll_event+0x30>
	int retcode = 0;
   1e372:	2000      	movs	r0, #0
   1e374:	e7e9      	b.n	1e34a <signal_poll_event+0x18>

0001e376 <z_handle_obj_poll_events>:
{
   1e376:	b508      	push	{r3, lr}
   1e378:	4603      	mov	r3, r0
	return list->head == list;
   1e37a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1e37c:	4283      	cmp	r3, r0
   1e37e:	d009      	beq.n	1e394 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   1e380:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1e382:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1e384:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1e386:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1e388:	2300      	movs	r3, #0
   1e38a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1e38c:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   1e38e:	b108      	cbz	r0, 1e394 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   1e390:	f7ff ffcf 	bl	1e332 <signal_poll_event>
}
   1e394:	bd08      	pop	{r3, pc}

0001e396 <z_heap_aligned_alloc>:
{
   1e396:	b5d0      	push	{r4, r6, r7, lr}
   1e398:	b082      	sub	sp, #8
   1e39a:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1e39c:	2300      	movs	r3, #0
   1e39e:	3204      	adds	r2, #4
   1e3a0:	d20e      	bcs.n	1e3c0 <z_heap_aligned_alloc+0x2a>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   1e3a2:	b97b      	cbnz	r3, 1e3c4 <z_heap_aligned_alloc+0x2e>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1e3a4:	2600      	movs	r6, #0
   1e3a6:	2700      	movs	r7, #0
   1e3a8:	e9cd 6700 	strd	r6, r7, [sp]
   1e3ac:	f041 0104 	orr.w	r1, r1, #4
   1e3b0:	4620      	mov	r0, r4
   1e3b2:	f7ff facd 	bl	1d950 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1e3b6:	b108      	cbz	r0, 1e3bc <z_heap_aligned_alloc+0x26>
	*heap_ref = heap;
   1e3b8:	f840 4b04 	str.w	r4, [r0], #4
}
   1e3bc:	b002      	add	sp, #8
   1e3be:	bdd0      	pop	{r4, r6, r7, pc}
   1e3c0:	2301      	movs	r3, #1
   1e3c2:	e7ee      	b.n	1e3a2 <z_heap_aligned_alloc+0xc>
		return NULL;
   1e3c4:	2000      	movs	r0, #0
   1e3c6:	e7f9      	b.n	1e3bc <z_heap_aligned_alloc+0x26>

0001e3c8 <k_free>:
	if (ptr != NULL) {
   1e3c8:	b130      	cbz	r0, 1e3d8 <k_free+0x10>
{
   1e3ca:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1e3cc:	1f01      	subs	r1, r0, #4
   1e3ce:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e3d2:	f7ff fb06 	bl	1d9e2 <k_heap_free>
}
   1e3d6:	bd08      	pop	{r3, pc}
   1e3d8:	4770      	bx	lr

0001e3da <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1e3da:	4770      	bx	lr

0001e3dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1e3dc:	f7f3 bbb4 	b.w	11b48 <SystemInit>
